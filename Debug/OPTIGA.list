
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008104  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  080082a4  080082a4  000092a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a58  08008a58  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008a58  08008a58  00009a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a60  08008a60  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a64  08008a64  00009a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008a68  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000068  08008ad0  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08008ad0  0000a758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146df  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c5  00000000  00000000  0001e777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00021c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee0  00000000  00000000  00022f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018962  00000000  00000000  00023e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001787b  00000000  00000000  0003c792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a71  00000000  00000000  0005400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9a7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ec  00000000  00000000  000e9ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ef2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800828c 	.word	0x0800828c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800828c 	.word	0x0800828c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <int_to_str>:
  * @brief  Convert an Integer to a string
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void int_to_str(uint8_t* p_str, uint32_t intNum) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, divider = 1000000000,pos = 0, status = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <int_to_str+0x94>)
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]

	for (i = 0;i < 10;i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e02e      	b.n	80005ee <int_to_str+0x7e>
		p_str[pos++] = (intNum/divider) + 48;
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	fbb2 f3f3 	udiv	r3, r2, r3
 8000598:	b2da      	uxtb	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1c59      	adds	r1, r3, #1
 800059e:	60f9      	str	r1, [r7, #12]
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	440b      	add	r3, r1
 80005a4:	3230      	adds	r2, #48	@ 0x30
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	701a      	strb	r2, [r3, #0]
		intNum %= divider;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80005b2:	6939      	ldr	r1, [r7, #16]
 80005b4:	fb01 f202 	mul.w	r2, r1, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
		divider /= 10;
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <int_to_str+0x98>)
 80005c0:	fba2 2303 	umull	r2, r3, r2, r3
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	613b      	str	r3, [r7, #16]
		if ((p_str[pos-1] == '0') || (status == 0)) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b30      	cmp	r3, #48	@ 0x30
 80005d4:	d002      	beq.n	80005dc <int_to_str+0x6c>
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <int_to_str+0x72>
			pos = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <int_to_str+0x78>
		}
		else {
			status++;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
	for (i = 0;i < 10;i++) {
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	d9cd      	bls.n	8000590 <int_to_str+0x20>
		}
	}
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	3b9aca00 	.word	0x3b9aca00
 8000608:	cccccccd 	.word	0xcccccccd

0800060c <str_to_int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */

uint32_t str_to_int(uint8_t *p_inputStr, uint32_t* p_intNum) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, res = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
	  uint32_t val = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]

	  if ((p_inputStr[0] == '0') && ((p_inputStr[1] == 'x') || (p_inputStr[1] == 'X')))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b30      	cmp	r3, #48	@ 0x30
 8000628:	f040 80d7 	bne.w	80007da <str_to_int+0x1ce>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b78      	cmp	r3, #120	@ 0x78
 8000634:	d005      	beq.n	8000642 <str_to_int+0x36>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b58      	cmp	r3, #88	@ 0x58
 800063e:	f040 80cc 	bne.w	80007da <str_to_int+0x1ce>
	  {
	    i = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000646:	e057      	b.n	80006f8 <str_to_int+0xec>
	    {
	      if (IS_VALID_HEX(p_inputStr[i]))
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b40      	cmp	r3, #64	@ 0x40
 8000652:	d905      	bls.n	8000660 <str_to_int+0x54>
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b46      	cmp	r3, #70	@ 0x46
 800065e:	d917      	bls.n	8000690 <str_to_int+0x84>
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b60      	cmp	r3, #96	@ 0x60
 800066a:	d905      	bls.n	8000678 <str_to_int+0x6c>
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b66      	cmp	r3, #102	@ 0x66
 8000676:	d90b      	bls.n	8000690 <str_to_int+0x84>
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b2f      	cmp	r3, #47	@ 0x2f
 8000682:	d936      	bls.n	80006f2 <str_to_int+0xe6>
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b39      	cmp	r3, #57	@ 0x39
 800068e:	d830      	bhi.n	80006f2 <str_to_int+0xe6>
	      {
	        val = (val << 4) + CONVERTHEX(p_inputStr[i]);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	440a      	add	r2, r1
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	2a2f      	cmp	r2, #47	@ 0x2f
 800069e:	d90b      	bls.n	80006b8 <str_to_int+0xac>
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	440a      	add	r2, r1
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	2a39      	cmp	r2, #57	@ 0x39
 80006aa:	d805      	bhi.n	80006b8 <str_to_int+0xac>
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	440a      	add	r2, r1
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	3a30      	subs	r2, #48	@ 0x30
 80006b6:	e016      	b.n	80006e6 <str_to_int+0xda>
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	440a      	add	r2, r1
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a40      	cmp	r2, #64	@ 0x40
 80006c2:	d90b      	bls.n	80006dc <str_to_int+0xd0>
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	440a      	add	r2, r1
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	2a46      	cmp	r2, #70	@ 0x46
 80006ce:	d805      	bhi.n	80006dc <str_to_int+0xd0>
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	440a      	add	r2, r1
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	3a37      	subs	r2, #55	@ 0x37
 80006da:	e004      	b.n	80006e6 <str_to_int+0xda>
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	440a      	add	r2, r1
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	3a57      	subs	r2, #87	@ 0x57
 80006e6:	4413      	add	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
	      {
	        /* Return 0, Invalid input */
	        res = 0;
	        break;
	      }
	      i++;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e002      	b.n	80006f8 <str_to_int+0xec>
	        res = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
	        break;
 80006f6:	e008      	b.n	800070a <str_to_int+0xfe>
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b0a      	cmp	r3, #10
 80006fc:	d805      	bhi.n	800070a <str_to_int+0xfe>
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d19e      	bne.n	8000648 <str_to_int+0x3c>
	    }

	    /* valid result */
	    if (p_inputStr[i] == '\0')
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d167      	bne.n	80007e6 <str_to_int+0x1da>
	    {
	      *p_intNum= val;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]
	      res = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
	    if (p_inputStr[i] == '\0')
 8000720:	e061      	b.n	80007e6 <str_to_int+0x1da>
	  }
	  else /* max 10-digit decimal input */
	  {
	    while ( ( i < 11 ) && ( res != 1 ) )
	    {
	      if (p_inputStr[i] == '\0')
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <str_to_int+0x12e>
	      {
	        *p_intNum = val;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	601a      	str	r2, [r3, #0]
	        /* return 1 */
	        res = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e04c      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'k') || (p_inputStr[i] == 'K')) && (i > 0))
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b6b      	cmp	r3, #107	@ 0x6b
 8000744:	d005      	beq.n	8000752 <str_to_int+0x146>
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000750:	d10b      	bne.n	800076a <str_to_int+0x15e>
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <str_to_int+0x15e>
	      {
	        val = val << 10;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	e034      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'm') || (p_inputStr[i] == 'M')) && (i > 0))
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b6d      	cmp	r3, #109	@ 0x6d
 8000774:	d005      	beq.n	8000782 <str_to_int+0x176>
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000780:	d10b      	bne.n	800079a <str_to_int+0x18e>
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d008      	beq.n	800079a <str_to_int+0x18e>
	      {
	        val = val << 20;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	051b      	lsls	r3, r3, #20
 800078c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	e01c      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (ISVALIDDEC(p_inputStr[i]))
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a4:	d913      	bls.n	80007ce <str_to_int+0x1c2>
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	@ 0x39
 80007b0:	d80d      	bhi.n	80007ce <str_to_int+0x1c2>
	      {
	        val = val * 10 + CONVERTDEC(p_inputStr[i]);
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	440b      	add	r3, r1
 80007c8:	3b30      	subs	r3, #48	@ 0x30
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e002      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else
	      {
	        /* return 0, Invalid input */
	        res = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
	        break;
 80007d2:	e008      	b.n	80007e6 <str_to_int+0x1da>
	      }
	      i++;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( res != 1 ) )
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b0a      	cmp	r3, #10
 80007de:	d802      	bhi.n	80007e6 <str_to_int+0x1da>
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d19d      	bne.n	8000722 <str_to_int+0x116>
	    }
	  }

	  return res;
 80007e6:	693b      	ldr	r3, [r7, #16]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <serial_put_string>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */

void serial_put_string(uint8_t* p_string) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	 uint16_t length = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	81fb      	strh	r3, [r7, #14]

	  while (p_string[length] != '\0')
 8000800:	e002      	b.n	8000808 <serial_put_string+0x14>
	  {
	    length++;
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	81fb      	strh	r3, [r7, #14]
	  while (p_string[length] != '\0')
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f6      	bne.n	8000802 <serial_put_string+0xe>
	  }
	  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000814:	89fa      	ldrh	r2, [r7, #14]
 8000816:	2364      	movs	r3, #100	@ 0x64
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <serial_put_string+0x34>)
 800081c:	f005 fcc8 	bl	80061b0 <HAL_UART_Transmit>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000128 	.word	0x20000128

0800082c <serial_put_byte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */

HAL_StatusTypeDef serial_put_byte(uint8_t param) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	/* May be timeouted... */
	  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <serial_put_byte+0x34>)
 8000838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000840:	d103      	bne.n	800084a <serial_put_byte+0x1e>
	  {
	    UartHandle.gState = HAL_UART_STATE_READY;
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <serial_put_byte+0x34>)
 8000844:	2220      	movs	r2, #32
 8000846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  }
	  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 800084a:	1df9      	adds	r1, r7, #7
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	2201      	movs	r2, #1
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <serial_put_byte+0x34>)
 8000852:	f005 fcad 	bl	80061b0 <HAL_UART_Transmit>
 8000856:	4603      	mov	r3, r0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000128 	.word	0x20000128

08000864 <get_sector>:
#include "ymodem/flash_if.h"



uint32_t get_sector(uint32_t Address)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if (Address < 0x08004000) return FLASH_SECTOR_0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <get_sector+0x78>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d201      	bcs.n	8000878 <get_sector+0x14>
 8000874:	2300      	movs	r3, #0
 8000876:	e02a      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08008000) return FLASH_SECTOR_1;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <get_sector+0x7c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d201      	bcs.n	8000884 <get_sector+0x20>
 8000880:	2301      	movs	r3, #1
 8000882:	e024      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x0800C000) return FLASH_SECTOR_2;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <get_sector+0x80>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d201      	bcs.n	8000890 <get_sector+0x2c>
 800088c:	2302      	movs	r3, #2
 800088e:	e01e      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08010000) return FLASH_SECTOR_3;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <get_sector+0x84>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d801      	bhi.n	800089c <get_sector+0x38>
 8000898:	2303      	movs	r3, #3
 800089a:	e018      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08020000) return FLASH_SECTOR_4;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <get_sector+0x88>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d801      	bhi.n	80008a8 <get_sector+0x44>
 80008a4:	2304      	movs	r3, #4
 80008a6:	e012      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08040000) return FLASH_SECTOR_5;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <get_sector+0x8c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d801      	bhi.n	80008b4 <get_sector+0x50>
 80008b0:	2305      	movs	r3, #5
 80008b2:	e00c      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08060000) return FLASH_SECTOR_6;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <get_sector+0x90>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d801      	bhi.n	80008c0 <get_sector+0x5c>
 80008bc:	2306      	movs	r3, #6
 80008be:	e006      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08080000) return FLASH_SECTOR_7;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <get_sector+0x94>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d801      	bhi.n	80008cc <get_sector+0x68>
 80008c8:	2307      	movs	r3, #7
 80008ca:	e000      	b.n	80008ce <get_sector+0x6a>
  else return FLASH_SECTOR_7; // fallback
 80008cc:	2307      	movs	r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08004000 	.word	0x08004000
 80008e0:	08008000 	.word	0x08008000
 80008e4:	0800c000 	.word	0x0800c000
 80008e8:	0800ffff 	.word	0x0800ffff
 80008ec:	0801ffff 	.word	0x0801ffff
 80008f0:	0803ffff 	.word	0x0803ffff
 80008f4:	0805ffff 	.word	0x0805ffff
 80008f8:	0807ffff 	.word	0x0807ffff

080008fc <FLASH_IF_init>:
/**
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_IF_init(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
/* Unlocking hte program memroy*/
	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000900:	f001 fede 	bl	80026c0 <HAL_FLASH_Unlock>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d002      	beq.n	8000910 <FLASH_IF_init+0x14>
		serial_put_string((uint8_t*)"Error occured while unlocking the flash operations\r\n");
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <FLASH_IF_init+0x20>)
 800090c:	f7ff ff72 	bl	80007f4 <serial_put_string>
	}

	// clearing the error flags before doing some flash operations
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR | FLASH_FLAG_OPERR);
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <FLASH_IF_init+0x24>)
 8000912:	2293      	movs	r2, #147	@ 0x93
 8000914:	60da      	str	r2, [r3, #12]


}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	080082a4 	.word	0x080082a4
 8000920:	40023c00 	.word	0x40023c00

08000924 <FLASH_IF_erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */

uint32_t FLASH_IF_erase(uint32_t StartSector) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	@ 0x58
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef desc;
	uint32_t result = FLASHIF_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t sectorError;

	  /* Unlock the Flash to enable the flash control register access *************/
	FLASH_IF_init();
 8000930:	f7ff ffe4 	bl	80008fc <FLASH_IF_init>


	desc.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000934:	2300      	movs	r3, #0
 8000936:	643b      	str	r3, [r7, #64]	@ 0x40
	desc.Sector = get_sector(StartSector);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff93 	bl	8000864 <get_sector>
 800093e:	4603      	mov	r3, r0
 8000940:	64bb      	str	r3, [r7, #72]	@ 0x48
	desc.NbSectors = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	64fb      	str	r3, [r7, #76]	@ 0x4c
	desc.Banks = FLASH_BANK_1;
 8000946:	2301      	movs	r3, #1
 8000948:	647b      	str	r3, [r7, #68]	@ 0x44
	desc.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800094a:	2302      	movs	r3, #2
 800094c:	653b      	str	r3, [r7, #80]	@ 0x50

	if (StartSector < USER_FLASH_END_ADDRESS) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a12      	ldr	r2, [pc, #72]	@ (800099c <FLASH_IF_erase+0x78>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d819      	bhi.n	800098a <FLASH_IF_erase+0x66>

		if (HAL_FLASHEx_Erase(&desc, &sectorError) != HAL_OK) {
 8000956:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800095a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f002 f85f 	bl	8002a24 <HAL_FLASHEx_Erase>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d010      	beq.n	800098e <FLASH_IF_erase+0x6a>
			char msg[50];
			sprintf(msg, "Erase failed at sector: %lu\n", sectorError);
 800096c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	490b      	ldr	r1, [pc, #44]	@ (80009a0 <FLASH_IF_erase+0x7c>)
 8000974:	4618      	mov	r0, r3
 8000976:	f006 fd27 	bl	80073c8 <siprintf>
			serial_put_string((uint8_t*)msg);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff38 	bl	80007f4 <serial_put_string>
			result = FLASHIF_ERASEKO;
 8000984:	2301      	movs	r3, #1
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
 8000988:	e001      	b.n	800098e <FLASH_IF_erase+0x6a>
		}


	}
	else result = FLASHIF_ERASEKO;
 800098a:	2301      	movs	r3, #1
 800098c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_FLASH_Lock();
 800098e:	f001 feb9 	bl	8002704 <HAL_FLASH_Lock>
	return result;
 8000992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8000994:	4618      	mov	r0, r3
 8000996:	3758      	adds	r7, #88	@ 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0807ffff 	.word	0x0807ffff
 80009a0:	080082dc 	.word	0x080082dc

080009a4 <FLASH_IF_write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */

uint32_t FLASH_IF_write(uint32_t destination, uint32_t* p_source, uint32_t length) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	uint32_t status = FLASHIF_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
	int i = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 80009b8:	f001 fe82 	bl	80026c0 <HAL_FLASH_Unlock>

	for (i = 0; (i < length/2) && (destination <= USER_FLASH_END_ADDRESS - 8);i++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	e026      	b.n	8000a10 <FLASH_IF_write+0x6c>


		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
		        be done by word */
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t*)(p_source+2*i))) == HAL_OK) {
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ce:	68f9      	ldr	r1, [r7, #12]
 80009d0:	2003      	movs	r0, #3
 80009d2:	f001 fe23 	bl	800261c <HAL_FLASH_Program>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d113      	bne.n	8000a04 <FLASH_IF_write+0x60>
			  /* Check the written value */

			if (*(uint64_t*)destination != *(uint64_t*)(p_source+2*i)) {
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4413      	add	r3, r2
 80009ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ee:	4299      	cmp	r1, r3
 80009f0:	bf08      	it	eq
 80009f2:	4290      	cmpeq	r0, r2
 80009f4:	d002      	beq.n	80009fc <FLASH_IF_write+0x58>
				 /* Flash content doesn't match SRAM content */
				status = FLASHIF_WRITINGCTRL_ERROR;
 80009f6:	2302      	movs	r3, #2
 80009f8:	617b      	str	r3, [r7, #20]
				break;
 80009fa:	e012      	b.n	8000a22 <FLASH_IF_write+0x7e>
			}
			 /* Increment FLASH destination address */
			destination += 8;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3308      	adds	r3, #8
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e002      	b.n	8000a0a <FLASH_IF_write+0x66>
		}

		else {
		       /* Error occurred while writing data in Flash memory */
			status = FLASHIF_WRITING_ERROR;
 8000a04:	2303      	movs	r3, #3
 8000a06:	617b      	str	r3, [r7, #20]
			break;
 8000a08:	e00b      	b.n	8000a22 <FLASH_IF_write+0x7e>
	for (i = 0; (i < length/2) && (destination <= USER_FLASH_END_ADDRESS - 8);i++) {
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	085a      	lsrs	r2, r3, #1
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d903      	bls.n	8000a22 <FLASH_IF_write+0x7e>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4a03      	ldr	r2, [pc, #12]	@ (8000a2c <FLASH_IF_write+0x88>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d9cf      	bls.n	80009c2 <FLASH_IF_write+0x1e>
		}

	}
	return status;
 8000a22:	697b      	ldr	r3, [r7, #20]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	0807fff8 	.word	0x0807fff8

08000a30 <FLASH_IF_get_write_protection_status>:
  * @param  None
  * @retval If a sector in application area is write-protected returned value is a combination
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_IF_get_write_protection_status(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef config;
	uint32_t protected = FLASHIF_PROTECTION_NONE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
	 /* Get the current configuration */
	HAL_FLASHEx_OBGetConfig(&config);
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 f8cd 	bl	8002bdc <HAL_FLASHEx_OBGetConfig>

	 /* Final evaluation of status */
	if ((config.WRPState == OB_WRPSTATE_ENABLE) && (config.WRPSector != 0)) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d104      	bne.n	8000a52 <FLASH_IF_get_write_protection_status+0x22>
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <FLASH_IF_get_write_protection_status+0x22>
		protected = FLASHIF_PROTECTION_WRPENABLED;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61fb      	str	r3, [r7, #28]
	}
	return protected;
 8000a52:	69fb      	ldr	r3, [r7, #28]

}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <FLASH_IF_write_protection_config>:
  * @brief  Configure the write protection status of user flash area.
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */

uint32_t FLASH_IF_write_protection_config(uint32_t protectionState) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	FLASH_OBProgramInitTypeDef config;

	HAL_FLASH_Unlock();
 8000a64:	f001 fe2c 	bl	80026c0 <HAL_FLASH_Unlock>

	  /* Unlock the Options Bytes *************************************************/
	HAL_FLASH_OB_Unlock();
 8000a68:	f001 fe5c 	bl	8002724 <HAL_FLASH_OB_Unlock>

	  /* Get the current Option Bytes configuration */
	HAL_FLASHEx_OBGetConfig(&config);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 f8b3 	bl	8002bdc <HAL_FLASHEx_OBGetConfig>

	 config.OptionType = OPTIONBYTE_WRP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
	 config.Banks = FLASH_BANK_1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61bb      	str	r3, [r7, #24]
	if (protectionState == FLASHIF_WRP_ENABLE) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <FLASH_IF_write_protection_config+0x32>
		config.WRPState = OB_WRPSTATE_ENABLE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	613b      	str	r3, [r7, #16]
		config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);
 8000a88:	23e0      	movs	r3, #224	@ 0xe0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e003      	b.n	8000a96 <FLASH_IF_write_protection_config+0x3a>
	}
	else {
		config.WRPState = OB_WRPSTATE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
	    // To disable protection, set WRPSector to 0x00 (no protection)
		config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);
 8000a92:	23e0      	movs	r3, #224	@ 0xe0
 8000a94:	617b      	str	r3, [r7, #20]
	}
	HAL_StatusTypeDef result;

	// Program Option Bytes
	    if (HAL_FLASHEx_OBProgram(&config) != HAL_OK) {
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f002 f830 	bl	8002b00 <HAL_FLASHEx_OBProgram>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <FLASH_IF_write_protection_config+0x4e>
	        return FLASHIF_PROTECTION_ERROR;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	e00b      	b.n	8000ac2 <FLASH_IF_write_protection_config+0x66>
	    }

	    // Launch the Option Bytes loading process
	    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 8000aaa:	f001 fe67 	bl	800277c <HAL_FLASH_OB_Launch>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <FLASH_IF_write_protection_config+0x5c>
	        return FLASHIF_PROTECTION_ERROR;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	e004      	b.n	8000ac2 <FLASH_IF_write_protection_config+0x66>
	    }

	    HAL_FLASH_OB_Lock();
 8000ab8:	f001 fe50 	bl	800275c <HAL_FLASH_OB_Lock>
	    HAL_FLASH_Lock();
 8000abc:	f001 fe22 	bl	8002704 <HAL_FLASH_Lock>
	return FLASHIF_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3728      	adds	r7, #40	@ 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ad4:	1d39      	adds	r1, r7, #4
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ada:	2201      	movs	r2, #1
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <__io_putchar+0x20>)
 8000ade:	f005 fb67 	bl	80061b0 <HAL_UART_Transmit>

  return ch;
 8000ae2:	687b      	ldr	r3, [r7, #4]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000128 	.word	0x20000128

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af6:	f001 fafb 	bl	80020f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afa:	f000 f86f 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afe:	f000 f99f 	bl	8000e40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b02:	f000 f973 	bl	8000dec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b06:	f000 f8f5 	bl	8000cf4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000b0a:	f000 f921 	bl	8000d50 <MX_TIM2_Init>
  MX_CRC_Init();
 8000b0e:	f000 f8dd 	bl	8000ccc <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b12:	f000 f8cf 	bl	8000cb4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b16:	4828      	ldr	r0, [pc, #160]	@ (8000bb8 <main+0xc8>)
 8000b18:	f004 ff16 	bl	8005948 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	201c      	movs	r0, #28
 8000b22:	f001 fc56 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b26:	201c      	movs	r0, #28
 8000b28:	f001 fc6f 	bl	800240a <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2120      	movs	r1, #32
 8000b30:	4822      	ldr	r0, [pc, #136]	@ (8000bbc <main+0xcc>)
 8000b32:	f002 fbb9 	bl	80032a8 <HAL_GPIO_WritePin>


   // optiga_main_logic();
    /* Check the GPIO for 3 seconds */
      GPIO_PinState OTA_Pin_state;
      uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000b36:	f001 fb41 	bl	80021bc <HAL_GetTick>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8000b40:	60fb      	str	r3, [r7, #12]

      printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8000b42:	481f      	ldr	r0, [pc, #124]	@ (8000bc0 <main+0xd0>)
 8000b44:	f006 fd78 	bl	8007638 <puts>
      do
      {
        OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000b48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b4c:	481d      	ldr	r0, [pc, #116]	@ (8000bc4 <main+0xd4>)
 8000b4e:	f002 fb93 	bl	8003278 <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	72fb      	strb	r3, [r7, #11]
        uint32_t current_tick = HAL_GetTick();
 8000b56:	f001 fb31 	bl	80021bc <HAL_GetTick>
 8000b5a:	6078      	str	r0, [r7, #4]

        /* Check the button is pressed or not for 3seconds */
        if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8000b5c:	7afb      	ldrb	r3, [r7, #11]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d104      	bne.n	8000b6c <main+0x7c>
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d800      	bhi.n	8000b6c <main+0x7c>
      {
 8000b6a:	e7ed      	b.n	8000b48 <main+0x58>
        {
          /* Either timeout or Button is pressed */
          break;
        }
      }while( 1 );
      if( OTA_Pin_state == GPIO_PIN_RESET ) {
 8000b6c:	7afb      	ldrb	r3, [r7, #11]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d104      	bne.n	8000b7c <main+0x8c>
    	  /* Initialise Flash */
    	 	  FLASH_IF_init();
 8000b72:	f7ff fec3 	bl	80008fc <FLASH_IF_init>
    	 	  /* Display main menu */
    	 	  main_menu ();
 8000b76:	f000 faad 	bl	80010d4 <main_menu>
 8000b7a:	e01a      	b.n	8000bb2 <main+0xc2>
      }
      else {
    	  /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    	 	  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <main+0xd8>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <main+0xdc>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b88:	d113      	bne.n	8000bb2 <main+0xc2>
    	 	  {
    	 		  /* Jump to user application */
    	 		  jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <main+0xe0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a11      	ldr	r2, [pc, #68]	@ (8000bd4 <main+0xe4>)
 8000b90:	6013      	str	r3, [r2, #0]
    	 		  jumpToApplication = (pFunction) jumpAddress;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <main+0xe4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <main+0xe8>)
 8000b9a:	601a      	str	r2, [r3, #0]
    	 		  /* Initialize user application's Stack Pointer */
    	 		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <main+0xd8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	f383 8808 	msr	MSP, r3
}
 8000ba8:	bf00      	nop
    	 		  jumpToApplication();
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <main+0xe8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	e7fd      	b.n	8000bb2 <main+0xc2>
 8000bb6:	bf00      	nop
 8000bb8:	200000e0 	.word	0x200000e0
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	080082fc 	.word	0x080082fc
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	08040000 	.word	0x08040000
 8000bcc:	2ffe0000 	.word	0x2ffe0000
 8000bd0:	08040004 	.word	0x08040004
 8000bd4:	20000174 	.word	0x20000174
 8000bd8:	20000170 	.word	0x20000170

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b094      	sub	sp, #80	@ 0x50
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	2230      	movs	r2, #48	@ 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f006 fd2c 	bl	8007648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <SystemClock_Config+0xd0>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <SystemClock_Config+0xd4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <SystemClock_Config+0xd4>)
 8000c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <SystemClock_Config+0xd4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2310      	movs	r3, #16
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c50:	2310      	movs	r3, #16
 8000c52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 f986 	bl	8004f78 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c72:	f000 f96c 	bl	8000f4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2102      	movs	r1, #2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fbe8 	bl	8005468 <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c9e:	f000 f956 	bl	8000f4e <Error_Handler>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3750      	adds	r7, #80	@ 0x50
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	201f      	movs	r0, #31
 8000cbe:	f001 fb88 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cc2:	201f      	movs	r0, #31
 8000cc4:	f001 fba1 	bl	800240a <HAL_NVIC_EnableIRQ>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_CRC_Init+0x20>)
 8000cd2:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <MX_CRC_Init+0x24>)
 8000cd4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_CRC_Init+0x20>)
 8000cd8:	f001 fbb1 	bl	800243e <HAL_CRC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ce2:	f000 f934 	bl	8000f4e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000084 	.word	0x20000084
 8000cf0:	40023000 	.word	0x40023000

08000cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000cfa:	4a13      	ldr	r2, [pc, #76]	@ (8000d48 <MX_I2C1_Init+0x54>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d00:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <MX_I2C1_Init+0x58>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_I2C1_Init+0x50>)
 8000d32:	f002 faf7 	bl	8003324 <HAL_I2C_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d3c:	f000 f907 	bl	8000f4e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000008c 	.word	0x2000008c
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	00061a80 	.word	0x00061a80

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d76:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d92:	2280      	movs	r2, #128	@ 0x80
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d96:	4814      	ldr	r0, [pc, #80]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000d98:	f004 fd86 	bl	80058a8 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000da2:	f000 f8d4 	bl	8000f4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000daa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	4619      	mov	r1, r3
 8000db2:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000db4:	f004 ff1a 	bl	8005bec <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dbe:	f000 f8c6 	bl	8000f4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	@ (8000de8 <MX_TIM2_Init+0x98>)
 8000dd0:	f005 f91c 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dda:	f000 f8b8 	bl	8000f4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000e0 	.word	0x200000e0

08000dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <MX_USART2_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f005 f974 	bl	8006110 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f88e 	bl	8000f4e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000128 	.word	0x20000128
 8000e3c:	40004400 	.word	0x40004400

08000e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a31      	ldr	r2, [pc, #196]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b28      	ldr	r3, [pc, #160]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a23      	ldr	r2, [pc, #140]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_GPIO_Init+0xe4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8000ecc:	4816      	ldr	r0, [pc, #88]	@ (8000f28 <MX_GPIO_Init+0xe8>)
 8000ece:	f002 f9eb 	bl	80032a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4810      	ldr	r0, [pc, #64]	@ (8000f2c <MX_GPIO_Init+0xec>)
 8000eea:	f002 f841 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8000eee:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <MX_GPIO_Init+0xe8>)
 8000f08:	f002 f832 	bl	8002f70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2028      	movs	r0, #40	@ 0x28
 8000f12:	f001 fa5e 	bl	80023d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f16:	2028      	movs	r0, #40	@ 0x28
 8000f18:	f001 fa77 	bl	800240a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	@ 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020800 	.word	0x40020800

08000f30 <HAL_TIM_PeriodElapsedCallback>:
{
    optiga_lib_status = return_status;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f40:	d101      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8000f42:	f000 f9d7 	bl	80012f4 <pal_os_event_timer_tick>
    }
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f52:	b672      	cpsid	i
}
 8000f54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f56:	bf00      	nop
 8000f58:	e7fd      	b.n	8000f56 <Error_Handler+0x8>
	...

08000f5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
}
 8000f64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <__NVIC_SystemReset+0x24>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f6e:	4904      	ldr	r1, [pc, #16]	@ (8000f80 <__NVIC_SystemReset+0x24>)
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_SystemReset+0x28>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f76:	f3bf 8f4f 	dsb	sy
}
 8000f7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <__NVIC_SystemReset+0x20>
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0004 	.word	0x05fa0004

08000f88 <serial_download>:
/**
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void serial_download(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
	uint8_t number[11] = {0};
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	f8c3 2003 	str.w	r2, [r3, #3]
	uint32_t size = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
	COM_StatusTypeDef result = COM_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
	serial_put_string((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8000fa6:	4825      	ldr	r0, [pc, #148]	@ (800103c <serial_download+0xb4>)
 8000fa8:	f7ff fc24 	bl	80007f4 <serial_put_string>
	if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 8000fac:	4824      	ldr	r0, [pc, #144]	@ (8001040 <serial_download+0xb8>)
 8000fae:	f7ff fcb9 	bl	8000924 <FLASH_IF_erase>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <serial_download+0x36>
		serial_put_string((uint8_t*)"Error occured while erasing the flash");
 8000fb8:	4822      	ldr	r0, [pc, #136]	@ (8001044 <serial_download+0xbc>)
 8000fba:	f7ff fc1b 	bl	80007f4 <serial_put_string>
	}

	result = ymodem_receive(&size);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fd63 	bl	8001a8c <ymodem_receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]

	if (result == COM_OK) {
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d119      	bne.n	8001004 <serial_download+0x7c>
			serial_put_string((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8000fd0:	481d      	ldr	r0, [pc, #116]	@ (8001048 <serial_download+0xc0>)
 8000fd2:	f7ff fc0f 	bl	80007f4 <serial_put_string>
			serial_put_string((uint8_t *)aFileName);
 8000fd6:	481d      	ldr	r0, [pc, #116]	@ (800104c <serial_download+0xc4>)
 8000fd8:	f7ff fc0c 	bl	80007f4 <serial_put_string>
		    int_to_str(number, size);
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fac4 	bl	8000570 <int_to_str>
		    serial_put_string((uint8_t *)"\n\r Size: ");
 8000fe8:	4819      	ldr	r0, [pc, #100]	@ (8001050 <serial_download+0xc8>)
 8000fea:	f7ff fc03 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)number);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fbff 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)" Bytes\r\n");
 8000ff6:	4817      	ldr	r0, [pc, #92]	@ (8001054 <serial_download+0xcc>)
 8000ff8:	f7ff fbfc 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)"-------------------\n");
 8000ffc:	4816      	ldr	r0, [pc, #88]	@ (8001058 <serial_download+0xd0>)
 8000ffe:	f7ff fbf9 	bl	80007f4 <serial_put_string>
	}
	else
	  {
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
	  }
}
 8001002:	e017      	b.n	8001034 <serial_download+0xac>
	else if (result == COM_ABORT) {
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d103      	bne.n	8001012 <serial_download+0x8a>
		serial_put_string((uint8_t*)"\r\n\nAborted by user.\n\r");
 800100a:	4814      	ldr	r0, [pc, #80]	@ (800105c <serial_download+0xd4>)
 800100c:	f7ff fbf2 	bl	80007f4 <serial_put_string>
}
 8001010:	e010      	b.n	8001034 <serial_download+0xac>
	else if (result == COM_LIMIT) {
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d103      	bne.n	8001020 <serial_download+0x98>
		serial_put_string((uint8_t*)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8001018:	4811      	ldr	r0, [pc, #68]	@ (8001060 <serial_download+0xd8>)
 800101a:	f7ff fbeb 	bl	80007f4 <serial_put_string>
}
 800101e:	e009      	b.n	8001034 <serial_download+0xac>
	else if (result == COM_DATA) {
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d103      	bne.n	800102e <serial_download+0xa6>
		serial_put_string((uint8_t *)"\n\n\rVerification failed!\n\r");
 8001026:	480f      	ldr	r0, [pc, #60]	@ (8001064 <serial_download+0xdc>)
 8001028:	f7ff fbe4 	bl	80007f4 <serial_put_string>
}
 800102c:	e002      	b.n	8001034 <serial_download+0xac>
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
 800102e:	480e      	ldr	r0, [pc, #56]	@ (8001068 <serial_download+0xe0>)
 8001030:	f7ff fbe0 	bl	80007f4 <serial_put_string>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	080083f8 	.word	0x080083f8
 8001040:	08040000 	.word	0x08040000
 8001044:	08008434 	.word	0x08008434
 8001048:	0800845c 	.word	0x0800845c
 800104c:	2000017c 	.word	0x2000017c
 8001050:	080084b0 	.word	0x080084b0
 8001054:	080084bc 	.word	0x080084bc
 8001058:	080084c8 	.word	0x080084c8
 800105c:	080084e0 	.word	0x080084e0
 8001060:	080084f8 	.word	0x080084f8
 8001064:	08008538 	.word	0x08008538
 8001068:	08008554 	.word	0x08008554

0800106c <serial_upload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */

void serial_upload(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
	 uint8_t status = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
	 serial_put_string((uint8_t *)"\n\n\rSelect Receive File\n\r");
 8001076:	4811      	ldr	r0, [pc, #68]	@ (80010bc <serial_upload+0x50>)
 8001078:	f7ff fbbc 	bl	80007f4 <serial_put_string>
	 HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 800107c:	1df9      	adds	r1, r7, #7
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	2201      	movs	r2, #1
 8001084:	480e      	ldr	r0, [pc, #56]	@ (80010c0 <serial_upload+0x54>)
 8001086:	f005 f91e 	bl	80062c6 <HAL_UART_Receive>
	 if ( status == CRC16)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b43      	cmp	r3, #67	@ 0x43
 800108e:	d111      	bne.n	80010b4 <serial_upload+0x48>
	   {
	     /* Transmit the flash image through ymodem protocol */
	     status = ymodem_transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 8001090:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001094:	490b      	ldr	r1, [pc, #44]	@ (80010c4 <serial_upload+0x58>)
 8001096:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <serial_upload+0x5c>)
 8001098:	f000 fe1e 	bl	8001cd8 <ymodem_transmit>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]

	     if (status != 0)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <serial_upload+0x42>
	     {
	       serial_put_string((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <serial_upload+0x60>)
 80010a8:	f7ff fba4 	bl	80007f4 <serial_put_string>
	     else
	     {
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
	     }
	   }
}
 80010ac:	e002      	b.n	80010b4 <serial_upload+0x48>
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
 80010ae:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <serial_upload+0x64>)
 80010b0:	f7ff fba0 	bl	80007f4 <serial_put_string>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	08008574 	.word	0x08008574
 80010c0:	20000128 	.word	0x20000128
 80010c4:	08008590 	.word	0x08008590
 80010c8:	08040000 	.word	0x08040000
 80010cc:	080085a8 	.word	0x080085a8
 80010d0:	080085d4 	.word	0x080085d4

080010d4 <main_menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */

void main_menu(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
	 uint8_t key = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	72fb      	strb	r3, [r7, #11]

	 serial_put_string((uint8_t *)"\r\n======================================================================");
 80010de:	485b      	ldr	r0, [pc, #364]	@ (800124c <main_menu+0x178>)
 80010e0:	f7ff fb88 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 80010e4:	485a      	ldr	r0, [pc, #360]	@ (8001250 <main_menu+0x17c>)
 80010e6:	f7ff fb85 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n= Secure Booting and Firmware Update with hardware root of trust(1.1)=");
 80010ea:	485a      	ldr	r0, [pc, #360]	@ (8001254 <main_menu+0x180>)
 80010ec:	f7ff fb82 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 80010f0:	4857      	ldr	r0, [pc, #348]	@ (8001250 <main_menu+0x17c>)
 80010f2:	f7ff fb7f 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                   By STM Application Team          =");
 80010f6:	4858      	ldr	r0, [pc, #352]	@ (8001258 <main_menu+0x184>)
 80010f8:	f7ff fb7c 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n======================================================================");
 80010fc:	4853      	ldr	r0, [pc, #332]	@ (800124c <main_menu+0x178>)
 80010fe:	f7ff fb79 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n\r\n");
 8001102:	4856      	ldr	r0, [pc, #344]	@ (800125c <main_menu+0x188>)
 8001104:	f7ff fb76 	bl	80007f4 <serial_put_string>
	  /* Test if any sector of Flash memory where user application will be loaded is write protected */
	//  FLASH_OBProgramInitTypeDef config;
//	  config.WRPState= OB_WRPSTATE_ENABLE;
//	  config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);

	  flashProtection = FLASH_IF_get_write_protection_status();
 8001108:	f7ff fc92 	bl	8000a30 <FLASH_IF_get_write_protection_status>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <main_menu+0x18c>)
 8001112:	601a      	str	r2, [r3, #0]

	  while (1)
	  {

		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8001114:	4853      	ldr	r0, [pc, #332]	@ (8001264 <main_menu+0x190>)
 8001116:	f7ff fb6d 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 800111a:	4853      	ldr	r0, [pc, #332]	@ (8001268 <main_menu+0x194>)
 800111c:	f7ff fb6a 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8001120:	4852      	ldr	r0, [pc, #328]	@ (800126c <main_menu+0x198>)
 8001122:	f7ff fb67 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8001126:	4852      	ldr	r0, [pc, #328]	@ (8001270 <main_menu+0x19c>)
 8001128:	f7ff fb64 	bl	80007f4 <serial_put_string>

	    if(flashProtection != FLASHIF_PROTECTION_NONE)
 800112c:	4b4c      	ldr	r3, [pc, #304]	@ (8001260 <main_menu+0x18c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <main_menu+0x68>
	    {
	    	serial_put_string((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 8001134:	484f      	ldr	r0, [pc, #316]	@ (8001274 <main_menu+0x1a0>)
 8001136:	f7ff fb5d 	bl	80007f4 <serial_put_string>
 800113a:	e002      	b.n	8001142 <main_menu+0x6e>
	    }
	    else
	    {
	    	serial_put_string((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 800113c:	484e      	ldr	r0, [pc, #312]	@ (8001278 <main_menu+0x1a4>)
 800113e:	f7ff fb59 	bl	80007f4 <serial_put_string>
	    }
	    serial_put_string((uint8_t *)"==========================================================\r\n\n");
 8001142:	484e      	ldr	r0, [pc, #312]	@ (800127c <main_menu+0x1a8>)
 8001144:	f7ff fb56 	bl	80007f4 <serial_put_string>

	    /* Clean the input path */
	    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001148:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <main_menu+0x1ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
	    __HAL_UART_CLEAR_OREFLAG(&UartHandle);
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <main_menu+0x1ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b49      	ldr	r3, [pc, #292]	@ (8001280 <main_menu+0x1ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

	    /* Receive key */
	    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8001164:	f107 010b 	add.w	r1, r7, #11
 8001168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800116c:	2201      	movs	r2, #1
 800116e:	4844      	ldr	r0, [pc, #272]	@ (8001280 <main_menu+0x1ac>)
 8001170:	f005 f8a9 	bl	80062c6 <HAL_UART_Receive>



	    switch (key)
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	3b31      	subs	r3, #49	@ 0x31
 8001178:	2b03      	cmp	r3, #3
 800117a:	d862      	bhi.n	8001242 <main_menu+0x16e>
 800117c:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <main_menu+0xb0>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119b 	.word	0x0800119b
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011cf 	.word	0x080011cf
	    {
	    case '1' :
	      /* Download user application in the Flash */
	      serial_download();
 8001194:	f7ff fef8 	bl	8000f88 <serial_download>
	      break;
 8001198:	e057      	b.n	800124a <main_menu+0x176>
	    case '2' :
	      /* Upload user application from the Flash */
	      serial_upload();
 800119a:	f7ff ff67 	bl	800106c <serial_upload>
	      break;
 800119e:	e054      	b.n	800124a <main_menu+0x176>
	    case '3' :
	    	serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 80011a0:	4838      	ldr	r0, [pc, #224]	@ (8001284 <main_menu+0x1b0>)
 80011a2:	f7ff fb27 	bl	80007f4 <serial_put_string>
	      /* execute the new program */
	      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80011a6:	4b38      	ldr	r3, [pc, #224]	@ (8001288 <main_menu+0x1b4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a38      	ldr	r2, [pc, #224]	@ (800128c <main_menu+0x1b8>)
 80011ac:	6013      	str	r3, [r2, #0]
	      /* Jump to user application */
	      jumpToApplication = (pFunction)jumpAddress;
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <main_menu+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <main_menu+0x1bc>)
 80011b6:	601a      	str	r2, [r3, #0]
	      /* Initialize user application's Stack Pointer */
	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80011b8:	4b36      	ldr	r3, [pc, #216]	@ (8001294 <main_menu+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f383 8808 	msr	MSP, r3
}
 80011c4:	bf00      	nop
	      jumpToApplication();
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <main_menu+0x1bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4798      	blx	r3
	      break;
 80011cc:	e03d      	b.n	800124a <main_menu+0x176>
	    case '4' :
	      if (flashProtection != FLASHIF_PROTECTION_NONE)
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <main_menu+0x18c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d017      	beq.n	8001206 <main_menu+0x132>
	      {
	        /* Disable the write protection */
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7ff fc40 	bl	8000a5c <FLASH_IF_write_protection_config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10d      	bne.n	80011fe <main_menu+0x12a>
	        {
	        	serial_put_string((uint8_t *)"Write Protection disabled...\r\n");
 80011e2:	482d      	ldr	r0, [pc, #180]	@ (8001298 <main_menu+0x1c4>)
 80011e4:	f7ff fb06 	bl	80007f4 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 80011e8:	482c      	ldr	r0, [pc, #176]	@ (800129c <main_menu+0x1c8>)
 80011ea:	f7ff fb03 	bl	80007f4 <serial_put_string>
	          /* Launch the option byte loading */
	          HAL_FLASH_OB_Launch();
 80011ee:	f001 fac5 	bl	800277c <HAL_FLASH_OB_Launch>
	          HAL_Delay(3000);  // Wait 3 seconds for user to observe
 80011f2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80011f6:	f000 ffed 	bl	80021d4 <HAL_Delay>
	          NVIC_SystemReset();
 80011fa:	f7ff feaf 	bl	8000f5c <__NVIC_SystemReset>
//	          HAL_FLASH_Lock();
	        }
	        else
	        {
	        	serial_put_string((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 80011fe:	4828      	ldr	r0, [pc, #160]	@ (80012a0 <main_menu+0x1cc>)
 8001200:	f7ff faf8 	bl	80007f4 <serial_put_string>
	        else
	        {
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
	        }
	      }
	      break;
 8001204:	e021      	b.n	800124a <main_menu+0x176>
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fc28 	bl	8000a5c <FLASH_IF_write_protection_config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d113      	bne.n	800123a <main_menu+0x166>
	        	serial_put_string((uint8_t *)"Write Protection enabled...\r\n");
 8001212:	4824      	ldr	r0, [pc, #144]	@ (80012a4 <main_menu+0x1d0>)
 8001214:	f7ff faee 	bl	80007f4 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 8001218:	4820      	ldr	r0, [pc, #128]	@ (800129c <main_menu+0x1c8>)
 800121a:	f7ff faeb 	bl	80007f4 <serial_put_string>
	          flashProtection = FLASH_IF_get_write_protection_status();
 800121e:	f7ff fc07 	bl	8000a30 <FLASH_IF_get_write_protection_status>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <main_menu+0x18c>)
 8001228:	601a      	str	r2, [r3, #0]
	          HAL_FLASH_OB_Launch();
 800122a:	f001 faa7 	bl	800277c <HAL_FLASH_OB_Launch>
	          HAL_Delay(3000);  // Wait 3 seconds for user to observe
 800122e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001232:	f000 ffcf 	bl	80021d4 <HAL_Delay>
	          NVIC_SystemReset();
 8001236:	f7ff fe91 	bl	8000f5c <__NVIC_SystemReset>
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
 800123a:	481b      	ldr	r0, [pc, #108]	@ (80012a8 <main_menu+0x1d4>)
 800123c:	f7ff fada 	bl	80007f4 <serial_put_string>
	      break;
 8001240:	e003      	b.n	800124a <main_menu+0x176>
		default:
			serial_put_string((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 8001242:	481a      	ldr	r0, [pc, #104]	@ (80012ac <main_menu+0x1d8>)
 8001244:	f7ff fad6 	bl	80007f4 <serial_put_string>
		break;
 8001248:	bf00      	nop
		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 800124a:	e763      	b.n	8001114 <main_menu+0x40>
 800124c:	080085f4 	.word	0x080085f4
 8001250:	08008640 	.word	0x08008640
 8001254:	0800868c 	.word	0x0800868c
 8001258:	080086d8 	.word	0x080086d8
 800125c:	08008724 	.word	0x08008724
 8001260:	20000178 	.word	0x20000178
 8001264:	0800872c 	.word	0x0800872c
 8001268:	0800876c 	.word	0x0800876c
 800126c:	080087ac 	.word	0x080087ac
 8001270:	080087ec 	.word	0x080087ec
 8001274:	0800882c 	.word	0x0800882c
 8001278:	0800886c 	.word	0x0800886c
 800127c:	080088ac 	.word	0x080088ac
 8001280:	20000128 	.word	0x20000128
 8001284:	080088ec 	.word	0x080088ec
 8001288:	08040004 	.word	0x08040004
 800128c:	20000174 	.word	0x20000174
 8001290:	20000170 	.word	0x20000170
 8001294:	08040000 	.word	0x08040000
 8001298:	08008910 	.word	0x08008910
 800129c:	08008930 	.word	0x08008930
 80012a0:	08008950 	.word	0x08008950
 80012a4:	08008980 	.word	0x08008980
 80012a8:	080089a0 	.word	0x080089a0
 80012ac:	080089cc 	.word	0x080089cc

080012b0 <pal_os_event_trigger_registered_callback>:
    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
}

void pal_os_event_trigger_registered_callback(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <pal_os_event_trigger_registered_callback+0x3c>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d011      	beq.n	80012e2 <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <pal_os_event_trigger_registered_callback+0x3c>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <pal_os_event_trigger_registered_callback+0x3c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <pal_os_event_trigger_registered_callback+0x3c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <pal_os_event_trigger_registered_callback+0x3c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <pal_os_event_trigger_registered_callback+0x40>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	4798      	blx	r3
    }
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001bc 	.word	0x200001bc
 80012f0:	200001d8 	.word	0x200001d8

080012f4 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <pal_os_event_timer_tick+0x24>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <pal_os_event_timer_tick+0x1e>
 8001300:	f000 ff5c 	bl	80021bc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	4b05      	ldr	r3, [pc, #20]	@ (800131c <pal_os_event_timer_tick+0x28>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d301      	bcc.n	8001312 <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 800130e:	f7ff ffcf 	bl	80012b0 <pal_os_event_trigger_registered_callback>
    }
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001d8 	.word	0x200001d8
 800131c:	200001d4 	.word	0x200001d4

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_MspInit+0x4c>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001334:	6453      	str	r3, [r2, #68]	@ 0x44
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_MspInit+0x4c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0b      	ldr	r2, [pc, #44]	@ (80013ac <HAL_CRC_MspInit+0x3c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10d      	bne.n	800139e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_CRC_MspInit+0x40>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a09      	ldr	r2, [pc, #36]	@ (80013b0 <HAL_CRC_MspInit+0x40>)
 800138c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <HAL_CRC_MspInit+0x40>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023000 	.word	0x40023000
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_I2C_MspInit+0x94>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d134      	bne.n	8001440 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <HAL_I2C_MspInit+0x98>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a1b      	ldr	r2, [pc, #108]	@ (800144c <HAL_I2C_MspInit+0x98>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_I2C_MspInit+0x98>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f8:	2312      	movs	r3, #18
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001404:	2304      	movs	r3, #4
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	4810      	ldr	r0, [pc, #64]	@ (8001450 <HAL_I2C_MspInit+0x9c>)
 8001410:	f001 fdae 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_I2C_MspInit+0x98>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_I2C_MspInit+0x98>)
 800141e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001422:	6413      	str	r3, [r2, #64]	@ 0x40
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_I2C_MspInit+0x98>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2020      	movs	r0, #32
 8001436:	f000 ffcc 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800143a:	2020      	movs	r0, #32
 800143c:	f000 ffe5 	bl	800240a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40005400 	.word	0x40005400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020400 	.word	0x40020400

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001464:	d115      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_TIM_Base_MspInit+0x48>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_TIM_Base_MspInit+0x48>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_TIM_Base_MspInit+0x48>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201c      	movs	r0, #28
 8001488:	f000 ffa3 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148c:	201c      	movs	r0, #28
 800148e:	f000 ffbc 	bl	800240a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001534 <HAL_UART_MspInit+0x94>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d133      	bne.n	800152a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_UART_MspInit+0x98>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <HAL_UART_MspInit+0x98>)
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_UART_MspInit+0x98>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_UART_MspInit+0x98>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_UART_MspInit+0x98>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_UART_MspInit+0x98>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4809      	ldr	r0, [pc, #36]	@ (800153c <HAL_UART_MspInit+0x9c>)
 8001516:	f001 fd2b 	bl	8002f70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2026      	movs	r0, #38	@ 0x26
 8001520:	f000 ff57 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001524:	2026      	movs	r0, #38	@ 0x26
 8001526:	f000 ff70 	bl	800240a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40004400 	.word	0x40004400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 fdfd 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM2_IRQHandler+0x10>)
 80015a6:	f004 fa31 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000e0 	.word	0x200000e0

080015b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <I2C1_EV_IRQHandler+0x10>)
 80015ba:	f002 f80c 	bl	80035d6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000008c 	.word	0x2000008c

080015c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <I2C1_ER_IRQHandler+0x10>)
 80015ce:	f002 f955 	bl	800387c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000008c 	.word	0x2000008c

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f004 ff07 	bl	80063f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000128 	.word	0x20000128

080015f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015f8:	f001 fe70 	bl	80032dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	e00a      	b.n	8001628 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001612:	f3af 8000 	nop.w
 8001616:	4601      	mov	r1, r0
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	60ba      	str	r2, [r7, #8]
 800161e:	b2ca      	uxtb	r2, r1
 8001620:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3301      	adds	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	dbf0      	blt.n	8001612 <_read+0x12>
  }

  return len;
 8001630:	687b      	ldr	r3, [r7, #4]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e009      	b.n	8001660 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fa39 	bl	8000acc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf1      	blt.n	800164c <_write+0x12>
  }
  return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_close>:

int _close(int file)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800169a:	605a      	str	r2, [r3, #4]
  return 0;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_isatty>:

int _isatty(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e4:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800170c:	f005 ffb4 	bl	8007678 <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	220c      	movs	r2, #12
 8001714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172e:	68fb      	ldr	r3, [r7, #12]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20018000 	.word	0x20018000
 800173c:	00000400 	.word	0x00000400
 8001740:	200001dc 	.word	0x200001dc
 8001744:	20000758 	.word	0x20000758

08001748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <receive_packet>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */

static HAL_StatusTypeDef receive_packet(uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	uint32_t crc;
	uint32_t packetSize = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status;
	uint8_t char1;
	*p_length = 0;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8001782:	f107 0113 	add.w	r1, r7, #19
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	485d      	ldr	r0, [pc, #372]	@ (8001900 <receive_packet+0x194>)
 800178c:	f004 fd9b 	bl	80062c6 <HAL_UART_Receive>
 8001790:	4603      	mov	r3, r0
 8001792:	76fb      	strb	r3, [r7, #27]
	if (status == HAL_OK) {
 8001794:	7efb      	ldrb	r3, [r7, #27]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 80aa 	bne.w	80018f0 <receive_packet+0x184>
		switch(char1) {
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	2b61      	cmp	r3, #97	@ 0x61
 80017a0:	d059      	beq.n	8001856 <receive_packet+0xea>
 80017a2:	2b61      	cmp	r3, #97	@ 0x61
 80017a4:	dc5a      	bgt.n	800185c <receive_packet+0xf0>
 80017a6:	2b18      	cmp	r3, #24
 80017a8:	dc38      	bgt.n	800181c <receive_packet+0xb0>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	dd56      	ble.n	800185c <receive_packet+0xf0>
 80017ae:	3b01      	subs	r3, #1
 80017b0:	2b17      	cmp	r3, #23
 80017b2:	d853      	bhi.n	800185c <receive_packet+0xf0>
 80017b4:	a201      	add	r2, pc, #4	@ (adr r2, 80017bc <receive_packet+0x50>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001823 	.word	0x08001823
 80017c0:	08001829 	.word	0x08001829
 80017c4:	0800185d 	.word	0x0800185d
 80017c8:	08001863 	.word	0x08001863
 80017cc:	0800185d 	.word	0x0800185d
 80017d0:	0800185d 	.word	0x0800185d
 80017d4:	0800185d 	.word	0x0800185d
 80017d8:	0800185d 	.word	0x0800185d
 80017dc:	0800185d 	.word	0x0800185d
 80017e0:	0800185d 	.word	0x0800185d
 80017e4:	0800185d 	.word	0x0800185d
 80017e8:	0800185d 	.word	0x0800185d
 80017ec:	0800185d 	.word	0x0800185d
 80017f0:	0800185d 	.word	0x0800185d
 80017f4:	0800185d 	.word	0x0800185d
 80017f8:	0800185d 	.word	0x0800185d
 80017fc:	0800185d 	.word	0x0800185d
 8001800:	0800185d 	.word	0x0800185d
 8001804:	0800185d 	.word	0x0800185d
 8001808:	0800185d 	.word	0x0800185d
 800180c:	0800185d 	.word	0x0800185d
 8001810:	0800185d 	.word	0x0800185d
 8001814:	0800185d 	.word	0x0800185d
 8001818:	08001831 	.word	0x08001831
 800181c:	2b41      	cmp	r3, #65	@ 0x41
 800181e:	d01a      	beq.n	8001856 <receive_packet+0xea>
 8001820:	e01c      	b.n	800185c <receive_packet+0xf0>
		case SOH:
			packetSize = PACKET_SIZE;
 8001822:	2380      	movs	r3, #128	@ 0x80
 8001824:	61fb      	str	r3, [r7, #28]
			break;
 8001826:	e01d      	b.n	8001864 <receive_packet+0xf8>
		case STX:
			packetSize = PACKET_1K_SIZE;
 8001828:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182c:	61fb      	str	r3, [r7, #28]
			break;
 800182e:	e019      	b.n	8001864 <receive_packet+0xf8>
		case EOT:
			break;
		case CA:
		    if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8001830:	f107 0113 	add.w	r1, r7, #19
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	4831      	ldr	r0, [pc, #196]	@ (8001900 <receive_packet+0x194>)
 800183a:	f004 fd44 	bl	80062c6 <HAL_UART_Receive>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <receive_packet+0xe4>
 8001844:	7cfb      	ldrb	r3, [r7, #19]
 8001846:	2b18      	cmp	r3, #24
 8001848:	d102      	bne.n	8001850 <receive_packet+0xe4>
			{
			  packetSize = 2;
 800184a:	2302      	movs	r3, #2
 800184c:	61fb      	str	r3, [r7, #28]
			}
			else
			{
			  status = HAL_ERROR;
			}
			break;
 800184e:	e009      	b.n	8001864 <receive_packet+0xf8>
			  status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	76fb      	strb	r3, [r7, #27]
			break;
 8001854:	e006      	b.n	8001864 <receive_packet+0xf8>
		case ABORT1:
		case ABORT2:
			status = HAL_BUSY;
 8001856:	2302      	movs	r3, #2
 8001858:	76fb      	strb	r3, [r7, #27]
			break;
 800185a:	e003      	b.n	8001864 <receive_packet+0xf8>
		default:
			status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	76fb      	strb	r3, [r7, #27]
			break;
 8001860:	e000      	b.n	8001864 <receive_packet+0xf8>
			break;
 8001862:	bf00      	nop
		}
		*p_data = char1;
 8001864:	7cfa      	ldrb	r2, [r7, #19]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	701a      	strb	r2, [r3, #0]
		if (packetSize >= PACKET_SIZE) {
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b7f      	cmp	r3, #127	@ 0x7f
 800186e:	d93f      	bls.n	80018f0 <receive_packet+0x184>
			status = HAL_UART_Receive(&UartHandle, &p_data[PACKET_NUMBER_INDEX], (packetSize + PACKET_OVERHEAD_SIZE), timeout);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1c99      	adds	r1, r3, #2
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	b29b      	uxth	r3, r3
 8001878:	3304      	adds	r3, #4
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4820      	ldr	r0, [pc, #128]	@ (8001900 <receive_packet+0x194>)
 8001880:	f004 fd21 	bl	80062c6 <HAL_UART_Receive>
 8001884:	4603      	mov	r3, r0
 8001886:	76fb      	strb	r3, [r7, #27]
			if (status == HAL_OK) {
 8001888:	7efb      	ldrb	r3, [r7, #27]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12e      	bne.n	80018ec <receive_packet+0x180>
				if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3302      	adds	r3, #2
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3303      	adds	r3, #3
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	43db      	mvns	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	429a      	cmp	r2, r3
 80018a0:	d004      	beq.n	80018ac <receive_packet+0x140>

					packetSize = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
					status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	76fb      	strb	r3, [r7, #27]
 80018aa:	e021      	b.n	80018f0 <receive_packet+0x184>
				}
				else {
					crc = p_data[packetSize + PACKET_DATA_INDEX] << 8;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	3304      	adds	r3, #4
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	617b      	str	r3, [r7, #20]
					crc += p_data[packetSize + PACKET_DATA_INDEX + 1];
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3305      	adds	r3, #5
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4413      	add	r3, r2
 80018ca:	617b      	str	r3, [r7, #20]
					if (HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&p_data[PACKET_DATA_INDEX], packetSize) != crc )
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3304      	adds	r3, #4
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	@ (8001904 <receive_packet+0x198>)
 80018d6:	f000 fdce 	bl	8002476 <HAL_CRC_Calculate>
 80018da:	4602      	mov	r2, r0
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	4293      	cmp	r3, r2
 80018e0:	d006      	beq.n	80018f0 <receive_packet+0x184>
					{
					            packetSize = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
					            status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	76fb      	strb	r3, [r7, #27]
 80018ea:	e001      	b.n	80018f0 <receive_packet+0x184>
					}
				}
			}
			else {
				packetSize = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
			}
		}
	}
	*p_length = packetSize;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	601a      	str	r2, [r3, #0]
	return status;
 80018f6:	7efb      	ldrb	r3, [r7, #27]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000128 	.word	0x20000128
 8001904:	20000084 	.word	0x20000084

08001908 <prepare_inital_packet>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */

void prepare_inital_packet(uint8_t* p_data, const uint8_t* p_file_name, uint32_t length) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	uint32_t i = 0, j = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
	uint8_t astring[10];

	/* First three bytes are constant---------------------------*/
	p_data[PACKET_START_INDEX] = SOH;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
	p_data[PACKET_NUMBER_INDEX] = 0x00;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3302      	adds	r3, #2
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
	p_data[PACKET_CNUMBER_INDEX] = 0xff;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3303      	adds	r3, #3
 8001930:	22ff      	movs	r2, #255	@ 0xff
 8001932:	701a      	strb	r2, [r3, #0]

	  /* Filename written */
	for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH);i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
 8001938:	e00b      	b.n	8001952 <prepare_inital_packet+0x4a>
		p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	441a      	add	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	3304      	adds	r3, #4
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	440b      	add	r3, r1
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	701a      	strb	r2, [r3, #0]
	for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH);i++) {
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	3301      	adds	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <prepare_inital_packet+0x5c>
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	2b3f      	cmp	r3, #63	@ 0x3f
 8001962:	d9ea      	bls.n	800193a <prepare_inital_packet+0x32>
	}
	p_data[i + PACKET_DATA_INDEX] = 0x00;
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	3304      	adds	r3, #4
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]

	  /* file size written */
	int_to_str(astring,length);
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdfa 	bl	8000570 <int_to_str>
	i += 1 + PACKET_DATA_INDEX;
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	3305      	adds	r3, #5
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
	while (astring[j] != 0) {
 8001982:	e00c      	b.n	800199e <prepare_inital_packet+0x96>
		p_data[i++] = astring[j++];
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	623a      	str	r2, [r7, #32]
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	1c51      	adds	r1, r2, #1
 800198e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	440a      	add	r2, r1
 8001994:	3328      	adds	r3, #40	@ 0x28
 8001996:	443b      	add	r3, r7
 8001998:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800199c:	7013      	strb	r3, [r2, #0]
	while (astring[j] != 0) {
 800199e:	f107 0214 	add.w	r2, r7, #20
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1eb      	bne.n	8001984 <prepare_inital_packet+0x7c>
	}
	/* padding with zeros */
	  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	e007      	b.n	80019c2 <prepare_inital_packet+0xba>
	  {
	    p_data[j] = 0;
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	4413      	add	r3, r2
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	  for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	3301      	adds	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	2b83      	cmp	r3, #131	@ 0x83
 80019c6:	d9f4      	bls.n	80019b2 <prepare_inital_packet+0xaa>
	  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	@ 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <prepare_packet>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */

static void prepare_packet(uint8_t *p_source, uint8_t *p_packet, uint8_t pkt_nr, uint32_t size_blk) {
 80019d2:	b480      	push	{r7}
 80019d4:	b089      	sub	sp, #36	@ 0x24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4613      	mov	r3, r2
 80019e0:	71fb      	strb	r3, [r7, #7]
	uint8_t *p_record;
	uint32_t i, size, packetSize;

	  /* Make first three packet */
	packetSize = size_blk >= PACKET_1K_SIZE ? PACKET_1K_SIZE: PACKET_SIZE;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e8:	d302      	bcc.n	80019f0 <prepare_packet+0x1e>
 80019ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019ee:	e000      	b.n	80019f2 <prepare_packet+0x20>
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	61bb      	str	r3, [r7, #24]
	size = size_blk < packetSize ? size_blk: packetSize;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	bf28      	it	cs
 80019fc:	4613      	movcs	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
	 if (packetSize == PACKET_1K_SIZE)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a06:	d104      	bne.n	8001a12 <prepare_packet+0x40>
	  {
	    p_packet[PACKET_START_INDEX] = STX;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	701a      	strb	r2, [r3, #0]
 8001a10:	e003      	b.n	8001a1a <prepare_packet+0x48>
	  }
	  else
	  {
	    p_packet[PACKET_START_INDEX] = SOH;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3301      	adds	r3, #1
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
	  }

	 p_packet[PACKET_NUMBER_INDEX] = pkt_nr;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	701a      	strb	r2, [r3, #0]
	  p_packet[PACKET_CNUMBER_INDEX] = (~pkt_nr);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3303      	adds	r3, #3
 8001a26:	79fa      	ldrb	r2, [r7, #7]
 8001a28:	43d2      	mvns	r2, r2
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
	  p_record = p_source;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	613b      	str	r3, [r7, #16]

	  /* Filename packet has valid data */
	  for (i = 0; (i < size + PACKET_DATA_INDEX);i++) {
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e008      	b.n	8001a4a <prepare_packet+0x78>
		  p_packet[i] = *p_record;
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	7812      	ldrb	r2, [r2, #0]
 8001a42:	701a      	strb	r2, [r3, #0]
	  for (i = 0; (i < size + PACKET_DATA_INDEX);i++) {
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3f1      	bcc.n	8001a38 <prepare_packet+0x66>
	  }
	  if ( size  <= packetSize)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d810      	bhi.n	8001a7e <prepare_packet+0xac>
	   {
	     for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	e007      	b.n	8001a74 <prepare_packet+0xa2>
	     {
	       p_packet[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	221a      	movs	r2, #26
 8001a6c:	701a      	strb	r2, [r3, #0]
	     for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3304      	adds	r3, #4
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3f2      	bcc.n	8001a64 <prepare_packet+0x92>
	     }
	   }
}
 8001a7e:	bf00      	nop
 8001a80:	3724      	adds	r7, #36	@ 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <ymodem_receive>:
/**
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef ymodem_receive ( uint32_t *p_size ) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b092      	sub	sp, #72	@ 0x48
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

		uint32_t flashDestination, ramSource, fileSize;
		uint32_t i, packetLength, sessionDone = 0, fileDone, sessionBegin= 0, errors = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
		uint8_t* filePtr;
		uint8_t p_fileSize[FILE_SIZE_LENGTH], tmp, packetsReceived;
		COM_StatusTypeDef result = COM_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	 /* Initialize flashdestination variable */
		flashDestination = APPLICATION_ADDRESS;
 8001aa6:	4b86      	ldr	r3, [pc, #536]	@ (8001cc0 <ymodem_receive+0x234>)
 8001aa8:	647b      	str	r3, [r7, #68]	@ 0x44
		while ((sessionDone == 0) && (result == COM_OK)) {
 8001aaa:	e0fb      	b.n	8001ca4 <ymodem_receive+0x218>
			packetsReceived = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			fileDone = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
			while ((fileDone == 0) && (result == COM_OK)) {
 8001ab6:	e0ed      	b.n	8001c94 <ymodem_receive+0x208>
				switch (receive_packet(aPacketData, &packetLength, DOWNLOAD_TIMEOUT)) {
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4880      	ldr	r0, [pc, #512]	@ (8001cc4 <ymodem_receive+0x238>)
 8001ac4:	f7ff fe52 	bl	800176c <receive_packet>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <ymodem_receive+0x4a>
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	f000 80bc 	beq.w	8001c4c <ymodem_receive+0x1c0>
 8001ad4:	e0c4      	b.n	8001c60 <ymodem_receive+0x1d4>
				case HAL_OK:
					errors = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
					switch(packetLength) {
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <ymodem_receive+0x66>
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d10c      	bne.n	8001afe <ymodem_receive+0x72>
					case 2:
						/* Abort by the user--------------*/
						serial_put_byte(ACK);
 8001ae4:	2006      	movs	r0, #6
 8001ae6:	f7fe fea1 	bl	800082c <serial_put_byte>
						result = COM_ABORT;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
						break;
 8001af0:	e0ab      	b.n	8001c4a <ymodem_receive+0x1be>

					case 0:
						/* End of transmission-----------*/
						serial_put_byte(ACK);
 8001af2:	2006      	movs	r0, #6
 8001af4:	f7fe fe9a 	bl	800082c <serial_put_byte>
						fileDone = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	63bb      	str	r3, [r7, #56]	@ 0x38
						break;
 8001afc:	e0a5      	b.n	8001c4a <ymodem_receive+0x1be>
					default:
						/* Normal Data range-------------------*/
						if (aPacketData[PACKET_NUMBER_INDEX] != packetsReceived) {
 8001afe:	4b71      	ldr	r3, [pc, #452]	@ (8001cc4 <ymodem_receive+0x238>)
 8001b00:	789b      	ldrb	r3, [r3, #2]
 8001b02:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d003      	beq.n	8001b12 <ymodem_receive+0x86>
							serial_put_byte(NAK);
 8001b0a:	2015      	movs	r0, #21
 8001b0c:	f7fe fe8e 	bl	800082c <serial_put_byte>
								}
							}
							packetsReceived ++;
							sessionBegin = 1;
						}
						break;
 8001b10:	e09a      	b.n	8001c48 <ymodem_receive+0x1bc>
							if (packetsReceived == 0) {
 8001b12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d175      	bne.n	8001c06 <ymodem_receive+0x17a>
								if (aPacketData[PACKET_DATA_INDEX] != 0) {
 8001b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <ymodem_receive+0x238>)
 8001b1c:	791b      	ldrb	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d069      	beq.n	8001bf6 <ymodem_receive+0x16a>
									filePtr = aPacketData + PACKET_DATA_INDEX;
 8001b22:	4b69      	ldr	r3, [pc, #420]	@ (8001cc8 <ymodem_receive+0x23c>)
 8001b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
									i = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	643b      	str	r3, [r7, #64]	@ 0x40
									while ((*filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 8001b2a:	e008      	b.n	8001b3e <ymodem_receive+0xb2>
										aFileName[i++] = *filePtr++;
 8001b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b2e:	1c53      	adds	r3, r2, #1
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b34:	1c59      	adds	r1, r3, #1
 8001b36:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b38:	7811      	ldrb	r1, [r2, #0]
 8001b3a:	4a64      	ldr	r2, [pc, #400]	@ (8001ccc <ymodem_receive+0x240>)
 8001b3c:	54d1      	strb	r1, [r2, r3]
									while ((*filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <ymodem_receive+0xc0>
 8001b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b4a:	d9ef      	bls.n	8001b2c <ymodem_receive+0xa0>
									aFileName[i++] = '\0';
 8001b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b52:	4a5e      	ldr	r2, [pc, #376]	@ (8001ccc <ymodem_receive+0x240>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	54d1      	strb	r1, [r2, r3]
									i = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	643b      	str	r3, [r7, #64]	@ 0x40
									filePtr++;
 8001b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5e:	3301      	adds	r3, #1
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
									while ((*filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8001b62:	e00a      	b.n	8001b7a <ymodem_receive+0xee>
										p_fileSize[i++] = *filePtr++;
 8001b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b66:	1c53      	adds	r3, r2, #1
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b6c:	1c59      	adds	r1, r3, #1
 8001b6e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	3348      	adds	r3, #72	@ 0x48
 8001b74:	443b      	add	r3, r7
 8001b76:	f803 2c3c 	strb.w	r2, [r3, #-60]
									while ((*filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8001b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d002      	beq.n	8001b88 <ymodem_receive+0xfc>
 8001b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d9ed      	bls.n	8001b64 <ymodem_receive+0xd8>
									p_fileSize[i++] = '\0';
 8001b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b8e:	3348      	adds	r3, #72	@ 0x48
 8001b90:	443b      	add	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	f803 2c3c 	strb.w	r2, [r3, #-60]
									str_to_int(p_fileSize, &fileSize);
 8001b98:	f107 0220 	add.w	r2, r7, #32
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fd32 	bl	800060c <str_to_int>
									if (*p_size > (USER_FLASH_SIZE + 1)) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a48      	ldr	r2, [pc, #288]	@ (8001cd0 <ymodem_receive+0x244>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d914      	bls.n	8001bdc <ymodem_receive+0x150>
									  tmp = CA;
 8001bb2:	2318      	movs	r3, #24
 8001bb4:	72fb      	strb	r3, [r7, #11]
									  HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001bb6:	f107 010b 	add.w	r1, r7, #11
 8001bba:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4844      	ldr	r0, [pc, #272]	@ (8001cd4 <ymodem_receive+0x248>)
 8001bc2:	f004 faf5 	bl	80061b0 <HAL_UART_Transmit>
									  HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8001bc6:	f107 010b 	add.w	r1, r7, #11
 8001bca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4840      	ldr	r0, [pc, #256]	@ (8001cd4 <ymodem_receive+0x248>)
 8001bd2:	f004 faed 	bl	80061b0 <HAL_UART_Transmit>
									  result = COM_LIMIT;
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
									FLASH_IF_erase(APPLICATION_ADDRESS);
 8001bdc:	4838      	ldr	r0, [pc, #224]	@ (8001cc0 <ymodem_receive+0x234>)
 8001bde:	f7fe fea1 	bl	8000924 <FLASH_IF_erase>
									*p_size = fileSize;
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	601a      	str	r2, [r3, #0]
									serial_put_byte(ACK);
 8001be8:	2006      	movs	r0, #6
 8001bea:	f7fe fe1f 	bl	800082c <serial_put_byte>
									serial_put_byte(CRC16);
 8001bee:	2043      	movs	r0, #67	@ 0x43
 8001bf0:	f7fe fe1c 	bl	800082c <serial_put_byte>
 8001bf4:	e021      	b.n	8001c3a <ymodem_receive+0x1ae>
									serial_put_byte(ACK);
 8001bf6:	2006      	movs	r0, #6
 8001bf8:	f7fe fe18 	bl	800082c <serial_put_byte>
									fileDone = 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
									sessionDone = 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
									break;
 8001c04:	e021      	b.n	8001c4a <ymodem_receive+0x1be>
								ramSource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 8001c06:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <ymodem_receive+0x23c>)
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
								if (FLASH_IF_write(flashDestination, (uint32_t*)ramSource,packetLength/4)  == FLASHIF_OK) {
 8001c0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	461a      	mov	r2, r3
 8001c12:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c14:	f7fe fec6 	bl	80009a4 <FLASH_IF_write>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d104      	bne.n	8001c28 <ymodem_receive+0x19c>
									flashDestination += packetLength;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c22:	4413      	add	r3, r2
 8001c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c26:	e008      	b.n	8001c3a <ymodem_receive+0x1ae>
									serial_put_byte(CA);
 8001c28:	2018      	movs	r0, #24
 8001c2a:	f7fe fdff 	bl	800082c <serial_put_byte>
									serial_put_byte(CA);
 8001c2e:	2018      	movs	r0, #24
 8001c30:	f7fe fdfc 	bl	800082c <serial_put_byte>
									result = COM_DATA;
 8001c34:	2304      	movs	r3, #4
 8001c36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
							packetsReceived ++;
 8001c3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001c3e:	3301      	adds	r3, #1
 8001c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
							sessionBegin = 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	637b      	str	r3, [r7, #52]	@ 0x34
						break;
 8001c48:	bf00      	nop
				}
					break;
 8001c4a:	e023      	b.n	8001c94 <ymodem_receive+0x208>
				case HAL_BUSY: /* Abort actually */
					serial_put_byte(CA);
 8001c4c:	2018      	movs	r0, #24
 8001c4e:	f7fe fded 	bl	800082c <serial_put_byte>
					serial_put_byte(CA);
 8001c52:	2018      	movs	r0, #24
 8001c54:	f7fe fdea 	bl	800082c <serial_put_byte>
					result = COM_ABORT;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					break;
 8001c5e:	e019      	b.n	8001c94 <ymodem_receive+0x208>
				default:
					if (sessionBegin) {
 8001c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <ymodem_receive+0x1e0>
						errors++;
 8001c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c68:	3301      	adds	r3, #1
 8001c6a:	633b      	str	r3, [r7, #48]	@ 0x30
					}
					if (errors > MAX_ERRORS) {
 8001c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d909      	bls.n	8001c86 <ymodem_receive+0x1fa>
						  /* Abort communication */
						serial_put_byte(CA);
 8001c72:	2018      	movs	r0, #24
 8001c74:	f7fe fdda 	bl	800082c <serial_put_byte>
						serial_put_byte(CA);
 8001c78:	2018      	movs	r0, #24
 8001c7a:	f7fe fdd7 	bl	800082c <serial_put_byte>
						result = COM_ABORT;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					}
					else {
						serial_put_byte(CRC16); /* Ask for a packet */
						serial_put_byte(ACK); //BFM
					}
					break;
 8001c84:	e005      	b.n	8001c92 <ymodem_receive+0x206>
						serial_put_byte(CRC16); /* Ask for a packet */
 8001c86:	2043      	movs	r0, #67	@ 0x43
 8001c88:	f7fe fdd0 	bl	800082c <serial_put_byte>
						serial_put_byte(ACK); //BFM
 8001c8c:	2006      	movs	r0, #6
 8001c8e:	f7fe fdcd 	bl	800082c <serial_put_byte>
					break;
 8001c92:	bf00      	nop
			while ((fileDone == 0) && (result == COM_OK)) {
 8001c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d104      	bne.n	8001ca4 <ymodem_receive+0x218>
 8001c9a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f43f af0a 	beq.w	8001ab8 <ymodem_receive+0x2c>
		while ((sessionDone == 0) && (result == COM_OK)) {
 8001ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <ymodem_receive+0x228>
 8001caa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f43f aefc 	beq.w	8001aac <ymodem_receive+0x20>
				}
		}
	}
	return result;
 8001cb4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3748      	adds	r7, #72	@ 0x48
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08040000 	.word	0x08040000
 8001cc4:	200001e0 	.word	0x200001e0
 8001cc8:	200001e4 	.word	0x200001e4
 8001ccc:	2000017c 	.word	0x2000017c
 8001cd0:	00040001 	.word	0x00040001
 8001cd4:	20000128 	.word	0x20000128

08001cd8 <ymodem_transmit>:
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef ymodem_transmit(uint8_t* p_buff,const uint8_t* p_file_name, uint32_t file_size)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b092      	sub	sp, #72	@ 0x48
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	  uint32_t errors = 0, ackRecpt = 0, size = 0, pktSize;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ce8:	2300      	movs	r3, #0
 8001cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cec:	2300      	movs	r3, #0
 8001cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  uint8_t *p_buf_int;
	  COM_StatusTypeDef result = COM_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  uint32_t blkNumber = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  #else /* CRC16_F */
	  uint8_t tempChkSum;
	  #endif /* CRC16_F */

	  /* Prepare first block - header */
	  prepare_inital_packet(aPacketData, p_file_name, file_size);
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	489d      	ldr	r0, [pc, #628]	@ (8001f74 <ymodem_transmit+0x29c>)
 8001d00:	f7ff fe02 	bl	8001908 <prepare_inital_packet>

	  while ((ackRecpt != 0) && (result == COM_OK)) {
 8001d04:	e062      	b.n	8001dcc <ymodem_transmit+0xf4>
		  /* Send Packet */
		  HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001d06:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d0a:	2283      	movs	r2, #131	@ 0x83
 8001d0c:	499a      	ldr	r1, [pc, #616]	@ (8001f78 <ymodem_transmit+0x2a0>)
 8001d0e:	489b      	ldr	r0, [pc, #620]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001d10:	f004 fa4e 	bl	80061b0 <HAL_UART_Transmit>
		  /* Send CRC or Check Sum based on CRC16_F */
		 #ifdef CRC16_F
		     tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	499a      	ldr	r1, [pc, #616]	@ (8001f80 <ymodem_transmit+0x2a8>)
 8001d18:	489a      	ldr	r0, [pc, #616]	@ (8001f84 <ymodem_transmit+0x2ac>)
 8001d1a:	f000 fbac 	bl	8002476 <HAL_CRC_Calculate>
 8001d1e:	6278      	str	r0, [r7, #36]	@ 0x24
		     serial_put_byte(tempCrc >> 8);
 8001d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fd80 	bl	800082c <serial_put_byte>
		     serial_put_byte((tempCrc & 0xFF));
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fd7b 	bl	800082c <serial_put_byte>
		     tempChksum = CalcChecksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
		     serial_put_byte(tempChksum);
		#endif /* CRC16_F */

		     /* Wait for Ack and 'C' */
		        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001d36:	f107 0120 	add.w	r1, r7, #32
 8001d3a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d3e:	2201      	movs	r2, #1
 8001d40:	488e      	ldr	r0, [pc, #568]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001d42:	f004 fac0 	bl	80062c6 <HAL_UART_Receive>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d136      	bne.n	8001dba <ymodem_transmit+0xe2>
		        {
		          if (aRxCtrl[0] == ACK)
 8001d4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d10a      	bne.n	8001d6a <ymodem_transmit+0x92>
		          {
		            ackRecpt = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	643b      	str	r3, [r7, #64]	@ 0x40
 		            HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT); //BFM added to wait for the 'C'
 8001d58:	f107 0120 	add.w	r1, r7, #32
 8001d5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d60:	2201      	movs	r2, #1
 8001d62:	4886      	ldr	r0, [pc, #536]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001d64:	f004 faaf 	bl	80062c6 <HAL_UART_Receive>
 8001d68:	e02a      	b.n	8001dc0 <ymodem_transmit+0xe8>
		          }
		          else if (aRxCtrl[0] == CA)
 8001d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d6e:	2b18      	cmp	r3, #24
 8001d70:	d126      	bne.n	8001dc0 <ymodem_transmit+0xe8>
		          {
		            if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA))
 8001d72:	f107 0120 	add.w	r1, r7, #32
 8001d76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	487f      	ldr	r0, [pc, #508]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001d7e:	f004 faa2 	bl	80062c6 <HAL_UART_Receive>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11b      	bne.n	8001dc0 <ymodem_transmit+0xe8>
 8001d88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d8c:	2b18      	cmp	r3, #24
 8001d8e:	d117      	bne.n	8001dc0 <ymodem_transmit+0xe8>
		            {
		              HAL_Delay(2);
 8001d90:	2002      	movs	r0, #2
 8001d92:	f000 fa1f 	bl	80021d4 <HAL_Delay>
		              __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001d96:	4b79      	ldr	r3, [pc, #484]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
		              __HAL_UART_CLEAR_OREFLAG(&UartHandle);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	4b76      	ldr	r3, [pc, #472]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	4b74      	ldr	r3, [pc, #464]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
		              result = COM_ABORT;
 8001db2:	2302      	movs	r3, #2
 8001db4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001db8:	e002      	b.n	8001dc0 <ymodem_transmit+0xe8>
		            }
		          }
		        }
		        else
		        {
		          errors++;
 8001dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	647b      	str	r3, [r7, #68]	@ 0x44
		        }
		        if (errors >= MAX_ERRORS)
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d902      	bls.n	8001dcc <ymodem_transmit+0xf4>
		         {
		             result = COM_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	  while ((ackRecpt != 0) && (result == COM_OK)) {
 8001dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <ymodem_transmit+0x102>
 8001dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d095      	beq.n	8001d06 <ymodem_transmit+0x2e>
		         }
	  }
		        p_buf_int = p_buff;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
		        size = file_size;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		        /* Here 1024 bytes length is used to send the packets */
		        while ((size) && (result == COM_OK)) {
 8001de2:	e073      	b.n	8001ecc <ymodem_transmit+0x1f4>
		        	prepare_packet(p_buf_int, aPacketData, blkNumber, size);
 8001de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dea:	4962      	ldr	r1, [pc, #392]	@ (8001f74 <ymodem_transmit+0x29c>)
 8001dec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dee:	f7ff fdf0 	bl	80019d2 <prepare_packet>
		        	ackRecpt = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	643b      	str	r3, [r7, #64]	@ 0x40
		        	aRxCtrl[0] = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3020 	strb.w	r3, [r7, #32]
		        	errors = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	647b      	str	r3, [r7, #68]	@ 0x44

		        	    /* Resend packet if NAK for few times else end of communication */

		        	while ((!ackRecpt) && (result == COM_OK)) {
 8001e00:	e05d      	b.n	8001ebe <ymodem_transmit+0x1e6>
		        		/* Send next packet */
		        		      if (size >= PACKET_1K_SIZE)
 8001e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e08:	d303      	bcc.n	8001e12 <ymodem_transmit+0x13a>
		        		      {
		        		        pktSize = PACKET_1K_SIZE;
 8001e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e10:	e001      	b.n	8001e16 <ymodem_transmit+0x13e>
		        		      }
		        		      else
		        		      {
		        		        pktSize = PACKET_SIZE;
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
		        		      }
		        		      HAL_UART_Transmit(&UartHandle,&aPacketData[PACKET_START_INDEX], pktSize + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3303      	adds	r3, #3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e22:	4955      	ldr	r1, [pc, #340]	@ (8001f78 <ymodem_transmit+0x2a0>)
 8001e24:	4855      	ldr	r0, [pc, #340]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001e26:	f004 f9c3 	bl	80061b0 <HAL_UART_Transmit>
		        		      /* Send CRC or Check Sum based on CRC16_F */
		        		#ifdef CRC16_F
		        		      tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pktSize);
 8001e2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e2c:	4954      	ldr	r1, [pc, #336]	@ (8001f80 <ymodem_transmit+0x2a8>)
 8001e2e:	4855      	ldr	r0, [pc, #340]	@ (8001f84 <ymodem_transmit+0x2ac>)
 8001e30:	f000 fb21 	bl	8002476 <HAL_CRC_Calculate>
 8001e34:	6278      	str	r0, [r7, #36]	@ 0x24
		        		      serial_put_byte(tempCrc >> 8);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fcf5 	bl	800082c <serial_put_byte>
		        		      serial_put_byte(tempCrc & 0xFF);
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fcf0 	bl	800082c <serial_put_byte>
		        		#else /* CRC16_F */
		        		      tempChksum = CalcChecksum(&aPacketData[PACKET_DATA_INDEX], pktSize);
		        		      serial_put_byte(tempChksum);
		        		#endif /* CRC16_F */
		        		      /* Wait for Ack */
		        		      if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK && (aRxCtrl[0] == ACK))
 8001e4c:	f107 0120 	add.w	r1, r7, #32
 8001e50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e54:	2201      	movs	r2, #1
 8001e56:	4849      	ldr	r0, [pc, #292]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001e58:	f004 fa35 	bl	80062c6 <HAL_UART_Receive>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d124      	bne.n	8001eac <ymodem_transmit+0x1d4>
 8001e62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d120      	bne.n	8001eac <ymodem_transmit+0x1d4>
		        		      {
									ackRecpt = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	643b      	str	r3, [r7, #64]	@ 0x40
									if (size >= pktSize) {
 8001e6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d313      	bcc.n	8001e9e <ymodem_transmit+0x1c6>
										p_buf_int += pktSize;
 8001e76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7a:	4413      	add	r3, r2
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
										size -= pktSize;
 8001e7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
										if (blkNumber == (USER_FLASH_SIZE / PACKET_1K_SIZE))
 8001e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e8c:	d103      	bne.n	8001e96 <ymodem_transmit+0x1be>
										  {
											result = COM_LIMIT; /* boundary error */
 8001e8e:	2305      	movs	r3, #5
 8001e90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
									if (size >= pktSize) {
 8001e94:	e00d      	b.n	8001eb2 <ymodem_transmit+0x1da>
										  }
										  else
										  {
											blkNumber++;
 8001e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e98:	3301      	adds	r3, #1
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
									if (size >= pktSize) {
 8001e9c:	e009      	b.n	8001eb2 <ymodem_transmit+0x1da>
										  }
									}
									else
									{
										size = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
										p_buf_int += pktSize;
 8001ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea6:	4413      	add	r3, r2
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
									if (size >= pktSize) {
 8001eaa:	e002      	b.n	8001eb2 <ymodem_transmit+0x1da>
									}
		        		      }
		        		      else {
		        		    	  errors++;
 8001eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eae:	3301      	adds	r3, #1
 8001eb0:	647b      	str	r3, [r7, #68]	@ 0x44
		        		      }
		        		      /* Resend packet if NAK  for a count of 10 else end of communication */
		        		      if (errors >= MAX_ERRORS)
 8001eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d902      	bls.n	8001ebe <ymodem_transmit+0x1e6>
		        		      {
		        		        result = COM_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		        	while ((!ackRecpt) && (result == COM_OK)) {
 8001ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <ymodem_transmit+0x1f4>
 8001ec4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d09a      	beq.n	8001e02 <ymodem_transmit+0x12a>
		        while ((size) && (result == COM_OK)) {
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <ymodem_transmit+0x202>
 8001ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d084      	beq.n	8001de4 <ymodem_transmit+0x10c>
		        		      }
		        	}

		        }
		        /* Sending End Of Transmission char */
			  ackRecpt = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	643b      	str	r3, [r7, #64]	@ 0x40
			  aRxCtrl[0] = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3020 	strb.w	r3, [r7, #32]
			  errors = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	647b      	str	r3, [r7, #68]	@ 0x44
			  while (( !ackRecpt ) && ( result == COM_OK ))
 8001ee8:	e057      	b.n	8001f9a <ymodem_transmit+0x2c2>
			    {
			      serial_put_byte(EOT);
 8001eea:	2004      	movs	r0, #4
 8001eec:	f7fe fc9e 	bl	800082c <serial_put_byte>

			      /* Wait for Ack */
			      if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8001ef0:	f107 0120 	add.w	r1, r7, #32
 8001ef4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4820      	ldr	r0, [pc, #128]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001efc:	f004 f9e3 	bl	80062c6 <HAL_UART_Receive>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d140      	bne.n	8001f88 <ymodem_transmit+0x2b0>
					{
					  if (aRxCtrl[0] == ACK)
 8001f06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d10a      	bne.n	8001f24 <ymodem_transmit+0x24c>
					  {
						ackRecpt = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	643b      	str	r3, [r7, #64]	@ 0x40
						HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT); //BFM added to wait for the 'C'
 8001f12:	f107 0120 	add.w	r1, r7, #32
 8001f16:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4817      	ldr	r0, [pc, #92]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001f1e:	f004 f9d2 	bl	80062c6 <HAL_UART_Receive>
 8001f22:	e034      	b.n	8001f8e <ymodem_transmit+0x2b6>
					  }
					  else if (aRxCtrl[0] == CA)
 8001f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f28:	2b18      	cmp	r3, #24
 8001f2a:	d130      	bne.n	8001f8e <ymodem_transmit+0x2b6>
					  {
						if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA))
 8001f2c:	f107 0120 	add.w	r1, r7, #32
 8001f30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f34:	2201      	movs	r2, #1
 8001f36:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001f38:	f004 f9c5 	bl	80062c6 <HAL_UART_Receive>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d125      	bne.n	8001f8e <ymodem_transmit+0x2b6>
 8001f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f46:	2b18      	cmp	r3, #24
 8001f48:	d121      	bne.n	8001f8e <ymodem_transmit+0x2b6>
						{
						  HAL_Delay(2);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f000 f942 	bl	80021d4 <HAL_Delay>
						  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
						  __HAL_UART_CLEAR_OREFLAG(&UartHandle);
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <ymodem_transmit+0x2a4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
						  result = COM_ABORT;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001f72:	e00c      	b.n	8001f8e <ymodem_transmit+0x2b6>
 8001f74:	200001e0 	.word	0x200001e0
 8001f78:	200001e1 	.word	0x200001e1
 8001f7c:	20000128 	.word	0x20000128
 8001f80:	200001e4 	.word	0x200001e4
 8001f84:	20000084 	.word	0x20000084
						}
					  }
					}
			      else
			      {
			        errors++;
 8001f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	647b      	str	r3, [r7, #68]	@ 0x44
			      }

			      if (errors >=  MAX_ERRORS)
 8001f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d902      	bls.n	8001f9a <ymodem_transmit+0x2c2>
			      {
			        result = COM_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			  while (( !ackRecpt ) && ( result == COM_OK ))
 8001f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d103      	bne.n	8001fa8 <ymodem_transmit+0x2d0>
 8001fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0a0      	beq.n	8001eea <ymodem_transmit+0x212>
			      }
			    }

			  /* Empty packet sent - some terminal emulators need this to close session */
			  if ( result == COM_OK )
 8001fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d164      	bne.n	800207a <ymodem_transmit+0x3a2>
			   {
			      /* Preparing an empty packet */
			      aPacketData[PACKET_START_INDEX] = SOH;
 8001fb0:	4b35      	ldr	r3, [pc, #212]	@ (8002088 <ymodem_transmit+0x3b0>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	705a      	strb	r2, [r3, #1]
			      aPacketData[PACKET_NUMBER_INDEX] = 0;
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <ymodem_transmit+0x3b0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	709a      	strb	r2, [r3, #2]
			      aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8001fbc:	4b32      	ldr	r3, [pc, #200]	@ (8002088 <ymodem_transmit+0x3b0>)
 8001fbe:	22ff      	movs	r2, #255	@ 0xff
 8001fc0:	70da      	strb	r2, [r3, #3]
			      for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fc8:	e009      	b.n	8001fde <ymodem_transmit+0x306>
			      {
			        aPacketData [i] = 0x00;
 8001fca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001fce:	4a2e      	ldr	r2, [pc, #184]	@ (8002088 <ymodem_transmit+0x3b0>)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	54d1      	strb	r1, [r2, r3]
			      for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++)
 8001fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001fe2:	2b83      	cmp	r3, #131	@ 0x83
 8001fe4:	d9f1      	bls.n	8001fca <ymodem_transmit+0x2f2>
			      }

			      /* Send Packet */
			      HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8001fe6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fea:	2283      	movs	r2, #131	@ 0x83
 8001fec:	4927      	ldr	r1, [pc, #156]	@ (800208c <ymodem_transmit+0x3b4>)
 8001fee:	4828      	ldr	r0, [pc, #160]	@ (8002090 <ymodem_transmit+0x3b8>)
 8001ff0:	f004 f8de 	bl	80061b0 <HAL_UART_Transmit>

			      /* Send CRC or Check Sum based on CRC16_F */
					#ifdef CRC16_F
						  tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pktSize);
 8001ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ff6:	4927      	ldr	r1, [pc, #156]	@ (8002094 <ymodem_transmit+0x3bc>)
 8001ff8:	4827      	ldr	r0, [pc, #156]	@ (8002098 <ymodem_transmit+0x3c0>)
 8001ffa:	f000 fa3c 	bl	8002476 <HAL_CRC_Calculate>
 8001ffe:	6278      	str	r0, [r7, #36]	@ 0x24
						  serial_put_byte(tempCrc >> 8);
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fc10 	bl	800082c <serial_put_byte>
						  serial_put_byte(tempCrc & 0xFF);
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fc0b 	bl	800082c <serial_put_byte>
						  tempChksum = CalcChecksum(&aPacketData[PACKET_DATA_INDEX], pktSize);
						  serial_put_byte(tempChksum);
					#endif /* CRC16_F */

			      /* Wait for Ack and 'C' */
			      if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK)
 8002016:	f107 0120 	add.w	r1, r7, #32
 800201a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800201e:	2201      	movs	r2, #1
 8002020:	481b      	ldr	r0, [pc, #108]	@ (8002090 <ymodem_transmit+0x3b8>)
 8002022:	f004 f950 	bl	80062c6 <HAL_UART_Receive>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d126      	bne.n	800207a <ymodem_transmit+0x3a2>
			      {
			    	  if (aRxCtrl[0] == CA)
 800202c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002030:	2b18      	cmp	r3, #24
 8002032:	d122      	bne.n	800207a <ymodem_transmit+0x3a2>
					  {
						if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA))
 8002034:	f107 0120 	add.w	r1, r7, #32
 8002038:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800203c:	2201      	movs	r2, #1
 800203e:	4814      	ldr	r0, [pc, #80]	@ (8002090 <ymodem_transmit+0x3b8>)
 8002040:	f004 f941 	bl	80062c6 <HAL_UART_Receive>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d117      	bne.n	800207a <ymodem_transmit+0x3a2>
 800204a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800204e:	2b18      	cmp	r3, #24
 8002050:	d113      	bne.n	800207a <ymodem_transmit+0x3a2>
						{
						  HAL_Delay(2);
 8002052:	2002      	movs	r0, #2
 8002054:	f000 f8be 	bl	80021d4 <HAL_Delay>
						  __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <ymodem_transmit+0x3b8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
						  __HAL_UART_CLEAR_OREFLAG(&UartHandle);
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <ymodem_transmit+0x3b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <ymodem_transmit+0x3b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
						  result = COM_ABORT;
 8002074:	2302      	movs	r3, #2
 8002076:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
						}
					  }
			      }
			    }
			    return result; /* file transmitted successfully */
 800207a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800207e:	4618      	mov	r0, r3
 8002080:	3748      	adds	r7, #72	@ 0x48
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200001e0 	.word	0x200001e0
 800208c:	200001e1 	.word	0x200001e1
 8002090:	20000128 	.word	0x20000128
 8002094:	200001e4 	.word	0x200001e4
 8002098:	20000084 	.word	0x20000084

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020a0:	f7ff fb52 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020ca:	f005 fadb 	bl	8007684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7fe fd0f 	bl	8000af0 <main>
  bx  lr    
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80020e0:	08008a68 	.word	0x08008a68
  ldr r2, =_sbss
 80020e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80020e8:	20000758 	.word	0x20000758

080020ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC_IRQHandler>
	...

080020f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_Init+0x40>)
 80020fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_Init+0x40>)
 8002106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_Init+0x40>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f000 f94f 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f808 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002124:	f7ff f8fc 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00

08002134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_InitTick+0x54>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_InitTick+0x58>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214a:	fbb3 f3f1 	udiv	r3, r3, r1
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f967 	bl	8002426 <HAL_SYSTICK_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00e      	b.n	8002180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d80a      	bhi.n	800217e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	2200      	movs	r2, #0
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002170:	f000 f92f 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4a06      	ldr	r2, [pc, #24]	@ (8002190 <HAL_InitTick+0x5c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000000 	.word	0x20000000
 800218c:	20000008 	.word	0x20000008
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002198:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x20>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_IncTick+0x24>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_IncTick+0x24>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000008 	.word	0x20000008
 80021b8:	200005e8 	.word	0x200005e8

080021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_GetTick+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200005e8 	.word	0x200005e8

080021d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff ffee 	bl	80021bc <HAL_GetTick>
 80021e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ec:	d005      	beq.n	80021fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_Delay+0x44>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fa:	bf00      	nop
 80021fc:	f7ff ffde 	bl	80021bc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	429a      	cmp	r2, r3
 800220a:	d8f7      	bhi.n	80021fc <HAL_Delay+0x28>
  {
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008

0800221c <__NVIC_SetPriorityGrouping>:
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	@ (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <__NVIC_EnableIRQ+0x38>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff29 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff3e 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff31 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e00e      	b.n	800246e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	795b      	ldrb	r3, [r3, #5]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe ff85 	bl	8001370 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2202      	movs	r2, #2
 800248a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00a      	b.n	80024b8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	441a      	add	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3f0      	bcc.n	80024a2 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80024ce:	693b      	ldr	r3, [r7, #16]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ea:	f7ff fe67 	bl	80021bc <HAL_GetTick>
 80024ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d008      	beq.n	800250e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2280      	movs	r2, #128	@ 0x80
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e052      	b.n	80025b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0216 	bic.w	r2, r2, #22
 800251c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800252c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_DMA_Abort+0x62>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0208 	bic.w	r2, r2, #8
 800254c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255e:	e013      	b.n	8002588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002560:	f7ff fe2c 	bl	80021bc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b05      	cmp	r3, #5
 800256c:	d90c      	bls.n	8002588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e015      	b.n	80025b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e4      	bne.n	8002560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259a:	223f      	movs	r2, #63	@ 0x3f
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d004      	beq.n	80025da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e00c      	b.n	80025f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260e:	b2db      	uxtb	r3, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800262a:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <HAL_FLASH_Program+0x9c>)
 800262c:	7e1b      	ldrb	r3, [r3, #24]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_FLASH_Program+0x1a>
 8002632:	2302      	movs	r3, #2
 8002634:	e03b      	b.n	80026ae <HAL_FLASH_Program+0x92>
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <HAL_FLASH_Program+0x9c>)
 8002638:	2201      	movs	r2, #1
 800263a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800263c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002640:	f000 f8b0 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d12b      	bne.n	80026a6 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002654:	783b      	ldrb	r3, [r7, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	68b8      	ldr	r0, [r7, #8]
 800265a:	f000 f95b 	bl	8002914 <FLASH_Program_Byte>
 800265e:	e016      	b.n	800268e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d105      	bne.n	8002672 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	68b8      	ldr	r0, [r7, #8]
 800266c:	f000 f92e 	bl	80028cc <FLASH_Program_HalfWord>
 8002670:	e00d      	b.n	800268e <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d105      	bne.n	8002684 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	68b8      	ldr	r0, [r7, #8]
 800267e:	f000 f903 	bl	8002888 <FLASH_Program_Word>
 8002682:	e004      	b.n	800268e <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002688:	68b8      	ldr	r0, [r7, #8]
 800268a:	f000 f8cb 	bl	8002824 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800268e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002692:	f000 f887 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002696:	4603      	mov	r3, r0
 8002698:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800269a:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_FLASH_Program+0xa0>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <HAL_FLASH_Program+0xa0>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026a6:	4b04      	ldr	r3, [pc, #16]	@ (80026b8 <HAL_FLASH_Program+0x9c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	761a      	strb	r2, [r3, #24]

  return status;
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200005ec 	.word	0x200005ec
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_FLASH_Unlock+0x38>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da0b      	bge.n	80026ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026d2:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <HAL_FLASH_Unlock+0x38>)
 80026d4:	4a09      	ldr	r2, [pc, #36]	@ (80026fc <HAL_FLASH_Unlock+0x3c>)
 80026d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026d8:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <HAL_FLASH_Unlock+0x38>)
 80026da:	4a09      	ldr	r2, [pc, #36]	@ (8002700 <HAL_FLASH_Unlock+0x40>)
 80026dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <HAL_FLASH_Unlock+0x38>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	da01      	bge.n	80026ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80026ea:	79fb      	ldrb	r3, [r7, #7]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	45670123 	.word	0x45670123
 8002700:	cdef89ab 	.word	0xcdef89ab

08002704 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_FLASH_Lock+0x1c>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4a04      	ldr	r2, [pc, #16]	@ (8002720 <HAL_FLASH_Lock+0x1c>)
 800270e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002712:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40023c00 	.word	0x40023c00

08002724 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_FLASH_OB_Unlock+0x2c>)
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_FLASH_OB_Unlock+0x2c>)
 8002736:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <HAL_FLASH_OB_Unlock+0x30>)
 8002738:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_FLASH_OB_Unlock+0x2c>)
 800273c:	4a06      	ldr	r2, [pc, #24]	@ (8002758 <HAL_FLASH_OB_Unlock+0x34>)
 800273e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40023c00 	.word	0x40023c00
 8002754:	08192a3b 	.word	0x08192a3b
 8002758:	4c5d6e7f 	.word	0x4c5d6e7f

0800275c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_FLASH_OB_Lock+0x1c>)
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_FLASH_OB_Lock+0x1c>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_FLASH_OB_Launch+0x24>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_FLASH_OB_Launch+0x24>)
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	b2db      	uxtb	r3, r3
 800278e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8002790:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002794:	f000 f806 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c14 	.word	0x40023c14

080027a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	@ (800281c <FLASH_WaitForLastOperation+0x78>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80027b6:	f7ff fd01 	bl	80021bc <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80027bc:	e010      	b.n	80027e0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027c4:	d00c      	beq.n	80027e0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <FLASH_WaitForLastOperation+0x38>
 80027cc:	f7ff fcf6 	bl	80021bc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d201      	bcs.n	80027e0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e019      	b.n	8002814 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <FLASH_WaitForLastOperation+0x7c>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e8      	bne.n	80027be <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80027ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <FLASH_WaitForLastOperation+0x7c>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80027f8:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <FLASH_WaitForLastOperation+0x7c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <FLASH_WaitForLastOperation+0x7c>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800280a:	f000 f8a5 	bl	8002958 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002812:	2300      	movs	r3, #0

}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200005ec 	.word	0x200005ec
 8002820:	40023c00 	.word	0x40023c00

08002824 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <FLASH_Program_DoubleWord+0x60>)
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	4a13      	ldr	r2, [pc, #76]	@ (8002884 <FLASH_Program_DoubleWord+0x60>)
 8002836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800283a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <FLASH_Program_DoubleWord+0x60>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <FLASH_Program_DoubleWord+0x60>)
 8002842:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002846:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002848:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <FLASH_Program_DoubleWord+0x60>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	4a0d      	ldr	r2, [pc, #52]	@ (8002884 <FLASH_Program_DoubleWord+0x60>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800285a:	f3bf 8f6f 	isb	sy
}
 800285e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	000a      	movs	r2, r1
 800286e:	2300      	movs	r3, #0
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	3104      	adds	r1, #4
 8002874:	4613      	mov	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40023c00 	.word	0x40023c00

08002888 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002892:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <FLASH_Program_Word+0x40>)
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	4a0c      	ldr	r2, [pc, #48]	@ (80028c8 <FLASH_Program_Word+0x40>)
 8002898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800289c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <FLASH_Program_Word+0x40>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	4a09      	ldr	r2, [pc, #36]	@ (80028c8 <FLASH_Program_Word+0x40>)
 80028a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <FLASH_Program_Word+0x40>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4a06      	ldr	r2, [pc, #24]	@ (80028c8 <FLASH_Program_Word+0x40>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	601a      	str	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40023c00 	.word	0x40023c00

080028cc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <FLASH_Program_HalfWord+0x44>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002910 <FLASH_Program_HalfWord+0x44>)
 80028de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <FLASH_Program_HalfWord+0x44>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <FLASH_Program_HalfWord+0x44>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028f0:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <FLASH_Program_HalfWord+0x44>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4a06      	ldr	r2, [pc, #24]	@ (8002910 <FLASH_Program_HalfWord+0x44>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	887a      	ldrh	r2, [r7, #2]
 8002900:	801a      	strh	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00

08002914 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002920:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <FLASH_Program_Byte+0x40>)
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <FLASH_Program_Byte+0x40>)
 8002926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <FLASH_Program_Byte+0x40>)
 800292e:	4a09      	ldr	r2, [pc, #36]	@ (8002954 <FLASH_Program_Byte+0x40>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002934:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <FLASH_Program_Byte+0x40>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <FLASH_Program_Byte+0x40>)
 800293a:	f043 0301 	orr.w	r3, r3, #1
 800293e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00

08002958 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800295c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002968:	4b2d      	ldr	r3, [pc, #180]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 8002972:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002974:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 8002976:	2210      	movs	r2, #16
 8002978:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800297a:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002986:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 8002990:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 8002994:	2220      	movs	r2, #32
 8002996:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002998:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 80029ae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80029b0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 80029b2:	2240      	movs	r2, #64	@ 0x40
 80029b4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80029b6:	4b19      	ldr	r3, [pc, #100]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80029c2:	4b17      	ldr	r3, [pc, #92]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	4a15      	ldr	r2, [pc, #84]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 80029cc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80029ce:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80029e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 80029ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 80029ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029f2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80029f4:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002a00:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f043 0320 	orr.w	r3, r3, #32
 8002a08:	4a05      	ldr	r2, [pc, #20]	@ (8002a20 <FLASH_SetErrorCode+0xc8>)
 8002a0a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <FLASH_SetErrorCode+0xc4>)
 8002a0e:	2202      	movs	r2, #2
 8002a10:	60da      	str	r2, [r3, #12]
  }
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40023c00 	.word	0x40023c00
 8002a20:	200005ec 	.word	0x200005ec

08002a24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a32:	4b31      	ldr	r3, [pc, #196]	@ (8002af8 <HAL_FLASHEx_Erase+0xd4>)
 8002a34:	7e1b      	ldrb	r3, [r3, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_FLASHEx_Erase+0x1a>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e058      	b.n	8002af0 <HAL_FLASHEx_Erase+0xcc>
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002af8 <HAL_FLASHEx_Erase+0xd4>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a48:	f7ff feac 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d148      	bne.n	8002ae8 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a5c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d115      	bne.n	8002a92 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 f8d6 	bl	8002c24 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002a7c:	f7ff fe92 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002a80:	4603      	mov	r3, r0
 8002a82:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <HAL_FLASHEx_Erase+0xd8>)
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <HAL_FLASHEx_Erase+0xd8>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6113      	str	r3, [r2, #16]
 8002a90:	e028      	b.n	8002ae4 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e01c      	b.n	8002ad4 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68b8      	ldr	r0, [r7, #8]
 8002aa4:	f000 f8e2 	bl	8002c6c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002aa8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002aac:	f7ff fe7a 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_FLASHEx_Erase+0xd8>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <HAL_FLASHEx_Erase+0xd8>)
 8002aba:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002abe:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	601a      	str	r2, [r3, #0]
          break;
 8002acc:	e00a      	b.n	8002ae4 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4413      	add	r3, r2
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3da      	bcc.n	8002a9a <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002ae4:	f000 f9fe 	bl	8002ee4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_FLASHEx_Erase+0xd4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	761a      	strb	r2, [r3, #24]

  return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200005ec 	.word	0x200005ec
 8002afc:	40023c00 	.word	0x40023c00

08002b00 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b0c:	4b32      	ldr	r3, [pc, #200]	@ (8002bd8 <HAL_FLASHEx_OBProgram+0xd8>)
 8002b0e:	7e1b      	ldrb	r3, [r3, #24]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_FLASHEx_OBProgram+0x18>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e05b      	b.n	8002bd0 <HAL_FLASHEx_OBProgram+0xd0>
 8002b18:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <HAL_FLASHEx_OBProgram+0xd8>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10a      	bne.n	8002b48 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f000 f8dd 	bl	8002cfc <FLASH_OB_EnableWRP>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e009      	b.n	8002b5c <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 f8f4 	bl	8002d40 <FLASH_OB_DisableWRP>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f906 	bl	8002d80 <FLASH_OB_RDP_LevelConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7e1b      	ldrb	r3, [r3, #24]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002b9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 f906 	bl	8002db4 <FLASH_OB_UserConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f926 	bl	8002e10 <FLASH_OB_BOR_LevelConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_FLASHEx_OBProgram+0xd8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	761a      	strb	r2, [r3, #24]

  return status;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200005ec 	.word	0x200005ec

08002bdc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	220f      	movs	r2, #15
 8002be8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002bea:	f000 f93f 	bl	8002e6c <FLASH_OB_GetWRP>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002bf6:	f000 f945 	bl	8002e84 <FLASH_OB_GetRDP>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8002c02:	f000 f923 	bl	8002e4c <FLASH_OB_GetUser>
 8002c06:	4603      	mov	r3, r0
 8002c08:	461a      	mov	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8002c0e:	f000 f959 	bl	8002ec4 <FLASH_OB_GetBOR>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	615a      	str	r2, [r3, #20]
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c30:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <FLASH_MassErase+0x44>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <FLASH_MassErase+0x44>)
 8002c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <FLASH_MassErase+0x44>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <FLASH_MassErase+0x44>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002c48:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <FLASH_MassErase+0x44>)
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	4313      	orrs	r3, r2
 8002c52:	4a05      	ldr	r2, [pc, #20]	@ (8002c68 <FLASH_MassErase+0x44>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c58:	6113      	str	r3, [r2, #16]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023c00 	.word	0x40023c00

08002c6c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	e010      	b.n	8002caa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d103      	bne.n	8002c96 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002c8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e009      	b.n	8002caa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d103      	bne.n	8002ca4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e002      	b.n	8002caa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002ca4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002caa:	4b13      	ldr	r3, [pc, #76]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	490f      	ldr	r1, [pc, #60]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cc8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <FLASH_Erase_Sector+0x8c>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cea:	6113      	str	r3, [r2, #16]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40023c00 	.word	0x40023c00

08002cfc <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d0a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d0e:	f7ff fd49 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <FLASH_OB_EnableWRP+0x40>)
 8002d1e:	881b      	ldrh	r3, [r3, #0]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4904      	ldr	r1, [pc, #16]	@ (8002d3c <FLASH_OB_EnableWRP+0x40>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023c16 	.word	0x40023c16

08002d40 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d4e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d52:	f7ff fd27 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002d56:	4603      	mov	r3, r0
 8002d58:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <FLASH_OB_DisableWRP+0x3c>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4904      	ldr	r1, [pc, #16]	@ (8002d7c <FLASH_OB_DisableWRP+0x3c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023c16 	.word	0x40023c16

08002d80 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d8e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d92:	f7ff fd07 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002d96:	4603      	mov	r3, r0
 8002d98:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8002da0:	4a03      	ldr	r2, [pc, #12]	@ (8002db0 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023c15 	.word	0x40023c15

08002db4 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	71bb      	strb	r3, [r7, #6]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp;
  HAL_StatusTypeDef status = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002dce:	f7ff fce9 	bl	80027a4 <FLASH_WaitForLastOperation>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d111      	bne.n	8002e00 <FLASH_OB_UserConfig+0x4c>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <FLASH_OB_UserConfig+0x58>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	73bb      	strb	r3, [r7, #14]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8002de8:	79ba      	ldrb	r2, [r7, #6]
 8002dea:	7bbb      	ldrb	r3, [r7, #14]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	797b      	ldrb	r3, [r7, #5]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	4905      	ldr	r1, [pc, #20]	@ (8002e0c <FLASH_OB_UserConfig+0x58>)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c14 	.word	0x40023c14

08002e10 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e48 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002e22:	f023 030c 	bic.w	r3, r3, #12
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4905      	ldr	r1, [pc, #20]	@ (8002e48 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0

}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40023c14 	.word	0x40023c14

08002e4c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <FLASH_OB_GetUser+0x1c>)
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f023 031f 	bic.w	r3, r3, #31
 8002e5a:	b2db      	uxtb	r3, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00

08002e6c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002e70:	4b03      	ldr	r3, [pc, #12]	@ (8002e80 <FLASH_OB_GetWRP+0x14>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	40023c16 	.word	0x40023c16

08002e84 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002e8a:	23aa      	movs	r3, #170	@ 0xaa
 8002e8c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <FLASH_OB_GetRDP+0x3c>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2bcc      	cmp	r3, #204	@ 0xcc
 8002e96:	d102      	bne.n	8002e9e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002e98:	23cc      	movs	r3, #204	@ 0xcc
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	e009      	b.n	8002eb2 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <FLASH_OB_GetRDP+0x3c>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2baa      	cmp	r3, #170	@ 0xaa
 8002ea6:	d102      	bne.n	8002eae <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002ea8:	23aa      	movs	r3, #170	@ 0xaa
 8002eaa:	71fb      	strb	r3, [r7, #7]
 8002eac:	e001      	b.n	8002eb2 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8002eae:	2355      	movs	r3, #85	@ 0x55
 8002eb0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40023c15 	.word	0x40023c15

08002ec4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <FLASH_OB_GetBOR+0x1c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	b2db      	uxtb	r3, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023c14 	.word	0x40023c14

08002ee4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002ee8:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d017      	beq.n	8002f24 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002efa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002efe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a19      	ldr	r2, [pc, #100]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b17      	ldr	r3, [pc, #92]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a16      	ldr	r2, [pc, #88]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f16:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f18:	4b14      	ldr	r3, [pc, #80]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a13      	ldr	r2, [pc, #76]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f22:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002f24:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f30:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <FLASH_FlushCaches+0x88>)
 8002f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f5e:	6013      	str	r3, [r2, #0]
  }
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	@ 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e159      	b.n	8003240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	f040 8148 	bne.w	800323a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d005      	beq.n	8002fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d130      	bne.n	8003024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a2 	beq.w	800323a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b57      	ldr	r3, [pc, #348]	@ (8003258 <HAL_GPIO_Init+0x2e8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a56      	ldr	r2, [pc, #344]	@ (8003258 <HAL_GPIO_Init+0x2e8>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b54      	ldr	r3, [pc, #336]	@ (8003258 <HAL_GPIO_Init+0x2e8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003112:	4a52      	ldr	r2, [pc, #328]	@ (800325c <HAL_GPIO_Init+0x2ec>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	220f      	movs	r2, #15
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a49      	ldr	r2, [pc, #292]	@ (8003260 <HAL_GPIO_Init+0x2f0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d019      	beq.n	8003172 <HAL_GPIO_Init+0x202>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a48      	ldr	r2, [pc, #288]	@ (8003264 <HAL_GPIO_Init+0x2f4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_GPIO_Init+0x1fe>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a47      	ldr	r2, [pc, #284]	@ (8003268 <HAL_GPIO_Init+0x2f8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00d      	beq.n	800316a <HAL_GPIO_Init+0x1fa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a46      	ldr	r2, [pc, #280]	@ (800326c <HAL_GPIO_Init+0x2fc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <HAL_GPIO_Init+0x1f6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a45      	ldr	r2, [pc, #276]	@ (8003270 <HAL_GPIO_Init+0x300>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_GPIO_Init+0x1f2>
 800315e:	2304      	movs	r3, #4
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003162:	2307      	movs	r3, #7
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x204>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x204>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x204>
 8003172:	2300      	movs	r3, #0
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003184:	4935      	ldr	r1, [pc, #212]	@ (800325c <HAL_GPIO_Init+0x2ec>)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <HAL_GPIO_Init+0x304>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003274 <HAL_GPIO_Init+0x304>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003274 <HAL_GPIO_Init+0x304>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a24      	ldr	r2, [pc, #144]	@ (8003274 <HAL_GPIO_Init+0x304>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031e6:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <HAL_GPIO_Init+0x304>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320a:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <HAL_GPIO_Init+0x304>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003210:	4b18      	ldr	r3, [pc, #96]	@ (8003274 <HAL_GPIO_Init+0x304>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003234:	4a0f      	ldr	r2, [pc, #60]	@ (8003274 <HAL_GPIO_Init+0x304>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3301      	adds	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b0f      	cmp	r3, #15
 8003244:	f67f aea2 	bls.w	8002f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3724      	adds	r7, #36	@ 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40013800 	.word	0x40013800
 8003260:	40020000 	.word	0x40020000
 8003264:	40020400 	.word	0x40020400
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	40021000 	.word	0x40021000
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	e001      	b.n	800329a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800329a:	7bfb      	ldrb	r3, [r7, #15]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	807b      	strh	r3, [r7, #2]
 80032b4:	4613      	mov	r3, r2
 80032b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b8:	787b      	ldrb	r3, [r7, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032c4:	e003      	b.n	80032ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	041a      	lsls	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	619a      	str	r2, [r3, #24]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032f2:	4a05      	ldr	r2, [pc, #20]	@ (8003308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f806 	bl	800330c <HAL_GPIO_EXTI_Callback>
  }
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e12b      	b.n	800358e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe f832 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	@ 0x24
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003388:	f002 fa66 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800338c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a81      	ldr	r2, [pc, #516]	@ (8003598 <HAL_I2C_Init+0x274>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d807      	bhi.n	80033a8 <HAL_I2C_Init+0x84>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a80      	ldr	r2, [pc, #512]	@ (800359c <HAL_I2C_Init+0x278>)
 800339c:	4293      	cmp	r3, r2
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e006      	b.n	80033b6 <HAL_I2C_Init+0x92>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a7d      	ldr	r2, [pc, #500]	@ (80035a0 <HAL_I2C_Init+0x27c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	bf94      	ite	ls
 80033b0:	2301      	movls	r3, #1
 80033b2:	2300      	movhi	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0e7      	b.n	800358e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a78      	ldr	r2, [pc, #480]	@ (80035a4 <HAL_I2C_Init+0x280>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0c9b      	lsrs	r3, r3, #18
 80033c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003598 <HAL_I2C_Init+0x274>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d802      	bhi.n	80033f8 <HAL_I2C_Init+0xd4>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	e009      	b.n	800340c <HAL_I2C_Init+0xe8>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a69      	ldr	r2, [pc, #420]	@ (80035a8 <HAL_I2C_Init+0x284>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	3301      	adds	r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800341e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	495c      	ldr	r1, [pc, #368]	@ (8003598 <HAL_I2C_Init+0x274>)
 8003428:	428b      	cmp	r3, r1
 800342a:	d819      	bhi.n	8003460 <HAL_I2C_Init+0x13c>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e59      	subs	r1, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fbb1 f3f3 	udiv	r3, r1, r3
 800343a:	1c59      	adds	r1, r3, #1
 800343c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003440:	400b      	ands	r3, r1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_I2C_Init+0x138>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e59      	subs	r1, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	fbb1 f3f3 	udiv	r3, r1, r3
 8003454:	3301      	adds	r3, #1
 8003456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345a:	e051      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 800345c:	2304      	movs	r3, #4
 800345e:	e04f      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d111      	bne.n	800348c <HAL_I2C_Init+0x168>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1e58      	subs	r0, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	440b      	add	r3, r1
 8003476:	fbb0 f3f3 	udiv	r3, r0, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e012      	b.n	80034b2 <HAL_I2C_Init+0x18e>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	0099      	lsls	r1, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a2:	3301      	adds	r3, #1
 80034a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Init+0x196>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e022      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10e      	bne.n	80034e0 <HAL_I2C_Init+0x1bc>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1e58      	subs	r0, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	440b      	add	r3, r1
 80034d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034de:	e00f      	b.n	8003500 <HAL_I2C_Init+0x1dc>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	0099      	lsls	r1, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	6809      	ldr	r1, [r1, #0]
 8003504:	4313      	orrs	r3, r2
 8003506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800352e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6911      	ldr	r1, [r2, #16]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68d2      	ldr	r2, [r2, #12]
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	430b      	orrs	r3, r1
 8003542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	000186a0 	.word	0x000186a0
 800359c:	001e847f 	.word	0x001e847f
 80035a0:	003d08ff 	.word	0x003d08ff
 80035a4:	431bde83 	.word	0x431bde83
 80035a8:	10624dd3 	.word	0x10624dd3

080035ac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d103      	bne.n	80035ca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
  }
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b088      	sub	sp, #32
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fe:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d003      	beq.n	800360e <HAL_I2C_EV_IRQHandler+0x38>
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b40      	cmp	r3, #64	@ 0x40
 800360a:	f040 80b1 	bne.w	8003770 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10d      	bne.n	8003644 <HAL_I2C_EV_IRQHandler+0x6e>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800362e:	d003      	beq.n	8003638 <HAL_I2C_EV_IRQHandler+0x62>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003636:	d101      	bne.n	800363c <HAL_I2C_EV_IRQHandler+0x66>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <HAL_I2C_EV_IRQHandler+0x68>
 800363c:	2300      	movs	r3, #0
 800363e:	2b01      	cmp	r3, #1
 8003640:	f000 8114 	beq.w	800386c <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x90>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f001 fc71 	bl	8004f40 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fd76 	bl	8004150 <I2C_Master_SB>
 8003664:	e083      	b.n	800376e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_I2C_EV_IRQHandler+0xac>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fdee 	bl	800425c <I2C_Master_ADD10>
 8003680:	e075      	b.n	800376e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_I2C_EV_IRQHandler+0xc8>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fe0a 	bl	80042b0 <I2C_Master_ADDR>
 800369c:	e067      	b.n	800376e <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d036      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036b6:	f000 80db 	beq.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0x10a>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0x10a>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d103      	bne.n	80036e0 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f9d6 	bl	8003a8a <I2C_MasterTransmit_TXE>
 80036de:	e046      	b.n	800376e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80c2 	beq.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80bc 	beq.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	2b21      	cmp	r3, #33	@ 0x21
 80036fc:	d103      	bne.n	8003706 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa5f 	bl	8003bc2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003704:	e0b4      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b40      	cmp	r3, #64	@ 0x40
 800370a:	f040 80b1 	bne.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 facd 	bl	8003cae <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003714:	e0ac      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003724:	f000 80a4 	beq.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x178>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x178>
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fb49 	bl	8003dde <I2C_MasterReceive_RXNE>
 800374c:	e00f      	b.n	800376e <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 808b 	beq.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8085 	beq.w	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fc01 	bl	8003f6e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800376c:	e080      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
 800376e:	e07f      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	61fb      	str	r3, [r7, #28]
 8003780:	e007      	b.n	8003792 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d011      	beq.n	80037c0 <HAL_I2C_EV_IRQHandler+0x1ea>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00c      	beq.n	80037c0 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80037b6:	69b9      	ldr	r1, [r7, #24]
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 ffc8 	bl	800474e <I2C_Slave_ADDR>
 80037be:	e05a      	b.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_I2C_EV_IRQHandler+0x206>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f001 f803 	bl	80047e0 <I2C_Slave_STOPF>
 80037da:	e04c      	b.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037dc:	7bbb      	ldrb	r3, [r7, #14]
 80037de:	2b21      	cmp	r3, #33	@ 0x21
 80037e0:	d002      	beq.n	80037e8 <HAL_I2C_EV_IRQHandler+0x212>
 80037e2:	7bbb      	ldrb	r3, [r7, #14]
 80037e4:	2b29      	cmp	r3, #41	@ 0x29
 80037e6:	d120      	bne.n	800382a <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00d      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x238>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_I2C_EV_IRQHandler+0x238>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fee3 	bl	80045d2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800380c:	e032      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d02d      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x29e>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d028      	beq.n	8003874 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 ff12 	bl	800464c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003828:	e024      	b.n	8003874 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_I2C_EV_IRQHandler+0x27a>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800383a:	2b00      	cmp	r3, #0
 800383c:	d008      	beq.n	8003850 <HAL_I2C_EV_IRQHandler+0x27a>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d103      	bne.n	8003850 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 ff20 	bl	800468e <I2C_SlaveReceive_RXNE>
 800384e:	e012      	b.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 ff50 	bl	800470a <I2C_SlaveReceive_BTF>
 800386a:	e004      	b.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800386c:	bf00      	nop
 800386e:	e002      	b.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003870:	bf00      	nop
 8003872:	e000      	b.n	8003876 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003874:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	@ 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800389e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <HAL_I2C_ER_IRQHandler+0x4a>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_I2C_ER_IRQHandler+0x70>
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80038ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d03e      	beq.n	8003974 <HAL_I2C_ER_IRQHandler+0xf8>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d039      	beq.n	8003974 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003900:	7efb      	ldrb	r3, [r7, #27]
 8003902:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003912:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800391a:	7ebb      	ldrb	r3, [r7, #26]
 800391c:	2b20      	cmp	r3, #32
 800391e:	d112      	bne.n	8003946 <HAL_I2C_ER_IRQHandler+0xca>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10f      	bne.n	8003946 <HAL_I2C_ER_IRQHandler+0xca>
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	2b21      	cmp	r3, #33	@ 0x21
 800392a:	d008      	beq.n	800393e <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800392c:	7cfb      	ldrb	r3, [r7, #19]
 800392e:	2b29      	cmp	r3, #41	@ 0x29
 8003930:	d005      	beq.n	800393e <HAL_I2C_ER_IRQHandler+0xc2>
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b28      	cmp	r3, #40	@ 0x28
 8003936:	d106      	bne.n	8003946 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b21      	cmp	r3, #33	@ 0x21
 800393c:	d103      	bne.n	8003946 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f001 f87e 	bl	8004a40 <I2C_Slave_AF>
 8003944:	e016      	b.n	8003974 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800394e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003958:	7efb      	ldrb	r3, [r7, #27]
 800395a:	2b10      	cmp	r3, #16
 800395c:	d002      	beq.n	8003964 <HAL_I2C_ER_IRQHandler+0xe8>
 800395e:	7efb      	ldrb	r3, [r7, #27]
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d107      	bne.n	8003974 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003972:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <HAL_I2C_ER_IRQHandler+0x11e>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003998:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f001 f8bb 	bl	8004b28 <I2C_ITError>
  }
}
 80039b2:	bf00      	nop
 80039b4:	3728      	adds	r7, #40	@ 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	460b      	mov	r3, r1
 8003a14:	70fb      	strb	r3, [r7, #3]
 8003a16:	4613      	mov	r3, r2
 8003a18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aa0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d150      	bne.n	8003b52 <I2C_MasterTransmit_TXE+0xc8>
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b21      	cmp	r3, #33	@ 0x21
 8003ab4:	d14d      	bne.n	8003b52 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d01d      	beq.n	8003af8 <I2C_MasterTransmit_TXE+0x6e>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d01a      	beq.n	8003af8 <I2C_MasterTransmit_TXE+0x6e>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ac8:	d016      	beq.n	8003af8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ad8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2211      	movs	r2, #17
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff62 	bl	80039ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003af6:	e060      	b.n	8003bba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b06:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b16:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b40      	cmp	r3, #64	@ 0x40
 8003b30:	d107      	bne.n	8003b42 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff7d 	bl	8003a3a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b40:	e03b      	b.n	8003bba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ff35 	bl	80039ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b50:	e033      	b.n	8003bba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b21      	cmp	r3, #33	@ 0x21
 8003b56:	d005      	beq.n	8003b64 <I2C_MasterTransmit_TXE+0xda>
 8003b58:	7bbb      	ldrb	r3, [r7, #14]
 8003b5a:	2b40      	cmp	r3, #64	@ 0x40
 8003b5c:	d12d      	bne.n	8003bba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b22      	cmp	r3, #34	@ 0x22
 8003b62:	d12a      	bne.n	8003bba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b7e:	e01c      	b.n	8003bba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d103      	bne.n	8003b94 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f88e 	bl	8003cae <I2C_MemoryTransmit_TXE_BTF>
}
 8003b92:	e012      	b.n	8003bba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bb8:	e7ff      	b.n	8003bba <I2C_MasterTransmit_TXE+0x130>
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b21      	cmp	r3, #33	@ 0x21
 8003bda:	d164      	bne.n	8003ca6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d012      	beq.n	8003c0c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c0a:	e04c      	b.n	8003ca6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d01d      	beq.n	8003c4e <I2C_MasterTransmit_BTF+0x8c>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d01a      	beq.n	8003c4e <I2C_MasterTransmit_BTF+0x8c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c1e:	d016      	beq.n	8003c4e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c2e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2211      	movs	r2, #17
 8003c34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff feb7 	bl	80039ba <HAL_I2C_MasterTxCpltCallback>
}
 8003c4c:	e02b      	b.n	8003ca6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c5c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b40      	cmp	r3, #64	@ 0x40
 8003c86:	d107      	bne.n	8003c98 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fed2 	bl	8003a3a <HAL_I2C_MemTxCpltCallback>
}
 8003c96:	e006      	b.n	8003ca6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fe8a 	bl	80039ba <HAL_I2C_MasterTxCpltCallback>
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11d      	bne.n	8003d02 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10b      	bne.n	8003ce6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003ce4:	e077      	b.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	121b      	asrs	r3, r3, #8
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d00:	e069      	b.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d10b      	bne.n	8003d22 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d20:	e059      	b.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d152      	bne.n	8003dd0 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b22      	cmp	r3, #34	@ 0x22
 8003d2e:	d10d      	bne.n	8003d4c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d3e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d4a:	e044      	b.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d015      	beq.n	8003d82 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b21      	cmp	r3, #33	@ 0x21
 8003d5a:	d112      	bne.n	8003d82 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d80:	e029      	b.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d124      	bne.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	2b21      	cmp	r3, #33	@ 0x21
 8003d90:	d121      	bne.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003da0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fe36 	bl	8003a3a <HAL_I2C_MemTxCpltCallback>
}
 8003dce:	e002      	b.n	8003dd6 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fbeb 	bl	80035ac <I2C_Flush_DR>
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b22      	cmp	r3, #34	@ 0x22
 8003df0:	f040 80b9 	bne.w	8003f66 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b03      	cmp	r3, #3
 8003e06:	d921      	bls.n	8003e4c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691a      	ldr	r2, [r3, #16]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	f040 8096 	bne.w	8003f66 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e48:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e4a:	e08c      	b.n	8003f66 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d07f      	beq.n	8003f54 <I2C_MasterReceive_RXNE+0x176>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d002      	beq.n	8003e60 <I2C_MasterReceive_RXNE+0x82>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d179      	bne.n	8003f54 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 f83b 	bl	8004edc <I2C_WaitOnSTOPRequestThroughIT>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d14c      	bne.n	8003f06 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d10a      	bne.n	8003edc <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fdba 	bl	8003a4e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003eda:	e044      	b.n	8003f66 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	d002      	beq.n	8003ef0 <I2C_MasterReceive_RXNE+0x112>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d103      	bne.n	8003ef8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ef6:	e002      	b.n	8003efe <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2212      	movs	r2, #18
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fd65 	bl	80039ce <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f04:	e02f      	b.n	8003f66 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f14:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff fd88 	bl	8003a62 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f52:	e008      	b.n	8003f66 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f62:	605a      	str	r2, [r3, #4]
}
 8003f64:	e7ff      	b.n	8003f66 <I2C_MasterReceive_RXNE+0x188>
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d11b      	bne.n	8003fbe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f94:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fbc:	e0c4      	b.n	8004148 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d129      	bne.n	800401c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d00a      	beq.n	8003ff4 <I2C_MasterReceive_BTF+0x86>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d007      	beq.n	8003ff4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800401a:	e095      	b.n	8004148 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d17d      	bne.n	8004122 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d002      	beq.n	8004032 <I2C_MasterReceive_BTF+0xc4>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b10      	cmp	r3, #16
 8004030:	d108      	bne.n	8004044 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e016      	b.n	8004072 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d002      	beq.n	8004050 <I2C_MasterReceive_BTF+0xe2>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d108      	bne.n	8004062 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e007      	b.n	8004072 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004070:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d10a      	bne.n	80040f8 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fcac 	bl	8003a4e <HAL_I2C_MemRxCpltCallback>
}
 80040f6:	e027      	b.n	8004148 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d002      	beq.n	800410c <I2C_MasterReceive_BTF+0x19e>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b20      	cmp	r3, #32
 800410a:	d103      	bne.n	8004114 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
 8004112:	e002      	b.n	800411a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2212      	movs	r2, #18
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fc57 	bl	80039ce <HAL_I2C_MasterRxCpltCallback>
}
 8004120:	e012      	b.n	8004148 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b40      	cmp	r3, #64	@ 0x40
 8004162:	d117      	bne.n	8004194 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800417c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800417e:	e067      	b.n	8004250 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]
}
 8004192:	e05d      	b.n	8004250 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800419c:	d133      	bne.n	8004206 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b21      	cmp	r3, #33	@ 0x21
 80041a8:	d109      	bne.n	80041be <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041ba:	611a      	str	r2, [r3, #16]
 80041bc:	e008      	b.n	80041d0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <I2C_Master_SB+0x92>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d108      	bne.n	80041f4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d032      	beq.n	8004250 <I2C_Master_SB+0x100>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02d      	beq.n	8004250 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004202:	605a      	str	r2, [r3, #4]
}
 8004204:	e024      	b.n	8004250 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10e      	bne.n	800422c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	b29b      	uxth	r3, r3
 8004214:	11db      	asrs	r3, r3, #7
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0306 	and.w	r3, r3, #6
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f063 030f 	orn	r3, r3, #15
 8004222:	b2da      	uxtb	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	611a      	str	r2, [r3, #16]
}
 800422a:	e011      	b.n	8004250 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10d      	bne.n	8004250 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004238:	b29b      	uxth	r3, r3
 800423a:	11db      	asrs	r3, r3, #7
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0306 	and.w	r3, r3, #6
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f063 030e 	orn	r3, r3, #14
 8004248:	b2da      	uxtb	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004274:	2b00      	cmp	r3, #0
 8004276:	d004      	beq.n	8004282 <I2C_Master_ADD10+0x26>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <I2C_Master_ADD10+0x48>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a2:	605a      	str	r2, [r3, #4]
  }
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b091      	sub	sp, #68	@ 0x44
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b22      	cmp	r3, #34	@ 0x22
 80042d8:	f040 8169 	bne.w	80045ae <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10f      	bne.n	8004304 <I2C_Master_ADDR+0x54>
 80042e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d10b      	bne.n	8004304 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	e160      	b.n	80045c6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	2b00      	cmp	r3, #0
 800430a:	d11d      	bne.n	8004348 <I2C_Master_ADDR+0x98>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004314:	d118      	bne.n	8004348 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800433a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	651a      	str	r2, [r3, #80]	@ 0x50
 8004346:	e13e      	b.n	80045c6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e115      	b.n	80045a6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	f040 808a 	bne.w	800449a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800438c:	d137      	bne.n	80043fe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800439c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ac:	d113      	bne.n	80043d6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043bc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	e0e7      	b.n	80045a6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e0d3      	b.n	80045a6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	2b08      	cmp	r3, #8
 8004402:	d02e      	beq.n	8004462 <I2C_Master_ADDR+0x1b2>
 8004404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004406:	2b20      	cmp	r3, #32
 8004408:	d02b      	beq.n	8004462 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	2b12      	cmp	r3, #18
 800440e:	d102      	bne.n	8004416 <I2C_Master_ADDR+0x166>
 8004410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004412:	2b01      	cmp	r3, #1
 8004414:	d125      	bne.n	8004462 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004418:	2b04      	cmp	r3, #4
 800441a:	d00e      	beq.n	800443a <I2C_Master_ADDR+0x18a>
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441e:	2b02      	cmp	r3, #2
 8004420:	d00b      	beq.n	800443a <I2C_Master_ADDR+0x18a>
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	2b10      	cmp	r3, #16
 8004426:	d008      	beq.n	800443a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e007      	b.n	800444a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004448:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	e0a1      	b.n	80045a6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004470:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e085      	b.n	80045a6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d14d      	bne.n	8004540 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d016      	beq.n	80044d8 <I2C_Master_ADDR+0x228>
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d013      	beq.n	80044d8 <I2C_Master_ADDR+0x228>
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d010      	beq.n	80044d8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e007      	b.n	80044e8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f6:	d117      	bne.n	8004528 <I2C_Master_ADDR+0x278>
 80044f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044fe:	d00b      	beq.n	8004518 <I2C_Master_ADDR+0x268>
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	2b01      	cmp	r3, #1
 8004504:	d008      	beq.n	8004518 <I2C_Master_ADDR+0x268>
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	2b08      	cmp	r3, #8
 800450a:	d005      	beq.n	8004518 <I2C_Master_ADDR+0x268>
 800450c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450e:	2b10      	cmp	r3, #16
 8004510:	d002      	beq.n	8004518 <I2C_Master_ADDR+0x268>
 8004512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004514:	2b20      	cmp	r3, #32
 8004516:	d107      	bne.n	8004528 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004526:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	e032      	b.n	80045a6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800454e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455e:	d117      	bne.n	8004590 <I2C_Master_ADDR+0x2e0>
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004566:	d00b      	beq.n	8004580 <I2C_Master_ADDR+0x2d0>
 8004568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456a:	2b01      	cmp	r3, #1
 800456c:	d008      	beq.n	8004580 <I2C_Master_ADDR+0x2d0>
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	2b08      	cmp	r3, #8
 8004572:	d005      	beq.n	8004580 <I2C_Master_ADDR+0x2d0>
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	2b10      	cmp	r3, #16
 8004578:	d002      	beq.n	8004580 <I2C_Master_ADDR+0x2d0>
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	2b20      	cmp	r3, #32
 800457e:	d107      	bne.n	8004590 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800458e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045ac:	e00b      	b.n	80045c6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
}
 80045c4:	e7ff      	b.n	80045c6 <I2C_Master_ADDR+0x316>
 80045c6:	bf00      	nop
 80045c8:	3744      	adds	r7, #68	@ 0x44
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d02b      	beq.n	8004644 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d114      	bne.n	8004644 <I2C_SlaveTransmit_TXE+0x72>
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b29      	cmp	r3, #41	@ 0x29
 800461e:	d111      	bne.n	8004644 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2221      	movs	r2, #33	@ 0x21
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2228      	movs	r2, #40	@ 0x28
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff f9cf 	bl	80039e2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d011      	beq.n	8004682 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02c      	beq.n	8004702 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d114      	bne.n	8004702 <I2C_SlaveReceive_RXNE+0x74>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b2a      	cmp	r3, #42	@ 0x2a
 80046dc:	d111      	bne.n	8004702 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2222      	movs	r2, #34	@ 0x22
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2228      	movs	r2, #40	@ 0x28
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff f97a 	bl	80039f6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004702:	bf00      	nop
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d012      	beq.n	8004742 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004768:	2b28      	cmp	r3, #40	@ 0x28
 800476a:	d125      	bne.n	80047b8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	81bb      	strh	r3, [r7, #12]
 800479a:	e002      	b.n	80047a2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047aa:	89ba      	ldrh	r2, [r7, #12]
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff f92a 	bl	8003a0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047b6:	e00e      	b.n	80047d6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	60bb      	str	r3, [r7, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800482c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483c:	d172      	bne.n	8004924 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b22      	cmp	r3, #34	@ 0x22
 8004842:	d002      	beq.n	800484a <I2C_Slave_STOPF+0x6a>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b2a      	cmp	r3, #42	@ 0x2a
 8004848:	d135      	bne.n	80048b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd febc 	bl	8002600 <HAL_DMA_GetState>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d049      	beq.n	8004922 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	4a69      	ldr	r2, [pc, #420]	@ (8004a38 <I2C_Slave_STOPF+0x258>)
 8004894:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fe8e 	bl	80025bc <HAL_DMA_Abort_IT>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03d      	beq.n	8004922 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048b0:	4610      	mov	r0, r2
 80048b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048b4:	e035      	b.n	8004922 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	f043 0204 	orr.w	r2, r3, #4
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fe86 	bl	8002600 <HAL_DMA_GetState>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d014      	beq.n	8004924 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004a38 <I2C_Slave_STOPF+0x258>)
 8004900:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004906:	4618      	mov	r0, r3
 8004908:	f7fd fe58 	bl	80025bc <HAL_DMA_Abort_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
 8004920:	e000      	b.n	8004924 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004922:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03e      	beq.n	80049ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d112      	bne.n	8004962 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	d112      	bne.n	8004996 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	f043 0204 	orr.w	r2, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8b7 	bl	8004b28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049ba:	e039      	b.n	8004a30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c0:	d109      	bne.n	80049d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2228      	movs	r2, #40	@ 0x28
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff f810 	bl	80039f6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b28      	cmp	r3, #40	@ 0x28
 80049e0:	d111      	bne.n	8004a06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <I2C_Slave_STOPF+0x25c>)
 80049e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff f811 	bl	8003a26 <HAL_I2C_ListenCpltCallback>
}
 8004a04:	e014      	b.n	8004a30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	2b22      	cmp	r3, #34	@ 0x22
 8004a0c:	d002      	beq.n	8004a14 <I2C_Slave_STOPF+0x234>
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b22      	cmp	r3, #34	@ 0x22
 8004a12:	d10d      	bne.n	8004a30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe ffe3 	bl	80039f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08004d8d 	.word	0x08004d8d
 8004a3c:	ffff0000 	.word	0xffff0000

08004a40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d002      	beq.n	8004a62 <I2C_Slave_AF+0x22>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d129      	bne.n	8004ab6 <I2C_Slave_AF+0x76>
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b28      	cmp	r3, #40	@ 0x28
 8004a66:	d126      	bne.n	8004ab6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <I2C_Slave_AF+0xe4>)
 8004a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fe ffb9 	bl	8003a26 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ab4:	e031      	b.n	8004b1a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b21      	cmp	r3, #33	@ 0x21
 8004aba:	d129      	bne.n	8004b10 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a19      	ldr	r2, [pc, #100]	@ (8004b24 <I2C_Slave_AF+0xe4>)
 8004ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2221      	movs	r2, #33	@ 0x21
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ae6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b00:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fe fd52 	bl	80035ac <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7fe ff6a 	bl	80039e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004b0e:	e004      	b.n	8004b1a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b18:	615a      	str	r2, [r3, #20]
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	ffff0000 	.word	0xffff0000

08004b28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d002      	beq.n	8004b4c <I2C_ITError+0x24>
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	2b40      	cmp	r3, #64	@ 0x40
 8004b4a:	d10a      	bne.n	8004b62 <I2C_ITError+0x3a>
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b22      	cmp	r3, #34	@ 0x22
 8004b50:	d107      	bne.n	8004b62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b68:	2b28      	cmp	r3, #40	@ 0x28
 8004b6a:	d107      	bne.n	8004b7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2228      	movs	r2, #40	@ 0x28
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b7a:	e015      	b.n	8004ba8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b8a:	d00a      	beq.n	8004ba2 <I2C_ITError+0x7a>
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b60      	cmp	r3, #96	@ 0x60
 8004b90:	d007      	beq.n	8004ba2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb6:	d162      	bne.n	8004c7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d020      	beq.n	8004c18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bda:	4a6a      	ldr	r2, [pc, #424]	@ (8004d84 <I2C_ITError+0x25c>)
 8004bdc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd fcea 	bl	80025bc <HAL_DMA_Abort_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 8089 	beq.w	8004d02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c12:	4610      	mov	r0, r2
 8004c14:	4798      	blx	r3
 8004c16:	e074      	b.n	8004d02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	4a59      	ldr	r2, [pc, #356]	@ (8004d84 <I2C_ITError+0x25c>)
 8004c1e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fd fcc9 	bl	80025bc <HAL_DMA_Abort_IT>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d068      	beq.n	8004d02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b40      	cmp	r3, #64	@ 0x40
 8004c3c:	d10b      	bne.n	8004c56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4798      	blx	r3
 8004c7c:	e041      	b.n	8004d02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b60      	cmp	r3, #96	@ 0x60
 8004c88:	d125      	bne.n	8004cd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca2:	2b40      	cmp	r3, #64	@ 0x40
 8004ca4:	d10b      	bne.n	8004cbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fe fed1 	bl	8003a76 <HAL_I2C_AbortCpltCallback>
 8004cd4:	e015      	b.n	8004d02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d10b      	bne.n	8004cfc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fe feb0 	bl	8003a62 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10e      	bne.n	8004d30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d113      	bne.n	8004d7c <I2C_ITError+0x254>
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b28      	cmp	r3, #40	@ 0x28
 8004d58:	d110      	bne.n	8004d7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d88 <I2C_ITError+0x260>)
 8004d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fe fe55 	bl	8003a26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	08004d8d 	.word	0x08004d8d
 8004d88:	ffff0000 	.word	0xffff0000

08004d8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004da6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed4 <I2C_DMAAbort+0x148>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	08db      	lsrs	r3, r3, #3
 8004dac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed8 <I2C_DMAAbort+0x14c>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	0a1a      	lsrs	r2, r3, #8
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	00da      	lsls	r2, r3, #3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004dd2:	e00a      	b.n	8004dea <I2C_DMAAbort+0x5e>
    }
    count--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de8:	d0ea      	beq.n	8004dc0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df6:	2200      	movs	r2, #0
 8004df8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	2200      	movs	r2, #0
 8004e08:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b60      	cmp	r3, #96	@ 0x60
 8004e5a:	d10e      	bne.n	8004e7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f7fe fdff 	bl	8003a76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e78:	e027      	b.n	8004eca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e80:	2b28      	cmp	r3, #40	@ 0x28
 8004e82:	d117      	bne.n	8004eb4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ea2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2228      	movs	r2, #40	@ 0x28
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004eb2:	e007      	b.n	8004ec4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ec4:	6978      	ldr	r0, [r7, #20]
 8004ec6:	f7fe fdcc 	bl	8003a62 <HAL_I2C_ErrorCallback>
}
 8004eca:	bf00      	nop
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000000 	.word	0x20000000
 8004ed8:	14f8b589 	.word	0x14f8b589

08004edc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ee8:	4b13      	ldr	r3, [pc, #76]	@ (8004f38 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	0a1a      	lsrs	r2, r3, #8
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e008      	b.n	8004f2c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f28:	d0e9      	beq.n	8004efe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	14f8b589 	.word	0x14f8b589

08004f40 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004f50:	d103      	bne.n	8004f5a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f58:	e007      	b.n	8004f6a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004f62:	d102      	bne.n	8004f6a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2208      	movs	r2, #8
 8004f68:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e267      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d075      	beq.n	8005082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f96:	4b88      	ldr	r3, [pc, #544]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa2:	4b85      	ldr	r3, [pc, #532]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d112      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fae:	4b82      	ldr	r3, [pc, #520]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fba:	d10b      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d05b      	beq.n	8005080 <HAL_RCC_OscConfig+0x108>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d157      	bne.n	8005080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e242      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x74>
 8004fde:	4b76      	ldr	r3, [pc, #472]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a75      	ldr	r2, [pc, #468]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e01d      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCC_OscConfig+0x98>
 8004ff6:	4b70      	ldr	r3, [pc, #448]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	4b6d      	ldr	r3, [pc, #436]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6c      	ldr	r2, [pc, #432]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	e00b      	b.n	8005028 <HAL_RCC_OscConfig+0xb0>
 8005010:	4b69      	ldr	r3, [pc, #420]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a68      	ldr	r2, [pc, #416]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	4b66      	ldr	r3, [pc, #408]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a65      	ldr	r2, [pc, #404]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005030:	f7fd f8c4 	bl	80021bc <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005038:	f7fd f8c0 	bl	80021bc <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	@ 0x64
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e207      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	4b5b      	ldr	r3, [pc, #364]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0xc0>
 8005056:	e014      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005058:	f7fd f8b0 	bl	80021bc <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005060:	f7fd f8ac 	bl	80021bc <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	@ 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1f3      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	4b51      	ldr	r3, [pc, #324]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0xe8>
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d063      	beq.n	8005156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800508e:	4b4a      	ldr	r3, [pc, #296]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00b      	beq.n	80050b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509a:	4b47      	ldr	r3, [pc, #284]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d11c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a6:	4b44      	ldr	r3, [pc, #272]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d116      	bne.n	80050e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b2:	4b41      	ldr	r3, [pc, #260]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d001      	beq.n	80050ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e1c7      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	4b3b      	ldr	r3, [pc, #236]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4937      	ldr	r1, [pc, #220]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	e03a      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d020      	beq.n	800512a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050e8:	4b34      	ldr	r3, [pc, #208]	@ (80051bc <HAL_RCC_OscConfig+0x244>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7fd f865 	bl	80021bc <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f6:	f7fd f861 	bl	80021bc <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e1a8      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	4b2b      	ldr	r3, [pc, #172]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005114:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4925      	ldr	r1, [pc, #148]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	e015      	b.n	8005156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512a:	4b24      	ldr	r3, [pc, #144]	@ (80051bc <HAL_RCC_OscConfig+0x244>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fd f844 	bl	80021bc <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005138:	f7fd f840 	bl	80021bc <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e187      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	4b1b      	ldr	r3, [pc, #108]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d036      	beq.n	80051d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <HAL_RCC_OscConfig+0x248>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fd f824 	bl	80021bc <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005178:	f7fd f820 	bl	80021bc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e167      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCC_OscConfig+0x240>)
 800518c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x200>
 8005196:	e01b      	b.n	80051d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005198:	4b09      	ldr	r3, [pc, #36]	@ (80051c0 <HAL_RCC_OscConfig+0x248>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519e:	f7fd f80d 	bl	80021bc <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a4:	e00e      	b.n	80051c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fd f809 	bl	80021bc <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d907      	bls.n	80051c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e150      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
 80051b8:	40023800 	.word	0x40023800
 80051bc:	42470000 	.word	0x42470000
 80051c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c4:	4b88      	ldr	r3, [pc, #544]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1ea      	bne.n	80051a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8097 	beq.w	800530c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e2:	4b81      	ldr	r3, [pc, #516]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10f      	bne.n	800520e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	4b7d      	ldr	r3, [pc, #500]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a7c      	ldr	r2, [pc, #496]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80051f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80051fe:	4b7a      	ldr	r3, [pc, #488]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520e:	4b77      	ldr	r3, [pc, #476]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d118      	bne.n	800524c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521a:	4b74      	ldr	r3, [pc, #464]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a73      	ldr	r2, [pc, #460]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005226:	f7fc ffc9 	bl	80021bc <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7fc ffc5 	bl	80021bc <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e10c      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	4b6a      	ldr	r3, [pc, #424]	@ (80053ec <HAL_RCC_OscConfig+0x474>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d106      	bne.n	8005262 <HAL_RCC_OscConfig+0x2ea>
 8005254:	4b64      	ldr	r3, [pc, #400]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005258:	4a63      	ldr	r2, [pc, #396]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005260:	e01c      	b.n	800529c <HAL_RCC_OscConfig+0x324>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b05      	cmp	r3, #5
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x30c>
 800526a:	4b5f      	ldr	r3, [pc, #380]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526e:	4a5e      	ldr	r2, [pc, #376]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	6713      	str	r3, [r2, #112]	@ 0x70
 8005276:	4b5c      	ldr	r3, [pc, #368]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	4a5b      	ldr	r2, [pc, #364]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	6713      	str	r3, [r2, #112]	@ 0x70
 8005282:	e00b      	b.n	800529c <HAL_RCC_OscConfig+0x324>
 8005284:	4b58      	ldr	r3, [pc, #352]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005288:	4a57      	ldr	r2, [pc, #348]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005290:	4b55      	ldr	r3, [pc, #340]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005294:	4a54      	ldr	r2, [pc, #336]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a4:	f7fc ff8a 	bl	80021bc <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052aa:	e00a      	b.n	80052c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ac:	f7fc ff86 	bl	80021bc <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e0cb      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c2:	4b49      	ldr	r3, [pc, #292]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0ee      	beq.n	80052ac <HAL_RCC_OscConfig+0x334>
 80052ce:	e014      	b.n	80052fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d0:	f7fc ff74 	bl	80021bc <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d8:	f7fc ff70 	bl	80021bc <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0b5      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ee:	4b3e      	ldr	r3, [pc, #248]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1ee      	bne.n	80052d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d105      	bne.n	800530c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005300:	4b39      	ldr	r3, [pc, #228]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005304:	4a38      	ldr	r2, [pc, #224]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800530a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80a1 	beq.w	8005458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005316:	4b34      	ldr	r3, [pc, #208]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b08      	cmp	r3, #8
 8005320:	d05c      	beq.n	80053dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d141      	bne.n	80053ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532a:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7fc ff44 	bl	80021bc <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005338:	f7fc ff40 	bl	80021bc <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e087      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	4b27      	ldr	r3, [pc, #156]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	019b      	lsls	r3, r3, #6
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	085b      	lsrs	r3, r3, #1
 800536e:	3b01      	subs	r3, #1
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	491b      	ldr	r1, [pc, #108]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 800537c:	4313      	orrs	r3, r2
 800537e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005380:	4b1b      	ldr	r3, [pc, #108]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 8005382:	2201      	movs	r2, #1
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fc ff19 	bl	80021bc <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538e:	f7fc ff15 	bl	80021bc <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e05c      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a0:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x416>
 80053ac:	e054      	b.n	8005458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ae:	4b10      	ldr	r3, [pc, #64]	@ (80053f0 <HAL_RCC_OscConfig+0x478>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fc ff02 	bl	80021bc <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053bc:	f7fc fefe 	bl	80021bc <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e045      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <HAL_RCC_OscConfig+0x470>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x444>
 80053da:	e03d      	b.n	8005458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e038      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40007000 	.word	0x40007000
 80053f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <HAL_RCC_OscConfig+0x4ec>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d028      	beq.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d121      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d11a      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005424:	4013      	ands	r3, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800542a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800542c:	4293      	cmp	r3, r2
 800542e:	d111      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	3b01      	subs	r3, #1
 800543e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d107      	bne.n	8005454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800

08005468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e0cc      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800547c:	4b68      	ldr	r3, [pc, #416]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d90c      	bls.n	80054a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548a:	4b65      	ldr	r3, [pc, #404]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b63      	ldr	r3, [pc, #396]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0b8      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054bc:	4b59      	ldr	r3, [pc, #356]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	4a58      	ldr	r2, [pc, #352]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d4:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4a52      	ldr	r2, [pc, #328]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b50      	ldr	r3, [pc, #320]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	494d      	ldr	r1, [pc, #308]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d044      	beq.n	8005588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b47      	ldr	r3, [pc, #284]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d119      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e07f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d003      	beq.n	8005526 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005522:	2b03      	cmp	r3, #3
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	4b3f      	ldr	r3, [pc, #252]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e06f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005536:	4b3b      	ldr	r3, [pc, #236]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e067      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005546:	4b37      	ldr	r3, [pc, #220]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f023 0203 	bic.w	r2, r3, #3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4934      	ldr	r1, [pc, #208]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005558:	f7fc fe30 	bl	80021bc <HAL_GetTick>
 800555c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555e:	e00a      	b.n	8005576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005560:	f7fc fe2c 	bl	80021bc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e04f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005576:	4b2b      	ldr	r3, [pc, #172]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 020c 	and.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	429a      	cmp	r2, r3
 8005586:	d1eb      	bne.n	8005560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005588:	4b25      	ldr	r3, [pc, #148]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	429a      	cmp	r2, r3
 8005594:	d20c      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005596:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b20      	ldr	r3, [pc, #128]	@ (8005620 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e032      	b.n	8005616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4916      	ldr	r1, [pc, #88]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055da:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	490e      	ldr	r1, [pc, #56]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ee:	f000 f821 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	490a      	ldr	r1, [pc, #40]	@ (8005628 <HAL_RCC_ClockConfig+0x1c0>)
 8005600:	5ccb      	ldrb	r3, [r1, r3]
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	4a09      	ldr	r2, [pc, #36]	@ (800562c <HAL_RCC_ClockConfig+0x1c4>)
 8005608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800560a:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <HAL_RCC_ClockConfig+0x1c8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fc fd90 	bl	8002134 <HAL_InitTick>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023c00 	.word	0x40023c00
 8005624:	40023800 	.word	0x40023800
 8005628:	08008a0c 	.word	0x08008a0c
 800562c:	20000000 	.word	0x20000000
 8005630:	20000004 	.word	0x20000004

08005634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005638:	b094      	sub	sp, #80	@ 0x50
 800563a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800564c:	4b79      	ldr	r3, [pc, #484]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f003 030c 	and.w	r3, r3, #12
 8005654:	2b08      	cmp	r3, #8
 8005656:	d00d      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x40>
 8005658:	2b08      	cmp	r3, #8
 800565a:	f200 80e1 	bhi.w	8005820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_RCC_GetSysClockFreq+0x34>
 8005662:	2b04      	cmp	r3, #4
 8005664:	d003      	beq.n	800566e <HAL_RCC_GetSysClockFreq+0x3a>
 8005666:	e0db      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005668:	4b73      	ldr	r3, [pc, #460]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x204>)
 800566a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800566c:	e0db      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566e:	4b73      	ldr	r3, [pc, #460]	@ (800583c <HAL_RCC_GetSysClockFreq+0x208>)
 8005670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005672:	e0d8      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005674:	4b6f      	ldr	r3, [pc, #444]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567e:	4b6d      	ldr	r3, [pc, #436]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d063      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568a:	4b6a      	ldr	r3, [pc, #424]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	099b      	lsrs	r3, r3, #6
 8005690:	2200      	movs	r2, #0
 8005692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005694:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569c:	633b      	str	r3, [r7, #48]	@ 0x30
 800569e:	2300      	movs	r3, #0
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056a6:	4622      	mov	r2, r4
 80056a8:	462b      	mov	r3, r5
 80056aa:	f04f 0000 	mov.w	r0, #0
 80056ae:	f04f 0100 	mov.w	r1, #0
 80056b2:	0159      	lsls	r1, r3, #5
 80056b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b8:	0150      	lsls	r0, r2, #5
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4621      	mov	r1, r4
 80056c0:	1a51      	subs	r1, r2, r1
 80056c2:	6139      	str	r1, [r7, #16]
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb63 0301 	sbc.w	r3, r3, r1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056d8:	4659      	mov	r1, fp
 80056da:	018b      	lsls	r3, r1, #6
 80056dc:	4651      	mov	r1, sl
 80056de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056e2:	4651      	mov	r1, sl
 80056e4:	018a      	lsls	r2, r1, #6
 80056e6:	4651      	mov	r1, sl
 80056e8:	ebb2 0801 	subs.w	r8, r2, r1
 80056ec:	4659      	mov	r1, fp
 80056ee:	eb63 0901 	sbc.w	r9, r3, r1
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005706:	4690      	mov	r8, r2
 8005708:	4699      	mov	r9, r3
 800570a:	4623      	mov	r3, r4
 800570c:	eb18 0303 	adds.w	r3, r8, r3
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	462b      	mov	r3, r5
 8005714:	eb49 0303 	adc.w	r3, r9, r3
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005726:	4629      	mov	r1, r5
 8005728:	024b      	lsls	r3, r1, #9
 800572a:	4621      	mov	r1, r4
 800572c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005730:	4621      	mov	r1, r4
 8005732:	024a      	lsls	r2, r1, #9
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573a:	2200      	movs	r2, #0
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005744:	f7fa fd9c 	bl	8000280 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4613      	mov	r3, r2
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	e058      	b.n	8005804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005752:	4b38      	ldr	r3, [pc, #224]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	099b      	lsrs	r3, r3, #6
 8005758:	2200      	movs	r2, #0
 800575a:	4618      	mov	r0, r3
 800575c:	4611      	mov	r1, r2
 800575e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	2300      	movs	r3, #0
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
 8005768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	f04f 0000 	mov.w	r0, #0
 8005774:	f04f 0100 	mov.w	r1, #0
 8005778:	0159      	lsls	r1, r3, #5
 800577a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800577e:	0150      	lsls	r0, r2, #5
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4641      	mov	r1, r8
 8005786:	ebb2 0a01 	subs.w	sl, r2, r1
 800578a:	4649      	mov	r1, r9
 800578c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800579c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057a4:	ebb2 040a 	subs.w	r4, r2, sl
 80057a8:	eb63 050b 	sbc.w	r5, r3, fp
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	00eb      	lsls	r3, r5, #3
 80057b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ba:	00e2      	lsls	r2, r4, #3
 80057bc:	4614      	mov	r4, r2
 80057be:	461d      	mov	r5, r3
 80057c0:	4643      	mov	r3, r8
 80057c2:	18e3      	adds	r3, r4, r3
 80057c4:	603b      	str	r3, [r7, #0]
 80057c6:	464b      	mov	r3, r9
 80057c8:	eb45 0303 	adc.w	r3, r5, r3
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	f04f 0200 	mov.w	r2, #0
 80057d2:	f04f 0300 	mov.w	r3, #0
 80057d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057da:	4629      	mov	r1, r5
 80057dc:	028b      	lsls	r3, r1, #10
 80057de:	4621      	mov	r1, r4
 80057e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057e4:	4621      	mov	r1, r4
 80057e6:	028a      	lsls	r2, r1, #10
 80057e8:	4610      	mov	r0, r2
 80057ea:	4619      	mov	r1, r3
 80057ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ee:	2200      	movs	r2, #0
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f8:	f7fa fd42 	bl	8000280 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4613      	mov	r3, r2
 8005802:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <HAL_RCC_GetSysClockFreq+0x200>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	3301      	adds	r3, #1
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800581e:	e002      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005820:	4b05      	ldr	r3, [pc, #20]	@ (8005838 <HAL_RCC_GetSysClockFreq+0x204>)
 8005822:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005828:	4618      	mov	r0, r3
 800582a:	3750      	adds	r7, #80	@ 0x50
 800582c:	46bd      	mov	sp, r7
 800582e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005832:	bf00      	nop
 8005834:	40023800 	.word	0x40023800
 8005838:	00f42400 	.word	0x00f42400
 800583c:	007a1200 	.word	0x007a1200

08005840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000000 	.word	0x20000000

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a9b      	lsrs	r3, r3, #10
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4903      	ldr	r1, [pc, #12]	@ (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40023800 	.word	0x40023800
 800587c:	08008a1c 	.word	0x08008a1c

08005880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005884:	f7ff ffdc 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005888:	4602      	mov	r2, r0
 800588a:	4b05      	ldr	r3, [pc, #20]	@ (80058a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	0b5b      	lsrs	r3, r3, #13
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	4903      	ldr	r1, [pc, #12]	@ (80058a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005896:	5ccb      	ldrb	r3, [r1, r3]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40023800 	.word	0x40023800
 80058a4:	08008a1c 	.word	0x08008a1c

080058a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e041      	b.n	800593e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fdc0 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f000 fa70 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e044      	b.n	80059ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2202      	movs	r2, #2
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1e      	ldr	r2, [pc, #120]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d018      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598a:	d013      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1a      	ldr	r2, [pc, #104]	@ (80059fc <HAL_TIM_Base_Start_IT+0xb4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00e      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a19      	ldr	r2, [pc, #100]	@ (8005a00 <HAL_TIM_Base_Start_IT+0xb8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <HAL_TIM_Base_Start_IT+0xbc>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x6c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a16      	ldr	r2, [pc, #88]	@ (8005a08 <HAL_TIM_Base_Start_IT+0xc0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d111      	bne.n	80059d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d010      	beq.n	80059e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	e007      	b.n	80059e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40014000 	.word	0x40014000

08005a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01b      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0202 	mvn.w	r2, #2
 8005a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f999 	bl	8005d8e <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f98b 	bl	8005d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f99c 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d020      	beq.n	8005abc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01b      	beq.n	8005abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0204 	mvn.w	r2, #4
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f973 	bl	8005d8e <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f965 	bl	8005d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f976 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d020      	beq.n	8005b08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0208 	mvn.w	r2, #8
 8005ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2204      	movs	r2, #4
 8005ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f94d 	bl	8005d8e <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f93f 	bl	8005d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f950 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0210 	mvn.w	r2, #16
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f927 	bl	8005d8e <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f919 	bl	8005d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f92a 	bl	8005da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0201 	mvn.w	r2, #1
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb f9dc 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00c      	beq.n	8005b9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d007      	beq.n	8005b9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fab0 	bl	80060fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f8fb 	bl	8005db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00c      	beq.n	8005be4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0220 	mvn.w	r2, #32
 8005bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa82 	bl	80060e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_TIM_ConfigClockSource+0x1c>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e0b4      	b.n	8005d72 <HAL_TIM_ConfigClockSource+0x186>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c40:	d03e      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c46:	f200 8087 	bhi.w	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c4e:	f000 8086 	beq.w	8005d5e <HAL_TIM_ConfigClockSource+0x172>
 8005c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c56:	d87f      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b70      	cmp	r3, #112	@ 0x70
 8005c5a:	d01a      	beq.n	8005c92 <HAL_TIM_ConfigClockSource+0xa6>
 8005c5c:	2b70      	cmp	r3, #112	@ 0x70
 8005c5e:	d87b      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b60      	cmp	r3, #96	@ 0x60
 8005c62:	d050      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x11a>
 8005c64:	2b60      	cmp	r3, #96	@ 0x60
 8005c66:	d877      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b50      	cmp	r3, #80	@ 0x50
 8005c6a:	d03c      	beq.n	8005ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c6c:	2b50      	cmp	r3, #80	@ 0x50
 8005c6e:	d873      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d058      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x13a>
 8005c74:	2b40      	cmp	r3, #64	@ 0x40
 8005c76:	d86f      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b30      	cmp	r3, #48	@ 0x30
 8005c7a:	d064      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15a>
 8005c7c:	2b30      	cmp	r3, #48	@ 0x30
 8005c7e:	d86b      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d060      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15a>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d867      	bhi.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d05c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	2b10      	cmp	r3, #16
 8005c8e:	d05a      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x15a>
 8005c90:	e062      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ca2:	f000 f993 	bl	8005fcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	609a      	str	r2, [r3, #8]
      break;
 8005cbe:	e04f      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cd0:	f000 f97c 	bl	8005fcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ce2:	609a      	str	r2, [r3, #8]
      break;
 8005ce4:	e03c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f000 f8f0 	bl	8005ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2150      	movs	r1, #80	@ 0x50
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f949 	bl	8005f96 <TIM_ITRx_SetConfig>
      break;
 8005d04:	e02c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 f90f 	bl	8005f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2160      	movs	r1, #96	@ 0x60
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f939 	bl	8005f96 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e01c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 f8d0 	bl	8005ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2140      	movs	r1, #64	@ 0x40
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f929 	bl	8005f96 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e00c      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 f920 	bl	8005f96 <TIM_ITRx_SetConfig>
      break;
 8005d56:	e003      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5c:	e000      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a37      	ldr	r2, [pc, #220]	@ (8005ebc <TIM_Base_SetConfig+0xf0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x38>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x38>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a34      	ldr	r2, [pc, #208]	@ (8005ec0 <TIM_Base_SetConfig+0xf4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x38>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a33      	ldr	r2, [pc, #204]	@ (8005ec4 <TIM_Base_SetConfig+0xf8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x38>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a32      	ldr	r2, [pc, #200]	@ (8005ec8 <TIM_Base_SetConfig+0xfc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a28      	ldr	r2, [pc, #160]	@ (8005ebc <TIM_Base_SetConfig+0xf0>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01b      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e24:	d017      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	@ (8005ec0 <TIM_Base_SetConfig+0xf4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a24      	ldr	r2, [pc, #144]	@ (8005ec4 <TIM_Base_SetConfig+0xf8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00f      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a23      	ldr	r2, [pc, #140]	@ (8005ec8 <TIM_Base_SetConfig+0xfc>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00b      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a22      	ldr	r2, [pc, #136]	@ (8005ecc <TIM_Base_SetConfig+0x100>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d007      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a21      	ldr	r2, [pc, #132]	@ (8005ed0 <TIM_Base_SetConfig+0x104>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a20      	ldr	r2, [pc, #128]	@ (8005ed4 <TIM_Base_SetConfig+0x108>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d108      	bne.n	8005e68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a0c      	ldr	r2, [pc, #48]	@ (8005ebc <TIM_Base_SetConfig+0xf0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d103      	bne.n	8005e96 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	601a      	str	r2, [r3, #0]
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40014000 	.word	0x40014000
 8005ed0:	40014400 	.word	0x40014400
 8005ed4:	40014800 	.word	0x40014800

08005ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0201 	bic.w	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f023 030a 	bic.w	r3, r3, #10
 8005f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b087      	sub	sp, #28
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f023 0210 	bic.w	r2, r3, #16
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	031b      	lsls	r3, r3, #12
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	621a      	str	r2, [r3, #32]
}
 8005f8a:	bf00      	nop
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f043 0307 	orr.w	r3, r3, #7
 8005fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	021a      	lsls	r2, r3, #8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	609a      	str	r2, [r3, #8]
}
 8006000:	bf00      	nop
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e050      	b.n	80060c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d018      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006070:	d013      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a18      	ldr	r2, [pc, #96]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00e      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a16      	ldr	r2, [pc, #88]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d009      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a15      	ldr	r2, [pc, #84]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d004      	beq.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a13      	ldr	r2, [pc, #76]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10c      	bne.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40014000 	.word	0x40014000

080060e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e042      	b.n	80061a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fb f9b2 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2224      	movs	r2, #36	@ 0x24
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fe15 	bl	8006d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	@ 0x28
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d175      	bne.n	80062bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UART_Transmit+0x2c>
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e06e      	b.n	80062be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2221      	movs	r2, #33	@ 0x21
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ee:	f7fb ffe5 	bl	80021bc <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	88fa      	ldrh	r2, [r7, #6]
 80061fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006208:	d108      	bne.n	800621c <HAL_UART_Transmit+0x6c>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e003      	b.n	8006224 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006224:	e02e      	b.n	8006284 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	2180      	movs	r1, #128	@ 0x80
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fbb3 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e03a      	b.n	80062be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10b      	bne.n	8006266 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800625c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	3302      	adds	r3, #2
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	e007      	b.n	8006276 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1cb      	bne.n	8006226 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	@ 0x40
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fb7f 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e006      	b.n	80062be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b08a      	sub	sp, #40	@ 0x28
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	f040 8081 	bne.w	80063ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_UART_Receive+0x2e>
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e079      	b.n	80063ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2222      	movs	r2, #34	@ 0x22
 8006302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630c:	f7fb ff56 	bl	80021bc <HAL_GetTick>
 8006310:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	88fa      	ldrh	r2, [r7, #6]
 8006316:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	88fa      	ldrh	r2, [r7, #6]
 800631c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006326:	d108      	bne.n	800633a <HAL_UART_Receive+0x74>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d104      	bne.n	800633a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	e003      	b.n	8006342 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006342:	e047      	b.n	80063d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2200      	movs	r2, #0
 800634c:	2120      	movs	r1, #32
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fb24 	bl	800699c <UART_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2220      	movs	r2, #32
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e042      	b.n	80063ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006378:	b29a      	uxth	r2, r3
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	3302      	adds	r3, #2
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	e01f      	b.n	80063c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638e:	d007      	beq.n	80063a0 <HAL_UART_Receive+0xda>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <HAL_UART_Receive+0xe8>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d106      	bne.n	80063ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	e008      	b.n	80063c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	3301      	adds	r3, #1
 80063c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1b2      	bne.n	8006344 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b0ba      	sub	sp, #232	@ 0xe8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800641a:	2300      	movs	r3, #0
 800641c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006420:	2300      	movs	r3, #0
 8006422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <HAL_UART_IRQHandler+0x66>
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fbd7 	bl	8006c06 <UART_Receive_IT>
      return;
 8006458:	e273      	b.n	8006942 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800645a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 80de 	beq.w	8006620 <HAL_UART_IRQHandler+0x22c>
 8006464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 80d1 	beq.w	8006620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800647e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <HAL_UART_IRQHandler+0xae>
 800648a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800648e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	f043 0201 	orr.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <HAL_UART_IRQHandler+0xd2>
 80064ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f043 0202 	orr.w	r2, r3, #2
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <HAL_UART_IRQHandler+0xf6>
 80064d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e2:	f043 0204 	orr.w	r2, r3, #4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <HAL_UART_IRQHandler+0x126>
 80064f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006512:	f043 0208 	orr.w	r2, r3, #8
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 820a 	beq.w	8006938 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_UART_IRQHandler+0x14e>
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006534:	f003 0320 	and.w	r3, r3, #32
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb62 	bl	8006c06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	bf0c      	ite	eq
 8006550:	2301      	moveq	r3, #1
 8006552:	2300      	movne	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <HAL_UART_IRQHandler+0x17a>
 8006566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800656a:	2b00      	cmp	r3, #0
 800656c:	d04f      	beq.n	800660e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa6d 	bl	8006a4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800657e:	2b40      	cmp	r3, #64	@ 0x40
 8006580:	d141      	bne.n	8006606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800659c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1d9      	bne.n	8006582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d013      	beq.n	80065fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065da:	4a8a      	ldr	r2, [pc, #552]	@ (8006804 <HAL_UART_IRQHandler+0x410>)
 80065dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fb ffea 	bl	80025bc <HAL_DMA_Abort_IT>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fc:	e00e      	b.n	800661c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9b6 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006604:	e00a      	b.n	800661c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9b2 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	e006      	b.n	800661c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f9ae 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800661a:	e18d      	b.n	8006938 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	bf00      	nop
    return;
 800661e:	e18b      	b.n	8006938 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006624:	2b01      	cmp	r3, #1
 8006626:	f040 8167 	bne.w	80068f8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800662a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8160 	beq.w	80068f8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800663c:	f003 0310 	and.w	r3, r3, #16
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8159 	beq.w	80068f8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006666:	2b40      	cmp	r3, #64	@ 0x40
 8006668:	f040 80ce 	bne.w	8006808 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 80a9 	beq.w	80067d4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800668a:	429a      	cmp	r2, r3
 800668c:	f080 80a2 	bcs.w	80067d4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066a2:	f000 8088 	beq.w	80067b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	330c      	adds	r3, #12
 80066ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80066d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1d9      	bne.n	80066a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3314      	adds	r3, #20
 80066f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3314      	adds	r3, #20
 8006712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800671a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800671e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e1      	bne.n	80066f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3314      	adds	r3, #20
 8006734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800673e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3314      	adds	r3, #20
 800674e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e3      	bne.n	800672e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	330c      	adds	r3, #12
 800677a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006786:	f023 0310 	bic.w	r3, r3, #16
 800678a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800679a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800679e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067a0:	e841 2300 	strex	r3, r2, [r1]
 80067a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e3      	bne.n	8006774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fb fe93 	bl	80024dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2202      	movs	r2, #2
 80067ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8d9 	bl	8006984 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80067d2:	e0b3      	b.n	800693c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067dc:	429a      	cmp	r2, r3
 80067de:	f040 80ad 	bne.w	800693c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ec:	f040 80a6 	bne.w	800693c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8c1 	bl	8006984 <HAL_UARTEx_RxEventCallback>
      return;
 8006802:	e09b      	b.n	800693c <HAL_UART_IRQHandler+0x548>
 8006804:	08006b15 	.word	0x08006b15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006810:	b29b      	uxth	r3, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 808e 	beq.w	8006940 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8089 	beq.w	8006940 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800683e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006852:	647a      	str	r2, [r7, #68]	@ 0x44
 8006854:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e3      	bne.n	800682e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3314      	adds	r3, #20
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	623b      	str	r3, [r7, #32]
   return(result);
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800688a:	633a      	str	r2, [r7, #48]	@ 0x30
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e3      	bne.n	8006866 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068d0:	61fa      	str	r2, [r7, #28]
 80068d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	617b      	str	r3, [r7, #20]
   return(result);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e3      	bne.n	80068ac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068ee:	4619      	mov	r1, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f847 	bl	8006984 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068f6:	e023      	b.n	8006940 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_UART_IRQHandler+0x524>
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f910 	bl	8006b36 <UART_Transmit_IT>
    return;
 8006916:	e014      	b.n	8006942 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800691c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <HAL_UART_IRQHandler+0x54e>
 8006924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f950 	bl	8006bd6 <UART_EndTransmit_IT>
    return;
 8006936:	e004      	b.n	8006942 <HAL_UART_IRQHandler+0x54e>
    return;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <HAL_UART_IRQHandler+0x54e>
      return;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <HAL_UART_IRQHandler+0x54e>
      return;
 8006940:	bf00      	nop
  }
}
 8006942:	37e8      	adds	r7, #232	@ 0xe8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ac:	e03b      	b.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069b4:	d037      	beq.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b6:	f7fb fc01 	bl	80021bc <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	6a3a      	ldr	r2, [r7, #32]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <UART_WaitOnFlagUntilTimeout+0x30>
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e03a      	b.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d023      	beq.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b80      	cmp	r3, #128	@ 0x80
 80069e2:	d020      	beq.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d01d      	beq.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d116      	bne.n	8006a26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f81d 	bl	8006a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2208      	movs	r2, #8
 8006a18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e00f      	b.n	8006a46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	bf0c      	ite	eq
 8006a36:	2301      	moveq	r3, #1
 8006a38:	2300      	movne	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d0b4      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b095      	sub	sp, #84	@ 0x54
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a76:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e5      	bne.n	8006a56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3314      	adds	r3, #20
 8006a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d119      	bne.n	8006afa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f023 0310 	bic.w	r3, r3, #16
 8006adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae6:	61ba      	str	r2, [r7, #24]
 8006ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6979      	ldr	r1, [r7, #20]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	613b      	str	r3, [r7, #16]
   return(result);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e5      	bne.n	8006ac6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b08:	bf00      	nop
 8006b0a:	3754      	adds	r7, #84	@ 0x54
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ff21 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b21      	cmp	r3, #33	@ 0x21
 8006b48:	d13e      	bne.n	8006bc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b52:	d114      	bne.n	8006b7e <UART_Transmit_IT+0x48>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d110      	bne.n	8006b7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	1c9a      	adds	r2, r3, #2
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	621a      	str	r2, [r3, #32]
 8006b7c:	e008      	b.n	8006b90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6211      	str	r1, [r2, #32]
 8006b88:	781a      	ldrb	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e000      	b.n	8006bca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bc8:	2302      	movs	r3, #2
  }
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fea6 	bl	8006948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b08c      	sub	sp, #48	@ 0x30
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b22      	cmp	r3, #34	@ 0x22
 8006c20:	f040 80aa 	bne.w	8006d78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c2c:	d115      	bne.n	8006c5a <UART_Receive_IT+0x54>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d111      	bne.n	8006c5a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c58:	e024      	b.n	8006ca4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c68:	d007      	beq.n	8006c7a <UART_Receive_IT+0x74>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <UART_Receive_IT+0x82>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c84:	701a      	strb	r2, [r3, #0]
 8006c86:	e008      	b.n	8006c9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d15d      	bne.n	8006d74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0220 	bic.w	r2, r2, #32
 8006cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 0201 	bic.w	r2, r2, #1
 8006ce6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d135      	bne.n	8006d6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f023 0310 	bic.w	r3, r3, #16
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d24:	623a      	str	r2, [r7, #32]
 8006d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d28:	69f9      	ldr	r1, [r7, #28]
 8006d2a:	6a3a      	ldr	r2, [r7, #32]
 8006d2c:	e841 2300 	strex	r3, r2, [r1]
 8006d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1e5      	bne.n	8006d04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b10      	cmp	r3, #16
 8006d44:	d10a      	bne.n	8006d5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fe0e 	bl	8006984 <HAL_UARTEx_RxEventCallback>
 8006d68:	e002      	b.n	8006d70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fdf6 	bl	800695c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e002      	b.n	8006d7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e000      	b.n	8006d7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d78:	2302      	movs	r3, #2
  }
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3730      	adds	r7, #48	@ 0x30
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b0c0      	sub	sp, #256	@ 0x100
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da0:	68d9      	ldr	r1, [r3, #12]
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	ea40 0301 	orr.w	r3, r0, r1
 8006dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ddc:	f021 010c 	bic.w	r1, r1, #12
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dea:	430b      	orrs	r3, r1
 8006dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfe:	6999      	ldr	r1, [r3, #24]
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	ea40 0301 	orr.w	r3, r0, r1
 8006e0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b8f      	ldr	r3, [pc, #572]	@ (8007050 <UART_SetConfig+0x2cc>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d005      	beq.n	8006e24 <UART_SetConfig+0xa0>
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8007054 <UART_SetConfig+0x2d0>)
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d104      	bne.n	8006e2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7fe fd2c 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
 8006e28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e2c:	e003      	b.n	8006e36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e2e:	f7fe fd13 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8006e32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e40:	f040 810c 	bne.w	800705c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	1891      	adds	r1, r2, r2
 8006e5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e5e:	415b      	adcs	r3, r3
 8006e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e66:	4621      	mov	r1, r4
 8006e68:	eb12 0801 	adds.w	r8, r2, r1
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	eb43 0901 	adc.w	r9, r3, r1
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e86:	4690      	mov	r8, r2
 8006e88:	4699      	mov	r9, r3
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	eb18 0303 	adds.w	r3, r8, r3
 8006e90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e94:	462b      	mov	r3, r5
 8006e96:	eb49 0303 	adc.w	r3, r9, r3
 8006e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eaa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	18db      	adds	r3, r3, r3
 8006eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb8:	4613      	mov	r3, r2
 8006eba:	eb42 0303 	adc.w	r3, r2, r3
 8006ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ec0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ec4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ec8:	f7f9 f9da 	bl	8000280 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4b61      	ldr	r3, [pc, #388]	@ (8007058 <UART_SetConfig+0x2d4>)
 8006ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	011c      	lsls	r4, r3, #4
 8006eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	1891      	adds	r1, r2, r2
 8006ef2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ef4:	415b      	adcs	r3, r3
 8006ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006efc:	4641      	mov	r1, r8
 8006efe:	eb12 0a01 	adds.w	sl, r2, r1
 8006f02:	4649      	mov	r1, r9
 8006f04:	eb43 0b01 	adc.w	fp, r3, r1
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f1c:	4692      	mov	sl, r2
 8006f1e:	469b      	mov	fp, r3
 8006f20:	4643      	mov	r3, r8
 8006f22:	eb1a 0303 	adds.w	r3, sl, r3
 8006f26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	18db      	adds	r3, r3, r3
 8006f4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f4e:	4613      	mov	r3, r2
 8006f50:	eb42 0303 	adc.w	r3, r2, r3
 8006f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f5e:	f7f9 f98f 	bl	8000280 <__aeabi_uldivmod>
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	4b3b      	ldr	r3, [pc, #236]	@ (8007058 <UART_SetConfig+0x2d4>)
 8006f6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	2264      	movs	r2, #100	@ 0x64
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	1acb      	subs	r3, r1, r3
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f7e:	4b36      	ldr	r3, [pc, #216]	@ (8007058 <UART_SetConfig+0x2d4>)
 8006f80:	fba3 2302 	umull	r2, r3, r3, r2
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f8c:	441c      	add	r4, r3
 8006f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fa0:	4642      	mov	r2, r8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	1891      	adds	r1, r2, r2
 8006fa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fa8:	415b      	adcs	r3, r3
 8006faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	1851      	adds	r1, r2, r1
 8006fb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	414b      	adcs	r3, r1
 8006fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fc8:	4659      	mov	r1, fp
 8006fca:	00cb      	lsls	r3, r1, #3
 8006fcc:	4651      	mov	r1, sl
 8006fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd2:	4651      	mov	r1, sl
 8006fd4:	00ca      	lsls	r2, r1, #3
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4642      	mov	r2, r8
 8006fde:	189b      	adds	r3, r3, r2
 8006fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	460a      	mov	r2, r1
 8006fe8:	eb42 0303 	adc.w	r3, r2, r3
 8006fec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ffc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007000:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007004:	460b      	mov	r3, r1
 8007006:	18db      	adds	r3, r3, r3
 8007008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700a:	4613      	mov	r3, r2
 800700c:	eb42 0303 	adc.w	r3, r2, r3
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007016:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800701a:	f7f9 f931 	bl	8000280 <__aeabi_uldivmod>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <UART_SetConfig+0x2d4>)
 8007024:	fba3 1302 	umull	r1, r3, r3, r2
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	2164      	movs	r1, #100	@ 0x64
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	3332      	adds	r3, #50	@ 0x32
 8007036:	4a08      	ldr	r2, [pc, #32]	@ (8007058 <UART_SetConfig+0x2d4>)
 8007038:	fba2 2303 	umull	r2, r3, r2, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	f003 0207 	and.w	r2, r3, #7
 8007042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4422      	add	r2, r4
 800704a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800704c:	e106      	b.n	800725c <UART_SetConfig+0x4d8>
 800704e:	bf00      	nop
 8007050:	40011000 	.word	0x40011000
 8007054:	40011400 	.word	0x40011400
 8007058:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800705c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007060:	2200      	movs	r2, #0
 8007062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007066:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800706a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800706e:	4642      	mov	r2, r8
 8007070:	464b      	mov	r3, r9
 8007072:	1891      	adds	r1, r2, r2
 8007074:	6239      	str	r1, [r7, #32]
 8007076:	415b      	adcs	r3, r3
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
 800707a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800707e:	4641      	mov	r1, r8
 8007080:	1854      	adds	r4, r2, r1
 8007082:	4649      	mov	r1, r9
 8007084:	eb43 0501 	adc.w	r5, r3, r1
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	00eb      	lsls	r3, r5, #3
 8007092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007096:	00e2      	lsls	r2, r4, #3
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	4643      	mov	r3, r8
 800709e:	18e3      	adds	r3, r4, r3
 80070a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070a4:	464b      	mov	r3, r9
 80070a6:	eb45 0303 	adc.w	r3, r5, r3
 80070aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070ca:	4629      	mov	r1, r5
 80070cc:	008b      	lsls	r3, r1, #2
 80070ce:	4621      	mov	r1, r4
 80070d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d4:	4621      	mov	r1, r4
 80070d6:	008a      	lsls	r2, r1, #2
 80070d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070dc:	f7f9 f8d0 	bl	8000280 <__aeabi_uldivmod>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4b60      	ldr	r3, [pc, #384]	@ (8007268 <UART_SetConfig+0x4e4>)
 80070e6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	011c      	lsls	r4, r3, #4
 80070ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007100:	4642      	mov	r2, r8
 8007102:	464b      	mov	r3, r9
 8007104:	1891      	adds	r1, r2, r2
 8007106:	61b9      	str	r1, [r7, #24]
 8007108:	415b      	adcs	r3, r3
 800710a:	61fb      	str	r3, [r7, #28]
 800710c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007110:	4641      	mov	r1, r8
 8007112:	1851      	adds	r1, r2, r1
 8007114:	6139      	str	r1, [r7, #16]
 8007116:	4649      	mov	r1, r9
 8007118:	414b      	adcs	r3, r1
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007128:	4659      	mov	r1, fp
 800712a:	00cb      	lsls	r3, r1, #3
 800712c:	4651      	mov	r1, sl
 800712e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007132:	4651      	mov	r1, sl
 8007134:	00ca      	lsls	r2, r1, #3
 8007136:	4610      	mov	r0, r2
 8007138:	4619      	mov	r1, r3
 800713a:	4603      	mov	r3, r0
 800713c:	4642      	mov	r2, r8
 800713e:	189b      	adds	r3, r3, r2
 8007140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007144:	464b      	mov	r3, r9
 8007146:	460a      	mov	r2, r1
 8007148:	eb42 0303 	adc.w	r3, r2, r3
 800714c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	67bb      	str	r3, [r7, #120]	@ 0x78
 800715a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007168:	4649      	mov	r1, r9
 800716a:	008b      	lsls	r3, r1, #2
 800716c:	4641      	mov	r1, r8
 800716e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007172:	4641      	mov	r1, r8
 8007174:	008a      	lsls	r2, r1, #2
 8007176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800717a:	f7f9 f881 	bl	8000280 <__aeabi_uldivmod>
 800717e:	4602      	mov	r2, r0
 8007180:	460b      	mov	r3, r1
 8007182:	4611      	mov	r1, r2
 8007184:	4b38      	ldr	r3, [pc, #224]	@ (8007268 <UART_SetConfig+0x4e4>)
 8007186:	fba3 2301 	umull	r2, r3, r3, r1
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	2264      	movs	r2, #100	@ 0x64
 800718e:	fb02 f303 	mul.w	r3, r2, r3
 8007192:	1acb      	subs	r3, r1, r3
 8007194:	011b      	lsls	r3, r3, #4
 8007196:	3332      	adds	r3, #50	@ 0x32
 8007198:	4a33      	ldr	r2, [pc, #204]	@ (8007268 <UART_SetConfig+0x4e4>)
 800719a:	fba2 2303 	umull	r2, r3, r2, r3
 800719e:	095b      	lsrs	r3, r3, #5
 80071a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a4:	441c      	add	r4, r3
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80071ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80071b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071b4:	4642      	mov	r2, r8
 80071b6:	464b      	mov	r3, r9
 80071b8:	1891      	adds	r1, r2, r2
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	415b      	adcs	r3, r3
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c4:	4641      	mov	r1, r8
 80071c6:	1851      	adds	r1, r2, r1
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	4649      	mov	r1, r9
 80071cc:	414b      	adcs	r3, r1
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071dc:	4659      	mov	r1, fp
 80071de:	00cb      	lsls	r3, r1, #3
 80071e0:	4651      	mov	r1, sl
 80071e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e6:	4651      	mov	r1, sl
 80071e8:	00ca      	lsls	r2, r1, #3
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	4642      	mov	r2, r8
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071f6:	464b      	mov	r3, r9
 80071f8:	460a      	mov	r2, r1
 80071fa:	eb42 0303 	adc.w	r3, r2, r3
 80071fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	663b      	str	r3, [r7, #96]	@ 0x60
 800720a:	667a      	str	r2, [r7, #100]	@ 0x64
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007218:	4649      	mov	r1, r9
 800721a:	008b      	lsls	r3, r1, #2
 800721c:	4641      	mov	r1, r8
 800721e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007222:	4641      	mov	r1, r8
 8007224:	008a      	lsls	r2, r1, #2
 8007226:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800722a:	f7f9 f829 	bl	8000280 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4b0d      	ldr	r3, [pc, #52]	@ (8007268 <UART_SetConfig+0x4e4>)
 8007234:	fba3 1302 	umull	r1, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	2164      	movs	r1, #100	@ 0x64
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	3332      	adds	r3, #50	@ 0x32
 8007246:	4a08      	ldr	r2, [pc, #32]	@ (8007268 <UART_SetConfig+0x4e4>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	f003 020f 	and.w	r2, r3, #15
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4422      	add	r2, r4
 800725a:	609a      	str	r2, [r3, #8]
}
 800725c:	bf00      	nop
 800725e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007262:	46bd      	mov	sp, r7
 8007264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007268:	51eb851f 	.word	0x51eb851f

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0f      	ldr	r6, [pc, #60]	@ (80072ac <sbrk_aligned+0x40>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f000 f9ee 	bl	8007658 <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f9e9 	bl	8007658 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d103      	bne.n	8007292 <sbrk_aligned+0x26>
 800728a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800728e:	4620      	mov	r0, r4
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d0f8      	beq.n	800728e <sbrk_aligned+0x22>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f9da 	bl	8007658 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1f2      	bne.n	800728e <sbrk_aligned+0x22>
 80072a8:	e7ef      	b.n	800728a <sbrk_aligned+0x1e>
 80072aa:	bf00      	nop
 80072ac:	2000060c 	.word	0x2000060c

080072b0 <_malloc_r>:
 80072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4606      	mov	r6, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d904      	bls.n	80072d6 <_malloc_r+0x26>
 80072cc:	230c      	movs	r3, #12
 80072ce:	6033      	str	r3, [r6, #0]
 80072d0:	2000      	movs	r0, #0
 80072d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073ac <_malloc_r+0xfc>
 80072da:	f000 f869 	bl	80073b0 <__malloc_lock>
 80072de:	f8d8 3000 	ldr.w	r3, [r8]
 80072e2:	461c      	mov	r4, r3
 80072e4:	bb44      	cbnz	r4, 8007338 <_malloc_r+0x88>
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ffbf 	bl	800726c <sbrk_aligned>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	4604      	mov	r4, r0
 80072f2:	d158      	bne.n	80073a6 <_malloc_r+0xf6>
 80072f4:	f8d8 4000 	ldr.w	r4, [r8]
 80072f8:	4627      	mov	r7, r4
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	d143      	bne.n	8007386 <_malloc_r+0xd6>
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d04b      	beq.n	800739a <_malloc_r+0xea>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	4639      	mov	r1, r7
 8007306:	4630      	mov	r0, r6
 8007308:	eb04 0903 	add.w	r9, r4, r3
 800730c:	f000 f9a4 	bl	8007658 <_sbrk_r>
 8007310:	4581      	cmp	r9, r0
 8007312:	d142      	bne.n	800739a <_malloc_r+0xea>
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	1a6d      	subs	r5, r5, r1
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff ffa6 	bl	800726c <sbrk_aligned>
 8007320:	3001      	adds	r0, #1
 8007322:	d03a      	beq.n	800739a <_malloc_r+0xea>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	442b      	add	r3, r5
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	f8d8 3000 	ldr.w	r3, [r8]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	bb62      	cbnz	r2, 800738c <_malloc_r+0xdc>
 8007332:	f8c8 7000 	str.w	r7, [r8]
 8007336:	e00f      	b.n	8007358 <_malloc_r+0xa8>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	1b52      	subs	r2, r2, r5
 800733c:	d420      	bmi.n	8007380 <_malloc_r+0xd0>
 800733e:	2a0b      	cmp	r2, #11
 8007340:	d917      	bls.n	8007372 <_malloc_r+0xc2>
 8007342:	1961      	adds	r1, r4, r5
 8007344:	42a3      	cmp	r3, r4
 8007346:	6025      	str	r5, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	6059      	strne	r1, [r3, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	bf08      	it	eq
 8007350:	f8c8 1000 	streq.w	r1, [r8]
 8007354:	5162      	str	r2, [r4, r5]
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f82f 	bl	80073bc <__malloc_unlock>
 800735e:	f104 000b 	add.w	r0, r4, #11
 8007362:	1d23      	adds	r3, r4, #4
 8007364:	f020 0007 	bic.w	r0, r0, #7
 8007368:	1ac2      	subs	r2, r0, r3
 800736a:	bf1c      	itt	ne
 800736c:	1a1b      	subne	r3, r3, r0
 800736e:	50a3      	strne	r3, [r4, r2]
 8007370:	e7af      	b.n	80072d2 <_malloc_r+0x22>
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	bf0c      	ite	eq
 8007378:	f8c8 2000 	streq.w	r2, [r8]
 800737c:	605a      	strne	r2, [r3, #4]
 800737e:	e7eb      	b.n	8007358 <_malloc_r+0xa8>
 8007380:	4623      	mov	r3, r4
 8007382:	6864      	ldr	r4, [r4, #4]
 8007384:	e7ae      	b.n	80072e4 <_malloc_r+0x34>
 8007386:	463c      	mov	r4, r7
 8007388:	687f      	ldr	r7, [r7, #4]
 800738a:	e7b6      	b.n	80072fa <_malloc_r+0x4a>
 800738c:	461a      	mov	r2, r3
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	d1fb      	bne.n	800738c <_malloc_r+0xdc>
 8007394:	2300      	movs	r3, #0
 8007396:	6053      	str	r3, [r2, #4]
 8007398:	e7de      	b.n	8007358 <_malloc_r+0xa8>
 800739a:	230c      	movs	r3, #12
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f80c 	bl	80073bc <__malloc_unlock>
 80073a4:	e794      	b.n	80072d0 <_malloc_r+0x20>
 80073a6:	6005      	str	r5, [r0, #0]
 80073a8:	e7d6      	b.n	8007358 <_malloc_r+0xa8>
 80073aa:	bf00      	nop
 80073ac:	20000610 	.word	0x20000610

080073b0 <__malloc_lock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	@ (80073b8 <__malloc_lock+0x8>)
 80073b2:	f000 b98c 	b.w	80076ce <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	20000750 	.word	0x20000750

080073bc <__malloc_unlock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	@ (80073c4 <__malloc_unlock+0x8>)
 80073be:	f000 b987 	b.w	80076d0 <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	20000750 	.word	0x20000750

080073c8 <siprintf>:
 80073c8:	b40e      	push	{r1, r2, r3}
 80073ca:	b500      	push	{lr}
 80073cc:	b09c      	sub	sp, #112	@ 0x70
 80073ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80073d0:	9002      	str	r0, [sp, #8]
 80073d2:	9006      	str	r0, [sp, #24]
 80073d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073d8:	4809      	ldr	r0, [pc, #36]	@ (8007400 <siprintf+0x38>)
 80073da:	9107      	str	r1, [sp, #28]
 80073dc:	9104      	str	r1, [sp, #16]
 80073de:	4909      	ldr	r1, [pc, #36]	@ (8007404 <siprintf+0x3c>)
 80073e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e4:	9105      	str	r1, [sp, #20]
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	a902      	add	r1, sp, #8
 80073ec:	f000 fa26 	bl	800783c <_svfiprintf_r>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	b01c      	add	sp, #112	@ 0x70
 80073f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr
 8007400:	20000018 	.word	0x20000018
 8007404:	ffff0208 	.word	0xffff0208

08007408 <std>:
 8007408:	2300      	movs	r3, #0
 800740a:	b510      	push	{r4, lr}
 800740c:	4604      	mov	r4, r0
 800740e:	e9c0 3300 	strd	r3, r3, [r0]
 8007412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007416:	6083      	str	r3, [r0, #8]
 8007418:	8181      	strh	r1, [r0, #12]
 800741a:	6643      	str	r3, [r0, #100]	@ 0x64
 800741c:	81c2      	strh	r2, [r0, #14]
 800741e:	6183      	str	r3, [r0, #24]
 8007420:	4619      	mov	r1, r3
 8007422:	2208      	movs	r2, #8
 8007424:	305c      	adds	r0, #92	@ 0x5c
 8007426:	f000 f90f 	bl	8007648 <memset>
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <std+0x58>)
 800742c:	6263      	str	r3, [r4, #36]	@ 0x24
 800742e:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <std+0x5c>)
 8007430:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <std+0x60>)
 8007434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007436:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <std+0x64>)
 8007438:	6323      	str	r3, [r4, #48]	@ 0x30
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x68>)
 800743c:	6224      	str	r4, [r4, #32]
 800743e:	429c      	cmp	r4, r3
 8007440:	d006      	beq.n	8007450 <std+0x48>
 8007442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007446:	4294      	cmp	r4, r2
 8007448:	d002      	beq.n	8007450 <std+0x48>
 800744a:	33d0      	adds	r3, #208	@ 0xd0
 800744c:	429c      	cmp	r4, r3
 800744e:	d105      	bne.n	800745c <std+0x54>
 8007450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f000 b938 	b.w	80076cc <__retarget_lock_init_recursive>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	08007ea9 	.word	0x08007ea9
 8007464:	08007ecb 	.word	0x08007ecb
 8007468:	08007f03 	.word	0x08007f03
 800746c:	08007f27 	.word	0x08007f27
 8007470:	20000614 	.word	0x20000614

08007474 <stdio_exit_handler>:
 8007474:	4a02      	ldr	r2, [pc, #8]	@ (8007480 <stdio_exit_handler+0xc>)
 8007476:	4903      	ldr	r1, [pc, #12]	@ (8007484 <stdio_exit_handler+0x10>)
 8007478:	4803      	ldr	r0, [pc, #12]	@ (8007488 <stdio_exit_handler+0x14>)
 800747a:	f000 b869 	b.w	8007550 <_fwalk_sglue>
 800747e:	bf00      	nop
 8007480:	2000000c 	.word	0x2000000c
 8007484:	08007e59 	.word	0x08007e59
 8007488:	2000001c 	.word	0x2000001c

0800748c <cleanup_stdio>:
 800748c:	6841      	ldr	r1, [r0, #4]
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <cleanup_stdio+0x34>)
 8007490:	4299      	cmp	r1, r3
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	d001      	beq.n	800749c <cleanup_stdio+0x10>
 8007498:	f000 fcde 	bl	8007e58 <_fflush_r>
 800749c:	68a1      	ldr	r1, [r4, #8]
 800749e:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <cleanup_stdio+0x38>)
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <cleanup_stdio+0x1e>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 fcd7 	bl	8007e58 <_fflush_r>
 80074aa:	68e1      	ldr	r1, [r4, #12]
 80074ac:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <cleanup_stdio+0x3c>)
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d004      	beq.n	80074bc <cleanup_stdio+0x30>
 80074b2:	4620      	mov	r0, r4
 80074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b8:	f000 bcce 	b.w	8007e58 <_fflush_r>
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	20000614 	.word	0x20000614
 80074c4:	2000067c 	.word	0x2000067c
 80074c8:	200006e4 	.word	0x200006e4

080074cc <global_stdio_init.part.0>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <global_stdio_init.part.0+0x30>)
 80074d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007500 <global_stdio_init.part.0+0x34>)
 80074d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <global_stdio_init.part.0+0x38>)
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	4620      	mov	r0, r4
 80074d8:	2200      	movs	r2, #0
 80074da:	2104      	movs	r1, #4
 80074dc:	f7ff ff94 	bl	8007408 <std>
 80074e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074e4:	2201      	movs	r2, #1
 80074e6:	2109      	movs	r1, #9
 80074e8:	f7ff ff8e 	bl	8007408 <std>
 80074ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074f0:	2202      	movs	r2, #2
 80074f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f6:	2112      	movs	r1, #18
 80074f8:	f7ff bf86 	b.w	8007408 <std>
 80074fc:	2000074c 	.word	0x2000074c
 8007500:	20000614 	.word	0x20000614
 8007504:	08007475 	.word	0x08007475

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	@ (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 b8e0 	b.w	80076ce <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	20000751 	.word	0x20000751

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	@ (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 b8db 	b.w	80076d0 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	20000751 	.word	0x20000751

08007520 <__sinit>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4604      	mov	r4, r0
 8007524:	f7ff fff0 	bl	8007508 <__sfp_lock_acquire>
 8007528:	6a23      	ldr	r3, [r4, #32]
 800752a:	b11b      	cbz	r3, 8007534 <__sinit+0x14>
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007530:	f7ff bff0 	b.w	8007514 <__sfp_lock_release>
 8007534:	4b04      	ldr	r3, [pc, #16]	@ (8007548 <__sinit+0x28>)
 8007536:	6223      	str	r3, [r4, #32]
 8007538:	4b04      	ldr	r3, [pc, #16]	@ (800754c <__sinit+0x2c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f5      	bne.n	800752c <__sinit+0xc>
 8007540:	f7ff ffc4 	bl	80074cc <global_stdio_init.part.0>
 8007544:	e7f2      	b.n	800752c <__sinit+0xc>
 8007546:	bf00      	nop
 8007548:	0800748d 	.word	0x0800748d
 800754c:	2000074c 	.word	0x2000074c

08007550 <_fwalk_sglue>:
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	4607      	mov	r7, r0
 8007556:	4688      	mov	r8, r1
 8007558:	4614      	mov	r4, r2
 800755a:	2600      	movs	r6, #0
 800755c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007560:	f1b9 0901 	subs.w	r9, r9, #1
 8007564:	d505      	bpl.n	8007572 <_fwalk_sglue+0x22>
 8007566:	6824      	ldr	r4, [r4, #0]
 8007568:	2c00      	cmp	r4, #0
 800756a:	d1f7      	bne.n	800755c <_fwalk_sglue+0xc>
 800756c:	4630      	mov	r0, r6
 800756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d907      	bls.n	8007588 <_fwalk_sglue+0x38>
 8007578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800757c:	3301      	adds	r3, #1
 800757e:	d003      	beq.n	8007588 <_fwalk_sglue+0x38>
 8007580:	4629      	mov	r1, r5
 8007582:	4638      	mov	r0, r7
 8007584:	47c0      	blx	r8
 8007586:	4306      	orrs	r6, r0
 8007588:	3568      	adds	r5, #104	@ 0x68
 800758a:	e7e9      	b.n	8007560 <_fwalk_sglue+0x10>

0800758c <_puts_r>:
 800758c:	6a03      	ldr	r3, [r0, #32]
 800758e:	b570      	push	{r4, r5, r6, lr}
 8007590:	6884      	ldr	r4, [r0, #8]
 8007592:	4605      	mov	r5, r0
 8007594:	460e      	mov	r6, r1
 8007596:	b90b      	cbnz	r3, 800759c <_puts_r+0x10>
 8007598:	f7ff ffc2 	bl	8007520 <__sinit>
 800759c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800759e:	07db      	lsls	r3, r3, #31
 80075a0:	d405      	bmi.n	80075ae <_puts_r+0x22>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	0598      	lsls	r0, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_puts_r+0x22>
 80075a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075aa:	f000 f890 	bl	80076ce <__retarget_lock_acquire_recursive>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	0719      	lsls	r1, r3, #28
 80075b2:	d502      	bpl.n	80075ba <_puts_r+0x2e>
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d135      	bne.n	8007626 <_puts_r+0x9a>
 80075ba:	4621      	mov	r1, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 fd23 	bl	8008008 <__swsetup_r>
 80075c2:	b380      	cbz	r0, 8007626 <_puts_r+0x9a>
 80075c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80075c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075ca:	07da      	lsls	r2, r3, #31
 80075cc:	d405      	bmi.n	80075da <_puts_r+0x4e>
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	059b      	lsls	r3, r3, #22
 80075d2:	d402      	bmi.n	80075da <_puts_r+0x4e>
 80075d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075d6:	f000 f87b 	bl	80076d0 <__retarget_lock_release_recursive>
 80075da:	4628      	mov	r0, r5
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da04      	bge.n	80075ec <_puts_r+0x60>
 80075e2:	69a2      	ldr	r2, [r4, #24]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	dc17      	bgt.n	8007618 <_puts_r+0x8c>
 80075e8:	290a      	cmp	r1, #10
 80075ea:	d015      	beq.n	8007618 <_puts_r+0x8c>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	6022      	str	r2, [r4, #0]
 80075f2:	7019      	strb	r1, [r3, #0]
 80075f4:	68a3      	ldr	r3, [r4, #8]
 80075f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075fa:	3b01      	subs	r3, #1
 80075fc:	60a3      	str	r3, [r4, #8]
 80075fe:	2900      	cmp	r1, #0
 8007600:	d1ed      	bne.n	80075de <_puts_r+0x52>
 8007602:	2b00      	cmp	r3, #0
 8007604:	da11      	bge.n	800762a <_puts_r+0x9e>
 8007606:	4622      	mov	r2, r4
 8007608:	210a      	movs	r1, #10
 800760a:	4628      	mov	r0, r5
 800760c:	f000 fcbd 	bl	8007f8a <__swbuf_r>
 8007610:	3001      	adds	r0, #1
 8007612:	d0d7      	beq.n	80075c4 <_puts_r+0x38>
 8007614:	250a      	movs	r5, #10
 8007616:	e7d7      	b.n	80075c8 <_puts_r+0x3c>
 8007618:	4622      	mov	r2, r4
 800761a:	4628      	mov	r0, r5
 800761c:	f000 fcb5 	bl	8007f8a <__swbuf_r>
 8007620:	3001      	adds	r0, #1
 8007622:	d1e7      	bne.n	80075f4 <_puts_r+0x68>
 8007624:	e7ce      	b.n	80075c4 <_puts_r+0x38>
 8007626:	3e01      	subs	r6, #1
 8007628:	e7e4      	b.n	80075f4 <_puts_r+0x68>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	220a      	movs	r2, #10
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e7ee      	b.n	8007614 <_puts_r+0x88>
	...

08007638 <puts>:
 8007638:	4b02      	ldr	r3, [pc, #8]	@ (8007644 <puts+0xc>)
 800763a:	4601      	mov	r1, r0
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	f7ff bfa5 	b.w	800758c <_puts_r>
 8007642:	bf00      	nop
 8007644:	20000018 	.word	0x20000018

08007648 <memset>:
 8007648:	4402      	add	r2, r0
 800764a:	4603      	mov	r3, r0
 800764c:	4293      	cmp	r3, r2
 800764e:	d100      	bne.n	8007652 <memset+0xa>
 8007650:	4770      	bx	lr
 8007652:	f803 1b01 	strb.w	r1, [r3], #1
 8007656:	e7f9      	b.n	800764c <memset+0x4>

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	@ (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7fa f83a 	bl	80016dc <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	20000754 	.word	0x20000754

08007678 <__errno>:
 8007678:	4b01      	ldr	r3, [pc, #4]	@ (8007680 <__errno+0x8>)
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	20000018 	.word	0x20000018

08007684 <__libc_init_array>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4d0d      	ldr	r5, [pc, #52]	@ (80076bc <__libc_init_array+0x38>)
 8007688:	4c0d      	ldr	r4, [pc, #52]	@ (80076c0 <__libc_init_array+0x3c>)
 800768a:	1b64      	subs	r4, r4, r5
 800768c:	10a4      	asrs	r4, r4, #2
 800768e:	2600      	movs	r6, #0
 8007690:	42a6      	cmp	r6, r4
 8007692:	d109      	bne.n	80076a8 <__libc_init_array+0x24>
 8007694:	4d0b      	ldr	r5, [pc, #44]	@ (80076c4 <__libc_init_array+0x40>)
 8007696:	4c0c      	ldr	r4, [pc, #48]	@ (80076c8 <__libc_init_array+0x44>)
 8007698:	f000 fdf8 	bl	800828c <_init>
 800769c:	1b64      	subs	r4, r4, r5
 800769e:	10a4      	asrs	r4, r4, #2
 80076a0:	2600      	movs	r6, #0
 80076a2:	42a6      	cmp	r6, r4
 80076a4:	d105      	bne.n	80076b2 <__libc_init_array+0x2e>
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ac:	4798      	blx	r3
 80076ae:	3601      	adds	r6, #1
 80076b0:	e7ee      	b.n	8007690 <__libc_init_array+0xc>
 80076b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b6:	4798      	blx	r3
 80076b8:	3601      	adds	r6, #1
 80076ba:	e7f2      	b.n	80076a2 <__libc_init_array+0x1e>
 80076bc:	08008a60 	.word	0x08008a60
 80076c0:	08008a60 	.word	0x08008a60
 80076c4:	08008a60 	.word	0x08008a60
 80076c8:	08008a64 	.word	0x08008a64

080076cc <__retarget_lock_init_recursive>:
 80076cc:	4770      	bx	lr

080076ce <__retarget_lock_acquire_recursive>:
 80076ce:	4770      	bx	lr

080076d0 <__retarget_lock_release_recursive>:
 80076d0:	4770      	bx	lr

080076d2 <memcpy>:
 80076d2:	440a      	add	r2, r1
 80076d4:	4291      	cmp	r1, r2
 80076d6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80076da:	d100      	bne.n	80076de <memcpy+0xc>
 80076dc:	4770      	bx	lr
 80076de:	b510      	push	{r4, lr}
 80076e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e8:	4291      	cmp	r1, r2
 80076ea:	d1f9      	bne.n	80076e0 <memcpy+0xe>
 80076ec:	bd10      	pop	{r4, pc}
	...

080076f0 <_free_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4605      	mov	r5, r0
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d041      	beq.n	800777c <_free_r+0x8c>
 80076f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076fc:	1f0c      	subs	r4, r1, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bfb8      	it	lt
 8007702:	18e4      	addlt	r4, r4, r3
 8007704:	f7ff fe54 	bl	80073b0 <__malloc_lock>
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <_free_r+0x90>)
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	b933      	cbnz	r3, 800771c <_free_r+0x2c>
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	4628      	mov	r0, r5
 8007714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007718:	f7ff be50 	b.w	80073bc <__malloc_unlock>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d908      	bls.n	8007732 <_free_r+0x42>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	1821      	adds	r1, r4, r0
 8007724:	428b      	cmp	r3, r1
 8007726:	bf01      	itttt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	1809      	addeq	r1, r1, r0
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	e7ed      	b.n	800770e <_free_r+0x1e>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x4c>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x42>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1850      	adds	r0, r2, r1
 8007740:	42a0      	cmp	r0, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x6c>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	4401      	add	r1, r0
 8007748:	1850      	adds	r0, r2, r1
 800774a:	4283      	cmp	r3, r0
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1e0      	bne.n	8007712 <_free_r+0x22>
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4408      	add	r0, r1
 8007758:	6010      	str	r0, [r2, #0]
 800775a:	e7da      	b.n	8007712 <_free_r+0x22>
 800775c:	d902      	bls.n	8007764 <_free_r+0x74>
 800775e:	230c      	movs	r3, #12
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	e7d6      	b.n	8007712 <_free_r+0x22>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	1821      	adds	r1, r4, r0
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1809      	addeq	r1, r1, r0
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7ca      	b.n	8007712 <_free_r+0x22>
 800777c:	bd38      	pop	{r3, r4, r5, pc}
 800777e:	bf00      	nop
 8007780:	20000610 	.word	0x20000610

08007784 <__ssputs_r>:
 8007784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007788:	688e      	ldr	r6, [r1, #8]
 800778a:	461f      	mov	r7, r3
 800778c:	42be      	cmp	r6, r7
 800778e:	680b      	ldr	r3, [r1, #0]
 8007790:	4682      	mov	sl, r0
 8007792:	460c      	mov	r4, r1
 8007794:	4690      	mov	r8, r2
 8007796:	d82d      	bhi.n	80077f4 <__ssputs_r+0x70>
 8007798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800779c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077a0:	d026      	beq.n	80077f0 <__ssputs_r+0x6c>
 80077a2:	6965      	ldr	r5, [r4, #20]
 80077a4:	6909      	ldr	r1, [r1, #16]
 80077a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077aa:	eba3 0901 	sub.w	r9, r3, r1
 80077ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077b2:	1c7b      	adds	r3, r7, #1
 80077b4:	444b      	add	r3, r9
 80077b6:	106d      	asrs	r5, r5, #1
 80077b8:	429d      	cmp	r5, r3
 80077ba:	bf38      	it	cc
 80077bc:	461d      	movcc	r5, r3
 80077be:	0553      	lsls	r3, r2, #21
 80077c0:	d527      	bpl.n	8007812 <__ssputs_r+0x8e>
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7ff fd74 	bl	80072b0 <_malloc_r>
 80077c8:	4606      	mov	r6, r0
 80077ca:	b360      	cbz	r0, 8007826 <__ssputs_r+0xa2>
 80077cc:	6921      	ldr	r1, [r4, #16]
 80077ce:	464a      	mov	r2, r9
 80077d0:	f7ff ff7f 	bl	80076d2 <memcpy>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	6126      	str	r6, [r4, #16]
 80077e2:	6165      	str	r5, [r4, #20]
 80077e4:	444e      	add	r6, r9
 80077e6:	eba5 0509 	sub.w	r5, r5, r9
 80077ea:	6026      	str	r6, [r4, #0]
 80077ec:	60a5      	str	r5, [r4, #8]
 80077ee:	463e      	mov	r6, r7
 80077f0:	42be      	cmp	r6, r7
 80077f2:	d900      	bls.n	80077f6 <__ssputs_r+0x72>
 80077f4:	463e      	mov	r6, r7
 80077f6:	6820      	ldr	r0, [r4, #0]
 80077f8:	4632      	mov	r2, r6
 80077fa:	4641      	mov	r1, r8
 80077fc:	f000 fcbc 	bl	8008178 <memmove>
 8007800:	68a3      	ldr	r3, [r4, #8]
 8007802:	1b9b      	subs	r3, r3, r6
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	4433      	add	r3, r6
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	2000      	movs	r0, #0
 800780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007812:	462a      	mov	r2, r5
 8007814:	f000 fb8b 	bl	8007f2e <_realloc_r>
 8007818:	4606      	mov	r6, r0
 800781a:	2800      	cmp	r0, #0
 800781c:	d1e0      	bne.n	80077e0 <__ssputs_r+0x5c>
 800781e:	6921      	ldr	r1, [r4, #16]
 8007820:	4650      	mov	r0, sl
 8007822:	f7ff ff65 	bl	80076f0 <_free_r>
 8007826:	230c      	movs	r3, #12
 8007828:	f8ca 3000 	str.w	r3, [sl]
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007832:	81a3      	strh	r3, [r4, #12]
 8007834:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007838:	e7e9      	b.n	800780e <__ssputs_r+0x8a>
	...

0800783c <_svfiprintf_r>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	4698      	mov	r8, r3
 8007842:	898b      	ldrh	r3, [r1, #12]
 8007844:	061b      	lsls	r3, r3, #24
 8007846:	b09d      	sub	sp, #116	@ 0x74
 8007848:	4607      	mov	r7, r0
 800784a:	460d      	mov	r5, r1
 800784c:	4614      	mov	r4, r2
 800784e:	d510      	bpl.n	8007872 <_svfiprintf_r+0x36>
 8007850:	690b      	ldr	r3, [r1, #16]
 8007852:	b973      	cbnz	r3, 8007872 <_svfiprintf_r+0x36>
 8007854:	2140      	movs	r1, #64	@ 0x40
 8007856:	f7ff fd2b 	bl	80072b0 <_malloc_r>
 800785a:	6028      	str	r0, [r5, #0]
 800785c:	6128      	str	r0, [r5, #16]
 800785e:	b930      	cbnz	r0, 800786e <_svfiprintf_r+0x32>
 8007860:	230c      	movs	r3, #12
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007868:	b01d      	add	sp, #116	@ 0x74
 800786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786e:	2340      	movs	r3, #64	@ 0x40
 8007870:	616b      	str	r3, [r5, #20]
 8007872:	2300      	movs	r3, #0
 8007874:	9309      	str	r3, [sp, #36]	@ 0x24
 8007876:	2320      	movs	r3, #32
 8007878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800787c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007880:	2330      	movs	r3, #48	@ 0x30
 8007882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a20 <_svfiprintf_r+0x1e4>
 8007886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800788a:	f04f 0901 	mov.w	r9, #1
 800788e:	4623      	mov	r3, r4
 8007890:	469a      	mov	sl, r3
 8007892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007896:	b10a      	cbz	r2, 800789c <_svfiprintf_r+0x60>
 8007898:	2a25      	cmp	r2, #37	@ 0x25
 800789a:	d1f9      	bne.n	8007890 <_svfiprintf_r+0x54>
 800789c:	ebba 0b04 	subs.w	fp, sl, r4
 80078a0:	d00b      	beq.n	80078ba <_svfiprintf_r+0x7e>
 80078a2:	465b      	mov	r3, fp
 80078a4:	4622      	mov	r2, r4
 80078a6:	4629      	mov	r1, r5
 80078a8:	4638      	mov	r0, r7
 80078aa:	f7ff ff6b 	bl	8007784 <__ssputs_r>
 80078ae:	3001      	adds	r0, #1
 80078b0:	f000 80a7 	beq.w	8007a02 <_svfiprintf_r+0x1c6>
 80078b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078b6:	445a      	add	r2, fp
 80078b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ba:	f89a 3000 	ldrb.w	r3, [sl]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 809f 	beq.w	8007a02 <_svfiprintf_r+0x1c6>
 80078c4:	2300      	movs	r3, #0
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ce:	f10a 0a01 	add.w	sl, sl, #1
 80078d2:	9304      	str	r3, [sp, #16]
 80078d4:	9307      	str	r3, [sp, #28]
 80078d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078da:	931a      	str	r3, [sp, #104]	@ 0x68
 80078dc:	4654      	mov	r4, sl
 80078de:	2205      	movs	r2, #5
 80078e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e4:	484e      	ldr	r0, [pc, #312]	@ (8007a20 <_svfiprintf_r+0x1e4>)
 80078e6:	f7f8 fc7b 	bl	80001e0 <memchr>
 80078ea:	9a04      	ldr	r2, [sp, #16]
 80078ec:	b9d8      	cbnz	r0, 8007926 <_svfiprintf_r+0xea>
 80078ee:	06d0      	lsls	r0, r2, #27
 80078f0:	bf44      	itt	mi
 80078f2:	2320      	movmi	r3, #32
 80078f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078f8:	0711      	lsls	r1, r2, #28
 80078fa:	bf44      	itt	mi
 80078fc:	232b      	movmi	r3, #43	@ 0x2b
 80078fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007902:	f89a 3000 	ldrb.w	r3, [sl]
 8007906:	2b2a      	cmp	r3, #42	@ 0x2a
 8007908:	d015      	beq.n	8007936 <_svfiprintf_r+0xfa>
 800790a:	9a07      	ldr	r2, [sp, #28]
 800790c:	4654      	mov	r4, sl
 800790e:	2000      	movs	r0, #0
 8007910:	f04f 0c0a 	mov.w	ip, #10
 8007914:	4621      	mov	r1, r4
 8007916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791a:	3b30      	subs	r3, #48	@ 0x30
 800791c:	2b09      	cmp	r3, #9
 800791e:	d94b      	bls.n	80079b8 <_svfiprintf_r+0x17c>
 8007920:	b1b0      	cbz	r0, 8007950 <_svfiprintf_r+0x114>
 8007922:	9207      	str	r2, [sp, #28]
 8007924:	e014      	b.n	8007950 <_svfiprintf_r+0x114>
 8007926:	eba0 0308 	sub.w	r3, r0, r8
 800792a:	fa09 f303 	lsl.w	r3, r9, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	46a2      	mov	sl, r4
 8007934:	e7d2      	b.n	80078dc <_svfiprintf_r+0xa0>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	1d19      	adds	r1, r3, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	9103      	str	r1, [sp, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	bfbb      	ittet	lt
 8007942:	425b      	neglt	r3, r3
 8007944:	f042 0202 	orrlt.w	r2, r2, #2
 8007948:	9307      	strge	r3, [sp, #28]
 800794a:	9307      	strlt	r3, [sp, #28]
 800794c:	bfb8      	it	lt
 800794e:	9204      	strlt	r2, [sp, #16]
 8007950:	7823      	ldrb	r3, [r4, #0]
 8007952:	2b2e      	cmp	r3, #46	@ 0x2e
 8007954:	d10a      	bne.n	800796c <_svfiprintf_r+0x130>
 8007956:	7863      	ldrb	r3, [r4, #1]
 8007958:	2b2a      	cmp	r3, #42	@ 0x2a
 800795a:	d132      	bne.n	80079c2 <_svfiprintf_r+0x186>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	9203      	str	r2, [sp, #12]
 8007964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007968:	3402      	adds	r4, #2
 800796a:	9305      	str	r3, [sp, #20]
 800796c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a30 <_svfiprintf_r+0x1f4>
 8007970:	7821      	ldrb	r1, [r4, #0]
 8007972:	2203      	movs	r2, #3
 8007974:	4650      	mov	r0, sl
 8007976:	f7f8 fc33 	bl	80001e0 <memchr>
 800797a:	b138      	cbz	r0, 800798c <_svfiprintf_r+0x150>
 800797c:	9b04      	ldr	r3, [sp, #16]
 800797e:	eba0 000a 	sub.w	r0, r0, sl
 8007982:	2240      	movs	r2, #64	@ 0x40
 8007984:	4082      	lsls	r2, r0
 8007986:	4313      	orrs	r3, r2
 8007988:	3401      	adds	r4, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007990:	4824      	ldr	r0, [pc, #144]	@ (8007a24 <_svfiprintf_r+0x1e8>)
 8007992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007996:	2206      	movs	r2, #6
 8007998:	f7f8 fc22 	bl	80001e0 <memchr>
 800799c:	2800      	cmp	r0, #0
 800799e:	d036      	beq.n	8007a0e <_svfiprintf_r+0x1d2>
 80079a0:	4b21      	ldr	r3, [pc, #132]	@ (8007a28 <_svfiprintf_r+0x1ec>)
 80079a2:	bb1b      	cbnz	r3, 80079ec <_svfiprintf_r+0x1b0>
 80079a4:	9b03      	ldr	r3, [sp, #12]
 80079a6:	3307      	adds	r3, #7
 80079a8:	f023 0307 	bic.w	r3, r3, #7
 80079ac:	3308      	adds	r3, #8
 80079ae:	9303      	str	r3, [sp, #12]
 80079b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b2:	4433      	add	r3, r6
 80079b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079b6:	e76a      	b.n	800788e <_svfiprintf_r+0x52>
 80079b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80079bc:	460c      	mov	r4, r1
 80079be:	2001      	movs	r0, #1
 80079c0:	e7a8      	b.n	8007914 <_svfiprintf_r+0xd8>
 80079c2:	2300      	movs	r3, #0
 80079c4:	3401      	adds	r4, #1
 80079c6:	9305      	str	r3, [sp, #20]
 80079c8:	4619      	mov	r1, r3
 80079ca:	f04f 0c0a 	mov.w	ip, #10
 80079ce:	4620      	mov	r0, r4
 80079d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079d4:	3a30      	subs	r2, #48	@ 0x30
 80079d6:	2a09      	cmp	r2, #9
 80079d8:	d903      	bls.n	80079e2 <_svfiprintf_r+0x1a6>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0c6      	beq.n	800796c <_svfiprintf_r+0x130>
 80079de:	9105      	str	r1, [sp, #20]
 80079e0:	e7c4      	b.n	800796c <_svfiprintf_r+0x130>
 80079e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079e6:	4604      	mov	r4, r0
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7f0      	b.n	80079ce <_svfiprintf_r+0x192>
 80079ec:	ab03      	add	r3, sp, #12
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	462a      	mov	r2, r5
 80079f2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <_svfiprintf_r+0x1f0>)
 80079f4:	a904      	add	r1, sp, #16
 80079f6:	4638      	mov	r0, r7
 80079f8:	f3af 8000 	nop.w
 80079fc:	1c42      	adds	r2, r0, #1
 80079fe:	4606      	mov	r6, r0
 8007a00:	d1d6      	bne.n	80079b0 <_svfiprintf_r+0x174>
 8007a02:	89ab      	ldrh	r3, [r5, #12]
 8007a04:	065b      	lsls	r3, r3, #25
 8007a06:	f53f af2d 	bmi.w	8007864 <_svfiprintf_r+0x28>
 8007a0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a0c:	e72c      	b.n	8007868 <_svfiprintf_r+0x2c>
 8007a0e:	ab03      	add	r3, sp, #12
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	462a      	mov	r2, r5
 8007a14:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <_svfiprintf_r+0x1f0>)
 8007a16:	a904      	add	r1, sp, #16
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f000 f879 	bl	8007b10 <_printf_i>
 8007a1e:	e7ed      	b.n	80079fc <_svfiprintf_r+0x1c0>
 8007a20:	08008a24 	.word	0x08008a24
 8007a24:	08008a2e 	.word	0x08008a2e
 8007a28:	00000000 	.word	0x00000000
 8007a2c:	08007785 	.word	0x08007785
 8007a30:	08008a2a 	.word	0x08008a2a

08007a34 <_printf_common>:
 8007a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	4616      	mov	r6, r2
 8007a3a:	4698      	mov	r8, r3
 8007a3c:	688a      	ldr	r2, [r1, #8]
 8007a3e:	690b      	ldr	r3, [r1, #16]
 8007a40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a44:	4293      	cmp	r3, r2
 8007a46:	bfb8      	it	lt
 8007a48:	4613      	movlt	r3, r2
 8007a4a:	6033      	str	r3, [r6, #0]
 8007a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a50:	4607      	mov	r7, r0
 8007a52:	460c      	mov	r4, r1
 8007a54:	b10a      	cbz	r2, 8007a5a <_printf_common+0x26>
 8007a56:	3301      	adds	r3, #1
 8007a58:	6033      	str	r3, [r6, #0]
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	0699      	lsls	r1, r3, #26
 8007a5e:	bf42      	ittt	mi
 8007a60:	6833      	ldrmi	r3, [r6, #0]
 8007a62:	3302      	addmi	r3, #2
 8007a64:	6033      	strmi	r3, [r6, #0]
 8007a66:	6825      	ldr	r5, [r4, #0]
 8007a68:	f015 0506 	ands.w	r5, r5, #6
 8007a6c:	d106      	bne.n	8007a7c <_printf_common+0x48>
 8007a6e:	f104 0a19 	add.w	sl, r4, #25
 8007a72:	68e3      	ldr	r3, [r4, #12]
 8007a74:	6832      	ldr	r2, [r6, #0]
 8007a76:	1a9b      	subs	r3, r3, r2
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	dc26      	bgt.n	8007aca <_printf_common+0x96>
 8007a7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a80:	6822      	ldr	r2, [r4, #0]
 8007a82:	3b00      	subs	r3, #0
 8007a84:	bf18      	it	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	0692      	lsls	r2, r2, #26
 8007a8a:	d42b      	bmi.n	8007ae4 <_printf_common+0xb0>
 8007a8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a90:	4641      	mov	r1, r8
 8007a92:	4638      	mov	r0, r7
 8007a94:	47c8      	blx	r9
 8007a96:	3001      	adds	r0, #1
 8007a98:	d01e      	beq.n	8007ad8 <_printf_common+0xa4>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	6922      	ldr	r2, [r4, #16]
 8007a9e:	f003 0306 	and.w	r3, r3, #6
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	bf02      	ittt	eq
 8007aa6:	68e5      	ldreq	r5, [r4, #12]
 8007aa8:	6833      	ldreq	r3, [r6, #0]
 8007aaa:	1aed      	subeq	r5, r5, r3
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	bf0c      	ite	eq
 8007ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ab4:	2500      	movne	r5, #0
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	bfc4      	itt	gt
 8007aba:	1a9b      	subgt	r3, r3, r2
 8007abc:	18ed      	addgt	r5, r5, r3
 8007abe:	2600      	movs	r6, #0
 8007ac0:	341a      	adds	r4, #26
 8007ac2:	42b5      	cmp	r5, r6
 8007ac4:	d11a      	bne.n	8007afc <_printf_common+0xc8>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e008      	b.n	8007adc <_printf_common+0xa8>
 8007aca:	2301      	movs	r3, #1
 8007acc:	4652      	mov	r2, sl
 8007ace:	4641      	mov	r1, r8
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	47c8      	blx	r9
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d103      	bne.n	8007ae0 <_printf_common+0xac>
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	e7c6      	b.n	8007a72 <_printf_common+0x3e>
 8007ae4:	18e1      	adds	r1, r4, r3
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	2030      	movs	r0, #48	@ 0x30
 8007aea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aee:	4422      	add	r2, r4
 8007af0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007af4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007af8:	3302      	adds	r3, #2
 8007afa:	e7c7      	b.n	8007a8c <_printf_common+0x58>
 8007afc:	2301      	movs	r3, #1
 8007afe:	4622      	mov	r2, r4
 8007b00:	4641      	mov	r1, r8
 8007b02:	4638      	mov	r0, r7
 8007b04:	47c8      	blx	r9
 8007b06:	3001      	adds	r0, #1
 8007b08:	d0e6      	beq.n	8007ad8 <_printf_common+0xa4>
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7d9      	b.n	8007ac2 <_printf_common+0x8e>
	...

08007b10 <_printf_i>:
 8007b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b14:	7e0f      	ldrb	r7, [r1, #24]
 8007b16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b18:	2f78      	cmp	r7, #120	@ 0x78
 8007b1a:	4691      	mov	r9, r2
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	469a      	mov	sl, r3
 8007b22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b26:	d807      	bhi.n	8007b38 <_printf_i+0x28>
 8007b28:	2f62      	cmp	r7, #98	@ 0x62
 8007b2a:	d80a      	bhi.n	8007b42 <_printf_i+0x32>
 8007b2c:	2f00      	cmp	r7, #0
 8007b2e:	f000 80d2 	beq.w	8007cd6 <_printf_i+0x1c6>
 8007b32:	2f58      	cmp	r7, #88	@ 0x58
 8007b34:	f000 80b9 	beq.w	8007caa <_printf_i+0x19a>
 8007b38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b40:	e03a      	b.n	8007bb8 <_printf_i+0xa8>
 8007b42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b46:	2b15      	cmp	r3, #21
 8007b48:	d8f6      	bhi.n	8007b38 <_printf_i+0x28>
 8007b4a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b50 <_printf_i+0x40>)
 8007b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b50:	08007ba9 	.word	0x08007ba9
 8007b54:	08007bbd 	.word	0x08007bbd
 8007b58:	08007b39 	.word	0x08007b39
 8007b5c:	08007b39 	.word	0x08007b39
 8007b60:	08007b39 	.word	0x08007b39
 8007b64:	08007b39 	.word	0x08007b39
 8007b68:	08007bbd 	.word	0x08007bbd
 8007b6c:	08007b39 	.word	0x08007b39
 8007b70:	08007b39 	.word	0x08007b39
 8007b74:	08007b39 	.word	0x08007b39
 8007b78:	08007b39 	.word	0x08007b39
 8007b7c:	08007cbd 	.word	0x08007cbd
 8007b80:	08007be7 	.word	0x08007be7
 8007b84:	08007c77 	.word	0x08007c77
 8007b88:	08007b39 	.word	0x08007b39
 8007b8c:	08007b39 	.word	0x08007b39
 8007b90:	08007cdf 	.word	0x08007cdf
 8007b94:	08007b39 	.word	0x08007b39
 8007b98:	08007be7 	.word	0x08007be7
 8007b9c:	08007b39 	.word	0x08007b39
 8007ba0:	08007b39 	.word	0x08007b39
 8007ba4:	08007c7f 	.word	0x08007c7f
 8007ba8:	6833      	ldr	r3, [r6, #0]
 8007baa:	1d1a      	adds	r2, r3, #4
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6032      	str	r2, [r6, #0]
 8007bb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e09d      	b.n	8007cf8 <_printf_i+0x1e8>
 8007bbc:	6833      	ldr	r3, [r6, #0]
 8007bbe:	6820      	ldr	r0, [r4, #0]
 8007bc0:	1d19      	adds	r1, r3, #4
 8007bc2:	6031      	str	r1, [r6, #0]
 8007bc4:	0606      	lsls	r6, r0, #24
 8007bc6:	d501      	bpl.n	8007bcc <_printf_i+0xbc>
 8007bc8:	681d      	ldr	r5, [r3, #0]
 8007bca:	e003      	b.n	8007bd4 <_printf_i+0xc4>
 8007bcc:	0645      	lsls	r5, r0, #25
 8007bce:	d5fb      	bpl.n	8007bc8 <_printf_i+0xb8>
 8007bd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bd4:	2d00      	cmp	r5, #0
 8007bd6:	da03      	bge.n	8007be0 <_printf_i+0xd0>
 8007bd8:	232d      	movs	r3, #45	@ 0x2d
 8007bda:	426d      	negs	r5, r5
 8007bdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007be0:	4859      	ldr	r0, [pc, #356]	@ (8007d48 <_printf_i+0x238>)
 8007be2:	230a      	movs	r3, #10
 8007be4:	e011      	b.n	8007c0a <_printf_i+0xfa>
 8007be6:	6821      	ldr	r1, [r4, #0]
 8007be8:	6833      	ldr	r3, [r6, #0]
 8007bea:	0608      	lsls	r0, r1, #24
 8007bec:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bf0:	d402      	bmi.n	8007bf8 <_printf_i+0xe8>
 8007bf2:	0649      	lsls	r1, r1, #25
 8007bf4:	bf48      	it	mi
 8007bf6:	b2ad      	uxthmi	r5, r5
 8007bf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bfa:	4853      	ldr	r0, [pc, #332]	@ (8007d48 <_printf_i+0x238>)
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	bf14      	ite	ne
 8007c00:	230a      	movne	r3, #10
 8007c02:	2308      	moveq	r3, #8
 8007c04:	2100      	movs	r1, #0
 8007c06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c0a:	6866      	ldr	r6, [r4, #4]
 8007c0c:	60a6      	str	r6, [r4, #8]
 8007c0e:	2e00      	cmp	r6, #0
 8007c10:	bfa2      	ittt	ge
 8007c12:	6821      	ldrge	r1, [r4, #0]
 8007c14:	f021 0104 	bicge.w	r1, r1, #4
 8007c18:	6021      	strge	r1, [r4, #0]
 8007c1a:	b90d      	cbnz	r5, 8007c20 <_printf_i+0x110>
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	d04b      	beq.n	8007cb8 <_printf_i+0x1a8>
 8007c20:	4616      	mov	r6, r2
 8007c22:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c26:	fb03 5711 	mls	r7, r3, r1, r5
 8007c2a:	5dc7      	ldrb	r7, [r0, r7]
 8007c2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c30:	462f      	mov	r7, r5
 8007c32:	42bb      	cmp	r3, r7
 8007c34:	460d      	mov	r5, r1
 8007c36:	d9f4      	bls.n	8007c22 <_printf_i+0x112>
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d10b      	bne.n	8007c54 <_printf_i+0x144>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	07df      	lsls	r7, r3, #31
 8007c40:	d508      	bpl.n	8007c54 <_printf_i+0x144>
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	6861      	ldr	r1, [r4, #4]
 8007c46:	4299      	cmp	r1, r3
 8007c48:	bfde      	ittt	le
 8007c4a:	2330      	movle	r3, #48	@ 0x30
 8007c4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c50:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007c54:	1b92      	subs	r2, r2, r6
 8007c56:	6122      	str	r2, [r4, #16]
 8007c58:	f8cd a000 	str.w	sl, [sp]
 8007c5c:	464b      	mov	r3, r9
 8007c5e:	aa03      	add	r2, sp, #12
 8007c60:	4621      	mov	r1, r4
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff fee6 	bl	8007a34 <_printf_common>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d14a      	bne.n	8007d02 <_printf_i+0x1f2>
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c70:	b004      	add	sp, #16
 8007c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	f043 0320 	orr.w	r3, r3, #32
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	4833      	ldr	r0, [pc, #204]	@ (8007d4c <_printf_i+0x23c>)
 8007c80:	2778      	movs	r7, #120	@ 0x78
 8007c82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c86:	6823      	ldr	r3, [r4, #0]
 8007c88:	6831      	ldr	r1, [r6, #0]
 8007c8a:	061f      	lsls	r7, r3, #24
 8007c8c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c90:	d402      	bmi.n	8007c98 <_printf_i+0x188>
 8007c92:	065f      	lsls	r7, r3, #25
 8007c94:	bf48      	it	mi
 8007c96:	b2ad      	uxthmi	r5, r5
 8007c98:	6031      	str	r1, [r6, #0]
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	bf44      	itt	mi
 8007c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007ca2:	6023      	strmi	r3, [r4, #0]
 8007ca4:	b11d      	cbz	r5, 8007cae <_printf_i+0x19e>
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	e7ac      	b.n	8007c04 <_printf_i+0xf4>
 8007caa:	4827      	ldr	r0, [pc, #156]	@ (8007d48 <_printf_i+0x238>)
 8007cac:	e7e9      	b.n	8007c82 <_printf_i+0x172>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f023 0320 	bic.w	r3, r3, #32
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	e7f6      	b.n	8007ca6 <_printf_i+0x196>
 8007cb8:	4616      	mov	r6, r2
 8007cba:	e7bd      	b.n	8007c38 <_printf_i+0x128>
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	6825      	ldr	r5, [r4, #0]
 8007cc0:	6961      	ldr	r1, [r4, #20]
 8007cc2:	1d18      	adds	r0, r3, #4
 8007cc4:	6030      	str	r0, [r6, #0]
 8007cc6:	062e      	lsls	r6, r5, #24
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	d501      	bpl.n	8007cd0 <_printf_i+0x1c0>
 8007ccc:	6019      	str	r1, [r3, #0]
 8007cce:	e002      	b.n	8007cd6 <_printf_i+0x1c6>
 8007cd0:	0668      	lsls	r0, r5, #25
 8007cd2:	d5fb      	bpl.n	8007ccc <_printf_i+0x1bc>
 8007cd4:	8019      	strh	r1, [r3, #0]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	6123      	str	r3, [r4, #16]
 8007cda:	4616      	mov	r6, r2
 8007cdc:	e7bc      	b.n	8007c58 <_printf_i+0x148>
 8007cde:	6833      	ldr	r3, [r6, #0]
 8007ce0:	1d1a      	adds	r2, r3, #4
 8007ce2:	6032      	str	r2, [r6, #0]
 8007ce4:	681e      	ldr	r6, [r3, #0]
 8007ce6:	6862      	ldr	r2, [r4, #4]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4630      	mov	r0, r6
 8007cec:	f7f8 fa78 	bl	80001e0 <memchr>
 8007cf0:	b108      	cbz	r0, 8007cf6 <_printf_i+0x1e6>
 8007cf2:	1b80      	subs	r0, r0, r6
 8007cf4:	6060      	str	r0, [r4, #4]
 8007cf6:	6863      	ldr	r3, [r4, #4]
 8007cf8:	6123      	str	r3, [r4, #16]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d00:	e7aa      	b.n	8007c58 <_printf_i+0x148>
 8007d02:	6923      	ldr	r3, [r4, #16]
 8007d04:	4632      	mov	r2, r6
 8007d06:	4649      	mov	r1, r9
 8007d08:	4640      	mov	r0, r8
 8007d0a:	47d0      	blx	sl
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d0ad      	beq.n	8007c6c <_printf_i+0x15c>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	079b      	lsls	r3, r3, #30
 8007d14:	d413      	bmi.n	8007d3e <_printf_i+0x22e>
 8007d16:	68e0      	ldr	r0, [r4, #12]
 8007d18:	9b03      	ldr	r3, [sp, #12]
 8007d1a:	4298      	cmp	r0, r3
 8007d1c:	bfb8      	it	lt
 8007d1e:	4618      	movlt	r0, r3
 8007d20:	e7a6      	b.n	8007c70 <_printf_i+0x160>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4632      	mov	r2, r6
 8007d26:	4649      	mov	r1, r9
 8007d28:	4640      	mov	r0, r8
 8007d2a:	47d0      	blx	sl
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d09d      	beq.n	8007c6c <_printf_i+0x15c>
 8007d30:	3501      	adds	r5, #1
 8007d32:	68e3      	ldr	r3, [r4, #12]
 8007d34:	9903      	ldr	r1, [sp, #12]
 8007d36:	1a5b      	subs	r3, r3, r1
 8007d38:	42ab      	cmp	r3, r5
 8007d3a:	dcf2      	bgt.n	8007d22 <_printf_i+0x212>
 8007d3c:	e7eb      	b.n	8007d16 <_printf_i+0x206>
 8007d3e:	2500      	movs	r5, #0
 8007d40:	f104 0619 	add.w	r6, r4, #25
 8007d44:	e7f5      	b.n	8007d32 <_printf_i+0x222>
 8007d46:	bf00      	nop
 8007d48:	08008a35 	.word	0x08008a35
 8007d4c:	08008a46 	.word	0x08008a46

08007d50 <__sflush_r>:
 8007d50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d58:	0716      	lsls	r6, r2, #28
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	d454      	bmi.n	8007e0a <__sflush_r+0xba>
 8007d60:	684b      	ldr	r3, [r1, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dc02      	bgt.n	8007d6c <__sflush_r+0x1c>
 8007d66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dd48      	ble.n	8007dfe <__sflush_r+0xae>
 8007d6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d6e:	2e00      	cmp	r6, #0
 8007d70:	d045      	beq.n	8007dfe <__sflush_r+0xae>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d78:	682f      	ldr	r7, [r5, #0]
 8007d7a:	6a21      	ldr	r1, [r4, #32]
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	d030      	beq.n	8007de2 <__sflush_r+0x92>
 8007d80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	0759      	lsls	r1, r3, #29
 8007d86:	d505      	bpl.n	8007d94 <__sflush_r+0x44>
 8007d88:	6863      	ldr	r3, [r4, #4]
 8007d8a:	1ad2      	subs	r2, r2, r3
 8007d8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d8e:	b10b      	cbz	r3, 8007d94 <__sflush_r+0x44>
 8007d90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d98:	6a21      	ldr	r1, [r4, #32]
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b0      	blx	r6
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	d106      	bne.n	8007db2 <__sflush_r+0x62>
 8007da4:	6829      	ldr	r1, [r5, #0]
 8007da6:	291d      	cmp	r1, #29
 8007da8:	d82b      	bhi.n	8007e02 <__sflush_r+0xb2>
 8007daa:	4a2a      	ldr	r2, [pc, #168]	@ (8007e54 <__sflush_r+0x104>)
 8007dac:	410a      	asrs	r2, r1
 8007dae:	07d6      	lsls	r6, r2, #31
 8007db0:	d427      	bmi.n	8007e02 <__sflush_r+0xb2>
 8007db2:	2200      	movs	r2, #0
 8007db4:	6062      	str	r2, [r4, #4]
 8007db6:	04d9      	lsls	r1, r3, #19
 8007db8:	6922      	ldr	r2, [r4, #16]
 8007dba:	6022      	str	r2, [r4, #0]
 8007dbc:	d504      	bpl.n	8007dc8 <__sflush_r+0x78>
 8007dbe:	1c42      	adds	r2, r0, #1
 8007dc0:	d101      	bne.n	8007dc6 <__sflush_r+0x76>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b903      	cbnz	r3, 8007dc8 <__sflush_r+0x78>
 8007dc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dca:	602f      	str	r7, [r5, #0]
 8007dcc:	b1b9      	cbz	r1, 8007dfe <__sflush_r+0xae>
 8007dce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	d002      	beq.n	8007ddc <__sflush_r+0x8c>
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f7ff fc8a 	bl	80076f0 <_free_r>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	6363      	str	r3, [r4, #52]	@ 0x34
 8007de0:	e00d      	b.n	8007dfe <__sflush_r+0xae>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b0      	blx	r6
 8007de8:	4602      	mov	r2, r0
 8007dea:	1c50      	adds	r0, r2, #1
 8007dec:	d1c9      	bne.n	8007d82 <__sflush_r+0x32>
 8007dee:	682b      	ldr	r3, [r5, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0c6      	beq.n	8007d82 <__sflush_r+0x32>
 8007df4:	2b1d      	cmp	r3, #29
 8007df6:	d001      	beq.n	8007dfc <__sflush_r+0xac>
 8007df8:	2b16      	cmp	r3, #22
 8007dfa:	d11e      	bne.n	8007e3a <__sflush_r+0xea>
 8007dfc:	602f      	str	r7, [r5, #0]
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e022      	b.n	8007e48 <__sflush_r+0xf8>
 8007e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e06:	b21b      	sxth	r3, r3
 8007e08:	e01b      	b.n	8007e42 <__sflush_r+0xf2>
 8007e0a:	690f      	ldr	r7, [r1, #16]
 8007e0c:	2f00      	cmp	r7, #0
 8007e0e:	d0f6      	beq.n	8007dfe <__sflush_r+0xae>
 8007e10:	0793      	lsls	r3, r2, #30
 8007e12:	680e      	ldr	r6, [r1, #0]
 8007e14:	bf08      	it	eq
 8007e16:	694b      	ldreq	r3, [r1, #20]
 8007e18:	600f      	str	r7, [r1, #0]
 8007e1a:	bf18      	it	ne
 8007e1c:	2300      	movne	r3, #0
 8007e1e:	eba6 0807 	sub.w	r8, r6, r7
 8007e22:	608b      	str	r3, [r1, #8]
 8007e24:	f1b8 0f00 	cmp.w	r8, #0
 8007e28:	dde9      	ble.n	8007dfe <__sflush_r+0xae>
 8007e2a:	6a21      	ldr	r1, [r4, #32]
 8007e2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e2e:	4643      	mov	r3, r8
 8007e30:	463a      	mov	r2, r7
 8007e32:	4628      	mov	r0, r5
 8007e34:	47b0      	blx	r6
 8007e36:	2800      	cmp	r0, #0
 8007e38:	dc08      	bgt.n	8007e4c <__sflush_r+0xfc>
 8007e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	4407      	add	r7, r0
 8007e4e:	eba8 0800 	sub.w	r8, r8, r0
 8007e52:	e7e7      	b.n	8007e24 <__sflush_r+0xd4>
 8007e54:	dfbffffe 	.word	0xdfbffffe

08007e58 <_fflush_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	b913      	cbnz	r3, 8007e68 <_fflush_r+0x10>
 8007e62:	2500      	movs	r5, #0
 8007e64:	4628      	mov	r0, r5
 8007e66:	bd38      	pop	{r3, r4, r5, pc}
 8007e68:	b118      	cbz	r0, 8007e72 <_fflush_r+0x1a>
 8007e6a:	6a03      	ldr	r3, [r0, #32]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <_fflush_r+0x1a>
 8007e6e:	f7ff fb57 	bl	8007520 <__sinit>
 8007e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0f3      	beq.n	8007e62 <_fflush_r+0xa>
 8007e7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e7c:	07d0      	lsls	r0, r2, #31
 8007e7e:	d404      	bmi.n	8007e8a <_fflush_r+0x32>
 8007e80:	0599      	lsls	r1, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_fflush_r+0x32>
 8007e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e86:	f7ff fc22 	bl	80076ce <__retarget_lock_acquire_recursive>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	f7ff ff5f 	bl	8007d50 <__sflush_r>
 8007e92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e94:	07da      	lsls	r2, r3, #31
 8007e96:	4605      	mov	r5, r0
 8007e98:	d4e4      	bmi.n	8007e64 <_fflush_r+0xc>
 8007e9a:	89a3      	ldrh	r3, [r4, #12]
 8007e9c:	059b      	lsls	r3, r3, #22
 8007e9e:	d4e1      	bmi.n	8007e64 <_fflush_r+0xc>
 8007ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ea2:	f7ff fc15 	bl	80076d0 <__retarget_lock_release_recursive>
 8007ea6:	e7dd      	b.n	8007e64 <_fflush_r+0xc>

08007ea8 <__sread>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	f000 f9c0 	bl	8008234 <_read_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	bfab      	itete	ge
 8007eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007eba:	89a3      	ldrhlt	r3, [r4, #12]
 8007ebc:	181b      	addge	r3, r3, r0
 8007ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ec2:	bfac      	ite	ge
 8007ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ec6:	81a3      	strhlt	r3, [r4, #12]
 8007ec8:	bd10      	pop	{r4, pc}

08007eca <__swrite>:
 8007eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	461f      	mov	r7, r3
 8007ed0:	898b      	ldrh	r3, [r1, #12]
 8007ed2:	05db      	lsls	r3, r3, #23
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	4616      	mov	r6, r2
 8007eda:	d505      	bpl.n	8007ee8 <__swrite+0x1e>
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f000 f994 	bl	8008210 <_lseek_r>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	4628      	mov	r0, r5
 8007efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	f000 b9ab 	b.w	8008258 <_write_r>

08007f02 <__sseek>:
 8007f02:	b510      	push	{r4, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0a:	f000 f981 	bl	8008210 <_lseek_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	bf15      	itete	ne
 8007f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f1e:	81a3      	strheq	r3, [r4, #12]
 8007f20:	bf18      	it	ne
 8007f22:	81a3      	strhne	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__sclose>:
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 b93f 	b.w	80081ac <_close_r>

08007f2e <_realloc_r>:
 8007f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	4680      	mov	r8, r0
 8007f34:	4615      	mov	r5, r2
 8007f36:	460c      	mov	r4, r1
 8007f38:	b921      	cbnz	r1, 8007f44 <_realloc_r+0x16>
 8007f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	4611      	mov	r1, r2
 8007f40:	f7ff b9b6 	b.w	80072b0 <_malloc_r>
 8007f44:	b92a      	cbnz	r2, 8007f52 <_realloc_r+0x24>
 8007f46:	f7ff fbd3 	bl	80076f0 <_free_r>
 8007f4a:	2400      	movs	r4, #0
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f52:	f000 f993 	bl	800827c <_malloc_usable_size_r>
 8007f56:	4285      	cmp	r5, r0
 8007f58:	4606      	mov	r6, r0
 8007f5a:	d802      	bhi.n	8007f62 <_realloc_r+0x34>
 8007f5c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f60:	d8f4      	bhi.n	8007f4c <_realloc_r+0x1e>
 8007f62:	4629      	mov	r1, r5
 8007f64:	4640      	mov	r0, r8
 8007f66:	f7ff f9a3 	bl	80072b0 <_malloc_r>
 8007f6a:	4607      	mov	r7, r0
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0ec      	beq.n	8007f4a <_realloc_r+0x1c>
 8007f70:	42b5      	cmp	r5, r6
 8007f72:	462a      	mov	r2, r5
 8007f74:	4621      	mov	r1, r4
 8007f76:	bf28      	it	cs
 8007f78:	4632      	movcs	r2, r6
 8007f7a:	f7ff fbaa 	bl	80076d2 <memcpy>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4640      	mov	r0, r8
 8007f82:	f7ff fbb5 	bl	80076f0 <_free_r>
 8007f86:	463c      	mov	r4, r7
 8007f88:	e7e0      	b.n	8007f4c <_realloc_r+0x1e>

08007f8a <__swbuf_r>:
 8007f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8c:	460e      	mov	r6, r1
 8007f8e:	4614      	mov	r4, r2
 8007f90:	4605      	mov	r5, r0
 8007f92:	b118      	cbz	r0, 8007f9c <__swbuf_r+0x12>
 8007f94:	6a03      	ldr	r3, [r0, #32]
 8007f96:	b90b      	cbnz	r3, 8007f9c <__swbuf_r+0x12>
 8007f98:	f7ff fac2 	bl	8007520 <__sinit>
 8007f9c:	69a3      	ldr	r3, [r4, #24]
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	071a      	lsls	r2, r3, #28
 8007fa4:	d501      	bpl.n	8007faa <__swbuf_r+0x20>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	b943      	cbnz	r3, 8007fbc <__swbuf_r+0x32>
 8007faa:	4621      	mov	r1, r4
 8007fac:	4628      	mov	r0, r5
 8007fae:	f000 f82b 	bl	8008008 <__swsetup_r>
 8007fb2:	b118      	cbz	r0, 8007fbc <__swbuf_r+0x32>
 8007fb4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007fb8:	4638      	mov	r0, r7
 8007fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	6922      	ldr	r2, [r4, #16]
 8007fc0:	1a98      	subs	r0, r3, r2
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	b2f6      	uxtb	r6, r6
 8007fc6:	4283      	cmp	r3, r0
 8007fc8:	4637      	mov	r7, r6
 8007fca:	dc05      	bgt.n	8007fd8 <__swbuf_r+0x4e>
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7ff ff42 	bl	8007e58 <_fflush_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d1ed      	bne.n	8007fb4 <__swbuf_r+0x2a>
 8007fd8:	68a3      	ldr	r3, [r4, #8]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	60a3      	str	r3, [r4, #8]
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	6022      	str	r2, [r4, #0]
 8007fe4:	701e      	strb	r6, [r3, #0]
 8007fe6:	6962      	ldr	r2, [r4, #20]
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d004      	beq.n	8007ff8 <__swbuf_r+0x6e>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	07db      	lsls	r3, r3, #31
 8007ff2:	d5e1      	bpl.n	8007fb8 <__swbuf_r+0x2e>
 8007ff4:	2e0a      	cmp	r6, #10
 8007ff6:	d1df      	bne.n	8007fb8 <__swbuf_r+0x2e>
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	f7ff ff2c 	bl	8007e58 <_fflush_r>
 8008000:	2800      	cmp	r0, #0
 8008002:	d0d9      	beq.n	8007fb8 <__swbuf_r+0x2e>
 8008004:	e7d6      	b.n	8007fb4 <__swbuf_r+0x2a>
	...

08008008 <__swsetup_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4b29      	ldr	r3, [pc, #164]	@ (80080b0 <__swsetup_r+0xa8>)
 800800c:	4605      	mov	r5, r0
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	460c      	mov	r4, r1
 8008012:	b118      	cbz	r0, 800801c <__swsetup_r+0x14>
 8008014:	6a03      	ldr	r3, [r0, #32]
 8008016:	b90b      	cbnz	r3, 800801c <__swsetup_r+0x14>
 8008018:	f7ff fa82 	bl	8007520 <__sinit>
 800801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008020:	0719      	lsls	r1, r3, #28
 8008022:	d422      	bmi.n	800806a <__swsetup_r+0x62>
 8008024:	06da      	lsls	r2, r3, #27
 8008026:	d407      	bmi.n	8008038 <__swsetup_r+0x30>
 8008028:	2209      	movs	r2, #9
 800802a:	602a      	str	r2, [r5, #0]
 800802c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008036:	e033      	b.n	80080a0 <__swsetup_r+0x98>
 8008038:	0758      	lsls	r0, r3, #29
 800803a:	d512      	bpl.n	8008062 <__swsetup_r+0x5a>
 800803c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800803e:	b141      	cbz	r1, 8008052 <__swsetup_r+0x4a>
 8008040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008044:	4299      	cmp	r1, r3
 8008046:	d002      	beq.n	800804e <__swsetup_r+0x46>
 8008048:	4628      	mov	r0, r5
 800804a:	f7ff fb51 	bl	80076f0 <_free_r>
 800804e:	2300      	movs	r3, #0
 8008050:	6363      	str	r3, [r4, #52]	@ 0x34
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	2300      	movs	r3, #0
 800805c:	6063      	str	r3, [r4, #4]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f043 0308 	orr.w	r3, r3, #8
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	6923      	ldr	r3, [r4, #16]
 800806c:	b94b      	cbnz	r3, 8008082 <__swsetup_r+0x7a>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008078:	d003      	beq.n	8008082 <__swsetup_r+0x7a>
 800807a:	4621      	mov	r1, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f83f 	bl	8008100 <__smakebuf_r>
 8008082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008086:	f013 0201 	ands.w	r2, r3, #1
 800808a:	d00a      	beq.n	80080a2 <__swsetup_r+0x9a>
 800808c:	2200      	movs	r2, #0
 800808e:	60a2      	str	r2, [r4, #8]
 8008090:	6962      	ldr	r2, [r4, #20]
 8008092:	4252      	negs	r2, r2
 8008094:	61a2      	str	r2, [r4, #24]
 8008096:	6922      	ldr	r2, [r4, #16]
 8008098:	b942      	cbnz	r2, 80080ac <__swsetup_r+0xa4>
 800809a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800809e:	d1c5      	bne.n	800802c <__swsetup_r+0x24>
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	0799      	lsls	r1, r3, #30
 80080a4:	bf58      	it	pl
 80080a6:	6962      	ldrpl	r2, [r4, #20]
 80080a8:	60a2      	str	r2, [r4, #8]
 80080aa:	e7f4      	b.n	8008096 <__swsetup_r+0x8e>
 80080ac:	2000      	movs	r0, #0
 80080ae:	e7f7      	b.n	80080a0 <__swsetup_r+0x98>
 80080b0:	20000018 	.word	0x20000018

080080b4 <__swhatbuf_r>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080bc:	2900      	cmp	r1, #0
 80080be:	b096      	sub	sp, #88	@ 0x58
 80080c0:	4615      	mov	r5, r2
 80080c2:	461e      	mov	r6, r3
 80080c4:	da0d      	bge.n	80080e2 <__swhatbuf_r+0x2e>
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080cc:	f04f 0100 	mov.w	r1, #0
 80080d0:	bf14      	ite	ne
 80080d2:	2340      	movne	r3, #64	@ 0x40
 80080d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080d8:	2000      	movs	r0, #0
 80080da:	6031      	str	r1, [r6, #0]
 80080dc:	602b      	str	r3, [r5, #0]
 80080de:	b016      	add	sp, #88	@ 0x58
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	466a      	mov	r2, sp
 80080e4:	f000 f872 	bl	80081cc <_fstat_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	dbec      	blt.n	80080c6 <__swhatbuf_r+0x12>
 80080ec:	9901      	ldr	r1, [sp, #4]
 80080ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080f6:	4259      	negs	r1, r3
 80080f8:	4159      	adcs	r1, r3
 80080fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080fe:	e7eb      	b.n	80080d8 <__swhatbuf_r+0x24>

08008100 <__smakebuf_r>:
 8008100:	898b      	ldrh	r3, [r1, #12]
 8008102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008104:	079d      	lsls	r5, r3, #30
 8008106:	4606      	mov	r6, r0
 8008108:	460c      	mov	r4, r1
 800810a:	d507      	bpl.n	800811c <__smakebuf_r+0x1c>
 800810c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	6123      	str	r3, [r4, #16]
 8008114:	2301      	movs	r3, #1
 8008116:	6163      	str	r3, [r4, #20]
 8008118:	b003      	add	sp, #12
 800811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800811c:	ab01      	add	r3, sp, #4
 800811e:	466a      	mov	r2, sp
 8008120:	f7ff ffc8 	bl	80080b4 <__swhatbuf_r>
 8008124:	9f00      	ldr	r7, [sp, #0]
 8008126:	4605      	mov	r5, r0
 8008128:	4639      	mov	r1, r7
 800812a:	4630      	mov	r0, r6
 800812c:	f7ff f8c0 	bl	80072b0 <_malloc_r>
 8008130:	b948      	cbnz	r0, 8008146 <__smakebuf_r+0x46>
 8008132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008136:	059a      	lsls	r2, r3, #22
 8008138:	d4ee      	bmi.n	8008118 <__smakebuf_r+0x18>
 800813a:	f023 0303 	bic.w	r3, r3, #3
 800813e:	f043 0302 	orr.w	r3, r3, #2
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	e7e2      	b.n	800810c <__smakebuf_r+0xc>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	6020      	str	r0, [r4, #0]
 800814a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800814e:	81a3      	strh	r3, [r4, #12]
 8008150:	9b01      	ldr	r3, [sp, #4]
 8008152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008156:	b15b      	cbz	r3, 8008170 <__smakebuf_r+0x70>
 8008158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800815c:	4630      	mov	r0, r6
 800815e:	f000 f847 	bl	80081f0 <_isatty_r>
 8008162:	b128      	cbz	r0, 8008170 <__smakebuf_r+0x70>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	f043 0301 	orr.w	r3, r3, #1
 800816e:	81a3      	strh	r3, [r4, #12]
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	431d      	orrs	r5, r3
 8008174:	81a5      	strh	r5, [r4, #12]
 8008176:	e7cf      	b.n	8008118 <__smakebuf_r+0x18>

08008178 <memmove>:
 8008178:	4288      	cmp	r0, r1
 800817a:	b510      	push	{r4, lr}
 800817c:	eb01 0402 	add.w	r4, r1, r2
 8008180:	d902      	bls.n	8008188 <memmove+0x10>
 8008182:	4284      	cmp	r4, r0
 8008184:	4623      	mov	r3, r4
 8008186:	d807      	bhi.n	8008198 <memmove+0x20>
 8008188:	1e43      	subs	r3, r0, #1
 800818a:	42a1      	cmp	r1, r4
 800818c:	d008      	beq.n	80081a0 <memmove+0x28>
 800818e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008196:	e7f8      	b.n	800818a <memmove+0x12>
 8008198:	4402      	add	r2, r0
 800819a:	4601      	mov	r1, r0
 800819c:	428a      	cmp	r2, r1
 800819e:	d100      	bne.n	80081a2 <memmove+0x2a>
 80081a0:	bd10      	pop	{r4, pc}
 80081a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081aa:	e7f7      	b.n	800819c <memmove+0x24>

080081ac <_close_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d06      	ldr	r5, [pc, #24]	@ (80081c8 <_close_r+0x1c>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	602b      	str	r3, [r5, #0]
 80081b8:	f7f9 fa5b 	bl	8001672 <_close>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_close_r+0x1a>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_close_r+0x1a>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000754 	.word	0x20000754

080081cc <_fstat_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	@ (80081ec <_fstat_r+0x20>)
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	602b      	str	r3, [r5, #0]
 80081da:	f7f9 fa56 	bl	800168a <_fstat>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d102      	bne.n	80081e8 <_fstat_r+0x1c>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	b103      	cbz	r3, 80081e8 <_fstat_r+0x1c>
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	bd38      	pop	{r3, r4, r5, pc}
 80081ea:	bf00      	nop
 80081ec:	20000754 	.word	0x20000754

080081f0 <_isatty_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d06      	ldr	r5, [pc, #24]	@ (800820c <_isatty_r+0x1c>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7f9 fa55 	bl	80016aa <_isatty>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_isatty_r+0x1a>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_isatty_r+0x1a>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	20000754 	.word	0x20000754

08008210 <_lseek_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4d07      	ldr	r5, [pc, #28]	@ (8008230 <_lseek_r+0x20>)
 8008214:	4604      	mov	r4, r0
 8008216:	4608      	mov	r0, r1
 8008218:	4611      	mov	r1, r2
 800821a:	2200      	movs	r2, #0
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	f7f9 fa4e 	bl	80016c0 <_lseek>
 8008224:	1c43      	adds	r3, r0, #1
 8008226:	d102      	bne.n	800822e <_lseek_r+0x1e>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	b103      	cbz	r3, 800822e <_lseek_r+0x1e>
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	bd38      	pop	{r3, r4, r5, pc}
 8008230:	20000754 	.word	0x20000754

08008234 <_read_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4d07      	ldr	r5, [pc, #28]	@ (8008254 <_read_r+0x20>)
 8008238:	4604      	mov	r4, r0
 800823a:	4608      	mov	r0, r1
 800823c:	4611      	mov	r1, r2
 800823e:	2200      	movs	r2, #0
 8008240:	602a      	str	r2, [r5, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	f7f9 f9dc 	bl	8001600 <_read>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_read_r+0x1e>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_read_r+0x1e>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	20000754 	.word	0x20000754

08008258 <_write_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d07      	ldr	r5, [pc, #28]	@ (8008278 <_write_r+0x20>)
 800825c:	4604      	mov	r4, r0
 800825e:	4608      	mov	r0, r1
 8008260:	4611      	mov	r1, r2
 8008262:	2200      	movs	r2, #0
 8008264:	602a      	str	r2, [r5, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	f7f9 f9e7 	bl	800163a <_write>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_write_r+0x1e>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	b103      	cbz	r3, 8008276 <_write_r+0x1e>
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	20000754 	.word	0x20000754

0800827c <_malloc_usable_size_r>:
 800827c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008280:	1f18      	subs	r0, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	bfbc      	itt	lt
 8008286:	580b      	ldrlt	r3, [r1, r0]
 8008288:	18c0      	addlt	r0, r0, r3
 800828a:	4770      	bx	lr

0800828c <_init>:
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828e:	bf00      	nop
 8008290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008292:	bc08      	pop	{r3}
 8008294:	469e      	mov	lr, r3
 8008296:	4770      	bx	lr

08008298 <_fini>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	bf00      	nop
 800829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829e:	bc08      	pop	{r3}
 80082a0:	469e      	mov	lr, r3
 80082a2:	4770      	bx	lr
