
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800dca0  0800dca0  0000eca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e170  0800e170  000105b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e170  0800e170  0000f170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e178  0800e178  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e178  0800e178  0000f178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e17c  0800e17c  0000f17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005b8  20000000  0800e180  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d98  200005b8  0800e738  000105b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001350  0800e738  00011350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3d3  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ff0  00000000  00000000  0002e9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a18  00000000  00000000  000339b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001407  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf83  00000000  00000000  000367cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023992  00000000  00000000  00052752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c471  00000000  00000000  000760e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112555  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000726c  00000000  00000000  00112598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00119804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005b8 	.word	0x200005b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc88 	.word	0x0800dc88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005bc 	.word	0x200005bc
 80001dc:	0800dc88 	.word	0x0800dc88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 800057a:	481f      	ldr	r0, [pc, #124]	@ (80005f8 <etx_ota_download_and_flash+0x88>)
 800057c:	f00c fdb0 	bl	800d0e0 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <etx_ota_download_and_flash+0x8c>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <etx_ota_download_and_flash+0x90>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <etx_ota_download_and_flash+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <etx_ota_download_and_flash+0x98>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000598:	f240 4209 	movw	r2, #1033	@ 0x409
 800059c:	2100      	movs	r1, #0
 800059e:	481b      	ldr	r0, [pc, #108]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005a0:	f00c fdb6 	bl	800d110 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 80005a4:	f240 4109 	movw	r1, #1033	@ 0x409
 80005a8:	4818      	ldr	r0, [pc, #96]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005aa:	f000 f905 	bl	80007b8 <etx_receive_chunk>
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005b8:	88bb      	ldrh	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4813      	ldr	r0, [pc, #76]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005be:	f000 f829 	bl	8000614 <etx_process_data>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e001      	b.n	80005cc <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 80005d2:	480f      	ldr	r0, [pc, #60]	@ (8000610 <etx_ota_download_and_flash+0xa0>)
 80005d4:	f00c fd84 	bl	800d0e0 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f9a9 	bl	8000930 <etx_ota_send_resp>
      break;
 80005de:	e006      	b.n	80005ee <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f9a5 	bl	8000930 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <etx_ota_download_and_flash+0x98>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1d4      	bne.n	8000598 <etx_ota_download_and_flash+0x28>

  return ret;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800dca0 	.word	0x0800dca0
 80005fc:	200009e0 	.word	0x200009e0
 8000600:	200009e8 	.word	0x200009e8
 8000604:	200009e4 	.word	0x200009e4
 8000608:	200009dd 	.word	0x200009dd
 800060c:	200005d4 	.word	0x200005d4
 8000610:	0800dcc0 	.word	0x0800dcc0

08000614 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000620:	2301      	movs	r3, #1
 8000622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f000 80ad 	beq.w	8000788 <etx_process_data+0x174>
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80a9 	beq.w	8000788 <etx_process_data+0x174>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	2b02      	cmp	r3, #2
 8000648:	f000 8095 	beq.w	8000776 <etx_process_data+0x162>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 800064c:	4b51      	ldr	r3, [pc, #324]	@ (8000794 <etx_process_data+0x180>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b04      	cmp	r3, #4
 8000652:	f200 808c 	bhi.w	800076e <etx_process_data+0x15a>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <etx_process_data+0x48>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	08000671 	.word	0x08000671
 8000660:	0800067f 	.word	0x0800067f
 8000664:	080006a7 	.word	0x080006a7
 8000668:	080006dd 	.word	0x080006dd
 800066c:	08000747 	.word	0x08000747
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <etx_process_data+0x184>)
 8000672:	f00c fd35 	bl	800d0e0 <puts>
        ret = ETX_OTA_EX_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800067c:	e084      	b.n	8000788 <etx_process_data+0x174>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d177      	bne.n	800077a <etx_process_data+0x166>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d173      	bne.n	800077a <etx_process_data+0x166>
          {
            printf("Received OTA START Command\r\n");
 8000692:	4842      	ldr	r0, [pc, #264]	@ (800079c <etx_process_data+0x188>)
 8000694:	f00c fd24 	bl	800d0e0 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000698:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <etx_process_data+0x180>)
 800069a:	2202      	movs	r2, #2
 800069c:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 80006a4:	e069      	b.n	800077a <etx_process_data+0x166>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d165      	bne.n	800077e <etx_process_data+0x16a>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4a3a      	ldr	r2, [pc, #232]	@ (80007a0 <etx_process_data+0x18c>)
 80006b8:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	4a39      	ldr	r2, [pc, #228]	@ (80007a4 <etx_process_data+0x190>)
 80006c0:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 80006c2:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <etx_process_data+0x18c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4837      	ldr	r0, [pc, #220]	@ (80007a8 <etx_process_data+0x194>)
 80006ca:	f00c fca1 	bl	800d010 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 80006ce:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <etx_process_data+0x180>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 80006da:	e050      	b.n	800077e <etx_process_data+0x16a>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	789a      	ldrb	r2, [r3, #2]
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4313      	orrs	r3, r2
 80006ea:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d146      	bne.n	8000782 <etx_process_data+0x16e>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1d18      	adds	r0, r3, #4
 80006f8:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <etx_process_data+0x198>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2da      	uxtb	r2, r3
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	4619      	mov	r1, r3
 800070a:	f000 f937 	bl	800097c <write_data_to_flash_app>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000712:	7d7b      	ldrb	r3, [r7, #21]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d134      	bne.n	8000782 <etx_process_data+0x16e>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <etx_process_data+0x198>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	0a99      	lsrs	r1, r3, #10
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <etx_process_data+0x18c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0a9b      	lsrs	r3, r3, #10
 8000724:	461a      	mov	r2, r3
 8000726:	4822      	ldr	r0, [pc, #136]	@ (80007b0 <etx_process_data+0x19c>)
 8000728:	f00c fc72 	bl	800d010 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <etx_process_data+0x198>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <etx_process_data+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d302      	bcc.n	800073e <etx_process_data+0x12a>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <etx_process_data+0x180>)
 800073a:	2204      	movs	r2, #4
 800073c:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8000744:	e01d      	b.n	8000782 <etx_process_data+0x16e>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d119      	bne.n	8000786 <etx_process_data+0x172>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d115      	bne.n	8000786 <etx_process_data+0x172>
          {
            printf("Received OTA END Command\r\n");
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <etx_process_data+0x1a0>)
 800075c:	f00c fcc0 	bl	800d0e0 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <etx_process_data+0x180>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 800076c:	e00b      	b.n	8000786 <etx_process_data+0x172>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000774:	e008      	b.n	8000788 <etx_process_data+0x174>
        break;
 8000776:	bf00      	nop
 8000778:	e006      	b.n	8000788 <etx_process_data+0x174>
      break;
 800077a:	bf00      	nop
 800077c:	e004      	b.n	8000788 <etx_process_data+0x174>
      break;
 800077e:	bf00      	nop
 8000780:	e002      	b.n	8000788 <etx_process_data+0x174>
      break;
 8000782:	bf00      	nop
 8000784:	e000      	b.n	8000788 <etx_process_data+0x174>
      break;
 8000786:	bf00      	nop
    };
  }while( false );

  return ret;
 8000788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800078c:	4618      	mov	r0, r3
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200009dd 	.word	0x200009dd
 8000798:	0800dcd0 	.word	0x0800dcd0
 800079c:	0800dce8 	.word	0x0800dce8
 80007a0:	200009e0 	.word	0x200009e0
 80007a4:	200009e4 	.word	0x200009e4
 80007a8:	0800dd04 	.word	0x0800dd04
 80007ac:	200009e8 	.word	0x200009e8
 80007b0:	0800dd2c 	.word	0x0800dd2c
 80007b4:	0800dd38 	.word	0x0800dd38

080007b8 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 80007c4:	2300      	movs	r3, #0
 80007c6:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	18d1      	adds	r1, r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	2201      	movs	r2, #1
 80007d4:	4854      	ldr	r0, [pc, #336]	@ (8000928 <etx_receive_chunk+0x170>)
 80007d6:	f00b fab4 	bl	800bd42 <HAL_UART_Receive>
 80007da:	4603      	mov	r3, r0
 80007dc:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80007de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d17f      	bne.n	80008e6 <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	81ba      	strh	r2, [r7, #12]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2baa      	cmp	r3, #170	@ 0xaa
 80007f6:	d002      	beq.n	80007fe <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	81fb      	strh	r3, [r7, #14]
      break;
 80007fc:	e07c      	b.n	80008f8 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	81ba      	strh	r2, [r7, #12]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1899      	adds	r1, r3, r2
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080e:	2201      	movs	r2, #1
 8000810:	4845      	ldr	r0, [pc, #276]	@ (8000928 <etx_receive_chunk+0x170>)
 8000812:	f00b fa96 	bl	800bd42 <HAL_UART_Receive>
 8000816:	4603      	mov	r3, r0
 8000818:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800081a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d163      	bne.n	80008ea <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000822:	89bb      	ldrh	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	18d1      	adds	r1, r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082c:	2202      	movs	r2, #2
 800082e:	483e      	ldr	r0, [pc, #248]	@ (8000928 <etx_receive_chunk+0x170>)
 8000830:	f00b fa87 	bl	800bd42 <HAL_UART_Receive>
 8000834:	4603      	mov	r3, r0
 8000836:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d156      	bne.n	80008ee <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	813b      	strh	r3, [r7, #8]
    index += 2u;
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	3302      	adds	r3, #2
 800084e:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000850:	2300      	movs	r3, #0
 8000852:	817b      	strh	r3, [r7, #10]
 8000854:	e014      	b.n	8000880 <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	81ba      	strh	r2, [r7, #12]
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1899      	adds	r1, r3, r2
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	2201      	movs	r2, #1
 8000868:	482f      	ldr	r0, [pc, #188]	@ (8000928 <etx_receive_chunk+0x170>)
 800086a:	f00b fa6a 	bl	800bd42 <HAL_UART_Receive>
 800086e:	4603      	mov	r3, r0
 8000870:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 8000872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d107      	bne.n	800088a <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 800087a:	897b      	ldrh	r3, [r7, #10]
 800087c:	3301      	adds	r3, #1
 800087e:	817b      	strh	r3, [r7, #10]
 8000880:	897a      	ldrh	r2, [r7, #10]
 8000882:	893b      	ldrh	r3, [r7, #8]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3e6      	bcc.n	8000856 <etx_receive_chunk+0x9e>
 8000888:	e000      	b.n	800088c <etx_receive_chunk+0xd4>
      {
        break;
 800088a:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	18d1      	adds	r1, r2, r3
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2204      	movs	r2, #4
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <etx_receive_chunk+0x170>)
 800089a:	f00b fa52 	bl	800bd42 <HAL_UART_Receive>
 800089e:	4603      	mov	r3, r0
 80008a0:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d123      	bne.n	80008f2 <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80008b0:	89bb      	ldrh	r3, [r7, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	18d1      	adds	r1, r2, r3
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ba:	2201      	movs	r2, #1
 80008bc:	481a      	ldr	r0, [pc, #104]	@ (8000928 <etx_receive_chunk+0x170>)
 80008be:	f00b fa40 	bl	800bd42 <HAL_UART_Receive>
 80008c2:	4603      	mov	r3, r0
 80008c4:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d113      	bne.n	80008f6 <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 80008ce:	89bb      	ldrh	r3, [r7, #12]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	81ba      	strh	r2, [r7, #12]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2bbb      	cmp	r3, #187	@ 0xbb
 80008de:	d00b      	beq.n	80008f8 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	81fb      	strh	r3, [r7, #14]
      break;
 80008e4:	e008      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008e6:	bf00      	nop
 80008e8:	e006      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008ea:	bf00      	nop
 80008ec:	e004      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008ee:	bf00      	nop
 80008f0:	e002      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008f6:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 80008f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 8000900:	2300      	movs	r3, #0
 8000902:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800090c:	887b      	ldrh	r3, [r7, #2]
 800090e:	89ba      	ldrh	r2, [r7, #12]
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <etx_receive_chunk+0x174>)
 8000914:	f00c fb7c 	bl	800d010 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000918:	2300      	movs	r3, #0
 800091a:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 800091c:	89bb      	ldrh	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000a8c 	.word	0x20000a8c
 800092c:	0800dd54 	.word	0x0800dd54

08000930 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 800093a:	23aa      	movs	r3, #170	@ 0xaa
 800093c:	733b      	strb	r3, [r7, #12]
 800093e:	2303      	movs	r3, #3
 8000940:	737b      	strb	r3, [r7, #13]
 8000942:	2301      	movs	r3, #1
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	743b      	strb	r3, [r7, #16]
 800094a:	2300      	movs	r3, #0
 800094c:	747b      	strb	r3, [r7, #17]
 800094e:	2300      	movs	r3, #0
 8000950:	74bb      	strb	r3, [r7, #18]
 8000952:	2300      	movs	r3, #0
 8000954:	74fb      	strb	r3, [r7, #19]
 8000956:	2300      	movs	r3, #0
 8000958:	753b      	strb	r3, [r7, #20]
 800095a:	23bb      	movs	r3, #187	@ 0xbb
 800095c:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 800095e:	f107 010c 	add.w	r1, r7, #12
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	220a      	movs	r2, #10
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <etx_ota_send_resp+0x48>)
 800096a:	f00b f95f 	bl	800bc2c <HAL_UART_Transmit>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000a8c 	.word	0x20000a8c

0800097c <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 800098c:	f006 fcea 	bl	8007364 <HAL_FLASH_Unlock>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800099a:	2b00      	cmp	r3, #0
 800099c:	d157      	bne.n	8000a4e <write_data_to_flash_app+0xd2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 800099e:	787b      	ldrb	r3, [r7, #1]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d019      	beq.n	80009d8 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 80009a4:	482f      	ldr	r0, [pc, #188]	@ (8000a64 <write_data_to_flash_app+0xe8>)
 80009a6:	f00c fb9b 	bl	800d0e0 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80009ae:	2305      	movs	r3, #5
 80009b0:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80009ba:	f107 0208 	add.w	r2, r7, #8
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f006 fe3f 	bl	8007648 <HAL_FLASHEx_Erase>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80009d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13c      	bne.n	8000a52 <write_data_to_flash_app+0xd6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	e026      	b.n	8000a2c <write_data_to_flash_app+0xb0>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <write_data_to_flash_app+0xec>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 80009e6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[i]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	461c      	mov	r4, r3
 80009f8:	4615      	mov	r5, r2
 80009fa:	4622      	mov	r2, r4
 80009fc:	462b      	mov	r3, r5
 80009fe:	2000      	movs	r0, #0
 8000a00:	f006 fc5e 	bl	80072c0 <HAL_FLASH_Program>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                             );
      if( ret == HAL_OK )
 8000a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <write_data_to_flash_app+0xa2>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <write_data_to_flash_app+0xec>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <write_data_to_flash_app+0xec>)
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e003      	b.n	8000a26 <write_data_to_flash_app+0xaa>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a1e:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <write_data_to_flash_app+0xf0>)
 8000a20:	f00c fb5e 	bl	800d0e0 <puts>
        break;
 8000a24:	e006      	b.n	8000a34 <write_data_to_flash_app+0xb8>
    for(int i = 0; i < data_len; i++ )
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
 8000a2c:	887b      	ldrh	r3, [r7, #2]
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbd4      	blt.n	80009de <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10c      	bne.n	8000a56 <write_data_to_flash_app+0xda>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a3c:	f006 fcb4 	bl	80073a8 <HAL_FLASH_Lock>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	e004      	b.n	8000a58 <write_data_to_flash_app+0xdc>
      break;
 8000a4e:	bf00      	nop
 8000a50:	e002      	b.n	8000a58 <write_data_to_flash_app+0xdc>
        break;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <write_data_to_flash_app+0xdc>
      break;
 8000a56:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	0800dd98 	.word	0x0800dd98
 8000a68:	200009e8 	.word	0x200009e8
 8000a6c:	0800ddb8 	.word	0x0800ddb8

08000a70 <optiga_util_callback>:
/**
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static volatile optiga_lib_status_t optiga_lib_status;
// lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void *context, optiga_lib_status_t return_status) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <optiga_util_callback+0x20>)
 8000a7e:	887b      	ldrh	r3, [r7, #2]
 8000a80:	8013      	strh	r3, [r2, #0]
    if (NULL != context) {
        // callback to upper layer here
    }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200009ec 	.word	0x200009ec

08000a94 <example_optiga_util_read_data>:
    if (length % 16 != 0) printf("\n");
}


void example_optiga_util_read_data(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000a9a:	af02      	add	r7, sp, #8
    optiga_util_t *me = NULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    optiga_lib_status_t return_status;
    uint16_t optiga_oid = 0xE0E8;  // Same OID used for trust anchor
 8000aa2:	f24e 03e8 	movw	r3, #57576	@ 0xe0e8
 8000aa6:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
    uint16_t offset = 0x00;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8a7 3404 	strh.w	r3, [r7, #1028]	@ 0x404
    uint16_t bytes_to_read = 1024;
 8000ab0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ab4:	f8a7 3400 	strh.w	r3, [r7, #1024]	@ 0x400
    uint8_t read_data_buffer[1024];

    printf("Creating OPTIGA Util instance...\r\n");
 8000ab8:	4841      	ldr	r0, [pc, #260]	@ (8000bc0 <example_optiga_util_read_data+0x12c>)
 8000aba:	f00c fb11 	bl	800d0e0 <puts>
    me = optiga_util_create(0, optiga_util_callback, NULL);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4940      	ldr	r1, [pc, #256]	@ (8000bc4 <example_optiga_util_read_data+0x130>)
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f005 fa7c 	bl	8005fc0 <optiga_util_create>
 8000ac8:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
    if (me == NULL)
 8000acc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d103      	bne.n	8000adc <example_optiga_util_read_data+0x48>
    {
        printf("Failed to create OPTIGA Util instance.\r\n");
 8000ad4:	483c      	ldr	r0, [pc, #240]	@ (8000bc8 <example_optiga_util_read_data+0x134>)
 8000ad6:	f00c fb03 	bl	800d0e0 <puts>
 8000ada:	e06d      	b.n	8000bb8 <example_optiga_util_read_data+0x124>
        return;
    }

    // Use unprotected communication (same as write)
    OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 8000ae4:	f005 fa4d 	bl	8005f82 <optiga_util_set_comms_params>

    // Read data
    optiga_lib_status = OPTIGA_LIB_BUSY;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	@ (8000bcc <example_optiga_util_read_data+0x138>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	801a      	strh	r2, [r3, #0]
    printf("Reading data from OID 0x%04X...\r\n", optiga_oid);
 8000aee:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000af2:	4619      	mov	r1, r3
 8000af4:	4836      	ldr	r0, [pc, #216]	@ (8000bd0 <example_optiga_util_read_data+0x13c>)
 8000af6:	f00c fa8b 	bl	800d010 <iprintf>
    return_status = optiga_util_read_data(
 8000afa:	4638      	mov	r0, r7
 8000afc:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	@ 0x404
 8000b00:	f8b7 1406 	ldrh.w	r1, [r7, #1030]	@ 0x406
 8000b04:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 8000b10:	f005 fb14 	bl	800613c <optiga_util_read_data>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f8a7 3402 	strh.w	r3, [r7, #1026]	@ 0x402
        offset,
        read_data_buffer,
        &bytes_to_read
    );

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8000b1a:	e001      	b.n	8000b20 <example_optiga_util_read_data+0x8c>
    {
        pal_os_event_trigger_registered_callback();
 8000b1c:	f005 fe6e 	bl	80067fc <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8000b20:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <example_optiga_util_read_data+0x138>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d0f8      	beq.n	8000b1c <example_optiga_util_read_data+0x88>
    }

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <example_optiga_util_read_data+0x138>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d007      	beq.n	8000b44 <example_optiga_util_read_data+0xb0>
    {
        printf("Data read failed: 0x%04X\r\n", optiga_lib_status);
 8000b34:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <example_optiga_util_read_data+0x138>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4825      	ldr	r0, [pc, #148]	@ (8000bd4 <example_optiga_util_read_data+0x140>)
 8000b3e:	f00c fa67 	bl	800d010 <iprintf>
 8000b42:	e031      	b.n	8000ba8 <example_optiga_util_read_data+0x114>
    }
    else
    {
        printf("Data read successful. Bytes read: %d\r\n", bytes_to_read);
 8000b44:	f8b7 3400 	ldrh.w	r3, [r7, #1024]	@ 0x400
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4823      	ldr	r0, [pc, #140]	@ (8000bd8 <example_optiga_util_read_data+0x144>)
 8000b4c:	f00c fa60 	bl	800d010 <iprintf>
        printf("Data (hex):\r\n");
 8000b50:	4822      	ldr	r0, [pc, #136]	@ (8000bdc <example_optiga_util_read_data+0x148>)
 8000b52:	f00c fac5 	bl	800d0e0 <puts>
        for (int i = 0; i < bytes_to_read; ++i)
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000b5c:	e01a      	b.n	8000b94 <example_optiga_util_read_data+0x100>
        {
            printf("%02X ", read_data_buffer[i]);
 8000b5e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000b62:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8000b66:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481b      	ldr	r0, [pc, #108]	@ (8000be0 <example_optiga_util_read_data+0x14c>)
 8000b72:	f00c fa4d 	bl	800d010 <iprintf>
            if ((i + 1) % 16 == 0)
 8000b76:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <example_optiga_util_read_data+0xf6>
                printf("\r\n");
 8000b84:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <example_optiga_util_read_data+0x150>)
 8000b86:	f00c faab 	bl	800d0e0 <puts>
        for (int i = 0; i < bytes_to_read; ++i)
 8000b8a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000b8e:	3301      	adds	r3, #1
 8000b90:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000b94:	f8b7 3400 	ldrh.w	r3, [r7, #1024]	@ 0x400
 8000b98:	461a      	mov	r2, r3
 8000b9a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	dbdd      	blt.n	8000b5e <example_optiga_util_read_data+0xca>
        }
        printf("\r\n");
 8000ba2:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <example_optiga_util_read_data+0x150>)
 8000ba4:	f00c fa9c 	bl	800d0e0 <puts>
    }

    // Clean up
    if (me)
 8000ba8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <example_optiga_util_read_data+0x124>
    {
        optiga_util_destroy(me);
 8000bb0:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 8000bb4:	f005 fa46 	bl	8006044 <optiga_util_destroy>
    }
}
 8000bb8:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	0800ddd4 	.word	0x0800ddd4
 8000bc4:	08000a71 	.word	0x08000a71
 8000bc8:	0800ddf8 	.word	0x0800ddf8
 8000bcc:	200009ec 	.word	0x200009ec
 8000bd0:	0800de20 	.word	0x0800de20
 8000bd4:	0800de44 	.word	0x0800de44
 8000bd8:	0800de60 	.word	0x0800de60
 8000bdc:	0800de88 	.word	0x0800de88
 8000be0:	0800ddcc 	.word	0x0800ddcc
 8000be4:	0800de98 	.word	0x0800de98

08000be8 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000bf0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000bf4:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	d027      	beq.n	8000c50 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d818      	bhi.n	8000c4e <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	22b1      	movs	r2, #177	@ 0xb1
 8000c20:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f8f5 	bl	8000e24 <ifx_i2c_init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8000c3e:	89fb      	ldrh	r3, [r7, #14]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d105      	bne.n	8000c50 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2203      	movs	r2, #3
 8000c48:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8000c4c:	e000      	b.n	8000c50 <ifx_i2c_open+0x68>
                break;
 8000c4e:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000c50:	89fb      	ldrh	r3, [r7, #14]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af02      	add	r7, sp, #8
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c6a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c6e:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d122      	bne.n	8000cc0 <ifx_i2c_transceive+0x66>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d01d      	beq.n	8000cc0 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	6a3a      	ldr	r2, [r7, #32]
 8000c90:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f001 fb00 	bl	80022a4 <ifx_i2c_prl_transceive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000ca8:	8afb      	ldrh	r3, [r7, #22]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d108      	bne.n	8000cc0 <ifx_i2c_transceive+0x66>
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d103      	bne.n	8000cc0 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000cc0:	8afb      	ldrh	r3, [r7, #22]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000cd4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000cd8:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d02a      	beq.n	8000d3a <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000cee:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000cfa:	4912      	ldr	r1, [pc, #72]	@ (8000d44 <ifx_i2c_close+0x78>)
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f001 fa8f 	bl	8002220 <ifx_i2c_prl_close>
 8000d02:	4603      	mov	r3, r0
 8000d04:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000d0c:	d115      	bne.n	8000d3a <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 fb6c 	bl	80063f2 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000d20:	4618      	mov	r0, r3
 8000d22:	f005 fb06 	bl	8006332 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fb00 	bl	8006332 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2204      	movs	r2, #4
 8000d36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	08000db1 	.word	0x08000db1

08000d48 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	461a      	mov	r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	817b      	strh	r3, [r7, #10]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d008      	beq.n	8000d78 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000d72:	8979      	ldrh	r1, [r7, #10]
 8000d74:	4610      	mov	r0, r2
 8000d76:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	897a      	ldrh	r2, [r7, #10]
 8000d7c:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2204      	movs	r2, #4
 8000d84:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d107      	bne.n	8000da2 <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000d92:	897b      	ldrh	r3, [r7, #10]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000da0:	e001      	b.n	8000da6 <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8000da2:	bf00      	nop
 8000da4:	e000      	b.n	8000da8 <ifx_i2c_tl_event_handler+0x60>
            break;
 8000da6:	bf00      	nop
    }
}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	817b      	strh	r3, [r7, #10]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d112      	bne.n	8000dfc <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f005 fb08 	bl	80063f2 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 faa2 	bl	8006332 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fa9c 	bl	8006332 <pal_gpio_set_low>
            break;
 8000dfa:	e000      	b.n	8000dfe <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000dfc:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000e14:	8979      	ldrh	r1, [r7, #10]
 8000e16:	4610      	mov	r0, r2
 8000e18:	4798      	blx	r3
    }
}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8000e2c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000e30:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d004      	beq.n	8000e46 <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d156      	bne.n	8000ef4 <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000e4c:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e4e:	d048      	beq.n	8000ee2 <ifx_i2c_init+0xbe>
 8000e50:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e52:	dc4d      	bgt.n	8000ef0 <ifx_i2c_init+0xcc>
 8000e54:	2bb1      	cmp	r3, #177	@ 0xb1
 8000e56:	d002      	beq.n	8000e5e <ifx_i2c_init+0x3a>
 8000e58:	2bb2      	cmp	r3, #178	@ 0xb2
 8000e5a:	d021      	beq.n	8000ea0 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 8000e5c:	e048      	b.n	8000ef0 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d105      	bne.n	8000e74 <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 fa5f 	bl	8006332 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fa59 	bl	8006332 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	22b2      	movs	r2, #178	@ 0xb2
 8000e84:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4923      	ldr	r1, [pc, #140]	@ (8000f24 <ifx_i2c_init+0x100>)
 8000e96:	f005 fc85 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81fb      	strh	r3, [r7, #14]
                break;
 8000e9e:	e028      	b.n	8000ef2 <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d105      	bne.n	8000eb6 <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f005 fa2e 	bl	8006312 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 fa28 	bl	8006312 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	22b3      	movs	r2, #179	@ 0xb3
 8000ec6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000ed0:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	4913      	ldr	r1, [pc, #76]	@ (8000f24 <ifx_i2c_init+0x100>)
 8000ed8:	f005 fc64 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000edc:	2300      	movs	r3, #0
 8000ede:	81fb      	strh	r3, [r7, #14]
                break;
 8000ee0:	e007      	b.n	8000ef2 <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000ee2:	4911      	ldr	r1, [pc, #68]	@ (8000f28 <ifx_i2c_init+0x104>)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f953 	bl	8002190 <ifx_i2c_prl_init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	81fb      	strh	r3, [r7, #14]
                break;
 8000eee:	e000      	b.n	8000ef2 <ifx_i2c_init+0xce>
                break;
 8000ef0:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8000ef2:	e009      	b.n	8000f08 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000efc:	490a      	ldr	r1, [pc, #40]	@ (8000f28 <ifx_i2c_init+0x104>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f001 f946 	bl	8002190 <ifx_i2c_prl_init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000f0e:	89f9      	ldrh	r1, [r7, #14]
 8000f10:	2300      	movs	r3, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff17 	bl	8000d48 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08000e25 	.word	0x08000e25
 8000f28:	08000d49 	.word	0x08000d49

08000f2c <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000f3e:	4919      	ldr	r1, [pc, #100]	@ (8000fa4 <ifx_i2c_dl_init+0x78>)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fc37 	bl	80017b4 <ifx_i2c_pl_init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000f4c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000f50:	e024      	b.n	8000f9c <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08001349 	.word	0x08001349

08000fa8 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d102      	bne.n	8000fc4 <ifx_i2c_dl_send_frame+0x1c>
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000fc4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000fc8:	e01a      	b.n	8001000 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	220a      	movs	r2, #10
 8000fee:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000ff2:	8879      	ldrh	r1, [r7, #2]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f88a 	bl	8001112 <ifx_i2c_dl_send_frame_internal>
 8000ffe:	4603      	mov	r3, r0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001016:	2b01      	cmp	r3, #1
 8001018:	d002      	beq.n	8001020 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 800101a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800101e:	e019      	b.n	8001054 <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8001038:	f005 fc69 	bl	800690e <pal_os_timer_get_time_in_milliseconds>
 800103c:	4602      	mov	r2, r0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <ifx_i2c_dl_receive_frame+0x54>)
 8001048:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fc2a 	bl	80018a6 <ifx_i2c_pl_receive_frame>
 8001052:	4603      	mov	r3, r0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0002bf20 	.word	0x0002bf20

08001060 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	80fb      	strh	r3, [r7, #6]
 800106c:	4613      	mov	r3, r2
 800106e:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	b29a      	uxth	r2, r3
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	4053      	eors	r3, r2
 8001078:	b29b      	uxth	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 800107e:	89fb      	ldrh	r3, [r7, #14]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	b29a      	uxth	r2, r3
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	4053      	eors	r3, r2
 8001090:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8001092:	897b      	ldrh	r3, [r7, #10]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8001098:	897b      	ldrh	r3, [r7, #10]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	b29a      	uxth	r2, r3
 800109e:	893b      	ldrh	r3, [r7, #8]
 80010a0:	4053      	eors	r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	89bb      	ldrh	r3, [r7, #12]
 80010aa:	4053      	eors	r3, r2
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	893b      	ldrh	r3, [r7, #8]
 80010b4:	4053      	eors	r3, r2
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4053      	eors	r3, r2
 80010c0:	b29b      	uxth	r3, r3
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	e00d      	b.n	8001100 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 80010e4:	89fb      	ldrh	r3, [r7, #14]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	89bb      	ldrh	r3, [r7, #12]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffb5 	bl	8001060 <ifx_i2c_dl_calc_crc_byte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	81fb      	strh	r3, [r7, #14]
 8001100:	89fa      	ldrh	r2, [r7, #14]
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	429a      	cmp	r2, r3
 8001106:	d3ed      	bcc.n	80010e4 <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8001108:	89bb      	ldrh	r3, [r7, #12]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	4608      	mov	r0, r1
 800111c:	4611      	mov	r1, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4603      	mov	r3, r0
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	460b      	mov	r3, r1
 8001126:	707b      	strb	r3, [r7, #1]
 8001128:	4613      	mov	r3, r2
 800112a:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8001132:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8001150:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8001152:	787b      	ldrb	r3, [r7, #1]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d105      	bne.n	8001164 <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001162:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d108      	bne.n	800117c <ifx_i2c_dl_send_frame_internal+0x6a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001170:	2b09      	cmp	r3, #9
 8001172:	d103      	bne.n	800117c <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800117a:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	015b      	lsls	r3, r3, #5
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b2da      	uxtb	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d022      	beq.n	80011e2 <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 800119c:	783b      	ldrb	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <ifx_i2c_dl_send_frame_internal+0x9a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00a      	beq.n	80011c2 <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 80011e0:	e006      	b.n	80011f0 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 80011f0:	887b      	ldrh	r3, [r7, #2]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	3302      	adds	r3, #2
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	3303      	adds	r3, #3
 800120c:	b29b      	uxth	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	6938      	ldr	r0, [r7, #16]
 8001212:	f7ff ff5c 	bl	80010ce <ifx_i2c_dl_calc_crc>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b29a      	uxth	r2, r3
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	3303      	adds	r3, #3
 8001224:	4619      	mov	r1, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	440b      	add	r3, r1
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	3304      	adds	r3, #4
 8001232:	461a      	mov	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4413      	add	r3, r2
 8001238:	89fa      	ldrh	r2, [r7, #14]
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	3305      	adds	r3, #5
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	6939      	ldr	r1, [r7, #16]
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb03 	bl	8001854 <ifx_i2c_pl_send_frame>
 800124e:	4603      	mov	r3, r0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2203      	movs	r2, #3
 800126c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2205      	movs	r2, #5
 800127c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8001280:	2300      	movs	r3, #0
 8001282:	2202      	movs	r2, #2
 8001284:	2100      	movs	r1, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff43 	bl	8001112 <ifx_i2c_dl_send_frame_internal>
 800128c:	4603      	mov	r3, r0
 800128e:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8001290:	89fb      	ldrh	r3, [r7, #14]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 80012a8:	f005 fb31 	bl	800690e <pal_os_timer_get_time_in_milliseconds>
 80012ac:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d205      	bcs.n	80012d2 <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001344 <ifx_i2c_dl_resend_frame+0xa8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d82c      	bhi.n	8001334 <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d109      	bne.n	80012f8 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ffb3 	bl	8001258 <ifx_i2c_dl_resync>
 80012f2:	4603      	mov	r3, r0
 80012f4:	82fb      	strh	r3, [r7, #22]
 80012f6:	e015      	b.n	8001324 <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 8001316:	78fa      	ldrb	r2, [r7, #3]
 8001318:	2301      	movs	r3, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fef9 	bl	8001112 <ifx_i2c_dl_send_frame_internal>
 8001320:	4603      	mov	r3, r0
 8001322:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8001324:	8afb      	ldrh	r3, [r7, #22]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2206      	movs	r2, #6
 800132e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8001332:	e003      	b.n	800133c <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2208      	movs	r2, #8
 8001338:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0002bf1f 	.word	0x0002bf1f

08001348 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	461a      	mov	r2, r3
 8001354:	460b      	mov	r3, r1
 8001356:	817b      	strh	r3, [r7, #10]
 8001358:	4613      	mov	r3, r2
 800135a:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8001370:	2301      	movs	r3, #1
 8001372:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8001380:	897b      	ldrh	r3, [r7, #10]
 8001382:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001386:	d108      	bne.n	800139a <ifx_i2c_pl_event_handler+0x52>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800138e:	2b01      	cmp	r3, #1
 8001390:	d003      	beq.n	800139a <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2208      	movs	r2, #8
 8001396:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80013a0:	3b01      	subs	r3, #1
 80013a2:	2b0a      	cmp	r3, #10
 80013a4:	f200 81ed 	bhi.w	8001782 <ifx_i2c_pl_event_handler+0x43a>
 80013a8:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <ifx_i2c_pl_event_handler+0x68>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013dd 	.word	0x080013dd
 80013b4:	08001403 	.word	0x08001403
 80013b8:	08001445 	.word	0x08001445
 80013bc:	08001697 	.word	0x08001697
 80013c0:	08001719 	.word	0x08001719
 80013c4:	080016ff 	.word	0x080016ff
 80013c8:	08001783 	.word	0x08001783
 80013cc:	08001731 	.word	0x08001731
 80013d0:	08001683 	.word	0x08001683
 80013d4:	080014f1 	.word	0x080014f1
 80013d8:	080015c1 	.word	0x080015c1
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 80013dc:	897b      	ldrh	r3, [r7, #10]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <ifx_i2c_pl_event_handler+0x9e>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <ifx_i2c_pl_event_handler+0xa0>
 80013e6:	2302      	movs	r3, #2
 80013e8:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80013f4:	7cfb      	ldrb	r3, [r7, #19]
 80013f6:	b299      	uxth	r1, r3
 80013f8:	2300      	movs	r3, #0
 80013fa:	2200      	movs	r2, #0
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	47a0      	blx	r4
            }
            break;
 8001400:	e1cf      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001408:	d104      	bne.n	8001414 <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2205      	movs	r2, #5
 800140e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001412:	e1c6      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8001414:	f005 fa7b 	bl	800690e <pal_os_timer_get_time_in_milliseconds>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2203      	movs	r2, #3
 8001424:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fa3c 	bl	80018a6 <ifx_i2c_pl_receive_frame>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2206      	movs	r2, #6
 8001438:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 800143c:	e1b1      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 800143e:	2300      	movs	r3, #0
 8001440:	773b      	strb	r3, [r7, #28]
            break;
 8001442:	e1ae      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8001444:	897b      	ldrh	r3, [r7, #10]
 8001446:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800144a:	d104      	bne.n	8001456 <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2205      	movs	r2, #5
 8001450:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001454:	e1a5      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d804      	bhi.n	8001466 <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2206      	movs	r2, #6
 8001460:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001464:	e19d      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	09db      	lsrs	r3, r3, #7
 8001470:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8001472:	7d7b      	ldrb	r3, [r7, #21]
 8001474:	115b      	asrs	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 800147e:	7d7b      	ldrb	r3, [r7, #21]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8001486:	7d7b      	ldrb	r3, [r7, #21]
 8001488:	109b      	asrs	r3, r3, #2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3301      	adds	r3, #1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3302      	adds	r3, #2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 80014aa:	893b      	ldrh	r3, [r7, #8]
 80014ac:	3b02      	subs	r3, #2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	893b      	ldrh	r3, [r7, #8]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 80014ca:	893b      	ldrh	r3, [r7, #8]
 80014cc:	3b02      	subs	r3, #2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fdfb 	bl	80010ce <ifx_i2c_dl_calc_crc>
 80014d8:	4603      	mov	r3, r0
 80014da:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 80014dc:	7d3b      	ldrb	r3, [r7, #20]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <ifx_i2c_pl_event_handler+0x19e>
 80014e2:	220b      	movs	r2, #11
 80014e4:	e000      	b.n	80014e8 <ifx_i2c_pl_event_handler+0x1a0>
 80014e6:	220a      	movs	r2, #10
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 80014ee:	e158      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 80014f0:	8b3a      	ldrh	r2, [r7, #24]
 80014f2:	8afb      	ldrh	r3, [r7, #22]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10d      	bne.n	8001514 <ifx_i2c_pl_event_handler+0x1cc>
 80014f8:	8b7b      	ldrh	r3, [r7, #26]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00a      	beq.n	8001514 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 80014fe:	893a      	ldrh	r2, [r7, #8]
 8001500:	8b7b      	ldrh	r3, [r7, #26]
 8001502:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d105      	bne.n	8001514 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001508:	7f7b      	ldrb	r3, [r7, #29]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d002      	beq.n	8001514 <ifx_i2c_pl_event_handler+0x1cc>
 800150e:	7f7b      	ldrb	r3, [r7, #29]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d104      	bne.n	800151e <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2206      	movs	r2, #6
 8001518:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800151c:	e141      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 800151e:	7ffa      	ldrb	r2, [r7, #31]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8001526:	3301      	adds	r3, #1
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	429a      	cmp	r2, r3
 800152e:	d00c      	beq.n	800154a <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2209      	movs	r2, #9
 8001534:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8001538:	2300      	movs	r3, #0
 800153a:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff fde5 	bl	8001112 <ifx_i2c_dl_send_frame_internal>
                    break;
 8001548:	e12b      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001550:	7fba      	ldrb	r2, [r7, #30]
 8001552:	429a      	cmp	r2, r3
 8001554:	d004      	beq.n	8001560 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2209      	movs	r2, #9
 800155a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800155e:	e120      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001560:	7f7b      	ldrb	r3, [r7, #29]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d104      	bne.n	8001570 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2205      	movs	r2, #5
 800156a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800156e:	e118      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8001576:	3301      	adds	r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	b2da      	uxtb	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800158c:	893a      	ldrh	r2, [r7, #8]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f00b fe02 	bl	800d19a <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	893a      	ldrh	r2, [r7, #8]
 800159a:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2204      	movs	r2, #4
 80015aa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 80015b2:	2300      	movs	r3, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fdaa 	bl	8001112 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 80015be:	e0f0      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80015c6:	461a      	mov	r2, r3
 80015c8:	7f7b      	ldrb	r3, [r7, #29]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	bf0c      	ite	eq
 80015ce:	2301      	moveq	r3, #1
 80015d0:	2300      	movne	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d004      	beq.n	80015e2 <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2209      	movs	r2, #9
 80015dc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80015e0:	e0df      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 80015e2:	8b3a      	ldrh	r2, [r7, #24]
 80015e4:	8afb      	ldrh	r3, [r7, #22]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d004      	beq.n	80015f4 <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2205      	movs	r2, #5
 80015ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80015f2:	e0d6      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 80015f4:	893b      	ldrh	r3, [r7, #8]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d802      	bhi.n	8001600 <ifx_i2c_pl_event_handler+0x2b8>
 80015fa:	8b7b      	ldrh	r3, [r7, #26]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2209      	movs	r2, #9
 8001604:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001608:	e0cb      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 800160a:	7f7b      	ldrb	r3, [r7, #29]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d110      	bne.n	8001632 <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2209      	movs	r2, #9
 8001614:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2203      	movs	r2, #3
 8001624:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2203      	movs	r2, #3
 800162c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 8001630:	e0b7      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d108      	bne.n	800164a <ifx_i2c_pl_event_handler+0x302>
 8001638:	7f7b      	ldrb	r3, [r7, #29]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d005      	beq.n	800164a <ifx_i2c_pl_event_handler+0x302>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001644:	7fba      	ldrb	r2, [r7, #30]
 8001646:	429a      	cmp	r2, r3
 8001648:	d004      	beq.n	8001654 <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2209      	movs	r2, #9
 800164e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001652:	e0a6      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001654:	7f7b      	ldrb	r3, [r7, #29]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d104      	bne.n	8001664 <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2205      	movs	r2, #5
 800165e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001662:	e09e      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800166c:	2300      	movs	r3, #0
 800166e:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	2102      	movs	r1, #2
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	47a0      	blx	r4
            }
            break;
 8001680:	e08f      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2203      	movs	r2, #3
 8001686:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800168a:	2300      	movs	r3, #0
 800168c:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f909 	bl	80018a6 <ifx_i2c_pl_receive_frame>
            }
            break;
 8001694:	e085      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 8001696:	897b      	ldrh	r3, [r7, #10]
 8001698:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800169c:	d104      	bne.n	80016a8 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2205      	movs	r2, #5
 80016a2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80016a6:	e07c      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00f      	beq.n	80016de <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80016ca:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80016d2:	3b05      	subs	r3, #5
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	2104      	movs	r1, #4
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 80016dc:	e061      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80016ea:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80016f2:	3b05      	subs	r3, #5
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2106      	movs	r1, #6
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	47a0      	blx	r4
            break;
 80016fc:	e051      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2202      	movs	r2, #2
 8001702:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001706:	2300      	movs	r3, #0
 8001708:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 800170a:	2300      	movs	r3, #0
 800170c:	2201      	movs	r2, #1
 800170e:	2100      	movs	r1, #0
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f7ff fcfe 	bl	8001112 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001716:	e044      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8001718:	2100      	movs	r1, #0
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7ff fdbe 	bl	800129c <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001726:	2b08      	cmp	r3, #8
 8001728:	d03a      	beq.n	80017a0 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 800172a:	2300      	movs	r3, #0
 800172c:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 800172e:	e037      	b.n	80017a0 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10c      	bne.n	8001766 <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800175a:	2300      	movs	r3, #0
 800175c:	2200      	movs	r2, #0
 800175e:	2101      	movs	r1, #1
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	47a0      	blx	r4
 8001764:	e00a      	b.n	800177c <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff fd76 	bl	8001258 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2208      	movs	r2, #8
 8001770:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 800177c:	2300      	movs	r3, #0
 800177e:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001780:	e00f      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001790:	2300      	movs	r3, #0
 8001792:	2200      	movs	r2, #0
 8001794:	2101      	movs	r1, #1
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	47a0      	blx	r4
                continue_state_machine = FALSE;
 800179a:	2300      	movs	r3, #0
 800179c:	773b      	strb	r3, [r7, #28]
                break;
 800179e:	e000      	b.n	80017a2 <ifx_i2c_pl_event_handler+0x45a>
            break;
 80017a0:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 80017a2:	7f3b      	ldrb	r3, [r7, #28]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f43f adeb 	beq.w	8001380 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3724      	adds	r7, #36	@ 0x24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	22bb      	movs	r2, #187	@ 0xbb
 80017d2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 80017e2:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80017ea:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <ifx_i2c_pl_init+0x9c>)
 80017ec:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	22c8      	movs	r2, #200	@ 0xc8
 80017f2:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10b      	bne.n	8001818 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001806:	4618      	mov	r0, r3
 8001808:	f004 fde8 	bl	80063dc <pal_i2c_init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 8001812:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001816:	e016      	b.n	8001846 <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800181e:	2b01      	cmp	r3, #1
 8001820:	d108      	bne.n	8001834 <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2299      	movs	r2, #153	@ 0x99
 8001826:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2205      	movs	r2, #5
 800182e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001832:	e003      	b.n	800183c <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800183c:	2100      	movs	r1, #0
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fa84 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	08002035 	.word	0x08002035

08001854 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001868:	2b01      	cmp	r3, #1
 800186a:	d007      	beq.n	800187c <ifx_i2c_pl_send_frame+0x28>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001872:	2b02      	cmp	r3, #2
 8001874:	d002      	beq.n	800187c <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 8001876:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800187a:	e010      	b.n	800189e <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001894:	2100      	movs	r1, #0
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fa58 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d007      	beq.n	80018c8 <ifx_i2c_pl_receive_frame+0x22>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d002      	beq.n	80018c8 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 80018c2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018c6:	e008      	b.n	80018da <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2202      	movs	r2, #2
 80018cc:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80018d0:	2100      	movs	r1, #0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa3a 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
 80018ee:	4613      	mov	r3, r2
 80018f0:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	883a      	ldrh	r2, [r7, #0]
 8001906:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	22c8      	movs	r2, #200	@ 0xc8
 8001916:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001934:	461a      	mov	r2, r3
 8001936:	f004 fd67 	bl	8006408 <pal_i2c_write>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	72fb      	strb	r3, [r7, #11]
 8001950:	4613      	mov	r3, r2
 8001952:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	7afa      	ldrb	r2, [r7, #11]
 8001958:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001962:	3301      	adds	r3, #1
 8001964:	893a      	ldrh	r2, [r7, #8]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f00b fc16 	bl	800d19a <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 800196e:	893b      	ldrh	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	22c8      	movs	r2, #200	@ 0xc8
 8001986:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80019a4:	461a      	mov	r2, r3
 80019a6:	f004 fd2f 	bl	8006408 <pal_i2c_write>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 80019ba:	2204      	movs	r2, #4
 80019bc:	2182      	movs	r1, #130	@ 0x82
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff8f 	bl	80018e2 <ifx_i2c_pl_read_register>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 fd82 	bl	8006500 <pal_i2c_set_bitrate>
 80019fc:	4603      	mov	r3, r0
 80019fe:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d019      	beq.n	8001a44 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	b291      	uxth	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <ifx_i2c_pl_set_bit_rate+0x88>)
 8001a32:	f004 feb7 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 8001a36:	2301      	movs	r3, #1
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	e005      	b.n	8001a48 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 8001a3c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001a40:	81fb      	strh	r3, [r7, #14]
 8001a42:	e001      	b.n	8001a48 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 8001a44:	2300      	movs	r3, #0
 8001a46:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 8001a48:	89fb      	ldrh	r3, [r7, #14]

}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08001a59 	.word	0x08001a59

08001a58 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b08b      	sub	sp, #44	@ 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 8001a60:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001a64:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	733b      	strb	r3, [r7, #12]
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8001a96:	2bbb      	cmp	r3, #187	@ 0xbb
 8001a98:	d031      	beq.n	8001afe <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001a9a:	2bbb      	cmp	r3, #187	@ 0xbb
 8001a9c:	f300 8145 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001aa0:	2baa      	cmp	r3, #170	@ 0xaa
 8001aa2:	f000 812d 	beq.w	8001d00 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 8001aa6:	2baa      	cmp	r3, #170	@ 0xaa
 8001aa8:	f300 813f 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001aac:	2b88      	cmp	r3, #136	@ 0x88
 8001aae:	f000 8103 	beq.w	8001cb8 <ifx_i2c_pl_negotiation_event_handler+0x260>
 8001ab2:	2b88      	cmp	r3, #136	@ 0x88
 8001ab4:	f300 8139 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001ab8:	2b77      	cmp	r3, #119	@ 0x77
 8001aba:	f000 80c6 	beq.w	8001c4a <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001abe:	2b77      	cmp	r3, #119	@ 0x77
 8001ac0:	f300 8133 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001ac4:	2b66      	cmp	r3, #102	@ 0x66
 8001ac6:	f000 809d 	beq.w	8001c04 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001aca:	2b66      	cmp	r3, #102	@ 0x66
 8001acc:	f300 812d 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001ad0:	2b55      	cmp	r3, #85	@ 0x55
 8001ad2:	f000 808d 	beq.w	8001bf0 <ifx_i2c_pl_negotiation_event_handler+0x198>
 8001ad6:	2b55      	cmp	r3, #85	@ 0x55
 8001ad8:	f300 8127 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001adc:	2b44      	cmp	r3, #68	@ 0x44
 8001ade:	d040      	beq.n	8001b62 <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001ae0:	2b44      	cmp	r3, #68	@ 0x44
 8001ae2:	f300 8122 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001ae6:	2b33      	cmp	r3, #51	@ 0x33
 8001ae8:	d031      	beq.n	8001b4e <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001aea:	2b33      	cmp	r3, #51	@ 0x33
 8001aec:	f300 811d 	bgt.w	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	f000 80cb 	beq.w	8001c8c <ifx_i2c_pl_negotiation_event_handler+0x234>
 8001af6:	2b22      	cmp	r3, #34	@ 0x22
 8001af8:	f000 80d4 	beq.w	8001ca4 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001afc:	e115      	b.n	8001d2a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001afe:	2164      	movs	r1, #100	@ 0x64
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff63 	bl	80019cc <ifx_i2c_pl_set_bit_rate>
 8001b06:	4603      	mov	r3, r0
 8001b08:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001b0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2233      	movs	r2, #51	@ 0x33
 8001b14:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001b1e:	e106      	b.n	8001d2e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001b20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b22:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001b26:	f040 8102 	bne.w	8001d2e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	22aa      	movs	r2, #170	@ 0xaa
 8001b2e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001b40:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4980      	ldr	r1, [pc, #512]	@ (8001d48 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 8001b48:	f004 fe2c 	bl	80067a4 <pal_os_event_register_callback_oneshot>
            break;
 8001b4c:	e0ef      	b.n	8001d2e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2244      	movs	r2, #68	@ 0x44
 8001b52:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001b56:	2204      	movs	r2, #4
 8001b58:	2184      	movs	r1, #132	@ 0x84
 8001b5a:	69b8      	ldr	r0, [r7, #24]
 8001b5c:	f7ff fec1 	bl	80018e2 <ifx_i2c_pl_read_register>
            break;
 8001b60:	e0e8      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001b7a:	2380      	movs	r3, #128	@ 0x80
 8001b7c:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001b84:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b88:	d911      	bls.n	8001bae <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001b8a:	8abb      	ldrh	r3, [r7, #20]
 8001b8c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b90:	d80d      	bhi.n	8001bae <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001b92:	2304      	movs	r3, #4
 8001b94:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2255      	movs	r2, #85	@ 0x55
 8001b9a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	2189      	movs	r1, #137	@ 0x89
 8001ba6:	69b8      	ldr	r0, [r7, #24]
 8001ba8:	f7ff fecb 	bl	8001942 <ifx_i2c_pl_write_register>
 8001bac:	e01f      	b.n	8001bee <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001bb4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bb8:	d811      	bhi.n	8001bde <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001bba:	8abb      	ldrh	r3, [r7, #20]
 8001bbc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bc0:	d90d      	bls.n	8001bde <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2255      	movs	r2, #85	@ 0x55
 8001bca:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	2189      	movs	r1, #137	@ 0x89
 8001bd6:	69b8      	ldr	r0, [r7, #24]
 8001bd8:	f7ff feb3 	bl	8001942 <ifx_i2c_pl_write_register>
 8001bdc:	e007      	b.n	8001bee <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2266      	movs	r2, #102	@ 0x66
 8001be2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001bec:	e0a2      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001bee:	e0a1      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2266      	movs	r2, #102	@ 0x66
 8001bf4:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	2184      	movs	r1, #132	@ 0x84
 8001bfc:	69b8      	ldr	r0, [r7, #24]
 8001bfe:	f7ff fe70 	bl	80018e2 <ifx_i2c_pl_read_register>
            break;
 8001c02:	e097      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001c22:	8aba      	ldrh	r2, [r7, #20]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d208      	bcs.n	8001c3a <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	22aa      	movs	r2, #170	@ 0xaa
 8001c34:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001c38:	e003      	b.n	8001c42 <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2277      	movs	r2, #119	@ 0x77
 8001c3e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001c48:	e074      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff feba 	bl	80019cc <ifx_i2c_pl_set_bit_rate>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001c5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2211      	movs	r2, #17
 8001c66:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001c70:	e05f      	b.n	8001d32 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001c72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c74:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001c78:	d15b      	bne.n	8001d32 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	22aa      	movs	r2, #170	@ 0xaa
 8001c7e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001c8a:	e052      	b.n	8001d32 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2222      	movs	r2, #34	@ 0x22
 8001c90:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	2202      	movs	r2, #2
 8001c9a:	2181      	movs	r1, #129	@ 0x81
 8001c9c:	69b8      	ldr	r0, [r7, #24]
 8001c9e:	f7ff fe50 	bl	8001942 <ifx_i2c_pl_write_register>
            break;
 8001ca2:	e047      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2288      	movs	r2, #136	@ 0x88
 8001ca8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001cac:	2202      	movs	r2, #2
 8001cae:	2181      	movs	r1, #129	@ 0x81
 8001cb0:	69b8      	ldr	r0, [r7, #24]
 8001cb2:	f7ff fe16 	bl	80018e2 <ifx_i2c_pl_read_register>
            break;
 8001cb6:	e03d      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	22aa      	movs	r2, #170	@ 0xaa
 8001cbc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001cde:	8afa      	ldrh	r2, [r7, #22]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d805      	bhi.n	8001cf0 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	8afa      	ldrh	r2, [r7, #22]
 8001ce8:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001cec:	2300      	movs	r3, #0
 8001cee:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001cfe:	e019      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001d00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001d0e:	e003      	b.n	8001d18 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d20:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	69b8      	ldr	r0, [r7, #24]
 8001d26:	47a0      	blx	r4
            break;
 8001d28:	e004      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 8001d2a:	bf00      	nop
 8001d2c:	e002      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001d32:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001d34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f aea6 	bne.w	8001a8a <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	372c      	adds	r7, #44	@ 0x2c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	08001a59 	.word	0x08001a59

08001d4c <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d6c:	8879      	ldrh	r1, [r7, #2]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001d76:	e0f0      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	f200 80dc 	bhi.w	8001f3e <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001d86:	a201      	add	r2, pc, #4	@ (adr r2, 8001d8c <ifx_i2c_pl_frame_event_handler+0x40>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001da9 	.word	0x08001da9
 8001d90:	08001db1 	.word	0x08001db1
 8001d94:	08001dcf 	.word	0x08001dcf
 8001d98:	08001f1d 	.word	0x08001f1d
 8001d9c:	08001da1 	.word	0x08001da1
                ifx_i2c_pl_soft_reset(p_ctx);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f983 	bl	80020ac <ifx_i2c_pl_soft_reset>
            break;
 8001da6:	e0d8      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fe55 	bl	8001a58 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001dae:	e0d4      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d105      	bne.n	8001dce <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	2182      	movs	r1, #130	@ 0x82
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fd8b 	bl	80018e2 <ifx_i2c_pl_read_register>
                    break;
 8001dcc:	e0c5      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d159      	bne.n	8001e8c <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d052      	beq.n	8001e8c <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <ifx_i2c_pl_frame_event_handler+0xda>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001e0a:	8a7a      	ldrh	r2, [r7, #18]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d80a      	bhi.n	8001e26 <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2204      	movs	r2, #4
 8001e14:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001e18:	8a7b      	ldrh	r3, [r7, #18]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fd5f 	bl	80018e2 <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e24:	e079      	b.n	8001f1a <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001e26:	f004 fd72 	bl	800690e <pal_os_timer_get_time_in_milliseconds>
 8001e2a:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d205      	bcs.n	8001e50 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d209      	bcs.n	8001e70 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001e62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	493e      	ldr	r1, [pc, #248]	@ (8001f64 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001e6a:	f004 fc9b 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e6e:	e054      	b.n	8001f1a <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e8a:	e046      	b.n	8001f1a <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10e      	bne.n	8001eb4 <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001eaa:	2180      	movs	r1, #128	@ 0x80
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fd48 	bl	8001942 <ifx_i2c_pl_write_register>
            break;
 8001eb2:	e052      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001eb4:	f004 fd2b 	bl	800690e <pal_os_timer_get_time_in_milliseconds>
 8001eb8:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d205      	bcs.n	8001ede <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d209      	bcs.n	8001efe <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ef0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	491b      	ldr	r1, [pc, #108]	@ (8001f64 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001ef8:	f004 fc54 	bl	80067a4 <pal_os_event_register_callback_oneshot>
            break;
 8001efc:	e02d      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	47a0      	blx	r4
            break;
 8001f18:	e01f      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
 8001f1a:	e01e      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	47a0      	blx	r4
            break;
 8001f3c:	e00d      	b.n	8001f5a <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	47a0      	blx	r4
            break;
 8001f58:	bf00      	nop
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	080019b3 	.word	0x080019b3

08001f68 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10c      	bne.n	8001f98 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001f90:	461a      	mov	r2, r3
 8001f92:	f004 fa39 	bl	8006408 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8001f96:	e010      	b.n	8001fba <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d10b      	bne.n	8001fba <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f004 fa65 	bl	8006484 <pal_i2c_read>
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d11f      	bne.n	8002018 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d110      	bne.n	8002004 <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f004 fa41 	bl	8006484 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8002002:	e012      	b.n	800202a <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 800200a:	2b02      	cmp	r3, #2
 800200c:	d10d      	bne.n	800202a <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800200e:	2100      	movs	r1, #0
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fe9b 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
}
 8002016:	e008      	b.n	800202a <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800201e:	2b02      	cmp	r3, #2
 8002020:	d103      	bne.n	800202a <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8002022:	2100      	movs	r1, #0
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fe91 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
}
 800202a:	bf00      	nop
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	60fb      	str	r3, [r7, #12]
    switch (event)
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01e      	beq.n	8002088 <ifx_i2c_pl_pal_event_handler+0x54>
 800204a:	2b00      	cmp	r3, #0
 800204c:	db25      	blt.n	800209a <ifx_i2c_pl_pal_event_handler+0x66>
 800204e:	3b01      	subs	r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	d822      	bhi.n	800209a <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	b291      	uxth	r1, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 800206e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	490b      	ldr	r1, [pc, #44]	@ (80020a4 <ifx_i2c_pl_pal_event_handler+0x70>)
 8002076:	f004 fb95 	bl	80067a4 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 800207a:	e00f      	b.n	800209c <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 800207c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fe63 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
            break;
 8002086:	e009      	b.n	800209c <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 800208e:	2332      	movs	r3, #50	@ 0x32
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4905      	ldr	r1, [pc, #20]	@ (80020a8 <ifx_i2c_pl_pal_event_handler+0x74>)
 8002094:	f004 fb86 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8002098:	e000      	b.n	800209c <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 800209a:	bf00      	nop
    }
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	08001f69 	.word	0x08001f69
 80020a8:	08001fc3 	.word	0x08001fc3

080020ac <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 80020b4:	2300      	movs	r3, #0
 80020b6:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 80020be:	3b99      	subs	r3, #153	@ 0x99
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d85e      	bhi.n	8002182 <ifx_i2c_pl_soft_reset+0xd6>
 80020c4:	a201      	add	r2, pc, #4	@ (adr r2, 80020cc <ifx_i2c_pl_soft_reset+0x20>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020f9 	.word	0x080020f9
 80020d0:	08002183 	.word	0x08002183
 80020d4:	08002183 	.word	0x08002183
 80020d8:	08002183 	.word	0x08002183
 80020dc:	08002183 	.word	0x08002183
 80020e0:	08002183 	.word	0x08002183
 80020e4:	08002183 	.word	0x08002183
 80020e8:	08002183 	.word	0x08002183
 80020ec:	08002171 	.word	0x08002171
 80020f0:	0800210d 	.word	0x0800210d
 80020f4:	08002155 	.word	0x08002155
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	22a2      	movs	r2, #162	@ 0xa2
 80020fc:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8002100:	2204      	movs	r2, #4
 8002102:	2182      	movs	r1, #130	@ 0x82
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fbec 	bl	80018e2 <ifx_i2c_pl_read_register>
            break;
 800210a:	e03b      	b.n	8002184 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8002124:	2b08      	cmp	r3, #8
 8002126:	d10b      	bne.n	8002140 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	22a3      	movs	r2, #163	@ 0xa3
 800212c:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2202      	movs	r2, #2
 8002136:	2188      	movs	r1, #136	@ 0x88
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fc02 	bl	8001942 <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 800213e:	e021      	b.n	8002184 <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8002148:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fdfd 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
            break;
 8002152:	e017      	b.n	8002184 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	22a1      	movs	r2, #161	@ 0xa1
 8002158:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8002162:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4908      	ldr	r1, [pc, #32]	@ (800218c <ifx_i2c_pl_soft_reset+0xe0>)
 800216a:	f004 fb1b 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 800216e:	e009      	b.n	8002184 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8002178:	2100      	movs	r1, #0
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff fde6 	bl	8001d4c <ifx_i2c_pl_frame_event_handler>
            break;
 8002180:	e000      	b.n	8002184 <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8002182:	bf00      	nop
    }
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	080020ad 	.word	0x080020ad

08002190 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800219a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800219e:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 80021a8:	491c      	ldr	r1, [pc, #112]	@ (800221c <ifx_i2c_prl_init+0x8c>)
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 faa0 	bl	80036f0 <ifx_i2c_tl_init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d12b      	bne.n	800220e <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80021c2:	2b11      	cmp	r3, #17
 80021c4:	d104      	bne.n	80021d0 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80021ce:	e003      	b.n	80021d8 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2211      	movs	r2, #17
 80021fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2211      	movs	r2, #17
 8002204:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8002208:	2300      	movs	r3, #0
 800220a:	81fb      	strh	r3, [r7, #14]
 800220c:	e000      	b.n	8002210 <ifx_i2c_prl_init+0x80>
            break;
 800220e:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8002210:	89fb      	ldrh	r3, [r7, #14]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	08002d99 	.word	0x08002d99

08002220 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800222a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800222e:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002236:	2b01      	cmp	r3, #1
 8002238:	d12e      	bne.n	8002298 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002246:	2b33      	cmp	r3, #51	@ 0x33
 8002248:	d109      	bne.n	800225e <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800224e:	2300      	movs	r3, #0
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8002258:	2300      	movs	r3, #0
 800225a:	81fb      	strh	r3, [r7, #14]
            break;
 800225c:	e01d      	b.n	800229a <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002264:	2b01      	cmp	r3, #1
 8002266:	d118      	bne.n	800229a <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 800226e:	2b22      	cmp	r3, #34	@ 0x22
 8002270:	d113      	bne.n	800229a <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2208      	movs	r2, #8
 8002276:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8002288:	2301      	movs	r3, #1
 800228a:	2100      	movs	r1, #0
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fd83 	bl	8002d98 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8002292:	2300      	movs	r3, #0
 8002294:	81fb      	strh	r3, [r7, #14]
            break;
 8002296:	e000      	b.n	800229a <ifx_i2c_prl_close+0x7a>
            break;
 8002298:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 800229a:	89fb      	ldrh	r3, [r7, #14]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}

080022a4 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80022b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80022b8:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d05a      	beq.n	8002376 <ifx_i2c_prl_transceive+0xd2>
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d057      	beq.n	8002376 <ifx_i2c_prl_transceive+0xd2>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d152      	bne.n	8002376 <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80022d6:	2b11      	cmp	r3, #17
 80022d8:	d10d      	bne.n	80022f6 <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2208      	movs	r2, #8
 80022e8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 80022f4:	e003      	b.n	80022fe <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d006      	beq.n	8002328 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002320:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002324:	2b03      	cmp	r3, #3
 8002326:	d103      	bne.n	8002330 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38
 800232e:	e003      	b.n	8002338 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2211      	movs	r2, #17
 8002362:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	2100      	movs	r1, #0
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fd13 	bl	8002d98 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8002372:	2300      	movs	r3, #0
 8002374:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 8002376:	8afb      	ldrh	r3, [r7, #22]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b09e      	sub	sp, #120	@ 0x78
 8002384:	af06      	add	r7, sp, #24
 8002386:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002388:	f240 1307 	movw	r3, #263	@ 0x107
 800238c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8002390:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <ifx_i2c_prl_prf+0xa4>)
 8002392:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002396:	461d      	mov	r5, r3
 8002398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800239a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f107 020a 	add.w	r2, r7, #10
 80023ac:	f107 010c 	add.w	r1, r7, #12
 80023b0:	4618      	mov	r0, r3
 80023b2:	f004 f931 	bl	8006618 <pal_os_datastore_read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 80023bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 80023c4:	f240 1307 	movw	r3, #263	@ 0x107
 80023c8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 80023cc:	e024      	b.n	8002418 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 80023ce:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 80023d8:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 80023dc:	f107 010c 	add.w	r1, r7, #12
 80023e0:	2528      	movs	r5, #40	@ 0x28
 80023e2:	9504      	str	r5, [sp, #16]
 80023e4:	9203      	str	r2, [sp, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	9202      	str	r2, [sp, #8]
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2310      	movs	r3, #16
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4623      	mov	r3, r4
 80023f2:	4602      	mov	r2, r0
 80023f4:	2000      	movs	r0, #0
 80023f6:	f003 ff24 	bl	8006242 <pal_crypt_tls_prf_sha256>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002400:	f240 1307 	movw	r3, #263	@ 0x107
 8002404:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8002408:	897b      	ldrh	r3, [r7, #10]
 800240a:	461a      	mov	r2, r3
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f00a fe7c 	bl	800d110 <memset>

    } while (FALSE);
    return (return_status);
 8002418:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 800241c:	4618      	mov	r0, r3
 800241e:	3760      	adds	r7, #96	@ 0x60
 8002420:	46bd      	mov	sp, r7
 8002422:	bdb0      	pop	{r4, r5, r7, pc}
 8002424:	0800de9c 	.word	0x0800de9c

08002428 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	460b      	mov	r3, r1
 8002436:	817b      	strh	r3, [r7, #10]
 8002438:	4613      	mov	r3, r2
 800243a:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	7a7a      	ldrb	r2, [r7, #9]
 8002440:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	33a1      	adds	r3, #161	@ 0xa1
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fd35 	bl	8005eba <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	33a6      	adds	r3, #166	@ 0xa6
 8002460:	897a      	ldrh	r2, [r7, #10]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f003 fd11 	bl	8005e8c <optiga_common_set_uint16>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b08e      	sub	sp, #56	@ 0x38
 8002476:	af06      	add	r7, sp, #24
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002482:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002486:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8002488:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800248c:	88f9      	ldrh	r1, [r7, #6]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7ff ffc9 	bl	8002428 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3378      	adds	r3, #120	@ 0x78
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	3304      	adds	r3, #4
 80024a4:	6839      	ldr	r1, [r7, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fd07 	bl	8005eba <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 80024b6:	88f9      	ldrh	r1, [r7, #6]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	9205      	str	r2, [sp, #20]
 80024bc:	2208      	movs	r2, #8
 80024be:	9204      	str	r2, [sp, #16]
 80024c0:	2208      	movs	r2, #8
 80024c2:	9203      	str	r2, [sp, #12]
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	2308      	movs	r3, #8
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	460a      	mov	r2, r1
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	2000      	movs	r0, #0
 80024d8:	f003 fed9 	bl	800628e <pal_crypt_encrypt_aes128_ccm>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 80024e2:	2300      	movs	r3, #0
 80024e4:	83fb      	strh	r3, [r7, #30]
 80024e6:	e000      	b.n	80024ea <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 80024e8:	bf00      	nop
    } while (FALSE);
    return (return_status);
 80024ea:	8bfb      	ldrh	r3, [r7, #30]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08e      	sub	sp, #56	@ 0x38
 80024f8:	af06      	add	r7, sp, #24
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002504:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002508:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 800250a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800250e:	88f9      	ldrh	r1, [r7, #6]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff ff88 	bl	8002428 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8002518:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800251c:	3358      	adds	r3, #88	@ 0x58
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4413      	add	r3, r2
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	3304      	adds	r3, #4
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fcc3 	bl	8005eba <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	3308      	adds	r3, #8
 8002538:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 800253a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800253e:	3358      	adds	r3, #88	@ 0x58
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8002548:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800254a:	9205      	str	r2, [sp, #20]
 800254c:	2208      	movs	r2, #8
 800254e:	9204      	str	r2, [sp, #16]
 8002550:	2208      	movs	r2, #8
 8002552:	9203      	str	r2, [sp, #12]
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	2308      	movs	r3, #8
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4603      	mov	r3, r0
 8002562:	460a      	mov	r2, r1
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	2000      	movs	r0, #0
 8002568:	f003 feb2 	bl	80062d0 <pal_crypt_decrypt_aes128_ccm>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8002572:	2300      	movs	r3, #0
 8002574:	83fb      	strh	r3, [r7, #30]
 8002576:	e000      	b.n	800257a <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8002578:	bf00      	nop
    } while (FALSE);
    return (return_status);
 800257a:	8bfb      	ldrh	r3, [r7, #30]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 800258c:	2300      	movs	r3, #0
 800258e:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d134      	bne.n	800260c <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80025a8:	3301      	adds	r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2203      	movs	r2, #3
 80025b6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80025c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3354      	adds	r3, #84	@ 0x54
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	2201      	movs	r2, #1
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f001 f8a9 	bl	800374c <ifx_i2c_tl_transceive>
 80025fa:	4603      	mov	r3, r0
 80025fc:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e00d      	b.n	8002628 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	22ff      	movs	r2, #255	@ 0xff
 8002622:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8002626:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8002628:	89fb      	ldrh	r3, [r7, #14]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b08a      	sub	sp, #40	@ 0x28
 8002636:	af04      	add	r7, sp, #16
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800263c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002640:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 800264c:	2b55      	cmp	r3, #85	@ 0x55
 800264e:	f000 8178 	beq.w	8002942 <ifx_i2c_prl_do_handshake+0x310>
 8002652:	2b55      	cmp	r3, #85	@ 0x55
 8002654:	f300 817f 	bgt.w	8002956 <ifx_i2c_prl_do_handshake+0x324>
 8002658:	2b44      	cmp	r3, #68	@ 0x44
 800265a:	f000 8100 	beq.w	800285e <ifx_i2c_prl_do_handshake+0x22c>
 800265e:	2b44      	cmp	r3, #68	@ 0x44
 8002660:	f300 8179 	bgt.w	8002956 <ifx_i2c_prl_do_handshake+0x324>
 8002664:	2b33      	cmp	r3, #51	@ 0x33
 8002666:	f000 8095 	beq.w	8002794 <ifx_i2c_prl_do_handshake+0x162>
 800266a:	2b33      	cmp	r3, #51	@ 0x33
 800266c:	f300 8173 	bgt.w	8002956 <ifx_i2c_prl_do_handshake+0x324>
 8002670:	2b11      	cmp	r3, #17
 8002672:	d002      	beq.n	800267a <ifx_i2c_prl_do_handshake+0x48>
 8002674:	2b22      	cmp	r3, #34	@ 0x22
 8002676:	d034      	beq.n	80026e2 <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 8002678:	e16d      	b.n	8002956 <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2226      	movs	r2, #38	@ 0x26
 800269e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3354      	adds	r3, #84	@ 0x54
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	2202      	movs	r2, #2
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 f847 	bl	800374c <ifx_i2c_tl_transceive>
 80026be:	4603      	mov	r3, r0
 80026c0:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 80026c2:	8afb      	ldrh	r3, [r7, #22]
 80026c4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80026c8:	d106      	bne.n	80026d8 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2255      	movs	r2, #85	@ 0x55
 80026ce:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80026d2:	2301      	movs	r3, #1
 80026d4:	613b      	str	r3, [r7, #16]
                    break;
 80026d6:	e13f      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2222      	movs	r2, #34	@ 0x22
 80026dc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80026e0:	e13a      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00e      	beq.n	800271c <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002704:	2b01      	cmp	r3, #1
 8002706:	d109      	bne.n	800271c <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002708:	f240 1307 	movw	r3, #263	@ 0x107
 800270c:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	22ff      	movs	r2, #255	@ 0xff
 8002712:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
                    break;
 800271a:	e11d      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002722:	2b26      	cmp	r3, #38	@ 0x26
 8002724:	d108      	bne.n	8002738 <ifx_i2c_prl_do_handshake+0x106>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d104      	bne.n	8002738 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8002734:	2b01      	cmp	r3, #1
 8002736:	d004      	beq.n	8002742 <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2255      	movs	r2, #85	@ 0x55
 800273c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002740:	e10a      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	3322      	adds	r3, #34	@ 0x22
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fbd8 	bl	8005efc <optiga_common_get_uint32>
 800274c:	4602      	mov	r2, r0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	3302      	adds	r3, #2
 8002764:	2220      	movs	r2, #32
 8002766:	4619      	mov	r1, r3
 8002768:	f00a fd17 	bl	800d19a <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fe07 	bl	8002380 <ifx_i2c_prl_prf>
 8002772:	4603      	mov	r3, r0
 8002774:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002776:	8afb      	ldrh	r3, [r7, #22]
 8002778:	f240 1207 	movw	r2, #263	@ 0x107
 800277c:	4293      	cmp	r3, r2
 800277e:	d104      	bne.n	800278a <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2255      	movs	r2, #85	@ 0x55
 8002784:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002788:	e0e6      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2233      	movs	r2, #51	@ 0x33
 800278e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002792:	e0e1      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2208      	movs	r2, #8
 8002798:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3380      	adds	r3, #128	@ 0x80
 80027aa:	2220      	movs	r2, #32
 80027ac:	4619      	mov	r1, r3
 80027ae:	f00a fcf4 	bl	800d19a <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f003 fb7b 	bl	8005eba <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	2224      	movs	r2, #36	@ 0x24
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fe49 	bl	8002472 <ifx_i2c_prl_encrypt_msg>
 80027e0:	4603      	mov	r3, r0
 80027e2:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 80027e4:	8afb      	ldrh	r3, [r7, #22]
 80027e6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80027ea:	d106      	bne.n	80027fa <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2255      	movs	r2, #85	@ 0x55
 80027f0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
                    break;
 80027f8:	e0ae      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f003 fb51 	bl	8005eba <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2231      	movs	r2, #49	@ 0x31
 800281c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3354      	adds	r3, #84	@ 0x54
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	2231      	movs	r2, #49	@ 0x31
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 ff88 	bl	800374c <ifx_i2c_tl_transceive>
 800283c:	4603      	mov	r3, r0
 800283e:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002840:	8afb      	ldrh	r3, [r7, #22]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2255      	movs	r2, #85	@ 0x55
 800284a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
                    break;
 8002852:	e081      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2244      	movs	r2, #68	@ 0x44
 8002858:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800285c:	e07c      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d104      	bne.n	8002870 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 800286c:	2b31      	cmp	r3, #49	@ 0x31
 800286e:	d006      	beq.n	800287e <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2255      	movs	r2, #85	@ 0x55
 8002874:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002878:	2301      	movs	r3, #1
 800287a:	613b      	str	r3, [r7, #16]
                    break;
 800287c:	e06c      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fb3a 	bl	8005efc <optiga_common_get_uint32>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	1d59      	adds	r1, r3, #5
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80028a0:	9203      	str	r2, [sp, #12]
 80028a2:	2224      	movs	r2, #36	@ 0x24
 80028a4:	9202      	str	r2, [sp, #8]
 80028a6:	2210      	movs	r2, #16
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe1f 	bl	80024f4 <ifx_i2c_prl_decrypt_msg>
 80028b6:	4603      	mov	r3, r0
 80028b8:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 80028ba:	8afb      	ldrh	r3, [r7, #22]
 80028bc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80028c0:	d106      	bne.n	80028d0 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2255      	movs	r2, #85	@ 0x55
 80028c6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
                    break;
 80028ce:	e043      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 faed 	bl	8005eba <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	33a8      	adds	r3, #168	@ 0xa8
 80028ea:	2220      	movs	r2, #32
 80028ec:	4619      	mov	r1, r3
 80028ee:	f00a fbff 	bl	800d0f0 <memcmp>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80028f8:	f240 1307 	movw	r3, #263	@ 0x107
 80028fc:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2255      	movs	r2, #85	@ 0x55
 8002902:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002906:	2301      	movs	r3, #1
 8002908:	613b      	str	r3, [r7, #16]
                    break;
 800290a:	e025      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8002912:	f107 030c 	add.w	r3, r7, #12
 8002916:	2204      	movs	r2, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f00a fbe9 	bl	800d0f0 <memcmp>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002924:	f240 1307 	movw	r3, #263	@ 0x107
 8002928:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2255      	movs	r2, #85	@ 0x55
 800292e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002932:	2301      	movs	r3, #1
 8002934:	613b      	str	r3, [r7, #16]
                    break;
 8002936:	e00f      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002940:	e00a      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002942:	f240 1307 	movw	r3, #263	@ 0x107
 8002946:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	22ff      	movs	r2, #255	@ 0xff
 800294c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
            break;
 8002954:	e000      	b.n	8002958 <ifx_i2c_prl_do_handshake+0x326>
            break;
 8002956:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b01      	cmp	r3, #1
 800295c:	f43f ae73 	beq.w	8002646 <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 8002960:	8afb      	ldrh	r3, [r7, #22]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b094      	sub	sp, #80	@ 0x50
 800296e:	af02      	add	r7, sp, #8
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	603b      	str	r3, [r7, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800297a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800297e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002988:	2b01      	cmp	r3, #1
 800298a:	d003      	beq.n	8002994 <ifx_i2c_prl_do_manage_context+0x2a>
 800298c:	2b02      	cmp	r3, #2
 800298e:	f000 80eb 	beq.w	8002b68 <ifx_i2c_prl_do_manage_context+0x1fe>
 8002992:	e1df      	b.n	8002d54 <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800299a:	b25b      	sxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	da07      	bge.n	80029b0 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 80029ae:	e1ed      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80029b6:	2b22      	cmp	r3, #34	@ 0x22
 80029b8:	d10c      	bne.n	80029d4 <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2260      	movs	r2, #96	@ 0x60
 80029be:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 80029d2:	e0a6      	b.n	8002b22 <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80029da:	2b11      	cmp	r3, #17
 80029dc:	f040 8093 	bne.w	8002b06 <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80029e6:	885b      	ldrh	r3, [r3, #2]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d033      	beq.n	8002a54 <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2234      	movs	r2, #52	@ 0x34
 80029f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80029fa:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80029fc:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3354      	adds	r3, #84	@ 0x54
 8002a02:	461a      	mov	r2, r3
 8002a04:	f003 fe08 	bl	8006618 <pal_os_datastore_read>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002a0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	f000 81b7 	beq.w	8002d86 <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d130      	bne.n	8002a90 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002a52:	e19b      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d112      	bne.n	8002a84 <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2202      	movs	r2, #2
 8002a62:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002a82:	e183      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2268      	movs	r2, #104	@ 0x68
 8002a94:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f003 fa08 	bl	8005eba <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2205      	movs	r2, #5
 8002aae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2205      	movs	r2, #5
 8002abc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ace:	885b      	ldrh	r3, [r3, #2]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d026      	beq.n	8002b22 <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	2234      	movs	r2, #52	@ 0x34
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f00a fb17 	bl	800d110 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ae8:	885b      	ldrh	r3, [r3, #2]
 8002aea:	f107 0110 	add.w	r1, r7, #16
 8002aee:	2234      	movs	r2, #52	@ 0x34
 8002af0:	4618      	mov	r0, r3
 8002af2:	f003 fd13 	bl	800651c <pal_os_datastore_write>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002afc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10e      	bne.n	8002b22 <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 8002b04:	e142      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	@ 0xff
 8002b0a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2207      	movs	r2, #7
 8002b12:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002b20:	e134      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3354      	adds	r3, #84	@ 0x54
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 fe05 	bl	800374c <ifx_i2c_tl_transceive>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 8002b48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 811c 	bne.w	8002d8a <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002b66:	e111      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002b7a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b7e:	2b6c      	cmp	r3, #108	@ 0x6c
 8002b80:	d133      	bne.n	8002bea <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002b88:	2b11      	cmp	r3, #17
 8002b8a:	d12e      	bne.n	8002bea <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d12b      	bne.n	8002bea <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	2228      	movs	r2, #40	@ 0x28
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f00a fafb 	bl	800d19a <memcpy>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2204      	movs	r2, #4
 8002be4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002be8:	e0ac      	b.n	8002d44 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002bea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002bee:	2b64      	cmp	r3, #100	@ 0x64
 8002bf0:	f040 808b 	bne.w	8002d0a <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002bfa:	2b22      	cmp	r3, #34	@ 0x22
 8002bfc:	f040 8085 	bne.w	8002d0a <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	f040 8081 	bne.w	8002d0a <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f103 0008 	add.w	r0, r3, #8
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3358      	adds	r3, #88	@ 0x58
 8002c1a:	2228      	movs	r2, #40	@ 0x28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f00a fabc 	bl	800d19a <memcpy>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002c5c:	885b      	ldrh	r3, [r3, #2]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d02e      	beq.n	8002cc0 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2234      	movs	r2, #52	@ 0x34
 8002c66:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002c70:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002c72:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f003 fc4e 	bl	800651c <pal_os_datastore_write>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002c86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d018      	beq.n	8002cc0 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	@ 0xff
 8002c92:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2207      	movs	r2, #7
 8002c9a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002cac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
                        break;
 8002cbe:	e065      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3358      	adds	r3, #88	@ 0x58
 8002cc4:	2228      	movs	r2, #40	@ 0x28
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f00a fa21 	bl	800d110 <memset>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	649a      	str	r2, [r3, #72]	@ 0x48
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d08:	e01c      	b.n	8002d44 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2234      	movs	r2, #52	@ 0x34
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f00a f9fd 	bl	800d110 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d1c:	885b      	ldrh	r3, [r3, #2]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002d28:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002d2a:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002d2c:	2234      	movs	r2, #52	@ 0x34
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fbf4 	bl	800651c <pal_os_datastore_write>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8002d3a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002d3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002d42:	e023      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002d52:	e01b      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	22ff      	movs	r2, #255	@ 0xff
 8002d58:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2207      	movs	r2, #7
 8002d60:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002d84:	e002      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002d8a:	bf00      	nop
    }
  return (return_status);
 8002d8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3748      	adds	r7, #72	@ 0x48
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b097      	sub	sp, #92	@ 0x5c
 8002d9c:	af04      	add	r7, sp, #16
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	461a      	mov	r2, r3
 8002da4:	460b      	mov	r3, r1
 8002da6:	817b      	strh	r3, [r7, #10]
 8002da8:	4613      	mov	r3, r2
 8002daa:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002db2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002db6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <ifx_i2c_prl_event_handler+0x36>
 8002dc4:	897b      	ldrh	r3, [r7, #10]
 8002dc6:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d029      	beq.n	8002e22 <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	22ff      	movs	r2, #255	@ 0xff
 8002dd2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d105      	bne.n	8002dec <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f240 1207 	movw	r2, #263	@ 0x107
 8002de6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002dea:	e016      	b.n	8002e1a <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10d      	bne.n	8002e12 <ifx_i2c_prl_event_handler+0x7a>
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dfc:	d009      	beq.n	8002e12 <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e10:	e003      	b.n	8002e1a <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	897a      	ldrh	r2, [r7, #10]
 8002e16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	2b07      	cmp	r3, #7
 8002e2c:	f200 8445 	bhi.w	80036ba <ifx_i2c_prl_event_handler+0x922>
 8002e30:	a201      	add	r2, pc, #4	@ (adr r2, 8002e38 <ifx_i2c_prl_event_handler+0xa0>)
 8002e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e36:	bf00      	nop
 8002e38:	08002e59 	.word	0x08002e59
 8002e3c:	08002ec7 	.word	0x08002ec7
 8002e40:	080032d9 	.word	0x080032d9
 8002e44:	08003007 	.word	0x08003007
 8002e48:	08002f0b 	.word	0x08002f0b
 8002e4c:	08003571 	.word	0x08003571
 8002e50:	0800368b 	.word	0x0800368b
 8002e54:	08002e75 	.word	0x08002e75
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002e62:	2300      	movs	r3, #0
 8002e64:	2200      	movs	r2, #0
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	47a0      	blx	r4
                exit_machine = FALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002e70:	f000 bc34 	b.w	80036dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002e74:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002e78:	893a      	ldrh	r2, [r7, #8]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff fd74 	bl	800296a <ifx_i2c_prl_do_manage_context>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002e88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8424 	beq.w	80036da <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	22ff      	movs	r2, #255	@ 0xff
 8002e96:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002eb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002ec2:	f000 bc0a 	b.w	80036da <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	db09      	blt.n	8002ee6 <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d011      	beq.n	8002f00 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2211      	movs	r2, #17
 8002ef2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002efe:	e3ed      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2204      	movs	r2, #4
 8002f04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002f08:	e3e8      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	2228      	movs	r2, #40	@ 0x28
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00a f8fc 	bl	800d110 <memset>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	2234      	movs	r2, #52	@ 0x34
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f00a f8df 	bl	800d110 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002f58:	885b      	ldrh	r3, [r3, #2]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d02e      	beq.n	8002fbc <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002f64:	885b      	ldrh	r3, [r3, #2]
 8002f66:	f107 0110 	add.w	r1, r7, #16
 8002f6a:	2234      	movs	r2, #52	@ 0x34
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fad5 	bl	800651c <pal_os_datastore_write>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002f78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01d      	beq.n	8002fbc <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	22ff      	movs	r2, #255	@ 0xff
 8002f84:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f240 1207 	movw	r2, #263	@ 0x107
 8002fb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002fba:	e38f      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff fb37 	bl	8002632 <ifx_i2c_prl_do_handshake>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002fca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fce:	f240 1207 	movw	r2, #263	@ 0x107
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d109      	bne.n	8002fea <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002fdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002fe8:	e378      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d104      	bne.n	8002ffe <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002ffc:	e36e      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8003004:	e36a      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800300c:	b25b      	sxtb	r3, r3
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	b25b      	sxtb	r3, r3
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	b25b      	sxtb	r3, r3
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d006      	beq.n	800303e <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003036:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 800303a:	2b03      	cmp	r3, #3
 800303c:	d122      	bne.n	8003084 <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003042:	3301      	adds	r3, #1
 8003044:	f113 0f10 	cmn.w	r3, #16
 8003048:	d914      	bls.n	8003074 <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10f      	bne.n	8003074 <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2205      	movs	r2, #5
 8003060:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2211      	movs	r2, #17
 800306e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8003072:	e333      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	881a      	ldrh	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307e:	320d      	adds	r2, #13
 8003080:	b292      	uxth	r2, r2
 8003082:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d007      	beq.n	80030ae <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80030a4:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	f040 80c2 	bne.w	8003232 <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	3301      	adds	r3, #1
 80030b4:	f113 0f10 	cmn.w	r3, #16
 80030b8:	d914      	bls.n	80030e4 <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2205      	movs	r2, #5
 80030d0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2211      	movs	r2, #17
 80030de:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 80030e2:	e2fb      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d13f      	bne.n	800316e <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003102:	3305      	adds	r3, #5
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 800310a:	9203      	str	r2, [sp, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	9202      	str	r2, [sp, #8]
 8003110:	2200      	movs	r2, #0
 8003112:	9201      	str	r2, [sp, #4]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	4623      	mov	r3, r4
 8003118:	4602      	mov	r2, r0
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff f9ea 	bl	80024f4 <ifx_i2c_prl_decrypt_msg>
 8003120:	4603      	mov	r3, r0
 8003122:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8003126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800312a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800312e:	d118      	bne.n	8003162 <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	22ff      	movs	r2, #255	@ 0xff
 8003134:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2207      	movs	r2, #7
 800313c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800314e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800315a:	2301      	movs	r3, #1
 800315c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8003160:	e2bc      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 800316c:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2205      	movs	r2, #5
 800317c:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f002 fe94 	bl	8005eba <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8003196:	1d59      	adds	r1, r3, #5
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4603      	mov	r3, r0
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff f960 	bl	8002472 <ifx_i2c_prl_encrypt_msg>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 80031b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031bc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80031c0:	d118      	bne.n	80031f4 <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22ff      	movs	r2, #255	@ 0xff
 80031c6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2207      	movs	r2, #7
 80031ce:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80031e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80031f2:	e273      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80031fe:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8003210:	4413      	add	r3, r2
 8003212:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8003214:	3308      	adds	r3, #8
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4603      	mov	r3, r0
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fa91 	bl	800374c <ifx_i2c_tl_transceive>
 800322a:	4603      	mov	r3, r0
 800322c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003230:	e021      	b.n	8003276 <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323e:	3304      	adds	r3, #4
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8003246:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 800324c:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 800325a:	4413      	add	r3, r2
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4603      	mov	r3, r0
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fa6e 	bl	800374c <ifx_i2c_tl_transceive>
 8003270:	4603      	mov	r3, r0
 8003272:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8003276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800327a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800327e:	d11d      	bne.n	80032bc <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	22ff      	movs	r2, #255	@ 0xff
 8003284:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2207      	movs	r2, #7
 800328c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800329e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80032b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 80032ba:	e20f      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2203      	movs	r2, #3
 80032cc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80032d6:	e201      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	3301      	adds	r3, #1
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 fe0c 	bl	8005efc <optiga_common_get_uint32>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 80032ea:	893b      	ldrh	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d118      	bne.n	8003322 <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	@ 0xff
 80032f4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2207      	movs	r2, #7
 80032fc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800330e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8003320:	e1dc      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d040      	beq.n	80033b0 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b40      	cmp	r3, #64	@ 0x40
 8003334:	d003      	beq.n	800333e <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 800333a:	2b44      	cmp	r3, #68	@ 0x44
 800333c:	d10c      	bne.n	8003358 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 800333e:	893b      	ldrh	r3, [r7, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d004      	beq.n	800334e <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800334a:	2b01      	cmp	r3, #1
 800334c:	d004      	beq.n	8003358 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8003354:	2b03      	cmp	r3, #3
 8003356:	d109      	bne.n	800336c <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800335e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800336a:	e018      	b.n	800339e <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10e      	bne.n	8003394 <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 800337c:	2b11      	cmp	r3, #17
 800337e:	d109      	bne.n	8003394 <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800338e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003392:	e004      	b.n	800339e <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800339a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2206      	movs	r2, #6
 80033a2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	22ff      	movs	r2, #255	@ 0xff
 80033aa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 80033ae:	e195      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d018      	beq.n	80033f0 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	22ff      	movs	r2, #255	@ 0xff
 80033c2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2207      	movs	r2, #7
 80033ca:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 80033ee:	e175      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d006      	beq.n	800340a <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8003404:	2b03      	cmp	r3, #3
 8003406:	f040 8082 	bne.w	800350e <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 800340a:	893b      	ldrh	r3, [r7, #8]
 800340c:	2b0d      	cmp	r3, #13
 800340e:	d818      	bhi.n	8003442 <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2207      	movs	r2, #7
 800341c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800342e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003440:	e14c      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344a:	3303      	adds	r3, #3
 800344c:	429a      	cmp	r2, r3
 800344e:	d805      	bhi.n	800345c <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003458:	429a      	cmp	r2, r3
 800345a:	d818      	bhi.n	800348e <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	22ff      	movs	r2, #255	@ 0xff
 8003460:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2207      	movs	r2, #7
 8003468:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800347a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 800348c:	e126      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349a:	881a      	ldrh	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	3a0d      	subs	r2, #13
 80034a2:	b292      	uxth	r2, r2
 80034a4:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034aa:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80034b0:	8818      	ldrh	r0, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80034ba:	3305      	adds	r3, #5
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 80034c2:	9203      	str	r2, [sp, #12]
 80034c4:	2224      	movs	r2, #36	@ 0x24
 80034c6:	9202      	str	r2, [sp, #8]
 80034c8:	2210      	movs	r2, #16
 80034ca:	9201      	str	r2, [sp, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	4623      	mov	r3, r4
 80034d0:	4602      	mov	r2, r0
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff f80e 	bl	80024f4 <ifx_i2c_prl_decrypt_msg>
 80034d8:	4603      	mov	r3, r0
 80034da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 80034de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80034e2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80034e6:	d108      	bne.n	80034fa <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2206      	movs	r2, #6
 80034ec:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2204      	movs	r2, #4
 80034f4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 80034f8:	e0f0      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 800350a:	bf00      	nop
            break;
 800350c:	e0e6      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 800350e:	893b      	ldrh	r3, [r7, #8]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d81c      	bhi.n	800354e <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2207      	movs	r2, #7
 8003518:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	22ff      	movs	r2, #255	@ 0xff
 8003520:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003534:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 8003538:	e0d0      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003540:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 800354c:	e0c6      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003552:	881a      	ldrh	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	3a01      	subs	r2, #1
 800355a:	b292      	uxth	r2, r2
 800355c:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 800356e:	e0b5      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b44      	cmp	r3, #68	@ 0x44
 8003576:	d166      	bne.n	8003646 <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d104      	bne.n	8003588 <ifx_i2c_prl_event_handler+0x7f0>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003584:	2b02      	cmp	r3, #2
 8003586:	d918      	bls.n	80035ba <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	22ff      	movs	r2, #255	@ 0xff
 800358c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2207      	movs	r2, #7
 8003594:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80035a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80035b8:	e090      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d004      	beq.n	80035ce <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d136      	bne.n	800363c <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d91c      	bls.n	800362a <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	22ff      	movs	r2, #255	@ 0xff
 80035f4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2207      	movs	r2, #7
 80035fc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800360e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8003628:	e058      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2204      	movs	r2, #4
 800362e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2204      	movs	r2, #4
 8003636:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 800363a:	e04f      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2207      	movs	r2, #7
 8003640:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003644:	e04a      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 800364c:	2b03      	cmp	r3, #3
 800364e:	d117      	bne.n	8003680 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	22ff      	movs	r2, #255	@ 0xff
 8003654:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2207      	movs	r2, #7
 800365c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800366e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2207      	movs	r2, #7
 8003684:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003688:	e028      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003690:	2bff      	cmp	r3, #255	@ 0xff
 8003692:	d00d      	beq.n	80036b0 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7fe ff75 	bl	8002584 <ifx_i2c_prl_send_alert>
 800369a:	4603      	mov	r3, r0
 800369c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	@ 0xff
 80036a4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 80036ae:	e015      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80036b8:	e010      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80036c6:	2300      	movs	r3, #0
 80036c8:	2200      	movs	r2, #0
 80036ca:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	47a0      	blx	r4
                exit_machine = FALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80036d8:	e000      	b.n	80036dc <ifx_i2c_prl_event_handler+0x944>
            break;
 80036da:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 80036dc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	f43f ab9e 	beq.w	8002e22 <ifx_i2c_prl_event_handler+0x8a>
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	374c      	adds	r7, #76	@ 0x4c
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd90      	pop	{r4, r7, pc}

080036f0 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8003702:	4911      	ldr	r1, [pc, #68]	@ (8003748 <ifx_i2c_tl_init+0x58>)
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd fc11 	bl	8000f2c <ifx_i2c_dl_init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003710:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003714:	e014      	b.n	8003740 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8003734:	3b06      	subs	r3, #6
 8003736:	b29a      	uxth	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	08003a31 	.word	0x08003a31

0800374c <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 800375c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003760:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d041      	beq.n	80037ec <ifx_i2c_tl_transceive+0xa0>
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03e      	beq.n	80037ec <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003774:	2b01      	cmp	r3, #1
 8003776:	d138      	bne.n	80037ea <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003780:	f003 f8c5 	bl	800690e <pal_os_timer_get_time_in_milliseconds>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a3a      	ldr	r2, [r7, #32]
 80037b0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80037da:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f866 	bl	80038b0 <ifx_i2c_tl_send_next_fragment>
 80037e4:	4603      	mov	r3, r0
 80037e6:	82fb      	strh	r3, [r7, #22]
 80037e8:	e000      	b.n	80037ec <ifx_i2c_tl_transceive+0xa0>
            break;
 80037ea:	bf00      	nop
    } while (FALSE);
    return (status);
 80037ec:	8afb      	ldrh	r3, [r7, #22]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003804:	2b01      	cmp	r3, #1
 8003806:	d002      	beq.n	800380e <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003808:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800380c:	e00f      	b.n	800382e <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2202      	movs	r2, #2
 8003822:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f842 	bl	80038b0 <ifx_i2c_tl_send_next_fragment>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 8003836:	b480      	push	{r7}
 8003838:	b085      	sub	sp, #20
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003844:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <ifx_i2c_tl_calculate_pctr+0x38>
 8003860:	897a      	ldrh	r2, [r7, #10]
 8003862:	89bb      	ldrh	r3, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d802      	bhi.n	800386e <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e019      	b.n	80038a2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <ifx_i2c_tl_calculate_pctr+0x50>
 8003878:	897a      	ldrh	r2, [r7, #10]
 800387a:	89bb      	ldrh	r3, [r7, #12]
 800387c:	429a      	cmp	r2, r3
 800387e:	d902      	bls.n	8003886 <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	e00d      	b.n	80038a2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800388c:	2b00      	cmp	r3, #0
 800388e:	d006      	beq.n	800389e <ifx_i2c_tl_calculate_pctr+0x68>
 8003890:	897a      	ldrh	r2, [r7, #10]
 8003892:	89bb      	ldrh	r3, [r7, #12]
 8003894:	429a      	cmp	r2, r3
 8003896:	d902      	bls.n	800389e <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003898:	2302      	movs	r3, #2
 800389a:	73fb      	strb	r3, [r7, #15]
 800389c:	e001      	b.n	80038a2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 800389e:	2304      	movs	r3, #4
 80038a0:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80038be:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ffb8 	bl	8003836 <ifx_i2c_tl_calculate_pctr>
 80038c6:	4603      	mov	r3, r0
 80038c8:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	429a      	cmp	r2, r3
 80038de:	da07      	bge.n	80038f0 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 80038f0:	7b7b      	ldrb	r3, [r7, #13]
 80038f2:	f043 0308 	orr.w	r3, r3, #8
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 8003904:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 8003912:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003914:	89fa      	ldrh	r2, [r7, #14]
 8003916:	4619      	mov	r1, r3
 8003918:	f009 fc3f 	bl	800d19a <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	4413      	add	r3, r2
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	3301      	adds	r3, #1
 8003932:	b29b      	uxth	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fb36 	bl	8000fa8 <ifx_i2c_dl_send_frame>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2207      	movs	r2, #7
 8003956:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fb1e 	bl	8000fa8 <ifx_i2c_dl_send_frame>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	460a      	mov	r2, r1
 8003982:	71fb      	strb	r3, [r7, #7]
 8003984:	4613      	mov	r3, r2
 8003986:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003988:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800398c:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	2b07      	cmp	r3, #7
 8003992:	d00b      	beq.n	80039ac <ifx_i2c_tl_check_chaining_error+0x34>
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <ifx_i2c_tl_check_chaining_error+0x34>
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d005      	beq.n	80039ac <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d002      	beq.n	80039ac <ifx_i2c_tl_check_chaining_error+0x34>
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d110      	bne.n	80039ce <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	4a0b      	ldr	r2, [pc, #44]	@ (80039dc <ifx_i2c_tl_check_chaining_error+0x64>)
 80039b0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80039b4:	79ba      	ldrb	r2, [r7, #6]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d007      	beq.n	80039ca <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	4a07      	ldr	r2, [pc, #28]	@ (80039dc <ifx_i2c_tl_check_chaining_error+0x64>)
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80039c4:	79ba      	ldrb	r2, [r7, #6]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d101      	bne.n	80039ce <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 80039ca:	2300      	movs	r3, #0
 80039cc:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 80039ce:	89fb      	ldrh	r3, [r7, #14]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	0800e104 	.word	0x0800e104

080039e0 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 80039ec:	2300      	movs	r3, #0
 80039ee:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <presence_bit_check+0x42>
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8003a16:	7b7b      	ldrb	r3, [r7, #13]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d002      	beq.n	8003a22 <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 8003a1c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003a20:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 8003a22:	89fb      	ldrh	r3, [r7, #14]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	817b      	strh	r3, [r7, #10]
 8003a40:	4613      	mov	r3, r2
 8003a42:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8003a64:	897b      	ldrh	r3, [r7, #10]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2206      	movs	r2, #6
 8003a72:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003a7c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003a80:	893b      	ldrh	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d010      	beq.n	8003aa8 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ffa8 	bl	80039e0 <presence_bit_check>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2206      	movs	r2, #6
 8003a9a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003aa4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	2b07      	cmp	r3, #7
 8003aba:	f200 81d0 	bhi.w	8003e5e <ifx_i2c_dl_event_handler+0x42e>
 8003abe:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <ifx_i2c_dl_event_handler+0x94>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ae5 	.word	0x08003ae5
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003e5f 	.word	0x08003e5f
 8003ad0:	08003b91 	.word	0x08003b91
 8003ad4:	08003cd7 	.word	0x08003cd7
 8003ad8:	08003e2d 	.word	0x08003e2d
 8003adc:	08003deb 	.word	0x08003deb
 8003ae0:	08003d8f 	.word	0x08003d8f
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003aee:	2300      	movs	r3, #0
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	47a0      	blx	r4
            }
            break;
 8003af8:	e1c3      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d040      	beq.n	8003b86 <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d215      	bcs.n	8003b40 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8003b14:	7dbb      	ldrb	r3, [r7, #22]
 8003b16:	2b07      	cmp	r3, #7
 8003b18:	d104      	bne.n	8003b24 <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b22:	e1ae      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2206      	movs	r2, #6
 8003b2e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b32:	e1a6      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff feb9 	bl	80038b0 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003b3e:	e19f      	b.n	8003e80 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2204      	movs	r2, #4
 8003b44:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003b60:	897b      	ldrh	r3, [r7, #10]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 818a 	bne.w	8003e80 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7fd fa4b 	bl	8001008 <ifx_i2c_dl_receive_frame>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2206      	movs	r2, #6
 8003b7c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	757b      	strb	r3, [r7, #21]
            break;
 8003b84:	e17c      	b.n	8003e80 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2206      	movs	r2, #6
 8003b8a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003b8e:	e178      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003b90:	897b      	ldrh	r3, [r7, #10]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8098 	beq.w	8003ccc <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003baa:	e16a      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb6:	d114      	bne.n	8003be2 <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003bb8:	7dbb      	ldrb	r3, [r7, #22]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d005      	beq.n	8003bca <ifx_i2c_dl_event_handler+0x19a>
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7fd fa22 	bl	8001008 <ifx_i2c_dl_receive_frame>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d004      	beq.n	8003bd4 <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2206      	movs	r2, #6
 8003bce:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003bd2:	e156      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	757b      	strb	r3, [r7, #21]
                        break;
 8003be0:	e14f      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003be8:	7dbb      	ldrb	r3, [r7, #22]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fec3 	bl	8003978 <ifx_i2c_tl_check_chaining_error>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c00:	e13f      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003c02:	7dbb      	ldrb	r3, [r7, #22]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2206      	movs	r2, #6
 8003c1a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003c1e:	e130      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003c20:	7dbb      	ldrb	r3, [r7, #22]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <ifx_i2c_dl_event_handler+0x1fc>
 8003c26:	7dbb      	ldrb	r3, [r7, #22]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d14a      	bne.n	8003cc2 <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003c32:	461a      	mov	r2, r3
 8003c34:	893b      	ldrh	r3, [r7, #8]
 8003c36:	4413      	add	r3, r2
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003c40:	8812      	ldrh	r2, [r2, #0]
 8003c42:	4293      	cmp	r3, r2
 8003c44:	dd09      	ble.n	8003c5a <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c4c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2206      	movs	r2, #6
 8003c54:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003c58:	e113      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003c6a:	1898      	adds	r0, r3, r2
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	1c59      	adds	r1, r3, #1
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	461a      	mov	r2, r3
 8003c76:	f009 fa90 	bl	800d19a <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003c80:	893b      	ldrh	r3, [r7, #8]
 8003c82:	4413      	add	r3, r2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003ca4:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	2100      	movs	r1, #0
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003cc0:	e0df      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2205      	movs	r2, #5
 8003cc6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003cca:	e0da      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2206      	movs	r2, #6
 8003cd0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003cd4:	e0d5      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003cd6:	893a      	ldrh	r2, [r7, #8]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003cde:	3301      	adds	r3, #1
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d004      	beq.n	8003cee <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2207      	movs	r2, #7
 8003ce8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003cec:	e0c9      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	893b      	ldrh	r3, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	4293      	cmp	r3, r2
 8003d06:	dd09      	ble.n	8003d1c <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d0e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2204      	movs	r2, #4
 8003d16:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d1a:	e0b2      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2206      	movs	r2, #6
 8003d26:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d2a:	e0aa      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003d38:	1898      	adds	r0, r3, r2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	1c59      	adds	r1, r3, #1
 8003d3e:	893b      	ldrh	r3, [r7, #8]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	461a      	mov	r2, r3
 8003d44:	f009 fa29 	bl	800d19a <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	4413      	add	r3, r2
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7fd f947 	bl	8001008 <ifx_i2c_dl_receive_frame>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2206      	movs	r2, #6
 8003d84:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003d8c:	e079      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003d8e:	893b      	ldrh	r3, [r7, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d909      	bls.n	8003da8 <ifx_i2c_dl_event_handler+0x378>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d104      	bne.n	8003da8 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2207      	movs	r2, #7
 8003da2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003da6:	e06c      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	b2d1      	uxtb	r1, r2
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d111      	bne.n	8003de0 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff fd16 	bl	80037f6 <ifx_i2c_tl_resend_packets>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2206      	movs	r2, #6
 8003dd4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003dd8:	e053      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	757b      	strb	r3, [r7, #21]
            break;
 8003dde:	e050      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2206      	movs	r2, #6
 8003de4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003de8:	e04b      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	b2d1      	uxtb	r1, r2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff fd9d 	bl	8003946 <ifx_i2c_tl_send_chaining_error>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2206      	movs	r2, #6
 8003e16:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003e1a:	e032      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	757b      	strb	r3, [r7, #21]
            break;
 8003e20:	e02f      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2206      	movs	r2, #6
 8003e26:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003e2a:	e02a      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003e30:	897b      	ldrh	r3, [r7, #10]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <ifx_i2c_dl_event_handler+0x410>
 8003e3a:	893b      	ldrh	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003e54:	2300      	movs	r3, #0
 8003e56:	2200      	movs	r2, #0
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	47a0      	blx	r4
            }
            break;
 8003e5c:	e011      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003e76:	2300      	movs	r3, #0
 8003e78:	2200      	movs	r2, #0
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	47a0      	blx	r4
            }
            break;
 8003e7e:	e000      	b.n	8003e82 <ifx_i2c_dl_event_handler+0x452>
            break;
 8003e80:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003e82:	7d7b      	ldrb	r3, [r7, #21]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	f43f ade3 	beq.w	8003a50 <ifx_i2c_dl_event_handler+0x20>
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd90      	pop	{r4, r7, pc}

08003e94 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003e9c:	1d39      	adds	r1, r7, #4
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	4803      	ldr	r0, [pc, #12]	@ (8003eb4 <__io_putchar+0x20>)
 8003ea6:	f007 fec1 	bl	800bc2c <HAL_UART_Transmit>
    return ch;
 8003eaa:	687b      	ldr	r3, [r7, #4]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000a8c 	.word	0x20000a8c

08003eb8 <optiga_util_callback>:
extern pal_i2c_t optiga_pal_i2c_context_0;
static volatile optiga_lib_status_t optiga_lib_status = OPTIGA_LIB_SUCCESS;

// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 8003ec4:	4a04      	ldr	r2, [pc, #16]	@ (8003ed8 <optiga_util_callback+0x20>)
 8003ec6:	887b      	ldrh	r3, [r7, #2]
 8003ec8:	8013      	strh	r3, [r2, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000ad4 	.word	0x20000ad4

08003edc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8003eee:	f002 fca7 	bl	8006840 <pal_os_event_timer_tick>
    }
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <optiga_main_logic>:
void optiga_main_logic(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 8003f06:	f240 3302 	movw	r3, #770	@ 0x302
 8003f0a:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4927      	ldr	r1, [pc, #156]	@ (8003fac <optiga_main_logic+0xb0>)
 8003f10:	2000      	movs	r0, #0
 8003f12:	f002 f855 	bl	8005fc0 <optiga_util_create>
 8003f16:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8003f1e:	4824      	ldr	r0, [pc, #144]	@ (8003fb0 <optiga_main_logic+0xb4>)
 8003f20:	f009 f8de 	bl	800d0e0 <puts>
        return;
 8003f24:	e03e      	b.n	8003fa4 <optiga_main_logic+0xa8>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003f26:	4b23      	ldr	r3, [pc, #140]	@ (8003fb4 <optiga_main_logic+0xb8>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f002 f8aa 	bl	8006088 <optiga_util_open_application>
 8003f34:	4603      	mov	r3, r0
 8003f36:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 8003f38:	887b      	ldrh	r3, [r7, #2]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 8003f3e:	481e      	ldr	r0, [pc, #120]	@ (8003fb8 <optiga_main_logic+0xbc>)
 8003f40:	f009 f8ce 	bl	800d0e0 <puts>
            continue;
 8003f44:	e02d      	b.n	8003fa2 <optiga_main_logic+0xa6>
        }
        HAL_Delay(100);
 8003f46:	2064      	movs	r0, #100	@ 0x64
 8003f48:	f002 ffca 	bl	8006ee0 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003f4c:	e001      	b.n	8003f52 <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8003f4e:	f002 fc55 	bl	80067fc <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003f52:	4b18      	ldr	r3, [pc, #96]	@ (8003fb4 <optiga_main_logic+0xb8>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d0f8      	beq.n	8003f4e <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 8003f5c:	2064      	movs	r0, #100	@ 0x64
 8003f5e:	f002 ffbf 	bl	8006ee0 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 8003f62:	4b14      	ldr	r3, [pc, #80]	@ (8003fb4 <optiga_main_logic+0xb8>)
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <optiga_main_logic+0x90>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8003f6c:	4813      	ldr	r0, [pc, #76]	@ (8003fbc <optiga_main_logic+0xc0>)
 8003f6e:	f009 f8b7 	bl	800d0e0 <puts>
            break;
 8003f72:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Turn ON LED if you want
 8003f74:	2201      	movs	r2, #1
 8003f76:	2120      	movs	r1, #32
 8003f78:	4811      	ldr	r0, [pc, #68]	@ (8003fc0 <optiga_main_logic+0xc4>)
 8003f7a:	f003 fe21 	bl	8007bc0 <HAL_GPIO_WritePin>

  //  example_optiga_util_write_data();

    HAL_Delay(3000);
 8003f7e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003f82:	f002 ffad 	bl	8006ee0 <HAL_Delay>
    example_optiga_util_read_data();
 8003f86:	f7fc fd85 	bl	8000a94 <example_optiga_util_read_data>
 8003f8a:	e00b      	b.n	8003fa4 <optiga_main_logic+0xa8>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <optiga_main_logic+0xb8>)
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	4619      	mov	r1, r3
 8003f94:	480b      	ldr	r0, [pc, #44]	@ (8003fc4 <optiga_main_logic+0xc8>)
 8003f96:	f009 f83b 	bl	800d010 <iprintf>
            HAL_Delay(2000);
 8003f9a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003f9e:	f002 ff9f 	bl	8006ee0 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003fa2:	e7c0      	b.n	8003f26 <optiga_main_logic+0x2a>
}
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	08003eb9 	.word	0x08003eb9
 8003fb0:	0800deb0 	.word	0x0800deb0
 8003fb4:	20000ad4 	.word	0x20000ad4
 8003fb8:	0800ded8 	.word	0x0800ded8
 8003fbc:	0800df18 	.word	0x0800df18
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	0800df44 	.word	0x0800df44

08003fc8 <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8003fd0:	4811      	ldr	r0, [pc, #68]	@ (8004018 <I2C_Scan+0x50>)
 8003fd2:	f009 f885 	bl	800d0e0 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	e013      	b.n	8004004 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	b299      	uxth	r1, r3
 8003fe4:	230a      	movs	r3, #10
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f004 fab1 	bl	8008550 <HAL_I2C_IsDeviceReady>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4808      	ldr	r0, [pc, #32]	@ (800401c <I2C_Scan+0x54>)
 8003ffa:	f009 f809 	bl	800d010 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	3301      	adds	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	dae7      	bge.n	8003fdc <I2C_Scan+0x14>
        }
    }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	0800df74 	.word	0x0800df74
 800401c:	0800df88 	.word	0x0800df88

08004020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004026:	f002 feb3 	bl	8006d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800402a:	f000 f893 	bl	8004154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800402e:	f000 f9ad 	bl	800438c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004032:	f000 f981 	bl	8004338 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004036:	f000 f905 	bl	8004244 <MX_I2C1_Init>
  MX_TIM2_Init();
 800403a:	f000 f931 	bl	80042a0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800403e:	f000 f8f5 	bl	800422c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8004042:	4836      	ldr	r0, [pc, #216]	@ (800411c <main+0xfc>)
 8004044:	f007 f9be 	bl	800b3c4 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	201c      	movs	r0, #28
 800404e:	f003 f85c 	bl	800710a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004052:	201c      	movs	r0, #28
 8004054:	f003 f875 	bl	8007142 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8004058:	2201      	movs	r2, #1
 800405a:	2120      	movs	r1, #32
 800405c:	4830      	ldr	r0, [pc, #192]	@ (8004120 <main+0x100>)
 800405e:	f003 fdaf 	bl	8007bc0 <HAL_GPIO_WritePin>

  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8004062:	2301      	movs	r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	4619      	mov	r1, r3
 8004068:	482e      	ldr	r0, [pc, #184]	@ (8004124 <main+0x104>)
 800406a:	f008 ffd1 	bl	800d010 <iprintf>
  GPIO_PinState OTA_Pin_state;
       uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 800406e:	f002 ff2b 	bl	8006ec8 <HAL_GetTick>
 8004072:	4603      	mov	r3, r0
 8004074:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8004078:	60fb      	str	r3, [r7, #12]

       printf("Press the User Button PC13 to trigger OTA update...\r\n");
 800407a:	482b      	ldr	r0, [pc, #172]	@ (8004128 <main+0x108>)
 800407c:	f009 f830 	bl	800d0e0 <puts>
       do
       {
         OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8004080:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004084:	4829      	ldr	r0, [pc, #164]	@ (800412c <main+0x10c>)
 8004086:	f003 fd83 	bl	8007b90 <HAL_GPIO_ReadPin>
 800408a:	4603      	mov	r3, r0
 800408c:	72fb      	strb	r3, [r7, #11]
         uint32_t current_tick = HAL_GetTick();
 800408e:	f002 ff1b 	bl	8006ec8 <HAL_GetTick>
 8004092:	6078      	str	r0, [r7, #4]

         /* Check the button is pressed or not for 3seconds */
         if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8004094:	7afb      	ldrb	r3, [r7, #11]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d104      	bne.n	80040a4 <main+0x84>
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d800      	bhi.n	80040a4 <main+0x84>
       {
 80040a2:	e7ed      	b.n	8004080 <main+0x60>
           break;
         }
       }while( 1 );

       /*Start the Firmware or Application update */
       if( OTA_Pin_state == GPIO_PIN_RESET )
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d111      	bne.n	80040ce <main+0xae>
       {
         printf("Starting Firmware Download!!!\r\n");
 80040aa:	4821      	ldr	r0, [pc, #132]	@ (8004130 <main+0x110>)
 80040ac:	f009 f818 	bl	800d0e0 <puts>
         /* OTA Request. Receive the data from the UART4 and flash */
         if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 80040b0:	f7fc fa5e 	bl	8000570 <etx_ota_download_and_flash>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <main+0xa4>
         {
           /* Error. Don't process. */
           printf("OTA Update : ERROR!!! HALT!!!\r\n");
 80040ba:	481e      	ldr	r0, [pc, #120]	@ (8004134 <main+0x114>)
 80040bc:	f009 f810 	bl	800d0e0 <puts>
           while( 1 );
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <main+0xa0>
         }
         else
         {
           /* Reset to load the new application */
           printf("Firmware update is done!!! Rebooting...\r\n");
 80040c4:	481c      	ldr	r0, [pc, #112]	@ (8004138 <main+0x118>)
 80040c6:	f009 f80b 	bl	800d0e0 <puts>
           HAL_NVIC_SystemReset();
 80040ca:	f003 f848 	bl	800715e <HAL_NVIC_SystemReset>
       }




      printf("Powering ON OPTIGA Trust M...\r\n");
 80040ce:	481b      	ldr	r0, [pc, #108]	@ (800413c <main+0x11c>)
 80040d0:	f009 f806 	bl	800d0e0 <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 80040d4:	481a      	ldr	r0, [pc, #104]	@ (8004140 <main+0x120>)
 80040d6:	f002 f91c 	bl	8006312 <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 80040da:	481a      	ldr	r0, [pc, #104]	@ (8004144 <main+0x124>)
 80040dc:	f009 f800 	bl	800d0e0 <puts>
      pal_gpio_set_low(&optiga_reset_0);
 80040e0:	4819      	ldr	r0, [pc, #100]	@ (8004148 <main+0x128>)
 80040e2:	f002 f926 	bl	8006332 <pal_gpio_set_low>
      HAL_Delay(10);
 80040e6:	200a      	movs	r0, #10
 80040e8:	f002 fefa 	bl	8006ee0 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 80040ec:	4816      	ldr	r0, [pc, #88]	@ (8004148 <main+0x128>)
 80040ee:	f002 f910 	bl	8006312 <pal_gpio_set_high>
      HAL_Delay(10);
 80040f2:	200a      	movs	r0, #10
 80040f4:	f002 fef4 	bl	8006ee0 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 80040f8:	4814      	ldr	r0, [pc, #80]	@ (800414c <main+0x12c>)
 80040fa:	f7ff ff65 	bl	8003fc8 <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 80040fe:	4814      	ldr	r0, [pc, #80]	@ (8004150 <main+0x130>)
 8004100:	f008 ffee 	bl	800d0e0 <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 8004104:	2064      	movs	r0, #100	@ 0x64
 8004106:	f002 feeb 	bl	8006ee0 <HAL_Delay>
      optiga_main_logic();
 800410a:	f7ff fef7 	bl	8003efc <optiga_main_logic>
      goto_application();
 800410e:	f000 f9b5 	bl	800447c <goto_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8004112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004116:	f002 fee3 	bl	8006ee0 <HAL_Delay>
 800411a:	e7fa      	b.n	8004112 <main+0xf2>
 800411c:	20000a44 	.word	0x20000a44
 8004120:	40020000 	.word	0x40020000
 8004124:	0800dfa4 	.word	0x0800dfa4
 8004128:	0800dfc4 	.word	0x0800dfc4
 800412c:	40020800 	.word	0x40020800
 8004130:	0800dffc 	.word	0x0800dffc
 8004134:	0800e01c 	.word	0x0800e01c
 8004138:	0800e03c 	.word	0x0800e03c
 800413c:	0800e068 	.word	0x0800e068
 8004140:	200004fc 	.word	0x200004fc
 8004144:	0800e088 	.word	0x0800e088
 8004148:	20000504 	.word	0x20000504
 800414c:	200009f0 	.word	0x200009f0
 8004150:	0800e0a0 	.word	0x0800e0a0

08004154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b094      	sub	sp, #80	@ 0x50
 8004158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800415a:	f107 0320 	add.w	r3, r7, #32
 800415e:	2230      	movs	r2, #48	@ 0x30
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f008 ffd4 	bl	800d110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004178:	2300      	movs	r3, #0
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	4b29      	ldr	r3, [pc, #164]	@ (8004224 <SystemClock_Config+0xd0>)
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <SystemClock_Config+0xd0>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004186:	6413      	str	r3, [r2, #64]	@ 0x40
 8004188:	4b26      	ldr	r3, [pc, #152]	@ (8004224 <SystemClock_Config+0xd0>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	4b23      	ldr	r3, [pc, #140]	@ (8004228 <SystemClock_Config+0xd4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80041a0:	4a21      	ldr	r2, [pc, #132]	@ (8004228 <SystemClock_Config+0xd4>)
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <SystemClock_Config+0xd4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041b4:	2302      	movs	r3, #2
 80041b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041b8:	2301      	movs	r3, #1
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041bc:	2310      	movs	r3, #16
 80041be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041c0:	2302      	movs	r3, #2
 80041c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041c4:	2300      	movs	r3, #0
 80041c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80041c8:	2310      	movs	r3, #16
 80041ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80041cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80041d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80041d2:	2304      	movs	r3, #4
 80041d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80041d6:	2307      	movs	r3, #7
 80041d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041da:	f107 0320 	add.w	r3, r7, #32
 80041de:	4618      	mov	r0, r3
 80041e0:	f006 fb3a 	bl	800a858 <HAL_RCC_OscConfig>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80041ea:	f000 f985 	bl	80044f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041ee:	230f      	movs	r3, #15
 80041f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041f2:	2302      	movs	r3, #2
 80041f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004204:	f107 030c 	add.w	r3, r7, #12
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f006 fd9c 	bl	800ad48 <HAL_RCC_ClockConfig>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004216:	f000 f96f 	bl	80044f8 <Error_Handler>
  }
}
 800421a:	bf00      	nop
 800421c:	3750      	adds	r7, #80	@ 0x50
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	40007000 	.word	0x40007000

0800422c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	201f      	movs	r0, #31
 8004236:	f002 ff68 	bl	800710a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800423a:	201f      	movs	r0, #31
 800423c:	f002 ff81 	bl	8007142 <HAL_NVIC_EnableIRQ>
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004248:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <MX_I2C1_Init+0x50>)
 800424a:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <MX_I2C1_Init+0x54>)
 800424c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800424e:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <MX_I2C1_Init+0x50>)
 8004250:	4a12      	ldr	r2, [pc, #72]	@ (800429c <MX_I2C1_Init+0x58>)
 8004252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004254:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <MX_I2C1_Init+0x50>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800425a:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <MX_I2C1_Init+0x50>)
 800425c:	2200      	movs	r2, #0
 800425e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004260:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <MX_I2C1_Init+0x50>)
 8004262:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004268:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <MX_I2C1_Init+0x50>)
 800426a:	2200      	movs	r2, #0
 800426c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800426e:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <MX_I2C1_Init+0x50>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004274:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <MX_I2C1_Init+0x50>)
 8004276:	2200      	movs	r2, #0
 8004278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800427a:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <MX_I2C1_Init+0x50>)
 800427c:	2200      	movs	r2, #0
 800427e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004280:	4804      	ldr	r0, [pc, #16]	@ (8004294 <MX_I2C1_Init+0x50>)
 8004282:	f003 fcdb 	bl	8007c3c <HAL_I2C_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800428c:	f000 f934 	bl	80044f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}
 8004294:	200009f0 	.word	0x200009f0
 8004298:	40005400 	.word	0x40005400
 800429c:	00061a80 	.word	0x00061a80

080042a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]
 80042b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b4:	463b      	mov	r3, r7
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80042c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042c6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80042ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042cc:	4b19      	ldr	r3, [pc, #100]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80042d2:	4b18      	ldr	r3, [pc, #96]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042d4:	2209      	movs	r2, #9
 80042d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042d8:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042de:	4b15      	ldr	r3, [pc, #84]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042e4:	4813      	ldr	r0, [pc, #76]	@ (8004334 <MX_TIM2_Init+0x94>)
 80042e6:	f007 f81d 	bl	800b324 <HAL_TIM_Base_Init>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80042f0:	f000 f902 	bl	80044f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4619      	mov	r1, r3
 8004300:	480c      	ldr	r0, [pc, #48]	@ (8004334 <MX_TIM2_Init+0x94>)
 8004302:	f007 f9b1 	bl	800b668 <HAL_TIM_ConfigClockSource>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800430c:	f000 f8f4 	bl	80044f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004310:	2300      	movs	r3, #0
 8004312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004318:	463b      	mov	r3, r7
 800431a:	4619      	mov	r1, r3
 800431c:	4805      	ldr	r0, [pc, #20]	@ (8004334 <MX_TIM2_Init+0x94>)
 800431e:	f007 fbb3 	bl	800ba88 <HAL_TIMEx_MasterConfigSynchronization>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004328:	f000 f8e6 	bl	80044f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000a44 	.word	0x20000a44

08004338 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 800433e:	4a12      	ldr	r2, [pc, #72]	@ (8004388 <MX_USART2_UART_Init+0x50>)
 8004340:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 8004344:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004348:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800434a:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 800435e:	220c      	movs	r2, #12
 8004360:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800436e:	4805      	ldr	r0, [pc, #20]	@ (8004384 <MX_USART2_UART_Init+0x4c>)
 8004370:	f007 fc0c 	bl	800bb8c <HAL_UART_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800437a:	f000 f8bd 	bl	80044f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000a8c 	.word	0x20000a8c
 8004388:	40004400 	.word	0x40004400

0800438c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004392:	f107 0314 	add.w	r3, r7, #20
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	4b32      	ldr	r3, [pc, #200]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	4a31      	ldr	r2, [pc, #196]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ce:	4b28      	ldr	r3, [pc, #160]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a23      	ldr	r2, [pc, #140]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <MX_GPIO_Init+0xe4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <MX_GPIO_Init+0xe4>)
 8004400:	f043 0302 	orr.w	r3, r3, #2
 8004404:	6313      	str	r3, [r2, #48]	@ 0x30
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <MX_GPIO_Init+0xe4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8004412:	2200      	movs	r2, #0
 8004414:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004418:	4816      	ldr	r0, [pc, #88]	@ (8004474 <MX_GPIO_Init+0xe8>)
 800441a:	f003 fbd1 	bl	8007bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800441e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004424:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800442e:	f107 0314 	add.w	r3, r7, #20
 8004432:	4619      	mov	r1, r3
 8004434:	4810      	ldr	r0, [pc, #64]	@ (8004478 <MX_GPIO_Init+0xec>)
 8004436:	f003 fa27 	bl	8007888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 800443a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 800443e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004440:	2301      	movs	r3, #1
 8004442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4619      	mov	r1, r3
 8004452:	4808      	ldr	r0, [pc, #32]	@ (8004474 <MX_GPIO_Init+0xe8>)
 8004454:	f003 fa18 	bl	8007888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2100      	movs	r1, #0
 800445c:	2028      	movs	r0, #40	@ 0x28
 800445e:	f002 fe54 	bl	800710a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004462:	2028      	movs	r0, #40	@ 0x28
 8004464:	f002 fe6d 	bl	8007142 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004468:	bf00      	nop
 800446a:	3728      	adds	r7, #40	@ 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40023800 	.word	0x40023800
 8004474:	40020000 	.word	0x40020000
 8004478:	40020800 	.word	0x40020800

0800447c <goto_application>:

/* USER CODE BEGIN 4 */
static void goto_application(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
    printf("Jumping to application...\r\n");
 8004482:	4817      	ldr	r0, [pc, #92]	@ (80044e0 <goto_application+0x64>)
 8004484:	f008 fe2c 	bl	800d0e0 <puts>
    HAL_Delay(1000);
 8004488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800448c:	f002 fd28 	bl	8006ee0 <HAL_Delay>

    uint32_t app_stack = *(volatile uint32_t*)ETX_APP_FLASH_ADDR;
 8004490:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <goto_application+0x68>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
    uint32_t app_reset_handler = *(volatile uint32_t*)(ETX_APP_FLASH_ADDR + 4);
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <goto_application+0x6c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60bb      	str	r3, [r7, #8]

    // Check if the app address is valid (optional safety check)
    if ((app_stack & 0x2FFE0000) != 0x20000000) {
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <goto_application+0x70>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044a6:	d003      	beq.n	80044b0 <goto_application+0x34>
        printf("Invalid application stack pointer.\r\n");
 80044a8:	4811      	ldr	r0, [pc, #68]	@ (80044f0 <goto_application+0x74>)
 80044aa:	f008 fe19 	bl	800d0e0 <puts>
        return;
 80044ae:	e014      	b.n	80044da <goto_application+0x5e>
    }

    // Deinit all HAL and peripherals
    HAL_RCC_DeInit();
 80044b0:	f006 fe6a 	bl	800b188 <HAL_RCC_DeInit>
    HAL_DeInit();
 80044b4:	f002 fc8e 	bl	8006dd4 <HAL_DeInit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044b8:	b672      	cpsid	i
}
 80044ba:	bf00      	nop
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f383 8808 	msr	MSP, r3
}
 80044c6:	bf00      	nop

    // Set main stack pointer
    __set_MSP(app_stack);

    // Set vector table location (important for interrupts to work correctly)
    SCB->VTOR = ETX_APP_FLASH_ADDR;
 80044c8:	4b0a      	ldr	r3, [pc, #40]	@ (80044f4 <goto_application+0x78>)
 80044ca:	4a06      	ldr	r2, [pc, #24]	@ (80044e4 <goto_application+0x68>)
 80044cc:	609a      	str	r2, [r3, #8]

    // Jump to application reset handler
    void (*app_entry)(void) = (void (*)(void))app_reset_handler;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	607b      	str	r3, [r7, #4]
    app_entry();
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4798      	blx	r3

    // Should never return here
    while(1);
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <goto_application+0x5a>
}
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	0800e0c4 	.word	0x0800e0c4
 80044e4:	08020000 	.word	0x08020000
 80044e8:	08020004 	.word	0x08020004
 80044ec:	2ffe0000 	.word	0x2ffe0000
 80044f0:	0800e0e0 	.word	0x0800e0e0
 80044f4:	e000ed00 	.word	0xe000ed00

080044f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80044fc:	b672      	cpsid	i
}
 80044fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004500:	bf00      	nop
 8004502:	e7fd      	b.n	8004500 <Error_Handler+0x8>

08004504 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
 8004510:	4613      	mov	r3, r2
 8004512:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8004514:	78bb      	ldrb	r3, [r7, #2]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d00e      	beq.n	8004538 <optiga_cmd_set_shielded_connection_option+0x34>
 800451a:	2b02      	cmp	r3, #2
 800451c:	dc10      	bgt.n	8004540 <optiga_cmd_set_shielded_connection_option+0x3c>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <optiga_cmd_set_shielded_connection_option+0x24>
 8004522:	2b01      	cmp	r3, #1
 8004524:	d004      	beq.n	8004530 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 8004526:	e00b      	b.n	8004540 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	769a      	strb	r2, [r3, #26]
        break;
 800452e:	e008      	b.n	8004542 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	76da      	strb	r2, [r3, #27]
        break;
 8004536:	e004      	b.n	8004542 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	771a      	strb	r2, [r3, #28]
        break;
 800453e:	e000      	b.n	8004542 <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8004540:	bf00      	nop
    }
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
 800455a:	460b      	mov	r3, r1
 800455c:	71bb      	strb	r3, [r7, #6]
 800455e:	4613      	mov	r3, r2
 8004560:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	79fa      	ldrb	r2, [r7, #7]
 8004566:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	79ba      	ldrb	r2, [r7, #6]
 800456e:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004570:	88bb      	ldrh	r3, [r7, #4]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29a      	uxth	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3302      	adds	r3, #2
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	3303      	adds	r3, #3
 8004582:	88ba      	ldrh	r2, [r7, #4]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 800459c:	2100      	movs	r1, #0
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 ff6e 	bl	8005480 <optiga_cmd_execute_handler>
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	460b      	mov	r3, r1
 80045ba:	72fb      	strb	r3, [r7, #11]
 80045bc:	4613      	mov	r3, r2
 80045be:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	7aba      	ldrb	r2, [r7, #10]
 80045ca:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	7e3a      	ldrb	r2, [r7, #24]
 80045d0:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	7afa      	ldrb	r2, [r7, #11]
 80045e2:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8c3a      	ldrh	r2, [r7, #32]
 80045e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80045ea:	2100      	movs	r1, #0
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 ff47 	bl	8005480 <optiga_cmd_execute_handler>
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3308      	adds	r3, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fc78 	bl	8005efc <optiga_common_get_uint32>
 800460c:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 8004614:	d201      	bcs.n	800461a <optiga_cmd_session_available+0x20>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <optiga_cmd_session_available+0x22>
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8a9b      	ldrh	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11d      	bne.n	8004678 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800463c:	2300      	movs	r3, #0
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e017      	b.n	8004672 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b10      	cmp	r3, #16
 800464c:	d00e      	beq.n	800466c <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	b21a      	sxth	r2, r3
 8004652:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <optiga_cmd_session_assign+0x60>)
 8004654:	4313      	orrs	r3, r2
 8004656:	b21b      	sxth	r3, r3
 8004658:	b29a      	uxth	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4413      	add	r3, r2
 8004664:	2210      	movs	r2, #16
 8004666:	701a      	strb	r2, [r3, #0]
                break;
 8004668:	bf00      	nop
            }
        }
    }
}
 800466a:	e005      	b.n	8004678 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	3301      	adds	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d9e4      	bls.n	8004642 <optiga_cmd_session_assign+0x1e>
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	ffffe100 	.word	0xffffe100

08004688 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8a9b      	ldrh	r3, [r3, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8a9b      	ldrh	r3, [r3, #20]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 80046b2:	7afb      	ldrb	r3, [r7, #11]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
    }
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
 80046d4:	4613      	mov	r3, r2
 80046d6:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	e027      	b.n	8004736 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d002      	beq.n	80046f2 <optiga_cmd_queue_get_count_of+0x2a>
 80046ec:	2b09      	cmp	r3, #9
 80046ee:	d00c      	beq.n	800470a <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 80046f0:	e017      	b.n	8004722 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	737b      	strb	r3, [r7, #13]
            break;
 8004708:	e00b      	b.n	8004722 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	737b      	strb	r3, [r7, #13]
            break;
 8004720:	bf00      	nop
        }
        if (state_to_check == slot_value)
 8004722:	78ba      	ldrb	r2, [r7, #2]
 8004724:	7b7b      	ldrb	r3, [r7, #13]
 8004726:	429a      	cmp	r2, r3
 8004728:	d102      	bne.n	8004730 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 800472a:	7bbb      	ldrb	r3, [r7, #14]
 800472c:	3301      	adds	r3, #1
 800472e:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	3301      	adds	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b05      	cmp	r3, #5
 800473a:	d9d4      	bls.n	80046e6 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 800473c:	7bbb      	ldrb	r3, [r7, #14]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004754:	2300      	movs	r3, #0
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e01f      	b.n	800479a <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10f      	bne.n	8004794 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	7bfa      	ldrb	r2, [r7, #15]
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
           break;
 8004792:	e006      	b.n	80047a2 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	3301      	adds	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b05      	cmp	r3, #5
 800479e:	d9dc      	bls.n	800475a <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7f9b      	ldrb	r3, [r3, #30]
 80047be:	4619      	mov	r1, r3
 80047c0:	460b      	mov	r3, r1
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	440b      	add	r3, r1
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7f9b      	ldrb	r3, [r3, #30]
 80047da:	4619      	mov	r1, r3
 80047dc:	460b      	mov	r3, r1
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	440b      	add	r3, r1
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	779a      	strb	r2, [r3, #30]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8004808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800480c:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 800480e:	23ff      	movs	r3, #255	@ 0xff
 8004810:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004820:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004822:	2202      	movs	r2, #2
 8004824:	2109      	movs	r1, #9
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff ff4e 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d107      	bne.n	8004842 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004832:	2208      	movs	r2, #8
 8004834:	2109      	movs	r1, #9
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f7ff ff46 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 800483c:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00f      	beq.n	8004862 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004842:	2204      	movs	r2, #4
 8004844:	2109      	movs	r1, #9
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7ff ff3e 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 800484c:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800484e:	2b01      	cmp	r3, #1
 8004850:	d10f      	bne.n	8004872 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 8004852:	2223      	movs	r2, #35	@ 0x23
 8004854:	2108      	movs	r1, #8
 8004856:	6978      	ldr	r0, [r7, #20]
 8004858:	f7ff ff36 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 800485c:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 8004862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	496d      	ldr	r1, [pc, #436]	@ (8004a20 <optiga_cmd_queue_scheduler+0x220>)
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f001 ff9a 	bl	80067a4 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8004870:	e0d2      	b.n	8004a18 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f001 ff70 	bl	8006758 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 8004878:	7e7b      	ldrb	r3, [r7, #25]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 8004886:	2300      	movs	r3, #0
 8004888:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800488a:	2300      	movs	r3, #0
 800488c:	76fb      	strb	r3, [r7, #27]
 800488e:	e05b      	b.n	8004948 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8004890:	7efa      	ldrb	r2, [r7, #27]
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4413      	add	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 80048a4:	2208      	movs	r2, #8
 80048a6:	2109      	movs	r1, #9
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f7ff ff0d 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d10d      	bne.n	80048d0 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	7a5b      	ldrb	r3, [r3, #9]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d142      	bne.n	8004942 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 80048c0:	2b23      	cmp	r3, #35	@ 0x23
 80048c2:	d13e      	bne.n	8004942 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 80048ca:	7efb      	ldrb	r3, [r7, #27]
 80048cc:	76bb      	strb	r3, [r7, #26]
 80048ce:	e038      	b.n	8004942 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	7a5b      	ldrb	r3, [r3, #9]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d134      	bne.n	8004942 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d201      	bcs.n	80048ea <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d326      	bcc.n	8004942 <optiga_cmd_queue_scheduler+0x142>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80048fe:	429a      	cmp	r2, r3
 8004900:	d31f      	bcc.n	8004942 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004906:	2b22      	cmp	r3, #34	@ 0x22
 8004908:	d105      	bne.n	8004916 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff fe75 	bl	80045fa <optiga_cmd_session_available>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d010      	beq.n	8004938 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800491a:	2b22      	cmp	r3, #34	@ 0x22
 800491c:	d104      	bne.n	8004928 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	8a9b      	ldrh	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d107      	bne.n	8004938 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800492c:	2b21      	cmp	r3, #33	@ 0x21
 800492e:	d003      	beq.n	8004938 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004934:	2b23      	cmp	r3, #35	@ 0x23
 8004936:	d104      	bne.n	8004942 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 800493e:	7efb      	ldrb	r3, [r7, #27]
 8004940:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004942:	7efb      	ldrb	r3, [r7, #27]
 8004944:	3301      	adds	r3, #1
 8004946:	76fb      	strb	r3, [r7, #27]
 8004948:	7efb      	ldrb	r3, [r7, #27]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d9a0      	bls.n	8004890 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 800494e:	7ebb      	ldrb	r3, [r7, #26]
 8004950:	2bff      	cmp	r3, #255	@ 0xff
 8004952:	d102      	bne.n	800495a <optiga_cmd_queue_scheduler+0x15a>
 8004954:	7e7b      	ldrb	r3, [r7, #25]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d08e      	beq.n	8004878 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 800495a:	7ebb      	ldrb	r3, [r7, #26]
 800495c:	2bff      	cmp	r3, #255	@ 0xff
 800495e:	d054      	beq.n	8004a0a <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 8004960:	7eba      	ldrb	r2, [r7, #26]
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004974:	7eba      	ldrb	r2, [r7, #26]
 8004976:	6979      	ldr	r1, [r7, #20]
 8004978:	4613      	mov	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b22      	cmp	r3, #34	@ 0x22
 800498a:	d111      	bne.n	80049b0 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8004996:	7eba      	ldrb	r2, [r7, #26]
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fe3a 	bl	8004624 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 80049b0:	7eba      	ldrb	r2, [r7, #26]
 80049b2:	6979      	ldr	r1, [r7, #20]
 80049b4:	4613      	mov	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80049ca:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 80049cc:	7eba      	ldrb	r2, [r7, #26]
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	4613      	mov	r3, r2
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	2332      	movs	r3, #50	@ 0x32
 80049e2:	4910      	ldr	r1, [pc, #64]	@ (8004a24 <optiga_cmd_queue_scheduler+0x224>)
 80049e4:	6938      	ldr	r0, [r7, #16]
 80049e6:	f001 fedd 	bl	80067a4 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 80049ea:	7eba      	ldrb	r2, [r7, #26]
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80049fc:	2204      	movs	r2, #4
 80049fe:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8004a08:	e006      	b.n	8004a18 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8004a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4903      	ldr	r1, [pc, #12]	@ (8004a20 <optiga_cmd_queue_scheduler+0x220>)
 8004a12:	6938      	ldr	r0, [r7, #16]
 8004a14:	f001 fec6 	bl	80067a4 <pal_os_event_register_callback_oneshot>
}
 8004a18:	bf00      	nop
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	08004801 	.word	0x08004801
 8004a24:	08004595 	.word	0x08004595

08004a28 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004a28:	b5b0      	push	{r4, r5, r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7f9b      	ldrb	r3, [r3, #30]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	460b      	mov	r3, r1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	440b      	add	r3, r1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b23      	cmp	r3, #35	@ 0x23
 8004a50:	d111      	bne.n	8004a76 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7f9b      	ldrb	r3, [r3, #30]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	440b      	add	r3, r1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004a6a:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004a6c:	2b23      	cmp	r3, #35	@ 0x23
 8004a6e:	d112      	bne.n	8004a96 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	2b23      	cmp	r3, #35	@ 0x23
 8004a74:	d00f      	beq.n	8004a96 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681c      	ldr	r4, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7f9b      	ldrb	r3, [r3, #30]
 8004a7e:	461d      	mov	r5, r3
 8004a80:	f001 ff4c 	bl	800691c <pal_os_timer_get_time_in_microseconds>
 8004a84:	4602      	mov	r2, r0
 8004a86:	462b      	mov	r3, r5
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	442b      	add	r3, r5
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4423      	add	r3, r4
 8004a90:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004a94:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	7f9b      	ldrb	r3, [r3, #30]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	440b      	add	r3, r1
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7f9b      	ldrb	r3, [r3, #30]
 8004aba:	4619      	mov	r1, r3
 8004abc:	460b      	mov	r3, r1
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	440b      	add	r3, r1
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b23      	cmp	r3, #35	@ 0x23
 8004ace:	d111      	bne.n	8004af4 <optiga_cmd_queue_update_slot+0xcc>
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2b23      	cmp	r3, #35	@ 0x23
 8004ad4:	d10e      	bne.n	8004af4 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7f9b      	ldrb	r3, [r3, #30]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	440b      	add	r3, r1
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004aee:	2208      	movs	r2, #8
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e00d      	b.n	8004b10 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7f9b      	ldrb	r3, [r3, #30]
 8004afc:	4619      	mov	r1, r3
 8004afe:	460b      	mov	r3, r1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	440b      	add	r3, r1
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7f9b      	ldrb	r3, [r3, #30]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	440b      	add	r3, r1
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	701a      	strb	r2, [r3, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bdb0      	pop	{r4, r5, r7, pc}

08004b34 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7f9b      	ldrb	r3, [r3, #30]
 8004b44:	4619      	mov	r1, r3
 8004b46:	460b      	mov	r3, r1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	440b      	add	r3, r1
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b58:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	7f9b      	ldrb	r3, [r3, #30]
 8004b62:	4619      	mov	r1, r3
 8004b64:	460b      	mov	r3, r1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	440b      	add	r3, r1
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7f9b      	ldrb	r3, [r3, #30]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	460b      	mov	r3, r1
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	440b      	add	r3, r1
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7f9b      	ldrb	r3, [r3, #30]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	440b      	add	r3, r1
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4903      	ldr	r1, [pc, #12]	@ (8004bcc <optiga_cmd_queue_reset_slot+0x98>)
 8004bbe:	f001 fdb3 	bl	8006728 <pal_os_event_start>
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08004801 	.word	0x08004801

08004bd0 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7f9b      	ldrb	r3, [r3, #30]
 8004be0:	4619      	mov	r1, r3
 8004be2:	460b      	mov	r3, r1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	440b      	add	r3, r1
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	7f9b      	ldrb	r3, [r3, #30]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	460b      	mov	r3, r1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	440b      	add	r3, r1
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004c24:	2122      	movs	r1, #34	@ 0x22
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff fefe 	bl	8004a28 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff fd22 	bl	8004688 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fee2 	bl	8004a28 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ff5c 	bl	8004b34 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8004c8e:	f240 2302 	movw	r3, #514	@ 0x202
 8004c92:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d011      	beq.n	8004cc0 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004cac:	f107 020c 	add.w	r2, r7, #12
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f001 fcb1 	bl	8006618 <pal_os_datastore_read>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11a      	bne.n	8004cf6 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f917 	bl	8005efc <optiga_common_get_uint32>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f90d 	bl	8005efc <optiga_common_get_uint32>
 8004ce2:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d103      	bne.n	8004cf0 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8004ce8:	f240 2302 	movw	r3, #514	@ 0x202
 8004cec:	81fb      	strh	r3, [r7, #14]
            break;
 8004cee:	e003      	b.n	8004cf8 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	81fb      	strh	r3, [r7, #14]
 8004cf4:	e000      	b.n	8004cf8 <optiga_cmd_restore_context+0x72>
                break;
 8004cf6:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8004cf8:	89fb      	ldrh	r3, [r7, #14]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	7e5b      	ldrb	r3, [r3, #25]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d029      	beq.n	8004d6a <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004d1a:	2b22      	cmp	r3, #34	@ 0x22
 8004d1c:	d125      	bne.n	8004d6a <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004d26:	2208      	movs	r2, #8
 8004d28:	2100      	movs	r1, #0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fdde 	bl	80068ec <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004d34:	2b33      	cmp	r3, #51	@ 0x33
 8004d36:	d118      	bne.n	8004d6a <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d014      	beq.n	8004d6a <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f001 fbe4 	bl	800651c <pal_os_datastore_write>
 8004d54:	4603      	mov	r3, r0
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8c1b      	ldrh	r3, [r3, #32]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2204      	movs	r2, #4
 8004d68:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7ddb      	ldrb	r3, [r3, #23]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d05f      	beq.n	8004e4c <optiga_cmd_execute_comms_open+0xd8>
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	dc6d      	bgt.n	8004e6c <optiga_cmd_execute_comms_open+0xf8>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <optiga_cmd_execute_comms_open+0x26>
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d01b      	beq.n	8004dd0 <optiga_cmd_execute_comms_open+0x5c>
 8004d98:	e068      	b.n	8004e6c <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004d9a:	2121      	movs	r1, #33	@ 0x21
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ff56 	bl	8004c4e <optiga_cmd_request_lock>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8c1b      	ldrh	r3, [r3, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	759a      	strb	r2, [r3, #22]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f240 2202 	movw	r2, #514	@ 0x202
 8004dbe:	841a      	strh	r2, [r3, #32]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
                    break;
 8004dc6:	e05c      	b.n	8004e82 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	75da      	strb	r2, [r3, #23]
                break;
 8004dce:	e058      	b.n	8004e82 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	7e92      	ldrb	r2, [r2, #26]
 8004dda:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	7ed2      	ldrb	r2, [r2, #27]
 8004de6:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	7f12      	ldrb	r2, [r2, #28]
 8004df2:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004e02:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 ff4e 	bl	8005cae <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 ff57 	bl	8005ccc <optiga_comms_open>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8c1b      	ldrh	r3, [r3, #32]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2204      	movs	r2, #4
 8004e32:	759a      	strb	r2, [r3, #22]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f240 2202 	movw	r2, #514	@ 0x202
 8004e3a:	841a      	strh	r2, [r3, #32]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
                    break;
 8004e42:	e01e      	b.n	8004e82 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	75da      	strb	r2, [r3, #23]
                break;
 8004e4a:	e01a      	b.n	8004e82 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004e54:	2332      	movs	r3, #50	@ 0x32
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4910      	ldr	r1, [pc, #64]	@ (8004e9c <optiga_cmd_execute_comms_open+0x128>)
 8004e5a:	f001 fca3 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2202      	movs	r2, #2
 8004e62:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2209      	movs	r2, #9
 8004e68:	75da      	strb	r2, [r3, #23]
                break;
 8004e6a:	e00a      	b.n	8004e82 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	759a      	strb	r2, [r3, #22]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f240 2202 	movw	r2, #514	@ 0x202
 8004e78:	841a      	strh	r2, [r3, #32]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
            break;
 8004e80:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <optiga_cmd_execute_comms_open+0x120>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7d9b      	ldrb	r3, [r3, #22]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f43f af75 	beq.w	8004d7e <optiga_cmd_execute_comms_open+0xa>
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08004595 	.word	0x08004595

08004ea0 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	7ddb      	ldrb	r3, [r3, #23]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d002      	beq.n	8004ebe <optiga_cmd_execute_comms_close+0x1e>
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d068      	beq.n	8004f8e <optiga_cmd_execute_comms_close+0xee>
 8004ebc:	e07a      	b.n	8004fb4 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7f1b      	ldrb	r3, [r3, #28]
 8004ec2:	2b22      	cmp	r3, #34	@ 0x22
 8004ec4:	d002      	beq.n	8004ecc <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	7e92      	ldrb	r2, [r2, #26]
 8004ed6:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	7ed2      	ldrb	r2, [r2, #27]
 8004ee2:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	7f12      	ldrb	r2, [r2, #28]
 8004efa:	751a      	strb	r2, [r3, #20]
 8004efc:	e004      	b.n	8004f08 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2233      	movs	r2, #51	@ 0x33
 8004f06:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004f26:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 febc 	bl	8005cae <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 ff43 	bl	8005dc8 <optiga_comms_close>
 8004f42:	4603      	mov	r3, r0
 8004f44:	461a      	mov	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8c1b      	ldrh	r3, [r3, #32]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	759a      	strb	r2, [r3, #22]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f240 2202 	movw	r2, #514	@ 0x202
 8004f5e:	841a      	strh	r2, [r3, #32]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
                    break;
 8004f66:	e031      	b.n	8004fcc <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7f1b      	ldrb	r3, [r3, #28]
 8004f6c:	2b22      	cmp	r3, #34	@ 0x22
 8004f6e:	d106      	bne.n	8004f7e <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2204      	movs	r2, #4
 8004f74:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004f7c:	e026      	b.n	8004fcc <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fe75 	bl	8004c6e <optiga_cmd_release_lock>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	841a      	strh	r2, [r3, #32]
                break;
 8004f8c:	e01e      	b.n	8004fcc <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68d2      	ldr	r2, [r2, #12]
 8004f96:	2100      	movs	r1, #0
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	7f1b      	ldrb	r3, [r3, #28]
 8004fa0:	2b22      	cmp	r3, #34	@ 0x22
 8004fa2:	d112      	bne.n	8004fca <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fe62 	bl	8004c6e <optiga_cmd_release_lock>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004fb2:	e00a      	b.n	8004fca <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	759a      	strb	r2, [r3, #22]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f240 2202 	movw	r2, #514	@ 0x202
 8004fc0:	841a      	strh	r2, [r3, #32]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
            break;
 8004fc8:	e000      	b.n	8004fcc <optiga_cmd_execute_comms_close+0x12c>
                break;
 8004fca:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <optiga_cmd_execute_comms_close+0x13e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	7d9b      	ldrb	r3, [r3, #22]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f43f af66 	beq.w	8004eaa <optiga_cmd_execute_comms_close+0xa>
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7ddb      	ldrb	r3, [r3, #23]
 8004ffc:	3b05      	subs	r3, #5
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	f200 80d6 	bhi.w	80051b0 <optiga_cmd_execute_prepare_command+0x1c8>
 8005004:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <optiga_cmd_execute_prepare_command+0x24>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005021 	.word	0x08005021
 8005010:	08005021 	.word	0x08005021
 8005014:	08005075 	.word	0x08005075
 8005018:	08005089 	.word	0x08005089
 800501c:	080050c5 	.word	0x080050c5
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	7ddb      	ldrb	r3, [r3, #23]
 800502a:	2b05      	cmp	r3, #5
 800502c:	d107      	bne.n	800503e <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fdf4 	bl	8004c1c <optiga_cmd_request_session>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	841a      	strh	r2, [r3, #32]
 800503c:	e007      	b.n	800504e <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800503e:	2121      	movs	r1, #33	@ 0x21
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fe04 	bl	8004c4e <optiga_cmd_request_lock>
 8005046:	4603      	mov	r3, r0
 8005048:	461a      	mov	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8c1b      	ldrh	r3, [r3, #32]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	759a      	strb	r2, [r3, #22]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f240 2202 	movw	r2, #514	@ 0x202
 8005062:	841a      	strh	r2, [r3, #32]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
                    break;
 800506a:	e0ac      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2209      	movs	r2, #9
 8005070:	75da      	strb	r2, [r3, #23]
                break;
 8005072:	e0a8      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fdab 	bl	8004bd0 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
                break;
 8005086:	e09e      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8005088:	2123      	movs	r1, #35	@ 0x23
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7ff fddf 	bl	8004c4e <optiga_cmd_request_lock>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8c1b      	ldrh	r3, [r3, #32]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2204      	movs	r2, #4
 80050a4:	759a      	strb	r2, [r3, #22]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f240 2202 	movw	r2, #514	@ 0x202
 80050ac:	841a      	strh	r2, [r3, #32]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	701a      	strb	r2, [r3, #0]
                    break;
 80050b4:	e087      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2209      	movs	r2, #9
 80050ba:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]
                break;
 80050c2:	e080      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8c1b      	ldrh	r3, [r3, #32]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d006      	beq.n	80050ee <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
                    break;
 80050ec:	e06b      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f240 6222 	movw	r2, #1570	@ 0x622
 80050f6:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	7e92      	ldrb	r2, [r2, #26]
 8005102:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	7ed2      	ldrb	r2, [r2, #27]
 800510e:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7e9a      	ldrb	r2, [r3, #26]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fdbc 	bl	8005cae <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005148:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005156:	3306      	adds	r3, #6
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4623      	mov	r3, r4
 800515c:	f000 fdee 	bl	8005d3c <optiga_comms_transceive>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8c1b      	ldrh	r3, [r3, #32]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	759a      	strb	r2, [r3, #22]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f240 2202 	movw	r2, #514	@ 0x202
 800517c:	841a      	strh	r2, [r3, #32]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
                    break;
 8005184:	e01f      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2203      	movs	r2, #3
 800518a:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	220a      	movs	r2, #10
 8005190:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	7f5b      	ldrb	r3, [r3, #29]
 8005196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519a:	b2da      	uxtb	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	775a      	strb	r2, [r3, #29]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7f5b      	ldrb	r3, [r3, #29]
 80051a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	775a      	strb	r2, [r3, #29]
                break;
 80051ae:	e00a      	b.n	80051c6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2204      	movs	r2, #4
 80051b4:	759a      	strb	r2, [r3, #22]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f240 2202 	movw	r2, #514	@ 0x202
 80051bc:	841a      	strh	r2, [r3, #32]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2200      	movs	r2, #0
 80051c2:	701a      	strb	r2, [r3, #0]
            break;
 80051c4:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d104      	bne.n	80051d8 <optiga_cmd_execute_prepare_command+0x1f0>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7d9b      	ldrb	r3, [r3, #22]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	f43f af10 	beq.w	8004ff8 <optiga_cmd_execute_prepare_command+0x10>
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd90      	pop	{r4, r7, pc}

080051e0 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa69 	bl	80056c8 <optiga_cmd_get_error_code_handler>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8c1b      	ldrh	r3, [r3, #32]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <optiga_cmd_execute_get_device_error+0x30>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	8c1b      	ldrh	r3, [r3, #32]
 800520a:	b21b      	sxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	da0a      	bge.n	8005226 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005218:	d10c      	bne.n	8005234 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	7f5b      	ldrb	r3, [r3, #29]
 800521e:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8005222:	2b03      	cmp	r3, #3
 8005224:	d106      	bne.n	8005234 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2204      	movs	r2, #4
 800522a:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
            break;
 8005232:	bf00      	nop
        }
    } while (FALSE);
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7f5b      	ldrb	r3, [r3, #29]
 8005256:	b25b      	sxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	da0b      	bge.n	8005274 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8c1b      	ldrh	r3, [r3, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d14e      	bne.n	8005310 <optiga_cmd_execute_process_optiga_response+0xd4>
 8005272:	e006      	b.n	8005282 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2204      	movs	r2, #4
 8005278:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
            break;
 8005280:	e06f      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2bf1      	cmp	r3, #241	@ 0xf1
 800528a:	d113      	bne.n	80052b4 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005294:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4934      	ldr	r1, [pc, #208]	@ (800536c <optiga_cmd_execute_process_optiga_response+0x130>)
 800529c:	f001 fa82 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 80052b2:	e056      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7e1b      	ldrb	r3, [r3, #24]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10e      	bne.n	80052da <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7ddb      	ldrb	r3, [r3, #23]
 80052c0:	2b0e      	cmp	r3, #14
 80052c2:	d006      	beq.n	80052d2 <optiga_cmd_execute_process_optiga_response+0x96>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7ddb      	ldrb	r3, [r3, #23]
 80052c8:	2b0d      	cmp	r3, #13
 80052ca:	d002      	beq.n	80052d2 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	220c      	movs	r2, #12
 80052d0:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
                    break;
 80052d8:	e043      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80052e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4920      	ldr	r1, [pc, #128]	@ (800536c <optiga_cmd_execute_process_optiga_response+0x130>)
 80052ea:	f001 fa5b 	bl	80067a4 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7e9b      	ldrb	r3, [r3, #26]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2209      	movs	r2, #9
 800530c:	75da      	strb	r2, [r3, #23]
}
 800530e:	e028      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8c1b      	ldrh	r3, [r3, #32]
 8005314:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8005318:	d106      	bne.n	8005328 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	220c      	movs	r2, #12
 800531e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
                break;
 8005326:	e01c      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7ddb      	ldrb	r3, [r3, #23]
 800532c:	2b0d      	cmp	r3, #13
 800532e:	d103      	bne.n	8005338 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
}
 8005336:	e014      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	220b      	movs	r2, #11
 800533c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	7f5b      	ldrb	r3, [r3, #29]
 8005342:	f023 0303 	bic.w	r3, r3, #3
 8005346:	b2da      	uxtb	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	775a      	strb	r2, [r3, #29]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	7f5b      	ldrb	r3, [r3, #29]
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	b2da      	uxtb	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
}
 8005360:	e7ff      	b.n	8005362 <optiga_cmd_execute_process_optiga_response+0x126>
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	08004595 	.word	0x08004595

08005370 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7ddb      	ldrb	r3, [r3, #23]
 800537e:	3b0a      	subs	r3, #10
 8005380:	2b04      	cmp	r3, #4
 8005382:	d84d      	bhi.n	8005420 <optiga_cmd_execute_process_response+0xb0>
 8005384:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <optiga_cmd_execute_process_response+0x1c>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053ab 	.word	0x080053ab
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053b5 	.word	0x080053b5
 800539c:	08005409 	.word	0x08005409
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff ff4a 	bl	800523c <optiga_cmd_execute_process_optiga_response>
                break;
 80053a8:	e045      	b.n	8005436 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ff17 	bl	80051e0 <optiga_cmd_execute_get_device_error>
                break;
 80053b2:	e040      	b.n	8005436 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fc3e 	bl	8004c36 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8c1b      	ldrh	r3, [r3, #32]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	220c      	movs	r2, #12
 80053c6:	75da      	strb	r2, [r3, #23]
 80053c8:	e010      	b.n	80053ec <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	220b      	movs	r2, #11
 80053ce:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7f5b      	ldrb	r3, [r3, #29]
 80053d4:	f023 0303 	bic.w	r3, r3, #3
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	775a      	strb	r2, [r3, #29]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	7f5b      	ldrb	r3, [r3, #29]
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
                break;
 80053f2:	e020      	b.n	8005436 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fc3a 	bl	8004c6e <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	220e      	movs	r2, #14
 80053fe:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
                break;
 8005406:	e016      	b.n	8005436 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68d0      	ldr	r0, [r2, #12]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	8c12      	ldrh	r2, [r2, #32]
 8005414:	4611      	mov	r1, r2
 8005416:	4798      	blx	r3
                *exit_loop = TRUE;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
                break;
 800541e:	e00a      	b.n	8005436 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2204      	movs	r2, #4
 8005424:	759a      	strb	r2, [r3, #22]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f240 2202 	movw	r2, #514	@ 0x202
 800542c:	841a      	strh	r2, [r3, #32]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
            break;
 8005434:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <optiga_cmd_execute_process_response+0xd6>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	7d9b      	ldrb	r3, [r3, #22]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d099      	beq.n	800537a <optiga_cmd_execute_process_response+0xa>
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop

08005450 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fc07 	bl	8004c6e <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68d0      	ldr	r0, [r2, #12]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	8c12      	ldrh	r2, [r2, #32]
 800546c:	4611      	mov	r1, r2
 800546e:	4798      	blx	r3
        *exit_loop = TRUE;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fc31 	bl	8004d02 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2204      	movs	r2, #4
 80054a4:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	887a      	ldrh	r2, [r7, #2]
 80054aa:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	7d9b      	ldrb	r3, [r3, #22]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d830      	bhi.n	8005516 <optiga_cmd_execute_handler+0x96>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <optiga_cmd_execute_handler+0x3c>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054d1 	.word	0x080054d1
 80054c0:	080054df 	.word	0x080054df
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	080054fb 	.word	0x080054fb
 80054cc:	08005509 	.word	0x08005509
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 80054d0:	f107 030b 	add.w	r3, r7, #11
 80054d4:	4619      	mov	r1, r3
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff fc4c 	bl	8004d74 <optiga_cmd_execute_comms_open>
                break;
 80054dc:	e01c      	b.n	8005518 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 80054de:	f107 030b 	add.w	r3, r7, #11
 80054e2:	4619      	mov	r1, r3
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fcdb 	bl	8004ea0 <optiga_cmd_execute_comms_close>
                break;
 80054ea:	e015      	b.n	8005518 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 80054ec:	f107 030b 	add.w	r3, r7, #11
 80054f0:	4619      	mov	r1, r3
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f7ff fd78 	bl	8004fe8 <optiga_cmd_execute_prepare_command>
                break;
 80054f8:	e00e      	b.n	8005518 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 80054fa:	f107 030b 	add.w	r3, r7, #11
 80054fe:	4619      	mov	r1, r3
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7ff ff35 	bl	8005370 <optiga_cmd_execute_process_response>
                break;
 8005506:	e007      	b.n	8005518 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8005508:	f107 030b 	add.w	r3, r7, #11
 800550c:	4619      	mov	r1, r3
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff9e 	bl	8005450 <optiga_cmd_execute_error_handler>
                break;
 8005514:	e000      	b.n	8005518 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 8005516:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8005518:	7afb      	ldrb	r3, [r7, #11]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0c6      	beq.n	80054ac <optiga_cmd_execute_handler+0x2c>
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 800553a:	f001 f9a1 	bl	8006880 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d15b      	bne.n	80055fc <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <optiga_cmd_create+0xec>)
 8005548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800554c:	2200      	movs	r2, #0
 800554e:	2109      	movs	r1, #9
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff f8b9 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d051      	beq.n	8005600 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 800555c:	2128      	movs	r1, #40	@ 0x28
 800555e:	2001      	movs	r0, #1
 8005560:	f001 f99c 	bl	800689c <pal_os_calloc>
 8005564:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d04b      	beq.n	8005604 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	4a26      	ldr	r2, [pc, #152]	@ (8005614 <optiga_cmd_create+0xec>)
 800557c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	4a24      	ldr	r2, [pc, #144]	@ (8005618 <optiga_cmd_create+0xf0>)
 8005588:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	7b1b      	ldrb	r3, [r3, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d129      	bne.n	80055ee <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681c      	ldr	r4, [r3, #0]
 80055a2:	4611      	mov	r1, r2
 80055a4:	481d      	ldr	r0, [pc, #116]	@ (800561c <optiga_cmd_create+0xf4>)
 80055a6:	f001 f8e5 	bl	8006774 <pal_os_event_create>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681c      	ldr	r4, [r3, #0]
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	481a      	ldr	r0, [pc, #104]	@ (8005620 <optiga_cmd_create+0xf8>)
 80055b8:	f000 fb3c 	bl	8005c34 <optiga_comms_create>
 80055bc:	4603      	mov	r3, r0
 80055be:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 80055ca:	6978      	ldr	r0, [r7, #20]
 80055cc:	f001 f974 	bl	80068b8 <pal_os_free>
                me = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]
                break;
 80055d4:	e017      	b.n	8005606 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 80055ec:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	331e      	adds	r3, #30
 80055f2:	4619      	mov	r1, r3
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	f7ff f8a8 	bl	800474a <optiga_cmd_queue_assign_slot>
 80055fa:	e004      	b.n	8005606 <optiga_cmd_create+0xde>
            break;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <optiga_cmd_create+0xde>
            break;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <optiga_cmd_create+0xde>
            break;
 8005604:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8005606:	f001 f942 	bl	800688e <pal_os_lock_exit_critical_section>
    return (me);
 800560a:	697b      	ldr	r3, [r7, #20]
}
 800560c:	4618      	mov	r0, r3
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	bd90      	pop	{r4, r7, pc}
 8005614:	200004cc 	.word	0x200004cc
 8005618:	200004d0 	.word	0x200004d0
 800561c:	08004801 	.word	0x08004801
 8005620:	08005481 	.word	0x08005481

08005624 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800562c:	f240 2302 	movw	r3, #514	@ 0x202
 8005630:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 8005632:	f001 f925 	bl	8006880 <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d03c      	beq.n	80056b6 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff fafa 	bl	8004c36 <optiga_cmd_release_session>
 8005642:	4603      	mov	r3, r0
 8005644:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff f8b1 	bl	80047ae <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 800564c:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <optiga_cmd_destroy+0xa0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	2109      	movs	r1, #9
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff f837 	bl	80046c8 <optiga_cmd_queue_get_count_of>
 800565a:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 800565c:	2b06      	cmp	r3, #6
 800565e:	d125      	bne.n	80056ac <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	7b1b      	ldrb	r3, [r3, #12]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d120      	bne.n	80056ac <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f870 	bl	8006758 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 faf5 	bl	8005c80 <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 f8e0 	bl	800686c <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 f903 	bl	80068b8 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 80056b2:	2300      	movs	r3, #0
 80056b4:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 80056b6:	f001 f8ea 	bl	800688e <pal_os_lock_exit_critical_section>

    return (return_status);
 80056ba:	89fb      	ldrh	r3, [r7, #14]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	200004cc 	.word	0x200004cc

080056c8 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 80056d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056d4:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80056d6:	2309      	movs	r3, #9
 80056d8:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	7f5b      	ldrb	r3, [r3, #29]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	f000 8099 	beq.w	8005820 <optiga_cmd_get_error_code_handler+0x158>
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	f300 80b6 	bgt.w	8005860 <optiga_cmd_get_error_code_handler+0x198>
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <optiga_cmd_get_error_code_handler+0x36>
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d052      	beq.n	80057a2 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 80056fc:	e0b0      	b.n	8005860 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f103 020d 	add.w	r2, r3, #13
 8005706:	89bb      	ldrh	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fbbc 	bl	8005e8c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005714:	89bb      	ldrh	r3, [r7, #12]
 8005716:	3302      	adds	r3, #2
 8005718:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f103 020d 	add.w	r2, r3, #13
 8005722:	89bb      	ldrh	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fbaf 	bl	8005e8c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800572e:	89bb      	ldrh	r3, [r7, #12]
 8005730:	3302      	adds	r3, #2
 8005732:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f103 020d 	add.w	r2, r3, #13
 800573c:	89bb      	ldrh	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	2101      	movs	r1, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fba2 	bl	8005e8c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005748:	89bb      	ldrh	r3, [r7, #12]
 800574a:	3302      	adds	r3, #2
 800574c:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800574e:	89bb      	ldrh	r3, [r7, #12]
 8005750:	3b09      	subs	r3, #9
 8005752:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800575a:	3305      	adds	r3, #5
 800575c:	2100      	movs	r1, #0
 800575e:	2001      	movs	r0, #1
 8005760:	f7fe fef5 	bl	800454e <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	89ba      	ldrh	r2, [r7, #12]
 800576a:	3a05      	subs	r2, #5
 800576c:	b292      	uxth	r2, r2
 800576e:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7f5b      	ldrb	r3, [r3, #29]
 8005774:	f023 0303 	bic.w	r3, r3, #3
 8005778:	b2da      	uxtb	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	775a      	strb	r2, [r3, #29]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7f5b      	ldrb	r3, [r3, #29]
 8005782:	f043 0302 	orr.w	r3, r3, #2
 8005786:	b2da      	uxtb	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	4935      	ldr	r1, [pc, #212]	@ (8005870 <optiga_cmd_get_error_code_handler+0x1a8>)
 800579c:	f001 f802 	bl	80067a4 <pal_os_event_register_callback_oneshot>
        break;
 80057a0:	e061      	b.n	8005866 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f240 6222 	movw	r2, #1570	@ 0x622
 80057aa:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	7e92      	ldrb	r2, [r2, #26]
 80057b6:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	7ed2      	ldrb	r2, [r2, #27]
 80057c2:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fa6f 	bl	8005cae <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	3306      	adds	r3, #6
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	4623      	mov	r3, r4
 80057ec:	f000 faa6 	bl	8005d3c <optiga_comms_transceive>
 80057f0:	4603      	mov	r3, r0
 80057f2:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 80057f4:	89fb      	ldrh	r3, [r7, #14]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 80057fa:	f240 2302 	movw	r3, #514	@ 0x202
 80057fe:	81fb      	strh	r3, [r7, #14]
                break;
 8005800:	e031      	b.n	8005866 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7f5b      	ldrb	r3, [r3, #29]
 8005806:	f023 0303 	bic.w	r3, r3, #3
 800580a:	b2da      	uxtb	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	775a      	strb	r2, [r3, #29]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7f5b      	ldrb	r3, [r3, #29]
 8005814:	f043 0303 	orr.w	r3, r3, #3
 8005818:	b2da      	uxtb	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	775a      	strb	r2, [r3, #29]
        break;
 800581e:	e022      	b.n	8005866 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	7c9b      	ldrb	r3, [r3, #18]
 8005826:	2bff      	cmp	r3, #255	@ 0xff
 8005828:	d01c      	beq.n	8005864 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	7d9b      	ldrb	r3, [r3, #22]
 8005830:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005832:	89fb      	ldrh	r3, [r7, #14]
 8005834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583c:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2203      	movs	r2, #3
 8005842:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	220a      	movs	r2, #10
 8005848:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4905      	ldr	r1, [pc, #20]	@ (8005870 <optiga_cmd_get_error_code_handler+0x1a8>)
 800585a:	f000 ffa3 	bl	80067a4 <pal_os_event_register_callback_oneshot>
        break;
 800585e:	e002      	b.n	8005866 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005860:	bf00      	nop
 8005862:	e000      	b.n	8005866 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005864:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005866:	89fb      	ldrh	r3, [r7, #14]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bd90      	pop	{r4, r7, pc}
 8005870:	08004595 	.word	0x08004595

08005874 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800587c:	f240 2302 	movw	r3, #514	@ 0x202
 8005880:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	7d9b      	ldrb	r3, [r3, #22]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d002      	beq.n	8005890 <optiga_cmd_open_application_handler+0x1c>
 800588a:	2b03      	cmp	r3, #3
 800588c:	d075      	beq.n	800597a <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 800588e:	e08e      	b.n	80059ae <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8005890:	2314      	movs	r3, #20
 8005892:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7e5b      	ldrb	r3, [r3, #25]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <optiga_cmd_open_application_handler+0x2c>
 800589c:	2200      	movs	r2, #0
 800589e:	e000      	b.n	80058a2 <optiga_cmd_open_application_handler+0x2e>
 80058a0:	2208      	movs	r2, #8
 80058a2:	89bb      	ldrh	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80058a8:	89bb      	ldrh	r3, [r7, #12]
 80058aa:	f240 6215 	movw	r2, #1557	@ 0x615
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d903      	bls.n	80058ba <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80058b2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80058b6:	81fb      	strh	r3, [r7, #14]
                break;
 80058b8:	e079      	b.n	80059ae <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7e5b      	ldrb	r3, [r3, #25]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff f9df 	bl	8004c86 <optiga_cmd_restore_context>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d16e      	bne.n	80059ac <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <optiga_cmd_open_application_handler+0x6a>
 80058da:	2210      	movs	r2, #16
 80058dc:	e000      	b.n	80058e0 <optiga_cmd_open_application_handler+0x6c>
 80058de:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80058e6:	3305      	adds	r3, #5
 80058e8:	20f0      	movs	r0, #240	@ 0xf0
 80058ea:	f7fe fe30 	bl	800454e <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330d      	adds	r3, #13
 80058f4:	3309      	adds	r3, #9
 80058f6:	2210      	movs	r2, #16
 80058f8:	492f      	ldr	r1, [pc, #188]	@ (80059b8 <optiga_cmd_open_application_handler+0x144>)
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 ffe7 	bl	80068ce <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	7e5b      	ldrb	r3, [r3, #25]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005918:	2208      	movs	r2, #8
 800591a:	4619      	mov	r1, r3
 800591c:	f000 ffd7 	bl	80068ce <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <optiga_cmd_open_application_handler+0xb8>
 8005928:	2214      	movs	r2, #20
 800592a:	e000      	b.n	800592e <optiga_cmd_open_application_handler+0xba>
 800592c:	221c      	movs	r2, #28
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800593c:	2208      	movs	r2, #8
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f000 ffd3 	bl	80068ec <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800594a:	2b00      	cmp	r3, #0
 800594c:	d012      	beq.n	8005974 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800595a:	2208      	movs	r2, #8
 800595c:	4619      	mov	r1, r3
 800595e:	f000 fddd 	bl	800651c <pal_os_datastore_write>
 8005962:	4603      	mov	r3, r0
 8005964:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 800596c:	f240 2302 	movw	r3, #514	@ 0x202
 8005970:	81fb      	strh	r3, [r7, #14]
                    break;
 8005972:	e01c      	b.n	80059ae <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 8005974:	2300      	movs	r3, #0
 8005976:	81fb      	strh	r3, [r7, #14]
        break;
 8005978:	e019      	b.n	80059ae <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	7c9b      	ldrb	r3, [r3, #18]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7f5b      	ldrb	r3, [r3, #29]
 8005988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800598c:	b2da      	uxtb	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	775a      	strb	r2, [r3, #29]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7f5a      	ldrb	r2, [r3, #29]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	775a      	strb	r2, [r3, #29]
                break;
 800599a:	e008      	b.n	80059ae <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2233      	movs	r2, #51	@ 0x33
 80059a4:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 80059a6:	2300      	movs	r3, #0
 80059a8:	81fb      	strh	r3, [r7, #14]
        break;
 80059aa:	e000      	b.n	80059ae <optiga_cmd_open_application_handler+0x13a>
                    break;
 80059ac:	bf00      	nop
    }

    return (return_status);
 80059ae:	89fb      	ldrh	r3, [r7, #14]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	0800e114 	.word	0x0800e114

080059bc <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af04      	add	r7, sp, #16
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 80059ca:	7af9      	ldrb	r1, [r7, #11]
 80059cc:	23f0      	movs	r3, #240	@ 0xf0
 80059ce:	9302      	str	r3, [sp, #8]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	2300      	movs	r3, #0
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2300      	movs	r3, #0
 80059da:	4a04      	ldr	r2, [pc, #16]	@ (80059ec <optiga_cmd_open_application+0x30>)
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7fe fde5 	bl	80045ac <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08005875 	.word	0x08005875

080059f0 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80059fe:	f240 2302 	movw	r3, #514	@ 0x202
 8005a02:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005a04:	2309      	movs	r3, #9
 8005a06:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 8005a08:	2381      	movs	r3, #129	@ 0x81
 8005a0a:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7d9b      	ldrb	r3, [r3, #22]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d002      	beq.n	8005a1a <optiga_cmd_get_data_object_handler+0x2a>
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d06e      	beq.n	8005af6 <optiga_cmd_get_data_object_handler+0x106>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005a18:	e0ec      	b.n	8005bf4 <optiga_cmd_get_data_object_handler+0x204>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8005a1a:	230a      	movs	r3, #10
 8005a1c:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005a1e:	8a3b      	ldrh	r3, [r7, #16]
 8005a20:	f240 6215 	movw	r2, #1557	@ 0x615
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d907      	bls.n	8005a38 <optiga_cmd_get_data_object_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005a28:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005a2c:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	801a      	strh	r2, [r3, #0]
                break;
 8005a36:	e0dd      	b.n	8005bf4 <optiga_cmd_get_data_object_handler+0x204>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	8bbb      	ldrh	r3, [r7, #28]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	4413      	add	r3, r2
 8005a42:	1d5a      	adds	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	891b      	ldrh	r3, [r3, #8]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f000 fa1e 	bl	8005e8c <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005a50:	8bbb      	ldrh	r3, [r7, #28]
 8005a52:	3302      	adds	r3, #2
 8005a54:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	899b      	ldrh	r3, [r3, #12]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	89db      	ldrh	r3, [r3, #14]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f240 6211 	movw	r2, #1553	@ 0x611
 8005a66:	4293      	cmp	r3, r2
 8005a68:	bfa8      	it	ge
 8005a6a:	4613      	movge	r3, r2
 8005a6c:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	7c9b      	ldrb	r3, [r3, #18]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d11f      	bne.n	8005ab6 <optiga_cmd_get_data_object_handler+0xc6>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	8bbb      	ldrh	r3, [r7, #28]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	4413      	add	r3, r2
 8005a80:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	895a      	ldrh	r2, [r3, #10]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005a8a:	4413      	add	r3, r2
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f000 f9fc 	bl	8005e8c <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005a94:	8bbb      	ldrh	r3, [r7, #28]
 8005a96:	3302      	adds	r3, #2
 8005a98:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	8bbb      	ldrh	r3, [r7, #28]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3305      	adds	r3, #5
 8005aa6:	89fa      	ldrh	r2, [r7, #14]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 f9ee 	bl	8005e8c <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005ab0:	8bbb      	ldrh	r3, [r7, #28]
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	891b      	ldrh	r3, [r3, #8]
 8005aba:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d101      	bne.n	8005ac6 <optiga_cmd_get_data_object_handler+0xd6>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7e59      	ldrb	r1, [r3, #25]
 8005aca:	8bbb      	ldrh	r3, [r7, #28]
 8005acc:	3b09      	subs	r3, #9
 8005ace:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 8005ad6:	3305      	adds	r3, #5
 8005ad8:	7ef8      	ldrb	r0, [r7, #27]
 8005ada:	f7fe fd38 	bl	800454e <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	8bba      	ldrh	r2, [r7, #28]
 8005ae4:	3a05      	subs	r2, #5
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	89fa      	ldrh	r2, [r7, #14]
 8005aee:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 8005af0:	2300      	movs	r3, #0
 8005af2:	83fb      	strh	r3, [r7, #30]
        break;
 8005af4:	e07e      	b.n	8005bf4 <optiga_cmd_get_data_object_handler+0x204>
            me->chaining_ongoing = FALSE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	7c9b      	ldrb	r3, [r3, #18]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d025      	beq.n	8005b52 <optiga_cmd_get_data_object_handler+0x162>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	89db      	ldrh	r3, [r3, #14]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <optiga_cmd_get_data_object_handler+0x13c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7f5b      	ldrb	r3, [r3, #29]
 8005b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	775a      	strb	r2, [r3, #29]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	7f5b      	ldrb	r3, [r3, #29]
 8005b20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	775a      	strb	r2, [r3, #29]
 8005b2a:	e00e      	b.n	8005b4a <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	7f5b      	ldrb	r3, [r3, #29]
 8005b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	775a      	strb	r2, [r3, #29]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	7f5a      	ldrb	r2, [r3, #29]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 8005b4a:	f240 2302 	movw	r3, #514	@ 0x202
 8005b4e:	83fb      	strh	r3, [r7, #30]
        break;
 8005b50:	e04f      	b.n	8005bf2 <optiga_cmd_get_data_object_handler+0x202>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8c1b      	ldrh	r3, [r3, #32]
 8005b56:	f248 0208 	movw	r2, #32776	@ 0x8008
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d107      	bne.n	8005b6e <optiga_cmd_get_data_object_handler+0x17e>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	89d2      	ldrh	r2, [r2, #14]
 8005b66:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	83fb      	strh	r3, [r7, #30]
        break;
 8005b6c:	e041      	b.n	8005bf2 <optiga_cmd_get_data_object_handler+0x202>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	88db      	ldrh	r3, [r3, #6]
 8005b74:	3b04      	subs	r3, #4
 8005b76:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	899b      	ldrh	r3, [r3, #12]
 8005b7c:	8a7a      	ldrh	r2, [r7, #18]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d907      	bls.n	8005b92 <optiga_cmd_get_data_object_handler+0x1a2>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005b82:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005b86:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	801a      	strh	r2, [r3, #0]
                    break;
 8005b90:	e030      	b.n	8005bf4 <optiga_cmd_get_data_object_handler+0x204>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	89d2      	ldrh	r2, [r2, #14]
 8005b9a:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005ba2:	3309      	adds	r3, #9
 8005ba4:	8a7a      	ldrh	r2, [r7, #18]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	f000 fe91 	bl	80068ce <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	89da      	ldrh	r2, [r3, #14]
 8005bb0:	8a7b      	ldrh	r3, [r7, #18]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	8a1b      	ldrh	r3, [r3, #16]
 8005bbe:	8a7a      	ldrh	r2, [r7, #18]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d305      	bcc.n	8005bd0 <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	89da      	ldrh	r2, [r3, #14]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d10b      	bne.n	8005be8 <optiga_cmd_get_data_object_handler+0x1f8>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	89d2      	ldrh	r2, [r2, #14]
 8005bd8:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2200      	movs	r2, #0
 8005be4:	821a      	strh	r2, [r3, #16]
 8005be6:	e002      	b.n	8005bee <optiga_cmd_get_data_object_handler+0x1fe>
                    me->chaining_ongoing = TRUE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	761a      	strb	r2, [r3, #24]
                return_status = OPTIGA_LIB_SUCCESS;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	83fb      	strh	r3, [r7, #30]
        break;
 8005bf2:	bf00      	nop
    }

    return (return_status);
 8005bf4:	8bfb      	ldrh	r3, [r7, #30]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af04      	add	r7, sp, #16
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005c0e:	7af9      	ldrb	r1, [r7, #11]
 8005c10:	2381      	movs	r3, #129	@ 0x81
 8005c12:	9302      	str	r3, [sp, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	2306      	movs	r3, #6
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	4a04      	ldr	r2, [pc, #16]	@ (8005c30 <optiga_cmd_get_data_object+0x30>)
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7fe fcc3 	bl	80045ac <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	080059f1 	.word	0x080059f1

08005c34 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 8005c42:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <optiga_comms_create+0x48>)
 8005c44:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	7c1b      	ldrb	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d110      	bne.n	8005c70 <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8005c4e:	f000 fae8 	bl	8006222 <pal_init>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
                break;
 8005c5c:	e008      	b.n	8005c70 <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200004d4 	.word	0x200004d4

08005c80 <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	7c1b      	ldrb	r3, [r3, #16]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10a      	bne.n	8005ca6 <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 8005ca2:	f000 fac6 	bl	8006232 <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	609a      	str	r2, [r3, #8]
    return (0);
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005cd4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005cd8:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f8a6 	bl	8005e2c <check_optiga_comms_state>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d122      	bne.n	8005d2c <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a10      	ldr	r2, [pc, #64]	@ (8005d38 <optiga_comms_open+0x6c>)
 8005cf6:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	7d12      	ldrb	r2, [r2, #20]
 8005d02:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fa ff66 	bl	8000be8 <ifx_i2c_open>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005d20:	89fb      	ldrh	r3, [r7, #14]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005d2c:	89fb      	ldrh	r3, [r7, #14]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	08005e61 	.word	0x08005e61

08005d3c <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005d4c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005d50:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f86a 	bl	8005e2c <check_optiga_comms_state>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d12c      	bne.n	8005db8 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a15      	ldr	r2, [pc, #84]	@ (8005dc4 <optiga_comms_transceive+0x88>)
 8005d6e:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	7c92      	ldrb	r2, [r2, #18]
 8005d7a:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	7cd2      	ldrb	r2, [r2, #19]
 8005d86:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	7d12      	ldrb	r2, [r2, #20]
 8005d92:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6858      	ldr	r0, [r3, #4]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	f7fa ff59 	bl	8000c5a <ifx_i2c_transceive>
 8005da8:	4603      	mov	r3, r0
 8005daa:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005dac:	8afb      	ldrh	r3, [r7, #22]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005db8:	8afb      	ldrh	r3, [r7, #22]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08005e61 	.word	0x08005e61

08005dc8 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005dd0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005dd4:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f828 	bl	8005e2c <check_optiga_comms_state>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d11c      	bne.n	8005e1c <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a0d      	ldr	r2, [pc, #52]	@ (8005e28 <optiga_comms_close+0x60>)
 8005df2:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	7d12      	ldrb	r2, [r2, #20]
 8005dfe:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fa ff60 	bl	8000ccc <ifx_i2c_close>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005e10:	89fb      	ldrh	r3, [r7, #14]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005e1c:	89fb      	ldrh	r3, [r7, #14]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	08005e61 	.word	0x08005e61

08005e2c <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005e34:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005e38:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <check_optiga_comms_state+0x26>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	7c5b      	ldrb	r3, [r3, #17]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d004      	beq.n	8005e52 <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005e52:	89fb      	ldrh	r3, [r7, #14]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	887a      	ldrh	r2, [r7, #2]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	745a      	strb	r2, [r3, #17]
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	887a      	ldrh	r2, [r7, #2]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	0e1b      	lsrs	r3, r3, #24
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	0c1a      	lsrs	r2, r3, #16
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	0a1a      	lsrs	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3303      	adds	r3, #3
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	061a      	lsls	r2, r3, #24
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3302      	adds	r3, #2
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005f1a:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	3103      	adds	r1, #3
 8005f20:	7809      	ldrb	r1, [r1, #0]
 8005f22:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	6992      	ldr	r2, [r2, #24]
 8005f54:	8879      	ldrh	r1, [r7, #2]
 8005f56:	4610      	mov	r0, r2
 8005f58:	4798      	blx	r3
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8005f70:	2200      	movs	r2, #0
 8005f72:	2101      	movs	r1, #1
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f804 	bl	8005f82 <optiga_util_set_comms_params>
    }
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	70fb      	strb	r3, [r7, #3]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d002      	beq.n	8005f9e <optiga_util_set_comms_params+0x1c>
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d005      	beq.n	8005fa8 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005f9c:	e009      	b.n	8005fb2 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	78ba      	ldrb	r2, [r7, #2]
 8005fa2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8005fa6:	e004      	b.n	8005fb2 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	78ba      	ldrb	r2, [r7, #2]
 8005fac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 8005fb0:	bf00      	nop
        }
    }
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02b      	beq.n	8006030 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8005fd8:	2124      	movs	r1, #36	@ 0x24
 8005fda:	2001      	movs	r0, #1
 8005fdc:	f000 fc5e 	bl	800689c <pal_os_calloc>
 8005fe0:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d025      	beq.n	8006034 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	490c      	ldr	r1, [pc, #48]	@ (8006040 <optiga_util_create+0x80>)
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fa89 	bl	8005528 <optiga_cmd_create>
 8006016:	4602      	mov	r2, r0
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8006024:	6978      	ldr	r0, [r7, #20]
 8006026:	f000 fc47 	bl	80068b8 <pal_os_free>
            me = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e002      	b.n	8006036 <optiga_util_create+0x76>
            break;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <optiga_util_create+0x76>
            break;
 8006034:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 8006036:	697b      	ldr	r3, [r7, #20]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	08005f37 	.word	0x08005f37

08006044 <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <optiga_util_destroy+0x16>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8006052:	f240 3303 	movw	r3, #771	@ 0x303
 8006056:	81fb      	strh	r3, [r7, #14]
            break;
 8006058:	e011      	b.n	800607e <optiga_util_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8c1b      	ldrh	r3, [r3, #32]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d103      	bne.n	800606a <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8006062:	f240 3305 	movw	r3, #773	@ 0x305
 8006066:	81fb      	strh	r3, [r7, #14]
            break;
 8006068:	e009      	b.n	800607e <optiga_util_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fad8 	bl	8005624 <optiga_cmd_destroy>
 8006074:	4603      	mov	r3, r0
 8006076:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc1d 	bl	80068b8 <pal_os_free>
    } while (FALSE);
    return (return_value);
 800607e:	89fb      	ldrh	r3, [r7, #14]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8006094:	f240 3302 	movw	r3, #770	@ 0x302
 8006098:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <optiga_util_open_application+0x20>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d103      	bne.n	80060b0 <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80060a8:	f240 3303 	movw	r3, #771	@ 0x303
 80060ac:	81fb      	strh	r3, [r7, #14]
            break;
 80060ae:	e03d      	b.n	800612c <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8c1b      	ldrh	r3, [r3, #32]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d103      	bne.n	80060c0 <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80060b8:	f240 3305 	movw	r3, #773	@ 0x305
 80060bc:	81fb      	strh	r3, [r7, #14]
            break;
 80060be:	e035      	b.n	800612c <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6958      	ldr	r0, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80060d0:	2200      	movs	r2, #0
 80060d2:	4619      	mov	r1, r3
 80060d4:	f7fe fa16 	bl	8004504 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6958      	ldr	r0, [r3, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80060e2:	2201      	movs	r2, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7fe fa0d 	bl	8004504 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d107      	bne.n	8006100 <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	2202      	movs	r2, #2
 80060f6:	2133      	movs	r1, #51	@ 0x33
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fa03 	bl	8004504 <optiga_cmd_set_shielded_connection_option>
 80060fe:	e006      	b.n	800610e <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2202      	movs	r2, #2
 8006106:	2111      	movs	r1, #17
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe f9fb 	bl	8004504 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	78f9      	ldrb	r1, [r7, #3]
 8006114:	2200      	movs	r2, #0
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff fc50 	bl	80059bc <optiga_cmd_open_application>
 800611c:	4603      	mov	r3, r0
 800611e:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006120:	89fb      	ldrh	r3, [r7, #14]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff ff18 	bl	8005f62 <optiga_util_reset_protection_level>

    return (return_value);
 8006132:	89fb      	ldrh	r3, [r7, #14]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	817b      	strh	r3, [r7, #10]
 800614a:	4613      	mov	r3, r2
 800614c:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 800614e:	f240 3302 	movw	r3, #770	@ 0x302
 8006152:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <optiga_util_read_data+0x32>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <optiga_util_read_data+0x32>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d103      	bne.n	8006176 <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800616e:	f240 3303 	movw	r3, #771	@ 0x303
 8006172:	82fb      	strh	r3, [r7, #22]
            break;
 8006174:	e04d      	b.n	8006212 <optiga_util_read_data+0xd6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8c1b      	ldrh	r3, [r3, #32]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d103      	bne.n	8006186 <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800617e:	f240 3305 	movw	r3, #773	@ 0x305
 8006182:	82fb      	strh	r3, [r7, #22]
            break;
 8006184:	e045      	b.n	8006212 <optiga_util_read_data+0xd6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2214      	movs	r2, #20
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fba8 	bl	80068ec <pal_os_memset>

        p_params->oid = optiga_oid;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	897a      	ldrh	r2, [r7, #10]
 80061a0:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	893a      	ldrh	r2, [r7, #8]
 80061a6:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2200      	movs	r2, #0
 80061ac:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	881a      	ldrh	r2, [r3, #0]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2200      	movs	r2, #0
 80061c6:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2200      	movs	r2, #0
 80061cc:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6958      	ldr	r0, [r3, #20]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80061d8:	2200      	movs	r2, #0
 80061da:	4619      	mov	r1, r3
 80061dc:	f7fe f992 	bl	8004504 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6958      	ldr	r0, [r3, #20]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80061ea:	2201      	movs	r2, #1
 80061ec:	4619      	mov	r1, r3
 80061ee:	f7fe f989 	bl	8004504 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6958      	ldr	r0, [r3, #20]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	7c9b      	ldrb	r3, [r3, #18]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f7ff fcff 	bl	8005c00 <optiga_cmd_get_data_object>
 8006202:	4603      	mov	r3, r0
 8006204:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006206:	8afb      	ldrh	r3, [r7, #22]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <optiga_util_read_data+0xd6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff fea5 	bl	8005f62 <optiga_util_reset_protection_level>

    return (return_value);
 8006218:	8afb      	ldrh	r3, [r7, #22]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8006222:	b480      	push	{r7}
 8006224:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <pal_deinit>:


pal_status_t pal_deinit(void)
{
 8006232:	b480      	push	{r7}
 8006234:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8006242:	b480      	push	{r7}
 8006244:	b087      	sub	sp, #28
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	461a      	mov	r2, r3
 800624e:	460b      	mov	r3, r1
 8006250:	817b      	strh	r3, [r7, #10]
 8006252:	4613      	mov	r3, r2
 8006254:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8006256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006258:	2b00      	cmp	r3, #0
 800625a:	d012      	beq.n	8006282 <pal_crypt_tls_prf_sha256+0x40>
 800625c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00f      	beq.n	8006282 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8006262:	2300      	movs	r3, #0
 8006264:	82fb      	strh	r3, [r7, #22]
 8006266:	e007      	b.n	8006278 <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8006268:	8afb      	ldrh	r3, [r7, #22]
 800626a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800626c:	4413      	add	r3, r2
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8006272:	8afb      	ldrh	r3, [r7, #22]
 8006274:	3301      	adds	r3, #1
 8006276:	82fb      	strh	r3, [r7, #22]
 8006278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	8afa      	ldrh	r2, [r7, #22]
 800627e:	429a      	cmp	r2, r3
 8006280:	d3f2      	bcc.n	8006268 <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 800628e:	b480      	push	{r7}
 8006290:	b087      	sub	sp, #28
 8006292:	af00      	add	r7, sp, #0
 8006294:	60f8      	str	r0, [r7, #12]
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	82fb      	strh	r3, [r7, #22]
 80062a2:	e00a      	b.n	80062ba <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 80062a4:	8afb      	ldrh	r3, [r7, #22]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	441a      	add	r2, r3
 80062aa:	8afb      	ldrh	r3, [r7, #22]
 80062ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062ae:	440b      	add	r3, r1
 80062b0:	7812      	ldrb	r2, [r2, #0]
 80062b2:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80062b4:	8afb      	ldrh	r3, [r7, #22]
 80062b6:	3301      	adds	r3, #1
 80062b8:	82fb      	strh	r3, [r7, #22]
 80062ba:	8afa      	ldrh	r2, [r7, #22]
 80062bc:	8c3b      	ldrh	r3, [r7, #32]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3f0      	bcc.n	80062a4 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	603b      	str	r3, [r7, #0]
 80062dc:	4613      	mov	r3, r2
 80062de:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	82fb      	strh	r3, [r7, #22]
 80062e4:	e00a      	b.n	80062fc <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 80062e6:	8afb      	ldrh	r3, [r7, #22]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	441a      	add	r2, r3
 80062ec:	8afb      	ldrh	r3, [r7, #22]
 80062ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80062f0:	440b      	add	r3, r1
 80062f2:	7812      	ldrb	r2, [r2, #0]
 80062f4:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80062f6:	8afb      	ldrh	r3, [r7, #22]
 80062f8:	3301      	adds	r3, #1
 80062fa:	82fb      	strh	r3, [r7, #22]
 80062fc:	8afa      	ldrh	r2, [r7, #22]
 80062fe:	8c3b      	ldrh	r3, [r7, #32]
 8006300:	429a      	cmp	r2, r3
 8006302:	d3f0      	bcc.n	80062e6 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006322:	2201      	movs	r2, #1
 8006324:	4619      	mov	r1, r3
 8006326:	f001 fc4b 	bl	8007bc0 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006342:	2200      	movs	r2, #0
 8006344:	4619      	mov	r1, r3
 8006346:	f001 fc3b 	bl	8007bc0 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 800635c:	4b08      	ldr	r3, [pc, #32]	@ (8006380 <pal_i2c_acquire+0x2c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8006364:	4b06      	ldr	r3, [pc, #24]	@ (8006380 <pal_i2c_acquire+0x2c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3301      	adds	r3, #1
 800636a:	4a05      	ldr	r2, [pc, #20]	@ (8006380 <pal_i2c_acquire+0x2c>)
 800636c:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 800636e:	2300      	movs	r3, #0
 8006370:	e000      	b.n	8006374 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 8006372:	2301      	movs	r3, #1
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20001164 	.word	0x20001164

08006384 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <pal_i2c_release+0x1c>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20001164 	.word	0x20001164

080063a4 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d008      	beq.n	80063ca <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80063c2:	887a      	ldrh	r2, [r7, #2]
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff ffd8 	bl	8006384 <pal_i2c_release>
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd90      	pop	{r4, r7, pc}

080063dc <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b088      	sub	sp, #32
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006416:	2301      	movs	r3, #1
 8006418:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff ff9a 	bl	8006354 <pal_i2c_acquire>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d120      	bne.n	8006468 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006426:	4a16      	ldr	r2, [pc, #88]	@ (8006480 <pal_i2c_write+0x78>)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	b299      	uxth	r1, r3
 8006438:	88fb      	ldrh	r3, [r7, #6]
 800643a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800643e:	9200      	str	r2, [sp, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	f001 fd55 	bl	8007ef0 <HAL_I2C_Master_Transmit>
 8006446:	4603      	mov	r3, r0
 8006448:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 800644a:	7d7b      	ldrb	r3, [r7, #21]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006450:	2100      	movs	r1, #0
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff ffa6 	bl	80063a4 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006458:	2300      	movs	r3, #0
 800645a:	82fb      	strh	r3, [r7, #22]
 800645c:	e00a      	b.n	8006474 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 800645e:	2101      	movs	r1, #1
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff ff9f 	bl	80063a4 <invoke_upper_layer_callback>
 8006466:	e005      	b.n	8006474 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006468:	2302      	movs	r3, #2
 800646a:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 800646c:	2102      	movs	r1, #2
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff98 	bl	80063a4 <invoke_upper_layer_callback>
    }

    return status;
 8006474:	8afb      	ldrh	r3, [r7, #22]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20001168 	.word	0x20001168

08006484 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af02      	add	r7, sp, #8
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006492:	2301      	movs	r3, #1
 8006494:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff5c 	bl	8006354 <pal_i2c_acquire>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d120      	bne.n	80064e4 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 80064a2:	4a16      	ldr	r2, [pc, #88]	@ (80064fc <pal_i2c_read+0x78>)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	b299      	uxth	r1, r3
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064ba:	9200      	str	r2, [sp, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	f001 fe15 	bl	80080ec <HAL_I2C_Master_Receive>
 80064c2:	4603      	mov	r3, r0
 80064c4:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 80064c6:	7d7b      	ldrb	r3, [r7, #21]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 80064cc:	2100      	movs	r1, #0
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f7ff ff68 	bl	80063a4 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 80064d4:	2300      	movs	r3, #0
 80064d6:	82fb      	strh	r3, [r7, #22]
 80064d8:	e00a      	b.n	80064f0 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 80064da:	2101      	movs	r1, #1
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff61 	bl	80063a4 <invoke_upper_layer_callback>
 80064e2:	e005      	b.n	80064f0 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80064e4:	2302      	movs	r3, #2
 80064e6:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 80064e8:	2102      	movs	r1, #2
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff ff5a 	bl	80063a4 <invoke_upper_layer_callback>
    }

    return status;
 80064f0:	8afb      	ldrh	r3, [r7, #22]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20001168 	.word	0x20001168

08006500 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	6039      	str	r1, [r7, #0]
 8006526:	80fb      	strh	r3, [r7, #6]
 8006528:	4613      	mov	r3, r2
 800652a:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 800652c:	2301      	movs	r3, #1
 800652e:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	2b33      	cmp	r3, #51	@ 0x33
 8006538:	d043      	beq.n	80065c2 <pal_os_datastore_write+0xa6>
 800653a:	2b33      	cmp	r3, #51	@ 0x33
 800653c:	dc5e      	bgt.n	80065fc <pal_os_datastore_write+0xe0>
 800653e:	2b11      	cmp	r3, #17
 8006540:	d002      	beq.n	8006548 <pal_os_datastore_write+0x2c>
 8006542:	2b22      	cmp	r3, #34	@ 0x22
 8006544:	d020      	beq.n	8006588 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8006546:	e059      	b.n	80065fc <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006548:	88bb      	ldrh	r3, [r7, #4]
 800654a:	2b40      	cmp	r3, #64	@ 0x40
 800654c:	d858      	bhi.n	8006600 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 800654e:	88bb      	ldrh	r3, [r7, #4]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	b299      	uxth	r1, r3
 8006554:	7b7b      	ldrb	r3, [r7, #13]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	737a      	strb	r2, [r7, #13]
 800655a:	461a      	mov	r2, r3
 800655c:	b2c9      	uxtb	r1, r1
 800655e:	4b2b      	ldr	r3, [pc, #172]	@ (800660c <pal_os_datastore_write+0xf0>)
 8006560:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8006562:	7b7b      	ldrb	r3, [r7, #13]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	737a      	strb	r2, [r7, #13]
 8006568:	461a      	mov	r2, r3
 800656a:	88bb      	ldrh	r3, [r7, #4]
 800656c:	b2d9      	uxtb	r1, r3
 800656e:	4b27      	ldr	r3, [pc, #156]	@ (800660c <pal_os_datastore_write+0xf0>)
 8006570:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8006572:	7b7b      	ldrb	r3, [r7, #13]
 8006574:	4a25      	ldr	r2, [pc, #148]	@ (800660c <pal_os_datastore_write+0xf0>)
 8006576:	4413      	add	r3, r2
 8006578:	88ba      	ldrh	r2, [r7, #4]
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f006 fe0c 	bl	800d19a <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8006582:	2300      	movs	r3, #0
 8006584:	81fb      	strh	r3, [r7, #14]
            break;
 8006586:	e03b      	b.n	8006600 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8006588:	88bb      	ldrh	r3, [r7, #4]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	b299      	uxth	r1, r3
 800658e:	7b7b      	ldrb	r3, [r7, #13]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	737a      	strb	r2, [r7, #13]
 8006594:	461a      	mov	r2, r3
 8006596:	b2c9      	uxtb	r1, r1
 8006598:	4b1d      	ldr	r3, [pc, #116]	@ (8006610 <pal_os_datastore_write+0xf4>)
 800659a:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 800659c:	7b7b      	ldrb	r3, [r7, #13]
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	737a      	strb	r2, [r7, #13]
 80065a2:	461a      	mov	r2, r3
 80065a4:	88bb      	ldrh	r3, [r7, #4]
 80065a6:	b2d9      	uxtb	r1, r3
 80065a8:	4b19      	ldr	r3, [pc, #100]	@ (8006610 <pal_os_datastore_write+0xf4>)
 80065aa:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 80065ac:	7b7b      	ldrb	r3, [r7, #13]
 80065ae:	4a18      	ldr	r2, [pc, #96]	@ (8006610 <pal_os_datastore_write+0xf4>)
 80065b0:	4413      	add	r3, r2
 80065b2:	88ba      	ldrh	r2, [r7, #4]
 80065b4:	6839      	ldr	r1, [r7, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f006 fdef 	bl	800d19a <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80065bc:	2300      	movs	r3, #0
 80065be:	81fb      	strh	r3, [r7, #14]
            break;
 80065c0:	e01f      	b.n	8006602 <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 80065c2:	88bb      	ldrh	r3, [r7, #4]
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	b299      	uxth	r1, r3
 80065c8:	7b7b      	ldrb	r3, [r7, #13]
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	737a      	strb	r2, [r7, #13]
 80065ce:	461a      	mov	r2, r3
 80065d0:	b2c9      	uxtb	r1, r1
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <pal_os_datastore_write+0xf8>)
 80065d4:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 80065d6:	7b7b      	ldrb	r3, [r7, #13]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	737a      	strb	r2, [r7, #13]
 80065dc:	461a      	mov	r2, r3
 80065de:	88bb      	ldrh	r3, [r7, #4]
 80065e0:	b2d9      	uxtb	r1, r3
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <pal_os_datastore_write+0xf8>)
 80065e4:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 80065e6:	7b7b      	ldrb	r3, [r7, #13]
 80065e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <pal_os_datastore_write+0xf8>)
 80065ea:	4413      	add	r3, r2
 80065ec:	88ba      	ldrh	r2, [r7, #4]
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f006 fdd2 	bl	800d19a <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80065f6:	2300      	movs	r3, #0
 80065f8:	81fb      	strh	r3, [r7, #14]
            break;
 80065fa:	e002      	b.n	8006602 <pal_os_datastore_write+0xe6>
            break;
 80065fc:	bf00      	nop
 80065fe:	e000      	b.n	8006602 <pal_os_datastore_write+0xe6>
            break;
 8006600:	bf00      	nop
        }
    }
    return return_status;
 8006602:	89fb      	ldrh	r3, [r7, #14]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	2000050c 	.word	0x2000050c
 8006610:	2000116c 	.word	0x2000116c
 8006614:	200011b0 	.word	0x200011b0

08006618 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006626:	2301      	movs	r3, #1
 8006628:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 800662e:	89fb      	ldrh	r3, [r7, #14]
 8006630:	2b33      	cmp	r3, #51	@ 0x33
 8006632:	d049      	beq.n	80066c8 <pal_os_datastore_read+0xb0>
 8006634:	2b33      	cmp	r3, #51	@ 0x33
 8006636:	dc67      	bgt.n	8006708 <pal_os_datastore_read+0xf0>
 8006638:	2b11      	cmp	r3, #17
 800663a:	d002      	beq.n	8006642 <pal_os_datastore_read+0x2a>
 800663c:	2b22      	cmp	r3, #34	@ 0x22
 800663e:	d023      	beq.n	8006688 <pal_os_datastore_read+0x70>
 8006640:	e062      	b.n	8006708 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8006642:	7d7b      	ldrb	r3, [r7, #21]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	757a      	strb	r2, [r7, #21]
 8006648:	461a      	mov	r2, r3
 800664a:	4b34      	ldr	r3, [pc, #208]	@ (800671c <pal_os_datastore_read+0x104>)
 800664c:	5c9b      	ldrb	r3, [r3, r2]
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8006652:	7d7b      	ldrb	r3, [r7, #21]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	757a      	strb	r2, [r7, #21]
 8006658:	461a      	mov	r2, r3
 800665a:	4b30      	ldr	r3, [pc, #192]	@ (800671c <pal_os_datastore_read+0x104>)
 800665c:	5c9b      	ldrb	r3, [r3, r2]
 800665e:	461a      	mov	r2, r3
 8006660:	8a7b      	ldrh	r3, [r7, #18]
 8006662:	4313      	orrs	r3, r2
 8006664:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006666:	8a7b      	ldrh	r3, [r7, #18]
 8006668:	2b40      	cmp	r3, #64	@ 0x40
 800666a:	d851      	bhi.n	8006710 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 800666c:	7d7b      	ldrb	r3, [r7, #21]
 800666e:	4a2b      	ldr	r2, [pc, #172]	@ (800671c <pal_os_datastore_read+0x104>)
 8006670:	4413      	add	r3, r2
 8006672:	8a7a      	ldrh	r2, [r7, #18]
 8006674:	4619      	mov	r1, r3
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	f006 fd8f 	bl	800d19a <memcpy>
                *p_buffer_length = data_length;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	8a7a      	ldrh	r2, [r7, #18]
 8006680:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8006682:	2300      	movs	r3, #0
 8006684:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8006686:	e043      	b.n	8006710 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8006688:	7d7b      	ldrb	r3, [r7, #21]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	757a      	strb	r2, [r7, #21]
 800668e:	461a      	mov	r2, r3
 8006690:	4b23      	ldr	r3, [pc, #140]	@ (8006720 <pal_os_datastore_read+0x108>)
 8006692:	5c9b      	ldrb	r3, [r3, r2]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006698:	7d7b      	ldrb	r3, [r7, #21]
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	757a      	strb	r2, [r7, #21]
 800669e:	461a      	mov	r2, r3
 80066a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006720 <pal_os_datastore_read+0x108>)
 80066a2:	5c9b      	ldrb	r3, [r3, r2]
 80066a4:	461a      	mov	r2, r3
 80066a6:	8a7b      	ldrh	r3, [r7, #18]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 80066ac:	7d7b      	ldrb	r3, [r7, #21]
 80066ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006720 <pal_os_datastore_read+0x108>)
 80066b0:	4413      	add	r3, r2
 80066b2:	8a7a      	ldrh	r2, [r7, #18]
 80066b4:	4619      	mov	r1, r3
 80066b6:	68b8      	ldr	r0, [r7, #8]
 80066b8:	f006 fd6f 	bl	800d19a <memcpy>
            *p_buffer_length = data_length;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8a7a      	ldrh	r2, [r7, #18]
 80066c0:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80066c2:	2300      	movs	r3, #0
 80066c4:	82fb      	strh	r3, [r7, #22]
            break;
 80066c6:	e024      	b.n	8006712 <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 80066c8:	7d7b      	ldrb	r3, [r7, #21]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	757a      	strb	r2, [r7, #21]
 80066ce:	461a      	mov	r2, r3
 80066d0:	4b14      	ldr	r3, [pc, #80]	@ (8006724 <pal_os_datastore_read+0x10c>)
 80066d2:	5c9b      	ldrb	r3, [r3, r2]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 80066d8:	7d7b      	ldrb	r3, [r7, #21]
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	757a      	strb	r2, [r7, #21]
 80066de:	461a      	mov	r2, r3
 80066e0:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <pal_os_datastore_read+0x10c>)
 80066e2:	5c9b      	ldrb	r3, [r3, r2]
 80066e4:	461a      	mov	r2, r3
 80066e6:	8a7b      	ldrh	r3, [r7, #18]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 80066ec:	7d7b      	ldrb	r3, [r7, #21]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006724 <pal_os_datastore_read+0x10c>)
 80066f0:	4413      	add	r3, r2
 80066f2:	8a7a      	ldrh	r2, [r7, #18]
 80066f4:	4619      	mov	r1, r3
 80066f6:	68b8      	ldr	r0, [r7, #8]
 80066f8:	f006 fd4f 	bl	800d19a <memcpy>
            *p_buffer_length = data_length;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8a7a      	ldrh	r2, [r7, #18]
 8006700:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006702:	2300      	movs	r3, #0
 8006704:	82fb      	strh	r3, [r7, #22]
            break;
 8006706:	e004      	b.n	8006712 <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	801a      	strh	r2, [r3, #0]
            break;
 800670e:	e000      	b.n	8006712 <pal_os_datastore_read+0xfa>
            break;
 8006710:	bf00      	nop
        }
    }

    return return_status;
 8006712:	8afb      	ldrh	r3, [r7, #22]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	2000050c 	.word	0x2000050c
 8006720:	2000116c 	.word	0x2000116c
 8006724:	200011b0 	.word	0x200011b0

08006728 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	7a1b      	ldrb	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8006742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f82a 	bl	80067a4 <pal_os_event_register_callback_oneshot>
    }
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	721a      	strb	r2, [r3, #8]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <pal_os_event_create+0x20>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4804      	ldr	r0, [pc, #16]	@ (80067a0 <pal_os_event_create+0x2c>)
 8006790:	f7ff ffca 	bl	8006728 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006794:	4b02      	ldr	r3, [pc, #8]	@ (80067a0 <pal_os_event_create+0x2c>)
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	200011bc 	.word	0x200011bc

080067a4 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	4a0d      	ldr	r2, [pc, #52]	@ (80067ec <pal_os_event_register_callback_oneshot+0x48>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	099b      	lsrs	r3, r3, #6
 80067bc:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 80067ca:	f000 fb7d 	bl	8006ec8 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4413      	add	r3, r2
 80067d4:	4a06      	ldr	r2, [pc, #24]	@ (80067f0 <pal_os_event_register_callback_oneshot+0x4c>)
 80067d6:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 80067d8:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <pal_os_event_register_callback_oneshot+0x50>)
 80067da:	2201      	movs	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 80067de:	4806      	ldr	r0, [pc, #24]	@ (80067f8 <pal_os_event_register_callback_oneshot+0x54>)
 80067e0:	f004 fdf0 	bl	800b3c4 <HAL_TIM_Base_Start_IT>
}
 80067e4:	bf00      	nop
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	10624dd3 	.word	0x10624dd3
 80067f0:	200011d4 	.word	0x200011d4
 80067f4:	200011d8 	.word	0x200011d8
 80067f8:	20000a44 	.word	0x20000a44

080067fc <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <pal_os_event_trigger_registered_callback+0x3c>)
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d011      	beq.n	800682e <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 800680a:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <pal_os_event_trigger_registered_callback+0x3c>)
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8006810:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <pal_os_event_trigger_registered_callback+0x3c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8006816:	4b08      	ldr	r3, [pc, #32]	@ (8006838 <pal_os_event_trigger_registered_callback+0x3c>)
 8006818:	2200      	movs	r2, #0
 800681a:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <pal_os_event_trigger_registered_callback+0x3c>)
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 8006822:	4b06      	ldr	r3, [pc, #24]	@ (800683c <pal_os_event_trigger_registered_callback+0x40>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6838      	ldr	r0, [r7, #0]
 800682c:	4798      	blx	r3
    }
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200011bc 	.word	0x200011bc
 800683c:	200011d8 	.word	0x200011d8

08006840 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006844:	4b07      	ldr	r3, [pc, #28]	@ (8006864 <pal_os_event_timer_tick+0x24>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <pal_os_event_timer_tick+0x1e>
 800684c:	f000 fb3c 	bl	8006ec8 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <pal_os_event_timer_tick+0x28>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d301      	bcc.n	800685e <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 800685a:	f7ff ffcf 	bl	80067fc <pal_os_event_trigger_registered_callback>
    }
}
 800685e:	bf00      	nop
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200011d8 	.word	0x200011d8
 8006868:	200011d4 	.word	0x200011d4

0800686c <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 8006892:	bf00      	nop
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f006 fa1d 	bl	800cce8 <calloc>
 80068ae:	4603      	mov	r3, r0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <pal_os_free>:

void pal_os_free(void * block)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
    free(block);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f006 fa2d 	bl	800cd20 <free>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f006 fc5b 	bl	800d19a <memcpy>
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f006 fc05 	bl	800d110 <memset>
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 8006912:	f000 fad9 	bl	8006ec8 <HAL_GetTick>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}

0800691c <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8006920:	f000 fad2 	bl	8006ec8 <HAL_GetTick>
 8006924:	4603      	mov	r3, r0
 8006926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800692a:	fb02 f303 	mul.w	r3, r2, r3
}
 800692e:	4618      	mov	r0, r3
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800693a:	2300      	movs	r3, #0
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <HAL_MspInit+0x4c>)
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	4a0f      	ldr	r2, [pc, #60]	@ (8006980 <HAL_MspInit+0x4c>)
 8006944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006948:	6453      	str	r3, [r2, #68]	@ 0x44
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <HAL_MspInit+0x4c>)
 800694c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006956:	2300      	movs	r3, #0
 8006958:	603b      	str	r3, [r7, #0]
 800695a:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <HAL_MspInit+0x4c>)
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	4a08      	ldr	r2, [pc, #32]	@ (8006980 <HAL_MspInit+0x4c>)
 8006960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006964:	6413      	str	r3, [r2, #64]	@ 0x40
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <HAL_MspInit+0x4c>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40023800 	.word	0x40023800

08006984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	@ 0x28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800698c:	f107 0314 	add.w	r3, r7, #20
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	609a      	str	r2, [r3, #8]
 8006998:	60da      	str	r2, [r3, #12]
 800699a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a18 <HAL_I2C_MspInit+0x94>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d134      	bne.n	8006a10 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069a6:	2300      	movs	r3, #0
 80069a8:	613b      	str	r3, [r7, #16]
 80069aa:	4b1c      	ldr	r3, [pc, #112]	@ (8006a1c <HAL_I2C_MspInit+0x98>)
 80069ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ae:	4a1b      	ldr	r2, [pc, #108]	@ (8006a1c <HAL_I2C_MspInit+0x98>)
 80069b0:	f043 0302 	orr.w	r3, r3, #2
 80069b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069b6:	4b19      	ldr	r3, [pc, #100]	@ (8006a1c <HAL_I2C_MspInit+0x98>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80069c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80069c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069c8:	2312      	movs	r3, #18
 80069ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d0:	2303      	movs	r3, #3
 80069d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069d4:	2304      	movs	r3, #4
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069d8:	f107 0314 	add.w	r3, r7, #20
 80069dc:	4619      	mov	r1, r3
 80069de:	4810      	ldr	r0, [pc, #64]	@ (8006a20 <HAL_I2C_MspInit+0x9c>)
 80069e0:	f000 ff52 	bl	8007888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	4b0c      	ldr	r3, [pc, #48]	@ (8006a1c <HAL_I2C_MspInit+0x98>)
 80069ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ec:	4a0b      	ldr	r2, [pc, #44]	@ (8006a1c <HAL_I2C_MspInit+0x98>)
 80069ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80069f4:	4b09      	ldr	r3, [pc, #36]	@ (8006a1c <HAL_I2C_MspInit+0x98>)
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006a00:	2200      	movs	r2, #0
 8006a02:	2100      	movs	r1, #0
 8006a04:	2020      	movs	r0, #32
 8006a06:	f000 fb80 	bl	800710a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006a0a:	2020      	movs	r0, #32
 8006a0c:	f000 fb99 	bl	8007142 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006a10:	bf00      	nop
 8006a12:	3728      	adds	r7, #40	@ 0x28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40005400 	.word	0x40005400
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40020400 	.word	0x40020400

08006a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a34:	d115      	bne.n	8006a62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <HAL_TIM_Base_MspInit+0x48>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8006a6c <HAL_TIM_Base_MspInit+0x48>)
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a46:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <HAL_TIM_Base_MspInit+0x48>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	201c      	movs	r0, #28
 8006a58:	f000 fb57 	bl	800710a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a5c:	201c      	movs	r0, #28
 8006a5e:	f000 fb70 	bl	8007142 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40023800 	.word	0x40023800

08006a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	@ 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a78:	f107 0314 	add.w	r3, r7, #20
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b04 <HAL_UART_MspInit+0x94>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d133      	bne.n	8006afa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	4b1c      	ldr	r3, [pc, #112]	@ (8006b08 <HAL_UART_MspInit+0x98>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b08 <HAL_UART_MspInit+0x98>)
 8006a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006aa2:	4b19      	ldr	r3, [pc, #100]	@ (8006b08 <HAL_UART_MspInit+0x98>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	4b15      	ldr	r3, [pc, #84]	@ (8006b08 <HAL_UART_MspInit+0x98>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	4a14      	ldr	r2, [pc, #80]	@ (8006b08 <HAL_UART_MspInit+0x98>)
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006abe:	4b12      	ldr	r3, [pc, #72]	@ (8006b08 <HAL_UART_MspInit+0x98>)
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006aca:	230c      	movs	r3, #12
 8006acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ace:	2302      	movs	r3, #2
 8006ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006ada:	2307      	movs	r3, #7
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ade:	f107 0314 	add.w	r3, r7, #20
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4809      	ldr	r0, [pc, #36]	@ (8006b0c <HAL_UART_MspInit+0x9c>)
 8006ae6:	f000 fecf 	bl	8007888 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006aea:	2200      	movs	r2, #0
 8006aec:	2100      	movs	r1, #0
 8006aee:	2026      	movs	r0, #38	@ 0x26
 8006af0:	f000 fb0b 	bl	800710a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006af4:	2026      	movs	r0, #38	@ 0x26
 8006af6:	f000 fb24 	bl	8007142 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8006afa:	bf00      	nop
 8006afc:	3728      	adds	r7, #40	@ 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40004400 	.word	0x40004400
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40020000 	.word	0x40020000

08006b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <NMI_Handler+0x4>

08006b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b1c:	bf00      	nop
 8006b1e:	e7fd      	b.n	8006b1c <HardFault_Handler+0x4>

08006b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b24:	bf00      	nop
 8006b26:	e7fd      	b.n	8006b24 <MemManage_Handler+0x4>

08006b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b2c:	bf00      	nop
 8006b2e:	e7fd      	b.n	8006b2c <BusFault_Handler+0x4>

08006b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b34:	bf00      	nop
 8006b36:	e7fd      	b.n	8006b34 <UsageFault_Handler+0x4>

08006b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b3c:	bf00      	nop
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b46:	b480      	push	{r7}
 8006b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b4a:	bf00      	nop
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b66:	f000 f99b 	bl	8006ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
	...

08006b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b74:	4802      	ldr	r0, [pc, #8]	@ (8006b80 <TIM2_IRQHandler+0x10>)
 8006b76:	f004 fc87 	bl	800b488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000a44 	.word	0x20000a44

08006b84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006b88:	4802      	ldr	r0, [pc, #8]	@ (8006b94 <I2C1_EV_IRQHandler+0x10>)
 8006b8a:	f001 fe0f 	bl	80087ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200009f0 	.word	0x200009f0

08006b98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006b9c:	4802      	ldr	r0, [pc, #8]	@ (8006ba8 <I2C1_ER_IRQHandler+0x10>)
 8006b9e:	f001 ff58 	bl	8008a52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	200009f0 	.word	0x200009f0

08006bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006bb0:	4802      	ldr	r0, [pc, #8]	@ (8006bbc <USART2_IRQHandler+0x10>)
 8006bb2:	f005 f95d 	bl	800be70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000a8c 	.word	0x20000a8c

08006bc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006bc4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006bc8:	f001 f814 	bl	8007bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006bcc:	bf00      	nop
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e00a      	b.n	8006bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006be2:	f3af 8000 	nop.w
 8006be6:	4601      	mov	r1, r0
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	60ba      	str	r2, [r7, #8]
 8006bee:	b2ca      	uxtb	r2, r1
 8006bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	dbf0      	blt.n	8006be2 <_read+0x12>
  }

  return len;
 8006c00:	687b      	ldr	r3, [r7, #4]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e009      	b.n	8006c30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	60ba      	str	r2, [r7, #8]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd f935 	bl	8003e94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	dbf1      	blt.n	8006c1c <_write+0x12>
  }
  return len;
 8006c38:	687b      	ldr	r3, [r7, #4]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <_close>:

int _close(int file)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006c6a:	605a      	str	r2, [r3, #4]
  return 0;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <_isatty>:

int _isatty(int file)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006c82:	2301      	movs	r3, #1
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006cb4:	4a14      	ldr	r2, [pc, #80]	@ (8006d08 <_sbrk+0x5c>)
 8006cb6:	4b15      	ldr	r3, [pc, #84]	@ (8006d0c <_sbrk+0x60>)
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006cc0:	4b13      	ldr	r3, [pc, #76]	@ (8006d10 <_sbrk+0x64>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006cc8:	4b11      	ldr	r3, [pc, #68]	@ (8006d10 <_sbrk+0x64>)
 8006cca:	4a12      	ldr	r2, [pc, #72]	@ (8006d14 <_sbrk+0x68>)
 8006ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006cce:	4b10      	ldr	r3, [pc, #64]	@ (8006d10 <_sbrk+0x64>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d207      	bcs.n	8006cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006cdc:	f006 fa30 	bl	800d140 <__errno>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	220c      	movs	r2, #12
 8006ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cea:	e009      	b.n	8006d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006cec:	4b08      	ldr	r3, [pc, #32]	@ (8006d10 <_sbrk+0x64>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006cf2:	4b07      	ldr	r3, [pc, #28]	@ (8006d10 <_sbrk+0x64>)
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	4a05      	ldr	r2, [pc, #20]	@ (8006d10 <_sbrk+0x64>)
 8006cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20018000 	.word	0x20018000
 8006d0c:	00000400 	.word	0x00000400
 8006d10:	200011dc 	.word	0x200011dc
 8006d14:	20001350 	.word	0x20001350

08006d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <SystemInit+0x20>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d22:	4a05      	ldr	r2, [pc, #20]	@ (8006d38 <SystemInit+0x20>)
 8006d24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d2c:	bf00      	nop
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006d74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006d40:	f7ff ffea 	bl	8006d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d44:	480c      	ldr	r0, [pc, #48]	@ (8006d78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d46:	490d      	ldr	r1, [pc, #52]	@ (8006d7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d48:	4a0d      	ldr	r2, [pc, #52]	@ (8006d80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d4c:	e002      	b.n	8006d54 <LoopCopyDataInit>

08006d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d52:	3304      	adds	r3, #4

08006d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d58:	d3f9      	bcc.n	8006d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8006d88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d60:	e001      	b.n	8006d66 <LoopFillZerobss>

08006d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d64:	3204      	adds	r2, #4

08006d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d68:	d3fb      	bcc.n	8006d62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8006d6a:	f006 f9ef 	bl	800d14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d6e:	f7fd f957 	bl	8004020 <main>
  bx  lr    
 8006d72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d7c:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 8006d80:	0800e180 	.word	0x0800e180
  ldr r2, =_sbss
 8006d84:	200005b8 	.word	0x200005b8
  ldr r4, =_ebss
 8006d88:	20001350 	.word	0x20001350

08006d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d8c:	e7fe      	b.n	8006d8c <ADC_IRQHandler>
	...

08006d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d94:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd0 <HAL_Init+0x40>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a0d      	ldr	r2, [pc, #52]	@ (8006dd0 <HAL_Init+0x40>)
 8006d9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006da0:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <HAL_Init+0x40>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a0a      	ldr	r2, [pc, #40]	@ (8006dd0 <HAL_Init+0x40>)
 8006da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006dac:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <HAL_Init+0x40>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a07      	ldr	r2, [pc, #28]	@ (8006dd0 <HAL_Init+0x40>)
 8006db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006db8:	2003      	movs	r0, #3
 8006dba:	f000 f99b 	bl	80070f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	f000 f83e 	bl	8006e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006dc4:	f7ff fdb6 	bl	8006934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023c00 	.word	0x40023c00

08006dd4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006dda:	4a12      	ldr	r2, [pc, #72]	@ (8006e24 <HAL_DeInit+0x50>)
 8006ddc:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006dde:	4b10      	ldr	r3, [pc, #64]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006de4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006de6:	4a10      	ldr	r2, [pc, #64]	@ (8006e28 <HAL_DeInit+0x54>)
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006dea:	4b0d      	ldr	r3, [pc, #52]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006df0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006df2:	4a0e      	ldr	r2, [pc, #56]	@ (8006e2c <HAL_DeInit+0x58>)
 8006df4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006df6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006dfc:	4b08      	ldr	r3, [pc, #32]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006dfe:	2280      	movs	r2, #128	@ 0x80
 8006e00:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006e02:	4b07      	ldr	r3, [pc, #28]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006e08:	4b05      	ldr	r3, [pc, #20]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006e0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e0e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006e10:	4b03      	ldr	r3, [pc, #12]	@ (8006e20 <HAL_DeInit+0x4c>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006e16:	f000 f80b 	bl	8006e30 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40023800 	.word	0x40023800
 8006e24:	10e2c80f 	.word	0x10e2c80f
 8006e28:	00077931 	.word	0x00077931
 8006e2c:	0060109f 	.word	0x0060109f

08006e30 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006e34:	bf00      	nop
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e48:	4b12      	ldr	r3, [pc, #72]	@ (8006e94 <HAL_InitTick+0x54>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <HAL_InitTick+0x58>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f981 	bl	8007166 <HAL_SYSTICK_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e00e      	b.n	8006e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b0f      	cmp	r3, #15
 8006e72:	d80a      	bhi.n	8006e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e74:	2200      	movs	r2, #0
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e7c:	f000 f945 	bl	800710a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e80:	4a06      	ldr	r2, [pc, #24]	@ (8006e9c <HAL_InitTick+0x5c>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e000      	b.n	8006e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000550 	.word	0x20000550
 8006e98:	20000558 	.word	0x20000558
 8006e9c:	20000554 	.word	0x20000554

08006ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <HAL_IncTick+0x20>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <HAL_IncTick+0x24>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4413      	add	r3, r2
 8006eb0:	4a04      	ldr	r2, [pc, #16]	@ (8006ec4 <HAL_IncTick+0x24>)
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000558 	.word	0x20000558
 8006ec4:	200011e0 	.word	0x200011e0

08006ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  return uwTick;
 8006ecc:	4b03      	ldr	r3, [pc, #12]	@ (8006edc <HAL_GetTick+0x14>)
 8006ece:	681b      	ldr	r3, [r3, #0]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	200011e0 	.word	0x200011e0

08006ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ee8:	f7ff ffee 	bl	8006ec8 <HAL_GetTick>
 8006eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ef8:	d005      	beq.n	8006f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006efa:	4b0a      	ldr	r3, [pc, #40]	@ (8006f24 <HAL_Delay+0x44>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f06:	bf00      	nop
 8006f08:	f7ff ffde 	bl	8006ec8 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d8f7      	bhi.n	8006f08 <HAL_Delay+0x28>
  {
  }
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000558 	.word	0x20000558

08006f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f38:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <__NVIC_SetPriorityGrouping+0x44>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f44:	4013      	ands	r3, r2
 8006f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f5a:	4a04      	ldr	r2, [pc, #16]	@ (8006f6c <__NVIC_SetPriorityGrouping+0x44>)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	60d3      	str	r3, [r2, #12]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	e000ed00 	.word	0xe000ed00

08006f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <__NVIC_GetPriorityGrouping+0x18>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	0a1b      	lsrs	r3, r3, #8
 8006f7a:	f003 0307 	and.w	r3, r3, #7
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db0b      	blt.n	8006fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	f003 021f 	and.w	r2, r3, #31
 8006fa4:	4907      	ldr	r1, [pc, #28]	@ (8006fc4 <__NVIC_EnableIRQ+0x38>)
 8006fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2001      	movs	r0, #1
 8006fae:	fa00 f202 	lsl.w	r2, r0, r2
 8006fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	e000e100 	.word	0xe000e100

08006fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	db0a      	blt.n	8006ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	490c      	ldr	r1, [pc, #48]	@ (8007014 <__NVIC_SetPriority+0x4c>)
 8006fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe6:	0112      	lsls	r2, r2, #4
 8006fe8:	b2d2      	uxtb	r2, r2
 8006fea:	440b      	add	r3, r1
 8006fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006ff0:	e00a      	b.n	8007008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	4908      	ldr	r1, [pc, #32]	@ (8007018 <__NVIC_SetPriority+0x50>)
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	3b04      	subs	r3, #4
 8007000:	0112      	lsls	r2, r2, #4
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	440b      	add	r3, r1
 8007006:	761a      	strb	r2, [r3, #24]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	e000e100 	.word	0xe000e100
 8007018:	e000ed00 	.word	0xe000ed00

0800701c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800701c:	b480      	push	{r7}
 800701e:	b089      	sub	sp, #36	@ 0x24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	f1c3 0307 	rsb	r3, r3, #7
 8007036:	2b04      	cmp	r3, #4
 8007038:	bf28      	it	cs
 800703a:	2304      	movcs	r3, #4
 800703c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3304      	adds	r3, #4
 8007042:	2b06      	cmp	r3, #6
 8007044:	d902      	bls.n	800704c <NVIC_EncodePriority+0x30>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	3b03      	subs	r3, #3
 800704a:	e000      	b.n	800704e <NVIC_EncodePriority+0x32>
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43da      	mvns	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	401a      	ands	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	43d9      	mvns	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007074:	4313      	orrs	r3, r2
         );
}
 8007076:	4618      	mov	r0, r3
 8007078:	3724      	adds	r7, #36	@ 0x24
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007088:	f3bf 8f4f 	dsb	sy
}
 800708c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800708e:	4b06      	ldr	r3, [pc, #24]	@ (80070a8 <__NVIC_SystemReset+0x24>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007096:	4904      	ldr	r1, [pc, #16]	@ (80070a8 <__NVIC_SystemReset+0x24>)
 8007098:	4b04      	ldr	r3, [pc, #16]	@ (80070ac <__NVIC_SystemReset+0x28>)
 800709a:	4313      	orrs	r3, r2
 800709c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800709e:	f3bf 8f4f 	dsb	sy
}
 80070a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <__NVIC_SystemReset+0x20>
 80070a8:	e000ed00 	.word	0xe000ed00
 80070ac:	05fa0004 	.word	0x05fa0004

080070b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070c0:	d301      	bcc.n	80070c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070c2:	2301      	movs	r3, #1
 80070c4:	e00f      	b.n	80070e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070c6:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <SysTick_Config+0x40>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070ce:	210f      	movs	r1, #15
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070d4:	f7ff ff78 	bl	8006fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070d8:	4b05      	ldr	r3, [pc, #20]	@ (80070f0 <SysTick_Config+0x40>)
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070de:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <SysTick_Config+0x40>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000e010 	.word	0xe000e010

080070f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff ff13 	bl	8006f28 <__NVIC_SetPriorityGrouping>
}
 8007102:	bf00      	nop
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	4603      	mov	r3, r0
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800711c:	f7ff ff28 	bl	8006f70 <__NVIC_GetPriorityGrouping>
 8007120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	f7ff ff78 	bl	800701c <NVIC_EncodePriority>
 800712c:	4602      	mov	r2, r0
 800712e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff ff47 	bl	8006fc8 <__NVIC_SetPriority>
}
 800713a:	bf00      	nop
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	4603      	mov	r3, r0
 800714a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800714c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff ff1b 	bl	8006f8c <__NVIC_EnableIRQ>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007162:	f7ff ff8f 	bl	8007084 <__NVIC_SystemReset>

08007166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff ff9e 	bl	80070b0 <SysTick_Config>
 8007174:	4603      	mov	r3, r0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800718c:	f7ff fe9c 	bl	8006ec8 <HAL_GetTick>
 8007190:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d008      	beq.n	80071b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2280      	movs	r2, #128	@ 0x80
 80071a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e052      	b.n	8007256 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0216 	bic.w	r2, r2, #22
 80071be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695a      	ldr	r2, [r3, #20]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <HAL_DMA_Abort+0x62>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0208 	bic.w	r2, r2, #8
 80071ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007200:	e013      	b.n	800722a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007202:	f7ff fe61 	bl	8006ec8 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b05      	cmp	r3, #5
 800720e:	d90c      	bls.n	800722a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2203      	movs	r2, #3
 800721a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e015      	b.n	8007256 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e4      	bne.n	8007202 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800723c:	223f      	movs	r2, #63	@ 0x3f
 800723e:	409a      	lsls	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d004      	beq.n	800727c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2280      	movs	r2, #128	@ 0x80
 8007276:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e00c      	b.n	8007296 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2205      	movs	r2, #5
 8007280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072b0:	b2db      	uxtb	r3, r3
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072ce:	4b23      	ldr	r3, [pc, #140]	@ (800735c <HAL_FLASH_Program+0x9c>)
 80072d0:	7e1b      	ldrb	r3, [r3, #24]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_FLASH_Program+0x1a>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e03b      	b.n	8007352 <HAL_FLASH_Program+0x92>
 80072da:	4b20      	ldr	r3, [pc, #128]	@ (800735c <HAL_FLASH_Program+0x9c>)
 80072dc:	2201      	movs	r2, #1
 80072de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80072e4:	f000 f870 	bl	80073c8 <FLASH_WaitForLastOperation>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12b      	bne.n	800734a <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d105      	bne.n	8007304 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80072f8:	783b      	ldrb	r3, [r7, #0]
 80072fa:	4619      	mov	r1, r3
 80072fc:	68b8      	ldr	r0, [r7, #8]
 80072fe:	f000 f91b 	bl	8007538 <FLASH_Program_Byte>
 8007302:	e016      	b.n	8007332 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d105      	bne.n	8007316 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800730a:	883b      	ldrh	r3, [r7, #0]
 800730c:	4619      	mov	r1, r3
 800730e:	68b8      	ldr	r0, [r7, #8]
 8007310:	f000 f8ee 	bl	80074f0 <FLASH_Program_HalfWord>
 8007314:	e00d      	b.n	8007332 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d105      	bne.n	8007328 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f000 f8c3 	bl	80074ac <FLASH_Program_Word>
 8007326:	e004      	b.n	8007332 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732c:	68b8      	ldr	r0, [r7, #8]
 800732e:	f000 f88b 	bl	8007448 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007332:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007336:	f000 f847 	bl	80073c8 <FLASH_WaitForLastOperation>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <HAL_FLASH_Program+0xa0>)
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <HAL_FLASH_Program+0xa0>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800734a:	4b04      	ldr	r3, [pc, #16]	@ (800735c <HAL_FLASH_Program+0x9c>)
 800734c:	2200      	movs	r2, #0
 800734e:	761a      	strb	r2, [r3, #24]

  return status;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	200011e4 	.word	0x200011e4
 8007360:	40023c00 	.word	0x40023c00

08007364 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800736e:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <HAL_FLASH_Unlock+0x38>)
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da0b      	bge.n	800738e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007376:	4b09      	ldr	r3, [pc, #36]	@ (800739c <HAL_FLASH_Unlock+0x38>)
 8007378:	4a09      	ldr	r2, [pc, #36]	@ (80073a0 <HAL_FLASH_Unlock+0x3c>)
 800737a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800737c:	4b07      	ldr	r3, [pc, #28]	@ (800739c <HAL_FLASH_Unlock+0x38>)
 800737e:	4a09      	ldr	r2, [pc, #36]	@ (80073a4 <HAL_FLASH_Unlock+0x40>)
 8007380:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007382:	4b06      	ldr	r3, [pc, #24]	@ (800739c <HAL_FLASH_Unlock+0x38>)
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	da01      	bge.n	800738e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800738e:	79fb      	ldrb	r3, [r7, #7]
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40023c00 	.word	0x40023c00
 80073a0:	45670123 	.word	0x45670123
 80073a4:	cdef89ab 	.word	0xcdef89ab

080073a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <HAL_FLASH_Lock+0x1c>)
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	4a04      	ldr	r2, [pc, #16]	@ (80073c4 <HAL_FLASH_Lock+0x1c>)
 80073b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073b6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	40023c00 	.word	0x40023c00

080073c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80073d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <FLASH_WaitForLastOperation+0x78>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80073da:	f7ff fd75 	bl	8006ec8 <HAL_GetTick>
 80073de:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80073e0:	e010      	b.n	8007404 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e8:	d00c      	beq.n	8007404 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <FLASH_WaitForLastOperation+0x38>
 80073f0:	f7ff fd6a 	bl	8006ec8 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d201      	bcs.n	8007404 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e019      	b.n	8007438 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8007404:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <FLASH_WaitForLastOperation+0x7c>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e8      	bne.n	80073e2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007410:	4b0c      	ldr	r3, [pc, #48]	@ (8007444 <FLASH_WaitForLastOperation+0x7c>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800741c:	4b09      	ldr	r3, [pc, #36]	@ (8007444 <FLASH_WaitForLastOperation+0x7c>)
 800741e:	2201      	movs	r2, #1
 8007420:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007422:	4b08      	ldr	r3, [pc, #32]	@ (8007444 <FLASH_WaitForLastOperation+0x7c>)
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800742e:	f000 f8a5 	bl	800757c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007436:	2300      	movs	r3, #0

}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200011e4 	.word	0x200011e4
 8007444:	40023c00 	.word	0x40023c00

08007448 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007454:	4b14      	ldr	r3, [pc, #80]	@ (80074a8 <FLASH_Program_DoubleWord+0x60>)
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	4a13      	ldr	r2, [pc, #76]	@ (80074a8 <FLASH_Program_DoubleWord+0x60>)
 800745a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800745e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007460:	4b11      	ldr	r3, [pc, #68]	@ (80074a8 <FLASH_Program_DoubleWord+0x60>)
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	4a10      	ldr	r2, [pc, #64]	@ (80074a8 <FLASH_Program_DoubleWord+0x60>)
 8007466:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800746a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800746c:	4b0e      	ldr	r3, [pc, #56]	@ (80074a8 <FLASH_Program_DoubleWord+0x60>)
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	4a0d      	ldr	r2, [pc, #52]	@ (80074a8 <FLASH_Program_DoubleWord+0x60>)
 8007472:	f043 0301 	orr.w	r3, r3, #1
 8007476:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800747e:	f3bf 8f6f 	isb	sy
}
 8007482:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8007484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	000a      	movs	r2, r1
 8007492:	2300      	movs	r3, #0
 8007494:	68f9      	ldr	r1, [r7, #12]
 8007496:	3104      	adds	r1, #4
 8007498:	4613      	mov	r3, r2
 800749a:	600b      	str	r3, [r1, #0]
}
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	40023c00 	.word	0x40023c00

080074ac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074b6:	4b0d      	ldr	r3, [pc, #52]	@ (80074ec <FLASH_Program_Word+0x40>)
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	4a0c      	ldr	r2, [pc, #48]	@ (80074ec <FLASH_Program_Word+0x40>)
 80074bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <FLASH_Program_Word+0x40>)
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	4a09      	ldr	r2, [pc, #36]	@ (80074ec <FLASH_Program_Word+0x40>)
 80074c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074ce:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <FLASH_Program_Word+0x40>)
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	4a06      	ldr	r2, [pc, #24]	@ (80074ec <FLASH_Program_Word+0x40>)
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	601a      	str	r2, [r3, #0]
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	40023c00 	.word	0x40023c00

080074f0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <FLASH_Program_HalfWord+0x44>)
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	4a0c      	ldr	r2, [pc, #48]	@ (8007534 <FLASH_Program_HalfWord+0x44>)
 8007502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007508:	4b0a      	ldr	r3, [pc, #40]	@ (8007534 <FLASH_Program_HalfWord+0x44>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a09      	ldr	r2, [pc, #36]	@ (8007534 <FLASH_Program_HalfWord+0x44>)
 800750e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007514:	4b07      	ldr	r3, [pc, #28]	@ (8007534 <FLASH_Program_HalfWord+0x44>)
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	4a06      	ldr	r2, [pc, #24]	@ (8007534 <FLASH_Program_HalfWord+0x44>)
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	887a      	ldrh	r2, [r7, #2]
 8007524:	801a      	strh	r2, [r3, #0]
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40023c00 	.word	0x40023c00

08007538 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007544:	4b0c      	ldr	r3, [pc, #48]	@ (8007578 <FLASH_Program_Byte+0x40>)
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	4a0b      	ldr	r2, [pc, #44]	@ (8007578 <FLASH_Program_Byte+0x40>)
 800754a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800754e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007550:	4b09      	ldr	r3, [pc, #36]	@ (8007578 <FLASH_Program_Byte+0x40>)
 8007552:	4a09      	ldr	r2, [pc, #36]	@ (8007578 <FLASH_Program_Byte+0x40>)
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007558:	4b07      	ldr	r3, [pc, #28]	@ (8007578 <FLASH_Program_Byte+0x40>)
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	4a06      	ldr	r2, [pc, #24]	@ (8007578 <FLASH_Program_Byte+0x40>)
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	701a      	strb	r2, [r3, #0]
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40023c00 	.word	0x40023c00

0800757c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007580:	4b2f      	ldr	r3, [pc, #188]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800758c:	4b2d      	ldr	r3, [pc, #180]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f043 0310 	orr.w	r3, r3, #16
 8007594:	4a2b      	ldr	r2, [pc, #172]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 8007596:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007598:	4b29      	ldr	r3, [pc, #164]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 800759a:	2210      	movs	r2, #16
 800759c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800759e:	4b28      	ldr	r3, [pc, #160]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d008      	beq.n	80075bc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80075aa:	4b26      	ldr	r3, [pc, #152]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f043 0308 	orr.w	r3, r3, #8
 80075b2:	4a24      	ldr	r2, [pc, #144]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 80075b4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80075b6:	4b22      	ldr	r3, [pc, #136]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075b8:	2220      	movs	r2, #32
 80075ba:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80075bc:	4b20      	ldr	r3, [pc, #128]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d008      	beq.n	80075da <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80075c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f043 0304 	orr.w	r3, r3, #4
 80075d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 80075d2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80075d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075d6:	2240      	movs	r2, #64	@ 0x40
 80075d8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80075da:	4b19      	ldr	r3, [pc, #100]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80075e6:	4b17      	ldr	r3, [pc, #92]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f043 0302 	orr.w	r3, r3, #2
 80075ee:	4a15      	ldr	r2, [pc, #84]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 80075f0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80075f2:	4b13      	ldr	r3, [pc, #76]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075f4:	2280      	movs	r2, #128	@ 0x80
 80075f6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007604:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	4a0d      	ldr	r2, [pc, #52]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 800760e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007610:	4b0b      	ldr	r3, [pc, #44]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 8007612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007616:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007618:	4b09      	ldr	r3, [pc, #36]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007624:	4b07      	ldr	r3, [pc, #28]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f043 0320 	orr.w	r3, r3, #32
 800762c:	4a05      	ldr	r2, [pc, #20]	@ (8007644 <FLASH_SetErrorCode+0xc8>)
 800762e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007630:	4b03      	ldr	r3, [pc, #12]	@ (8007640 <FLASH_SetErrorCode+0xc4>)
 8007632:	2202      	movs	r2, #2
 8007634:	60da      	str	r2, [r3, #12]
  }
}
 8007636:	bf00      	nop
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	40023c00 	.word	0x40023c00
 8007644:	200011e4 	.word	0x200011e4

08007648 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007656:	4b31      	ldr	r3, [pc, #196]	@ (800771c <HAL_FLASHEx_Erase+0xd4>)
 8007658:	7e1b      	ldrb	r3, [r3, #24]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_FLASHEx_Erase+0x1a>
 800765e:	2302      	movs	r3, #2
 8007660:	e058      	b.n	8007714 <HAL_FLASHEx_Erase+0xcc>
 8007662:	4b2e      	ldr	r3, [pc, #184]	@ (800771c <HAL_FLASHEx_Erase+0xd4>)
 8007664:	2201      	movs	r2, #1
 8007666:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007668:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800766c:	f7ff feac 	bl	80073c8 <FLASH_WaitForLastOperation>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d148      	bne.n	800770c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007680:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d115      	bne.n	80076b6 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f000 f844 	bl	8007724 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800769c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80076a0:	f7ff fe92 	bl	80073c8 <FLASH_WaitForLastOperation>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80076a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007720 <HAL_FLASHEx_Erase+0xd8>)
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007720 <HAL_FLASHEx_Erase+0xd8>)
 80076ae:	f023 0304 	bic.w	r3, r3, #4
 80076b2:	6113      	str	r3, [r2, #16]
 80076b4:	e028      	b.n	8007708 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	e01c      	b.n	80076f8 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	4619      	mov	r1, r3
 80076c6:	68b8      	ldr	r0, [r7, #8]
 80076c8:	f000 f850 	bl	800776c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80076cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80076d0:	f7ff fe7a 	bl	80073c8 <FLASH_WaitForLastOperation>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80076d8:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <HAL_FLASHEx_Erase+0xd8>)
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	4a10      	ldr	r2, [pc, #64]	@ (8007720 <HAL_FLASHEx_Erase+0xd8>)
 80076de:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80076e2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	601a      	str	r2, [r3, #0]
          break;
 80076f0:	e00a      	b.n	8007708 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	4413      	add	r3, r2
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	429a      	cmp	r2, r3
 8007706:	d3da      	bcc.n	80076be <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007708:	f000 f878 	bl	80077fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800770c:	4b03      	ldr	r3, [pc, #12]	@ (800771c <HAL_FLASHEx_Erase+0xd4>)
 800770e:	2200      	movs	r2, #0
 8007710:	761a      	strb	r2, [r3, #24]

  return status;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	200011e4 	.word	0x200011e4
 8007720:	40023c00 	.word	0x40023c00

08007724 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	6039      	str	r1, [r7, #0]
 800772e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007730:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <FLASH_MassErase+0x44>)
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	4a0c      	ldr	r2, [pc, #48]	@ (8007768 <FLASH_MassErase+0x44>)
 8007736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800773a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800773c:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <FLASH_MassErase+0x44>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	4a09      	ldr	r2, [pc, #36]	@ (8007768 <FLASH_MassErase+0x44>)
 8007742:	f043 0304 	orr.w	r3, r3, #4
 8007746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007748:	4b07      	ldr	r3, [pc, #28]	@ (8007768 <FLASH_MassErase+0x44>)
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	4313      	orrs	r3, r2
 8007752:	4a05      	ldr	r2, [pc, #20]	@ (8007768 <FLASH_MassErase+0x44>)
 8007754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007758:	6113      	str	r3, [r2, #16]
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40023c00 	.word	0x40023c00

0800776c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	e010      	b.n	80077aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d103      	bne.n	8007796 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800778e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e009      	b.n	80077aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d103      	bne.n	80077a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800779c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e002      	b.n	80077aa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80077a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80077aa:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	4a12      	ldr	r2, [pc, #72]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80077b6:	4b10      	ldr	r3, [pc, #64]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	490f      	ldr	r1, [pc, #60]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80077c2:	4b0d      	ldr	r3, [pc, #52]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	4a0c      	ldr	r2, [pc, #48]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80077cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80077ce:	4b0a      	ldr	r3, [pc, #40]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	4a07      	ldr	r2, [pc, #28]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077da:	f043 0302 	orr.w	r3, r3, #2
 80077de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80077e0:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	4a04      	ldr	r2, [pc, #16]	@ (80077f8 <FLASH_Erase_Sector+0x8c>)
 80077e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077ea:	6113      	str	r3, [r2, #16]
}
 80077ec:	bf00      	nop
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	40023c00 	.word	0x40023c00

080077fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007800:	4b20      	ldr	r3, [pc, #128]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007808:	2b00      	cmp	r3, #0
 800780a:	d017      	beq.n	800783c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800780c:	4b1d      	ldr	r3, [pc, #116]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1c      	ldr	r2, [pc, #112]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007812:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007816:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007818:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a19      	ldr	r2, [pc, #100]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800781e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	4b17      	ldr	r3, [pc, #92]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a16      	ldr	r2, [pc, #88]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800782a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800782e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007830:	4b14      	ldr	r3, [pc, #80]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a13      	ldr	r2, [pc, #76]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800783a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800783c:	4b11      	ldr	r3, [pc, #68]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007844:	2b00      	cmp	r3, #0
 8007846:	d017      	beq.n	8007878 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007848:	4b0e      	ldr	r3, [pc, #56]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a0d      	ldr	r2, [pc, #52]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800784e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007852:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007854:	4b0b      	ldr	r3, [pc, #44]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a0a      	ldr	r2, [pc, #40]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800785a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a07      	ldr	r2, [pc, #28]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800786a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800786c:	4b05      	ldr	r3, [pc, #20]	@ (8007884 <FLASH_FlushCaches+0x88>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a04      	ldr	r2, [pc, #16]	@ (8007884 <FLASH_FlushCaches+0x88>)
 8007872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007876:	6013      	str	r3, [r2, #0]
  }
}
 8007878:	bf00      	nop
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	40023c00 	.word	0x40023c00

08007888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007888:	b480      	push	{r7}
 800788a:	b089      	sub	sp, #36	@ 0x24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007892:	2300      	movs	r3, #0
 8007894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800789a:	2300      	movs	r3, #0
 800789c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	e159      	b.n	8007b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078a4:	2201      	movs	r2, #1
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4013      	ands	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	429a      	cmp	r2, r3
 80078be:	f040 8148 	bne.w	8007b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f003 0303 	and.w	r3, r3, #3
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d005      	beq.n	80078da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d130      	bne.n	800793c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	2203      	movs	r2, #3
 80078e6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ea:	43db      	mvns	r3, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4013      	ands	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	4313      	orrs	r3, r2
 8007902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007910:	2201      	movs	r2, #1
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	43db      	mvns	r3, r3
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	4013      	ands	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	091b      	lsrs	r3, r3, #4
 8007926:	f003 0201 	and.w	r2, r3, #1
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4313      	orrs	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0303 	and.w	r3, r3, #3
 8007944:	2b03      	cmp	r3, #3
 8007946:	d017      	beq.n	8007978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	2203      	movs	r2, #3
 8007954:	fa02 f303 	lsl.w	r3, r2, r3
 8007958:	43db      	mvns	r3, r3
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	4013      	ands	r3, r2
 800795e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	4313      	orrs	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f003 0303 	and.w	r3, r3, #3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d123      	bne.n	80079cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	08da      	lsrs	r2, r3, #3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	3208      	adds	r2, #8
 800798c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	220f      	movs	r2, #15
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	43db      	mvns	r3, r3
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4013      	ands	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	08da      	lsrs	r2, r3, #3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3208      	adds	r2, #8
 80079c6:	69b9      	ldr	r1, [r7, #24]
 80079c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	2203      	movs	r2, #3
 80079d8:	fa02 f303 	lsl.w	r3, r2, r3
 80079dc:	43db      	mvns	r3, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4013      	ands	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f003 0203 	and.w	r2, r3, #3
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80a2 	beq.w	8007b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	4b57      	ldr	r3, [pc, #348]	@ (8007b70 <HAL_GPIO_Init+0x2e8>)
 8007a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a16:	4a56      	ldr	r2, [pc, #344]	@ (8007b70 <HAL_GPIO_Init+0x2e8>)
 8007a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a1e:	4b54      	ldr	r3, [pc, #336]	@ (8007b70 <HAL_GPIO_Init+0x2e8>)
 8007a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a2a:	4a52      	ldr	r2, [pc, #328]	@ (8007b74 <HAL_GPIO_Init+0x2ec>)
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	089b      	lsrs	r3, r3, #2
 8007a30:	3302      	adds	r3, #2
 8007a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	220f      	movs	r2, #15
 8007a42:	fa02 f303 	lsl.w	r3, r2, r3
 8007a46:	43db      	mvns	r3, r3
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a49      	ldr	r2, [pc, #292]	@ (8007b78 <HAL_GPIO_Init+0x2f0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d019      	beq.n	8007a8a <HAL_GPIO_Init+0x202>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a48      	ldr	r2, [pc, #288]	@ (8007b7c <HAL_GPIO_Init+0x2f4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d013      	beq.n	8007a86 <HAL_GPIO_Init+0x1fe>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a47      	ldr	r2, [pc, #284]	@ (8007b80 <HAL_GPIO_Init+0x2f8>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00d      	beq.n	8007a82 <HAL_GPIO_Init+0x1fa>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a46      	ldr	r2, [pc, #280]	@ (8007b84 <HAL_GPIO_Init+0x2fc>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d007      	beq.n	8007a7e <HAL_GPIO_Init+0x1f6>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a45      	ldr	r2, [pc, #276]	@ (8007b88 <HAL_GPIO_Init+0x300>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d101      	bne.n	8007a7a <HAL_GPIO_Init+0x1f2>
 8007a76:	2304      	movs	r3, #4
 8007a78:	e008      	b.n	8007a8c <HAL_GPIO_Init+0x204>
 8007a7a:	2307      	movs	r3, #7
 8007a7c:	e006      	b.n	8007a8c <HAL_GPIO_Init+0x204>
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e004      	b.n	8007a8c <HAL_GPIO_Init+0x204>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e002      	b.n	8007a8c <HAL_GPIO_Init+0x204>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <HAL_GPIO_Init+0x204>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	f002 0203 	and.w	r2, r2, #3
 8007a92:	0092      	lsls	r2, r2, #2
 8007a94:	4093      	lsls	r3, r2
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a9c:	4935      	ldr	r1, [pc, #212]	@ (8007b74 <HAL_GPIO_Init+0x2ec>)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	089b      	lsrs	r3, r3, #2
 8007aa2:	3302      	adds	r3, #2
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007aaa:	4b38      	ldr	r3, [pc, #224]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ace:	4a2f      	ldr	r2, [pc, #188]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	43db      	mvns	r3, r3
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007af8:	4a24      	ldr	r2, [pc, #144]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007afe:	4b23      	ldr	r3, [pc, #140]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	43db      	mvns	r3, r3
 8007b08:	69ba      	ldr	r2, [r7, #24]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b22:	4a1a      	ldr	r2, [pc, #104]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b28:	4b18      	ldr	r3, [pc, #96]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	43db      	mvns	r3, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4013      	ands	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007b8c <HAL_GPIO_Init+0x304>)
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	3301      	adds	r3, #1
 8007b56:	61fb      	str	r3, [r7, #28]
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	2b0f      	cmp	r3, #15
 8007b5c:	f67f aea2 	bls.w	80078a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	3724      	adds	r7, #36	@ 0x24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40013800 	.word	0x40013800
 8007b78:	40020000 	.word	0x40020000
 8007b7c:	40020400 	.word	0x40020400
 8007b80:	40020800 	.word	0x40020800
 8007b84:	40020c00 	.word	0x40020c00
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	40013c00 	.word	0x40013c00

08007b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	887b      	ldrh	r3, [r7, #2]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	73fb      	strb	r3, [r7, #15]
 8007bac:	e001      	b.n	8007bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	807b      	strh	r3, [r7, #2]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007bd0:	787b      	ldrb	r3, [r7, #1]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007bd6:	887a      	ldrh	r2, [r7, #2]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bdc:	e003      	b.n	8007be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bde:	887b      	ldrh	r3, [r7, #2]
 8007be0:	041a      	lsls	r2, r3, #16
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	619a      	str	r2, [r3, #24]
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007bfe:	4b08      	ldr	r3, [pc, #32]	@ (8007c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c0a:	4a05      	ldr	r2, [pc, #20]	@ (8007c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c10:	88fb      	ldrh	r3, [r7, #6]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f806 	bl	8007c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	40013c00 	.word	0x40013c00

08007c24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e12b      	b.n	8007ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fe fe8e 	bl	8006984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2224      	movs	r2, #36	@ 0x24
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ca0:	f003 fa4a 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 8007ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	4a81      	ldr	r2, [pc, #516]	@ (8007eb0 <HAL_I2C_Init+0x274>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d807      	bhi.n	8007cc0 <HAL_I2C_Init+0x84>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a80      	ldr	r2, [pc, #512]	@ (8007eb4 <HAL_I2C_Init+0x278>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bf94      	ite	ls
 8007cb8:	2301      	movls	r3, #1
 8007cba:	2300      	movhi	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	e006      	b.n	8007cce <HAL_I2C_Init+0x92>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8007eb8 <HAL_I2C_Init+0x27c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	bf94      	ite	ls
 8007cc8:	2301      	movls	r3, #1
 8007cca:	2300      	movhi	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e0e7      	b.n	8007ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4a78      	ldr	r2, [pc, #480]	@ (8007ebc <HAL_I2C_Init+0x280>)
 8007cda:	fba2 2303 	umull	r2, r3, r2, r3
 8007cde:	0c9b      	lsrs	r3, r3, #18
 8007ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4a6a      	ldr	r2, [pc, #424]	@ (8007eb0 <HAL_I2C_Init+0x274>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d802      	bhi.n	8007d10 <HAL_I2C_Init+0xd4>
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e009      	b.n	8007d24 <HAL_I2C_Init+0xe8>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
 8007d1a:	4a69      	ldr	r2, [pc, #420]	@ (8007ec0 <HAL_I2C_Init+0x284>)
 8007d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d20:	099b      	lsrs	r3, r3, #6
 8007d22:	3301      	adds	r3, #1
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007d36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	495c      	ldr	r1, [pc, #368]	@ (8007eb0 <HAL_I2C_Init+0x274>)
 8007d40:	428b      	cmp	r3, r1
 8007d42:	d819      	bhi.n	8007d78 <HAL_I2C_Init+0x13c>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	1e59      	subs	r1, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d52:	1c59      	adds	r1, r3, #1
 8007d54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007d58:	400b      	ands	r3, r1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <HAL_I2C_Init+0x138>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1e59      	subs	r1, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d72:	e051      	b.n	8007e18 <HAL_I2C_Init+0x1dc>
 8007d74:	2304      	movs	r3, #4
 8007d76:	e04f      	b.n	8007e18 <HAL_I2C_Init+0x1dc>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d111      	bne.n	8007da4 <HAL_I2C_Init+0x168>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	1e58      	subs	r0, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6859      	ldr	r1, [r3, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	440b      	add	r3, r1
 8007d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d92:	3301      	adds	r3, #1
 8007d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	e012      	b.n	8007dca <HAL_I2C_Init+0x18e>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	1e58      	subs	r0, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6859      	ldr	r1, [r3, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	0099      	lsls	r1, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dba:	3301      	adds	r3, #1
 8007dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <HAL_I2C_Init+0x196>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e022      	b.n	8007e18 <HAL_I2C_Init+0x1dc>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10e      	bne.n	8007df8 <HAL_I2C_Init+0x1bc>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1e58      	subs	r0, r3, #1
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6859      	ldr	r1, [r3, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	440b      	add	r3, r1
 8007de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dec:	3301      	adds	r3, #1
 8007dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007df6:	e00f      	b.n	8007e18 <HAL_I2C_Init+0x1dc>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	1e58      	subs	r0, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6859      	ldr	r1, [r3, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	440b      	add	r3, r1
 8007e06:	0099      	lsls	r1, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e0e:	3301      	adds	r3, #1
 8007e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	6809      	ldr	r1, [r1, #0]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	69da      	ldr	r2, [r3, #28]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	430a      	orrs	r2, r1
 8007e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007e46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6911      	ldr	r1, [r2, #16]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	68d2      	ldr	r2, [r2, #12]
 8007e52:	4311      	orrs	r1, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695a      	ldr	r2, [r3, #20]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0201 	orr.w	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	000186a0 	.word	0x000186a0
 8007eb4:	001e847f 	.word	0x001e847f
 8007eb8:	003d08ff 	.word	0x003d08ff
 8007ebc:	431bde83 	.word	0x431bde83
 8007ec0:	10624dd3 	.word	0x10624dd3

08007ec4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed6:	2b80      	cmp	r3, #128	@ 0x80
 8007ed8:	d103      	bne.n	8007ee2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	611a      	str	r2, [r3, #16]
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	461a      	mov	r2, r3
 8007efc:	460b      	mov	r3, r1
 8007efe:	817b      	strh	r3, [r7, #10]
 8007f00:	4613      	mov	r3, r2
 8007f02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f04:	f7fe ffe0 	bl	8006ec8 <HAL_GetTick>
 8007f08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	f040 80e0 	bne.w	80080d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	2319      	movs	r3, #25
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4970      	ldr	r1, [pc, #448]	@ (80080e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f002 fa14 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e0d3      	b.n	80080da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_I2C_Master_Transmit+0x50>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e0cc      	b.n	80080da <HAL_I2C_Master_Transmit+0x1ea>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d007      	beq.n	8007f66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0201 	orr.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2221      	movs	r2, #33	@ 0x21
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2210      	movs	r2, #16
 8007f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	893a      	ldrh	r2, [r7, #8]
 8007f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	4a50      	ldr	r2, [pc, #320]	@ (80080e8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007fa8:	8979      	ldrh	r1, [r7, #10]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	6a3a      	ldr	r2, [r7, #32]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f001 ffd6 	bl	8009f60 <I2C_MasterRequestWrite>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e08d      	b.n	80080da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007fd4:	e066      	b.n	80080a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	6a39      	ldr	r1, [r7, #32]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f002 fad2 	bl	800a584 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d107      	bne.n	8007ffe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e06b      	b.n	80080da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	1c5a      	adds	r2, r3, #1
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d11b      	bne.n	8008078 <HAL_I2C_Master_Transmit+0x188>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d017      	beq.n	8008078 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	781a      	ldrb	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	6a39      	ldr	r1, [r7, #32]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f002 fac9 	bl	800a614 <I2C_WaitOnBTFFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	2b04      	cmp	r3, #4
 800808e:	d107      	bne.n	80080a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800809e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e01a      	b.n	80080da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d194      	bne.n	8007fd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2220      	movs	r2, #32
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e000      	b.n	80080da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	00100002 	.word	0x00100002
 80080e8:	ffff0000 	.word	0xffff0000

080080ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08c      	sub	sp, #48	@ 0x30
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	607a      	str	r2, [r7, #4]
 80080f6:	461a      	mov	r2, r3
 80080f8:	460b      	mov	r3, r1
 80080fa:	817b      	strh	r3, [r7, #10]
 80080fc:	4613      	mov	r3, r2
 80080fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008100:	f7fe fee2 	bl	8006ec8 <HAL_GetTick>
 8008104:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b20      	cmp	r3, #32
 8008110:	f040 8217 	bne.w	8008542 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2319      	movs	r3, #25
 800811a:	2201      	movs	r2, #1
 800811c:	497c      	ldr	r1, [pc, #496]	@ (8008310 <HAL_I2C_Master_Receive+0x224>)
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f002 f916 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800812a:	2302      	movs	r3, #2
 800812c:	e20a      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_I2C_Master_Receive+0x50>
 8008138:	2302      	movs	r3, #2
 800813a:	e203      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b01      	cmp	r3, #1
 8008150:	d007      	beq.n	8008162 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0201 	orr.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2222      	movs	r2, #34	@ 0x22
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2210      	movs	r2, #16
 800817e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	893a      	ldrh	r2, [r7, #8]
 8008192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a5c      	ldr	r2, [pc, #368]	@ (8008314 <HAL_I2C_Master_Receive+0x228>)
 80081a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80081a4:	8979      	ldrh	r1, [r7, #10]
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f001 ff5a 	bl	800a064 <I2C_MasterRequestRead>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e1c4      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d113      	bne.n	80081ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081c2:	2300      	movs	r3, #0
 80081c4:	623b      	str	r3, [r7, #32]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	623b      	str	r3, [r7, #32]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	623b      	str	r3, [r7, #32]
 80081d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e198      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d11b      	bne.n	800822a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008226:	601a      	str	r2, [r3, #0]
 8008228:	e178      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800822e:	2b02      	cmp	r3, #2
 8008230:	d11b      	bne.n	800826a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008240:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008250:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008252:	2300      	movs	r3, #0
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	e158      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008290:	e144      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008296:	2b03      	cmp	r3, #3
 8008298:	f200 80f1 	bhi.w	800847e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d123      	bne.n	80082ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f002 fa2d 	bl	800a708 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e145      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082ea:	e117      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d14e      	bne.n	8008392 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fa:	2200      	movs	r2, #0
 80082fc:	4906      	ldr	r1, [pc, #24]	@ (8008318 <HAL_I2C_Master_Receive+0x22c>)
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f002 f826 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d008      	beq.n	800831c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e11a      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
 800830e:	bf00      	nop
 8008310:	00100002 	.word	0x00100002
 8008314:	ffff0000 	.word	0xffff0000
 8008318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800832a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008348:	3b01      	subs	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008386:	b29b      	uxth	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008390:	e0c4      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	2200      	movs	r2, #0
 800839a:	496c      	ldr	r1, [pc, #432]	@ (800854c <HAL_I2C_Master_Receive+0x460>)
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f001 ffd7 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0cb      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2200      	movs	r2, #0
 80083f6:	4955      	ldr	r1, [pc, #340]	@ (800854c <HAL_I2C_Master_Receive+0x460>)
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 ffa9 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e09d      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008434:	3b01      	subs	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008440:	b29b      	uxth	r3, r3
 8008442:	3b01      	subs	r3, #1
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008466:	3b01      	subs	r3, #1
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008472:	b29b      	uxth	r3, r3
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800847c:	e04e      	b.n	800851c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800847e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008480:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f002 f940 	bl	800a708 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e058      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d124      	bne.n	800851c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d107      	bne.n	80084ea <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	691a      	ldr	r2, [r3, #16]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f4:	b2d2      	uxtb	r2, r2
 80084f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	f47f aeb6 	bne.w	8008292 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	e000      	b.n	8008544 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008542:	2302      	movs	r3, #2
  }
}
 8008544:	4618      	mov	r0, r3
 8008546:	3728      	adds	r7, #40	@ 0x28
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	00010004 	.word	0x00010004

08008550 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	@ 0x28
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607a      	str	r2, [r7, #4]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	460b      	mov	r3, r1
 800855e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008560:	f7fe fcb2 	bl	8006ec8 <HAL_GetTick>
 8008564:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b20      	cmp	r3, #32
 8008574:	f040 8111 	bne.w	800879a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	2319      	movs	r3, #25
 800857e:	2201      	movs	r2, #1
 8008580:	4988      	ldr	r1, [pc, #544]	@ (80087a4 <HAL_I2C_IsDeviceReady+0x254>)
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f001 fee4 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d001      	beq.n	8008592 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800858e:	2302      	movs	r3, #2
 8008590:	e104      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_I2C_IsDeviceReady+0x50>
 800859c:	2302      	movs	r3, #2
 800859e:	e0fd      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d007      	beq.n	80085c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0201 	orr.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2224      	movs	r2, #36	@ 0x24
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	4a70      	ldr	r2, [pc, #448]	@ (80087a8 <HAL_I2C_IsDeviceReady+0x258>)
 80085e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f001 fea2 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00d      	beq.n	800862e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800861c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008620:	d103      	bne.n	800862a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008628:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e0b6      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800862e:	897b      	ldrh	r3, [r7, #10]
 8008630:	b2db      	uxtb	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800863c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800863e:	f7fe fc43 	bl	8006ec8 <HAL_GetTick>
 8008642:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b02      	cmp	r3, #2
 8008650:	bf0c      	ite	eq
 8008652:	2301      	moveq	r3, #1
 8008654:	2300      	movne	r3, #0
 8008656:	b2db      	uxtb	r3, r3
 8008658:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008668:	bf0c      	ite	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2300      	movne	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008672:	e025      	b.n	80086c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008674:	f7fe fc28 	bl	8006ec8 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d302      	bcc.n	800868a <HAL_I2C_IsDeviceReady+0x13a>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	22a0      	movs	r2, #160	@ 0xa0
 800868e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b02      	cmp	r3, #2
 800869e:	bf0c      	ite	eq
 80086a0:	2301      	moveq	r3, #1
 80086a2:	2300      	movne	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b6:	bf0c      	ite	eq
 80086b8:	2301      	moveq	r3, #1
 80086ba:	2300      	movne	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80086ca:	d005      	beq.n	80086d8 <HAL_I2C_IsDeviceReady+0x188>
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d102      	bne.n	80086d8 <HAL_I2C_IsDeviceReady+0x188>
 80086d2:	7dbb      	ldrb	r3, [r7, #22]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0cd      	beq.n	8008674 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d129      	bne.n	8008742 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	613b      	str	r3, [r7, #16]
 8008712:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2319      	movs	r3, #25
 800871a:	2201      	movs	r2, #1
 800871c:	4921      	ldr	r1, [pc, #132]	@ (80087a4 <HAL_I2C_IsDeviceReady+0x254>)
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f001 fe16 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e036      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2220      	movs	r2, #32
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e02c      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008750:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800875a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	2319      	movs	r3, #25
 8008762:	2201      	movs	r2, #1
 8008764:	490f      	ldr	r1, [pc, #60]	@ (80087a4 <HAL_I2C_IsDeviceReady+0x254>)
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f001 fdf2 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e012      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	3301      	adds	r3, #1
 800877a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	f4ff af32 	bcc.w	80085ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800879a:	2302      	movs	r3, #2
  }
}
 800879c:	4618      	mov	r0, r3
 800879e:	3720      	adds	r7, #32
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	00100002 	.word	0x00100002
 80087a8:	ffff0000 	.word	0xffff0000

080087ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80087cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b10      	cmp	r3, #16
 80087da:	d003      	beq.n	80087e4 <HAL_I2C_EV_IRQHandler+0x38>
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	2b40      	cmp	r3, #64	@ 0x40
 80087e0:	f040 80b1 	bne.w	8008946 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10d      	bne.n	800881a <HAL_I2C_EV_IRQHandler+0x6e>
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008804:	d003      	beq.n	800880e <HAL_I2C_EV_IRQHandler+0x62>
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800880c:	d101      	bne.n	8008812 <HAL_I2C_EV_IRQHandler+0x66>
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <HAL_I2C_EV_IRQHandler+0x68>
 8008812:	2300      	movs	r3, #0
 8008814:	2b01      	cmp	r3, #1
 8008816:	f000 8114 	beq.w	8008a42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_I2C_EV_IRQHandler+0x90>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800882a:	2b00      	cmp	r3, #0
 800882c:	d006      	beq.n	800883c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 fff6 	bl	800a820 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fd76 	bl	8009326 <I2C_Master_SB>
 800883a:	e083      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f003 0308 	and.w	r3, r3, #8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <HAL_I2C_EV_IRQHandler+0xac>
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fdee 	bl	8009432 <I2C_Master_ADD10>
 8008856:	e075      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <HAL_I2C_EV_IRQHandler+0xc8>
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fe0a 	bl	8009486 <I2C_Master_ADDR>
 8008872:	e067      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d036      	beq.n	80088ec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800888c:	f000 80db 	beq.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00d      	beq.n	80088b6 <HAL_I2C_EV_IRQHandler+0x10a>
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <HAL_I2C_EV_IRQHandler+0x10a>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f9d6 	bl	8008c60 <I2C_MasterTransmit_TXE>
 80088b4:	e046      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 80c2 	beq.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 80bc 	beq.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	2b21      	cmp	r3, #33	@ 0x21
 80088d2:	d103      	bne.n	80088dc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fa5f 	bl	8008d98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088da:	e0b4      	b.n	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	f040 80b1 	bne.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 facd 	bl	8008e84 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80088ea:	e0ac      	b.n	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088fa:	f000 80a4 	beq.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00d      	beq.n	8008924 <HAL_I2C_EV_IRQHandler+0x178>
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800890e:	2b00      	cmp	r3, #0
 8008910:	d008      	beq.n	8008924 <HAL_I2C_EV_IRQHandler+0x178>
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fb49 	bl	8008fb4 <I2C_MasterReceive_RXNE>
 8008922:	e00f      	b.n	8008944 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 808b 	beq.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8085 	beq.w	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fc01 	bl	8009144 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008942:	e080      	b.n	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
 8008944:	e07f      	b.n	8008a46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	e007      	b.n	8008968 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d011      	beq.n	8008996 <HAL_I2C_EV_IRQHandler+0x1ea>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00c      	beq.n	8008996 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008980:	2b00      	cmp	r3, #0
 8008982:	d003      	beq.n	800898c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800898c:	69b9      	ldr	r1, [r7, #24]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 ffc8 	bl	8009924 <I2C_Slave_ADDR>
 8008994:	e05a      	b.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d008      	beq.n	80089b2 <HAL_I2C_EV_IRQHandler+0x206>
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 f802 	bl	80099b4 <I2C_Slave_STOPF>
 80089b0:	e04c      	b.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b21      	cmp	r3, #33	@ 0x21
 80089b6:	d002      	beq.n	80089be <HAL_I2C_EV_IRQHandler+0x212>
 80089b8:	7bbb      	ldrb	r3, [r7, #14]
 80089ba:	2b29      	cmp	r3, #41	@ 0x29
 80089bc:	d120      	bne.n	8008a00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00d      	beq.n	80089e4 <HAL_I2C_EV_IRQHandler+0x238>
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <HAL_I2C_EV_IRQHandler+0x238>
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fee3 	bl	80097a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089e2:	e032      	b.n	8008a4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d02d      	beq.n	8008a4a <HAL_I2C_EV_IRQHandler+0x29e>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d028      	beq.n	8008a4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 ff12 	bl	8009822 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80089fe:	e024      	b.n	8008a4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00d      	beq.n	8008a26 <HAL_I2C_EV_IRQHandler+0x27a>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_I2C_EV_IRQHandler+0x27a>
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 ff20 	bl	8009864 <I2C_SlaveReceive_RXNE>
 8008a24:	e012      	b.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00d      	beq.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d008      	beq.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 ff50 	bl	80098e0 <I2C_SlaveReceive_BTF>
 8008a40:	e004      	b.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8008a42:	bf00      	nop
 8008a44:	e002      	b.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008a46:	bf00      	nop
 8008a48:	e000      	b.n	8008a4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008a4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008a4c:	3720      	adds	r7, #32
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b08a      	sub	sp, #40	@ 0x28
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00d      	beq.n	8008a9c <HAL_I2C_ER_IRQHandler+0x4a>
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d008      	beq.n	8008a9c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
 8008a90:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a9a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00d      	beq.n	8008ac2 <HAL_I2C_ER_IRQHandler+0x70>
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	f043 0302 	orr.w	r3, r3, #2
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8008ac0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d03e      	beq.n	8008b4a <HAL_I2C_ER_IRQHandler+0xf8>
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d039      	beq.n	8008b4a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8008ad6:	7efb      	ldrb	r3, [r7, #27]
 8008ad8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ae8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8008af0:	7ebb      	ldrb	r3, [r7, #26]
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	d112      	bne.n	8008b1c <HAL_I2C_ER_IRQHandler+0xca>
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10f      	bne.n	8008b1c <HAL_I2C_ER_IRQHandler+0xca>
 8008afc:	7cfb      	ldrb	r3, [r7, #19]
 8008afe:	2b21      	cmp	r3, #33	@ 0x21
 8008b00:	d008      	beq.n	8008b14 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008b02:	7cfb      	ldrb	r3, [r7, #19]
 8008b04:	2b29      	cmp	r3, #41	@ 0x29
 8008b06:	d005      	beq.n	8008b14 <HAL_I2C_ER_IRQHandler+0xc2>
 8008b08:	7cfb      	ldrb	r3, [r7, #19]
 8008b0a:	2b28      	cmp	r3, #40	@ 0x28
 8008b0c:	d106      	bne.n	8008b1c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2b21      	cmp	r3, #33	@ 0x21
 8008b12:	d103      	bne.n	8008b1c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f87d 	bl	8009c14 <I2C_Slave_AF>
 8008b1a:	e016      	b.n	8008b4a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	f043 0304 	orr.w	r3, r3, #4
 8008b2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008b2e:	7efb      	ldrb	r3, [r7, #27]
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	d002      	beq.n	8008b3a <HAL_I2C_ER_IRQHandler+0xe8>
 8008b34:	7efb      	ldrb	r3, [r7, #27]
 8008b36:	2b40      	cmp	r3, #64	@ 0x40
 8008b38:	d107      	bne.n	8008b4a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <HAL_I2C_ER_IRQHandler+0x11e>
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d008      	beq.n	8008b70 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	f043 0308 	orr.w	r3, r3, #8
 8008b64:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8008b6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d008      	beq.n	8008b88 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f001 f8ba 	bl	8009cfc <I2C_ITError>
  }
}
 8008b88:	bf00      	nop
 8008b8a:	3728      	adds	r7, #40	@ 0x28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
 8008bec:	4613      	mov	r3, r2
 8008bee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d150      	bne.n	8008d28 <I2C_MasterTransmit_TXE+0xc8>
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	2b21      	cmp	r3, #33	@ 0x21
 8008c8a:	d14d      	bne.n	8008d28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d01d      	beq.n	8008cce <I2C_MasterTransmit_TXE+0x6e>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d01a      	beq.n	8008cce <I2C_MasterTransmit_TXE+0x6e>
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c9e:	d016      	beq.n	8008cce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2211      	movs	r2, #17
 8008cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ff62 	bl	8008b90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008ccc:	e060      	b.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cdc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b40      	cmp	r3, #64	@ 0x40
 8008d06:	d107      	bne.n	8008d18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff ff7d 	bl	8008c10 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d16:	e03b      	b.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ff35 	bl	8008b90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008d26:	e033      	b.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b21      	cmp	r3, #33	@ 0x21
 8008d2c:	d005      	beq.n	8008d3a <I2C_MasterTransmit_TXE+0xda>
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b40      	cmp	r3, #64	@ 0x40
 8008d32:	d12d      	bne.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b22      	cmp	r3, #34	@ 0x22
 8008d38:	d12a      	bne.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d108      	bne.n	8008d56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008d54:	e01c      	b.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d103      	bne.n	8008d6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f88e 	bl	8008e84 <I2C_MemoryTransmit_TXE_BTF>
}
 8008d68:	e012      	b.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6e:	781a      	ldrb	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008d8e:	e7ff      	b.n	8008d90 <I2C_MasterTransmit_TXE+0x130>
 8008d90:	bf00      	nop
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b21      	cmp	r3, #33	@ 0x21
 8008db0:	d164      	bne.n	8008e7c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d012      	beq.n	8008de2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008de0:	e04c      	b.n	8008e7c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d01d      	beq.n	8008e24 <I2C_MasterTransmit_BTF+0x8c>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d01a      	beq.n	8008e24 <I2C_MasterTransmit_BTF+0x8c>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008df4:	d016      	beq.n	8008e24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2211      	movs	r2, #17
 8008e0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff feb7 	bl	8008b90 <HAL_I2C_MasterTxCpltCallback>
}
 8008e22:	e02b      	b.n	8008e7c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008e32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b40      	cmp	r3, #64	@ 0x40
 8008e5c:	d107      	bne.n	8008e6e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff fed2 	bl	8008c10 <HAL_I2C_MemTxCpltCallback>
}
 8008e6c:	e006      	b.n	8008e7c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fe8a 	bl	8008b90 <HAL_I2C_MasterTxCpltCallback>
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d11d      	bne.n	8008ed8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d10b      	bne.n	8008ebc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb4:	1c9a      	adds	r2, r3, #2
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008eba:	e077      	b.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	121b      	asrs	r3, r3, #8
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008ed6:	e069      	b.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d10b      	bne.n	8008ef8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008ef6:	e059      	b.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d152      	bne.n	8008fa6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b22      	cmp	r3, #34	@ 0x22
 8008f04:	d10d      	bne.n	8008f22 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f14:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008f20:	e044      	b.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d015      	beq.n	8008f58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	2b21      	cmp	r3, #33	@ 0x21
 8008f30:	d112      	bne.n	8008f58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008f56:	e029      	b.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d124      	bne.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b21      	cmp	r3, #33	@ 0x21
 8008f66:	d121      	bne.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008f76:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fe36 	bl	8008c10 <HAL_I2C_MemTxCpltCallback>
}
 8008fa4:	e002      	b.n	8008fac <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe ff8c 	bl	8007ec4 <I2C_Flush_DR>
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b22      	cmp	r3, #34	@ 0x22
 8008fc6:	f040 80b9 	bne.w	800913c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d921      	bls.n	8009022 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	b2d2      	uxtb	r2, r2
 8008fea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009008:	b29b      	uxth	r3, r3
 800900a:	2b03      	cmp	r3, #3
 800900c:	f040 8096 	bne.w	800913c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800901e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009020:	e08c      	b.n	800913c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009026:	2b02      	cmp	r3, #2
 8009028:	d07f      	beq.n	800912a <I2C_MasterReceive_RXNE+0x176>
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d002      	beq.n	8009036 <I2C_MasterReceive_RXNE+0x82>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d179      	bne.n	800912a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fb34 	bl	800a6a4 <I2C_WaitOnSTOPRequestThroughIT>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d14c      	bne.n	80090dc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009050:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009060:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	691a      	ldr	r2, [r3, #16]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906c:	b2d2      	uxtb	r2, r2
 800906e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009074:	1c5a      	adds	r2, r3, #1
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b40      	cmp	r3, #64	@ 0x40
 800909a:	d10a      	bne.n	80090b2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7ff fdba 	bl	8008c24 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090b0:	e044      	b.n	800913c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d002      	beq.n	80090c6 <I2C_MasterReceive_RXNE+0x112>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d103      	bne.n	80090ce <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80090cc:	e002      	b.n	80090d4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2212      	movs	r2, #18
 80090d2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff fd65 	bl	8008ba4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80090da:	e02f      	b.n	800913c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80090ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691a      	ldr	r2, [r3, #16]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	b2d2      	uxtb	r2, r2
 80090f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b29a      	uxth	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fd88 	bl	8008c38 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009128:	e008      	b.n	800913c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009138:	605a      	str	r2, [r3, #4]
}
 800913a:	e7ff      	b.n	800913c <I2C_MasterReceive_RXNE+0x188>
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009156:	b29b      	uxth	r3, r3
 8009158:	2b04      	cmp	r3, #4
 800915a:	d11b      	bne.n	8009194 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800916a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691a      	ldr	r2, [r3, #16]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917e:	1c5a      	adds	r2, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009188:	b29b      	uxth	r3, r3
 800918a:	3b01      	subs	r3, #1
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009192:	e0c4      	b.n	800931e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b03      	cmp	r3, #3
 800919c:	d129      	bne.n	80091f2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091ac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d00a      	beq.n	80091ca <I2C_MasterReceive_BTF+0x86>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d007      	beq.n	80091ca <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80091f0:	e095      	b.n	800931e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d17d      	bne.n	80092f8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d002      	beq.n	8009208 <I2C_MasterReceive_BTF+0xc4>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b10      	cmp	r3, #16
 8009206:	d108      	bne.n	800921a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	e016      	b.n	8009248 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b04      	cmp	r3, #4
 800921e:	d002      	beq.n	8009226 <I2C_MasterReceive_BTF+0xe2>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d108      	bne.n	8009238 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009234:	601a      	str	r2, [r3, #0]
 8009236:	e007      	b.n	8009248 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009246:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	b2d2      	uxtb	r2, r2
 8009254:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009264:	b29b      	uxth	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	b29a      	uxth	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800928a:	b29b      	uxth	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	b29a      	uxth	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80092a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b40      	cmp	r3, #64	@ 0x40
 80092b6:	d10a      	bne.n	80092ce <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff fcac 	bl	8008c24 <HAL_I2C_MemRxCpltCallback>
}
 80092cc:	e027      	b.n	800931e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d002      	beq.n	80092e2 <I2C_MasterReceive_BTF+0x19e>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d103      	bne.n	80092ea <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80092e8:	e002      	b.n	80092f0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2212      	movs	r2, #18
 80092ee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff fc57 	bl	8008ba4 <HAL_I2C_MasterRxCpltCallback>
}
 80092f6:	e012      	b.n	800931e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691a      	ldr	r2, [r3, #16]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009302:	b2d2      	uxtb	r2, r2
 8009304:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009326:	b480      	push	{r7}
 8009328:	b083      	sub	sp, #12
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b40      	cmp	r3, #64	@ 0x40
 8009338:	d117      	bne.n	800936a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800933e:	2b00      	cmp	r3, #0
 8009340:	d109      	bne.n	8009356 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009346:	b2db      	uxtb	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009352:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009354:	e067      	b.n	8009426 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f043 0301 	orr.w	r3, r3, #1
 8009360:	b2da      	uxtb	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	611a      	str	r2, [r3, #16]
}
 8009368:	e05d      	b.n	8009426 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009372:	d133      	bne.n	80093dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b21      	cmp	r3, #33	@ 0x21
 800937e:	d109      	bne.n	8009394 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009384:	b2db      	uxtb	r3, r3
 8009386:	461a      	mov	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009390:	611a      	str	r2, [r3, #16]
 8009392:	e008      	b.n	80093a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f043 0301 	orr.w	r3, r3, #1
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <I2C_Master_SB+0x92>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d108      	bne.n	80093ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d032      	beq.n	8009426 <I2C_Master_SB+0x100>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d02d      	beq.n	8009426 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093d8:	605a      	str	r2, [r3, #4]
}
 80093da:	e024      	b.n	8009426 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10e      	bne.n	8009402 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	11db      	asrs	r3, r3, #7
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0306 	and.w	r3, r3, #6
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f063 030f 	orn	r3, r3, #15
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	611a      	str	r2, [r3, #16]
}
 8009400:	e011      	b.n	8009426 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009406:	2b01      	cmp	r3, #1
 8009408:	d10d      	bne.n	8009426 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800940e:	b29b      	uxth	r3, r3
 8009410:	11db      	asrs	r3, r3, #7
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0306 	and.w	r3, r3, #6
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f063 030e 	orn	r3, r3, #14
 800941e:	b2da      	uxtb	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	611a      	str	r2, [r3, #16]
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr

08009432 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009432:	b480      	push	{r7}
 8009434:	b083      	sub	sp, #12
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943e:	b2da      	uxtb	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <I2C_Master_ADD10+0x26>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d108      	bne.n	800946a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00c      	beq.n	800947a <I2C_Master_ADD10+0x48>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009478:	605a      	str	r2, [r3, #4]
  }
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009486:	b480      	push	{r7}
 8009488:	b091      	sub	sp, #68	@ 0x44
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009494:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b22      	cmp	r3, #34	@ 0x22
 80094ae:	f040 8169 	bne.w	8009784 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10f      	bne.n	80094da <I2C_Master_ADDR+0x54>
 80094ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094be:	2b40      	cmp	r3, #64	@ 0x40
 80094c0:	d10b      	bne.n	80094da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094c2:	2300      	movs	r3, #0
 80094c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	e160      	b.n	800979c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d11d      	bne.n	800951e <I2C_Master_ADDR+0x98>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80094ea:	d118      	bne.n	800951e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ec:	2300      	movs	r3, #0
 80094ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009510:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	651a      	str	r2, [r3, #80]	@ 0x50
 800951c:	e13e      	b.n	800979c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009522:	b29b      	uxth	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d113      	bne.n	8009550 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009528:	2300      	movs	r3, #0
 800952a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800953c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	e115      	b.n	800977c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b01      	cmp	r3, #1
 8009558:	f040 808a 	bne.w	8009670 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800955c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009562:	d137      	bne.n	80095d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009572:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009582:	d113      	bne.n	80095ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009592:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009594:	2300      	movs	r3, #0
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095aa:	e0e7      	b.n	800977c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ac:	2300      	movs	r3, #0
 80095ae:	623b      	str	r3, [r7, #32]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	623b      	str	r3, [r7, #32]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	623b      	str	r3, [r7, #32]
 80095c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	e0d3      	b.n	800977c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	2b08      	cmp	r3, #8
 80095d8:	d02e      	beq.n	8009638 <I2C_Master_ADDR+0x1b2>
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	2b20      	cmp	r3, #32
 80095de:	d02b      	beq.n	8009638 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80095e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e2:	2b12      	cmp	r3, #18
 80095e4:	d102      	bne.n	80095ec <I2C_Master_ADDR+0x166>
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d125      	bne.n	8009638 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80095ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d00e      	beq.n	8009610 <I2C_Master_ADDR+0x18a>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d00b      	beq.n	8009610 <I2C_Master_ADDR+0x18a>
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	d008      	beq.n	8009610 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	e007      	b.n	8009620 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800961e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009620:	2300      	movs	r3, #0
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	61fb      	str	r3, [r7, #28]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	e0a1      	b.n	800977c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009646:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009648:	2300      	movs	r3, #0
 800964a:	61bb      	str	r3, [r7, #24]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	61bb      	str	r3, [r7, #24]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	e085      	b.n	800977c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009674:	b29b      	uxth	r3, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d14d      	bne.n	8009716 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	2b04      	cmp	r3, #4
 800967e:	d016      	beq.n	80096ae <I2C_Master_ADDR+0x228>
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	2b02      	cmp	r3, #2
 8009684:	d013      	beq.n	80096ae <I2C_Master_ADDR+0x228>
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	2b10      	cmp	r3, #16
 800968a:	d010      	beq.n	80096ae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800969a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	e007      	b.n	80096be <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80096bc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096cc:	d117      	bne.n	80096fe <I2C_Master_ADDR+0x278>
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80096d4:	d00b      	beq.n	80096ee <I2C_Master_ADDR+0x268>
 80096d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d008      	beq.n	80096ee <I2C_Master_ADDR+0x268>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	2b08      	cmp	r3, #8
 80096e0:	d005      	beq.n	80096ee <I2C_Master_ADDR+0x268>
 80096e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e4:	2b10      	cmp	r3, #16
 80096e6:	d002      	beq.n	80096ee <I2C_Master_ADDR+0x268>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d107      	bne.n	80096fe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	e032      	b.n	800977c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009724:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009734:	d117      	bne.n	8009766 <I2C_Master_ADDR+0x2e0>
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800973c:	d00b      	beq.n	8009756 <I2C_Master_ADDR+0x2d0>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	2b01      	cmp	r3, #1
 8009742:	d008      	beq.n	8009756 <I2C_Master_ADDR+0x2d0>
 8009744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009746:	2b08      	cmp	r3, #8
 8009748:	d005      	beq.n	8009756 <I2C_Master_ADDR+0x2d0>
 800974a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974c:	2b10      	cmp	r3, #16
 800974e:	d002      	beq.n	8009756 <I2C_Master_ADDR+0x2d0>
 8009750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009752:	2b20      	cmp	r3, #32
 8009754:	d107      	bne.n	8009766 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009764:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	613b      	str	r3, [r7, #16]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	613b      	str	r3, [r7, #16]
 800977a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009782:	e00b      	b.n	800979c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	60fb      	str	r3, [r7, #12]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
}
 800979a:	e7ff      	b.n	800979c <I2C_Master_ADDR+0x316>
 800979c:	bf00      	nop
 800979e:	3744      	adds	r7, #68	@ 0x44
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d02b      	beq.n	800981a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d114      	bne.n	800981a <I2C_SlaveTransmit_TXE+0x72>
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b29      	cmp	r3, #41	@ 0x29
 80097f4:	d111      	bne.n	800981a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009804:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2221      	movs	r2, #33	@ 0x21
 800980a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2228      	movs	r2, #40	@ 0x28
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff f9cf 	bl	8008bb8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800981a:	bf00      	nop
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d011      	beq.n	8009858 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009838:	781a      	ldrb	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800984e:	b29b      	uxth	r3, r3
 8009850:	3b01      	subs	r3, #1
 8009852:	b29a      	uxth	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009872:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009878:	b29b      	uxth	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d02c      	beq.n	80098d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009888:	b2d2      	uxtb	r2, r2
 800988a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800989a:	b29b      	uxth	r3, r3
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d114      	bne.n	80098d8 <I2C_SlaveReceive_RXNE+0x74>
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098b2:	d111      	bne.n	80098d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2222      	movs	r2, #34	@ 0x22
 80098c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2228      	movs	r2, #40	@ 0x28
 80098ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff f97a 	bl	8008bcc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80098d8:	bf00      	nop
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d012      	beq.n	8009918 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691a      	ldr	r2, [r3, #16]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800990e:	b29b      	uxth	r3, r3
 8009910:	3b01      	subs	r3, #1
 8009912:	b29a      	uxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800993e:	2b28      	cmp	r3, #40	@ 0x28
 8009940:	d125      	bne.n	800998e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009950:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800995c:	2301      	movs	r3, #1
 800995e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	81bb      	strh	r3, [r7, #12]
 8009970:	e002      	b.n	8009978 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009980:	89ba      	ldrh	r2, [r7, #12]
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff f92a 	bl	8008be0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800998c:	e00e      	b.n	80099ac <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	60bb      	str	r3, [r7, #8]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	60bb      	str	r3, [r7, #8]
 80099a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80099d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80099d4:	2300      	movs	r3, #0
 80099d6:	60bb      	str	r3, [r7, #8]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	60bb      	str	r3, [r7, #8]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f042 0201 	orr.w	r2, r2, #1
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a10:	d172      	bne.n	8009af8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
 8009a14:	2b22      	cmp	r3, #34	@ 0x22
 8009a16:	d002      	beq.n	8009a1e <I2C_Slave_STOPF+0x6a>
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1c:	d135      	bne.n	8009a8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d005      	beq.n	8009a42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a3a:	f043 0204 	orr.w	r2, r3, #4
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fd fc23 	bl	80072a2 <HAL_DMA_GetState>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d049      	beq.n	8009af6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a66:	4a69      	ldr	r2, [pc, #420]	@ (8009c0c <I2C_Slave_STOPF+0x258>)
 8009a68:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fd fbf5 	bl	800725e <HAL_DMA_Abort_IT>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d03d      	beq.n	8009af6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009a84:	4610      	mov	r0, r2
 8009a86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009a88:	e035      	b.n	8009af6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa6:	f043 0204 	orr.w	r2, r3, #4
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fd fbed 	bl	80072a2 <HAL_DMA_GetState>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d014      	beq.n	8009af8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8009c0c <I2C_Slave_STOPF+0x258>)
 8009ad4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd fbbf 	bl	800725e <HAL_DMA_Abort_IT>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d008      	beq.n	8009af8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	e000      	b.n	8009af8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009af6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d03e      	beq.n	8009b80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	695b      	ldr	r3, [r3, #20]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d112      	bne.n	8009b36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	691a      	ldr	r2, [r3, #16]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b40:	2b40      	cmp	r3, #64	@ 0x40
 8009b42:	d112      	bne.n	8009b6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	691a      	ldr	r2, [r3, #16]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4e:	b2d2      	uxtb	r2, r2
 8009b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b78:	f043 0204 	orr.w	r2, r3, #4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f8b7 	bl	8009cfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009b8e:	e039      	b.n	8009c04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b94:	d109      	bne.n	8009baa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2228      	movs	r2, #40	@ 0x28
 8009ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff f811 	bl	8008bcc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b28      	cmp	r3, #40	@ 0x28
 8009bb4:	d111      	bne.n	8009bda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4a15      	ldr	r2, [pc, #84]	@ (8009c10 <I2C_Slave_STOPF+0x25c>)
 8009bba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7ff f812 	bl	8008bfc <HAL_I2C_ListenCpltCallback>
}
 8009bd8:	e014      	b.n	8009c04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bde:	2b22      	cmp	r3, #34	@ 0x22
 8009be0:	d002      	beq.n	8009be8 <I2C_Slave_STOPF+0x234>
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2b22      	cmp	r3, #34	@ 0x22
 8009be6:	d10d      	bne.n	8009c04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7fe ffe4 	bl	8008bcc <HAL_I2C_SlaveRxCpltCallback>
}
 8009c04:	bf00      	nop
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	0800a201 	.word	0x0800a201
 8009c10:	ffff0000 	.word	0xffff0000

08009c14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	2b08      	cmp	r3, #8
 8009c2e:	d002      	beq.n	8009c36 <I2C_Slave_AF+0x22>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d129      	bne.n	8009c8a <I2C_Slave_AF+0x76>
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	2b28      	cmp	r3, #40	@ 0x28
 8009c3a:	d126      	bne.n	8009c8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8009cf8 <I2C_Slave_AF+0xe4>)
 8009c40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009c5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2220      	movs	r2, #32
 8009c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7fe ffba 	bl	8008bfc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009c88:	e031      	b.n	8009cee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	2b21      	cmp	r3, #33	@ 0x21
 8009c8e:	d129      	bne.n	8009ce4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a19      	ldr	r2, [pc, #100]	@ (8009cf8 <I2C_Slave_AF+0xe4>)
 8009c94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2221      	movs	r2, #33	@ 0x21
 8009c9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009cba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009cc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009cd4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7fe f8f4 	bl	8007ec4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe ff6b 	bl	8008bb8 <HAL_I2C_SlaveTxCpltCallback>
}
 8009ce2:	e004      	b.n	8009cee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009cec:	615a      	str	r2, [r3, #20]
}
 8009cee:	bf00      	nop
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	ffff0000 	.word	0xffff0000

08009cfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b10      	cmp	r3, #16
 8009d18:	d002      	beq.n	8009d20 <I2C_ITError+0x24>
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b40      	cmp	r3, #64	@ 0x40
 8009d1e:	d10a      	bne.n	8009d36 <I2C_ITError+0x3a>
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	2b22      	cmp	r3, #34	@ 0x22
 8009d24:	d107      	bne.n	8009d36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d3c:	2b28      	cmp	r3, #40	@ 0x28
 8009d3e:	d107      	bne.n	8009d50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2228      	movs	r2, #40	@ 0x28
 8009d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009d4e:	e015      	b.n	8009d7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d5e:	d00a      	beq.n	8009d76 <I2C_ITError+0x7a>
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b60      	cmp	r3, #96	@ 0x60
 8009d64:	d007      	beq.n	8009d76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d8a:	d162      	bne.n	8009e52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009da0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d020      	beq.n	8009dec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dae:	4a6a      	ldr	r2, [pc, #424]	@ (8009f58 <I2C_ITError+0x25c>)
 8009db0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd fa51 	bl	800725e <HAL_DMA_Abort_IT>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 8089 	beq.w	8009ed6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f022 0201 	bic.w	r2, r2, #1
 8009dd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009de6:	4610      	mov	r0, r2
 8009de8:	4798      	blx	r3
 8009dea:	e074      	b.n	8009ed6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df0:	4a59      	ldr	r2, [pc, #356]	@ (8009f58 <I2C_ITError+0x25c>)
 8009df2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fd fa30 	bl	800725e <HAL_DMA_Abort_IT>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d068      	beq.n	8009ed6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0e:	2b40      	cmp	r3, #64	@ 0x40
 8009e10:	d10b      	bne.n	8009e2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1c:	b2d2      	uxtb	r2, r2
 8009e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0201 	bic.w	r2, r2, #1
 8009e38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009e4c:	4610      	mov	r0, r2
 8009e4e:	4798      	blx	r3
 8009e50:	e041      	b.n	8009ed6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b60      	cmp	r3, #96	@ 0x60
 8009e5c:	d125      	bne.n	8009eaa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2220      	movs	r2, #32
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e76:	2b40      	cmp	r3, #64	@ 0x40
 8009e78:	d10b      	bne.n	8009e92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691a      	ldr	r2, [r3, #16]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e84:	b2d2      	uxtb	r2, r2
 8009e86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f022 0201 	bic.w	r2, r2, #1
 8009ea0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fe fed2 	bl	8008c4c <HAL_I2C_AbortCpltCallback>
 8009ea8:	e015      	b.n	8009ed6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb4:	2b40      	cmp	r3, #64	@ 0x40
 8009eb6:	d10b      	bne.n	8009ed0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7fe feb1 	bl	8008c38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10e      	bne.n	8009f04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d109      	bne.n	8009f04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d104      	bne.n	8009f04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d007      	beq.n	8009f14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d113      	bne.n	8009f50 <I2C_ITError+0x254>
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	2b28      	cmp	r3, #40	@ 0x28
 8009f2c:	d110      	bne.n	8009f50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a0a      	ldr	r2, [pc, #40]	@ (8009f5c <I2C_ITError+0x260>)
 8009f32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2220      	movs	r2, #32
 8009f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7fe fe56 	bl	8008bfc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f50:	bf00      	nop
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	0800a201 	.word	0x0800a201
 8009f5c:	ffff0000 	.word	0xffff0000

08009f60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d006      	beq.n	8009f8a <I2C_MasterRequestWrite+0x2a>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d003      	beq.n	8009f8a <I2C_MasterRequestWrite+0x2a>
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f88:	d108      	bne.n	8009f9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e00b      	b.n	8009fb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa0:	2b12      	cmp	r3, #18
 8009fa2:	d107      	bne.n	8009fb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f9c5 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00d      	beq.n	8009fe8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fda:	d103      	bne.n	8009fe4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e035      	b.n	800a054 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ff0:	d108      	bne.n	800a004 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009ff2:	897b      	ldrh	r3, [r7, #10]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a000:	611a      	str	r2, [r3, #16]
 800a002:	e01b      	b.n	800a03c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a004:	897b      	ldrh	r3, [r7, #10]
 800a006:	11db      	asrs	r3, r3, #7
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	f003 0306 	and.w	r3, r3, #6
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f063 030f 	orn	r3, r3, #15
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	490e      	ldr	r1, [pc, #56]	@ (800a05c <I2C_MasterRequestWrite+0xfc>)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fa0e 	bl	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e010      	b.n	800a054 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a032:	897b      	ldrh	r3, [r7, #10]
 800a034:	b2da      	uxtb	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	4907      	ldr	r1, [pc, #28]	@ (800a060 <I2C_MasterRequestWrite+0x100>)
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 f9fe 	bl	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	00010008 	.word	0x00010008
 800a060:	00010002 	.word	0x00010002

0800a064 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b088      	sub	sp, #32
 800a068:	af02      	add	r7, sp, #8
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	460b      	mov	r3, r1
 800a072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a088:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b08      	cmp	r3, #8
 800a08e:	d006      	beq.n	800a09e <I2C_MasterRequestRead+0x3a>
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d003      	beq.n	800a09e <I2C_MasterRequestRead+0x3a>
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a09c:	d108      	bne.n	800a0b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	e00b      	b.n	800a0c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b4:	2b11      	cmp	r3, #17
 800a0b6:	d107      	bne.n	800a0c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f93b 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00d      	beq.n	800a0fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0ee:	d103      	bne.n	800a0f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e079      	b.n	800a1f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a104:	d108      	bne.n	800a118 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a106:	897b      	ldrh	r3, [r7, #10]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	f043 0301 	orr.w	r3, r3, #1
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	611a      	str	r2, [r3, #16]
 800a116:	e05f      	b.n	800a1d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a118:	897b      	ldrh	r3, [r7, #10]
 800a11a:	11db      	asrs	r3, r3, #7
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	f003 0306 	and.w	r3, r3, #6
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f063 030f 	orn	r3, r3, #15
 800a128:	b2da      	uxtb	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4930      	ldr	r1, [pc, #192]	@ (800a1f8 <I2C_MasterRequestRead+0x194>)
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 f984 	bl	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	e054      	b.n	800a1f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a146:	897b      	ldrh	r3, [r7, #10]
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	4929      	ldr	r1, [pc, #164]	@ (800a1fc <I2C_MasterRequestRead+0x198>)
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 f974 	bl	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e044      	b.n	800a1f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a166:	2300      	movs	r3, #0
 800a168:	613b      	str	r3, [r7, #16]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a18a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 f8d9 	bl	800a350 <I2C_WaitOnFlagUntilTimeout>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00d      	beq.n	800a1c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b2:	d103      	bne.n	800a1bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e017      	b.n	800a1f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a1c0:	897b      	ldrh	r3, [r7, #10]
 800a1c2:	11db      	asrs	r3, r3, #7
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	f003 0306 	and.w	r3, r3, #6
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f063 030e 	orn	r3, r3, #14
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	4907      	ldr	r1, [pc, #28]	@ (800a1fc <I2C_MasterRequestRead+0x198>)
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 f930 	bl	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e000      	b.n	800a1f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	00010008 	.word	0x00010008
 800a1fc:	00010002 	.word	0x00010002

0800a200 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a210:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a218:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a21a:	4b4b      	ldr	r3, [pc, #300]	@ (800a348 <I2C_DMAAbort+0x148>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	4a4a      	ldr	r2, [pc, #296]	@ (800a34c <I2C_DMAAbort+0x14c>)
 800a222:	fba2 2303 	umull	r2, r3, r2, r3
 800a226:	0a1a      	lsrs	r2, r3, #8
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	00da      	lsls	r2, r3, #3
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23e:	f043 0220 	orr.w	r2, r3, #32
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800a246:	e00a      	b.n	800a25e <I2C_DMAAbort+0x5e>
    }
    count--;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	3b01      	subs	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a25c:	d0ea      	beq.n	800a234 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a26a:	2200      	movs	r2, #0
 800a26c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27a:	2200      	movs	r2, #0
 800a27c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a28c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2200      	movs	r2, #0
 800a292:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0201 	bic.w	r2, r2, #1
 800a2c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b60      	cmp	r3, #96	@ 0x60
 800a2ce:	d10e      	bne.n	800a2ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a2e6:	6978      	ldr	r0, [r7, #20]
 800a2e8:	f7fe fcb0 	bl	8008c4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a2ec:	e027      	b.n	800a33e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a2ee:	7cfb      	ldrb	r3, [r7, #19]
 800a2f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a2f4:	2b28      	cmp	r3, #40	@ 0x28
 800a2f6:	d117      	bne.n	800a328 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0201 	orr.w	r2, r2, #1
 800a306:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a316:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2200      	movs	r2, #0
 800a31c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2228      	movs	r2, #40	@ 0x28
 800a322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a326:	e007      	b.n	800a338 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2220      	movs	r2, #32
 800a32c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a338:	6978      	ldr	r0, [r7, #20]
 800a33a:	f7fe fc7d 	bl	8008c38 <HAL_I2C_ErrorCallback>
}
 800a33e:	bf00      	nop
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000550 	.word	0x20000550
 800a34c:	14f8b589 	.word	0x14f8b589

0800a350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	4613      	mov	r3, r2
 800a35e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a360:	e048      	b.n	800a3f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a368:	d044      	beq.n	800a3f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a36a:	f7fc fdad 	bl	8006ec8 <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d302      	bcc.n	800a380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d139      	bne.n	800a3f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b01      	cmp	r3, #1
 800a388:	d10d      	bne.n	800a3a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	43da      	mvns	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	4013      	ands	r3, r2
 800a396:	b29b      	uxth	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bf0c      	ite	eq
 800a39c:	2301      	moveq	r3, #1
 800a39e:	2300      	movne	r3, #0
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	e00c      	b.n	800a3c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	43da      	mvns	r2, r3
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bf0c      	ite	eq
 800a3b8:	2301      	moveq	r3, #1
 800a3ba:	2300      	movne	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d116      	bne.n	800a3f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e0:	f043 0220 	orr.w	r2, r3, #32
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e023      	b.n	800a43c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	0c1b      	lsrs	r3, r3, #16
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d10d      	bne.n	800a41a <I2C_WaitOnFlagUntilTimeout+0xca>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	43da      	mvns	r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4013      	ands	r3, r2
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	bf0c      	ite	eq
 800a410:	2301      	moveq	r3, #1
 800a412:	2300      	movne	r3, #0
 800a414:	b2db      	uxtb	r3, r3
 800a416:	461a      	mov	r2, r3
 800a418:	e00c      	b.n	800a434 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	43da      	mvns	r2, r3
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4013      	ands	r3, r2
 800a426:	b29b      	uxth	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	bf0c      	ite	eq
 800a42c:	2301      	moveq	r3, #1
 800a42e:	2300      	movne	r3, #0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	429a      	cmp	r2, r3
 800a438:	d093      	beq.n	800a362 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a452:	e071      	b.n	800a538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a45e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a462:	d123      	bne.n	800a4ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a472:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a47c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	f043 0204 	orr.w	r2, r3, #4
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e067      	b.n	800a57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b2:	d041      	beq.n	800a538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4b4:	f7fc fd08 	bl	8006ec8 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d302      	bcc.n	800a4ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d136      	bne.n	800a538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	0c1b      	lsrs	r3, r3, #16
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d10c      	bne.n	800a4ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	43da      	mvns	r2, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	bf14      	ite	ne
 800a4e6:	2301      	movne	r3, #1
 800a4e8:	2300      	moveq	r3, #0
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	e00b      	b.n	800a506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	43da      	mvns	r2, r3
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	bf14      	ite	ne
 800a500:	2301      	movne	r3, #1
 800a502:	2300      	moveq	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d016      	beq.n	800a538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a524:	f043 0220 	orr.w	r2, r3, #32
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e021      	b.n	800a57c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	0c1b      	lsrs	r3, r3, #16
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d10c      	bne.n	800a55c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	43da      	mvns	r2, r3
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	4013      	ands	r3, r2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	bf14      	ite	ne
 800a554:	2301      	movne	r3, #1
 800a556:	2300      	moveq	r3, #0
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	e00b      	b.n	800a574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	43da      	mvns	r2, r3
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4013      	ands	r3, r2
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bf14      	ite	ne
 800a56e:	2301      	movne	r3, #1
 800a570:	2300      	moveq	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	f47f af6d 	bne.w	800a454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a590:	e034      	b.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f915 	bl	800a7c2 <I2C_IsAcknowledgeFailed>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e034      	b.n	800a60c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5a8:	d028      	beq.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5aa:	f7fc fc8d 	bl	8006ec8 <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d302      	bcc.n	800a5c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d11d      	bne.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ca:	2b80      	cmp	r3, #128	@ 0x80
 800a5cc:	d016      	beq.n	800a5fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e8:	f043 0220 	orr.w	r2, r3, #32
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e007      	b.n	800a60c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a606:	2b80      	cmp	r3, #128	@ 0x80
 800a608:	d1c3      	bne.n	800a592 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a620:	e034      	b.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f8cd 	bl	800a7c2 <I2C_IsAcknowledgeFailed>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e034      	b.n	800a69c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a638:	d028      	beq.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a63a:	f7fc fc45 	bl	8006ec8 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	429a      	cmp	r2, r3
 800a648:	d302      	bcc.n	800a650 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d11d      	bne.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f003 0304 	and.w	r3, r3, #4
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d016      	beq.n	800a68c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2220      	movs	r2, #32
 800a668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a678:	f043 0220 	orr.w	r2, r3, #32
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e007      	b.n	800a69c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	f003 0304 	and.w	r3, r3, #4
 800a696:	2b04      	cmp	r3, #4
 800a698:	d1c3      	bne.n	800a622 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6b0:	4b13      	ldr	r3, [pc, #76]	@ (800a700 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	08db      	lsrs	r3, r3, #3
 800a6b6:	4a13      	ldr	r2, [pc, #76]	@ (800a704 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800a6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6bc:	0a1a      	lsrs	r2, r3, #8
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d107      	bne.n	800a6e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6d6:	f043 0220 	orr.w	r2, r3, #32
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e008      	b.n	800a6f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6f0:	d0e9      	beq.n	800a6c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr
 800a700:	20000550 	.word	0x20000550
 800a704:	14f8b589 	.word	0x14f8b589

0800a708 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a714:	e049      	b.n	800a7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	f003 0310 	and.w	r3, r3, #16
 800a720:	2b10      	cmp	r3, #16
 800a722:	d119      	bne.n	800a758 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f06f 0210 	mvn.w	r2, #16
 800a72c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e030      	b.n	800a7ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a758:	f7fc fbb6 	bl	8006ec8 <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	68ba      	ldr	r2, [r7, #8]
 800a764:	429a      	cmp	r2, r3
 800a766:	d302      	bcc.n	800a76e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d11d      	bne.n	800a7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a778:	2b40      	cmp	r3, #64	@ 0x40
 800a77a:	d016      	beq.n	800a7aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2220      	movs	r2, #32
 800a786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a796:	f043 0220 	orr.w	r2, r3, #32
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e007      	b.n	800a7ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b4:	2b40      	cmp	r3, #64	@ 0x40
 800a7b6:	d1ae      	bne.n	800a716 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b083      	sub	sp, #12
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7d8:	d11b      	bne.n	800a812 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a7e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fe:	f043 0204 	orr.w	r2, r3, #4
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a830:	d103      	bne.n	800a83a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a838:	e007      	b.n	800a84a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a842:	d102      	bne.n	800a84a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2208      	movs	r2, #8
 800a848:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a84a:	bf00      	nop
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
	...

0800a858 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e267      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	2b00      	cmp	r3, #0
 800a874:	d075      	beq.n	800a962 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a876:	4b88      	ldr	r3, [pc, #544]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 030c 	and.w	r3, r3, #12
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d00c      	beq.n	800a89c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a882:	4b85      	ldr	r3, [pc, #532]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d112      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a88e:	4b82      	ldr	r3, [pc, #520]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a89a:	d10b      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a89c:	4b7e      	ldr	r3, [pc, #504]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d05b      	beq.n	800a960 <HAL_RCC_OscConfig+0x108>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d157      	bne.n	800a960 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e242      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8bc:	d106      	bne.n	800a8cc <HAL_RCC_OscConfig+0x74>
 800a8be:	4b76      	ldr	r3, [pc, #472]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a75      	ldr	r2, [pc, #468]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	e01d      	b.n	800a908 <HAL_RCC_OscConfig+0xb0>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8d4:	d10c      	bne.n	800a8f0 <HAL_RCC_OscConfig+0x98>
 800a8d6:	4b70      	ldr	r3, [pc, #448]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a6f      	ldr	r2, [pc, #444]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	4b6d      	ldr	r3, [pc, #436]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a6c      	ldr	r2, [pc, #432]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	e00b      	b.n	800a908 <HAL_RCC_OscConfig+0xb0>
 800a8f0:	4b69      	ldr	r3, [pc, #420]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a68      	ldr	r2, [pc, #416]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	4b66      	ldr	r3, [pc, #408]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a65      	ldr	r2, [pc, #404]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d013      	beq.n	800a938 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a910:	f7fc fada 	bl	8006ec8 <HAL_GetTick>
 800a914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a916:	e008      	b.n	800a92a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a918:	f7fc fad6 	bl	8006ec8 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	2b64      	cmp	r3, #100	@ 0x64
 800a924:	d901      	bls.n	800a92a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e207      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92a:	4b5b      	ldr	r3, [pc, #364]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f0      	beq.n	800a918 <HAL_RCC_OscConfig+0xc0>
 800a936:	e014      	b.n	800a962 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a938:	f7fc fac6 	bl	8006ec8 <HAL_GetTick>
 800a93c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a93e:	e008      	b.n	800a952 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a940:	f7fc fac2 	bl	8006ec8 <HAL_GetTick>
 800a944:	4602      	mov	r2, r0
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	2b64      	cmp	r3, #100	@ 0x64
 800a94c:	d901      	bls.n	800a952 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e1f3      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a952:	4b51      	ldr	r3, [pc, #324]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f0      	bne.n	800a940 <HAL_RCC_OscConfig+0xe8>
 800a95e:	e000      	b.n	800a962 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d063      	beq.n	800aa36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a96e:	4b4a      	ldr	r3, [pc, #296]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f003 030c 	and.w	r3, r3, #12
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00b      	beq.n	800a992 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a97a:	4b47      	ldr	r3, [pc, #284]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a982:	2b08      	cmp	r3, #8
 800a984:	d11c      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a986:	4b44      	ldr	r3, [pc, #272]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d116      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a992:	4b41      	ldr	r3, [pc, #260]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d005      	beq.n	800a9aa <HAL_RCC_OscConfig+0x152>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d001      	beq.n	800a9aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e1c7      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9aa:	4b3b      	ldr	r3, [pc, #236]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	4937      	ldr	r1, [pc, #220]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9be:	e03a      	b.n	800aa36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d020      	beq.n	800aa0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9c8:	4b34      	ldr	r3, [pc, #208]	@ (800aa9c <HAL_RCC_OscConfig+0x244>)
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ce:	f7fc fa7b 	bl	8006ec8 <HAL_GetTick>
 800a9d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d6:	f7fc fa77 	bl	8006ec8 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e1a8      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9e8:	4b2b      	ldr	r3, [pc, #172]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0f0      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f4:	4b28      	ldr	r3, [pc, #160]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	4925      	ldr	r1, [pc, #148]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800aa04:	4313      	orrs	r3, r2
 800aa06:	600b      	str	r3, [r1, #0]
 800aa08:	e015      	b.n	800aa36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa0a:	4b24      	ldr	r3, [pc, #144]	@ (800aa9c <HAL_RCC_OscConfig+0x244>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa10:	f7fc fa5a 	bl	8006ec8 <HAL_GetTick>
 800aa14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa18:	f7fc fa56 	bl	8006ec8 <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e187      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f0      	bne.n	800aa18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d036      	beq.n	800aab0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d016      	beq.n	800aa78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa4a:	4b15      	ldr	r3, [pc, #84]	@ (800aaa0 <HAL_RCC_OscConfig+0x248>)
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa50:	f7fc fa3a 	bl	8006ec8 <HAL_GetTick>
 800aa54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa56:	e008      	b.n	800aa6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa58:	f7fc fa36 	bl	8006ec8 <HAL_GetTick>
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d901      	bls.n	800aa6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa66:	2303      	movs	r3, #3
 800aa68:	e167      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa98 <HAL_RCC_OscConfig+0x240>)
 800aa6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa6e:	f003 0302 	and.w	r3, r3, #2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0f0      	beq.n	800aa58 <HAL_RCC_OscConfig+0x200>
 800aa76:	e01b      	b.n	800aab0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa78:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <HAL_RCC_OscConfig+0x248>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa7e:	f7fc fa23 	bl	8006ec8 <HAL_GetTick>
 800aa82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa84:	e00e      	b.n	800aaa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa86:	f7fc fa1f 	bl	8006ec8 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d907      	bls.n	800aaa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e150      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
 800aa98:	40023800 	.word	0x40023800
 800aa9c:	42470000 	.word	0x42470000
 800aaa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aaa4:	4b88      	ldr	r3, [pc, #544]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800aaa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d1ea      	bne.n	800aa86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f000 8097 	beq.w	800abec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aabe:	2300      	movs	r3, #0
 800aac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aac2:	4b81      	ldr	r3, [pc, #516]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10f      	bne.n	800aaee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aace:	2300      	movs	r3, #0
 800aad0:	60bb      	str	r3, [r7, #8]
 800aad2:	4b7d      	ldr	r3, [pc, #500]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800aad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad6:	4a7c      	ldr	r2, [pc, #496]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800aad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aadc:	6413      	str	r3, [r2, #64]	@ 0x40
 800aade:	4b7a      	ldr	r3, [pc, #488]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aae6:	60bb      	str	r3, [r7, #8]
 800aae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aaea:	2301      	movs	r3, #1
 800aaec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaee:	4b77      	ldr	r3, [pc, #476]	@ (800accc <HAL_RCC_OscConfig+0x474>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d118      	bne.n	800ab2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aafa:	4b74      	ldr	r3, [pc, #464]	@ (800accc <HAL_RCC_OscConfig+0x474>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a73      	ldr	r2, [pc, #460]	@ (800accc <HAL_RCC_OscConfig+0x474>)
 800ab00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab06:	f7fc f9df 	bl	8006ec8 <HAL_GetTick>
 800ab0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab0c:	e008      	b.n	800ab20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab0e:	f7fc f9db 	bl	8006ec8 <HAL_GetTick>
 800ab12:	4602      	mov	r2, r0
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d901      	bls.n	800ab20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	e10c      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab20:	4b6a      	ldr	r3, [pc, #424]	@ (800accc <HAL_RCC_OscConfig+0x474>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0f0      	beq.n	800ab0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d106      	bne.n	800ab42 <HAL_RCC_OscConfig+0x2ea>
 800ab34:	4b64      	ldr	r3, [pc, #400]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab38:	4a63      	ldr	r2, [pc, #396]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab3a:	f043 0301 	orr.w	r3, r3, #1
 800ab3e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab40:	e01c      	b.n	800ab7c <HAL_RCC_OscConfig+0x324>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	2b05      	cmp	r3, #5
 800ab48:	d10c      	bne.n	800ab64 <HAL_RCC_OscConfig+0x30c>
 800ab4a:	4b5f      	ldr	r3, [pc, #380]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab4e:	4a5e      	ldr	r2, [pc, #376]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab50:	f043 0304 	orr.w	r3, r3, #4
 800ab54:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab56:	4b5c      	ldr	r3, [pc, #368]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab5a:	4a5b      	ldr	r2, [pc, #364]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab62:	e00b      	b.n	800ab7c <HAL_RCC_OscConfig+0x324>
 800ab64:	4b58      	ldr	r3, [pc, #352]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab68:	4a57      	ldr	r2, [pc, #348]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab6a:	f023 0301 	bic.w	r3, r3, #1
 800ab6e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab70:	4b55      	ldr	r3, [pc, #340]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab74:	4a54      	ldr	r2, [pc, #336]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ab76:	f023 0304 	bic.w	r3, r3, #4
 800ab7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d015      	beq.n	800abb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab84:	f7fc f9a0 	bl	8006ec8 <HAL_GetTick>
 800ab88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab8a:	e00a      	b.n	800aba2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab8c:	f7fc f99c 	bl	8006ec8 <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d901      	bls.n	800aba2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	e0cb      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aba2:	4b49      	ldr	r3, [pc, #292]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800aba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d0ee      	beq.n	800ab8c <HAL_RCC_OscConfig+0x334>
 800abae:	e014      	b.n	800abda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800abb0:	f7fc f98a 	bl	8006ec8 <HAL_GetTick>
 800abb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abb6:	e00a      	b.n	800abce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb8:	f7fc f986 	bl	8006ec8 <HAL_GetTick>
 800abbc:	4602      	mov	r2, r0
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e0b5      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abce:	4b3e      	ldr	r3, [pc, #248]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800abd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd2:	f003 0302 	and.w	r3, r3, #2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1ee      	bne.n	800abb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800abda:	7dfb      	ldrb	r3, [r7, #23]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d105      	bne.n	800abec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abe0:	4b39      	ldr	r3, [pc, #228]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800abe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe4:	4a38      	ldr	r2, [pc, #224]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800abe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800abea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f000 80a1 	beq.w	800ad38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800abf6:	4b34      	ldr	r3, [pc, #208]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f003 030c 	and.w	r3, r3, #12
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d05c      	beq.n	800acbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d141      	bne.n	800ac8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac0a:	4b31      	ldr	r3, [pc, #196]	@ (800acd0 <HAL_RCC_OscConfig+0x478>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac10:	f7fc f95a 	bl	8006ec8 <HAL_GetTick>
 800ac14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac16:	e008      	b.n	800ac2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac18:	f7fc f956 	bl	8006ec8 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e087      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac2a:	4b27      	ldr	r3, [pc, #156]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1f0      	bne.n	800ac18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69da      	ldr	r2, [r3, #28]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac44:	019b      	lsls	r3, r3, #6
 800ac46:	431a      	orrs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac4c:	085b      	lsrs	r3, r3, #1
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	041b      	lsls	r3, r3, #16
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac58:	061b      	lsls	r3, r3, #24
 800ac5a:	491b      	ldr	r1, [pc, #108]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac60:	4b1b      	ldr	r3, [pc, #108]	@ (800acd0 <HAL_RCC_OscConfig+0x478>)
 800ac62:	2201      	movs	r2, #1
 800ac64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac66:	f7fc f92f 	bl	8006ec8 <HAL_GetTick>
 800ac6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac6c:	e008      	b.n	800ac80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac6e:	f7fc f92b 	bl	8006ec8 <HAL_GetTick>
 800ac72:	4602      	mov	r2, r0
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d901      	bls.n	800ac80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	e05c      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac80:	4b11      	ldr	r3, [pc, #68]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0f0      	beq.n	800ac6e <HAL_RCC_OscConfig+0x416>
 800ac8c:	e054      	b.n	800ad38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac8e:	4b10      	ldr	r3, [pc, #64]	@ (800acd0 <HAL_RCC_OscConfig+0x478>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac94:	f7fc f918 	bl	8006ec8 <HAL_GetTick>
 800ac98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac9a:	e008      	b.n	800acae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac9c:	f7fc f914 	bl	8006ec8 <HAL_GetTick>
 800aca0:	4602      	mov	r2, r0
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d901      	bls.n	800acae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e045      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800acae:	4b06      	ldr	r3, [pc, #24]	@ (800acc8 <HAL_RCC_OscConfig+0x470>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f0      	bne.n	800ac9c <HAL_RCC_OscConfig+0x444>
 800acba:	e03d      	b.n	800ad38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d107      	bne.n	800acd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e038      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
 800acc8:	40023800 	.word	0x40023800
 800accc:	40007000 	.word	0x40007000
 800acd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800acd4:	4b1b      	ldr	r3, [pc, #108]	@ (800ad44 <HAL_RCC_OscConfig+0x4ec>)
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d028      	beq.n	800ad34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acec:	429a      	cmp	r2, r3
 800acee:	d121      	bne.n	800ad34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d11a      	bne.n	800ad34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ad04:	4013      	ands	r3, r2
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ad0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d111      	bne.n	800ad34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad1a:	085b      	lsrs	r3, r3, #1
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d107      	bne.n	800ad34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d001      	beq.n	800ad38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e000      	b.n	800ad3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	40023800 	.word	0x40023800

0800ad48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d101      	bne.n	800ad5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e0cc      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad5c:	4b68      	ldr	r3, [pc, #416]	@ (800af00 <HAL_RCC_ClockConfig+0x1b8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 0307 	and.w	r3, r3, #7
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d90c      	bls.n	800ad84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad6a:	4b65      	ldr	r3, [pc, #404]	@ (800af00 <HAL_RCC_ClockConfig+0x1b8>)
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	b2d2      	uxtb	r2, r2
 800ad70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad72:	4b63      	ldr	r3, [pc, #396]	@ (800af00 <HAL_RCC_ClockConfig+0x1b8>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0307 	and.w	r3, r3, #7
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d001      	beq.n	800ad84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e0b8      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0302 	and.w	r3, r3, #2
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d020      	beq.n	800add2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad9c:	4b59      	ldr	r3, [pc, #356]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	4a58      	ldr	r2, [pc, #352]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ada2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ada6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d005      	beq.n	800adc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800adb4:	4b53      	ldr	r3, [pc, #332]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	4a52      	ldr	r2, [pc, #328]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800adba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800adbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adc0:	4b50      	ldr	r3, [pc, #320]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	494d      	ldr	r1, [pc, #308]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800adce:	4313      	orrs	r3, r2
 800add0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d044      	beq.n	800ae68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d107      	bne.n	800adf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ade6:	4b47      	ldr	r3, [pc, #284]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d119      	bne.n	800ae26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e07f      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d003      	beq.n	800ae06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d107      	bne.n	800ae16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae06:	4b3f      	ldr	r3, [pc, #252]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d109      	bne.n	800ae26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e06f      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae16:	4b3b      	ldr	r3, [pc, #236]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0302 	and.w	r3, r3, #2
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e067      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae26:	4b37      	ldr	r3, [pc, #220]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f023 0203 	bic.w	r2, r3, #3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	4934      	ldr	r1, [pc, #208]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ae34:	4313      	orrs	r3, r2
 800ae36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae38:	f7fc f846 	bl	8006ec8 <HAL_GetTick>
 800ae3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae3e:	e00a      	b.n	800ae56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae40:	f7fc f842 	bl	8006ec8 <HAL_GetTick>
 800ae44:	4602      	mov	r2, r0
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d901      	bls.n	800ae56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e04f      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae56:	4b2b      	ldr	r3, [pc, #172]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f003 020c 	and.w	r2, r3, #12
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d1eb      	bne.n	800ae40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae68:	4b25      	ldr	r3, [pc, #148]	@ (800af00 <HAL_RCC_ClockConfig+0x1b8>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 0307 	and.w	r3, r3, #7
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d20c      	bcs.n	800ae90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae76:	4b22      	ldr	r3, [pc, #136]	@ (800af00 <HAL_RCC_ClockConfig+0x1b8>)
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae7e:	4b20      	ldr	r3, [pc, #128]	@ (800af00 <HAL_RCC_ClockConfig+0x1b8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0307 	and.w	r3, r3, #7
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d001      	beq.n	800ae90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e032      	b.n	800aef6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d008      	beq.n	800aeae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae9c:	4b19      	ldr	r3, [pc, #100]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	4916      	ldr	r1, [pc, #88]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0308 	and.w	r3, r3, #8
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d009      	beq.n	800aece <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aeba:	4b12      	ldr	r3, [pc, #72]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	490e      	ldr	r1, [pc, #56]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aece:	f000 f821 	bl	800af14 <HAL_RCC_GetSysClockFreq>
 800aed2:	4602      	mov	r2, r0
 800aed4:	4b0b      	ldr	r3, [pc, #44]	@ (800af04 <HAL_RCC_ClockConfig+0x1bc>)
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	091b      	lsrs	r3, r3, #4
 800aeda:	f003 030f 	and.w	r3, r3, #15
 800aede:	490a      	ldr	r1, [pc, #40]	@ (800af08 <HAL_RCC_ClockConfig+0x1c0>)
 800aee0:	5ccb      	ldrb	r3, [r1, r3]
 800aee2:	fa22 f303 	lsr.w	r3, r2, r3
 800aee6:	4a09      	ldr	r2, [pc, #36]	@ (800af0c <HAL_RCC_ClockConfig+0x1c4>)
 800aee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800aeea:	4b09      	ldr	r3, [pc, #36]	@ (800af10 <HAL_RCC_ClockConfig+0x1c8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fb ffa6 	bl	8006e40 <HAL_InitTick>

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	40023c00 	.word	0x40023c00
 800af04:	40023800 	.word	0x40023800
 800af08:	0800e124 	.word	0x0800e124
 800af0c:	20000550 	.word	0x20000550
 800af10:	20000554 	.word	0x20000554

0800af14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af18:	b094      	sub	sp, #80	@ 0x50
 800af1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af2c:	4b79      	ldr	r3, [pc, #484]	@ (800b114 <HAL_RCC_GetSysClockFreq+0x200>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f003 030c 	and.w	r3, r3, #12
 800af34:	2b08      	cmp	r3, #8
 800af36:	d00d      	beq.n	800af54 <HAL_RCC_GetSysClockFreq+0x40>
 800af38:	2b08      	cmp	r3, #8
 800af3a:	f200 80e1 	bhi.w	800b100 <HAL_RCC_GetSysClockFreq+0x1ec>
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d002      	beq.n	800af48 <HAL_RCC_GetSysClockFreq+0x34>
 800af42:	2b04      	cmp	r3, #4
 800af44:	d003      	beq.n	800af4e <HAL_RCC_GetSysClockFreq+0x3a>
 800af46:	e0db      	b.n	800b100 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af48:	4b73      	ldr	r3, [pc, #460]	@ (800b118 <HAL_RCC_GetSysClockFreq+0x204>)
 800af4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af4c:	e0db      	b.n	800b106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af4e:	4b73      	ldr	r3, [pc, #460]	@ (800b11c <HAL_RCC_GetSysClockFreq+0x208>)
 800af50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800af52:	e0d8      	b.n	800b106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af54:	4b6f      	ldr	r3, [pc, #444]	@ (800b114 <HAL_RCC_GetSysClockFreq+0x200>)
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af5e:	4b6d      	ldr	r3, [pc, #436]	@ (800b114 <HAL_RCC_GetSysClockFreq+0x200>)
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d063      	beq.n	800b032 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af6a:	4b6a      	ldr	r3, [pc, #424]	@ (800b114 <HAL_RCC_GetSysClockFreq+0x200>)
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	099b      	lsrs	r3, r3, #6
 800af70:	2200      	movs	r2, #0
 800af72:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800af76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af7e:	2300      	movs	r3, #0
 800af80:	637b      	str	r3, [r7, #52]	@ 0x34
 800af82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800af86:	4622      	mov	r2, r4
 800af88:	462b      	mov	r3, r5
 800af8a:	f04f 0000 	mov.w	r0, #0
 800af8e:	f04f 0100 	mov.w	r1, #0
 800af92:	0159      	lsls	r1, r3, #5
 800af94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800af98:	0150      	lsls	r0, r2, #5
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4621      	mov	r1, r4
 800afa0:	1a51      	subs	r1, r2, r1
 800afa2:	6139      	str	r1, [r7, #16]
 800afa4:	4629      	mov	r1, r5
 800afa6:	eb63 0301 	sbc.w	r3, r3, r1
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	f04f 0200 	mov.w	r2, #0
 800afb0:	f04f 0300 	mov.w	r3, #0
 800afb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800afb8:	4659      	mov	r1, fp
 800afba:	018b      	lsls	r3, r1, #6
 800afbc:	4651      	mov	r1, sl
 800afbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800afc2:	4651      	mov	r1, sl
 800afc4:	018a      	lsls	r2, r1, #6
 800afc6:	4651      	mov	r1, sl
 800afc8:	ebb2 0801 	subs.w	r8, r2, r1
 800afcc:	4659      	mov	r1, fp
 800afce:	eb63 0901 	sbc.w	r9, r3, r1
 800afd2:	f04f 0200 	mov.w	r2, #0
 800afd6:	f04f 0300 	mov.w	r3, #0
 800afda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afe6:	4690      	mov	r8, r2
 800afe8:	4699      	mov	r9, r3
 800afea:	4623      	mov	r3, r4
 800afec:	eb18 0303 	adds.w	r3, r8, r3
 800aff0:	60bb      	str	r3, [r7, #8]
 800aff2:	462b      	mov	r3, r5
 800aff4:	eb49 0303 	adc.w	r3, r9, r3
 800aff8:	60fb      	str	r3, [r7, #12]
 800affa:	f04f 0200 	mov.w	r2, #0
 800affe:	f04f 0300 	mov.w	r3, #0
 800b002:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b006:	4629      	mov	r1, r5
 800b008:	024b      	lsls	r3, r1, #9
 800b00a:	4621      	mov	r1, r4
 800b00c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b010:	4621      	mov	r1, r4
 800b012:	024a      	lsls	r2, r1, #9
 800b014:	4610      	mov	r0, r2
 800b016:	4619      	mov	r1, r3
 800b018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b01a:	2200      	movs	r2, #0
 800b01c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b01e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b024:	f7f5 f92c 	bl	8000280 <__aeabi_uldivmod>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4613      	mov	r3, r2
 800b02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b030:	e058      	b.n	800b0e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b032:	4b38      	ldr	r3, [pc, #224]	@ (800b114 <HAL_RCC_GetSysClockFreq+0x200>)
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	099b      	lsrs	r3, r3, #6
 800b038:	2200      	movs	r2, #0
 800b03a:	4618      	mov	r0, r3
 800b03c:	4611      	mov	r1, r2
 800b03e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b042:	623b      	str	r3, [r7, #32]
 800b044:	2300      	movs	r3, #0
 800b046:	627b      	str	r3, [r7, #36]	@ 0x24
 800b048:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b04c:	4642      	mov	r2, r8
 800b04e:	464b      	mov	r3, r9
 800b050:	f04f 0000 	mov.w	r0, #0
 800b054:	f04f 0100 	mov.w	r1, #0
 800b058:	0159      	lsls	r1, r3, #5
 800b05a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b05e:	0150      	lsls	r0, r2, #5
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4641      	mov	r1, r8
 800b066:	ebb2 0a01 	subs.w	sl, r2, r1
 800b06a:	4649      	mov	r1, r9
 800b06c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	f04f 0300 	mov.w	r3, #0
 800b078:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b07c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b080:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b084:	ebb2 040a 	subs.w	r4, r2, sl
 800b088:	eb63 050b 	sbc.w	r5, r3, fp
 800b08c:	f04f 0200 	mov.w	r2, #0
 800b090:	f04f 0300 	mov.w	r3, #0
 800b094:	00eb      	lsls	r3, r5, #3
 800b096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b09a:	00e2      	lsls	r2, r4, #3
 800b09c:	4614      	mov	r4, r2
 800b09e:	461d      	mov	r5, r3
 800b0a0:	4643      	mov	r3, r8
 800b0a2:	18e3      	adds	r3, r4, r3
 800b0a4:	603b      	str	r3, [r7, #0]
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	eb45 0303 	adc.w	r3, r5, r3
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	f04f 0200 	mov.w	r2, #0
 800b0b2:	f04f 0300 	mov.w	r3, #0
 800b0b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	028b      	lsls	r3, r1, #10
 800b0be:	4621      	mov	r1, r4
 800b0c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	028a      	lsls	r2, r1, #10
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	61bb      	str	r3, [r7, #24]
 800b0d2:	61fa      	str	r2, [r7, #28]
 800b0d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0d8:	f7f5 f8d2 	bl	8000280 <__aeabi_uldivmod>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b0e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b114 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	0c1b      	lsrs	r3, r3, #16
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b0f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b0fe:	e002      	b.n	800b106 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b100:	4b05      	ldr	r3, [pc, #20]	@ (800b118 <HAL_RCC_GetSysClockFreq+0x204>)
 800b102:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b104:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3750      	adds	r7, #80	@ 0x50
 800b10c:	46bd      	mov	sp, r7
 800b10e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b112:	bf00      	nop
 800b114:	40023800 	.word	0x40023800
 800b118:	00f42400 	.word	0x00f42400
 800b11c:	007a1200 	.word	0x007a1200

0800b120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b120:	b480      	push	{r7}
 800b122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b124:	4b03      	ldr	r3, [pc, #12]	@ (800b134 <HAL_RCC_GetHCLKFreq+0x14>)
 800b126:	681b      	ldr	r3, [r3, #0]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	20000550 	.word	0x20000550

0800b138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b13c:	f7ff fff0 	bl	800b120 <HAL_RCC_GetHCLKFreq>
 800b140:	4602      	mov	r2, r0
 800b142:	4b05      	ldr	r3, [pc, #20]	@ (800b158 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	0a9b      	lsrs	r3, r3, #10
 800b148:	f003 0307 	and.w	r3, r3, #7
 800b14c:	4903      	ldr	r1, [pc, #12]	@ (800b15c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b14e:	5ccb      	ldrb	r3, [r1, r3]
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b154:	4618      	mov	r0, r3
 800b156:	bd80      	pop	{r7, pc}
 800b158:	40023800 	.word	0x40023800
 800b15c:	0800e134 	.word	0x0800e134

0800b160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b164:	f7ff ffdc 	bl	800b120 <HAL_RCC_GetHCLKFreq>
 800b168:	4602      	mov	r2, r0
 800b16a:	4b05      	ldr	r3, [pc, #20]	@ (800b180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	0b5b      	lsrs	r3, r3, #13
 800b170:	f003 0307 	and.w	r3, r3, #7
 800b174:	4903      	ldr	r1, [pc, #12]	@ (800b184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b176:	5ccb      	ldrb	r3, [r1, r3]
 800b178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	40023800 	.word	0x40023800
 800b184:	0800e134 	.word	0x0800e134

0800b188 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800b18e:	f7fb fe9b 	bl	8006ec8 <HAL_GetTick>
 800b192:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b194:	4b5d      	ldr	r3, [pc, #372]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a5c      	ldr	r2, [pc, #368]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b19a:	f043 0301 	orr.w	r3, r3, #1
 800b19e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800b1a0:	e008      	b.n	800b1b4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1a2:	f7fb fe91 	bl	8006ec8 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d901      	bls.n	800b1b4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e0a7      	b.n	800b304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800b1b4:	4b55      	ldr	r3, [pc, #340]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 0302 	and.w	r3, r3, #2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0f0      	beq.n	800b1a2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800b1c0:	4b52      	ldr	r3, [pc, #328]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a51      	ldr	r2, [pc, #324]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b1c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800b1cc:	f7fb fe7c 	bl	8006ec8 <HAL_GetTick>
 800b1d0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800b1d2:	4b4e      	ldr	r3, [pc, #312]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800b1d8:	e00a      	b.n	800b1f0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1da:	f7fb fe75 	bl	8006ec8 <HAL_GetTick>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e089      	b.n	800b304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800b1f0:	4b46      	ldr	r3, [pc, #280]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f003 030c 	and.w	r3, r3, #12
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1ee      	bne.n	800b1da <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800b1fc:	f7fb fe64 	bl	8006ec8 <HAL_GetTick>
 800b200:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800b202:	4b42      	ldr	r3, [pc, #264]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a41      	ldr	r2, [pc, #260]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b208:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 800b20c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800b20e:	e008      	b.n	800b222 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b210:	f7fb fe5a 	bl	8006ec8 <HAL_GetTick>
 800b214:	4602      	mov	r2, r0
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	2b64      	cmp	r3, #100	@ 0x64
 800b21c:	d901      	bls.n	800b222 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e070      	b.n	800b304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800b222:	4b3a      	ldr	r3, [pc, #232]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f0      	bne.n	800b210 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800b22e:	f7fb fe4b 	bl	8006ec8 <HAL_GetTick>
 800b232:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b234:	4b35      	ldr	r3, [pc, #212]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a34      	ldr	r2, [pc, #208]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b23a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b23e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800b240:	e008      	b.n	800b254 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b242:	f7fb fe41 	bl	8006ec8 <HAL_GetTick>
 800b246:	4602      	mov	r2, r0
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d901      	bls.n	800b254 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e057      	b.n	800b304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800b254:	4b2d      	ldr	r3, [pc, #180]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1f0      	bne.n	800b242 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800b260:	f7fb fe32 	bl	8006ec8 <HAL_GetTick>
 800b264:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800b266:	4b29      	ldr	r3, [pc, #164]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a28      	ldr	r2, [pc, #160]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b26c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b270:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800b272:	e008      	b.n	800b286 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b274:	f7fb fe28 	bl	8006ec8 <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d901      	bls.n	800b286 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e03e      	b.n	800b304 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800b286:	4b21      	ldr	r3, [pc, #132]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f0      	bne.n	800b274 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800b292:	4b1e      	ldr	r3, [pc, #120]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b294:	4a1e      	ldr	r2, [pc, #120]	@ (800b310 <HAL_RCC_DeInit+0x188>)
 800b296:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 800b298:	4b1c      	ldr	r3, [pc, #112]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b29a:	4a1e      	ldr	r2, [pc, #120]	@ (800b314 <HAL_RCC_DeInit+0x18c>)
 800b29c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	4a19      	ldr	r2, [pc, #100]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2a6:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800b2aa:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800b2ac:	4b17      	ldr	r3, [pc, #92]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	4a16      	ldr	r2, [pc, #88]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b2b6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 800b2b8:	4b14      	ldr	r3, [pc, #80]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	4a13      	ldr	r2, [pc, #76]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2be:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 800b2c2:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800b2c4:	4b11      	ldr	r3, [pc, #68]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	4a10      	ldr	r2, [pc, #64]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2ce:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800b2d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2d4:	4a0d      	ldr	r2, [pc, #52]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800b2dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b30c <HAL_RCC_DeInit+0x184>)
 800b2e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2e6:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800b2e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b318 <HAL_RCC_DeInit+0x190>)
 800b2ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b31c <HAL_RCC_DeInit+0x194>)
 800b2ec:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b320 <HAL_RCC_DeInit+0x198>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fb fda4 	bl	8006e40 <HAL_InitTick>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e000      	b.n	800b304 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800b302:	2300      	movs	r3, #0
  }
}
 800b304:	4618      	mov	r0, r3
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	40023800 	.word	0x40023800
 800b310:	04003010 	.word	0x04003010
 800b314:	20003000 	.word	0x20003000
 800b318:	20000550 	.word	0x20000550
 800b31c:	00f42400 	.word	0x00f42400
 800b320:	20000554 	.word	0x20000554

0800b324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e041      	b.n	800b3ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d106      	bne.n	800b350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7fb fb6a 	bl	8006a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2202      	movs	r2, #2
 800b354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f000 fa70 	bl	800b848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d001      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e044      	b.n	800b466 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68da      	ldr	r2, [r3, #12]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0201 	orr.w	r2, r2, #1
 800b3f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a1e      	ldr	r2, [pc, #120]	@ (800b474 <HAL_TIM_Base_Start_IT+0xb0>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d018      	beq.n	800b430 <HAL_TIM_Base_Start_IT+0x6c>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b406:	d013      	beq.n	800b430 <HAL_TIM_Base_Start_IT+0x6c>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a1a      	ldr	r2, [pc, #104]	@ (800b478 <HAL_TIM_Base_Start_IT+0xb4>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d00e      	beq.n	800b430 <HAL_TIM_Base_Start_IT+0x6c>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a19      	ldr	r2, [pc, #100]	@ (800b47c <HAL_TIM_Base_Start_IT+0xb8>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d009      	beq.n	800b430 <HAL_TIM_Base_Start_IT+0x6c>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a17      	ldr	r2, [pc, #92]	@ (800b480 <HAL_TIM_Base_Start_IT+0xbc>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d004      	beq.n	800b430 <HAL_TIM_Base_Start_IT+0x6c>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a16      	ldr	r2, [pc, #88]	@ (800b484 <HAL_TIM_Base_Start_IT+0xc0>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d111      	bne.n	800b454 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b06      	cmp	r3, #6
 800b440:	d010      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f042 0201 	orr.w	r2, r2, #1
 800b450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b452:	e007      	b.n	800b464 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f042 0201 	orr.w	r2, r2, #1
 800b462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	40010000 	.word	0x40010000
 800b478:	40000400 	.word	0x40000400
 800b47c:	40000800 	.word	0x40000800
 800b480:	40000c00 	.word	0x40000c00
 800b484:	40014000 	.word	0x40014000

0800b488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d020      	beq.n	800b4ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f003 0302 	and.w	r3, r3, #2
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01b      	beq.n	800b4ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f06f 0202 	mvn.w	r2, #2
 800b4bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	f003 0303 	and.w	r3, r3, #3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d003      	beq.n	800b4da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f999 	bl	800b80a <HAL_TIM_IC_CaptureCallback>
 800b4d8:	e005      	b.n	800b4e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f98b 	bl	800b7f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 f99c 	bl	800b81e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f003 0304 	and.w	r3, r3, #4
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d020      	beq.n	800b538 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f003 0304 	and.w	r3, r3, #4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01b      	beq.n	800b538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f06f 0204 	mvn.w	r2, #4
 800b508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2202      	movs	r2, #2
 800b50e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f973 	bl	800b80a <HAL_TIM_IC_CaptureCallback>
 800b524:	e005      	b.n	800b532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f965 	bl	800b7f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f976 	bl	800b81e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f003 0308 	and.w	r3, r3, #8
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d020      	beq.n	800b584 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f003 0308 	and.w	r3, r3, #8
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01b      	beq.n	800b584 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f06f 0208 	mvn.w	r2, #8
 800b554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2204      	movs	r2, #4
 800b55a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f94d 	bl	800b80a <HAL_TIM_IC_CaptureCallback>
 800b570:	e005      	b.n	800b57e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f93f 	bl	800b7f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f950 	bl	800b81e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	f003 0310 	and.w	r3, r3, #16
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d020      	beq.n	800b5d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f003 0310 	and.w	r3, r3, #16
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01b      	beq.n	800b5d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f06f 0210 	mvn.w	r2, #16
 800b5a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2208      	movs	r2, #8
 800b5a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f927 	bl	800b80a <HAL_TIM_IC_CaptureCallback>
 800b5bc:	e005      	b.n	800b5ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f919 	bl	800b7f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f92a 	bl	800b81e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00c      	beq.n	800b5f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d007      	beq.n	800b5f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0201 	mvn.w	r2, #1
 800b5ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7f8 fc74 	bl	8003edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00c      	beq.n	800b618 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b604:	2b00      	cmp	r3, #0
 800b606:	d007      	beq.n	800b618 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fab0 	bl	800bb78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00c      	beq.n	800b63c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d007      	beq.n	800b63c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f8fb 	bl	800b832 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00c      	beq.n	800b660 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f003 0320 	and.w	r3, r3, #32
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d007      	beq.n	800b660 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f06f 0220 	mvn.w	r2, #32
 800b658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fa82 	bl	800bb64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b660:	bf00      	nop
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_TIM_ConfigClockSource+0x1c>
 800b680:	2302      	movs	r3, #2
 800b682:	e0b4      	b.n	800b7ee <HAL_TIM_ConfigClockSource+0x186>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b6a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6bc:	d03e      	beq.n	800b73c <HAL_TIM_ConfigClockSource+0xd4>
 800b6be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6c2:	f200 8087 	bhi.w	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ca:	f000 8086 	beq.w	800b7da <HAL_TIM_ConfigClockSource+0x172>
 800b6ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6d2:	d87f      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6d4:	2b70      	cmp	r3, #112	@ 0x70
 800b6d6:	d01a      	beq.n	800b70e <HAL_TIM_ConfigClockSource+0xa6>
 800b6d8:	2b70      	cmp	r3, #112	@ 0x70
 800b6da:	d87b      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6dc:	2b60      	cmp	r3, #96	@ 0x60
 800b6de:	d050      	beq.n	800b782 <HAL_TIM_ConfigClockSource+0x11a>
 800b6e0:	2b60      	cmp	r3, #96	@ 0x60
 800b6e2:	d877      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6e4:	2b50      	cmp	r3, #80	@ 0x50
 800b6e6:	d03c      	beq.n	800b762 <HAL_TIM_ConfigClockSource+0xfa>
 800b6e8:	2b50      	cmp	r3, #80	@ 0x50
 800b6ea:	d873      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6ec:	2b40      	cmp	r3, #64	@ 0x40
 800b6ee:	d058      	beq.n	800b7a2 <HAL_TIM_ConfigClockSource+0x13a>
 800b6f0:	2b40      	cmp	r3, #64	@ 0x40
 800b6f2:	d86f      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6f4:	2b30      	cmp	r3, #48	@ 0x30
 800b6f6:	d064      	beq.n	800b7c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b6f8:	2b30      	cmp	r3, #48	@ 0x30
 800b6fa:	d86b      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	d060      	beq.n	800b7c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b700:	2b20      	cmp	r3, #32
 800b702:	d867      	bhi.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b704:	2b00      	cmp	r3, #0
 800b706:	d05c      	beq.n	800b7c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b708:	2b10      	cmp	r3, #16
 800b70a:	d05a      	beq.n	800b7c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b70c:	e062      	b.n	800b7d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b71e:	f000 f993 	bl	800ba48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b730:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	609a      	str	r2, [r3, #8]
      break;
 800b73a:	e04f      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b74c:	f000 f97c 	bl	800ba48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	689a      	ldr	r2, [r3, #8]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b75e:	609a      	str	r2, [r3, #8]
      break;
 800b760:	e03c      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b76e:	461a      	mov	r2, r3
 800b770:	f000 f8f0 	bl	800b954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2150      	movs	r1, #80	@ 0x50
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 f949 	bl	800ba12 <TIM_ITRx_SetConfig>
      break;
 800b780:	e02c      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b78e:	461a      	mov	r2, r3
 800b790:	f000 f90f 	bl	800b9b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2160      	movs	r1, #96	@ 0x60
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 f939 	bl	800ba12 <TIM_ITRx_SetConfig>
      break;
 800b7a0:	e01c      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f000 f8d0 	bl	800b954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2140      	movs	r1, #64	@ 0x40
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 f929 	bl	800ba12 <TIM_ITRx_SetConfig>
      break;
 800b7c0:	e00c      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	f000 f920 	bl	800ba12 <TIM_ITRx_SetConfig>
      break;
 800b7d2:	e003      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7d8:	e000      	b.n	800b7dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b7da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b083      	sub	sp, #12
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b812:	bf00      	nop
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b81e:	b480      	push	{r7}
 800b820:	b083      	sub	sp, #12
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b832:	b480      	push	{r7}
 800b834:	b083      	sub	sp, #12
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
	...

0800b848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a37      	ldr	r2, [pc, #220]	@ (800b938 <TIM_Base_SetConfig+0xf0>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d00f      	beq.n	800b880 <TIM_Base_SetConfig+0x38>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b866:	d00b      	beq.n	800b880 <TIM_Base_SetConfig+0x38>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a34      	ldr	r2, [pc, #208]	@ (800b93c <TIM_Base_SetConfig+0xf4>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d007      	beq.n	800b880 <TIM_Base_SetConfig+0x38>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a33      	ldr	r2, [pc, #204]	@ (800b940 <TIM_Base_SetConfig+0xf8>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d003      	beq.n	800b880 <TIM_Base_SetConfig+0x38>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a32      	ldr	r2, [pc, #200]	@ (800b944 <TIM_Base_SetConfig+0xfc>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d108      	bne.n	800b892 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4a28      	ldr	r2, [pc, #160]	@ (800b938 <TIM_Base_SetConfig+0xf0>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d01b      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8a0:	d017      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a25      	ldr	r2, [pc, #148]	@ (800b93c <TIM_Base_SetConfig+0xf4>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d013      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a24      	ldr	r2, [pc, #144]	@ (800b940 <TIM_Base_SetConfig+0xf8>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d00f      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a23      	ldr	r2, [pc, #140]	@ (800b944 <TIM_Base_SetConfig+0xfc>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d00b      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a22      	ldr	r2, [pc, #136]	@ (800b948 <TIM_Base_SetConfig+0x100>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d007      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	4a21      	ldr	r2, [pc, #132]	@ (800b94c <TIM_Base_SetConfig+0x104>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d003      	beq.n	800b8d2 <TIM_Base_SetConfig+0x8a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a20      	ldr	r2, [pc, #128]	@ (800b950 <TIM_Base_SetConfig+0x108>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d108      	bne.n	800b8e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	689a      	ldr	r2, [r3, #8]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a0c      	ldr	r2, [pc, #48]	@ (800b938 <TIM_Base_SetConfig+0xf0>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d103      	bne.n	800b912 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f043 0204 	orr.w	r2, r3, #4
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	601a      	str	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	40010000 	.word	0x40010000
 800b93c:	40000400 	.word	0x40000400
 800b940:	40000800 	.word	0x40000800
 800b944:	40000c00 	.word	0x40000c00
 800b948:	40014000 	.word	0x40014000
 800b94c:	40014400 	.word	0x40014400
 800b950:	40014800 	.word	0x40014800

0800b954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6a1b      	ldr	r3, [r3, #32]
 800b964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	f023 0201 	bic.w	r2, r3, #1
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b97e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	011b      	lsls	r3, r3, #4
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4313      	orrs	r3, r2
 800b988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f023 030a 	bic.w	r3, r3, #10
 800b990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4313      	orrs	r3, r2
 800b998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	621a      	str	r2, [r3, #32]
}
 800b9a6:	bf00      	nop
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b087      	sub	sp, #28
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a1b      	ldr	r3, [r3, #32]
 800b9c8:	f023 0210 	bic.w	r2, r3, #16
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b9dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	031b      	lsls	r3, r3, #12
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b9ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	621a      	str	r2, [r3, #32]
}
 800ba06:	bf00      	nop
 800ba08:	371c      	adds	r7, #28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b085      	sub	sp, #20
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	f043 0307 	orr.w	r3, r3, #7
 800ba34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	609a      	str	r2, [r3, #8]
}
 800ba3c:	bf00      	nop
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	021a      	lsls	r2, r3, #8
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	609a      	str	r2, [r3, #8]
}
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d101      	bne.n	800baa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	e050      	b.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2202      	movs	r2, #2
 800baac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a1c      	ldr	r2, [pc, #112]	@ (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d018      	beq.n	800bb16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baec:	d013      	beq.n	800bb16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a18      	ldr	r2, [pc, #96]	@ (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00e      	beq.n	800bb16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a16      	ldr	r2, [pc, #88]	@ (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d009      	beq.n	800bb16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	4a15      	ldr	r2, [pc, #84]	@ (800bb5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	d004      	beq.n	800bb16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a13      	ldr	r2, [pc, #76]	@ (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d10c      	bne.n	800bb30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	68ba      	ldr	r2, [r7, #8]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	40010000 	.word	0x40010000
 800bb54:	40000400 	.word	0x40000400
 800bb58:	40000800 	.word	0x40000800
 800bb5c:	40000c00 	.word	0x40000c00
 800bb60:	40014000 	.word	0x40014000

0800bb64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb80:	bf00      	nop
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e042      	b.n	800bc24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d106      	bne.n	800bbb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7fa ff5c 	bl	8006a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2224      	movs	r2, #36	@ 0x24
 800bbbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bbce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fe15 	bl	800c800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	691a      	ldr	r2, [r3, #16]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bbe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	695a      	ldr	r2, [r3, #20]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bbf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bc04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2220      	movs	r2, #32
 800bc18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3708      	adds	r7, #8
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b08a      	sub	sp, #40	@ 0x28
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	603b      	str	r3, [r7, #0]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d175      	bne.n	800bd38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d002      	beq.n	800bc58 <HAL_UART_Transmit+0x2c>
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d101      	bne.n	800bc5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e06e      	b.n	800bd3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2221      	movs	r2, #33	@ 0x21
 800bc66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc6a:	f7fb f92d 	bl	8006ec8 <HAL_GetTick>
 800bc6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	88fa      	ldrh	r2, [r7, #6]
 800bc74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	88fa      	ldrh	r2, [r7, #6]
 800bc7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc84:	d108      	bne.n	800bc98 <HAL_UART_Transmit+0x6c>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d104      	bne.n	800bc98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	61bb      	str	r3, [r7, #24]
 800bc96:	e003      	b.n	800bca0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bca0:	e02e      	b.n	800bd00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2180      	movs	r1, #128	@ 0x80
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f000 fbb3 	bl	800c418 <UART_WaitOnFlagUntilTimeout>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d005      	beq.n	800bcc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	e03a      	b.n	800bd3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10b      	bne.n	800bce2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	3302      	adds	r3, #2
 800bcde:	61bb      	str	r3, [r7, #24]
 800bce0:	e007      	b.n	800bcf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bce2:	69fb      	ldr	r3, [r7, #28]
 800bce4:	781a      	ldrb	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1cb      	bne.n	800bca2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	2200      	movs	r2, #0
 800bd12:	2140      	movs	r1, #64	@ 0x40
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	f000 fb7f 	bl	800c418 <UART_WaitOnFlagUntilTimeout>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2220      	movs	r2, #32
 800bd24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e006      	b.n	800bd3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	e000      	b.n	800bd3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800bd38:	2302      	movs	r3, #2
  }
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3720      	adds	r7, #32
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b08a      	sub	sp, #40	@ 0x28
 800bd46:	af02      	add	r7, sp, #8
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	603b      	str	r3, [r7, #0]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bd52:	2300      	movs	r3, #0
 800bd54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	f040 8081 	bne.w	800be66 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d002      	beq.n	800bd70 <HAL_UART_Receive+0x2e>
 800bd6a:	88fb      	ldrh	r3, [r7, #6]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d101      	bne.n	800bd74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bd70:	2301      	movs	r3, #1
 800bd72:	e079      	b.n	800be68 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2222      	movs	r2, #34	@ 0x22
 800bd7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd88:	f7fb f89e 	bl	8006ec8 <HAL_GetTick>
 800bd8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	88fa      	ldrh	r2, [r7, #6]
 800bd92:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	88fa      	ldrh	r2, [r7, #6]
 800bd98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bda2:	d108      	bne.n	800bdb6 <HAL_UART_Receive+0x74>
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d104      	bne.n	800bdb6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	61bb      	str	r3, [r7, #24]
 800bdb4:	e003      	b.n	800bdbe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bdbe:	e047      	b.n	800be50 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2120      	movs	r1, #32
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f000 fb24 	bl	800c418 <UART_WaitOnFlagUntilTimeout>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2220      	movs	r2, #32
 800bdda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e042      	b.n	800be68 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10c      	bne.n	800be02 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	3302      	adds	r3, #2
 800bdfe:	61bb      	str	r3, [r7, #24]
 800be00:	e01f      	b.n	800be42 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be0a:	d007      	beq.n	800be1c <HAL_UART_Receive+0xda>
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <HAL_UART_Receive+0xe8>
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d106      	bne.n	800be2a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	b2da      	uxtb	r2, r3
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	701a      	strb	r2, [r3, #0]
 800be28:	e008      	b.n	800be3c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be36:	b2da      	uxtb	r2, r3
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	3301      	adds	r3, #1
 800be40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be46:	b29b      	uxth	r3, r3
 800be48:	3b01      	subs	r3, #1
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be54:	b29b      	uxth	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1b2      	bne.n	800bdc0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2220      	movs	r2, #32
 800be5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	e000      	b.n	800be68 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800be66:	2302      	movs	r3, #2
  }
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3720      	adds	r7, #32
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b0ba      	sub	sp, #232	@ 0xe8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800be96:	2300      	movs	r3, #0
 800be98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea6:	f003 030f 	and.w	r3, r3, #15
 800beaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800beae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10f      	bne.n	800bed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800beb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800beba:	f003 0320 	and.w	r3, r3, #32
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d009      	beq.n	800bed6 <HAL_UART_IRQHandler+0x66>
 800bec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bec6:	f003 0320 	and.w	r3, r3, #32
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fbd7 	bl	800c682 <UART_Receive_IT>
      return;
 800bed4:	e273      	b.n	800c3be <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 80de 	beq.w	800c09c <HAL_UART_IRQHandler+0x22c>
 800bee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d106      	bne.n	800befa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800beec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 80d1 	beq.w	800c09c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800befa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <HAL_UART_IRQHandler+0xae>
 800bf06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d005      	beq.n	800bf1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf16:	f043 0201 	orr.w	r2, r3, #1
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf22:	f003 0304 	and.w	r3, r3, #4
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00b      	beq.n	800bf42 <HAL_UART_IRQHandler+0xd2>
 800bf2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf2e:	f003 0301 	and.w	r3, r3, #1
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d005      	beq.n	800bf42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf3a:	f043 0202 	orr.w	r2, r3, #2
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00b      	beq.n	800bf66 <HAL_UART_IRQHandler+0xf6>
 800bf4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf52:	f003 0301 	and.w	r3, r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf5e:	f043 0204 	orr.w	r2, r3, #4
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf6a:	f003 0308 	and.w	r3, r3, #8
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d011      	beq.n	800bf96 <HAL_UART_IRQHandler+0x126>
 800bf72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d105      	bne.n	800bf8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bf7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8e:	f043 0208 	orr.w	r2, r3, #8
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 820a 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa4:	f003 0320 	and.w	r3, r3, #32
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d008      	beq.n	800bfbe <HAL_UART_IRQHandler+0x14e>
 800bfac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fb62 	bl	800c682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfc8:	2b40      	cmp	r3, #64	@ 0x40
 800bfca:	bf0c      	ite	eq
 800bfcc:	2301      	moveq	r3, #1
 800bfce:	2300      	movne	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfda:	f003 0308 	and.w	r3, r3, #8
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d103      	bne.n	800bfea <HAL_UART_IRQHandler+0x17a>
 800bfe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d04f      	beq.n	800c08a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fa6d 	bl	800c4ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	695b      	ldr	r3, [r3, #20]
 800bff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bffa:	2b40      	cmp	r3, #64	@ 0x40
 800bffc:	d141      	bne.n	800c082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3314      	adds	r3, #20
 800c004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c00c:	e853 3f00 	ldrex	r3, [r3]
 800c010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c01c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3314      	adds	r3, #20
 800c026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c02a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c02e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1d9      	bne.n	800bffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d013      	beq.n	800c07a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c056:	4a8a      	ldr	r2, [pc, #552]	@ (800c280 <HAL_UART_IRQHandler+0x410>)
 800c058:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fb f8fd 	bl	800725e <HAL_DMA_Abort_IT>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d016      	beq.n	800c098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c074:	4610      	mov	r0, r2
 800c076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c078:	e00e      	b.n	800c098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 f9b6 	bl	800c3ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c080:	e00a      	b.n	800c098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f9b2 	bl	800c3ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c088:	e006      	b.n	800c098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f9ae 	bl	800c3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c096:	e18d      	b.n	800c3b4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c098:	bf00      	nop
    return;
 800c09a:	e18b      	b.n	800c3b4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	f040 8167 	bne.w	800c374 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0aa:	f003 0310 	and.w	r3, r3, #16
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f000 8160 	beq.w	800c374 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0b8:	f003 0310 	and.w	r3, r3, #16
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8159 	beq.w	800c374 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60bb      	str	r3, [r7, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	60bb      	str	r3, [r7, #8]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	60bb      	str	r3, [r7, #8]
 800c0d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0e2:	2b40      	cmp	r3, #64	@ 0x40
 800c0e4:	f040 80ce 	bne.w	800c284 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 80a9 	beq.w	800c250 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c106:	429a      	cmp	r2, r3
 800c108:	f080 80a2 	bcs.w	800c250 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c112:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c11e:	f000 8088 	beq.w	800c232 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	330c      	adds	r3, #12
 800c128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c130:	e853 3f00 	ldrex	r3, [r3]
 800c134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c138:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c13c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	330c      	adds	r3, #12
 800c14a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c14e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c156:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c15a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c15e:	e841 2300 	strex	r3, r2, [r1]
 800c162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1d9      	bne.n	800c122 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3314      	adds	r3, #20
 800c174:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c178:	e853 3f00 	ldrex	r3, [r3]
 800c17c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c17e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c180:	f023 0301 	bic.w	r3, r3, #1
 800c184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3314      	adds	r3, #20
 800c18e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c192:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c196:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c198:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c19a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c19e:	e841 2300 	strex	r3, r2, [r1]
 800c1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1e1      	bne.n	800c16e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	3314      	adds	r3, #20
 800c1b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c1ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	3314      	adds	r3, #20
 800c1ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c1ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c1d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1d6:	e841 2300 	strex	r3, r2, [r1]
 800c1da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c1dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1e3      	bne.n	800c1aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	330c      	adds	r3, #12
 800c1f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c202:	f023 0310 	bic.w	r3, r3, #16
 800c206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	330c      	adds	r3, #12
 800c210:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c214:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c216:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c21a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e3      	bne.n	800c1f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fa ffa6 	bl	800717e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2202      	movs	r2, #2
 800c236:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c240:	b29b      	uxth	r3, r3
 800c242:	1ad3      	subs	r3, r2, r3
 800c244:	b29b      	uxth	r3, r3
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f8d9 	bl	800c400 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c24e:	e0b3      	b.n	800c3b8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c258:	429a      	cmp	r2, r3
 800c25a:	f040 80ad 	bne.w	800c3b8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c262:	69db      	ldr	r3, [r3, #28]
 800c264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c268:	f040 80a6 	bne.w	800c3b8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f8c1 	bl	800c400 <HAL_UARTEx_RxEventCallback>
      return;
 800c27e:	e09b      	b.n	800c3b8 <HAL_UART_IRQHandler+0x548>
 800c280:	0800c591 	.word	0x0800c591
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c298:	b29b      	uxth	r3, r3
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f000 808e 	beq.w	800c3bc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c2a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 8089 	beq.w	800c3bc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	330c      	adds	r3, #12
 800c2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b4:	e853 3f00 	ldrex	r3, [r3]
 800c2b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	330c      	adds	r3, #12
 800c2ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c2ce:	647a      	str	r2, [r7, #68]	@ 0x44
 800c2d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e3      	bne.n	800c2aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3314      	adds	r3, #20
 800c2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	623b      	str	r3, [r7, #32]
   return(result);
 800c2f2:	6a3b      	ldr	r3, [r7, #32]
 800c2f4:	f023 0301 	bic.w	r3, r3, #1
 800c2f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3314      	adds	r3, #20
 800c302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c306:	633a      	str	r2, [r7, #48]	@ 0x30
 800c308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c30c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c30e:	e841 2300 	strex	r3, r2, [r1]
 800c312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e3      	bne.n	800c2e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	330c      	adds	r3, #12
 800c32e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	e853 3f00 	ldrex	r3, [r3]
 800c336:	60fb      	str	r3, [r7, #12]
   return(result);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f023 0310 	bic.w	r3, r3, #16
 800c33e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	330c      	adds	r3, #12
 800c348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c34c:	61fa      	str	r2, [r7, #28]
 800c34e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	69b9      	ldr	r1, [r7, #24]
 800c352:	69fa      	ldr	r2, [r7, #28]
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	617b      	str	r3, [r7, #20]
   return(result);
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e3      	bne.n	800c328 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f847 	bl	800c400 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c372:	e023      	b.n	800c3bc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <HAL_UART_IRQHandler+0x524>
 800c380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d003      	beq.n	800c394 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f910 	bl	800c5b2 <UART_Transmit_IT>
    return;
 800c392:	e014      	b.n	800c3be <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00e      	beq.n	800c3be <HAL_UART_IRQHandler+0x54e>
 800c3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d008      	beq.n	800c3be <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f950 	bl	800c652 <UART_EndTransmit_IT>
    return;
 800c3b2:	e004      	b.n	800c3be <HAL_UART_IRQHandler+0x54e>
    return;
 800c3b4:	bf00      	nop
 800c3b6:	e002      	b.n	800c3be <HAL_UART_IRQHandler+0x54e>
      return;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <HAL_UART_IRQHandler+0x54e>
      return;
 800c3bc:	bf00      	nop
  }
}
 800c3be:	37e8      	adds	r7, #232	@ 0xe8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c3f4:	bf00      	nop
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	603b      	str	r3, [r7, #0]
 800c424:	4613      	mov	r3, r2
 800c426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c428:	e03b      	b.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c42a:	6a3b      	ldr	r3, [r7, #32]
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c430:	d037      	beq.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c432:	f7fa fd49 	bl	8006ec8 <HAL_GetTick>
 800c436:	4602      	mov	r2, r0
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	6a3a      	ldr	r2, [r7, #32]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d302      	bcc.n	800c448 <UART_WaitOnFlagUntilTimeout+0x30>
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c448:	2303      	movs	r3, #3
 800c44a:	e03a      	b.n	800c4c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	f003 0304 	and.w	r3, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	d023      	beq.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	2b80      	cmp	r3, #128	@ 0x80
 800c45e:	d020      	beq.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b40      	cmp	r3, #64	@ 0x40
 800c464:	d01d      	beq.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 0308 	and.w	r3, r3, #8
 800c470:	2b08      	cmp	r3, #8
 800c472:	d116      	bne.n	800c4a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	617b      	str	r3, [r7, #20]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	617b      	str	r3, [r7, #20]
 800c488:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 f81d 	bl	800c4ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2208      	movs	r2, #8
 800c494:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e00f      	b.n	800c4c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	bf0c      	ite	eq
 800c4b2:	2301      	moveq	r3, #1
 800c4b4:	2300      	movne	r3, #0
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	79fb      	ldrb	r3, [r7, #7]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d0b4      	beq.n	800c42a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c4ca:	b480      	push	{r7}
 800c4cc:	b095      	sub	sp, #84	@ 0x54
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	330c      	adds	r3, #12
 800c4d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4dc:	e853 3f00 	ldrex	r3, [r3]
 800c4e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c4e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	330c      	adds	r3, #12
 800c4f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4f2:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4fa:	e841 2300 	strex	r3, r2, [r1]
 800c4fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e5      	bne.n	800c4d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3314      	adds	r3, #20
 800c50c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6a3b      	ldr	r3, [r7, #32]
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	61fb      	str	r3, [r7, #28]
   return(result);
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	f023 0301 	bic.w	r3, r3, #1
 800c51c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3314      	adds	r3, #20
 800c524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c52c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c52e:	e841 2300 	strex	r3, r2, [r1]
 800c532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1e5      	bne.n	800c506 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d119      	bne.n	800c576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	330c      	adds	r3, #12
 800c548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	e853 3f00 	ldrex	r3, [r3]
 800c550:	60bb      	str	r3, [r7, #8]
   return(result);
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	f023 0310 	bic.w	r3, r3, #16
 800c558:	647b      	str	r3, [r7, #68]	@ 0x44
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	330c      	adds	r3, #12
 800c560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c562:	61ba      	str	r2, [r7, #24]
 800c564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c566:	6979      	ldr	r1, [r7, #20]
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	613b      	str	r3, [r7, #16]
   return(result);
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e5      	bne.n	800c542 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2220      	movs	r2, #32
 800c57a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c584:	bf00      	nop
 800c586:	3754      	adds	r7, #84	@ 0x54
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f7ff ff21 	bl	800c3ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5aa:	bf00      	nop
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	2b21      	cmp	r3, #33	@ 0x21
 800c5c4:	d13e      	bne.n	800c644 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5ce:	d114      	bne.n	800c5fa <UART_Transmit_IT+0x48>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d110      	bne.n	800c5fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	1c9a      	adds	r2, r3, #2
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	621a      	str	r2, [r3, #32]
 800c5f8:	e008      	b.n	800c60c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	6211      	str	r1, [r2, #32]
 800c604:	781a      	ldrb	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c610:	b29b      	uxth	r3, r3
 800c612:	3b01      	subs	r3, #1
 800c614:	b29b      	uxth	r3, r3
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	4619      	mov	r1, r3
 800c61a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10f      	bne.n	800c640 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68da      	ldr	r2, [r3, #12]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c62e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c63e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c640:	2300      	movs	r3, #0
 800c642:	e000      	b.n	800c646 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c644:	2302      	movs	r3, #2
  }
}
 800c646:	4618      	mov	r0, r3
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b082      	sub	sp, #8
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2220      	movs	r2, #32
 800c66e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff fea6 	bl	800c3c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b08c      	sub	sp, #48	@ 0x30
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800c68a:	2300      	movs	r3, #0
 800c68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b22      	cmp	r3, #34	@ 0x22
 800c69c:	f040 80aa 	bne.w	800c7f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6a8:	d115      	bne.n	800c6d6 <UART_Receive_IT+0x54>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d111      	bne.n	800c6d6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ce:	1c9a      	adds	r2, r3, #2
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	629a      	str	r2, [r3, #40]	@ 0x28
 800c6d4:	e024      	b.n	800c720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6e4:	d007      	beq.n	800c6f6 <UART_Receive_IT+0x74>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10a      	bne.n	800c704 <UART_Receive_IT+0x82>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d106      	bne.n	800c704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	e008      	b.n	800c716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c710:	b2da      	uxtb	r2, r3
 800c712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c724:	b29b      	uxth	r3, r3
 800c726:	3b01      	subs	r3, #1
 800c728:	b29b      	uxth	r3, r3
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	4619      	mov	r1, r3
 800c72e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c730:	2b00      	cmp	r3, #0
 800c732:	d15d      	bne.n	800c7f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68da      	ldr	r2, [r3, #12]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f022 0220 	bic.w	r2, r2, #32
 800c742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	695a      	ldr	r2, [r3, #20]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f022 0201 	bic.w	r2, r2, #1
 800c762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2220      	movs	r2, #32
 800c768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c776:	2b01      	cmp	r3, #1
 800c778:	d135      	bne.n	800c7e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	330c      	adds	r3, #12
 800c786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	e853 3f00 	ldrex	r3, [r3]
 800c78e:	613b      	str	r3, [r7, #16]
   return(result);
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	f023 0310 	bic.w	r3, r3, #16
 800c796:	627b      	str	r3, [r7, #36]	@ 0x24
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	330c      	adds	r3, #12
 800c79e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7a0:	623a      	str	r2, [r7, #32]
 800c7a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a4:	69f9      	ldr	r1, [r7, #28]
 800c7a6:	6a3a      	ldr	r2, [r7, #32]
 800c7a8:	e841 2300 	strex	r3, r2, [r1]
 800c7ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e5      	bne.n	800c780 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0310 	and.w	r3, r3, #16
 800c7be:	2b10      	cmp	r3, #16
 800c7c0:	d10a      	bne.n	800c7d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	60fb      	str	r3, [r7, #12]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7ff fe0e 	bl	800c400 <HAL_UARTEx_RxEventCallback>
 800c7e4:	e002      	b.n	800c7ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7ff fdf6 	bl	800c3d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e002      	b.n	800c7f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e000      	b.n	800c7f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c7f4:	2302      	movs	r3, #2
  }
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3730      	adds	r7, #48	@ 0x30
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c804:	b0c0      	sub	sp, #256	@ 0x100
 800c806:	af00      	add	r7, sp, #0
 800c808:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c81c:	68d9      	ldr	r1, [r3, #12]
 800c81e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	ea40 0301 	orr.w	r3, r0, r1
 800c828:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c82e:	689a      	ldr	r2, [r3, #8]
 800c830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	431a      	orrs	r2, r3
 800c838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	431a      	orrs	r2, r3
 800c840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	4313      	orrs	r3, r2
 800c848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c858:	f021 010c 	bic.w	r1, r1, #12
 800c85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c866:	430b      	orrs	r3, r1
 800c868:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c86a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c87a:	6999      	ldr	r1, [r3, #24]
 800c87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	ea40 0301 	orr.w	r3, r0, r1
 800c886:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4b8f      	ldr	r3, [pc, #572]	@ (800cacc <UART_SetConfig+0x2cc>)
 800c890:	429a      	cmp	r2, r3
 800c892:	d005      	beq.n	800c8a0 <UART_SetConfig+0xa0>
 800c894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	4b8d      	ldr	r3, [pc, #564]	@ (800cad0 <UART_SetConfig+0x2d0>)
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d104      	bne.n	800c8aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c8a0:	f7fe fc5e 	bl	800b160 <HAL_RCC_GetPCLK2Freq>
 800c8a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c8a8:	e003      	b.n	800c8b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c8aa:	f7fe fc45 	bl	800b138 <HAL_RCC_GetPCLK1Freq>
 800c8ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8b6:	69db      	ldr	r3, [r3, #28]
 800c8b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8bc:	f040 810c 	bne.w	800cad8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c8c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c8ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c8ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c8d2:	4622      	mov	r2, r4
 800c8d4:	462b      	mov	r3, r5
 800c8d6:	1891      	adds	r1, r2, r2
 800c8d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c8da:	415b      	adcs	r3, r3
 800c8dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	eb12 0801 	adds.w	r8, r2, r1
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	eb43 0901 	adc.w	r9, r3, r1
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c902:	4690      	mov	r8, r2
 800c904:	4699      	mov	r9, r3
 800c906:	4623      	mov	r3, r4
 800c908:	eb18 0303 	adds.w	r3, r8, r3
 800c90c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c910:	462b      	mov	r3, r5
 800c912:	eb49 0303 	adc.w	r3, r9, r3
 800c916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c926:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c92a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c92e:	460b      	mov	r3, r1
 800c930:	18db      	adds	r3, r3, r3
 800c932:	653b      	str	r3, [r7, #80]	@ 0x50
 800c934:	4613      	mov	r3, r2
 800c936:	eb42 0303 	adc.w	r3, r2, r3
 800c93a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c93c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c940:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c944:	f7f3 fc9c 	bl	8000280 <__aeabi_uldivmod>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4b61      	ldr	r3, [pc, #388]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800c94e:	fba3 2302 	umull	r2, r3, r3, r2
 800c952:	095b      	lsrs	r3, r3, #5
 800c954:	011c      	lsls	r4, r3, #4
 800c956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c95a:	2200      	movs	r2, #0
 800c95c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c960:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c964:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c968:	4642      	mov	r2, r8
 800c96a:	464b      	mov	r3, r9
 800c96c:	1891      	adds	r1, r2, r2
 800c96e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c970:	415b      	adcs	r3, r3
 800c972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c978:	4641      	mov	r1, r8
 800c97a:	eb12 0a01 	adds.w	sl, r2, r1
 800c97e:	4649      	mov	r1, r9
 800c980:	eb43 0b01 	adc.w	fp, r3, r1
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c990:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c998:	4692      	mov	sl, r2
 800c99a:	469b      	mov	fp, r3
 800c99c:	4643      	mov	r3, r8
 800c99e:	eb1a 0303 	adds.w	r3, sl, r3
 800c9a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	eb4b 0303 	adc.w	r3, fp, r3
 800c9ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9b4:	685b      	ldr	r3, [r3, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c9bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c9c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c9c4:	460b      	mov	r3, r1
 800c9c6:	18db      	adds	r3, r3, r3
 800c9c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	eb42 0303 	adc.w	r3, r2, r3
 800c9d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c9d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c9da:	f7f3 fc51 	bl	8000280 <__aeabi_uldivmod>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	4b3b      	ldr	r3, [pc, #236]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800c9e6:	fba3 2301 	umull	r2, r3, r3, r1
 800c9ea:	095b      	lsrs	r3, r3, #5
 800c9ec:	2264      	movs	r2, #100	@ 0x64
 800c9ee:	fb02 f303 	mul.w	r3, r2, r3
 800c9f2:	1acb      	subs	r3, r1, r3
 800c9f4:	00db      	lsls	r3, r3, #3
 800c9f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c9fa:	4b36      	ldr	r3, [pc, #216]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800c9fc:	fba3 2302 	umull	r2, r3, r3, r2
 800ca00:	095b      	lsrs	r3, r3, #5
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ca08:	441c      	add	r4, r3
 800ca0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ca18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	464b      	mov	r3, r9
 800ca20:	1891      	adds	r1, r2, r2
 800ca22:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ca24:	415b      	adcs	r3, r3
 800ca26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ca2c:	4641      	mov	r1, r8
 800ca2e:	1851      	adds	r1, r2, r1
 800ca30:	6339      	str	r1, [r7, #48]	@ 0x30
 800ca32:	4649      	mov	r1, r9
 800ca34:	414b      	adcs	r3, r1
 800ca36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca38:	f04f 0200 	mov.w	r2, #0
 800ca3c:	f04f 0300 	mov.w	r3, #0
 800ca40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ca44:	4659      	mov	r1, fp
 800ca46:	00cb      	lsls	r3, r1, #3
 800ca48:	4651      	mov	r1, sl
 800ca4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca4e:	4651      	mov	r1, sl
 800ca50:	00ca      	lsls	r2, r1, #3
 800ca52:	4610      	mov	r0, r2
 800ca54:	4619      	mov	r1, r3
 800ca56:	4603      	mov	r3, r0
 800ca58:	4642      	mov	r2, r8
 800ca5a:	189b      	adds	r3, r3, r2
 800ca5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca60:	464b      	mov	r3, r9
 800ca62:	460a      	mov	r2, r1
 800ca64:	eb42 0303 	adc.w	r3, r2, r3
 800ca68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ca78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ca7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ca80:	460b      	mov	r3, r1
 800ca82:	18db      	adds	r3, r3, r3
 800ca84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca86:	4613      	mov	r3, r2
 800ca88:	eb42 0303 	adc.w	r3, r2, r3
 800ca8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ca92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ca96:	f7f3 fbf3 	bl	8000280 <__aeabi_uldivmod>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800caa0:	fba3 1302 	umull	r1, r3, r3, r2
 800caa4:	095b      	lsrs	r3, r3, #5
 800caa6:	2164      	movs	r1, #100	@ 0x64
 800caa8:	fb01 f303 	mul.w	r3, r1, r3
 800caac:	1ad3      	subs	r3, r2, r3
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	3332      	adds	r3, #50	@ 0x32
 800cab2:	4a08      	ldr	r2, [pc, #32]	@ (800cad4 <UART_SetConfig+0x2d4>)
 800cab4:	fba2 2303 	umull	r2, r3, r2, r3
 800cab8:	095b      	lsrs	r3, r3, #5
 800caba:	f003 0207 	and.w	r2, r3, #7
 800cabe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4422      	add	r2, r4
 800cac6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cac8:	e106      	b.n	800ccd8 <UART_SetConfig+0x4d8>
 800caca:	bf00      	nop
 800cacc:	40011000 	.word	0x40011000
 800cad0:	40011400 	.word	0x40011400
 800cad4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cadc:	2200      	movs	r2, #0
 800cade:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cae2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cae6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800caea:	4642      	mov	r2, r8
 800caec:	464b      	mov	r3, r9
 800caee:	1891      	adds	r1, r2, r2
 800caf0:	6239      	str	r1, [r7, #32]
 800caf2:	415b      	adcs	r3, r3
 800caf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800caf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cafa:	4641      	mov	r1, r8
 800cafc:	1854      	adds	r4, r2, r1
 800cafe:	4649      	mov	r1, r9
 800cb00:	eb43 0501 	adc.w	r5, r3, r1
 800cb04:	f04f 0200 	mov.w	r2, #0
 800cb08:	f04f 0300 	mov.w	r3, #0
 800cb0c:	00eb      	lsls	r3, r5, #3
 800cb0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb12:	00e2      	lsls	r2, r4, #3
 800cb14:	4614      	mov	r4, r2
 800cb16:	461d      	mov	r5, r3
 800cb18:	4643      	mov	r3, r8
 800cb1a:	18e3      	adds	r3, r4, r3
 800cb1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cb20:	464b      	mov	r3, r9
 800cb22:	eb45 0303 	adc.w	r3, r5, r3
 800cb26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cb2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cb3a:	f04f 0200 	mov.w	r2, #0
 800cb3e:	f04f 0300 	mov.w	r3, #0
 800cb42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800cb46:	4629      	mov	r1, r5
 800cb48:	008b      	lsls	r3, r1, #2
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb50:	4621      	mov	r1, r4
 800cb52:	008a      	lsls	r2, r1, #2
 800cb54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800cb58:	f7f3 fb92 	bl	8000280 <__aeabi_uldivmod>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4b60      	ldr	r3, [pc, #384]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800cb62:	fba3 2302 	umull	r2, r3, r3, r2
 800cb66:	095b      	lsrs	r3, r3, #5
 800cb68:	011c      	lsls	r4, r3, #4
 800cb6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cb74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cb78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800cb7c:	4642      	mov	r2, r8
 800cb7e:	464b      	mov	r3, r9
 800cb80:	1891      	adds	r1, r2, r2
 800cb82:	61b9      	str	r1, [r7, #24]
 800cb84:	415b      	adcs	r3, r3
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb8c:	4641      	mov	r1, r8
 800cb8e:	1851      	adds	r1, r2, r1
 800cb90:	6139      	str	r1, [r7, #16]
 800cb92:	4649      	mov	r1, r9
 800cb94:	414b      	adcs	r3, r1
 800cb96:	617b      	str	r3, [r7, #20]
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	f04f 0300 	mov.w	r3, #0
 800cba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cba4:	4659      	mov	r1, fp
 800cba6:	00cb      	lsls	r3, r1, #3
 800cba8:	4651      	mov	r1, sl
 800cbaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbae:	4651      	mov	r1, sl
 800cbb0:	00ca      	lsls	r2, r1, #3
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	4642      	mov	r2, r8
 800cbba:	189b      	adds	r3, r3, r2
 800cbbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cbc0:	464b      	mov	r3, r9
 800cbc2:	460a      	mov	r2, r1
 800cbc4:	eb42 0303 	adc.w	r3, r2, r3
 800cbc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cbd8:	f04f 0200 	mov.w	r2, #0
 800cbdc:	f04f 0300 	mov.w	r3, #0
 800cbe0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	008b      	lsls	r3, r1, #2
 800cbe8:	4641      	mov	r1, r8
 800cbea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbee:	4641      	mov	r1, r8
 800cbf0:	008a      	lsls	r2, r1, #2
 800cbf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cbf6:	f7f3 fb43 	bl	8000280 <__aeabi_uldivmod>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4611      	mov	r1, r2
 800cc00:	4b38      	ldr	r3, [pc, #224]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800cc02:	fba3 2301 	umull	r2, r3, r3, r1
 800cc06:	095b      	lsrs	r3, r3, #5
 800cc08:	2264      	movs	r2, #100	@ 0x64
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	1acb      	subs	r3, r1, r3
 800cc10:	011b      	lsls	r3, r3, #4
 800cc12:	3332      	adds	r3, #50	@ 0x32
 800cc14:	4a33      	ldr	r2, [pc, #204]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800cc16:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1a:	095b      	lsrs	r3, r3, #5
 800cc1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc20:	441c      	add	r4, r3
 800cc22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc26:	2200      	movs	r2, #0
 800cc28:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc2a:	677a      	str	r2, [r7, #116]	@ 0x74
 800cc2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	1891      	adds	r1, r2, r2
 800cc36:	60b9      	str	r1, [r7, #8]
 800cc38:	415b      	adcs	r3, r3
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cc40:	4641      	mov	r1, r8
 800cc42:	1851      	adds	r1, r2, r1
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	4649      	mov	r1, r9
 800cc48:	414b      	adcs	r3, r1
 800cc4a:	607b      	str	r3, [r7, #4]
 800cc4c:	f04f 0200 	mov.w	r2, #0
 800cc50:	f04f 0300 	mov.w	r3, #0
 800cc54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cc58:	4659      	mov	r1, fp
 800cc5a:	00cb      	lsls	r3, r1, #3
 800cc5c:	4651      	mov	r1, sl
 800cc5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc62:	4651      	mov	r1, sl
 800cc64:	00ca      	lsls	r2, r1, #3
 800cc66:	4610      	mov	r0, r2
 800cc68:	4619      	mov	r1, r3
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	4642      	mov	r2, r8
 800cc6e:	189b      	adds	r3, r3, r2
 800cc70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc72:	464b      	mov	r3, r9
 800cc74:	460a      	mov	r2, r1
 800cc76:	eb42 0303 	adc.w	r3, r2, r3
 800cc7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc86:	667a      	str	r2, [r7, #100]	@ 0x64
 800cc88:	f04f 0200 	mov.w	r2, #0
 800cc8c:	f04f 0300 	mov.w	r3, #0
 800cc90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800cc94:	4649      	mov	r1, r9
 800cc96:	008b      	lsls	r3, r1, #2
 800cc98:	4641      	mov	r1, r8
 800cc9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc9e:	4641      	mov	r1, r8
 800cca0:	008a      	lsls	r2, r1, #2
 800cca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800cca6:	f7f3 faeb 	bl	8000280 <__aeabi_uldivmod>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800ccb0:	fba3 1302 	umull	r1, r3, r3, r2
 800ccb4:	095b      	lsrs	r3, r3, #5
 800ccb6:	2164      	movs	r1, #100	@ 0x64
 800ccb8:	fb01 f303 	mul.w	r3, r1, r3
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	011b      	lsls	r3, r3, #4
 800ccc0:	3332      	adds	r3, #50	@ 0x32
 800ccc2:	4a08      	ldr	r2, [pc, #32]	@ (800cce4 <UART_SetConfig+0x4e4>)
 800ccc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ccc8:	095b      	lsrs	r3, r3, #5
 800ccca:	f003 020f 	and.w	r2, r3, #15
 800ccce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4422      	add	r2, r4
 800ccd6:	609a      	str	r2, [r3, #8]
}
 800ccd8:	bf00      	nop
 800ccda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ccde:	46bd      	mov	sp, r7
 800cce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cce4:	51eb851f 	.word	0x51eb851f

0800cce8 <calloc>:
 800cce8:	4b02      	ldr	r3, [pc, #8]	@ (800ccf4 <calloc+0xc>)
 800ccea:	460a      	mov	r2, r1
 800ccec:	4601      	mov	r1, r0
 800ccee:	6818      	ldr	r0, [r3, #0]
 800ccf0:	f000 b802 	b.w	800ccf8 <_calloc_r>
 800ccf4:	20000568 	.word	0x20000568

0800ccf8 <_calloc_r>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	fba1 5402 	umull	r5, r4, r1, r2
 800ccfe:	b93c      	cbnz	r4, 800cd10 <_calloc_r+0x18>
 800cd00:	4629      	mov	r1, r5
 800cd02:	f000 f837 	bl	800cd74 <_malloc_r>
 800cd06:	4606      	mov	r6, r0
 800cd08:	b928      	cbnz	r0, 800cd16 <_calloc_r+0x1e>
 800cd0a:	2600      	movs	r6, #0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}
 800cd10:	220c      	movs	r2, #12
 800cd12:	6002      	str	r2, [r0, #0]
 800cd14:	e7f9      	b.n	800cd0a <_calloc_r+0x12>
 800cd16:	462a      	mov	r2, r5
 800cd18:	4621      	mov	r1, r4
 800cd1a:	f000 f9f9 	bl	800d110 <memset>
 800cd1e:	e7f5      	b.n	800cd0c <_calloc_r+0x14>

0800cd20 <free>:
 800cd20:	4b02      	ldr	r3, [pc, #8]	@ (800cd2c <free+0xc>)
 800cd22:	4601      	mov	r1, r0
 800cd24:	6818      	ldr	r0, [r3, #0]
 800cd26:	f000 ba47 	b.w	800d1b8 <_free_r>
 800cd2a:	bf00      	nop
 800cd2c:	20000568 	.word	0x20000568

0800cd30 <sbrk_aligned>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	4e0f      	ldr	r6, [pc, #60]	@ (800cd70 <sbrk_aligned+0x40>)
 800cd34:	460c      	mov	r4, r1
 800cd36:	6831      	ldr	r1, [r6, #0]
 800cd38:	4605      	mov	r5, r0
 800cd3a:	b911      	cbnz	r1, 800cd42 <sbrk_aligned+0x12>
 800cd3c:	f000 f9f0 	bl	800d120 <_sbrk_r>
 800cd40:	6030      	str	r0, [r6, #0]
 800cd42:	4621      	mov	r1, r4
 800cd44:	4628      	mov	r0, r5
 800cd46:	f000 f9eb 	bl	800d120 <_sbrk_r>
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	d103      	bne.n	800cd56 <sbrk_aligned+0x26>
 800cd4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cd52:	4620      	mov	r0, r4
 800cd54:	bd70      	pop	{r4, r5, r6, pc}
 800cd56:	1cc4      	adds	r4, r0, #3
 800cd58:	f024 0403 	bic.w	r4, r4, #3
 800cd5c:	42a0      	cmp	r0, r4
 800cd5e:	d0f8      	beq.n	800cd52 <sbrk_aligned+0x22>
 800cd60:	1a21      	subs	r1, r4, r0
 800cd62:	4628      	mov	r0, r5
 800cd64:	f000 f9dc 	bl	800d120 <_sbrk_r>
 800cd68:	3001      	adds	r0, #1
 800cd6a:	d1f2      	bne.n	800cd52 <sbrk_aligned+0x22>
 800cd6c:	e7ef      	b.n	800cd4e <sbrk_aligned+0x1e>
 800cd6e:	bf00      	nop
 800cd70:	20001204 	.word	0x20001204

0800cd74 <_malloc_r>:
 800cd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd78:	1ccd      	adds	r5, r1, #3
 800cd7a:	f025 0503 	bic.w	r5, r5, #3
 800cd7e:	3508      	adds	r5, #8
 800cd80:	2d0c      	cmp	r5, #12
 800cd82:	bf38      	it	cc
 800cd84:	250c      	movcc	r5, #12
 800cd86:	2d00      	cmp	r5, #0
 800cd88:	4606      	mov	r6, r0
 800cd8a:	db01      	blt.n	800cd90 <_malloc_r+0x1c>
 800cd8c:	42a9      	cmp	r1, r5
 800cd8e:	d904      	bls.n	800cd9a <_malloc_r+0x26>
 800cd90:	230c      	movs	r3, #12
 800cd92:	6033      	str	r3, [r6, #0]
 800cd94:	2000      	movs	r0, #0
 800cd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ce70 <_malloc_r+0xfc>
 800cd9e:	f000 f869 	bl	800ce74 <__malloc_lock>
 800cda2:	f8d8 3000 	ldr.w	r3, [r8]
 800cda6:	461c      	mov	r4, r3
 800cda8:	bb44      	cbnz	r4, 800cdfc <_malloc_r+0x88>
 800cdaa:	4629      	mov	r1, r5
 800cdac:	4630      	mov	r0, r6
 800cdae:	f7ff ffbf 	bl	800cd30 <sbrk_aligned>
 800cdb2:	1c43      	adds	r3, r0, #1
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	d158      	bne.n	800ce6a <_malloc_r+0xf6>
 800cdb8:	f8d8 4000 	ldr.w	r4, [r8]
 800cdbc:	4627      	mov	r7, r4
 800cdbe:	2f00      	cmp	r7, #0
 800cdc0:	d143      	bne.n	800ce4a <_malloc_r+0xd6>
 800cdc2:	2c00      	cmp	r4, #0
 800cdc4:	d04b      	beq.n	800ce5e <_malloc_r+0xea>
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	4639      	mov	r1, r7
 800cdca:	4630      	mov	r0, r6
 800cdcc:	eb04 0903 	add.w	r9, r4, r3
 800cdd0:	f000 f9a6 	bl	800d120 <_sbrk_r>
 800cdd4:	4581      	cmp	r9, r0
 800cdd6:	d142      	bne.n	800ce5e <_malloc_r+0xea>
 800cdd8:	6821      	ldr	r1, [r4, #0]
 800cdda:	1a6d      	subs	r5, r5, r1
 800cddc:	4629      	mov	r1, r5
 800cdde:	4630      	mov	r0, r6
 800cde0:	f7ff ffa6 	bl	800cd30 <sbrk_aligned>
 800cde4:	3001      	adds	r0, #1
 800cde6:	d03a      	beq.n	800ce5e <_malloc_r+0xea>
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	442b      	add	r3, r5
 800cdec:	6023      	str	r3, [r4, #0]
 800cdee:	f8d8 3000 	ldr.w	r3, [r8]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	bb62      	cbnz	r2, 800ce50 <_malloc_r+0xdc>
 800cdf6:	f8c8 7000 	str.w	r7, [r8]
 800cdfa:	e00f      	b.n	800ce1c <_malloc_r+0xa8>
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	1b52      	subs	r2, r2, r5
 800ce00:	d420      	bmi.n	800ce44 <_malloc_r+0xd0>
 800ce02:	2a0b      	cmp	r2, #11
 800ce04:	d917      	bls.n	800ce36 <_malloc_r+0xc2>
 800ce06:	1961      	adds	r1, r4, r5
 800ce08:	42a3      	cmp	r3, r4
 800ce0a:	6025      	str	r5, [r4, #0]
 800ce0c:	bf18      	it	ne
 800ce0e:	6059      	strne	r1, [r3, #4]
 800ce10:	6863      	ldr	r3, [r4, #4]
 800ce12:	bf08      	it	eq
 800ce14:	f8c8 1000 	streq.w	r1, [r8]
 800ce18:	5162      	str	r2, [r4, r5]
 800ce1a:	604b      	str	r3, [r1, #4]
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f000 f82f 	bl	800ce80 <__malloc_unlock>
 800ce22:	f104 000b 	add.w	r0, r4, #11
 800ce26:	1d23      	adds	r3, r4, #4
 800ce28:	f020 0007 	bic.w	r0, r0, #7
 800ce2c:	1ac2      	subs	r2, r0, r3
 800ce2e:	bf1c      	itt	ne
 800ce30:	1a1b      	subne	r3, r3, r0
 800ce32:	50a3      	strne	r3, [r4, r2]
 800ce34:	e7af      	b.n	800cd96 <_malloc_r+0x22>
 800ce36:	6862      	ldr	r2, [r4, #4]
 800ce38:	42a3      	cmp	r3, r4
 800ce3a:	bf0c      	ite	eq
 800ce3c:	f8c8 2000 	streq.w	r2, [r8]
 800ce40:	605a      	strne	r2, [r3, #4]
 800ce42:	e7eb      	b.n	800ce1c <_malloc_r+0xa8>
 800ce44:	4623      	mov	r3, r4
 800ce46:	6864      	ldr	r4, [r4, #4]
 800ce48:	e7ae      	b.n	800cda8 <_malloc_r+0x34>
 800ce4a:	463c      	mov	r4, r7
 800ce4c:	687f      	ldr	r7, [r7, #4]
 800ce4e:	e7b6      	b.n	800cdbe <_malloc_r+0x4a>
 800ce50:	461a      	mov	r2, r3
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	d1fb      	bne.n	800ce50 <_malloc_r+0xdc>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	6053      	str	r3, [r2, #4]
 800ce5c:	e7de      	b.n	800ce1c <_malloc_r+0xa8>
 800ce5e:	230c      	movs	r3, #12
 800ce60:	6033      	str	r3, [r6, #0]
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 f80c 	bl	800ce80 <__malloc_unlock>
 800ce68:	e794      	b.n	800cd94 <_malloc_r+0x20>
 800ce6a:	6005      	str	r5, [r0, #0]
 800ce6c:	e7d6      	b.n	800ce1c <_malloc_r+0xa8>
 800ce6e:	bf00      	nop
 800ce70:	20001208 	.word	0x20001208

0800ce74 <__malloc_lock>:
 800ce74:	4801      	ldr	r0, [pc, #4]	@ (800ce7c <__malloc_lock+0x8>)
 800ce76:	f000 b98e 	b.w	800d196 <__retarget_lock_acquire_recursive>
 800ce7a:	bf00      	nop
 800ce7c:	20001348 	.word	0x20001348

0800ce80 <__malloc_unlock>:
 800ce80:	4801      	ldr	r0, [pc, #4]	@ (800ce88 <__malloc_unlock+0x8>)
 800ce82:	f000 b989 	b.w	800d198 <__retarget_lock_release_recursive>
 800ce86:	bf00      	nop
 800ce88:	20001348 	.word	0x20001348

0800ce8c <std>:
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	4604      	mov	r4, r0
 800ce92:	e9c0 3300 	strd	r3, r3, [r0]
 800ce96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce9a:	6083      	str	r3, [r0, #8]
 800ce9c:	8181      	strh	r1, [r0, #12]
 800ce9e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cea0:	81c2      	strh	r2, [r0, #14]
 800cea2:	6183      	str	r3, [r0, #24]
 800cea4:	4619      	mov	r1, r3
 800cea6:	2208      	movs	r2, #8
 800cea8:	305c      	adds	r0, #92	@ 0x5c
 800ceaa:	f000 f931 	bl	800d110 <memset>
 800ceae:	4b0d      	ldr	r3, [pc, #52]	@ (800cee4 <std+0x58>)
 800ceb0:	6263      	str	r3, [r4, #36]	@ 0x24
 800ceb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cee8 <std+0x5c>)
 800ceb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ceec <std+0x60>)
 800ceb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ceba:	4b0d      	ldr	r3, [pc, #52]	@ (800cef0 <std+0x64>)
 800cebc:	6323      	str	r3, [r4, #48]	@ 0x30
 800cebe:	4b0d      	ldr	r3, [pc, #52]	@ (800cef4 <std+0x68>)
 800cec0:	6224      	str	r4, [r4, #32]
 800cec2:	429c      	cmp	r4, r3
 800cec4:	d006      	beq.n	800ced4 <std+0x48>
 800cec6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ceca:	4294      	cmp	r4, r2
 800cecc:	d002      	beq.n	800ced4 <std+0x48>
 800cece:	33d0      	adds	r3, #208	@ 0xd0
 800ced0:	429c      	cmp	r4, r3
 800ced2:	d105      	bne.n	800cee0 <std+0x54>
 800ced4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ced8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cedc:	f000 b95a 	b.w	800d194 <__retarget_lock_init_recursive>
 800cee0:	bd10      	pop	{r4, pc}
 800cee2:	bf00      	nop
 800cee4:	0800d945 	.word	0x0800d945
 800cee8:	0800d967 	.word	0x0800d967
 800ceec:	0800d99f 	.word	0x0800d99f
 800cef0:	0800d9c3 	.word	0x0800d9c3
 800cef4:	2000120c 	.word	0x2000120c

0800cef8 <stdio_exit_handler>:
 800cef8:	4a02      	ldr	r2, [pc, #8]	@ (800cf04 <stdio_exit_handler+0xc>)
 800cefa:	4903      	ldr	r1, [pc, #12]	@ (800cf08 <stdio_exit_handler+0x10>)
 800cefc:	4803      	ldr	r0, [pc, #12]	@ (800cf0c <stdio_exit_handler+0x14>)
 800cefe:	f000 b869 	b.w	800cfd4 <_fwalk_sglue>
 800cf02:	bf00      	nop
 800cf04:	2000055c 	.word	0x2000055c
 800cf08:	0800d8f5 	.word	0x0800d8f5
 800cf0c:	2000056c 	.word	0x2000056c

0800cf10 <cleanup_stdio>:
 800cf10:	6841      	ldr	r1, [r0, #4]
 800cf12:	4b0c      	ldr	r3, [pc, #48]	@ (800cf44 <cleanup_stdio+0x34>)
 800cf14:	4299      	cmp	r1, r3
 800cf16:	b510      	push	{r4, lr}
 800cf18:	4604      	mov	r4, r0
 800cf1a:	d001      	beq.n	800cf20 <cleanup_stdio+0x10>
 800cf1c:	f000 fcea 	bl	800d8f4 <_fflush_r>
 800cf20:	68a1      	ldr	r1, [r4, #8]
 800cf22:	4b09      	ldr	r3, [pc, #36]	@ (800cf48 <cleanup_stdio+0x38>)
 800cf24:	4299      	cmp	r1, r3
 800cf26:	d002      	beq.n	800cf2e <cleanup_stdio+0x1e>
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 fce3 	bl	800d8f4 <_fflush_r>
 800cf2e:	68e1      	ldr	r1, [r4, #12]
 800cf30:	4b06      	ldr	r3, [pc, #24]	@ (800cf4c <cleanup_stdio+0x3c>)
 800cf32:	4299      	cmp	r1, r3
 800cf34:	d004      	beq.n	800cf40 <cleanup_stdio+0x30>
 800cf36:	4620      	mov	r0, r4
 800cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3c:	f000 bcda 	b.w	800d8f4 <_fflush_r>
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	bf00      	nop
 800cf44:	2000120c 	.word	0x2000120c
 800cf48:	20001274 	.word	0x20001274
 800cf4c:	200012dc 	.word	0x200012dc

0800cf50 <global_stdio_init.part.0>:
 800cf50:	b510      	push	{r4, lr}
 800cf52:	4b0b      	ldr	r3, [pc, #44]	@ (800cf80 <global_stdio_init.part.0+0x30>)
 800cf54:	4c0b      	ldr	r4, [pc, #44]	@ (800cf84 <global_stdio_init.part.0+0x34>)
 800cf56:	4a0c      	ldr	r2, [pc, #48]	@ (800cf88 <global_stdio_init.part.0+0x38>)
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	2104      	movs	r1, #4
 800cf60:	f7ff ff94 	bl	800ce8c <std>
 800cf64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf68:	2201      	movs	r2, #1
 800cf6a:	2109      	movs	r1, #9
 800cf6c:	f7ff ff8e 	bl	800ce8c <std>
 800cf70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf74:	2202      	movs	r2, #2
 800cf76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf7a:	2112      	movs	r1, #18
 800cf7c:	f7ff bf86 	b.w	800ce8c <std>
 800cf80:	20001344 	.word	0x20001344
 800cf84:	2000120c 	.word	0x2000120c
 800cf88:	0800cef9 	.word	0x0800cef9

0800cf8c <__sfp_lock_acquire>:
 800cf8c:	4801      	ldr	r0, [pc, #4]	@ (800cf94 <__sfp_lock_acquire+0x8>)
 800cf8e:	f000 b902 	b.w	800d196 <__retarget_lock_acquire_recursive>
 800cf92:	bf00      	nop
 800cf94:	20001349 	.word	0x20001349

0800cf98 <__sfp_lock_release>:
 800cf98:	4801      	ldr	r0, [pc, #4]	@ (800cfa0 <__sfp_lock_release+0x8>)
 800cf9a:	f000 b8fd 	b.w	800d198 <__retarget_lock_release_recursive>
 800cf9e:	bf00      	nop
 800cfa0:	20001349 	.word	0x20001349

0800cfa4 <__sinit>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	f7ff fff0 	bl	800cf8c <__sfp_lock_acquire>
 800cfac:	6a23      	ldr	r3, [r4, #32]
 800cfae:	b11b      	cbz	r3, 800cfb8 <__sinit+0x14>
 800cfb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb4:	f7ff bff0 	b.w	800cf98 <__sfp_lock_release>
 800cfb8:	4b04      	ldr	r3, [pc, #16]	@ (800cfcc <__sinit+0x28>)
 800cfba:	6223      	str	r3, [r4, #32]
 800cfbc:	4b04      	ldr	r3, [pc, #16]	@ (800cfd0 <__sinit+0x2c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1f5      	bne.n	800cfb0 <__sinit+0xc>
 800cfc4:	f7ff ffc4 	bl	800cf50 <global_stdio_init.part.0>
 800cfc8:	e7f2      	b.n	800cfb0 <__sinit+0xc>
 800cfca:	bf00      	nop
 800cfcc:	0800cf11 	.word	0x0800cf11
 800cfd0:	20001344 	.word	0x20001344

0800cfd4 <_fwalk_sglue>:
 800cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	4607      	mov	r7, r0
 800cfda:	4688      	mov	r8, r1
 800cfdc:	4614      	mov	r4, r2
 800cfde:	2600      	movs	r6, #0
 800cfe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfe4:	f1b9 0901 	subs.w	r9, r9, #1
 800cfe8:	d505      	bpl.n	800cff6 <_fwalk_sglue+0x22>
 800cfea:	6824      	ldr	r4, [r4, #0]
 800cfec:	2c00      	cmp	r4, #0
 800cfee:	d1f7      	bne.n	800cfe0 <_fwalk_sglue+0xc>
 800cff0:	4630      	mov	r0, r6
 800cff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff6:	89ab      	ldrh	r3, [r5, #12]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d907      	bls.n	800d00c <_fwalk_sglue+0x38>
 800cffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d000:	3301      	adds	r3, #1
 800d002:	d003      	beq.n	800d00c <_fwalk_sglue+0x38>
 800d004:	4629      	mov	r1, r5
 800d006:	4638      	mov	r0, r7
 800d008:	47c0      	blx	r8
 800d00a:	4306      	orrs	r6, r0
 800d00c:	3568      	adds	r5, #104	@ 0x68
 800d00e:	e7e9      	b.n	800cfe4 <_fwalk_sglue+0x10>

0800d010 <iprintf>:
 800d010:	b40f      	push	{r0, r1, r2, r3}
 800d012:	b507      	push	{r0, r1, r2, lr}
 800d014:	4906      	ldr	r1, [pc, #24]	@ (800d030 <iprintf+0x20>)
 800d016:	ab04      	add	r3, sp, #16
 800d018:	6808      	ldr	r0, [r1, #0]
 800d01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d01e:	6881      	ldr	r1, [r0, #8]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	f000 f93d 	bl	800d2a0 <_vfiprintf_r>
 800d026:	b003      	add	sp, #12
 800d028:	f85d eb04 	ldr.w	lr, [sp], #4
 800d02c:	b004      	add	sp, #16
 800d02e:	4770      	bx	lr
 800d030:	20000568 	.word	0x20000568

0800d034 <_puts_r>:
 800d034:	6a03      	ldr	r3, [r0, #32]
 800d036:	b570      	push	{r4, r5, r6, lr}
 800d038:	6884      	ldr	r4, [r0, #8]
 800d03a:	4605      	mov	r5, r0
 800d03c:	460e      	mov	r6, r1
 800d03e:	b90b      	cbnz	r3, 800d044 <_puts_r+0x10>
 800d040:	f7ff ffb0 	bl	800cfa4 <__sinit>
 800d044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d046:	07db      	lsls	r3, r3, #31
 800d048:	d405      	bmi.n	800d056 <_puts_r+0x22>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	0598      	lsls	r0, r3, #22
 800d04e:	d402      	bmi.n	800d056 <_puts_r+0x22>
 800d050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d052:	f000 f8a0 	bl	800d196 <__retarget_lock_acquire_recursive>
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	0719      	lsls	r1, r3, #28
 800d05a:	d502      	bpl.n	800d062 <_puts_r+0x2e>
 800d05c:	6923      	ldr	r3, [r4, #16]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d135      	bne.n	800d0ce <_puts_r+0x9a>
 800d062:	4621      	mov	r1, r4
 800d064:	4628      	mov	r0, r5
 800d066:	f000 fcef 	bl	800da48 <__swsetup_r>
 800d06a:	b380      	cbz	r0, 800d0ce <_puts_r+0x9a>
 800d06c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d072:	07da      	lsls	r2, r3, #31
 800d074:	d405      	bmi.n	800d082 <_puts_r+0x4e>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	059b      	lsls	r3, r3, #22
 800d07a:	d402      	bmi.n	800d082 <_puts_r+0x4e>
 800d07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d07e:	f000 f88b 	bl	800d198 <__retarget_lock_release_recursive>
 800d082:	4628      	mov	r0, r5
 800d084:	bd70      	pop	{r4, r5, r6, pc}
 800d086:	2b00      	cmp	r3, #0
 800d088:	da04      	bge.n	800d094 <_puts_r+0x60>
 800d08a:	69a2      	ldr	r2, [r4, #24]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	dc17      	bgt.n	800d0c0 <_puts_r+0x8c>
 800d090:	290a      	cmp	r1, #10
 800d092:	d015      	beq.n	800d0c0 <_puts_r+0x8c>
 800d094:	6823      	ldr	r3, [r4, #0]
 800d096:	1c5a      	adds	r2, r3, #1
 800d098:	6022      	str	r2, [r4, #0]
 800d09a:	7019      	strb	r1, [r3, #0]
 800d09c:	68a3      	ldr	r3, [r4, #8]
 800d09e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	60a3      	str	r3, [r4, #8]
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d1ed      	bne.n	800d086 <_puts_r+0x52>
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	da11      	bge.n	800d0d2 <_puts_r+0x9e>
 800d0ae:	4622      	mov	r2, r4
 800d0b0:	210a      	movs	r1, #10
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	f000 fc89 	bl	800d9ca <__swbuf_r>
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d0d7      	beq.n	800d06c <_puts_r+0x38>
 800d0bc:	250a      	movs	r5, #10
 800d0be:	e7d7      	b.n	800d070 <_puts_r+0x3c>
 800d0c0:	4622      	mov	r2, r4
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 fc81 	bl	800d9ca <__swbuf_r>
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d1e7      	bne.n	800d09c <_puts_r+0x68>
 800d0cc:	e7ce      	b.n	800d06c <_puts_r+0x38>
 800d0ce:	3e01      	subs	r6, #1
 800d0d0:	e7e4      	b.n	800d09c <_puts_r+0x68>
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	6022      	str	r2, [r4, #0]
 800d0d8:	220a      	movs	r2, #10
 800d0da:	701a      	strb	r2, [r3, #0]
 800d0dc:	e7ee      	b.n	800d0bc <_puts_r+0x88>
	...

0800d0e0 <puts>:
 800d0e0:	4b02      	ldr	r3, [pc, #8]	@ (800d0ec <puts+0xc>)
 800d0e2:	4601      	mov	r1, r0
 800d0e4:	6818      	ldr	r0, [r3, #0]
 800d0e6:	f7ff bfa5 	b.w	800d034 <_puts_r>
 800d0ea:	bf00      	nop
 800d0ec:	20000568 	.word	0x20000568

0800d0f0 <memcmp>:
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	3901      	subs	r1, #1
 800d0f4:	4402      	add	r2, r0
 800d0f6:	4290      	cmp	r0, r2
 800d0f8:	d101      	bne.n	800d0fe <memcmp+0xe>
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e005      	b.n	800d10a <memcmp+0x1a>
 800d0fe:	7803      	ldrb	r3, [r0, #0]
 800d100:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d104:	42a3      	cmp	r3, r4
 800d106:	d001      	beq.n	800d10c <memcmp+0x1c>
 800d108:	1b18      	subs	r0, r3, r4
 800d10a:	bd10      	pop	{r4, pc}
 800d10c:	3001      	adds	r0, #1
 800d10e:	e7f2      	b.n	800d0f6 <memcmp+0x6>

0800d110 <memset>:
 800d110:	4402      	add	r2, r0
 800d112:	4603      	mov	r3, r0
 800d114:	4293      	cmp	r3, r2
 800d116:	d100      	bne.n	800d11a <memset+0xa>
 800d118:	4770      	bx	lr
 800d11a:	f803 1b01 	strb.w	r1, [r3], #1
 800d11e:	e7f9      	b.n	800d114 <memset+0x4>

0800d120 <_sbrk_r>:
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4d06      	ldr	r5, [pc, #24]	@ (800d13c <_sbrk_r+0x1c>)
 800d124:	2300      	movs	r3, #0
 800d126:	4604      	mov	r4, r0
 800d128:	4608      	mov	r0, r1
 800d12a:	602b      	str	r3, [r5, #0]
 800d12c:	f7f9 fdbe 	bl	8006cac <_sbrk>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_sbrk_r+0x1a>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_sbrk_r+0x1a>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	2000134c 	.word	0x2000134c

0800d140 <__errno>:
 800d140:	4b01      	ldr	r3, [pc, #4]	@ (800d148 <__errno+0x8>)
 800d142:	6818      	ldr	r0, [r3, #0]
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	20000568 	.word	0x20000568

0800d14c <__libc_init_array>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	4d0d      	ldr	r5, [pc, #52]	@ (800d184 <__libc_init_array+0x38>)
 800d150:	4c0d      	ldr	r4, [pc, #52]	@ (800d188 <__libc_init_array+0x3c>)
 800d152:	1b64      	subs	r4, r4, r5
 800d154:	10a4      	asrs	r4, r4, #2
 800d156:	2600      	movs	r6, #0
 800d158:	42a6      	cmp	r6, r4
 800d15a:	d109      	bne.n	800d170 <__libc_init_array+0x24>
 800d15c:	4d0b      	ldr	r5, [pc, #44]	@ (800d18c <__libc_init_array+0x40>)
 800d15e:	4c0c      	ldr	r4, [pc, #48]	@ (800d190 <__libc_init_array+0x44>)
 800d160:	f000 fd92 	bl	800dc88 <_init>
 800d164:	1b64      	subs	r4, r4, r5
 800d166:	10a4      	asrs	r4, r4, #2
 800d168:	2600      	movs	r6, #0
 800d16a:	42a6      	cmp	r6, r4
 800d16c:	d105      	bne.n	800d17a <__libc_init_array+0x2e>
 800d16e:	bd70      	pop	{r4, r5, r6, pc}
 800d170:	f855 3b04 	ldr.w	r3, [r5], #4
 800d174:	4798      	blx	r3
 800d176:	3601      	adds	r6, #1
 800d178:	e7ee      	b.n	800d158 <__libc_init_array+0xc>
 800d17a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d17e:	4798      	blx	r3
 800d180:	3601      	adds	r6, #1
 800d182:	e7f2      	b.n	800d16a <__libc_init_array+0x1e>
 800d184:	0800e178 	.word	0x0800e178
 800d188:	0800e178 	.word	0x0800e178
 800d18c:	0800e178 	.word	0x0800e178
 800d190:	0800e17c 	.word	0x0800e17c

0800d194 <__retarget_lock_init_recursive>:
 800d194:	4770      	bx	lr

0800d196 <__retarget_lock_acquire_recursive>:
 800d196:	4770      	bx	lr

0800d198 <__retarget_lock_release_recursive>:
 800d198:	4770      	bx	lr

0800d19a <memcpy>:
 800d19a:	440a      	add	r2, r1
 800d19c:	4291      	cmp	r1, r2
 800d19e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d1a2:	d100      	bne.n	800d1a6 <memcpy+0xc>
 800d1a4:	4770      	bx	lr
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1b0:	4291      	cmp	r1, r2
 800d1b2:	d1f9      	bne.n	800d1a8 <memcpy+0xe>
 800d1b4:	bd10      	pop	{r4, pc}
	...

0800d1b8 <_free_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	4605      	mov	r5, r0
 800d1bc:	2900      	cmp	r1, #0
 800d1be:	d041      	beq.n	800d244 <_free_r+0x8c>
 800d1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1c4:	1f0c      	subs	r4, r1, #4
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	bfb8      	it	lt
 800d1ca:	18e4      	addlt	r4, r4, r3
 800d1cc:	f7ff fe52 	bl	800ce74 <__malloc_lock>
 800d1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800d248 <_free_r+0x90>)
 800d1d2:	6813      	ldr	r3, [r2, #0]
 800d1d4:	b933      	cbnz	r3, 800d1e4 <_free_r+0x2c>
 800d1d6:	6063      	str	r3, [r4, #4]
 800d1d8:	6014      	str	r4, [r2, #0]
 800d1da:	4628      	mov	r0, r5
 800d1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1e0:	f7ff be4e 	b.w	800ce80 <__malloc_unlock>
 800d1e4:	42a3      	cmp	r3, r4
 800d1e6:	d908      	bls.n	800d1fa <_free_r+0x42>
 800d1e8:	6820      	ldr	r0, [r4, #0]
 800d1ea:	1821      	adds	r1, r4, r0
 800d1ec:	428b      	cmp	r3, r1
 800d1ee:	bf01      	itttt	eq
 800d1f0:	6819      	ldreq	r1, [r3, #0]
 800d1f2:	685b      	ldreq	r3, [r3, #4]
 800d1f4:	1809      	addeq	r1, r1, r0
 800d1f6:	6021      	streq	r1, [r4, #0]
 800d1f8:	e7ed      	b.n	800d1d6 <_free_r+0x1e>
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	b10b      	cbz	r3, 800d204 <_free_r+0x4c>
 800d200:	42a3      	cmp	r3, r4
 800d202:	d9fa      	bls.n	800d1fa <_free_r+0x42>
 800d204:	6811      	ldr	r1, [r2, #0]
 800d206:	1850      	adds	r0, r2, r1
 800d208:	42a0      	cmp	r0, r4
 800d20a:	d10b      	bne.n	800d224 <_free_r+0x6c>
 800d20c:	6820      	ldr	r0, [r4, #0]
 800d20e:	4401      	add	r1, r0
 800d210:	1850      	adds	r0, r2, r1
 800d212:	4283      	cmp	r3, r0
 800d214:	6011      	str	r1, [r2, #0]
 800d216:	d1e0      	bne.n	800d1da <_free_r+0x22>
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	6053      	str	r3, [r2, #4]
 800d21e:	4408      	add	r0, r1
 800d220:	6010      	str	r0, [r2, #0]
 800d222:	e7da      	b.n	800d1da <_free_r+0x22>
 800d224:	d902      	bls.n	800d22c <_free_r+0x74>
 800d226:	230c      	movs	r3, #12
 800d228:	602b      	str	r3, [r5, #0]
 800d22a:	e7d6      	b.n	800d1da <_free_r+0x22>
 800d22c:	6820      	ldr	r0, [r4, #0]
 800d22e:	1821      	adds	r1, r4, r0
 800d230:	428b      	cmp	r3, r1
 800d232:	bf04      	itt	eq
 800d234:	6819      	ldreq	r1, [r3, #0]
 800d236:	685b      	ldreq	r3, [r3, #4]
 800d238:	6063      	str	r3, [r4, #4]
 800d23a:	bf04      	itt	eq
 800d23c:	1809      	addeq	r1, r1, r0
 800d23e:	6021      	streq	r1, [r4, #0]
 800d240:	6054      	str	r4, [r2, #4]
 800d242:	e7ca      	b.n	800d1da <_free_r+0x22>
 800d244:	bd38      	pop	{r3, r4, r5, pc}
 800d246:	bf00      	nop
 800d248:	20001208 	.word	0x20001208

0800d24c <__sfputc_r>:
 800d24c:	6893      	ldr	r3, [r2, #8]
 800d24e:	3b01      	subs	r3, #1
 800d250:	2b00      	cmp	r3, #0
 800d252:	b410      	push	{r4}
 800d254:	6093      	str	r3, [r2, #8]
 800d256:	da08      	bge.n	800d26a <__sfputc_r+0x1e>
 800d258:	6994      	ldr	r4, [r2, #24]
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	db01      	blt.n	800d262 <__sfputc_r+0x16>
 800d25e:	290a      	cmp	r1, #10
 800d260:	d103      	bne.n	800d26a <__sfputc_r+0x1e>
 800d262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d266:	f000 bbb0 	b.w	800d9ca <__swbuf_r>
 800d26a:	6813      	ldr	r3, [r2, #0]
 800d26c:	1c58      	adds	r0, r3, #1
 800d26e:	6010      	str	r0, [r2, #0]
 800d270:	7019      	strb	r1, [r3, #0]
 800d272:	4608      	mov	r0, r1
 800d274:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d278:	4770      	bx	lr

0800d27a <__sfputs_r>:
 800d27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27c:	4606      	mov	r6, r0
 800d27e:	460f      	mov	r7, r1
 800d280:	4614      	mov	r4, r2
 800d282:	18d5      	adds	r5, r2, r3
 800d284:	42ac      	cmp	r4, r5
 800d286:	d101      	bne.n	800d28c <__sfputs_r+0x12>
 800d288:	2000      	movs	r0, #0
 800d28a:	e007      	b.n	800d29c <__sfputs_r+0x22>
 800d28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d290:	463a      	mov	r2, r7
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ffda 	bl	800d24c <__sfputc_r>
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	d1f3      	bne.n	800d284 <__sfputs_r+0xa>
 800d29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d2a0 <_vfiprintf_r>:
 800d2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	b09d      	sub	sp, #116	@ 0x74
 800d2a8:	4614      	mov	r4, r2
 800d2aa:	4698      	mov	r8, r3
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	b118      	cbz	r0, 800d2b8 <_vfiprintf_r+0x18>
 800d2b0:	6a03      	ldr	r3, [r0, #32]
 800d2b2:	b90b      	cbnz	r3, 800d2b8 <_vfiprintf_r+0x18>
 800d2b4:	f7ff fe76 	bl	800cfa4 <__sinit>
 800d2b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2ba:	07d9      	lsls	r1, r3, #31
 800d2bc:	d405      	bmi.n	800d2ca <_vfiprintf_r+0x2a>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	059a      	lsls	r2, r3, #22
 800d2c2:	d402      	bmi.n	800d2ca <_vfiprintf_r+0x2a>
 800d2c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2c6:	f7ff ff66 	bl	800d196 <__retarget_lock_acquire_recursive>
 800d2ca:	89ab      	ldrh	r3, [r5, #12]
 800d2cc:	071b      	lsls	r3, r3, #28
 800d2ce:	d501      	bpl.n	800d2d4 <_vfiprintf_r+0x34>
 800d2d0:	692b      	ldr	r3, [r5, #16]
 800d2d2:	b99b      	cbnz	r3, 800d2fc <_vfiprintf_r+0x5c>
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	f000 fbb6 	bl	800da48 <__swsetup_r>
 800d2dc:	b170      	cbz	r0, 800d2fc <_vfiprintf_r+0x5c>
 800d2de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2e0:	07dc      	lsls	r4, r3, #31
 800d2e2:	d504      	bpl.n	800d2ee <_vfiprintf_r+0x4e>
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2e8:	b01d      	add	sp, #116	@ 0x74
 800d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ee:	89ab      	ldrh	r3, [r5, #12]
 800d2f0:	0598      	lsls	r0, r3, #22
 800d2f2:	d4f7      	bmi.n	800d2e4 <_vfiprintf_r+0x44>
 800d2f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2f6:	f7ff ff4f 	bl	800d198 <__retarget_lock_release_recursive>
 800d2fa:	e7f3      	b.n	800d2e4 <_vfiprintf_r+0x44>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800d300:	2320      	movs	r3, #32
 800d302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d306:	f8cd 800c 	str.w	r8, [sp, #12]
 800d30a:	2330      	movs	r3, #48	@ 0x30
 800d30c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4bc <_vfiprintf_r+0x21c>
 800d310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d314:	f04f 0901 	mov.w	r9, #1
 800d318:	4623      	mov	r3, r4
 800d31a:	469a      	mov	sl, r3
 800d31c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d320:	b10a      	cbz	r2, 800d326 <_vfiprintf_r+0x86>
 800d322:	2a25      	cmp	r2, #37	@ 0x25
 800d324:	d1f9      	bne.n	800d31a <_vfiprintf_r+0x7a>
 800d326:	ebba 0b04 	subs.w	fp, sl, r4
 800d32a:	d00b      	beq.n	800d344 <_vfiprintf_r+0xa4>
 800d32c:	465b      	mov	r3, fp
 800d32e:	4622      	mov	r2, r4
 800d330:	4629      	mov	r1, r5
 800d332:	4630      	mov	r0, r6
 800d334:	f7ff ffa1 	bl	800d27a <__sfputs_r>
 800d338:	3001      	adds	r0, #1
 800d33a:	f000 80a7 	beq.w	800d48c <_vfiprintf_r+0x1ec>
 800d33e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d340:	445a      	add	r2, fp
 800d342:	9209      	str	r2, [sp, #36]	@ 0x24
 800d344:	f89a 3000 	ldrb.w	r3, [sl]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 809f 	beq.w	800d48c <_vfiprintf_r+0x1ec>
 800d34e:	2300      	movs	r3, #0
 800d350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d358:	f10a 0a01 	add.w	sl, sl, #1
 800d35c:	9304      	str	r3, [sp, #16]
 800d35e:	9307      	str	r3, [sp, #28]
 800d360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d364:	931a      	str	r3, [sp, #104]	@ 0x68
 800d366:	4654      	mov	r4, sl
 800d368:	2205      	movs	r2, #5
 800d36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36e:	4853      	ldr	r0, [pc, #332]	@ (800d4bc <_vfiprintf_r+0x21c>)
 800d370:	f7f2 ff36 	bl	80001e0 <memchr>
 800d374:	9a04      	ldr	r2, [sp, #16]
 800d376:	b9d8      	cbnz	r0, 800d3b0 <_vfiprintf_r+0x110>
 800d378:	06d1      	lsls	r1, r2, #27
 800d37a:	bf44      	itt	mi
 800d37c:	2320      	movmi	r3, #32
 800d37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d382:	0713      	lsls	r3, r2, #28
 800d384:	bf44      	itt	mi
 800d386:	232b      	movmi	r3, #43	@ 0x2b
 800d388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d38c:	f89a 3000 	ldrb.w	r3, [sl]
 800d390:	2b2a      	cmp	r3, #42	@ 0x2a
 800d392:	d015      	beq.n	800d3c0 <_vfiprintf_r+0x120>
 800d394:	9a07      	ldr	r2, [sp, #28]
 800d396:	4654      	mov	r4, sl
 800d398:	2000      	movs	r0, #0
 800d39a:	f04f 0c0a 	mov.w	ip, #10
 800d39e:	4621      	mov	r1, r4
 800d3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3a4:	3b30      	subs	r3, #48	@ 0x30
 800d3a6:	2b09      	cmp	r3, #9
 800d3a8:	d94b      	bls.n	800d442 <_vfiprintf_r+0x1a2>
 800d3aa:	b1b0      	cbz	r0, 800d3da <_vfiprintf_r+0x13a>
 800d3ac:	9207      	str	r2, [sp, #28]
 800d3ae:	e014      	b.n	800d3da <_vfiprintf_r+0x13a>
 800d3b0:	eba0 0308 	sub.w	r3, r0, r8
 800d3b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	46a2      	mov	sl, r4
 800d3be:	e7d2      	b.n	800d366 <_vfiprintf_r+0xc6>
 800d3c0:	9b03      	ldr	r3, [sp, #12]
 800d3c2:	1d19      	adds	r1, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	9103      	str	r1, [sp, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bfbb      	ittet	lt
 800d3cc:	425b      	neglt	r3, r3
 800d3ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d3d2:	9307      	strge	r3, [sp, #28]
 800d3d4:	9307      	strlt	r3, [sp, #28]
 800d3d6:	bfb8      	it	lt
 800d3d8:	9204      	strlt	r2, [sp, #16]
 800d3da:	7823      	ldrb	r3, [r4, #0]
 800d3dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3de:	d10a      	bne.n	800d3f6 <_vfiprintf_r+0x156>
 800d3e0:	7863      	ldrb	r3, [r4, #1]
 800d3e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3e4:	d132      	bne.n	800d44c <_vfiprintf_r+0x1ac>
 800d3e6:	9b03      	ldr	r3, [sp, #12]
 800d3e8:	1d1a      	adds	r2, r3, #4
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	9203      	str	r2, [sp, #12]
 800d3ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3f2:	3402      	adds	r4, #2
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4cc <_vfiprintf_r+0x22c>
 800d3fa:	7821      	ldrb	r1, [r4, #0]
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	4650      	mov	r0, sl
 800d400:	f7f2 feee 	bl	80001e0 <memchr>
 800d404:	b138      	cbz	r0, 800d416 <_vfiprintf_r+0x176>
 800d406:	9b04      	ldr	r3, [sp, #16]
 800d408:	eba0 000a 	sub.w	r0, r0, sl
 800d40c:	2240      	movs	r2, #64	@ 0x40
 800d40e:	4082      	lsls	r2, r0
 800d410:	4313      	orrs	r3, r2
 800d412:	3401      	adds	r4, #1
 800d414:	9304      	str	r3, [sp, #16]
 800d416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d41a:	4829      	ldr	r0, [pc, #164]	@ (800d4c0 <_vfiprintf_r+0x220>)
 800d41c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d420:	2206      	movs	r2, #6
 800d422:	f7f2 fedd 	bl	80001e0 <memchr>
 800d426:	2800      	cmp	r0, #0
 800d428:	d03f      	beq.n	800d4aa <_vfiprintf_r+0x20a>
 800d42a:	4b26      	ldr	r3, [pc, #152]	@ (800d4c4 <_vfiprintf_r+0x224>)
 800d42c:	bb1b      	cbnz	r3, 800d476 <_vfiprintf_r+0x1d6>
 800d42e:	9b03      	ldr	r3, [sp, #12]
 800d430:	3307      	adds	r3, #7
 800d432:	f023 0307 	bic.w	r3, r3, #7
 800d436:	3308      	adds	r3, #8
 800d438:	9303      	str	r3, [sp, #12]
 800d43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d43c:	443b      	add	r3, r7
 800d43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d440:	e76a      	b.n	800d318 <_vfiprintf_r+0x78>
 800d442:	fb0c 3202 	mla	r2, ip, r2, r3
 800d446:	460c      	mov	r4, r1
 800d448:	2001      	movs	r0, #1
 800d44a:	e7a8      	b.n	800d39e <_vfiprintf_r+0xfe>
 800d44c:	2300      	movs	r3, #0
 800d44e:	3401      	adds	r4, #1
 800d450:	9305      	str	r3, [sp, #20]
 800d452:	4619      	mov	r1, r3
 800d454:	f04f 0c0a 	mov.w	ip, #10
 800d458:	4620      	mov	r0, r4
 800d45a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d45e:	3a30      	subs	r2, #48	@ 0x30
 800d460:	2a09      	cmp	r2, #9
 800d462:	d903      	bls.n	800d46c <_vfiprintf_r+0x1cc>
 800d464:	2b00      	cmp	r3, #0
 800d466:	d0c6      	beq.n	800d3f6 <_vfiprintf_r+0x156>
 800d468:	9105      	str	r1, [sp, #20]
 800d46a:	e7c4      	b.n	800d3f6 <_vfiprintf_r+0x156>
 800d46c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d470:	4604      	mov	r4, r0
 800d472:	2301      	movs	r3, #1
 800d474:	e7f0      	b.n	800d458 <_vfiprintf_r+0x1b8>
 800d476:	ab03      	add	r3, sp, #12
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	462a      	mov	r2, r5
 800d47c:	4b12      	ldr	r3, [pc, #72]	@ (800d4c8 <_vfiprintf_r+0x228>)
 800d47e:	a904      	add	r1, sp, #16
 800d480:	4630      	mov	r0, r6
 800d482:	f3af 8000 	nop.w
 800d486:	4607      	mov	r7, r0
 800d488:	1c78      	adds	r0, r7, #1
 800d48a:	d1d6      	bne.n	800d43a <_vfiprintf_r+0x19a>
 800d48c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d48e:	07d9      	lsls	r1, r3, #31
 800d490:	d405      	bmi.n	800d49e <_vfiprintf_r+0x1fe>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	059a      	lsls	r2, r3, #22
 800d496:	d402      	bmi.n	800d49e <_vfiprintf_r+0x1fe>
 800d498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d49a:	f7ff fe7d 	bl	800d198 <__retarget_lock_release_recursive>
 800d49e:	89ab      	ldrh	r3, [r5, #12]
 800d4a0:	065b      	lsls	r3, r3, #25
 800d4a2:	f53f af1f 	bmi.w	800d2e4 <_vfiprintf_r+0x44>
 800d4a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4a8:	e71e      	b.n	800d2e8 <_vfiprintf_r+0x48>
 800d4aa:	ab03      	add	r3, sp, #12
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	462a      	mov	r2, r5
 800d4b0:	4b05      	ldr	r3, [pc, #20]	@ (800d4c8 <_vfiprintf_r+0x228>)
 800d4b2:	a904      	add	r1, sp, #16
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f000 f879 	bl	800d5ac <_printf_i>
 800d4ba:	e7e4      	b.n	800d486 <_vfiprintf_r+0x1e6>
 800d4bc:	0800e13c 	.word	0x0800e13c
 800d4c0:	0800e146 	.word	0x0800e146
 800d4c4:	00000000 	.word	0x00000000
 800d4c8:	0800d27b 	.word	0x0800d27b
 800d4cc:	0800e142 	.word	0x0800e142

0800d4d0 <_printf_common>:
 800d4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d4:	4616      	mov	r6, r2
 800d4d6:	4698      	mov	r8, r3
 800d4d8:	688a      	ldr	r2, [r1, #8]
 800d4da:	690b      	ldr	r3, [r1, #16]
 800d4dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	bfb8      	it	lt
 800d4e4:	4613      	movlt	r3, r2
 800d4e6:	6033      	str	r3, [r6, #0]
 800d4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4ec:	4607      	mov	r7, r0
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	b10a      	cbz	r2, 800d4f6 <_printf_common+0x26>
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	6033      	str	r3, [r6, #0]
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	0699      	lsls	r1, r3, #26
 800d4fa:	bf42      	ittt	mi
 800d4fc:	6833      	ldrmi	r3, [r6, #0]
 800d4fe:	3302      	addmi	r3, #2
 800d500:	6033      	strmi	r3, [r6, #0]
 800d502:	6825      	ldr	r5, [r4, #0]
 800d504:	f015 0506 	ands.w	r5, r5, #6
 800d508:	d106      	bne.n	800d518 <_printf_common+0x48>
 800d50a:	f104 0a19 	add.w	sl, r4, #25
 800d50e:	68e3      	ldr	r3, [r4, #12]
 800d510:	6832      	ldr	r2, [r6, #0]
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	42ab      	cmp	r3, r5
 800d516:	dc26      	bgt.n	800d566 <_printf_common+0x96>
 800d518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d51c:	6822      	ldr	r2, [r4, #0]
 800d51e:	3b00      	subs	r3, #0
 800d520:	bf18      	it	ne
 800d522:	2301      	movne	r3, #1
 800d524:	0692      	lsls	r2, r2, #26
 800d526:	d42b      	bmi.n	800d580 <_printf_common+0xb0>
 800d528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d52c:	4641      	mov	r1, r8
 800d52e:	4638      	mov	r0, r7
 800d530:	47c8      	blx	r9
 800d532:	3001      	adds	r0, #1
 800d534:	d01e      	beq.n	800d574 <_printf_common+0xa4>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	6922      	ldr	r2, [r4, #16]
 800d53a:	f003 0306 	and.w	r3, r3, #6
 800d53e:	2b04      	cmp	r3, #4
 800d540:	bf02      	ittt	eq
 800d542:	68e5      	ldreq	r5, [r4, #12]
 800d544:	6833      	ldreq	r3, [r6, #0]
 800d546:	1aed      	subeq	r5, r5, r3
 800d548:	68a3      	ldr	r3, [r4, #8]
 800d54a:	bf0c      	ite	eq
 800d54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d550:	2500      	movne	r5, #0
 800d552:	4293      	cmp	r3, r2
 800d554:	bfc4      	itt	gt
 800d556:	1a9b      	subgt	r3, r3, r2
 800d558:	18ed      	addgt	r5, r5, r3
 800d55a:	2600      	movs	r6, #0
 800d55c:	341a      	adds	r4, #26
 800d55e:	42b5      	cmp	r5, r6
 800d560:	d11a      	bne.n	800d598 <_printf_common+0xc8>
 800d562:	2000      	movs	r0, #0
 800d564:	e008      	b.n	800d578 <_printf_common+0xa8>
 800d566:	2301      	movs	r3, #1
 800d568:	4652      	mov	r2, sl
 800d56a:	4641      	mov	r1, r8
 800d56c:	4638      	mov	r0, r7
 800d56e:	47c8      	blx	r9
 800d570:	3001      	adds	r0, #1
 800d572:	d103      	bne.n	800d57c <_printf_common+0xac>
 800d574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d57c:	3501      	adds	r5, #1
 800d57e:	e7c6      	b.n	800d50e <_printf_common+0x3e>
 800d580:	18e1      	adds	r1, r4, r3
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	2030      	movs	r0, #48	@ 0x30
 800d586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d58a:	4422      	add	r2, r4
 800d58c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d594:	3302      	adds	r3, #2
 800d596:	e7c7      	b.n	800d528 <_printf_common+0x58>
 800d598:	2301      	movs	r3, #1
 800d59a:	4622      	mov	r2, r4
 800d59c:	4641      	mov	r1, r8
 800d59e:	4638      	mov	r0, r7
 800d5a0:	47c8      	blx	r9
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d0e6      	beq.n	800d574 <_printf_common+0xa4>
 800d5a6:	3601      	adds	r6, #1
 800d5a8:	e7d9      	b.n	800d55e <_printf_common+0x8e>
	...

0800d5ac <_printf_i>:
 800d5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b0:	7e0f      	ldrb	r7, [r1, #24]
 800d5b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d5b4:	2f78      	cmp	r7, #120	@ 0x78
 800d5b6:	4691      	mov	r9, r2
 800d5b8:	4680      	mov	r8, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	469a      	mov	sl, r3
 800d5be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5c2:	d807      	bhi.n	800d5d4 <_printf_i+0x28>
 800d5c4:	2f62      	cmp	r7, #98	@ 0x62
 800d5c6:	d80a      	bhi.n	800d5de <_printf_i+0x32>
 800d5c8:	2f00      	cmp	r7, #0
 800d5ca:	f000 80d2 	beq.w	800d772 <_printf_i+0x1c6>
 800d5ce:	2f58      	cmp	r7, #88	@ 0x58
 800d5d0:	f000 80b9 	beq.w	800d746 <_printf_i+0x19a>
 800d5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5dc:	e03a      	b.n	800d654 <_printf_i+0xa8>
 800d5de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5e2:	2b15      	cmp	r3, #21
 800d5e4:	d8f6      	bhi.n	800d5d4 <_printf_i+0x28>
 800d5e6:	a101      	add	r1, pc, #4	@ (adr r1, 800d5ec <_printf_i+0x40>)
 800d5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5ec:	0800d645 	.word	0x0800d645
 800d5f0:	0800d659 	.word	0x0800d659
 800d5f4:	0800d5d5 	.word	0x0800d5d5
 800d5f8:	0800d5d5 	.word	0x0800d5d5
 800d5fc:	0800d5d5 	.word	0x0800d5d5
 800d600:	0800d5d5 	.word	0x0800d5d5
 800d604:	0800d659 	.word	0x0800d659
 800d608:	0800d5d5 	.word	0x0800d5d5
 800d60c:	0800d5d5 	.word	0x0800d5d5
 800d610:	0800d5d5 	.word	0x0800d5d5
 800d614:	0800d5d5 	.word	0x0800d5d5
 800d618:	0800d759 	.word	0x0800d759
 800d61c:	0800d683 	.word	0x0800d683
 800d620:	0800d713 	.word	0x0800d713
 800d624:	0800d5d5 	.word	0x0800d5d5
 800d628:	0800d5d5 	.word	0x0800d5d5
 800d62c:	0800d77b 	.word	0x0800d77b
 800d630:	0800d5d5 	.word	0x0800d5d5
 800d634:	0800d683 	.word	0x0800d683
 800d638:	0800d5d5 	.word	0x0800d5d5
 800d63c:	0800d5d5 	.word	0x0800d5d5
 800d640:	0800d71b 	.word	0x0800d71b
 800d644:	6833      	ldr	r3, [r6, #0]
 800d646:	1d1a      	adds	r2, r3, #4
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6032      	str	r2, [r6, #0]
 800d64c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d654:	2301      	movs	r3, #1
 800d656:	e09d      	b.n	800d794 <_printf_i+0x1e8>
 800d658:	6833      	ldr	r3, [r6, #0]
 800d65a:	6820      	ldr	r0, [r4, #0]
 800d65c:	1d19      	adds	r1, r3, #4
 800d65e:	6031      	str	r1, [r6, #0]
 800d660:	0606      	lsls	r6, r0, #24
 800d662:	d501      	bpl.n	800d668 <_printf_i+0xbc>
 800d664:	681d      	ldr	r5, [r3, #0]
 800d666:	e003      	b.n	800d670 <_printf_i+0xc4>
 800d668:	0645      	lsls	r5, r0, #25
 800d66a:	d5fb      	bpl.n	800d664 <_printf_i+0xb8>
 800d66c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d670:	2d00      	cmp	r5, #0
 800d672:	da03      	bge.n	800d67c <_printf_i+0xd0>
 800d674:	232d      	movs	r3, #45	@ 0x2d
 800d676:	426d      	negs	r5, r5
 800d678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d67c:	4859      	ldr	r0, [pc, #356]	@ (800d7e4 <_printf_i+0x238>)
 800d67e:	230a      	movs	r3, #10
 800d680:	e011      	b.n	800d6a6 <_printf_i+0xfa>
 800d682:	6821      	ldr	r1, [r4, #0]
 800d684:	6833      	ldr	r3, [r6, #0]
 800d686:	0608      	lsls	r0, r1, #24
 800d688:	f853 5b04 	ldr.w	r5, [r3], #4
 800d68c:	d402      	bmi.n	800d694 <_printf_i+0xe8>
 800d68e:	0649      	lsls	r1, r1, #25
 800d690:	bf48      	it	mi
 800d692:	b2ad      	uxthmi	r5, r5
 800d694:	2f6f      	cmp	r7, #111	@ 0x6f
 800d696:	4853      	ldr	r0, [pc, #332]	@ (800d7e4 <_printf_i+0x238>)
 800d698:	6033      	str	r3, [r6, #0]
 800d69a:	bf14      	ite	ne
 800d69c:	230a      	movne	r3, #10
 800d69e:	2308      	moveq	r3, #8
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d6a6:	6866      	ldr	r6, [r4, #4]
 800d6a8:	60a6      	str	r6, [r4, #8]
 800d6aa:	2e00      	cmp	r6, #0
 800d6ac:	bfa2      	ittt	ge
 800d6ae:	6821      	ldrge	r1, [r4, #0]
 800d6b0:	f021 0104 	bicge.w	r1, r1, #4
 800d6b4:	6021      	strge	r1, [r4, #0]
 800d6b6:	b90d      	cbnz	r5, 800d6bc <_printf_i+0x110>
 800d6b8:	2e00      	cmp	r6, #0
 800d6ba:	d04b      	beq.n	800d754 <_printf_i+0x1a8>
 800d6bc:	4616      	mov	r6, r2
 800d6be:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6c2:	fb03 5711 	mls	r7, r3, r1, r5
 800d6c6:	5dc7      	ldrb	r7, [r0, r7]
 800d6c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6cc:	462f      	mov	r7, r5
 800d6ce:	42bb      	cmp	r3, r7
 800d6d0:	460d      	mov	r5, r1
 800d6d2:	d9f4      	bls.n	800d6be <_printf_i+0x112>
 800d6d4:	2b08      	cmp	r3, #8
 800d6d6:	d10b      	bne.n	800d6f0 <_printf_i+0x144>
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	07df      	lsls	r7, r3, #31
 800d6dc:	d508      	bpl.n	800d6f0 <_printf_i+0x144>
 800d6de:	6923      	ldr	r3, [r4, #16]
 800d6e0:	6861      	ldr	r1, [r4, #4]
 800d6e2:	4299      	cmp	r1, r3
 800d6e4:	bfde      	ittt	le
 800d6e6:	2330      	movle	r3, #48	@ 0x30
 800d6e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6ec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d6f0:	1b92      	subs	r2, r2, r6
 800d6f2:	6122      	str	r2, [r4, #16]
 800d6f4:	f8cd a000 	str.w	sl, [sp]
 800d6f8:	464b      	mov	r3, r9
 800d6fa:	aa03      	add	r2, sp, #12
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	4640      	mov	r0, r8
 800d700:	f7ff fee6 	bl	800d4d0 <_printf_common>
 800d704:	3001      	adds	r0, #1
 800d706:	d14a      	bne.n	800d79e <_printf_i+0x1f2>
 800d708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d70c:	b004      	add	sp, #16
 800d70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	f043 0320 	orr.w	r3, r3, #32
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	4833      	ldr	r0, [pc, #204]	@ (800d7e8 <_printf_i+0x23c>)
 800d71c:	2778      	movs	r7, #120	@ 0x78
 800d71e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	6831      	ldr	r1, [r6, #0]
 800d726:	061f      	lsls	r7, r3, #24
 800d728:	f851 5b04 	ldr.w	r5, [r1], #4
 800d72c:	d402      	bmi.n	800d734 <_printf_i+0x188>
 800d72e:	065f      	lsls	r7, r3, #25
 800d730:	bf48      	it	mi
 800d732:	b2ad      	uxthmi	r5, r5
 800d734:	6031      	str	r1, [r6, #0]
 800d736:	07d9      	lsls	r1, r3, #31
 800d738:	bf44      	itt	mi
 800d73a:	f043 0320 	orrmi.w	r3, r3, #32
 800d73e:	6023      	strmi	r3, [r4, #0]
 800d740:	b11d      	cbz	r5, 800d74a <_printf_i+0x19e>
 800d742:	2310      	movs	r3, #16
 800d744:	e7ac      	b.n	800d6a0 <_printf_i+0xf4>
 800d746:	4827      	ldr	r0, [pc, #156]	@ (800d7e4 <_printf_i+0x238>)
 800d748:	e7e9      	b.n	800d71e <_printf_i+0x172>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f023 0320 	bic.w	r3, r3, #32
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	e7f6      	b.n	800d742 <_printf_i+0x196>
 800d754:	4616      	mov	r6, r2
 800d756:	e7bd      	b.n	800d6d4 <_printf_i+0x128>
 800d758:	6833      	ldr	r3, [r6, #0]
 800d75a:	6825      	ldr	r5, [r4, #0]
 800d75c:	6961      	ldr	r1, [r4, #20]
 800d75e:	1d18      	adds	r0, r3, #4
 800d760:	6030      	str	r0, [r6, #0]
 800d762:	062e      	lsls	r6, r5, #24
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	d501      	bpl.n	800d76c <_printf_i+0x1c0>
 800d768:	6019      	str	r1, [r3, #0]
 800d76a:	e002      	b.n	800d772 <_printf_i+0x1c6>
 800d76c:	0668      	lsls	r0, r5, #25
 800d76e:	d5fb      	bpl.n	800d768 <_printf_i+0x1bc>
 800d770:	8019      	strh	r1, [r3, #0]
 800d772:	2300      	movs	r3, #0
 800d774:	6123      	str	r3, [r4, #16]
 800d776:	4616      	mov	r6, r2
 800d778:	e7bc      	b.n	800d6f4 <_printf_i+0x148>
 800d77a:	6833      	ldr	r3, [r6, #0]
 800d77c:	1d1a      	adds	r2, r3, #4
 800d77e:	6032      	str	r2, [r6, #0]
 800d780:	681e      	ldr	r6, [r3, #0]
 800d782:	6862      	ldr	r2, [r4, #4]
 800d784:	2100      	movs	r1, #0
 800d786:	4630      	mov	r0, r6
 800d788:	f7f2 fd2a 	bl	80001e0 <memchr>
 800d78c:	b108      	cbz	r0, 800d792 <_printf_i+0x1e6>
 800d78e:	1b80      	subs	r0, r0, r6
 800d790:	6060      	str	r0, [r4, #4]
 800d792:	6863      	ldr	r3, [r4, #4]
 800d794:	6123      	str	r3, [r4, #16]
 800d796:	2300      	movs	r3, #0
 800d798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d79c:	e7aa      	b.n	800d6f4 <_printf_i+0x148>
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	4632      	mov	r2, r6
 800d7a2:	4649      	mov	r1, r9
 800d7a4:	4640      	mov	r0, r8
 800d7a6:	47d0      	blx	sl
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d0ad      	beq.n	800d708 <_printf_i+0x15c>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	079b      	lsls	r3, r3, #30
 800d7b0:	d413      	bmi.n	800d7da <_printf_i+0x22e>
 800d7b2:	68e0      	ldr	r0, [r4, #12]
 800d7b4:	9b03      	ldr	r3, [sp, #12]
 800d7b6:	4298      	cmp	r0, r3
 800d7b8:	bfb8      	it	lt
 800d7ba:	4618      	movlt	r0, r3
 800d7bc:	e7a6      	b.n	800d70c <_printf_i+0x160>
 800d7be:	2301      	movs	r3, #1
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	4649      	mov	r1, r9
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	47d0      	blx	sl
 800d7c8:	3001      	adds	r0, #1
 800d7ca:	d09d      	beq.n	800d708 <_printf_i+0x15c>
 800d7cc:	3501      	adds	r5, #1
 800d7ce:	68e3      	ldr	r3, [r4, #12]
 800d7d0:	9903      	ldr	r1, [sp, #12]
 800d7d2:	1a5b      	subs	r3, r3, r1
 800d7d4:	42ab      	cmp	r3, r5
 800d7d6:	dcf2      	bgt.n	800d7be <_printf_i+0x212>
 800d7d8:	e7eb      	b.n	800d7b2 <_printf_i+0x206>
 800d7da:	2500      	movs	r5, #0
 800d7dc:	f104 0619 	add.w	r6, r4, #25
 800d7e0:	e7f5      	b.n	800d7ce <_printf_i+0x222>
 800d7e2:	bf00      	nop
 800d7e4:	0800e14d 	.word	0x0800e14d
 800d7e8:	0800e15e 	.word	0x0800e15e

0800d7ec <__sflush_r>:
 800d7ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f4:	0716      	lsls	r6, r2, #28
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	460c      	mov	r4, r1
 800d7fa:	d454      	bmi.n	800d8a6 <__sflush_r+0xba>
 800d7fc:	684b      	ldr	r3, [r1, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	dc02      	bgt.n	800d808 <__sflush_r+0x1c>
 800d802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d804:	2b00      	cmp	r3, #0
 800d806:	dd48      	ble.n	800d89a <__sflush_r+0xae>
 800d808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d80a:	2e00      	cmp	r6, #0
 800d80c:	d045      	beq.n	800d89a <__sflush_r+0xae>
 800d80e:	2300      	movs	r3, #0
 800d810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d814:	682f      	ldr	r7, [r5, #0]
 800d816:	6a21      	ldr	r1, [r4, #32]
 800d818:	602b      	str	r3, [r5, #0]
 800d81a:	d030      	beq.n	800d87e <__sflush_r+0x92>
 800d81c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d81e:	89a3      	ldrh	r3, [r4, #12]
 800d820:	0759      	lsls	r1, r3, #29
 800d822:	d505      	bpl.n	800d830 <__sflush_r+0x44>
 800d824:	6863      	ldr	r3, [r4, #4]
 800d826:	1ad2      	subs	r2, r2, r3
 800d828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d82a:	b10b      	cbz	r3, 800d830 <__sflush_r+0x44>
 800d82c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d82e:	1ad2      	subs	r2, r2, r3
 800d830:	2300      	movs	r3, #0
 800d832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d834:	6a21      	ldr	r1, [r4, #32]
 800d836:	4628      	mov	r0, r5
 800d838:	47b0      	blx	r6
 800d83a:	1c43      	adds	r3, r0, #1
 800d83c:	89a3      	ldrh	r3, [r4, #12]
 800d83e:	d106      	bne.n	800d84e <__sflush_r+0x62>
 800d840:	6829      	ldr	r1, [r5, #0]
 800d842:	291d      	cmp	r1, #29
 800d844:	d82b      	bhi.n	800d89e <__sflush_r+0xb2>
 800d846:	4a2a      	ldr	r2, [pc, #168]	@ (800d8f0 <__sflush_r+0x104>)
 800d848:	410a      	asrs	r2, r1
 800d84a:	07d6      	lsls	r6, r2, #31
 800d84c:	d427      	bmi.n	800d89e <__sflush_r+0xb2>
 800d84e:	2200      	movs	r2, #0
 800d850:	6062      	str	r2, [r4, #4]
 800d852:	04d9      	lsls	r1, r3, #19
 800d854:	6922      	ldr	r2, [r4, #16]
 800d856:	6022      	str	r2, [r4, #0]
 800d858:	d504      	bpl.n	800d864 <__sflush_r+0x78>
 800d85a:	1c42      	adds	r2, r0, #1
 800d85c:	d101      	bne.n	800d862 <__sflush_r+0x76>
 800d85e:	682b      	ldr	r3, [r5, #0]
 800d860:	b903      	cbnz	r3, 800d864 <__sflush_r+0x78>
 800d862:	6560      	str	r0, [r4, #84]	@ 0x54
 800d864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d866:	602f      	str	r7, [r5, #0]
 800d868:	b1b9      	cbz	r1, 800d89a <__sflush_r+0xae>
 800d86a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d86e:	4299      	cmp	r1, r3
 800d870:	d002      	beq.n	800d878 <__sflush_r+0x8c>
 800d872:	4628      	mov	r0, r5
 800d874:	f7ff fca0 	bl	800d1b8 <_free_r>
 800d878:	2300      	movs	r3, #0
 800d87a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d87c:	e00d      	b.n	800d89a <__sflush_r+0xae>
 800d87e:	2301      	movs	r3, #1
 800d880:	4628      	mov	r0, r5
 800d882:	47b0      	blx	r6
 800d884:	4602      	mov	r2, r0
 800d886:	1c50      	adds	r0, r2, #1
 800d888:	d1c9      	bne.n	800d81e <__sflush_r+0x32>
 800d88a:	682b      	ldr	r3, [r5, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d0c6      	beq.n	800d81e <__sflush_r+0x32>
 800d890:	2b1d      	cmp	r3, #29
 800d892:	d001      	beq.n	800d898 <__sflush_r+0xac>
 800d894:	2b16      	cmp	r3, #22
 800d896:	d11e      	bne.n	800d8d6 <__sflush_r+0xea>
 800d898:	602f      	str	r7, [r5, #0]
 800d89a:	2000      	movs	r0, #0
 800d89c:	e022      	b.n	800d8e4 <__sflush_r+0xf8>
 800d89e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8a2:	b21b      	sxth	r3, r3
 800d8a4:	e01b      	b.n	800d8de <__sflush_r+0xf2>
 800d8a6:	690f      	ldr	r7, [r1, #16]
 800d8a8:	2f00      	cmp	r7, #0
 800d8aa:	d0f6      	beq.n	800d89a <__sflush_r+0xae>
 800d8ac:	0793      	lsls	r3, r2, #30
 800d8ae:	680e      	ldr	r6, [r1, #0]
 800d8b0:	bf08      	it	eq
 800d8b2:	694b      	ldreq	r3, [r1, #20]
 800d8b4:	600f      	str	r7, [r1, #0]
 800d8b6:	bf18      	it	ne
 800d8b8:	2300      	movne	r3, #0
 800d8ba:	eba6 0807 	sub.w	r8, r6, r7
 800d8be:	608b      	str	r3, [r1, #8]
 800d8c0:	f1b8 0f00 	cmp.w	r8, #0
 800d8c4:	dde9      	ble.n	800d89a <__sflush_r+0xae>
 800d8c6:	6a21      	ldr	r1, [r4, #32]
 800d8c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8ca:	4643      	mov	r3, r8
 800d8cc:	463a      	mov	r2, r7
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	47b0      	blx	r6
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	dc08      	bgt.n	800d8e8 <__sflush_r+0xfc>
 800d8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8de:	81a3      	strh	r3, [r4, #12]
 800d8e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	4407      	add	r7, r0
 800d8ea:	eba8 0800 	sub.w	r8, r8, r0
 800d8ee:	e7e7      	b.n	800d8c0 <__sflush_r+0xd4>
 800d8f0:	dfbffffe 	.word	0xdfbffffe

0800d8f4 <_fflush_r>:
 800d8f4:	b538      	push	{r3, r4, r5, lr}
 800d8f6:	690b      	ldr	r3, [r1, #16]
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	b913      	cbnz	r3, 800d904 <_fflush_r+0x10>
 800d8fe:	2500      	movs	r5, #0
 800d900:	4628      	mov	r0, r5
 800d902:	bd38      	pop	{r3, r4, r5, pc}
 800d904:	b118      	cbz	r0, 800d90e <_fflush_r+0x1a>
 800d906:	6a03      	ldr	r3, [r0, #32]
 800d908:	b90b      	cbnz	r3, 800d90e <_fflush_r+0x1a>
 800d90a:	f7ff fb4b 	bl	800cfa4 <__sinit>
 800d90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0f3      	beq.n	800d8fe <_fflush_r+0xa>
 800d916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d918:	07d0      	lsls	r0, r2, #31
 800d91a:	d404      	bmi.n	800d926 <_fflush_r+0x32>
 800d91c:	0599      	lsls	r1, r3, #22
 800d91e:	d402      	bmi.n	800d926 <_fflush_r+0x32>
 800d920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d922:	f7ff fc38 	bl	800d196 <__retarget_lock_acquire_recursive>
 800d926:	4628      	mov	r0, r5
 800d928:	4621      	mov	r1, r4
 800d92a:	f7ff ff5f 	bl	800d7ec <__sflush_r>
 800d92e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d930:	07da      	lsls	r2, r3, #31
 800d932:	4605      	mov	r5, r0
 800d934:	d4e4      	bmi.n	800d900 <_fflush_r+0xc>
 800d936:	89a3      	ldrh	r3, [r4, #12]
 800d938:	059b      	lsls	r3, r3, #22
 800d93a:	d4e1      	bmi.n	800d900 <_fflush_r+0xc>
 800d93c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d93e:	f7ff fc2b 	bl	800d198 <__retarget_lock_release_recursive>
 800d942:	e7dd      	b.n	800d900 <_fflush_r+0xc>

0800d944 <__sread>:
 800d944:	b510      	push	{r4, lr}
 800d946:	460c      	mov	r4, r1
 800d948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94c:	f000 f978 	bl	800dc40 <_read_r>
 800d950:	2800      	cmp	r0, #0
 800d952:	bfab      	itete	ge
 800d954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d956:	89a3      	ldrhlt	r3, [r4, #12]
 800d958:	181b      	addge	r3, r3, r0
 800d95a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d95e:	bfac      	ite	ge
 800d960:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d962:	81a3      	strhlt	r3, [r4, #12]
 800d964:	bd10      	pop	{r4, pc}

0800d966 <__swrite>:
 800d966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d96a:	461f      	mov	r7, r3
 800d96c:	898b      	ldrh	r3, [r1, #12]
 800d96e:	05db      	lsls	r3, r3, #23
 800d970:	4605      	mov	r5, r0
 800d972:	460c      	mov	r4, r1
 800d974:	4616      	mov	r6, r2
 800d976:	d505      	bpl.n	800d984 <__swrite+0x1e>
 800d978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d97c:	2302      	movs	r3, #2
 800d97e:	2200      	movs	r2, #0
 800d980:	f000 f94c 	bl	800dc1c <_lseek_r>
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d98a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d98e:	81a3      	strh	r3, [r4, #12]
 800d990:	4632      	mov	r2, r6
 800d992:	463b      	mov	r3, r7
 800d994:	4628      	mov	r0, r5
 800d996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d99a:	f000 b963 	b.w	800dc64 <_write_r>

0800d99e <__sseek>:
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a6:	f000 f939 	bl	800dc1c <_lseek_r>
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	89a3      	ldrh	r3, [r4, #12]
 800d9ae:	bf15      	itete	ne
 800d9b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9ba:	81a3      	strheq	r3, [r4, #12]
 800d9bc:	bf18      	it	ne
 800d9be:	81a3      	strhne	r3, [r4, #12]
 800d9c0:	bd10      	pop	{r4, pc}

0800d9c2 <__sclose>:
 800d9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c6:	f000 b8f7 	b.w	800dbb8 <_close_r>

0800d9ca <__swbuf_r>:
 800d9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9cc:	460e      	mov	r6, r1
 800d9ce:	4614      	mov	r4, r2
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	b118      	cbz	r0, 800d9dc <__swbuf_r+0x12>
 800d9d4:	6a03      	ldr	r3, [r0, #32]
 800d9d6:	b90b      	cbnz	r3, 800d9dc <__swbuf_r+0x12>
 800d9d8:	f7ff fae4 	bl	800cfa4 <__sinit>
 800d9dc:	69a3      	ldr	r3, [r4, #24]
 800d9de:	60a3      	str	r3, [r4, #8]
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	071a      	lsls	r2, r3, #28
 800d9e4:	d501      	bpl.n	800d9ea <__swbuf_r+0x20>
 800d9e6:	6923      	ldr	r3, [r4, #16]
 800d9e8:	b943      	cbnz	r3, 800d9fc <__swbuf_r+0x32>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f000 f82b 	bl	800da48 <__swsetup_r>
 800d9f2:	b118      	cbz	r0, 800d9fc <__swbuf_r+0x32>
 800d9f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	6922      	ldr	r2, [r4, #16]
 800da00:	1a98      	subs	r0, r3, r2
 800da02:	6963      	ldr	r3, [r4, #20]
 800da04:	b2f6      	uxtb	r6, r6
 800da06:	4283      	cmp	r3, r0
 800da08:	4637      	mov	r7, r6
 800da0a:	dc05      	bgt.n	800da18 <__swbuf_r+0x4e>
 800da0c:	4621      	mov	r1, r4
 800da0e:	4628      	mov	r0, r5
 800da10:	f7ff ff70 	bl	800d8f4 <_fflush_r>
 800da14:	2800      	cmp	r0, #0
 800da16:	d1ed      	bne.n	800d9f4 <__swbuf_r+0x2a>
 800da18:	68a3      	ldr	r3, [r4, #8]
 800da1a:	3b01      	subs	r3, #1
 800da1c:	60a3      	str	r3, [r4, #8]
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	1c5a      	adds	r2, r3, #1
 800da22:	6022      	str	r2, [r4, #0]
 800da24:	701e      	strb	r6, [r3, #0]
 800da26:	6962      	ldr	r2, [r4, #20]
 800da28:	1c43      	adds	r3, r0, #1
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d004      	beq.n	800da38 <__swbuf_r+0x6e>
 800da2e:	89a3      	ldrh	r3, [r4, #12]
 800da30:	07db      	lsls	r3, r3, #31
 800da32:	d5e1      	bpl.n	800d9f8 <__swbuf_r+0x2e>
 800da34:	2e0a      	cmp	r6, #10
 800da36:	d1df      	bne.n	800d9f8 <__swbuf_r+0x2e>
 800da38:	4621      	mov	r1, r4
 800da3a:	4628      	mov	r0, r5
 800da3c:	f7ff ff5a 	bl	800d8f4 <_fflush_r>
 800da40:	2800      	cmp	r0, #0
 800da42:	d0d9      	beq.n	800d9f8 <__swbuf_r+0x2e>
 800da44:	e7d6      	b.n	800d9f4 <__swbuf_r+0x2a>
	...

0800da48 <__swsetup_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4b29      	ldr	r3, [pc, #164]	@ (800daf0 <__swsetup_r+0xa8>)
 800da4c:	4605      	mov	r5, r0
 800da4e:	6818      	ldr	r0, [r3, #0]
 800da50:	460c      	mov	r4, r1
 800da52:	b118      	cbz	r0, 800da5c <__swsetup_r+0x14>
 800da54:	6a03      	ldr	r3, [r0, #32]
 800da56:	b90b      	cbnz	r3, 800da5c <__swsetup_r+0x14>
 800da58:	f7ff faa4 	bl	800cfa4 <__sinit>
 800da5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da60:	0719      	lsls	r1, r3, #28
 800da62:	d422      	bmi.n	800daaa <__swsetup_r+0x62>
 800da64:	06da      	lsls	r2, r3, #27
 800da66:	d407      	bmi.n	800da78 <__swsetup_r+0x30>
 800da68:	2209      	movs	r2, #9
 800da6a:	602a      	str	r2, [r5, #0]
 800da6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da70:	81a3      	strh	r3, [r4, #12]
 800da72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da76:	e033      	b.n	800dae0 <__swsetup_r+0x98>
 800da78:	0758      	lsls	r0, r3, #29
 800da7a:	d512      	bpl.n	800daa2 <__swsetup_r+0x5a>
 800da7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da7e:	b141      	cbz	r1, 800da92 <__swsetup_r+0x4a>
 800da80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da84:	4299      	cmp	r1, r3
 800da86:	d002      	beq.n	800da8e <__swsetup_r+0x46>
 800da88:	4628      	mov	r0, r5
 800da8a:	f7ff fb95 	bl	800d1b8 <_free_r>
 800da8e:	2300      	movs	r3, #0
 800da90:	6363      	str	r3, [r4, #52]	@ 0x34
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da98:	81a3      	strh	r3, [r4, #12]
 800da9a:	2300      	movs	r3, #0
 800da9c:	6063      	str	r3, [r4, #4]
 800da9e:	6923      	ldr	r3, [r4, #16]
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	89a3      	ldrh	r3, [r4, #12]
 800daa4:	f043 0308 	orr.w	r3, r3, #8
 800daa8:	81a3      	strh	r3, [r4, #12]
 800daaa:	6923      	ldr	r3, [r4, #16]
 800daac:	b94b      	cbnz	r3, 800dac2 <__swsetup_r+0x7a>
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dab8:	d003      	beq.n	800dac2 <__swsetup_r+0x7a>
 800daba:	4621      	mov	r1, r4
 800dabc:	4628      	mov	r0, r5
 800dabe:	f000 f83f 	bl	800db40 <__smakebuf_r>
 800dac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dac6:	f013 0201 	ands.w	r2, r3, #1
 800daca:	d00a      	beq.n	800dae2 <__swsetup_r+0x9a>
 800dacc:	2200      	movs	r2, #0
 800dace:	60a2      	str	r2, [r4, #8]
 800dad0:	6962      	ldr	r2, [r4, #20]
 800dad2:	4252      	negs	r2, r2
 800dad4:	61a2      	str	r2, [r4, #24]
 800dad6:	6922      	ldr	r2, [r4, #16]
 800dad8:	b942      	cbnz	r2, 800daec <__swsetup_r+0xa4>
 800dada:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dade:	d1c5      	bne.n	800da6c <__swsetup_r+0x24>
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	0799      	lsls	r1, r3, #30
 800dae4:	bf58      	it	pl
 800dae6:	6962      	ldrpl	r2, [r4, #20]
 800dae8:	60a2      	str	r2, [r4, #8]
 800daea:	e7f4      	b.n	800dad6 <__swsetup_r+0x8e>
 800daec:	2000      	movs	r0, #0
 800daee:	e7f7      	b.n	800dae0 <__swsetup_r+0x98>
 800daf0:	20000568 	.word	0x20000568

0800daf4 <__swhatbuf_r>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	460c      	mov	r4, r1
 800daf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dafc:	2900      	cmp	r1, #0
 800dafe:	b096      	sub	sp, #88	@ 0x58
 800db00:	4615      	mov	r5, r2
 800db02:	461e      	mov	r6, r3
 800db04:	da0d      	bge.n	800db22 <__swhatbuf_r+0x2e>
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db0c:	f04f 0100 	mov.w	r1, #0
 800db10:	bf14      	ite	ne
 800db12:	2340      	movne	r3, #64	@ 0x40
 800db14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db18:	2000      	movs	r0, #0
 800db1a:	6031      	str	r1, [r6, #0]
 800db1c:	602b      	str	r3, [r5, #0]
 800db1e:	b016      	add	sp, #88	@ 0x58
 800db20:	bd70      	pop	{r4, r5, r6, pc}
 800db22:	466a      	mov	r2, sp
 800db24:	f000 f858 	bl	800dbd8 <_fstat_r>
 800db28:	2800      	cmp	r0, #0
 800db2a:	dbec      	blt.n	800db06 <__swhatbuf_r+0x12>
 800db2c:	9901      	ldr	r1, [sp, #4]
 800db2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db36:	4259      	negs	r1, r3
 800db38:	4159      	adcs	r1, r3
 800db3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db3e:	e7eb      	b.n	800db18 <__swhatbuf_r+0x24>

0800db40 <__smakebuf_r>:
 800db40:	898b      	ldrh	r3, [r1, #12]
 800db42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db44:	079d      	lsls	r5, r3, #30
 800db46:	4606      	mov	r6, r0
 800db48:	460c      	mov	r4, r1
 800db4a:	d507      	bpl.n	800db5c <__smakebuf_r+0x1c>
 800db4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	6123      	str	r3, [r4, #16]
 800db54:	2301      	movs	r3, #1
 800db56:	6163      	str	r3, [r4, #20]
 800db58:	b003      	add	sp, #12
 800db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db5c:	ab01      	add	r3, sp, #4
 800db5e:	466a      	mov	r2, sp
 800db60:	f7ff ffc8 	bl	800daf4 <__swhatbuf_r>
 800db64:	9f00      	ldr	r7, [sp, #0]
 800db66:	4605      	mov	r5, r0
 800db68:	4639      	mov	r1, r7
 800db6a:	4630      	mov	r0, r6
 800db6c:	f7ff f902 	bl	800cd74 <_malloc_r>
 800db70:	b948      	cbnz	r0, 800db86 <__smakebuf_r+0x46>
 800db72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db76:	059a      	lsls	r2, r3, #22
 800db78:	d4ee      	bmi.n	800db58 <__smakebuf_r+0x18>
 800db7a:	f023 0303 	bic.w	r3, r3, #3
 800db7e:	f043 0302 	orr.w	r3, r3, #2
 800db82:	81a3      	strh	r3, [r4, #12]
 800db84:	e7e2      	b.n	800db4c <__smakebuf_r+0xc>
 800db86:	89a3      	ldrh	r3, [r4, #12]
 800db88:	6020      	str	r0, [r4, #0]
 800db8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db8e:	81a3      	strh	r3, [r4, #12]
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db96:	b15b      	cbz	r3, 800dbb0 <__smakebuf_r+0x70>
 800db98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db9c:	4630      	mov	r0, r6
 800db9e:	f000 f82d 	bl	800dbfc <_isatty_r>
 800dba2:	b128      	cbz	r0, 800dbb0 <__smakebuf_r+0x70>
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	f023 0303 	bic.w	r3, r3, #3
 800dbaa:	f043 0301 	orr.w	r3, r3, #1
 800dbae:	81a3      	strh	r3, [r4, #12]
 800dbb0:	89a3      	ldrh	r3, [r4, #12]
 800dbb2:	431d      	orrs	r5, r3
 800dbb4:	81a5      	strh	r5, [r4, #12]
 800dbb6:	e7cf      	b.n	800db58 <__smakebuf_r+0x18>

0800dbb8 <_close_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	4d06      	ldr	r5, [pc, #24]	@ (800dbd4 <_close_r+0x1c>)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4608      	mov	r0, r1
 800dbc2:	602b      	str	r3, [r5, #0]
 800dbc4:	f7f9 f83d 	bl	8006c42 <_close>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d102      	bne.n	800dbd2 <_close_r+0x1a>
 800dbcc:	682b      	ldr	r3, [r5, #0]
 800dbce:	b103      	cbz	r3, 800dbd2 <_close_r+0x1a>
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	2000134c 	.word	0x2000134c

0800dbd8 <_fstat_r>:
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4d07      	ldr	r5, [pc, #28]	@ (800dbf8 <_fstat_r+0x20>)
 800dbdc:	2300      	movs	r3, #0
 800dbde:	4604      	mov	r4, r0
 800dbe0:	4608      	mov	r0, r1
 800dbe2:	4611      	mov	r1, r2
 800dbe4:	602b      	str	r3, [r5, #0]
 800dbe6:	f7f9 f838 	bl	8006c5a <_fstat>
 800dbea:	1c43      	adds	r3, r0, #1
 800dbec:	d102      	bne.n	800dbf4 <_fstat_r+0x1c>
 800dbee:	682b      	ldr	r3, [r5, #0]
 800dbf0:	b103      	cbz	r3, 800dbf4 <_fstat_r+0x1c>
 800dbf2:	6023      	str	r3, [r4, #0]
 800dbf4:	bd38      	pop	{r3, r4, r5, pc}
 800dbf6:	bf00      	nop
 800dbf8:	2000134c 	.word	0x2000134c

0800dbfc <_isatty_r>:
 800dbfc:	b538      	push	{r3, r4, r5, lr}
 800dbfe:	4d06      	ldr	r5, [pc, #24]	@ (800dc18 <_isatty_r+0x1c>)
 800dc00:	2300      	movs	r3, #0
 800dc02:	4604      	mov	r4, r0
 800dc04:	4608      	mov	r0, r1
 800dc06:	602b      	str	r3, [r5, #0]
 800dc08:	f7f9 f837 	bl	8006c7a <_isatty>
 800dc0c:	1c43      	adds	r3, r0, #1
 800dc0e:	d102      	bne.n	800dc16 <_isatty_r+0x1a>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	b103      	cbz	r3, 800dc16 <_isatty_r+0x1a>
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	2000134c 	.word	0x2000134c

0800dc1c <_lseek_r>:
 800dc1c:	b538      	push	{r3, r4, r5, lr}
 800dc1e:	4d07      	ldr	r5, [pc, #28]	@ (800dc3c <_lseek_r+0x20>)
 800dc20:	4604      	mov	r4, r0
 800dc22:	4608      	mov	r0, r1
 800dc24:	4611      	mov	r1, r2
 800dc26:	2200      	movs	r2, #0
 800dc28:	602a      	str	r2, [r5, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	f7f9 f830 	bl	8006c90 <_lseek>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d102      	bne.n	800dc3a <_lseek_r+0x1e>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b103      	cbz	r3, 800dc3a <_lseek_r+0x1e>
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	2000134c 	.word	0x2000134c

0800dc40 <_read_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4d07      	ldr	r5, [pc, #28]	@ (800dc60 <_read_r+0x20>)
 800dc44:	4604      	mov	r4, r0
 800dc46:	4608      	mov	r0, r1
 800dc48:	4611      	mov	r1, r2
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	602a      	str	r2, [r5, #0]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f7f8 ffbe 	bl	8006bd0 <_read>
 800dc54:	1c43      	adds	r3, r0, #1
 800dc56:	d102      	bne.n	800dc5e <_read_r+0x1e>
 800dc58:	682b      	ldr	r3, [r5, #0]
 800dc5a:	b103      	cbz	r3, 800dc5e <_read_r+0x1e>
 800dc5c:	6023      	str	r3, [r4, #0]
 800dc5e:	bd38      	pop	{r3, r4, r5, pc}
 800dc60:	2000134c 	.word	0x2000134c

0800dc64 <_write_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d07      	ldr	r5, [pc, #28]	@ (800dc84 <_write_r+0x20>)
 800dc68:	4604      	mov	r4, r0
 800dc6a:	4608      	mov	r0, r1
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	602a      	str	r2, [r5, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	f7f8 ffc9 	bl	8006c0a <_write>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d102      	bne.n	800dc82 <_write_r+0x1e>
 800dc7c:	682b      	ldr	r3, [r5, #0]
 800dc7e:	b103      	cbz	r3, 800dc82 <_write_r+0x1e>
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	bd38      	pop	{r3, r4, r5, pc}
 800dc84:	2000134c 	.word	0x2000134c

0800dc88 <_init>:
 800dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8a:	bf00      	nop
 800dc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc8e:	bc08      	pop	{r3}
 800dc90:	469e      	mov	lr, r3
 800dc92:	4770      	bx	lr

0800dc94 <_fini>:
 800dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc96:	bf00      	nop
 800dc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc9a:	bc08      	pop	{r3}
 800dc9c:	469e      	mov	lr, r3
 800dc9e:	4770      	bx	lr
