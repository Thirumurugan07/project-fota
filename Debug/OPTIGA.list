
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f210  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800f3b0  0800f3b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f814  0800f814  000115bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f814  0800f814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f81c  0800f81c  000115bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f81c  0800f81c  0001081c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f820  0800f820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005bc  20000000  0800f824  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  200005bc  0800fde0  000115bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f20  0800fde0  00011f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000115bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f692  00000000  00000000  000115ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3f  00000000  00000000  00030c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143b  00000000  00000000  00037110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000072ab  00000000  00000000  0003854b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f00  00000000  00000000  0003f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db21  00000000  00000000  000626f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000744c  00000000  00000000  0010025c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001076a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005bc 	.word	0x200005bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f398 	.word	0x0800f398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c0 	.word	0x200005c0
 80001dc:	0800f398 	.word	0x0800f398

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000578:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800057c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000584:	2b03      	cmp	r3, #3
 8000586:	d027      	beq.n	80005d8 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2200      	movs	r2, #0
 8000596:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	d818      	bhi.n	80005d6 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	22b1      	movs	r2, #177	@ 0xb1
 80005a8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2201      	movs	r2, #1
 80005b8:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f8f5 	bl	80007ac <ifx_i2c_init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 80005c6:	89fb      	ldrh	r3, [r7, #14]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d105      	bne.n	80005d8 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2203      	movs	r2, #3
 80005d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80005d4:	e000      	b.n	80005d8 <ifx_i2c_open+0x68>
                break;
 80005d6:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 80005d8:	89fb      	ldrh	r3, [r7, #14]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b088      	sub	sp, #32
 80005e6:	af02      	add	r7, sp, #8
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4613      	mov	r3, r2
 80005f0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80005f2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80005f6:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d122      	bne.n	8000648 <ifx_i2c_transceive+0x66>
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000608:	2b03      	cmp	r3, #3
 800060a:	d01d      	beq.n	8000648 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6a3a      	ldr	r2, [r7, #32]
 8000618:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 800061c:	88fa      	ldrh	r2, [r7, #6]
 800061e:	6a3b      	ldr	r3, [r7, #32]
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f001 fb00 	bl	8001c2c <ifx_i2c_prl_transceive>
 800062c:	4603      	mov	r3, r0
 800062e:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000630:	8afb      	ldrh	r3, [r7, #22]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d108      	bne.n	8000648 <ifx_i2c_transceive+0x66>
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2203      	movs	r2, #3
 8000644:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000648:	8afb      	ldrh	r3, [r7, #22]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800065c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000660:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000668:	2b03      	cmp	r3, #3
 800066a:	d02a      	beq.n	80006c2 <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 800066c:	2300      	movs	r3, #0
 800066e:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000676:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2201      	movs	r2, #1
 800067e:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000682:	4912      	ldr	r1, [pc, #72]	@ (80006cc <ifx_i2c_close+0x78>)
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f001 fa8f 	bl	8001ba8 <ifx_i2c_prl_close>
 800068a:	4603      	mov	r3, r0
 800068c:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 800068e:	89fb      	ldrh	r3, [r7, #14]
 8000690:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000694:	d115      	bne.n	80006c2 <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800069c:	4618      	mov	r0, r3
 800069e:	f005 ff06 	bl	80064ae <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fea0 	bl	80063ee <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fe9a 	bl	80063ee <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2204      	movs	r2, #4
 80006be:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 80006c2:	89fb      	ldrh	r3, [r7, #14]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08000739 	.word	0x08000739

080006d0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	461a      	mov	r2, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	817b      	strh	r3, [r7, #10]
 80006e0:	4613      	mov	r3, r2
 80006e2:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 80006fa:	8979      	ldrh	r1, [r7, #10]
 80006fc:	4610      	mov	r0, r2
 80006fe:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	897a      	ldrh	r2, [r7, #10]
 8000704:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2204      	movs	r2, #4
 800070c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000716:	2b01      	cmp	r3, #1
 8000718:	d107      	bne.n	800072a <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 800071a:	897b      	ldrh	r3, [r7, #10]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d106      	bne.n	800072e <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2202      	movs	r2, #2
 8000724:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000728:	e001      	b.n	800072e <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 800072a:	bf00      	nop
 800072c:	e000      	b.n	8000730 <ifx_i2c_tl_event_handler+0x60>
            break;
 800072e:	bf00      	nop
    }
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	460b      	mov	r3, r1
 8000746:	817b      	strh	r3, [r7, #10]
 8000748:	4613      	mov	r3, r2
 800074a:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2204      	movs	r2, #4
 8000750:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 800075a:	2b01      	cmp	r3, #1
 800075c:	d112      	bne.n	8000784 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000764:	4618      	mov	r0, r3
 8000766:	f005 fea2 	bl	80064ae <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000770:	4618      	mov	r0, r3
 8000772:	f005 fe3c 	bl	80063ee <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 800077c:	4618      	mov	r0, r3
 800077e:	f005 fe36 	bl	80063ee <pal_gpio_set_low>
            break;
 8000782:	e000      	b.n	8000786 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000784:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 800079c:	8979      	ldrh	r1, [r7, #10]
 800079e:	4610      	mov	r0, r2
 80007a0:	4798      	blx	r3
    }
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 80007b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007b8:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d004      	beq.n	80007ce <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d156      	bne.n	800087c <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80007d4:	2bb3      	cmp	r3, #179	@ 0xb3
 80007d6:	d048      	beq.n	800086a <ifx_i2c_init+0xbe>
 80007d8:	2bb3      	cmp	r3, #179	@ 0xb3
 80007da:	dc4d      	bgt.n	8000878 <ifx_i2c_init+0xcc>
 80007dc:	2bb1      	cmp	r3, #177	@ 0xb1
 80007de:	d002      	beq.n	80007e6 <ifx_i2c_init+0x3a>
 80007e0:	2bb2      	cmp	r3, #178	@ 0xb2
 80007e2:	d021      	beq.n	8000828 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 80007e4:	e048      	b.n	8000878 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80007f6:	4618      	mov	r0, r3
 80007f8:	f005 fdf9 	bl	80063ee <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000802:	4618      	mov	r0, r3
 8000804:	f005 fdf3 	bl	80063ee <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	22b2      	movs	r2, #178	@ 0xb2
 800080c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000816:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4923      	ldr	r1, [pc, #140]	@ (80008ac <ifx_i2c_init+0x100>)
 800081e:	f006 f81f 	bl	8006860 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000822:	2300      	movs	r3, #0
 8000824:	81fb      	strh	r3, [r7, #14]
                break;
 8000826:	e028      	b.n	800087a <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 800082e:	2b00      	cmp	r3, #0
 8000830:	d105      	bne.n	800083e <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fdc8 	bl	80063ce <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000844:	4618      	mov	r0, r3
 8000846:	f005 fdc2 	bl	80063ce <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	22b3      	movs	r2, #179	@ 0xb3
 800084e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000858:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4913      	ldr	r1, [pc, #76]	@ (80008ac <ifx_i2c_init+0x100>)
 8000860:	f005 fffe 	bl	8006860 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000864:	2300      	movs	r3, #0
 8000866:	81fb      	strh	r3, [r7, #14]
                break;
 8000868:	e007      	b.n	800087a <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800086a:	4911      	ldr	r1, [pc, #68]	@ (80008b0 <ifx_i2c_init+0x104>)
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f001 f953 	bl	8001b18 <ifx_i2c_prl_init>
 8000872:	4603      	mov	r3, r0
 8000874:	81fb      	strh	r3, [r7, #14]
                break;
 8000876:	e000      	b.n	800087a <ifx_i2c_init+0xce>
                break;
 8000878:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 800087a:	e009      	b.n	8000890 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2201      	movs	r2, #1
 8000880:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000884:	490a      	ldr	r1, [pc, #40]	@ (80008b0 <ifx_i2c_init+0x104>)
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f001 f946 	bl	8001b18 <ifx_i2c_prl_init>
 800088c:	4603      	mov	r3, r0
 800088e:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d005      	beq.n	80008a2 <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000896:	89f9      	ldrh	r1, [r7, #14]
 8000898:	2300      	movs	r3, #0
 800089a:	2200      	movs	r2, #0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff17 	bl	80006d0 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 80008a2:	89fb      	ldrh	r3, [r7, #14]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	080007ad 	.word	0x080007ad
 80008b0:	080006d1 	.word	0x080006d1

080008b4 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 80008c6:	4919      	ldr	r1, [pc, #100]	@ (800092c <ifx_i2c_dl_init+0x78>)
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fc37 	bl	800113c <ifx_i2c_pl_init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 80008d4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80008d8:	e024      	b.n	8000924 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2203      	movs	r2, #3
 80008ee:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2203      	movs	r2, #3
 80008f6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000922:	2300      	movs	r3, #0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	08000cd1 	.word	0x08000cd1

08000930 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <ifx_i2c_dl_send_frame+0x1c>
 8000946:	887b      	ldrh	r3, [r7, #2]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800094c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000950:	e01a      	b.n	8000988 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2202      	movs	r2, #2
 8000956:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	220a      	movs	r2, #10
 8000976:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 800097a:	8879      	ldrh	r1, [r7, #2]
 800097c:	2300      	movs	r3, #0
 800097e:	2200      	movs	r2, #0
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 f88a 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
 8000986:	4603      	mov	r3, r0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d002      	beq.n	80009a8 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 80009a2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80009a6:	e019      	b.n	80009dc <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2203      	movs	r2, #3
 80009ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2201      	movs	r2, #1
 80009bc:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 80009c0:	f006 f803 	bl	80069ca <pal_os_timer_get_time_in_milliseconds>
 80009c4:	4602      	mov	r2, r0
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <ifx_i2c_dl_receive_frame+0x54>)
 80009d0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 fc2a 	bl	800122e <ifx_i2c_pl_receive_frame>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0002bf20 	.word	0x0002bf20

080009e8 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	80fb      	strh	r3, [r7, #6]
 80009f4:	4613      	mov	r3, r2
 80009f6:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 80009f8:	797b      	ldrb	r3, [r7, #5]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	4053      	eors	r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000a0e:	89bb      	ldrh	r3, [r7, #12]
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	4053      	eors	r3, r2
 8000a18:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000a1a:	897b      	ldrh	r3, [r7, #10]
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000a20:	897b      	ldrh	r3, [r7, #10]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	893b      	ldrh	r3, [r7, #8]
 8000a28:	4053      	eors	r3, r2
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	4053      	eors	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	4053      	eors	r3, r2
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	0a1b      	lsrs	r3, r3, #8
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4053      	eors	r3, r2
 8000a48:	b29b      	uxth	r3, r3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	81fb      	strh	r3, [r7, #14]
 8000a6a:	e00d      	b.n	8000a88 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	89bb      	ldrh	r3, [r7, #12]
 8000a76:	4611      	mov	r1, r2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ffb5 	bl	80009e8 <ifx_i2c_dl_calc_crc_byte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000a82:	89fb      	ldrh	r3, [r7, #14]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	89fa      	ldrh	r2, [r7, #14]
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d3ed      	bcc.n	8000a6c <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000a90:	89bb      	ldrh	r3, [r7, #12]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	807b      	strh	r3, [r7, #2]
 8000aac:	460b      	mov	r3, r1
 8000aae:	707b      	strb	r3, [r7, #1]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000aba:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d107      	bne.n	8000ad2 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000ad8:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000ada:	787b      	ldrb	r3, [r7, #1]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d105      	bne.n	8000aec <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000aea:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d108      	bne.n	8000b04 <ifx_i2c_dl_send_frame_internal+0x6a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000af8:	2b09      	cmp	r3, #9
 8000afa:	d103      	bne.n	8000b04 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000b02:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8000b04:	8afb      	ldrh	r3, [r7, #22]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	787b      	ldrb	r3, [r7, #1]
 8000b12:	015b      	lsls	r3, r3, #5
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d022      	beq.n	8000b6a <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8000b24:	783b      	ldrb	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <ifx_i2c_dl_send_frame_internal+0x9a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00a      	beq.n	8000b4a <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0303 	and.w	r3, r3, #3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8000b68:	e006      	b.n	8000b78 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	3301      	adds	r3, #1
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	3303      	adds	r3, #3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	6938      	ldr	r0, [r7, #16]
 8000b9a:	f7ff ff5c 	bl	8000a56 <ifx_i2c_dl_calc_crc>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8000ba2:	89fb      	ldrh	r3, [r7, #14]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	3303      	adds	r3, #3
 8000bac:	4619      	mov	r1, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	461a      	mov	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	89fa      	ldrh	r2, [r7, #14]
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	3305      	adds	r3, #5
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	461a      	mov	r2, r3
 8000bce:	6939      	ldr	r1, [r7, #16]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 fb03 	bl	80011dc <ifx_i2c_pl_send_frame>
 8000bd6:	4603      	mov	r3, r0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2205      	movs	r2, #5
 8000c04:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ff43 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
 8000c14:	4603      	mov	r3, r0
 8000c16:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8000c18:	89fb      	ldrh	r3, [r7, #14]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8000c30:	f005 fecb 	bl	80069ca <pal_os_timer_get_time_in_milliseconds>
 8000c34:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d205      	bcs.n	8000c5a <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <ifx_i2c_dl_resend_frame+0xa8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d82c      	bhi.n	8000cbc <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d109      	bne.n	8000c80 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffb3 	bl	8000be0 <ifx_i2c_dl_resync>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	82fb      	strh	r3, [r7, #22]
 8000c7e:	e015      	b.n	8000cac <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2202      	movs	r2, #2
 8000c94:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fef9 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8000cac:	8afb      	ldrh	r3, [r7, #22]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2206      	movs	r2, #6
 8000cb6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8000cba:	e003      	b.n	8000cc4 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	0002bf1f 	.word	0x0002bf1f

08000cd0 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	460b      	mov	r3, r1
 8000cde:	817b      	strh	r3, [r7, #10]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8000d08:	897b      	ldrh	r3, [r7, #10]
 8000d0a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000d0e:	d108      	bne.n	8000d22 <ifx_i2c_pl_event_handler+0x52>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d003      	beq.n	8000d22 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	2b0a      	cmp	r3, #10
 8000d2c:	f200 81ed 	bhi.w	800110a <ifx_i2c_pl_event_handler+0x43a>
 8000d30:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <ifx_i2c_pl_event_handler+0x68>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d65 	.word	0x08000d65
 8000d3c:	08000d8b 	.word	0x08000d8b
 8000d40:	08000dcd 	.word	0x08000dcd
 8000d44:	0800101f 	.word	0x0800101f
 8000d48:	080010a1 	.word	0x080010a1
 8000d4c:	08001087 	.word	0x08001087
 8000d50:	0800110b 	.word	0x0800110b
 8000d54:	080010b9 	.word	0x080010b9
 8000d58:	0800100b 	.word	0x0800100b
 8000d5c:	08000e79 	.word	0x08000e79
 8000d60:	08000f49 	.word	0x08000f49
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <ifx_i2c_pl_event_handler+0x9e>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <ifx_i2c_pl_event_handler+0xa0>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000d7c:	7cfb      	ldrb	r3, [r7, #19]
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	2300      	movs	r3, #0
 8000d82:	2200      	movs	r2, #0
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	47a0      	blx	r4
            }
            break;
 8000d88:	e1cf      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8000d8a:	897b      	ldrh	r3, [r7, #10]
 8000d8c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000d90:	d104      	bne.n	8000d9c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2205      	movs	r2, #5
 8000d96:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000d9a:	e1c6      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000d9c:	f005 fe15 	bl	80069ca <pal_os_timer_get_time_in_milliseconds>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2203      	movs	r2, #3
 8000dac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 fa3c 	bl	800122e <ifx_i2c_pl_receive_frame>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d004      	beq.n	8000dc6 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8000dc4:	e1b1      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	773b      	strb	r3, [r7, #28]
            break;
 8000dca:	e1ae      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8000dcc:	897b      	ldrh	r3, [r7, #10]
 8000dce:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000dd2:	d104      	bne.n	8000dde <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ddc:	e1a5      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8000dde:	893b      	ldrh	r3, [r7, #8]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d804      	bhi.n	8000dee <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2206      	movs	r2, #6
 8000de8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000dec:	e19d      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8000df4:	7d7b      	ldrb	r3, [r7, #21]
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8000dfa:	7d7b      	ldrb	r3, [r7, #21]
 8000dfc:	115b      	asrs	r3, r3, #5
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8000e0e:	7d7b      	ldrb	r3, [r7, #21]
 8000e10:	109b      	asrs	r3, r3, #2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3302      	adds	r3, #2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21b      	sxth	r3, r3
 8000e30:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8000e32:	893b      	ldrh	r3, [r7, #8]
 8000e34:	3b02      	subs	r3, #2
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	893b      	ldrh	r3, [r7, #8]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	440b      	add	r3, r1
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b21b      	sxth	r3, r3
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	b21b      	sxth	r3, r3
 8000e50:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8000e52:	893b      	ldrh	r3, [r7, #8]
 8000e54:	3b02      	subs	r3, #2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fdfb 	bl	8000a56 <ifx_i2c_dl_calc_crc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8000e64:	7d3b      	ldrb	r3, [r7, #20]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <ifx_i2c_pl_event_handler+0x19e>
 8000e6a:	220b      	movs	r2, #11
 8000e6c:	e000      	b.n	8000e70 <ifx_i2c_pl_event_handler+0x1a0>
 8000e6e:	220a      	movs	r2, #10
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8000e76:	e158      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000e78:	8b3a      	ldrh	r2, [r7, #24]
 8000e7a:	8afb      	ldrh	r3, [r7, #22]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d10d      	bne.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
 8000e80:	8b7b      	ldrh	r3, [r7, #26]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00a      	beq.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000e86:	893a      	ldrh	r2, [r7, #8]
 8000e88:	8b7b      	ldrh	r3, [r7, #26]
 8000e8a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d105      	bne.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000e90:	7f7b      	ldrb	r3, [r7, #29]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d002      	beq.n	8000e9c <ifx_i2c_pl_event_handler+0x1cc>
 8000e96:	7f7b      	ldrb	r3, [r7, #29]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d104      	bne.n	8000ea6 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ea4:	e141      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8000ea6:	7ffa      	ldrb	r2, [r7, #31]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d00c      	beq.n	8000ed2 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2209      	movs	r2, #9
 8000ebc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff fde5 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
                    break;
 8000ed0:	e12b      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000ed8:	7fba      	ldrb	r2, [r7, #30]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d004      	beq.n	8000ee8 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2209      	movs	r2, #9
 8000ee2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ee6:	e120      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8000ee8:	7f7b      	ldrb	r3, [r7, #29]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ef6:	e118      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000efe:	3301      	adds	r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000f14:	893a      	ldrh	r2, [r7, #8]
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f00d fcc6 	bl	800e8aa <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	893a      	ldrh	r2, [r7, #8]
 8000f22:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2204      	movs	r2, #4
 8000f32:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fdaa 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8000f46:	e0f0      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7f7b      	ldrb	r3, [r7, #29]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d004      	beq.n	8000f6a <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2209      	movs	r2, #9
 8000f64:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f68:	e0df      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 8000f6a:	8b3a      	ldrh	r2, [r7, #24]
 8000f6c:	8afb      	ldrh	r3, [r7, #22]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d004      	beq.n	8000f7c <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2205      	movs	r2, #5
 8000f76:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f7a:	e0d6      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8000f7c:	893b      	ldrh	r3, [r7, #8]
 8000f7e:	2b05      	cmp	r3, #5
 8000f80:	d802      	bhi.n	8000f88 <ifx_i2c_pl_event_handler+0x2b8>
 8000f82:	8b7b      	ldrh	r3, [r7, #26]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2209      	movs	r2, #9
 8000f8c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f90:	e0cb      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8000f92:	7f7b      	ldrb	r3, [r7, #29]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d110      	bne.n	8000fba <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2203      	movs	r2, #3
 8000fac:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 8000fb8:	e0b7      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d108      	bne.n	8000fd2 <ifx_i2c_pl_event_handler+0x302>
 8000fc0:	7f7b      	ldrb	r3, [r7, #29]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d005      	beq.n	8000fd2 <ifx_i2c_pl_event_handler+0x302>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000fcc:	7fba      	ldrb	r2, [r7, #30]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d004      	beq.n	8000fdc <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2209      	movs	r2, #9
 8000fd6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000fda:	e0a6      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8000fdc:	7f7b      	ldrb	r3, [r7, #29]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d104      	bne.n	8000fec <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000fea:	e09e      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	2102      	movs	r1, #2
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	47a0      	blx	r4
            }
            break;
 8001008:	e08f      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2203      	movs	r2, #3
 800100e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001012:	2300      	movs	r3, #0
 8001014:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f000 f909 	bl	800122e <ifx_i2c_pl_receive_frame>
            }
            break;
 800101c:	e085      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800101e:	897b      	ldrh	r3, [r7, #10]
 8001020:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001024:	d104      	bne.n	8001030 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2205      	movs	r2, #5
 800102a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800102e:	e07c      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001038:	2300      	movs	r3, #0
 800103a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00f      	beq.n	8001066 <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001052:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800105a:	3b05      	subs	r3, #5
 800105c:	b29b      	uxth	r3, r3
 800105e:	2104      	movs	r1, #4
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001064:	e061      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001072:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800107a:	3b05      	subs	r3, #5
 800107c:	b29b      	uxth	r3, r3
 800107e:	2106      	movs	r1, #6
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	47a0      	blx	r4
            break;
 8001084:	e051      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2202      	movs	r2, #2
 800108a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800108e:	2300      	movs	r3, #0
 8001090:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001092:	2300      	movs	r3, #0
 8001094:	2201      	movs	r2, #1
 8001096:	2100      	movs	r1, #0
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f7ff fcfe 	bl	8000a9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800109e:	e044      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 80010a0:	2100      	movs	r1, #0
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff fdbe 	bl	8000c24 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d03a      	beq.n	8001128 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 80010b6:	e037      	b.n	8001128 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10c      	bne.n	80010ee <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	47a0      	blx	r4
 80010ec:	e00a      	b.n	8001104 <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fd76 	bl	8000be0 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2208      	movs	r2, #8
 80010f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 8001104:	2300      	movs	r3, #0
 8001106:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001108:	e00f      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001118:	2300      	movs	r3, #0
 800111a:	2200      	movs	r2, #0
 800111c:	2101      	movs	r1, #1
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	47a0      	blx	r4
                continue_state_machine = FALSE;
 8001122:	2300      	movs	r3, #0
 8001124:	773b      	strb	r3, [r7, #28]
                break;
 8001126:	e000      	b.n	800112a <ifx_i2c_pl_event_handler+0x45a>
            break;
 8001128:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 800112a:	7f3b      	ldrb	r3, [r7, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	f43f adeb 	beq.w	8000d08 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	@ 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}

0800113c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	22bb      	movs	r2, #187	@ 0xbb
 800115a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800116a:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001172:	4a19      	ldr	r2, [pc, #100]	@ (80011d8 <ifx_i2c_pl_init+0x9c>)
 8001174:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	22c8      	movs	r2, #200	@ 0xc8
 800117a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10b      	bne.n	80011a0 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800118e:	4618      	mov	r0, r3
 8001190:	f005 f982 	bl	8006498 <pal_i2c_init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800119a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800119e:	e016      	b.n	80011ce <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2299      	movs	r2, #153	@ 0x99
 80011ae:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2205      	movs	r2, #5
 80011b6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80011ba:	e003      	b.n	80011c4 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80011c4:	2100      	movs	r1, #0
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa84 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	080019bd 	.word	0x080019bd

080011dc <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d007      	beq.n	8001204 <ifx_i2c_pl_send_frame+0x28>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d002      	beq.n	8001204 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80011fe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001202:	e010      	b.n	8001226 <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	88fa      	ldrh	r2, [r7, #6]
 8001218:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800121c:	2100      	movs	r1, #0
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 fa58 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800123c:	2b01      	cmp	r3, #1
 800123e:	d007      	beq.n	8001250 <ifx_i2c_pl_receive_frame+0x22>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001246:	2b02      	cmp	r3, #2
 8001248:	d002      	beq.n	8001250 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800124a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800124e:	e008      	b.n	8001262 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2202      	movs	r2, #2
 8001254:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fa3a 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
 8001276:	4613      	mov	r3, r2
 8001278:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	883a      	ldrh	r2, [r7, #0]
 800128e:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	22c8      	movs	r2, #200	@ 0xc8
 800129e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80012bc:	461a      	mov	r2, r3
 80012be:	f005 f901 	bl	80064c4 <pal_i2c_write>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	72fb      	strb	r3, [r7, #11]
 80012d8:	4613      	mov	r3, r2
 80012da:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	7afa      	ldrb	r2, [r7, #11]
 80012e0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80012ea:	3301      	adds	r3, #1
 80012ec:	893a      	ldrh	r2, [r7, #8]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d fada 	bl	800e8aa <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80012f6:	893b      	ldrh	r3, [r7, #8]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2202      	movs	r2, #2
 8001306:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	22c8      	movs	r2, #200	@ 0xc8
 800130e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800132c:	461a      	mov	r2, r3
 800132e:	f005 f8c9 	bl	80064c4 <pal_i2c_write>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001342:	2204      	movs	r2, #4
 8001344:	2182      	movs	r1, #130	@ 0x82
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff8f 	bl	800126a <ifx_i2c_pl_read_register>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f005 f91c 	bl	80065bc <pal_i2c_set_bitrate>
 8001384:	4603      	mov	r3, r0
 8001386:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d019      	beq.n	80013cc <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 800139e:	1e5a      	subs	r2, r3, #1
 80013a0:	b291      	uxth	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4908      	ldr	r1, [pc, #32]	@ (80013dc <ifx_i2c_pl_set_bit_rate+0x88>)
 80013ba:	f005 fa51 	bl	8006860 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 80013be:	2301      	movs	r3, #1
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	e005      	b.n	80013d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 80013c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80013c8:	81fb      	strh	r3, [r7, #14]
 80013ca:	e001      	b.n	80013d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 80013d0:	89fb      	ldrh	r3, [r7, #14]

}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	080013e1 	.word	0x080013e1

080013e0 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b08b      	sub	sp, #44	@ 0x2c
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80013e8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80013ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	733b      	strb	r3, [r7, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001406:	b2db      	uxtb	r3, r3
 8001408:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800141e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001420:	d031      	beq.n	8001486 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001422:	2bbb      	cmp	r3, #187	@ 0xbb
 8001424:	f300 8145 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001428:	2baa      	cmp	r3, #170	@ 0xaa
 800142a:	f000 812d 	beq.w	8001688 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 800142e:	2baa      	cmp	r3, #170	@ 0xaa
 8001430:	f300 813f 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001434:	2b88      	cmp	r3, #136	@ 0x88
 8001436:	f000 8103 	beq.w	8001640 <ifx_i2c_pl_negotiation_event_handler+0x260>
 800143a:	2b88      	cmp	r3, #136	@ 0x88
 800143c:	f300 8139 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001440:	2b77      	cmp	r3, #119	@ 0x77
 8001442:	f000 80c6 	beq.w	80015d2 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001446:	2b77      	cmp	r3, #119	@ 0x77
 8001448:	f300 8133 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800144c:	2b66      	cmp	r3, #102	@ 0x66
 800144e:	f000 809d 	beq.w	800158c <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001452:	2b66      	cmp	r3, #102	@ 0x66
 8001454:	f300 812d 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001458:	2b55      	cmp	r3, #85	@ 0x55
 800145a:	f000 808d 	beq.w	8001578 <ifx_i2c_pl_negotiation_event_handler+0x198>
 800145e:	2b55      	cmp	r3, #85	@ 0x55
 8001460:	f300 8127 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001464:	2b44      	cmp	r3, #68	@ 0x44
 8001466:	d040      	beq.n	80014ea <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001468:	2b44      	cmp	r3, #68	@ 0x44
 800146a:	f300 8122 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800146e:	2b33      	cmp	r3, #51	@ 0x33
 8001470:	d031      	beq.n	80014d6 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001472:	2b33      	cmp	r3, #51	@ 0x33
 8001474:	f300 811d 	bgt.w	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001478:	2b11      	cmp	r3, #17
 800147a:	f000 80cb 	beq.w	8001614 <ifx_i2c_pl_negotiation_event_handler+0x234>
 800147e:	2b22      	cmp	r3, #34	@ 0x22
 8001480:	f000 80d4 	beq.w	800162c <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001484:	e115      	b.n	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001486:	2164      	movs	r1, #100	@ 0x64
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff63 	bl	8001354 <ifx_i2c_pl_set_bit_rate>
 800148e:	4603      	mov	r3, r0
 8001490:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001494:	2b00      	cmp	r3, #0
 8001496:	d107      	bne.n	80014a8 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2233      	movs	r2, #51	@ 0x33
 800149c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80014a6:	e106      	b.n	80016b6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 80014a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014aa:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80014ae:	f040 8102 	bne.w	80016b6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	22aa      	movs	r2, #170	@ 0xaa
 80014b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80014c8:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4980      	ldr	r1, [pc, #512]	@ (80016d0 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 80014d0:	f005 f9c6 	bl	8006860 <pal_os_event_register_callback_oneshot>
            break;
 80014d4:	e0ef      	b.n	80016b6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2244      	movs	r2, #68	@ 0x44
 80014da:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80014de:	2204      	movs	r2, #4
 80014e0:	2184      	movs	r1, #132	@ 0x84
 80014e2:	69b8      	ldr	r0, [r7, #24]
 80014e4:	f7ff fec1 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 80014e8:	e0e8      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 800150c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001510:	d911      	bls.n	8001536 <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001512:	8abb      	ldrh	r3, [r7, #20]
 8001514:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001518:	d80d      	bhi.n	8001536 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 800151a:	2304      	movs	r3, #4
 800151c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2255      	movs	r2, #85	@ 0x55
 8001522:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	2202      	movs	r2, #2
 800152c:	2189      	movs	r1, #137	@ 0x89
 800152e:	69b8      	ldr	r0, [r7, #24]
 8001530:	f7ff fecb 	bl	80012ca <ifx_i2c_pl_write_register>
 8001534:	e01f      	b.n	8001576 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 800153c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001540:	d811      	bhi.n	8001566 <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001542:	8abb      	ldrh	r3, [r7, #20]
 8001544:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001548:	d90d      	bls.n	8001566 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 800154a:	2303      	movs	r3, #3
 800154c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2255      	movs	r2, #85	@ 0x55
 8001552:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	2202      	movs	r2, #2
 800155c:	2189      	movs	r1, #137	@ 0x89
 800155e:	69b8      	ldr	r0, [r7, #24]
 8001560:	f7ff feb3 	bl	80012ca <ifx_i2c_pl_write_register>
 8001564:	e007      	b.n	8001576 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2266      	movs	r2, #102	@ 0x66
 800156a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001574:	e0a2      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001576:	e0a1      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2266      	movs	r2, #102	@ 0x66
 800157c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001580:	2204      	movs	r2, #4
 8001582:	2184      	movs	r1, #132	@ 0x84
 8001584:	69b8      	ldr	r0, [r7, #24]
 8001586:	f7ff fe70 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 800158a:	e097      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80015aa:	8aba      	ldrh	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d208      	bcs.n	80015c2 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	22aa      	movs	r2, #170	@ 0xaa
 80015bc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80015c0:	e003      	b.n	80015ca <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2277      	movs	r2, #119	@ 0x77
 80015c6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80015d0:	e074      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff feba 	bl	8001354 <ifx_i2c_pl_set_bit_rate>
 80015e0:	4603      	mov	r3, r0
 80015e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 80015e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2211      	movs	r2, #17
 80015ee:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80015f8:	e05f      	b.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 80015fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015fc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001600:	d15b      	bne.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	22aa      	movs	r2, #170	@ 0xaa
 8001606:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001612:	e052      	b.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2222      	movs	r2, #34	@ 0x22
 8001618:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2202      	movs	r2, #2
 8001622:	2181      	movs	r1, #129	@ 0x81
 8001624:	69b8      	ldr	r0, [r7, #24]
 8001626:	f7ff fe50 	bl	80012ca <ifx_i2c_pl_write_register>
            break;
 800162a:	e047      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2288      	movs	r2, #136	@ 0x88
 8001630:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001634:	2202      	movs	r2, #2
 8001636:	2181      	movs	r1, #129	@ 0x81
 8001638:	69b8      	ldr	r0, [r7, #24]
 800163a:	f7ff fe16 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 800163e:	e03d      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	22aa      	movs	r2, #170	@ 0xaa
 8001644:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001666:	8afa      	ldrh	r2, [r7, #22]
 8001668:	429a      	cmp	r2, r3
 800166a:	d805      	bhi.n	8001678 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	8afa      	ldrh	r2, [r7, #22]
 8001670:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001674:	2300      	movs	r3, #0
 8001676:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001686:	e019      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001688:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001696:	e003      	b.n	80016a0 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80016a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80016a8:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	69b8      	ldr	r0, [r7, #24]
 80016ae:	47a0      	blx	r4
            break;
 80016b0:	e004      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 80016b2:	bf00      	nop
 80016b4:	e002      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 80016b6:	bf00      	nop
 80016b8:	e000      	b.n	80016bc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 80016ba:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 80016bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f aea6 	bne.w	8001412 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	372c      	adds	r7, #44	@ 0x2c
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	080013e1 	.word	0x080013e1

080016d4 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00c      	beq.n	8001700 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80016f4:	8879      	ldrh	r1, [r7, #2]
 80016f6:	2300      	movs	r3, #0
 80016f8:	2200      	movs	r2, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80016fe:	e0f0      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001706:	3b01      	subs	r3, #1
 8001708:	2b04      	cmp	r3, #4
 800170a:	f200 80dc 	bhi.w	80018c6 <ifx_i2c_pl_frame_event_handler+0x1f2>
 800170e:	a201      	add	r2, pc, #4	@ (adr r2, 8001714 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001731 	.word	0x08001731
 8001718:	08001739 	.word	0x08001739
 800171c:	08001757 	.word	0x08001757
 8001720:	080018a5 	.word	0x080018a5
 8001724:	08001729 	.word	0x08001729
                ifx_i2c_pl_soft_reset(p_ctx);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f983 	bl	8001a34 <ifx_i2c_pl_soft_reset>
            break;
 800172e:	e0d8      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fe55 	bl	80013e0 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001736:	e0d4      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001746:	2b02      	cmp	r3, #2
 8001748:	d105      	bne.n	8001756 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800174a:	2204      	movs	r2, #4
 800174c:	2182      	movs	r1, #130	@ 0x82
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fd8b 	bl	800126a <ifx_i2c_pl_read_register>
                    break;
 8001754:	e0c5      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800175c:	2b02      	cmp	r3, #2
 800175e:	d159      	bne.n	8001814 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d052      	beq.n	8001814 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001786:	8a7b      	ldrh	r3, [r7, #18]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <ifx_i2c_pl_frame_event_handler+0xda>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001792:	8a7a      	ldrh	r2, [r7, #18]
 8001794:	429a      	cmp	r2, r3
 8001796:	d80a      	bhi.n	80017ae <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2204      	movs	r2, #4
 800179c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 80017a0:	8a7b      	ldrh	r3, [r7, #18]
 80017a2:	461a      	mov	r2, r3
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fd5f 	bl	800126a <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80017ac:	e079      	b.n	80018a2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 80017ae:	f005 f90c 	bl	80069ca <pal_os_timer_get_time_in_milliseconds>
 80017b2:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d205      	bcs.n	80017d8 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d209      	bcs.n	80017f8 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80017ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	493e      	ldr	r1, [pc, #248]	@ (80018ec <ifx_i2c_pl_frame_event_handler+0x218>)
 80017f2:	f005 f835 	bl	8006860 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80017f6:	e054      	b.n	80018a2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001806:	2300      	movs	r3, #0
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001812:	e046      	b.n	80018a2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10e      	bne.n	800183c <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd48 	bl	80012ca <ifx_i2c_pl_write_register>
            break;
 800183a:	e052      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 800183c:	f005 f8c5 	bl	80069ca <pal_os_timer_get_time_in_milliseconds>
 8001840:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	429a      	cmp	r2, r3
 8001858:	d205      	bcs.n	8001866 <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	429a      	cmp	r2, r3
 8001870:	d209      	bcs.n	8001886 <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001878:	f241 3388 	movw	r3, #5000	@ 0x1388
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	491b      	ldr	r1, [pc, #108]	@ (80018ec <ifx_i2c_pl_frame_event_handler+0x218>)
 8001880:	f004 ffee 	bl	8006860 <pal_os_event_register_callback_oneshot>
            break;
 8001884:	e02d      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001894:	2300      	movs	r3, #0
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	47a0      	blx	r4
            break;
 80018a0:	e01f      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
 80018a2:	e01e      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80018be:	2100      	movs	r1, #0
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	47a0      	blx	r4
            break;
 80018c4:	e00d      	b.n	80018e2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	47a0      	blx	r4
            break;
 80018e0:	bf00      	nop
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	0800133b 	.word	0x0800133b

080018f0 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10c      	bne.n	8001920 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001918:	461a      	mov	r2, r3
 800191a:	f004 fdd3 	bl	80064c4 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 800191e:	e010      	b.n	8001942 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001926:	2b02      	cmp	r3, #2
 8001928:	d10b      	bne.n	8001942 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 800193c:	461a      	mov	r2, r3
 800193e:	f004 fdff 	bl	8006540 <pal_i2c_read>
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 800195c:	2b01      	cmp	r3, #1
 800195e:	d11f      	bne.n	80019a0 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001966:	2b01      	cmp	r3, #1
 8001968:	d110      	bne.n	800198c <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2202      	movs	r2, #2
 800196e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001984:	461a      	mov	r2, r3
 8001986:	f004 fddb 	bl	8006540 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800198a:	e012      	b.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001992:	2b02      	cmp	r3, #2
 8001994:	d10d      	bne.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001996:	2100      	movs	r1, #0
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff fe9b 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
}
 800199e:	e008      	b.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d103      	bne.n	80019b2 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 80019aa:	2100      	movs	r1, #0
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fe91 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60fb      	str	r3, [r7, #12]
    switch (event)
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01e      	beq.n	8001a10 <ifx_i2c_pl_pal_event_handler+0x54>
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db25      	blt.n	8001a22 <ifx_i2c_pl_pal_event_handler+0x66>
 80019d6:	3b01      	subs	r3, #1
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d822      	bhi.n	8001a22 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	b291      	uxth	r1, r2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	490b      	ldr	r1, [pc, #44]	@ (8001a2c <ifx_i2c_pl_pal_event_handler+0x70>)
 80019fe:	f004 ff2f 	bl	8006860 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001a02:	e00f      	b.n	8001a24 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001a04:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fe63 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001a0e:	e009      	b.n	8001a24 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001a16:	2332      	movs	r3, #50	@ 0x32
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4905      	ldr	r1, [pc, #20]	@ (8001a30 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001a1c:	f004 ff20 	bl	8006860 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001a20:	e000      	b.n	8001a24 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001a22:	bf00      	nop
    }
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	080018f1 	.word	0x080018f1
 8001a30:	0800194b 	.word	0x0800194b

08001a34 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001a46:	3b99      	subs	r3, #153	@ 0x99
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d85e      	bhi.n	8001b0a <ifx_i2c_pl_soft_reset+0xd6>
 8001a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a54 <ifx_i2c_pl_soft_reset+0x20>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a81 	.word	0x08001a81
 8001a58:	08001b0b 	.word	0x08001b0b
 8001a5c:	08001b0b 	.word	0x08001b0b
 8001a60:	08001b0b 	.word	0x08001b0b
 8001a64:	08001b0b 	.word	0x08001b0b
 8001a68:	08001b0b 	.word	0x08001b0b
 8001a6c:	08001b0b 	.word	0x08001b0b
 8001a70:	08001b0b 	.word	0x08001b0b
 8001a74:	08001af9 	.word	0x08001af9
 8001a78:	08001a95 	.word	0x08001a95
 8001a7c:	08001add 	.word	0x08001add
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	22a2      	movs	r2, #162	@ 0xa2
 8001a84:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001a88:	2204      	movs	r2, #4
 8001a8a:	2182      	movs	r1, #130	@ 0x82
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fbec 	bl	800126a <ifx_i2c_pl_read_register>
            break;
 8001a92:	e03b      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d10b      	bne.n	8001ac8 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	22a3      	movs	r2, #163	@ 0xa3
 8001ab4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2202      	movs	r2, #2
 8001abe:	2188      	movs	r1, #136	@ 0x88
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fc02 	bl	80012ca <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001ac6:	e021      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001ad0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fdfd 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001ada:	e017      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	22a1      	movs	r2, #161	@ 0xa1
 8001ae0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001aea:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4908      	ldr	r1, [pc, #32]	@ (8001b14 <ifx_i2c_pl_soft_reset+0xe0>)
 8001af2:	f004 feb5 	bl	8006860 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001af6:	e009      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001b00:	2100      	movs	r1, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fde6 	bl	80016d4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001b08:	e000      	b.n	8001b0c <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8001b0a:	bf00      	nop
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	08001a35 	.word	0x08001a35

08001b18 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001b22:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001b26:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8001b30:	491c      	ldr	r1, [pc, #112]	@ (8001ba4 <ifx_i2c_prl_init+0x8c>)
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f001 faa0 	bl	8003078 <ifx_i2c_tl_init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d12b      	bne.n	8001b96 <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001b4a:	2b11      	cmp	r3, #17
 8001b4c:	d104      	bne.n	8001b58 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001b56:	e003      	b.n	8001b60 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2211      	movs	r2, #17
 8001b84:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2211      	movs	r2, #17
 8001b8c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8001b90:	2300      	movs	r3, #0
 8001b92:	81fb      	strh	r3, [r7, #14]
 8001b94:	e000      	b.n	8001b98 <ifx_i2c_prl_init+0x80>
            break;
 8001b96:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8001b98:	89fb      	ldrh	r3, [r7, #14]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	08002721 	.word	0x08002721

08001ba8 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001bb2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001bb6:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d12e      	bne.n	8001c20 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001bce:	2b33      	cmp	r3, #51	@ 0x33
 8001bd0:	d109      	bne.n	8001be6 <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8001be0:	2300      	movs	r3, #0
 8001be2:	81fb      	strh	r3, [r7, #14]
            break;
 8001be4:	e01d      	b.n	8001c22 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d118      	bne.n	8001c22 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001bf6:	2b22      	cmp	r3, #34	@ 0x22
 8001bf8:	d113      	bne.n	8001c22 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001c10:	2301      	movs	r3, #1
 8001c12:	2100      	movs	r1, #0
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fd83 	bl	8002720 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	81fb      	strh	r3, [r7, #14]
            break;
 8001c1e:	e000      	b.n	8001c22 <ifx_i2c_prl_close+0x7a>
            break;
 8001c20:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8001c22:	89fb      	ldrh	r3, [r7, #14]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd90      	pop	{r4, r7, pc}

08001c2c <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001c3c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001c40:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05a      	beq.n	8001cfe <ifx_i2c_prl_transceive+0xd2>
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d057      	beq.n	8001cfe <ifx_i2c_prl_transceive+0xd2>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d152      	bne.n	8001cfe <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001c5e:	2b11      	cmp	r3, #17
 8001c60:	d10d      	bne.n	8001c7e <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d108      	bne.n	8001c7e <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2208      	movs	r2, #8
 8001c70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8001c7c:	e003      	b.n	8001c86 <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2202      	movs	r2, #2
 8001c82:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	88fa      	ldrh	r2, [r7, #6]
 8001c90:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d006      	beq.n	8001cb0 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001ca8:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d103      	bne.n	8001cb8 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cb6:	e003      	b.n	8001cc0 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	1d1a      	adds	r2, r3, #4
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a3a      	ldr	r2, [r7, #32]
 8001cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2211      	movs	r2, #17
 8001cea:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fd13 	bl	8002720 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 8001cfe:	8afb      	ldrh	r3, [r7, #22]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b09e      	sub	sp, #120	@ 0x78
 8001d0c:	af06      	add	r7, sp, #24
 8001d0e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001d10:	f240 1307 	movw	r3, #263	@ 0x107
 8001d14:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <ifx_i2c_prl_prf+0xa4>)
 8001d1a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001d1e:	461d      	mov	r5, r3
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f107 020a 	add.w	r2, r7, #10
 8001d34:	f107 010c 	add.w	r1, r7, #12
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fccb 	bl	80066d4 <pal_os_datastore_read>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8001d44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001d4c:	f240 1307 	movw	r3, #263	@ 0x107
 8001d50:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8001d54:	e024      	b.n	8001da0 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001d56:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001d60:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001d64:	f107 010c 	add.w	r1, r7, #12
 8001d68:	2528      	movs	r5, #40	@ 0x28
 8001d6a:	9504      	str	r5, [sp, #16]
 8001d6c:	9203      	str	r2, [sp, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	9202      	str	r2, [sp, #8]
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2310      	movs	r3, #16
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f004 fabe 	bl	80062fe <pal_crypt_tls_prf_sha256>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001d88:	f240 1307 	movw	r3, #263	@ 0x107
 8001d8c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00c fd40 	bl	800e820 <memset>

    } while (FALSE);
    return (return_status);
 8001da0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3760      	adds	r7, #96	@ 0x60
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdb0      	pop	{r4, r5, r7, pc}
 8001dac:	0800f3b0 	.word	0x0800f3b0

08001db0 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	817b      	strh	r3, [r7, #10]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	7a7a      	ldrb	r2, [r7, #9]
 8001dc8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	33a1      	adds	r3, #161	@ 0xa1
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f8f2 	bl	8005fbc <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	33a6      	adds	r3, #166	@ 0xa6
 8001de8:	897a      	ldrh	r2, [r7, #10]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f8ce 	bl	8005f8e <optiga_common_set_uint16>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b08e      	sub	sp, #56	@ 0x38
 8001dfe:	af06      	add	r7, sp, #24
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001e0a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e0e:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8001e10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e14:	88f9      	ldrh	r1, [r7, #6]
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff ffc9 	bl	8001db0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3378      	adds	r3, #120	@ 0x78
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f004 f8c4 	bl	8005fbc <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8001e3e:	88f9      	ldrh	r1, [r7, #6]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	9205      	str	r2, [sp, #20]
 8001e44:	2208      	movs	r2, #8
 8001e46:	9204      	str	r2, [sp, #16]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	9203      	str	r2, [sp, #12]
 8001e4c:	9302      	str	r3, [sp, #8]
 8001e4e:	2308      	movs	r3, #8
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	460a      	mov	r2, r1
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f004 fa73 	bl	800634a <pal_crypt_encrypt_aes128_ccm>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	83fb      	strh	r3, [r7, #30]
 8001e6e:	e000      	b.n	8001e72 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8001e70:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001e72:	8bfb      	ldrh	r3, [r7, #30]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	@ 0x38
 8001e80:	af06      	add	r7, sp, #24
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001e8c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e90:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8001e92:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e96:	88f9      	ldrh	r1, [r7, #6]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff ff88 	bl	8001db0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8001ea0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ea4:	3358      	adds	r3, #88	@ 0x58
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 f880 	bl	8005fbc <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 8001ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ec6:	3358      	adds	r3, #88	@ 0x58
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ed2:	9205      	str	r2, [sp, #20]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	9204      	str	r2, [sp, #16]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	9203      	str	r2, [sp, #12]
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2308      	movs	r3, #8
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	f107 0314 	add.w	r3, r7, #20
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4603      	mov	r3, r0
 8001eea:	460a      	mov	r2, r1
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f004 fa4c 	bl	800638c <pal_crypt_decrypt_aes128_ccm>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001efa:	2300      	movs	r3, #0
 8001efc:	83fb      	strh	r3, [r7, #30]
 8001efe:	e000      	b.n	8001f02 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8001f00:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001f02:	8bfb      	ldrh	r3, [r7, #30]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8001f14:	2300      	movs	r3, #0
 8001f16:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d134      	bne.n	8001f94 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001f30:	3301      	adds	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3354      	adds	r3, #84	@ 0x54
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f001 f8a9 	bl	80030d4 <ifx_i2c_tl_transceive>
 8001f82:	4603      	mov	r3, r0
 8001f84:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	e00d      	b.n	8001fb0 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8001f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8001fae:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b08a      	sub	sp, #40	@ 0x28
 8001fbe:	af04      	add	r7, sp, #16
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001fc4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001fc8:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 8001fd4:	2b55      	cmp	r3, #85	@ 0x55
 8001fd6:	f000 8178 	beq.w	80022ca <ifx_i2c_prl_do_handshake+0x310>
 8001fda:	2b55      	cmp	r3, #85	@ 0x55
 8001fdc:	f300 817f 	bgt.w	80022de <ifx_i2c_prl_do_handshake+0x324>
 8001fe0:	2b44      	cmp	r3, #68	@ 0x44
 8001fe2:	f000 8100 	beq.w	80021e6 <ifx_i2c_prl_do_handshake+0x22c>
 8001fe6:	2b44      	cmp	r3, #68	@ 0x44
 8001fe8:	f300 8179 	bgt.w	80022de <ifx_i2c_prl_do_handshake+0x324>
 8001fec:	2b33      	cmp	r3, #51	@ 0x33
 8001fee:	f000 8095 	beq.w	800211c <ifx_i2c_prl_do_handshake+0x162>
 8001ff2:	2b33      	cmp	r3, #51	@ 0x33
 8001ff4:	f300 8173 	bgt.w	80022de <ifx_i2c_prl_do_handshake+0x324>
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d002      	beq.n	8002002 <ifx_i2c_prl_do_handshake+0x48>
 8001ffc:	2b22      	cmp	r3, #34	@ 0x22
 8001ffe:	d034      	beq.n	800206a <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 8002000:	e16d      	b.n	80022de <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2226      	movs	r2, #38	@ 0x26
 8002026:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3354      	adds	r3, #84	@ 0x54
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	2202      	movs	r2, #2
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f001 f847 	bl	80030d4 <ifx_i2c_tl_transceive>
 8002046:	4603      	mov	r3, r0
 8002048:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800204a:	8afb      	ldrh	r3, [r7, #22]
 800204c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002050:	d106      	bne.n	8002060 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2255      	movs	r2, #85	@ 0x55
 8002056:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800205a:	2301      	movs	r3, #1
 800205c:	613b      	str	r3, [r7, #16]
                    break;
 800205e:	e13f      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2222      	movs	r2, #34	@ 0x22
 8002064:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002068:	e13a      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800206a:	2301      	movs	r3, #1
 800206c:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00e      	beq.n	80020a4 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800208c:	2b01      	cmp	r3, #1
 800208e:	d109      	bne.n	80020a4 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002090:	f240 1307 	movw	r3, #263	@ 0x107
 8002094:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	22ff      	movs	r2, #255	@ 0xff
 800209a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
                    break;
 80020a2:	e11d      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80020aa:	2b26      	cmp	r3, #38	@ 0x26
 80020ac:	d108      	bne.n	80020c0 <ifx_i2c_prl_do_handshake+0x106>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d004      	beq.n	80020ca <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2255      	movs	r2, #85	@ 0x55
 80020c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80020c8:	e10a      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3322      	adds	r3, #34	@ 0x22
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 ff95 	bl	8005ffe <optiga_common_get_uint32>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3302      	adds	r3, #2
 80020ec:	2220      	movs	r2, #32
 80020ee:	4619      	mov	r1, r3
 80020f0:	f00c fbdb 	bl	800e8aa <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fe07 	bl	8001d08 <ifx_i2c_prl_prf>
 80020fa:	4603      	mov	r3, r0
 80020fc:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80020fe:	8afb      	ldrh	r3, [r7, #22]
 8002100:	f240 1207 	movw	r2, #263	@ 0x107
 8002104:	4293      	cmp	r3, r2
 8002106:	d104      	bne.n	8002112 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2255      	movs	r2, #85	@ 0x55
 800210c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002110:	e0e6      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2233      	movs	r2, #51	@ 0x33
 8002116:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800211a:	e0e1      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2208      	movs	r2, #8
 8002120:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3380      	adds	r3, #128	@ 0x80
 8002132:	2220      	movs	r2, #32
 8002134:	4619      	mov	r1, r3
 8002136:	f00c fbb8 	bl	800e8aa <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f003 ff38 	bl	8005fbc <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	2224      	movs	r2, #36	@ 0x24
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fe49 	bl	8001dfa <ifx_i2c_prl_encrypt_msg>
 8002168:	4603      	mov	r3, r0
 800216a:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800216c:	8afb      	ldrh	r3, [r7, #22]
 800216e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002172:	d106      	bne.n	8002182 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2255      	movs	r2, #85	@ 0x55
 8002178:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
                    break;
 8002180:	e0ae      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f003 ff0e 	bl	8005fbc <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2231      	movs	r2, #49	@ 0x31
 80021a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3354      	adds	r3, #84	@ 0x54
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4613      	mov	r3, r2
 80021bc:	2231      	movs	r2, #49	@ 0x31
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 ff88 	bl	80030d4 <ifx_i2c_tl_transceive>
 80021c4:	4603      	mov	r3, r0
 80021c6:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80021c8:	8afb      	ldrh	r3, [r7, #22]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2255      	movs	r2, #85	@ 0x55
 80021d2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	613b      	str	r3, [r7, #16]
                    break;
 80021da:	e081      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2244      	movs	r2, #68	@ 0x44
 80021e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80021e4:	e07c      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d104      	bne.n	80021f8 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80021f4:	2b31      	cmp	r3, #49	@ 0x31
 80021f6:	d006      	beq.n	8002206 <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2255      	movs	r2, #85	@ 0x55
 80021fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002200:	2301      	movs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
                    break;
 8002204:	e06c      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fef7 	bl	8005ffe <optiga_common_get_uint32>
 8002210:	4602      	mov	r2, r0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	1d59      	adds	r1, r3, #5
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002228:	9203      	str	r2, [sp, #12]
 800222a:	2224      	movs	r2, #36	@ 0x24
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	2210      	movs	r2, #16
 8002230:	9201      	str	r2, [sp, #4]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	2224      	movs	r2, #36	@ 0x24
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fe1f 	bl	8001e7c <ifx_i2c_prl_decrypt_msg>
 800223e:	4603      	mov	r3, r0
 8002240:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002242:	8afb      	ldrh	r3, [r7, #22]
 8002244:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002248:	d106      	bne.n	8002258 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2255      	movs	r2, #85	@ 0x55
 800224e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002252:	2301      	movs	r3, #1
 8002254:	613b      	str	r3, [r7, #16]
                    break;
 8002256:	e043      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f003 feaa 	bl	8005fbc <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	33a8      	adds	r3, #168	@ 0xa8
 8002272:	2220      	movs	r2, #32
 8002274:	4619      	mov	r1, r3
 8002276:	f00c fac3 	bl	800e800 <memcmp>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002280:	f240 1307 	movw	r3, #263	@ 0x107
 8002284:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2255      	movs	r2, #85	@ 0x55
 800228a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800228e:	2301      	movs	r3, #1
 8002290:	613b      	str	r3, [r7, #16]
                    break;
 8002292:	e025      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	2204      	movs	r2, #4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f00c faad 	bl	800e800 <memcmp>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80022ac:	f240 1307 	movw	r3, #263	@ 0x107
 80022b0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2255      	movs	r2, #85	@ 0x55
 80022b6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	613b      	str	r3, [r7, #16]
                    break;
 80022be:	e00f      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80022c8:	e00a      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80022ca:	f240 1307 	movw	r3, #263	@ 0x107
 80022ce:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	22ff      	movs	r2, #255	@ 0xff
 80022d4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
            break;
 80022dc:	e000      	b.n	80022e0 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80022de:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f43f ae73 	beq.w	8001fce <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80022e8:	8afb      	ldrh	r3, [r7, #22]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b094      	sub	sp, #80	@ 0x50
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002302:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002306:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002310:	2b01      	cmp	r3, #1
 8002312:	d003      	beq.n	800231c <ifx_i2c_prl_do_manage_context+0x2a>
 8002314:	2b02      	cmp	r3, #2
 8002316:	f000 80eb 	beq.w	80024f0 <ifx_i2c_prl_do_manage_context+0x1fe>
 800231a:	e1df      	b.n	80026dc <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002322:	b25b      	sxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	da07      	bge.n	8002338 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002330:	2300      	movs	r3, #0
 8002332:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002336:	e1ed      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800233e:	2b22      	cmp	r3, #34	@ 0x22
 8002340:	d10c      	bne.n	800235c <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2260      	movs	r2, #96	@ 0x60
 8002346:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800235a:	e0a6      	b.n	80024aa <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002362:	2b11      	cmp	r3, #17
 8002364:	f040 8093 	bne.w	800248e <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800236e:	885b      	ldrh	r3, [r3, #2]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d033      	beq.n	80023dc <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2234      	movs	r2, #52	@ 0x34
 8002378:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002382:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002384:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3354      	adds	r3, #84	@ 0x54
 800238a:	461a      	mov	r2, r3
 800238c:	f004 f9a2 	bl	80066d4 <pal_os_datastore_read>
 8002390:	4603      	mov	r3, r0
 8002392:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002396:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800239a:	2b01      	cmp	r3, #1
 800239c:	f000 81b7 	beq.w	800270e <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d130      	bne.n	8002418 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80023da:	e19b      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d112      	bne.n	800240c <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2202      	movs	r2, #2
 80023ea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002404:	2300      	movs	r3, #0
 8002406:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 800240a:	e183      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2268      	movs	r2, #104	@ 0x68
 800241c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f003 fdc5 	bl	8005fbc <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2205      	movs	r2, #5
 8002436:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2205      	movs	r2, #5
 8002444:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d026      	beq.n	80024aa <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2234      	movs	r2, #52	@ 0x34
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f00c f9db 	bl	800e820 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002470:	885b      	ldrh	r3, [r3, #2]
 8002472:	f107 0110 	add.w	r1, r7, #16
 8002476:	2234      	movs	r2, #52	@ 0x34
 8002478:	4618      	mov	r0, r3
 800247a:	f004 f8ad 	bl	80065d8 <pal_os_datastore_write>
 800247e:	4603      	mov	r3, r0
 8002480:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002484:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10e      	bne.n	80024aa <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 800248c:	e142      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	22ff      	movs	r2, #255	@ 0xff
 8002492:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2207      	movs	r2, #7
 800249a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80024a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 80024a8:	e134      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3354      	adds	r3, #84	@ 0x54
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	4603      	mov	r3, r0
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fe05 	bl	80030d4 <ifx_i2c_tl_transceive>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80024d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 811c 	bne.w	8002712 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
        }
        break;
 80024ee:	e111      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002502:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002506:	2b6c      	cmp	r3, #108	@ 0x6c
 8002508:	d133      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002510:	2b11      	cmp	r3, #17
 8002512:	d12e      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2b05      	cmp	r3, #5
 8002518:	d12b      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3308      	adds	r3, #8
 8002524:	2228      	movs	r2, #40	@ 0x28
 8002526:	4619      	mov	r1, r3
 8002528:	f00c f9bf 	bl	800e8aa <memcpy>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2204      	movs	r2, #4
 800256c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002570:	e0ac      	b.n	80026cc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002572:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	f040 808b 	bne.w	8002692 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002582:	2b22      	cmp	r3, #34	@ 0x22
 8002584:	f040 8085 	bne.w	8002692 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	2b01      	cmp	r3, #1
 800258c:	f040 8081 	bne.w	8002692 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f103 0008 	add.w	r0, r3, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3358      	adds	r3, #88	@ 0x58
 80025a2:	2228      	movs	r2, #40	@ 0x28
 80025a4:	4619      	mov	r1, r3
 80025a6:	f00c f980 	bl	800e8aa <memcpy>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80025e4:	885b      	ldrh	r3, [r3, #2]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02e      	beq.n	8002648 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2234      	movs	r2, #52	@ 0x34
 80025ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80025f8:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80025fa:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002602:	461a      	mov	r2, r3
 8002604:	f003 ffe8 	bl	80065d8 <pal_os_datastore_write>
 8002608:	4603      	mov	r3, r0
 800260a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 800260e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002612:	2b00      	cmp	r3, #0
 8002614:	d018      	beq.n	8002648 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	@ 0xff
 800261a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2207      	movs	r2, #7
 8002622:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
                        break;
 8002646:	e065      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3358      	adds	r3, #88	@ 0x58
 800264c:	2228      	movs	r2, #40	@ 0x28
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00c f8e5 	bl	800e820 <memset>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	649a      	str	r2, [r3, #72]	@ 0x48
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002690:	e01c      	b.n	80026cc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2234      	movs	r2, #52	@ 0x34
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00c f8c1 	bl	800e820 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026a4:	885b      	ldrh	r3, [r3, #2]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026b0:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80026b2:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026b4:	2234      	movs	r2, #52	@ 0x34
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 ff8e 	bl	80065d8 <pal_os_datastore_write>
 80026bc:	4603      	mov	r3, r0
 80026be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 80026c2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80026c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 80026ca:	e023      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 80026da:	e01b      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	22ff      	movs	r2, #255	@ 0xff
 80026e0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2207      	movs	r2, #7
 80026e8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80026fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800270c:	e002      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002712:	bf00      	nop
    }
  return (return_status);
 8002714:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002718:	4618      	mov	r0, r3
 800271a:	3748      	adds	r7, #72	@ 0x48
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b097      	sub	sp, #92	@ 0x5c
 8002724:	af04      	add	r7, sp, #16
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	461a      	mov	r2, r3
 800272c:	460b      	mov	r3, r1
 800272e:	817b      	strh	r3, [r7, #10]
 8002730:	4613      	mov	r3, r2
 8002732:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800273a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800273e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <ifx_i2c_prl_event_handler+0x36>
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002752:	2b00      	cmp	r3, #0
 8002754:	d029      	beq.n	80027aa <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	22ff      	movs	r2, #255	@ 0xff
 800275a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002764:	2b05      	cmp	r3, #5
 8002766:	d105      	bne.n	8002774 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f240 1207 	movw	r2, #263	@ 0x107
 800276e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002772:	e016      	b.n	80027a2 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <ifx_i2c_prl_event_handler+0x7a>
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002784:	d009      	beq.n	800279a <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800278c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002798:	e003      	b.n	80027a2 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	897a      	ldrh	r2, [r7, #10]
 800279e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2207      	movs	r2, #7
 80027a6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80027b0:	3b01      	subs	r3, #1
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	f200 8445 	bhi.w	8003042 <ifx_i2c_prl_event_handler+0x922>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <ifx_i2c_prl_event_handler+0xa0>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e1 	.word	0x080027e1
 80027c4:	0800284f 	.word	0x0800284f
 80027c8:	08002c61 	.word	0x08002c61
 80027cc:	0800298f 	.word	0x0800298f
 80027d0:	08002893 	.word	0x08002893
 80027d4:	08002ef9 	.word	0x08002ef9
 80027d8:	08003013 	.word	0x08003013
 80027dc:	080027fd 	.word	0x080027fd
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 80027ea:	2300      	movs	r3, #0
 80027ec:	2200      	movs	r2, #0
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	47a0      	blx	r4
                exit_machine = FALSE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80027f8:	f000 bc34 	b.w	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 80027fc:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7ff fd74 	bl	80022f2 <ifx_i2c_prl_do_manage_context>
 800280a:	4603      	mov	r3, r0
 800280c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002810:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8424 	beq.w	8003062 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	22ff      	movs	r2, #255	@ 0xff
 800281e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2207      	movs	r2, #7
 8002826:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002838:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002844:	2301      	movs	r3, #1
 8002846:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 800284a:	f000 bc0a 	b.w	8003062 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002854:	b25b      	sxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	db09      	blt.n	800286e <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002860:	2b00      	cmp	r3, #0
 8002862:	d011      	beq.n	8002888 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2211      	movs	r2, #17
 800287a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002886:	e3ed      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2204      	movs	r2, #4
 800288c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002890:	e3e8      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3308      	adds	r3, #8
 8002896:	2228      	movs	r2, #40	@ 0x28
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f00b ffc0 	bl	800e820 <memset>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	2234      	movs	r2, #52	@ 0x34
 80028d2:	2100      	movs	r1, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f00b ffa3 	bl	800e820 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80028e0:	885b      	ldrh	r3, [r3, #2]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02e      	beq.n	8002944 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80028ec:	885b      	ldrh	r3, [r3, #2]
 80028ee:	f107 0110 	add.w	r1, r7, #16
 80028f2:	2234      	movs	r2, #52	@ 0x34
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fe6f 	bl	80065d8 <pal_os_datastore_write>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002900:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01d      	beq.n	8002944 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	22ff      	movs	r2, #255	@ 0xff
 800290c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2207      	movs	r2, #7
 8002914:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002926:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f240 1207 	movw	r2, #263	@ 0x107
 800293e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002942:	e38f      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff fb37 	bl	8001fba <ifx_i2c_prl_do_handshake>
 800294c:	4603      	mov	r3, r0
 800294e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002956:	f240 1207 	movw	r2, #263	@ 0x107
 800295a:	4293      	cmp	r3, r2
 800295c:	d109      	bne.n	8002972 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002964:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2207      	movs	r2, #7
 800296c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002970:	e378      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002978:	2b01      	cmp	r3, #1
 800297a:	d104      	bne.n	8002986 <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2204      	movs	r2, #4
 8002980:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002984:	e36e      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 800298c:	e36a      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002994:	b25b      	sxtb	r3, r3
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	b25b      	sxtb	r3, r3
 800299c:	f043 0320 	orr.w	r3, r3, #32
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d006      	beq.n	80029c6 <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80029be:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d122      	bne.n	8002a0c <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ca:	3301      	adds	r3, #1
 80029cc:	f113 0f10 	cmn.w	r3, #16
 80029d0:	d914      	bls.n	80029fc <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10f      	bne.n	80029fc <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2205      	movs	r2, #5
 80029e8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2211      	movs	r2, #17
 80029f6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 80029fa:	e333      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a00:	881a      	ldrh	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a06:	320d      	adds	r2, #13
 8002a08:	b292      	uxth	r2, r2
 8002a0a:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d007      	beq.n	8002a36 <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a2c:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	f040 80c2 	bne.w	8002bba <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f113 0f10 	cmn.w	r3, #16
 8002a40:	d914      	bls.n	8002a6c <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10f      	bne.n	8002a6c <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2205      	movs	r2, #5
 8002a58:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2211      	movs	r2, #17
 8002a66:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002a6a:	e2fb      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d13f      	bne.n	8002af6 <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7a:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002a92:	9203      	str	r2, [sp, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	9202      	str	r2, [sp, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f7ff f9ea 	bl	8001e7c <ifx_i2c_prl_decrypt_msg>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002aae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ab2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002ab6:	d118      	bne.n	8002aea <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	22ff      	movs	r2, #255	@ 0xff
 8002abc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002ae8:	e2bc      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002af4:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2205      	movs	r2, #5
 8002b04:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f003 fa51 	bl	8005fbc <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002b1e:	1d59      	adds	r1, r3, #5
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4603      	mov	r3, r0
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f7ff f960 	bl	8001dfa <ifx_i2c_prl_encrypt_msg>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002b40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b44:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002b48:	d118      	bne.n	8002b7c <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	22ff      	movs	r2, #255	@ 0xff
 8002b4e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2207      	movs	r2, #7
 8002b56:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002b7a:	e273      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002b86:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8002b98:	4413      	add	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fa91 	bl	80030d4 <ifx_i2c_tl_transceive>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002bb8:	e021      	b.n	8002bfe <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002bce:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002bd4:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002be2:	4413      	add	r3, r2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa6e 	bl	80030d4 <ifx_i2c_tl_transceive>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8002bfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c02:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002c06:	d11d      	bne.n	8002c44 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	22ff      	movs	r2, #255	@ 0xff
 8002c0c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2207      	movs	r2, #7
 8002c14:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002c3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8002c42:	e20f      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2203      	movs	r2, #3
 8002c54:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002c5e:	e201      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	3301      	adds	r3, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 f9c9 	bl	8005ffe <optiga_common_get_uint32>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d118      	bne.n	8002caa <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2207      	movs	r2, #7
 8002c84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002ca8:	e1dc      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d040      	beq.n	8002d38 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b40      	cmp	r3, #64	@ 0x40
 8002cbc:	d003      	beq.n	8002cc6 <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002cc2:	2b44      	cmp	r3, #68	@ 0x44
 8002cc4:	d10c      	bne.n	8002ce0 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002cc6:	893b      	ldrh	r3, [r7, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d004      	beq.n	8002cd6 <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d004      	beq.n	8002ce0 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d109      	bne.n	8002cf4 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002cf2:	e018      	b.n	8002d26 <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10e      	bne.n	8002d1c <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002d04:	2b11      	cmp	r3, #17
 8002d06:	d109      	bne.n	8002d1c <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d1a:	e004      	b.n	8002d26 <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002d22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2206      	movs	r2, #6
 8002d2a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	22ff      	movs	r2, #255	@ 0xff
 8002d32:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8002d36:	e195      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d018      	beq.n	8002d78 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	@ 0xff
 8002d4a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2207      	movs	r2, #7
 8002d52:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002d76:	e175      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d006      	beq.n	8002d92 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	f040 8082 	bne.w	8002e96 <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	2b0d      	cmp	r3, #13
 8002d96:	d818      	bhi.n	8002dca <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	22ff      	movs	r2, #255	@ 0xff
 8002d9c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2207      	movs	r2, #7
 8002da4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002db6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002dc8:	e14c      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d805      	bhi.n	8002de4 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d818      	bhi.n	8002e16 <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	22ff      	movs	r2, #255	@ 0xff
 8002de8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2207      	movs	r2, #7
 8002df0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002e14:	e126      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	3a0d      	subs	r2, #13
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002e38:	8818      	ldrh	r0, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002e42:	3305      	adds	r3, #5
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002e4a:	9203      	str	r2, [sp, #12]
 8002e4c:	2224      	movs	r2, #36	@ 0x24
 8002e4e:	9202      	str	r2, [sp, #8]
 8002e50:	2210      	movs	r2, #16
 8002e52:	9201      	str	r2, [sp, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4623      	mov	r3, r4
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff f80e 	bl	8001e7c <ifx_i2c_prl_decrypt_msg>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002e66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e6a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002e6e:	d108      	bne.n	8002e82 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2206      	movs	r2, #6
 8002e74:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8002e80:	e0f0      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002e92:	bf00      	nop
            break;
 8002e94:	e0e6      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d81c      	bhi.n	8002ed6 <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	22ff      	movs	r2, #255	@ 0xff
 8002ea8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 8002ec0:	e0d0      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002ed4:	e0c6      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002ef6:	e0b5      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b44      	cmp	r3, #68	@ 0x44
 8002efe:	d166      	bne.n	8002fce <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d104      	bne.n	8002f10 <ifx_i2c_prl_event_handler+0x7f0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d918      	bls.n	8002f42 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	22ff      	movs	r2, #255	@ 0xff
 8002f14:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002f40:	e090      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d004      	beq.n	8002f56 <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d136      	bne.n	8002fc4 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d91c      	bls.n	8002fb2 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	22ff      	movs	r2, #255	@ 0xff
 8002f7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2207      	movs	r2, #7
 8002f84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8002fb0:	e058      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 8002fc2:	e04f      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2207      	movs	r2, #7
 8002fc8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002fcc:	e04a      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d117      	bne.n	8003008 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	22ff      	movs	r2, #255	@ 0xff
 8002fdc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ff6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2207      	movs	r2, #7
 800300c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003010:	e028      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003018:	2bff      	cmp	r3, #255	@ 0xff
 800301a:	d00d      	beq.n	8003038 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7fe ff75 	bl	8001f0c <ifx_i2c_prl_send_alert>
 8003022:	4603      	mov	r3, r0
 8003024:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	22ff      	movs	r2, #255	@ 0xff
 800302c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003036:	e015      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003040:	e010      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800304e:	2300      	movs	r3, #0
 8003050:	2200      	movs	r2, #0
 8003052:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	47a0      	blx	r4
                exit_machine = FALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003060:	e000      	b.n	8003064 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003062:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003064:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003068:	2b01      	cmp	r3, #1
 800306a:	f43f ab9e 	beq.w	80027aa <ifx_i2c_prl_event_handler+0x8a>
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	374c      	adds	r7, #76	@ 0x4c
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800308a:	4911      	ldr	r1, [pc, #68]	@ (80030d0 <ifx_i2c_tl_init+0x58>)
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fc11 	bl	80008b4 <ifx_i2c_dl_init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003098:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800309c:	e014      	b.n	80030c8 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80030bc:	3b06      	subs	r3, #6
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	080033b9 	.word	0x080033b9

080030d4 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80030e4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80030e8:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d041      	beq.n	8003174 <ifx_i2c_tl_transceive+0xa0>
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03e      	beq.n	8003174 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d138      	bne.n	8003172 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003108:	f003 fc5f 	bl	80069ca <pal_os_timer_get_time_in_milliseconds>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003162:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f866 	bl	8003238 <ifx_i2c_tl_send_next_fragment>
 800316c:	4603      	mov	r3, r0
 800316e:	82fb      	strh	r3, [r7, #22]
 8003170:	e000      	b.n	8003174 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003172:	bf00      	nop
    } while (FALSE);
    return (status);
 8003174:	8afb      	ldrh	r3, [r7, #22]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800318c:	2b01      	cmp	r3, #1
 800318e:	d002      	beq.n	8003196 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003190:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003194:	e00f      	b.n	80031b6 <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f842 	bl	8003238 <ifx_i2c_tl_send_next_fragment>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80031cc:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <ifx_i2c_tl_calculate_pctr+0x38>
 80031e8:	897a      	ldrh	r2, [r7, #10]
 80031ea:	89bb      	ldrh	r3, [r7, #12]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d802      	bhi.n	80031f6 <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e019      	b.n	800322a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <ifx_i2c_tl_calculate_pctr+0x50>
 8003200:	897a      	ldrh	r2, [r7, #10]
 8003202:	89bb      	ldrh	r3, [r7, #12]
 8003204:	429a      	cmp	r2, r3
 8003206:	d902      	bls.n	800320e <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e00d      	b.n	800322a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <ifx_i2c_tl_calculate_pctr+0x68>
 8003218:	897a      	ldrh	r2, [r7, #10]
 800321a:	89bb      	ldrh	r3, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d902      	bls.n	8003226 <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003220:	2302      	movs	r3, #2
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e001      	b.n	800322a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8003226:	2304      	movs	r3, #4
 8003228:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003246:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ffb8 	bl	80031be <ifx_i2c_tl_calculate_pctr>
 800324e:	4603      	mov	r3, r0
 8003250:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003258:	461a      	mov	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003260:	1ad2      	subs	r2, r2, r3
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	429a      	cmp	r2, r3
 8003266:	da07      	bge.n	8003278 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003278:	7b7b      	ldrb	r3, [r7, #13]
 800327a:	f043 0308 	orr.w	r3, r3, #8
 800327e:	b2da      	uxtb	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 800328c:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800329a:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800329c:	89fa      	ldrh	r2, [r7, #14]
 800329e:	4619      	mov	r1, r3
 80032a0:	f00b fb03 	bl	800e8aa <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	4413      	add	r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fb36 	bl	8000930 <ifx_i2c_dl_send_frame>
 80032c4:	4603      	mov	r3, r0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2207      	movs	r2, #7
 80032de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd fb1e 	bl	8000930 <ifx_i2c_dl_send_frame>
 80032f4:	4603      	mov	r3, r0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	460a      	mov	r2, r1
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	4613      	mov	r3, r2
 800330e:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003310:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003314:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	2b07      	cmp	r3, #7
 800331a:	d00b      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d002      	beq.n	8003334 <ifx_i2c_tl_check_chaining_error+0x34>
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d110      	bne.n	8003356 <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	4a0b      	ldr	r2, [pc, #44]	@ (8003364 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003338:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800333c:	79ba      	ldrb	r2, [r7, #6]
 800333e:	429a      	cmp	r2, r3
 8003340:	d007      	beq.n	8003352 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800334c:	79ba      	ldrb	r2, [r7, #6]
 800334e:	429a      	cmp	r2, r3
 8003350:	d101      	bne.n	8003356 <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003352:	2300      	movs	r3, #0
 8003354:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003356:	89fb      	ldrh	r3, [r7, #14]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	0800f6a8 	.word	0x0800f6a8

08003368 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003374:	2300      	movs	r3, #0
 8003376:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f023 0307 	bic.w	r3, r3, #7
 800337e:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <presence_bit_check+0x42>
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800339e:	7b7b      	ldrb	r3, [r7, #13]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d002      	beq.n	80033aa <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 80033a4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80033a8:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 80033aa:	89fb      	ldrh	r3, [r7, #14]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	461a      	mov	r2, r3
 80033c4:	460b      	mov	r3, r1
 80033c6:	817b      	strh	r3, [r7, #10]
 80033c8:	4613      	mov	r3, r2
 80033ca:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d006      	beq.n	80033ec <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80033ec:	897b      	ldrh	r3, [r7, #10]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2206      	movs	r2, #6
 80033fa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003404:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003408:	893b      	ldrh	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	4619      	mov	r1, r3
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ffa8 	bl	8003368 <presence_bit_check>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2206      	movs	r2, #6
 8003422:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800342c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800343e:	3b01      	subs	r3, #1
 8003440:	2b07      	cmp	r3, #7
 8003442:	f200 81d0 	bhi.w	80037e6 <ifx_i2c_dl_event_handler+0x42e>
 8003446:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <ifx_i2c_dl_event_handler+0x94>)
 8003448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344c:	0800346d 	.word	0x0800346d
 8003450:	08003483 	.word	0x08003483
 8003454:	080037e7 	.word	0x080037e7
 8003458:	08003519 	.word	0x08003519
 800345c:	0800365f 	.word	0x0800365f
 8003460:	080037b5 	.word	0x080037b5
 8003464:	08003773 	.word	0x08003773
 8003468:	08003717 	.word	0x08003717
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 800346c:	2300      	movs	r3, #0
 800346e:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	2100      	movs	r1, #0
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	47a0      	blx	r4
            }
            break;
 8003480:	e1c3      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d040      	beq.n	800350e <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003498:	429a      	cmp	r2, r3
 800349a:	d215      	bcs.n	80034c8 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d104      	bne.n	80034ac <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2208      	movs	r2, #8
 80034a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80034aa:	e1ae      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 80034ac:	893b      	ldrh	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d004      	beq.n	80034bc <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2206      	movs	r2, #6
 80034b6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80034ba:	e1a6      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff feb9 	bl	8003238 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 80034c6:	e19f      	b.n	8003808 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2204      	movs	r2, #4
 80034cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 818a 	bne.w	8003808 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7fd fa4b 	bl	8000990 <ifx_i2c_dl_receive_frame>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2206      	movs	r2, #6
 8003504:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003508:	2300      	movs	r3, #0
 800350a:	757b      	strb	r3, [r7, #21]
            break;
 800350c:	e17c      	b.n	8003808 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2206      	movs	r2, #6
 8003512:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003516:	e178      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003518:	897b      	ldrh	r3, [r7, #10]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8098 	beq.w	8003654 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003524:	893b      	ldrh	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2206      	movs	r2, #6
 800352e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003532:	e16a      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800353a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800353e:	d114      	bne.n	800356a <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003540:	7dbb      	ldrb	r3, [r7, #22]
 8003542:	2b04      	cmp	r3, #4
 8003544:	d005      	beq.n	8003552 <ifx_i2c_dl_event_handler+0x19a>
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7fd fa22 	bl	8000990 <ifx_i2c_dl_receive_frame>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2206      	movs	r2, #6
 8003556:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 800355a:	e156      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2204      	movs	r2, #4
 8003560:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	757b      	strb	r3, [r7, #21]
                        break;
 8003568:	e14f      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003570:	7dbb      	ldrb	r3, [r7, #22]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fec3 	bl	8003300 <ifx_i2c_tl_check_chaining_error>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2208      	movs	r2, #8
 8003584:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003588:	e13f      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 800358a:	7dbb      	ldrb	r3, [r7, #22]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2206      	movs	r2, #6
 80035a2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 80035a6:	e130      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 80035a8:	7dbb      	ldrb	r3, [r7, #22]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <ifx_i2c_dl_event_handler+0x1fc>
 80035ae:	7dbb      	ldrb	r3, [r7, #22]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d14a      	bne.n	800364a <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80035ba:	461a      	mov	r2, r3
 80035bc:	893b      	ldrh	r3, [r7, #8]
 80035be:	4413      	add	r3, r2
 80035c0:	3b01      	subs	r3, #1
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 80035c8:	8812      	ldrh	r2, [r2, #0]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	dd09      	ble.n	80035e2 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035d4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2206      	movs	r2, #6
 80035dc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80035e0:	e113      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80035f2:	1898      	adds	r0, r3, r2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	461a      	mov	r2, r3
 80035fe:	f00b f954 	bl	800e8aa <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003608:	893b      	ldrh	r3, [r7, #8]
 800360a:	4413      	add	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 800362c:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2100      	movs	r1, #0
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003648:	e0df      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2205      	movs	r2, #5
 800364e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003652:	e0da      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2206      	movs	r2, #6
 8003658:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800365c:	e0d5      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 800365e:	893a      	ldrh	r2, [r7, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003666:	3301      	adds	r3, #1
 8003668:	429a      	cmp	r2, r3
 800366a:	d004      	beq.n	8003676 <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2207      	movs	r2, #7
 8003670:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003674:	e0c9      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800367c:	461a      	mov	r2, r3
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	3b01      	subs	r3, #1
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	4293      	cmp	r3, r2
 800368e:	dd09      	ble.n	80036a4 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003696:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2204      	movs	r2, #4
 800369e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80036a2:	e0b2      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2206      	movs	r2, #6
 80036ae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80036b2:	e0aa      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80036c0:	1898      	adds	r0, r3, r2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1c59      	adds	r1, r3, #1
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	461a      	mov	r2, r3
 80036cc:	f00b f8ed 	bl	800e8aa <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	4413      	add	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2204      	movs	r2, #4
 80036f8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7fd f947 	bl	8000990 <ifx_i2c_dl_receive_frame>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2206      	movs	r2, #6
 800370c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003710:	2300      	movs	r3, #0
 8003712:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003714:	e079      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d909      	bls.n	8003730 <ifx_i2c_dl_event_handler+0x378>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003722:	2b01      	cmp	r3, #1
 8003724:	d104      	bne.n	8003730 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2207      	movs	r2, #7
 800372a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800372e:	e06c      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	b2d1      	uxtb	r1, r2
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fd16 	bl	800317e <ifx_i2c_tl_resend_packets>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2206      	movs	r2, #6
 800375c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003760:	e053      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	757b      	strb	r3, [r7, #21]
            break;
 8003766:	e050      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2206      	movs	r2, #6
 800376c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003770:	e04b      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	b2d1      	uxtb	r1, r2
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f7ff fd9d 	bl	80032ce <ifx_i2c_tl_send_chaining_error>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2206      	movs	r2, #6
 800379e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 80037a2:	e032      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	757b      	strb	r3, [r7, #21]
            break;
 80037a8:	e02f      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2206      	movs	r2, #6
 80037ae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 80037b2:	e02a      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <ifx_i2c_dl_event_handler+0x410>
 80037c2:	893b      	ldrh	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80037dc:	2300      	movs	r3, #0
 80037de:	2200      	movs	r2, #0
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	47a0      	blx	r4
            }
            break;
 80037e4:	e011      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80037fe:	2300      	movs	r3, #0
 8003800:	2200      	movs	r2, #0
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	47a0      	blx	r4
            }
            break;
 8003806:	e000      	b.n	800380a <ifx_i2c_dl_event_handler+0x452>
            break;
 8003808:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 800380a:	7d7b      	ldrb	r3, [r7, #21]
 800380c:	2b01      	cmp	r3, #1
 800380e:	f43f ade3 	beq.w	80033d8 <ifx_i2c_dl_event_handler+0x20>
}
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}

0800381c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003824:	1d39      	adds	r1, r7, #4
 8003826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800382a:	2201      	movs	r2, #1
 800382c:	4803      	ldr	r0, [pc, #12]	@ (800383c <__io_putchar+0x20>)
 800382e:	f009 fe1b 	bl	800d468 <HAL_UART_Transmit>
    return ch;
 8003832:	687b      	ldr	r3, [r7, #4]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	2000067c 	.word	0x2000067c

08003840 <optiga_util_callback>:
//
//pFunction jumpToApplication;
//uint32_t jumpAddress;
// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 800384c:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <optiga_util_callback+0x20>)
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	8013      	strh	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	200006c4 	.word	0x200006c4

08003864 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d101      	bne.n	800387a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8003876:	f003 f841 	bl	80068fc <pal_os_event_timer_tick>
    }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <verify_firmware_signature>:


bool verify_firmware_signature(optiga_util_t *util)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	f5ad 5d50 	sub.w	sp, sp, #13312	@ 0x3400
 800388a:	b08e      	sub	sp, #56	@ 0x38
 800388c:	af04      	add	r7, sp, #16
 800388e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003892:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8003896:	6018      	str	r0, [r3, #0]
    uint8_t firmware_data[HASH_CALC_LEN];
    uint8_t calc_hash[32];
    uint8_t firmware_signature[SIGNATURE_SIZE];

    // Read firmware data from flash
    memcpy(firmware_data, (uint8_t *)BOOTLOADER_START_ADDR, HASH_CALC_LEN);
 8003898:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800389c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 80038a0:	4aa8      	ldr	r2, [pc, #672]	@ (8003b44 <verify_firmware_signature+0x2c0>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	4611      	mov	r1, r2
 80038a6:	f243 23e4 	movw	r3, #13028	@ 0x32e4
 80038aa:	461a      	mov	r2, r3
 80038ac:	f00a fffd 	bl	800e8aa <memcpy>

    // Calculate SHA-256
    mbedtls_sha256_context ctx;
    mbedtls_sha256_init(&ctx);
 80038b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038b4:	3b08      	subs	r3, #8
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 f8ac 	bl	8006a14 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret(&ctx, 0);  // 0 = SHA-256 (not 224)
 80038bc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038c0:	3b08      	subs	r3, #8
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f8c3 	bl	8006a50 <mbedtls_sha256_starts_ret>
    mbedtls_sha256_update_ret(&ctx, firmware_data, HASH_CALC_LEN);
 80038ca:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 80038ce:	3934      	subs	r1, #52	@ 0x34
 80038d0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038d4:	3b08      	subs	r3, #8
 80038d6:	f243 22e4 	movw	r2, #13028	@ 0x32e4
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fe6c 	bl	80085b8 <mbedtls_sha256_update_ret>
    mbedtls_sha256_finish_ret(&ctx, calc_hash);
 80038e0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80038e4:	3a14      	subs	r2, #20
 80038e6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038ea:	3b08      	subs	r3, #8
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 fed7 	bl	80086a2 <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free(&ctx);
 80038f4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038f8:	3b08      	subs	r3, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 f897 	bl	8006a2e <mbedtls_sha256_free>

    printf("\r\n🔹 Calculated SHA-256 Hash (%d bytes):\r\n", sizeof(calc_hash));
 8003900:	2120      	movs	r1, #32
 8003902:	4891      	ldr	r0, [pc, #580]	@ (8003b48 <verify_firmware_signature+0x2c4>)
 8003904:	f00a ff0c 	bl	800e720 <iprintf>
    for (int i = 0; i < sizeof(calc_hash); i++)
 8003908:	2300      	movs	r3, #0
 800390a:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 800390e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	e019      	b.n	800394a <verify_firmware_signature+0xc6>
        printf("%02X", calc_hash[i]);
 8003916:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800391a:	f5a3 7245 	sub.w	r2, r3, #788	@ 0x314
 800391e:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003922:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	4887      	ldr	r0, [pc, #540]	@ (8003b4c <verify_firmware_signature+0x2c8>)
 8003930:	f00a fef6 	bl	800e720 <iprintf>
    for (int i = 0; i < sizeof(calc_hash); i++)
 8003934:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003938:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3301      	adds	r3, #1
 8003940:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003944:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 800394e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b1f      	cmp	r3, #31
 8003956:	d9de      	bls.n	8003916 <verify_firmware_signature+0x92>
    printf("\r\n");
 8003958:	487d      	ldr	r0, [pc, #500]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 800395a:	f00a ff49 	bl	800e7f0 <puts>

    // Read digital signature from flash
    memcpy(firmware_signature, (uint8_t *)(BOOTLOADER_START_ADDR + SIGNATURE_OFFSET), SIGNATURE_SIZE);
 800395e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003962:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003966:	4a7b      	ldr	r2, [pc, #492]	@ (8003b54 <verify_firmware_signature+0x2d0>)
 8003968:	4618      	mov	r0, r3
 800396a:	4611      	mov	r1, r2
 800396c:	2347      	movs	r3, #71	@ 0x47
 800396e:	461a      	mov	r2, r3
 8003970:	f00a ff9b 	bl	800e8aa <memcpy>

    printf("🔹 Firmware Signature (%d bytes):\r\n", SIGNATURE_SIZE);
 8003974:	2147      	movs	r1, #71	@ 0x47
 8003976:	4878      	ldr	r0, [pc, #480]	@ (8003b58 <verify_firmware_signature+0x2d4>)
 8003978:	f00a fed2 	bl	800e720 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003982:	f102 0220 	add.w	r2, r2, #32
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e019      	b.n	80039be <verify_firmware_signature+0x13a>
        printf("%02X", firmware_signature[i]);
 800398a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 800398e:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 8003992:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003996:	f103 0320 	add.w	r3, r3, #32
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	486a      	ldr	r0, [pc, #424]	@ (8003b4c <verify_firmware_signature+0x2c8>)
 80039a4:	f00a febc 	bl	800e720 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 80039a8:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 80039ac:	f103 0320 	add.w	r3, r3, #32
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 80039b8:	f102 0220 	add.w	r2, r2, #32
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 80039c2:	f103 0320 	add.w	r3, r3, #32
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b46      	cmp	r3, #70	@ 0x46
 80039ca:	ddde      	ble.n	800398a <verify_firmware_signature+0x106>
    printf("\r\n");
 80039cc:	4860      	ldr	r0, [pc, #384]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 80039ce:	f00a ff0f 	bl	800e7f0 <puts>

    // Allocate memory and read public key from OID
    uint8_t public_key[80];
    uint16_t public_key_len = sizeof(public_key);
 80039d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80039d6:	f2a3 431a 	subw	r3, r3, #1050	@ 0x41a
 80039da:	2250      	movs	r2, #80	@ 0x50
 80039dc:	801a      	strh	r2, [r3, #0]

    optiga_lib_status = optiga_util_read_data(util, SIGNATURE_OID, 0, public_key, &public_key_len);
 80039de:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80039e2:	3a18      	subs	r2, #24
 80039e4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80039e8:	f2a3 4024 	subw	r0, r3, #1060	@ 0x424
 80039ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039f0:	3b1a      	subs	r3, #26
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	2200      	movs	r2, #0
 80039f8:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 80039fc:	6800      	ldr	r0, [r0, #0]
 80039fe:	f002 fbfb 	bl	80061f8 <optiga_util_read_data>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b55      	ldr	r3, [pc, #340]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003a08:	801a      	strh	r2, [r3, #0]
    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8003a0a:	4b54      	ldr	r3, [pc, #336]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d006      	beq.n	8003a22 <verify_firmware_signature+0x19e>
    {
        printf("❌ Failed to read public key from OID 0x%04X\r\n", SIGNATURE_OID);
 8003a14:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003a18:	4851      	ldr	r0, [pc, #324]	@ (8003b60 <verify_firmware_signature+0x2dc>)
 8003a1a:	f00a fe81 	bl	800e720 <iprintf>
        return false;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e08a      	b.n	8003b38 <verify_firmware_signature+0x2b4>
    }

    printf("🔹 Public Key (%d bytes) from OID 0x%04X:\r\n", public_key_len, SIGNATURE_OID);
 8003a22:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003a26:	f2a3 431a 	subw	r3, r3, #1050	@ 0x41a
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	f24e 02e8 	movw	r2, #57576	@ 0xe0e8
 8003a30:	4619      	mov	r1, r3
 8003a32:	484c      	ldr	r0, [pc, #304]	@ (8003b64 <verify_firmware_signature+0x2e0>)
 8003a34:	f00a fe74 	bl	800e720 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003a3e:	f102 021c 	add.w	r2, r2, #28
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e019      	b.n	8003a7a <verify_firmware_signature+0x1f6>
        printf("%02X", public_key[i]);
 8003a46:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003a4a:	f5a3 6283 	sub.w	r2, r3, #1048	@ 0x418
 8003a4e:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a52:	f103 031c 	add.w	r3, r3, #28
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	483b      	ldr	r0, [pc, #236]	@ (8003b4c <verify_firmware_signature+0x2c8>)
 8003a60:	f00a fe5e 	bl	800e720 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8003a64:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a68:	f103 031c 	add.w	r3, r3, #28
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003a74:	f102 021c 	add.w	r2, r2, #28
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003a7e:	f2a3 431a 	subw	r3, r3, #1050	@ 0x41a
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a8a:	f103 031c 	add.w	r3, r3, #28
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	dbd8      	blt.n	8003a46 <verify_firmware_signature+0x1c2>
    printf("\r\n");
 8003a94:	482e      	ldr	r0, [pc, #184]	@ (8003b50 <verify_firmware_signature+0x2cc>)
 8003a96:	f00a feab 	bl	800e7f0 <puts>

    // Verify signature
    optiga_crypt_t *me_crypt = optiga_crypt_create(0, optiga_util_callback, NULL);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4932      	ldr	r1, [pc, #200]	@ (8003b68 <verify_firmware_signature+0x2e4>)
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f002 f9f0 	bl	8005e84 <optiga_crypt_create>
 8003aa4:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003aa8:	f103 0318 	add.w	r3, r3, #24
 8003aac:	6018      	str	r0, [r3, #0]
    if (!me_crypt)
 8003aae:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003ab2:	f103 0318 	add.w	r3, r3, #24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <verify_firmware_signature+0x242>
    {
        printf("❌ Failed to create OPTIGA crypt instance!\r\n");
 8003abc:	482b      	ldr	r0, [pc, #172]	@ (8003b6c <verify_firmware_signature+0x2e8>)
 8003abe:	f00a fe97 	bl	800e7f0 <puts>
        return false;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e038      	b.n	8003b38 <verify_firmware_signature+0x2b4>
    }

    optiga_lib_status = OPTIGA_LIB_BUSY;
 8003ac6:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	801a      	strh	r2, [r3, #0]
    optiga_crypt_ecdsa_verify(me_crypt,
 8003acc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003ad0:	3b1c      	subs	r3, #28
 8003ad2:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8003ad6:	3914      	subs	r1, #20
 8003ad8:	f24e 02e8 	movw	r2, #57576	@ 0xe0e8
 8003adc:	9202      	str	r2, [sp, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	9201      	str	r2, [sp, #4]
 8003ae2:	2247      	movs	r2, #71	@ 0x47
 8003ae4:	9200      	str	r2, [sp, #0]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f507 5050 	add.w	r0, r7, #13312	@ 0x3400
 8003aec:	f100 0018 	add.w	r0, r0, #24
 8003af0:	6800      	ldr	r0, [r0, #0]
 8003af2:	f002 fa2e 	bl	8005f52 <optiga_crypt_ecdsa_verify>
                               firmware_signature,
                               SIGNATURE_SIZE,
                               OPTIGA_CRYPT_OID_DATA,
                               SIGNATURE_OID);

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003af6:	e001      	b.n	8003afc <verify_firmware_signature+0x278>
        pal_os_event_trigger_registered_callback();
 8003af8:	f002 fede 	bl	80068b8 <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003afc:	4b17      	ldr	r3, [pc, #92]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d0f8      	beq.n	8003af8 <verify_firmware_signature+0x274>

    optiga_crypt_destroy(me_crypt);
 8003b06:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003b0a:	f103 0318 	add.w	r3, r3, #24
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	f002 f9fc 	bl	8005f0c <optiga_crypt_destroy>

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8003b14:	4b11      	ldr	r3, [pc, #68]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <verify_firmware_signature+0x2ac>
    {
        printf("❌ Signature verification FAILED! Status: 0x%04X\r\n", optiga_lib_status);
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <verify_firmware_signature+0x2d8>)
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	4619      	mov	r1, r3
 8003b26:	4812      	ldr	r0, [pc, #72]	@ (8003b70 <verify_firmware_signature+0x2ec>)
 8003b28:	f00a fdfa 	bl	800e720 <iprintf>
        return false;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e003      	b.n	8003b38 <verify_firmware_signature+0x2b4>
    }

    printf("✅ Firmware signature verified successfully.\r\n");
 8003b30:	4810      	ldr	r0, [pc, #64]	@ (8003b74 <verify_firmware_signature+0x2f0>)
 8003b32:	f00a fe5d 	bl	800e7f0 <puts>
    return true;
 8003b36:	2301      	movs	r3, #1
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f507 5750 	add.w	r7, r7, #13312	@ 0x3400
 8003b3e:	3728      	adds	r7, #40	@ 0x28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	08020000 	.word	0x08020000
 8003b48:	0800f3c4 	.word	0x0800f3c4
 8003b4c:	0800f3f4 	.word	0x0800f3f4
 8003b50:	0800f3fc 	.word	0x0800f3fc
 8003b54:	080232e4 	.word	0x080232e4
 8003b58:	0800f400 	.word	0x0800f400
 8003b5c:	200006c4 	.word	0x200006c4
 8003b60:	0800f428 	.word	0x0800f428
 8003b64:	0800f458 	.word	0x0800f458
 8003b68:	08003841 	.word	0x08003841
 8003b6c:	0800f488 	.word	0x0800f488
 8003b70:	0800f4b8 	.word	0x0800f4b8
 8003b74:	0800f4ec 	.word	0x0800f4ec

08003b78 <verify_firmware_integrity>:
/* Replace verify_bootloader_hash() with combined hash+signature check */
bool verify_firmware_integrity(optiga_util_t *util)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
    return verify_firmware_signature(util);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff fe7f 	bl	8003884 <verify_firmware_signature>
 8003b86:	4603      	mov	r3, r0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <optiga_main_logic>:
void optiga_main_logic(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 8003b9a:	f240 3302 	movw	r3, #770	@ 0x302
 8003b9e:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	492b      	ldr	r1, [pc, #172]	@ (8003c50 <optiga_main_logic+0xc0>)
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f002 fa8b 	bl	80060c0 <optiga_util_create>
 8003baa:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8003bb2:	4828      	ldr	r0, [pc, #160]	@ (8003c54 <optiga_main_logic+0xc4>)
 8003bb4:	f00a fe1c 	bl	800e7f0 <puts>
        return;
 8003bb8:	e046      	b.n	8003c48 <optiga_main_logic+0xb8>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003bba:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <optiga_main_logic+0xc8>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f002 fabe 	bl	8006144 <optiga_util_open_application>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 8003bd2:	4822      	ldr	r0, [pc, #136]	@ (8003c5c <optiga_main_logic+0xcc>)
 8003bd4:	f00a fe0c 	bl	800e7f0 <puts>
            continue;
 8003bd8:	e028      	b.n	8003c2c <optiga_main_logic+0x9c>
        }
        HAL_Delay(100);
 8003bda:	2064      	movs	r0, #100	@ 0x64
 8003bdc:	f005 f968 	bl	8008eb0 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003be0:	e001      	b.n	8003be6 <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8003be2:	f002 fe69 	bl	80068b8 <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003be6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <optiga_main_logic+0xc8>)
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d0f8      	beq.n	8003be2 <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 8003bf0:	2064      	movs	r0, #100	@ 0x64
 8003bf2:	f005 f95d 	bl	8008eb0 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 8003bf6:	4b18      	ldr	r3, [pc, #96]	@ (8003c58 <optiga_main_logic+0xc8>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <optiga_main_logic+0x86>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8003c00:	4817      	ldr	r0, [pc, #92]	@ (8003c60 <optiga_main_logic+0xd0>)
 8003c02:	f00a fdf5 	bl	800e7f0 <puts>
            break;
 8003c06:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    if (verify_firmware_integrity(me_util)) {
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ffb5 	bl	8003b78 <verify_firmware_integrity>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00f      	beq.n	8003c34 <optiga_main_logic+0xa4>
 8003c14:	e00b      	b.n	8003c2e <optiga_main_logic+0x9e>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <optiga_main_logic+0xc8>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4811      	ldr	r0, [pc, #68]	@ (8003c64 <optiga_main_logic+0xd4>)
 8003c20:	f00a fd7e 	bl	800e720 <iprintf>
            HAL_Delay(2000);
 8003c24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003c28:	f005 f942 	bl	8008eb0 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003c2c:	e7c5      	b.n	8003bba <optiga_main_logic+0x2a>
            goto_application();
 8003c2e:	f000 fa37 	bl	80040a0 <goto_application>
 8003c32:	e009      	b.n	8003c48 <optiga_main_logic+0xb8>
        } else {
            while (1) {
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003c34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c38:	480b      	ldr	r0, [pc, #44]	@ (8003c68 <optiga_main_logic+0xd8>)
 8003c3a:	f005 fcac 	bl	8009596 <HAL_GPIO_TogglePin>
                HAL_Delay(500);
 8003c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c42:	f005 f935 	bl	8008eb0 <HAL_Delay>
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8003c46:	e7f5      	b.n	8003c34 <optiga_main_logic+0xa4>
            }
        }
}
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	08003841 	.word	0x08003841
 8003c54:	0800f51c 	.word	0x0800f51c
 8003c58:	200006c4 	.word	0x200006c4
 8003c5c:	0800f544 	.word	0x0800f544
 8003c60:	0800f584 	.word	0x0800f584
 8003c64:	0800f5b0 	.word	0x0800f5b0
 8003c68:	40020400 	.word	0x40020400

08003c6c <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8003c74:	4811      	ldr	r0, [pc, #68]	@ (8003cbc <I2C_Scan+0x50>)
 8003c76:	f00a fdbb 	bl	800e7f0 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	e013      	b.n	8003ca8 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	b299      	uxth	r1, r3
 8003c88:	230a      	movs	r3, #10
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f006 f94b 	bl	8009f28 <HAL_I2C_IsDeviceReady>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4808      	ldr	r0, [pc, #32]	@ (8003cc0 <I2C_Scan+0x54>)
 8003c9e:	f00a fd3f 	bl	800e720 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	dae7      	bge.n	8003c80 <I2C_Scan+0x14>
        }
    }
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	0800f5e0 	.word	0x0800f5e0
 8003cc0:	0800f5f4 	.word	0x0800f5f4

08003cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cc8:	f005 f880 	bl	8008dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ccc:	f000 f854 	bl	8003d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cd0:	f000 f96e 	bl	8003fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cd4:	f000 f942 	bl	8003f5c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003cd8:	f000 f8c6 	bl	8003e68 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003cdc:	f000 f8f2 	bl	8003ec4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003ce0:	f000 f8b6 	bl	8003e50 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003ce4:	481b      	ldr	r0, [pc, #108]	@ (8003d54 <main+0x90>)
 8003ce6:	f008 ff8b 	bl	800cc00 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	201c      	movs	r0, #28
 8003cf0:	f005 f9dd 	bl	80090ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003cf4:	201c      	movs	r0, #28
 8003cf6:	f005 f9f6 	bl	80090e6 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2120      	movs	r1, #32
 8003cfe:	4816      	ldr	r0, [pc, #88]	@ (8003d58 <main+0x94>)
 8003d00:	f005 fc30 	bl	8009564 <HAL_GPIO_WritePin>

  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8003d04:	2301      	movs	r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4814      	ldr	r0, [pc, #80]	@ (8003d5c <main+0x98>)
 8003d0c:	f00a fd08 	bl	800e720 <iprintf>

      printf("Powering ON OPTIGA Trust M...\r\n");
 8003d10:	4813      	ldr	r0, [pc, #76]	@ (8003d60 <main+0x9c>)
 8003d12:	f00a fd6d 	bl	800e7f0 <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 8003d16:	4813      	ldr	r0, [pc, #76]	@ (8003d64 <main+0xa0>)
 8003d18:	f002 fb59 	bl	80063ce <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 8003d1c:	4812      	ldr	r0, [pc, #72]	@ (8003d68 <main+0xa4>)
 8003d1e:	f00a fd67 	bl	800e7f0 <puts>
      pal_gpio_set_low(&optiga_reset_0);
 8003d22:	4812      	ldr	r0, [pc, #72]	@ (8003d6c <main+0xa8>)
 8003d24:	f002 fb63 	bl	80063ee <pal_gpio_set_low>
      HAL_Delay(10);
 8003d28:	200a      	movs	r0, #10
 8003d2a:	f005 f8c1 	bl	8008eb0 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 8003d2e:	480f      	ldr	r0, [pc, #60]	@ (8003d6c <main+0xa8>)
 8003d30:	f002 fb4d 	bl	80063ce <pal_gpio_set_high>
      HAL_Delay(10);
 8003d34:	200a      	movs	r0, #10
 8003d36:	f005 f8bb 	bl	8008eb0 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 8003d3a:	480d      	ldr	r0, [pc, #52]	@ (8003d70 <main+0xac>)
 8003d3c:	f7ff ff96 	bl	8003c6c <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 8003d40:	480c      	ldr	r0, [pc, #48]	@ (8003d74 <main+0xb0>)
 8003d42:	f00a fd55 	bl	800e7f0 <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 8003d46:	2064      	movs	r0, #100	@ 0x64
 8003d48:	f005 f8b2 	bl	8008eb0 <HAL_Delay>
      optiga_main_logic();
 8003d4c:	f7ff ff20 	bl	8003b90 <optiga_main_logic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <main+0x8c>
 8003d54:	20000634 	.word	0x20000634
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	0800f610 	.word	0x0800f610
 8003d60:	0800f630 	.word	0x0800f630
 8003d64:	200004fc 	.word	0x200004fc
 8003d68:	0800f650 	.word	0x0800f650
 8003d6c:	20000504 	.word	0x20000504
 8003d70:	200005e0 	.word	0x200005e0
 8003d74:	0800f668 	.word	0x0800f668

08003d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b094      	sub	sp, #80	@ 0x50
 8003d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d7e:	f107 0320 	add.w	r3, r7, #32
 8003d82:	2230      	movs	r2, #48	@ 0x30
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f00a fd4a 	bl	800e820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <SystemClock_Config+0xd0>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	4a28      	ldr	r2, [pc, #160]	@ (8003e48 <SystemClock_Config+0xd0>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dac:	4b26      	ldr	r3, [pc, #152]	@ (8003e48 <SystemClock_Config+0xd0>)
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003db8:	2300      	movs	r3, #0
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	4b23      	ldr	r3, [pc, #140]	@ (8003e4c <SystemClock_Config+0xd4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003dc4:	4a21      	ldr	r2, [pc, #132]	@ (8003e4c <SystemClock_Config+0xd4>)
 8003dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e4c <SystemClock_Config+0xd4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003de0:	2310      	movs	r3, #16
 8003de2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003de4:	2302      	movs	r3, #2
 8003de6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003dec:	2310      	movs	r3, #16
 8003dee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003df0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003df6:	2304      	movs	r3, #4
 8003df8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003dfa:	2307      	movs	r3, #7
 8003dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dfe:	f107 0320 	add.w	r3, r7, #32
 8003e02:	4618      	mov	r0, r3
 8003e04:	f008 fa14 	bl	800c230 <HAL_RCC_OscConfig>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003e0e:	f000 f96d 	bl	80040ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e12:	230f      	movs	r3, #15
 8003e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e16:	2302      	movs	r3, #2
 8003e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f008 fc76 	bl	800c720 <HAL_RCC_ClockConfig>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003e3a:	f000 f957 	bl	80040ec <Error_Handler>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3750      	adds	r7, #80	@ 0x50
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40007000 	.word	0x40007000

08003e50 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003e54:	2200      	movs	r2, #0
 8003e56:	2100      	movs	r1, #0
 8003e58:	201f      	movs	r0, #31
 8003e5a:	f005 f928 	bl	80090ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e5e:	201f      	movs	r0, #31
 8003e60:	f005 f941 	bl	80090e6 <HAL_NVIC_EnableIRQ>
}
 8003e64:	bf00      	nop
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e6c:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e6e:	4a13      	ldr	r2, [pc, #76]	@ (8003ebc <MX_I2C1_Init+0x54>)
 8003e70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003e72:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e74:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <MX_I2C1_Init+0x58>)
 8003e76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e78:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e84:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e92:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e98:	4b07      	ldr	r3, [pc, #28]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e9e:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ea4:	4804      	ldr	r0, [pc, #16]	@ (8003eb8 <MX_I2C1_Init+0x50>)
 8003ea6:	f005 fbb5 	bl	8009614 <HAL_I2C_Init>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003eb0:	f000 f91c 	bl	80040ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003eb4:	bf00      	nop
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200005e0 	.word	0x200005e0
 8003ebc:	40005400 	.word	0x40005400
 8003ec0:	00061a80 	.word	0x00061a80

08003ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eca:	f107 0308 	add.w	r3, r7, #8
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed8:	463b      	mov	r3, r7
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003ee2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003eea:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef0:	4b19      	ldr	r3, [pc, #100]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8003ef6:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003ef8:	2209      	movs	r2, #9
 8003efa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efc:	4b16      	ldr	r3, [pc, #88]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f08:	4813      	ldr	r0, [pc, #76]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003f0a:	f008 fe29 	bl	800cb60 <HAL_TIM_Base_Init>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f14:	f000 f8ea 	bl	80040ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f1e:	f107 0308 	add.w	r3, r7, #8
 8003f22:	4619      	mov	r1, r3
 8003f24:	480c      	ldr	r0, [pc, #48]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003f26:	f008 ffbd 	bl	800cea4 <HAL_TIM_ConfigClockSource>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003f30:	f000 f8dc 	bl	80040ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f3c:	463b      	mov	r3, r7
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4805      	ldr	r0, [pc, #20]	@ (8003f58 <MX_TIM2_Init+0x94>)
 8003f42:	f009 f9bf 	bl	800d2c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003f4c:	f000 f8ce 	bl	80040ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f50:	bf00      	nop
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	20000634 	.word	0x20000634

08003f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f60:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f62:	4a12      	ldr	r2, [pc, #72]	@ (8003fac <MX_USART2_UART_Init+0x50>)
 8003f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f80:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f92:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <MX_USART2_UART_Init+0x4c>)
 8003f94:	f009 fa18 	bl	800d3c8 <HAL_UART_Init>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003f9e:	f000 f8a5 	bl	80040ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2000067c 	.word	0x2000067c
 8003fac:	40004400 	.word	0x40004400

08003fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	4b32      	ldr	r3, [pc, #200]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4a31      	ldr	r2, [pc, #196]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	4a2a      	ldr	r2, [pc, #168]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8003fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff2:	4b28      	ldr	r3, [pc, #160]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	4a23      	ldr	r2, [pc, #140]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6313      	str	r3, [r2, #48]	@ 0x30
 800400e:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <MX_GPIO_Init+0xe4>)
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	6313      	str	r3, [r2, #48]	@ 0x30
 800402a:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <MX_GPIO_Init+0xe4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8004036:	2200      	movs	r2, #0
 8004038:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800403c:	4816      	ldr	r0, [pc, #88]	@ (8004098 <MX_GPIO_Init+0xe8>)
 800403e:	f005 fa91 	bl	8009564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004042:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004048:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800404c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004052:	f107 0314 	add.w	r3, r7, #20
 8004056:	4619      	mov	r1, r3
 8004058:	4810      	ldr	r0, [pc, #64]	@ (800409c <MX_GPIO_Init+0xec>)
 800405a:	f005 f8ff 	bl	800925c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 800405e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004064:	2301      	movs	r3, #1
 8004066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800406c:	2300      	movs	r3, #0
 800406e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4619      	mov	r1, r3
 8004076:	4808      	ldr	r0, [pc, #32]	@ (8004098 <MX_GPIO_Init+0xe8>)
 8004078:	f005 f8f0 	bl	800925c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800407c:	2200      	movs	r2, #0
 800407e:	2100      	movs	r1, #0
 8004080:	2028      	movs	r0, #40	@ 0x28
 8004082:	f005 f814 	bl	80090ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004086:	2028      	movs	r0, #40	@ 0x28
 8004088:	f005 f82d 	bl	80090e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	@ 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	40020000 	.word	0x40020000
 800409c:	40020800 	.word	0x40020800

080040a0 <goto_application>:

/* USER CODE BEGIN 4 */


static void goto_application(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
    printf("Jumping to application...\r\n");
 80040a6:	480c      	ldr	r0, [pc, #48]	@ (80040d8 <goto_application+0x38>)
 80040a8:	f00a fba2 	bl	800e7f0 <puts>

    // Check if the value at the application's start is a valid stack pointer (RAM range)
    jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80040ac:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <goto_application+0x3c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a0b      	ldr	r2, [pc, #44]	@ (80040e0 <goto_application+0x40>)
 80040b2:	6013      	str	r3, [r2, #0]
   	      /* Jump to user application */
   	      jumpToApplication = (pFunction)jumpAddress;
 80040b4:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <goto_application+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <goto_application+0x44>)
 80040bc:	601a      	str	r2, [r3, #0]
   	      /* Initialize user application's Stack Pointer */
   	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80040be:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <goto_application+0x48>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f383 8808 	msr	MSP, r3
}
 80040ca:	bf00      	nop
   	      jumpToApplication();
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <goto_application+0x44>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4798      	blx	r3

    while (1); // should never be hit if jump is successful
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <goto_application+0x32>
 80040d6:	bf00      	nop
 80040d8:	0800f68c 	.word	0x0800f68c
 80040dc:	08020004 	.word	0x08020004
 80040e0:	200005dc 	.word	0x200005dc
 80040e4:	200005d8 	.word	0x200005d8
 80040e8:	08020000 	.word	0x08020000

080040ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040f0:	b672      	cpsid	i
}
 80040f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <Error_Handler+0x8>

080040f8 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
 8004104:	4613      	mov	r3, r2
 8004106:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8004108:	78bb      	ldrb	r3, [r7, #2]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d00e      	beq.n	800412c <optiga_cmd_set_shielded_connection_option+0x34>
 800410e:	2b02      	cmp	r3, #2
 8004110:	dc10      	bgt.n	8004134 <optiga_cmd_set_shielded_connection_option+0x3c>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <optiga_cmd_set_shielded_connection_option+0x24>
 8004116:	2b01      	cmp	r3, #1
 8004118:	d004      	beq.n	8004124 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 800411a:	e00b      	b.n	8004134 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	769a      	strb	r2, [r3, #26]
        break;
 8004122:	e008      	b.n	8004136 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	76da      	strb	r2, [r3, #27]
        break;
 800412a:	e004      	b.n	8004136 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	771a      	strb	r2, [r3, #28]
        break;
 8004132:	e000      	b.n	8004136 <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8004134:	bf00      	nop
    }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
 800414e:	460b      	mov	r3, r1
 8004150:	71bb      	strb	r3, [r7, #6]
 8004152:	4613      	mov	r3, r2
 8004154:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	79fa      	ldrb	r2, [r7, #7]
 800415a:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	79ba      	ldrb	r2, [r7, #6]
 8004162:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004164:	88bb      	ldrh	r3, [r7, #4]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b29a      	uxth	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	3302      	adds	r3, #2
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3303      	adds	r3, #3
 8004176:	88ba      	ldrh	r2, [r7, #4]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60ba      	str	r2, [r7, #8]
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	4603      	mov	r3, r0
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	460b      	mov	r3, r1
 8004198:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 80041a0:	8afb      	ldrh	r3, [r7, #22]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	82fa      	strh	r2, [r7, #22]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4413      	add	r3, r2
 80041ac:	7bfa      	ldrb	r2, [r7, #15]
 80041ae:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 80041b0:	89bb      	ldrh	r3, [r7, #12]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	8afb      	ldrh	r3, [r7, #22]
 80041b8:	1c59      	adds	r1, r3, #1
 80041ba:	82f9      	strh	r1, [r7, #22]
 80041bc:	4619      	mov	r1, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	440b      	add	r3, r1
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	82fa      	strh	r2, [r7, #22]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4413      	add	r3, r2
 80041d2:	89ba      	ldrh	r2, [r7, #12]
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8afa      	ldrh	r2, [r7, #22]
 80041dc:	801a      	strh	r2, [r3, #0]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 80041f2:	2100      	movs	r1, #0
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 ff6f 	bl	80050d8 <optiga_cmd_execute_handler>
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	461a      	mov	r2, r3
 800420e:	460b      	mov	r3, r1
 8004210:	72fb      	strb	r3, [r7, #11]
 8004212:	4613      	mov	r3, r2
 8004214:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	7aba      	ldrb	r2, [r7, #10]
 8004220:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	7e3a      	ldrb	r2, [r7, #24]
 8004226:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	7afa      	ldrb	r2, [r7, #11]
 8004238:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8c3a      	ldrh	r2, [r7, #32]
 800423e:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8004240:	2100      	movs	r1, #0
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 ff48 	bl	80050d8 <optiga_cmd_execute_handler>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3308      	adds	r3, #8
 800425c:	4618      	mov	r0, r3
 800425e:	f001 fece 	bl	8005ffe <optiga_common_get_uint32>
 8004262:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 800426a:	d201      	bcs.n	8004270 <optiga_cmd_session_available+0x20>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <optiga_cmd_session_available+0x22>
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8a9b      	ldrh	r3, [r3, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11d      	bne.n	80042d0 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004294:	2300      	movs	r3, #0
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e017      	b.n	80042ca <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d00e      	beq.n	80042c4 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	b21a      	sxth	r2, r3
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <optiga_cmd_session_assign+0x60>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b21b      	sxth	r3, r3
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4413      	add	r3, r2
 80042bc:	2210      	movs	r2, #16
 80042be:	701a      	strb	r2, [r3, #0]
                break;
 80042c0:	bf00      	nop
            }
        }
    }
}
 80042c2:	e005      	b.n	80042d0 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	3301      	adds	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d9e4      	bls.n	800429a <optiga_cmd_session_assign+0x1e>
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	ffffe100 	.word	0xffffe100

080042e0 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3308      	adds	r3, #8
 80042ee:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8a9b      	ldrh	r3, [r3, #20]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00d      	beq.n	8004314 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8a9b      	ldrh	r3, [r3, #20]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800430a:	7afb      	ldrb	r3, [r7, #11]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
    }
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
 800432c:	4613      	mov	r3, r2
 800432e:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e027      	b.n	800438e <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d002      	beq.n	800434a <optiga_cmd_queue_get_count_of+0x2a>
 8004344:	2b09      	cmp	r3, #9
 8004346:	d00c      	beq.n	8004362 <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 8004348:	e017      	b.n	800437a <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 800434a:	7bfa      	ldrb	r2, [r7, #15]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	737b      	strb	r3, [r7, #13]
            break;
 8004360:	e00b      	b.n	800437a <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	737b      	strb	r3, [r7, #13]
            break;
 8004378:	bf00      	nop
        }
        if (state_to_check == slot_value)
 800437a:	78ba      	ldrb	r2, [r7, #2]
 800437c:	7b7b      	ldrb	r3, [r7, #13]
 800437e:	429a      	cmp	r2, r3
 8004380:	d102      	bne.n	8004388 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 8004382:	7bbb      	ldrb	r3, [r7, #14]
 8004384:	3301      	adds	r3, #1
 8004386:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	3301      	adds	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d9d4      	bls.n	800433e <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8004394:	7bbb      	ldrb	r3, [r7, #14]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e01f      	b.n	80043f2 <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	4613      	mov	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
           break;
 80043ea:	e006      	b.n	80043fa <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	3301      	adds	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d9dc      	bls.n	80043b2 <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7f9b      	ldrb	r3, [r3, #30]
 8004416:	4619      	mov	r1, r3
 8004418:	460b      	mov	r3, r1
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	440b      	add	r3, r1
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	7f9b      	ldrb	r3, [r3, #30]
 8004432:	4619      	mov	r1, r3
 8004434:	460b      	mov	r3, r1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	440b      	add	r3, r1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	779a      	strb	r2, [r3, #30]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004464:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 8004466:	23ff      	movs	r3, #255	@ 0xff
 8004468:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 800446a:	2300      	movs	r3, #0
 800446c:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004478:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800447a:	2202      	movs	r2, #2
 800447c:	2109      	movs	r1, #9
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f7ff ff4e 	bl	8004320 <optiga_cmd_queue_get_count_of>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d107      	bne.n	800449a <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800448a:	2208      	movs	r2, #8
 800448c:	2109      	movs	r1, #9
 800448e:	6978      	ldr	r0, [r7, #20]
 8004490:	f7ff ff46 	bl	8004320 <optiga_cmd_queue_get_count_of>
 8004494:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00f      	beq.n	80044ba <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800449a:	2204      	movs	r2, #4
 800449c:	2109      	movs	r1, #9
 800449e:	6978      	ldr	r0, [r7, #20]
 80044a0:	f7ff ff3e 	bl	8004320 <optiga_cmd_queue_get_count_of>
 80044a4:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10f      	bne.n	80044ca <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 80044aa:	2223      	movs	r2, #35	@ 0x23
 80044ac:	2108      	movs	r1, #8
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff ff36 	bl	8004320 <optiga_cmd_queue_get_count_of>
 80044b4:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80044ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	496d      	ldr	r1, [pc, #436]	@ (8004678 <optiga_cmd_queue_scheduler+0x220>)
 80044c2:	6938      	ldr	r0, [r7, #16]
 80044c4:	f002 f9cc 	bl	8006860 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 80044c8:	e0d2      	b.n	8004670 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 80044ca:	6938      	ldr	r0, [r7, #16]
 80044cc:	f002 f9a2 	bl	8006814 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 80044d0:	7e7b      	ldrb	r3, [r7, #25]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 80044de:	2300      	movs	r3, #0
 80044e0:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	76fb      	strb	r3, [r7, #27]
 80044e6:	e05b      	b.n	80045a0 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 80044e8:	7efa      	ldrb	r2, [r7, #27]
 80044ea:	4613      	mov	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4413      	add	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 80044fc:	2208      	movs	r2, #8
 80044fe:	2109      	movs	r1, #9
 8004500:	6978      	ldr	r0, [r7, #20]
 8004502:	f7ff ff0d 	bl	8004320 <optiga_cmd_queue_get_count_of>
 8004506:	4603      	mov	r3, r0
 8004508:	2b01      	cmp	r3, #1
 800450a:	d10d      	bne.n	8004528 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	7a5b      	ldrb	r3, [r3, #9]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d142      	bne.n	800459a <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004518:	2b23      	cmp	r3, #35	@ 0x23
 800451a:	d13e      	bne.n	800459a <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8004522:	7efb      	ldrb	r3, [r7, #27]
 8004524:	76bb      	strb	r3, [r7, #26]
 8004526:	e038      	b.n	800459a <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	7a5b      	ldrb	r3, [r3, #9]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d134      	bne.n	800459a <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800453a:	429a      	cmp	r2, r3
 800453c:	d201      	bcs.n	8004542 <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 800453e:	2301      	movs	r3, #1
 8004540:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	429a      	cmp	r2, r3
 800454a:	d326      	bcc.n	800459a <optiga_cmd_queue_scheduler+0x142>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004556:	429a      	cmp	r2, r3
 8004558:	d31f      	bcc.n	800459a <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800455e:	2b22      	cmp	r3, #34	@ 0x22
 8004560:	d105      	bne.n	800456e <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f7ff fe74 	bl	8004250 <optiga_cmd_session_available>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d010      	beq.n	8004590 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004572:	2b22      	cmp	r3, #34	@ 0x22
 8004574:	d104      	bne.n	8004580 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	8a9b      	ldrh	r3, [r3, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004584:	2b21      	cmp	r3, #33	@ 0x21
 8004586:	d003      	beq.n	8004590 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 800458c:	2b23      	cmp	r3, #35	@ 0x23
 800458e:	d104      	bne.n	800459a <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 8004596:	7efb      	ldrb	r3, [r7, #27]
 8004598:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800459a:	7efb      	ldrb	r3, [r7, #27]
 800459c:	3301      	adds	r3, #1
 800459e:	76fb      	strb	r3, [r7, #27]
 80045a0:	7efb      	ldrb	r3, [r7, #27]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d9a0      	bls.n	80044e8 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 80045a6:	7ebb      	ldrb	r3, [r7, #26]
 80045a8:	2bff      	cmp	r3, #255	@ 0xff
 80045aa:	d102      	bne.n	80045b2 <optiga_cmd_queue_scheduler+0x15a>
 80045ac:	7e7b      	ldrb	r3, [r7, #25]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d08e      	beq.n	80044d0 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 80045b2:	7ebb      	ldrb	r3, [r7, #26]
 80045b4:	2bff      	cmp	r3, #255	@ 0xff
 80045b6:	d054      	beq.n	8004662 <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 80045b8:	7eba      	ldrb	r2, [r7, #26]
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80045cc:	7eba      	ldrb	r2, [r7, #26]
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	4613      	mov	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b22      	cmp	r3, #34	@ 0x22
 80045e2:	d111      	bne.n	8004608 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10c      	bne.n	8004608 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 80045ee:	7eba      	ldrb	r2, [r7, #26]
 80045f0:	6979      	ldr	r1, [r7, #20]
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fe3a 	bl	800427c <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8004608:	7eba      	ldrb	r2, [r7, #26]
 800460a:	6979      	ldr	r1, [r7, #20]
 800460c:	4613      	mov	r3, r2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004622:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8004624:	7eba      	ldrb	r2, [r7, #26]
 8004626:	6979      	ldr	r1, [r7, #20]
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	2332      	movs	r3, #50	@ 0x32
 800463a:	4910      	ldr	r1, [pc, #64]	@ (800467c <optiga_cmd_queue_scheduler+0x224>)
 800463c:	6938      	ldr	r0, [r7, #16]
 800463e:	f002 f90f 	bl	8006860 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8004642:	7eba      	ldrb	r2, [r7, #26]
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	4613      	mov	r3, r2
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004654:	2204      	movs	r2, #4
 8004656:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8004660:	e006      	b.n	8004670 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8004662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4903      	ldr	r1, [pc, #12]	@ (8004678 <optiga_cmd_queue_scheduler+0x220>)
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f002 f8f8 	bl	8006860 <pal_os_event_register_callback_oneshot>
}
 8004670:	bf00      	nop
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08004459 	.word	0x08004459
 800467c:	080041eb 	.word	0x080041eb

08004680 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004680:	b5b0      	push	{r4, r5, r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7f9b      	ldrb	r3, [r3, #30]
 8004694:	4619      	mov	r1, r3
 8004696:	460b      	mov	r3, r1
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	440b      	add	r3, r1
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b23      	cmp	r3, #35	@ 0x23
 80046a8:	d111      	bne.n	80046ce <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7f9b      	ldrb	r3, [r3, #30]
 80046b2:	4619      	mov	r1, r3
 80046b4:	460b      	mov	r3, r1
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	440b      	add	r3, r1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80046c2:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80046c4:	2b23      	cmp	r3, #35	@ 0x23
 80046c6:	d112      	bne.n	80046ee <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	2b23      	cmp	r3, #35	@ 0x23
 80046cc:	d00f      	beq.n	80046ee <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681c      	ldr	r4, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7f9b      	ldrb	r3, [r3, #30]
 80046d6:	461d      	mov	r5, r3
 80046d8:	f002 f97e 	bl	80069d8 <pal_os_timer_get_time_in_microseconds>
 80046dc:	4602      	mov	r2, r0
 80046de:	462b      	mov	r3, r5
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	442b      	add	r3, r5
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4423      	add	r3, r4
 80046e8:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80046ec:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f9b      	ldrb	r3, [r3, #30]
 80046f6:	4619      	mov	r1, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	440b      	add	r3, r1
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7f9b      	ldrb	r3, [r3, #30]
 8004712:	4619      	mov	r1, r3
 8004714:	460b      	mov	r3, r1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	440b      	add	r3, r1
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b23      	cmp	r3, #35	@ 0x23
 8004726:	d111      	bne.n	800474c <optiga_cmd_queue_update_slot+0xcc>
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	2b23      	cmp	r3, #35	@ 0x23
 800472c:	d10e      	bne.n	800474c <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7f9b      	ldrb	r3, [r3, #30]
 8004736:	4619      	mov	r1, r3
 8004738:	460b      	mov	r3, r1
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	440b      	add	r3, r1
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004746:	2208      	movs	r2, #8
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e00d      	b.n	8004768 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7f9b      	ldrb	r3, [r3, #30]
 8004754:	4619      	mov	r1, r3
 8004756:	460b      	mov	r3, r1
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	440b      	add	r3, r1
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004764:	2202      	movs	r2, #2
 8004766:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7f9b      	ldrb	r3, [r3, #30]
 8004770:	4619      	mov	r1, r3
 8004772:	460b      	mov	r3, r1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	440b      	add	r3, r1
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	701a      	strb	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bdb0      	pop	{r4, r5, r7, pc}

0800478c <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7f9b      	ldrb	r3, [r3, #30]
 800479c:	4619      	mov	r1, r3
 800479e:	460b      	mov	r3, r1
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	440b      	add	r3, r1
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80047ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047b0:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7f9b      	ldrb	r3, [r3, #30]
 80047ba:	4619      	mov	r1, r3
 80047bc:	460b      	mov	r3, r1
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	440b      	add	r3, r1
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7f9b      	ldrb	r3, [r3, #30]
 80047d6:	4619      	mov	r1, r3
 80047d8:	460b      	mov	r3, r1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	440b      	add	r3, r1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7f9b      	ldrb	r3, [r3, #30]
 80047f2:	4619      	mov	r1, r3
 80047f4:	460b      	mov	r3, r1
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	440b      	add	r3, r1
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	4903      	ldr	r1, [pc, #12]	@ (8004824 <optiga_cmd_queue_reset_slot+0x98>)
 8004816:	f001 ffe5 	bl	80067e4 <pal_os_event_start>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	08004459 	.word	0x08004459

08004828 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7f9b      	ldrb	r3, [r3, #30]
 8004838:	4619      	mov	r1, r3
 800483a:	460b      	mov	r3, r1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	440b      	add	r3, r1
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	7f9b      	ldrb	r3, [r3, #30]
 8004854:	4619      	mov	r1, r3
 8004856:	460b      	mov	r3, r1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	440b      	add	r3, r1
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 800487c:	2122      	movs	r1, #34	@ 0x22
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fefe 	bl	8004680 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fd22 	bl	80042e0 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b082      	sub	sp, #8
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	460b      	mov	r3, r1
 80048b0:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fee2 	bl	8004680 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff5c 	bl	800478c <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80048e6:	f240 2302 	movw	r3, #514	@ 0x202
 80048ea:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 80048f4:	2308      	movs	r3, #8
 80048f6:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004904:	f107 020c 	add.w	r2, r7, #12
 8004908:	4619      	mov	r1, r3
 800490a:	f001 fee3 	bl	80066d4 <pal_os_datastore_read>
 800490e:	4603      	mov	r3, r0
 8004910:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d11a      	bne.n	800494e <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004920:	4618      	mov	r0, r3
 8004922:	f001 fb6c 	bl	8005ffe <optiga_common_get_uint32>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10d      	bne.n	8004948 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fb62 	bl	8005ffe <optiga_common_get_uint32>
 800493a:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d103      	bne.n	8004948 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8004940:	f240 2302 	movw	r3, #514	@ 0x202
 8004944:	81fb      	strh	r3, [r7, #14]
            break;
 8004946:	e003      	b.n	8004950 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8004948:	2300      	movs	r3, #0
 800494a:	81fb      	strh	r3, [r7, #14]
 800494c:	e000      	b.n	8004950 <optiga_cmd_restore_context+0x72>
                break;
 800494e:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8004950:	89fb      	ldrh	r3, [r7, #14]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	7e5b      	ldrb	r3, [r3, #25]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d029      	beq.n	80049c2 <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004972:	2b22      	cmp	r3, #34	@ 0x22
 8004974:	d125      	bne.n	80049c2 <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800497e:	2208      	movs	r2, #8
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f002 f810 	bl	80069a8 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800498c:	2b33      	cmp	r3, #51	@ 0x33
 800498e:	d118      	bne.n	80049c2 <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004994:	2b00      	cmp	r3, #0
 8004996:	d014      	beq.n	80049c2 <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80049a4:	2208      	movs	r2, #8
 80049a6:	4619      	mov	r1, r3
 80049a8:	f001 fe16 	bl	80065d8 <pal_os_datastore_write>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8c1b      	ldrh	r3, [r3, #32]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2204      	movs	r2, #4
 80049c0:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	7ddb      	ldrb	r3, [r3, #23]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d05f      	beq.n	8004aa4 <optiga_cmd_execute_comms_open+0xd8>
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	dc6d      	bgt.n	8004ac4 <optiga_cmd_execute_comms_open+0xf8>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <optiga_cmd_execute_comms_open+0x26>
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d01b      	beq.n	8004a28 <optiga_cmd_execute_comms_open+0x5c>
 80049f0:	e068      	b.n	8004ac4 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80049f2:	2121      	movs	r1, #33	@ 0x21
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff ff56 	bl	80048a6 <optiga_cmd_request_lock>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8c1b      	ldrh	r3, [r3, #32]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	759a      	strb	r2, [r3, #22]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f240 2202 	movw	r2, #514	@ 0x202
 8004a16:	841a      	strh	r2, [r3, #32]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
                    break;
 8004a1e:	e05c      	b.n	8004ada <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	75da      	strb	r2, [r3, #23]
                break;
 8004a26:	e058      	b.n	8004ada <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	7e92      	ldrb	r2, [r2, #26]
 8004a32:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	7ed2      	ldrb	r2, [r2, #27]
 8004a3e:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	7f12      	ldrb	r2, [r2, #28]
 8004a4a:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004a5a:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 f85c 	bl	8005b22 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 f865 	bl	8005b40 <optiga_comms_open>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8c1b      	ldrh	r3, [r3, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	759a      	strb	r2, [r3, #22]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f240 2202 	movw	r2, #514	@ 0x202
 8004a92:	841a      	strh	r2, [r3, #32]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
                    break;
 8004a9a:	e01e      	b.n	8004ada <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	75da      	strb	r2, [r3, #23]
                break;
 8004aa2:	e01a      	b.n	8004ada <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004aac:	2332      	movs	r3, #50	@ 0x32
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4910      	ldr	r1, [pc, #64]	@ (8004af4 <optiga_cmd_execute_comms_open+0x128>)
 8004ab2:	f001 fed5 	bl	8006860 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2209      	movs	r2, #9
 8004ac0:	75da      	strb	r2, [r3, #23]
                break;
 8004ac2:	e00a      	b.n	8004ada <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	759a      	strb	r2, [r3, #22]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f240 2202 	movw	r2, #514	@ 0x202
 8004ad0:	841a      	strh	r2, [r3, #32]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
            break;
 8004ad8:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <optiga_cmd_execute_comms_open+0x120>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7d9b      	ldrb	r3, [r3, #22]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f43f af75 	beq.w	80049d6 <optiga_cmd_execute_comms_open+0xa>
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	080041eb 	.word	0x080041eb

08004af8 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	7ddb      	ldrb	r3, [r3, #23]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d002      	beq.n	8004b16 <optiga_cmd_execute_comms_close+0x1e>
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d068      	beq.n	8004be6 <optiga_cmd_execute_comms_close+0xee>
 8004b14:	e07a      	b.n	8004c0c <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	7f1b      	ldrb	r3, [r3, #28]
 8004b1a:	2b22      	cmp	r3, #34	@ 0x22
 8004b1c:	d002      	beq.n	8004b24 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	7e92      	ldrb	r2, [r2, #26]
 8004b2e:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	7ed2      	ldrb	r2, [r2, #27]
 8004b3a:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	7f12      	ldrb	r2, [r2, #28]
 8004b52:	751a      	strb	r2, [r3, #20]
 8004b54:	e004      	b.n	8004b60 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2233      	movs	r2, #51	@ 0x33
 8004b5e:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004b7e:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 ffca 	bl	8005b22 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 f851 	bl	8005c3c <optiga_comms_close>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8c1b      	ldrh	r3, [r3, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2204      	movs	r2, #4
 8004bae:	759a      	strb	r2, [r3, #22]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f240 2202 	movw	r2, #514	@ 0x202
 8004bb6:	841a      	strh	r2, [r3, #32]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
                    break;
 8004bbe:	e031      	b.n	8004c24 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	7f1b      	ldrb	r3, [r3, #28]
 8004bc4:	2b22      	cmp	r3, #34	@ 0x22
 8004bc6:	d106      	bne.n	8004bd6 <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004bd4:	e026      	b.n	8004c24 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fe75 	bl	80048c6 <optiga_cmd_release_lock>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	841a      	strh	r2, [r3, #32]
                break;
 8004be4:	e01e      	b.n	8004c24 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68d2      	ldr	r2, [r2, #12]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7f1b      	ldrb	r3, [r3, #28]
 8004bf8:	2b22      	cmp	r3, #34	@ 0x22
 8004bfa:	d112      	bne.n	8004c22 <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff fe62 	bl	80048c6 <optiga_cmd_release_lock>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004c0a:	e00a      	b.n	8004c22 <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	759a      	strb	r2, [r3, #22]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f240 2202 	movw	r2, #514	@ 0x202
 8004c18:	841a      	strh	r2, [r3, #32]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
            break;
 8004c20:	e000      	b.n	8004c24 <optiga_cmd_execute_comms_close+0x12c>
                break;
 8004c22:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <optiga_cmd_execute_comms_close+0x13e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7d9b      	ldrb	r3, [r3, #22]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f43f af66 	beq.w	8004b02 <optiga_cmd_execute_comms_close+0xa>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7ddb      	ldrb	r3, [r3, #23]
 8004c54:	3b05      	subs	r3, #5
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	f200 80d6 	bhi.w	8004e08 <optiga_cmd_execute_prepare_command+0x1c8>
 8004c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c64 <optiga_cmd_execute_prepare_command+0x24>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c79 	.word	0x08004c79
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004ccd 	.word	0x08004ccd
 8004c70:	08004ce1 	.word	0x08004ce1
 8004c74:	08004d1d 	.word	0x08004d1d
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7ddb      	ldrb	r3, [r3, #23]
 8004c82:	2b05      	cmp	r3, #5
 8004c84:	d107      	bne.n	8004c96 <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7ff fdf4 	bl	8004874 <optiga_cmd_request_session>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	841a      	strh	r2, [r3, #32]
 8004c94:	e007      	b.n	8004ca6 <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004c96:	2121      	movs	r1, #33	@ 0x21
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fe04 	bl	80048a6 <optiga_cmd_request_lock>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8c1b      	ldrh	r3, [r3, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	759a      	strb	r2, [r3, #22]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f240 2202 	movw	r2, #514	@ 0x202
 8004cba:	841a      	strh	r2, [r3, #32]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
                    break;
 8004cc2:	e0ac      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2209      	movs	r2, #9
 8004cc8:	75da      	strb	r2, [r3, #23]
                break;
 8004cca:	e0a8      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff fdab 	bl	8004828 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
                break;
 8004cde:	e09e      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8004ce0:	2123      	movs	r1, #35	@ 0x23
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fddf 	bl	80048a6 <optiga_cmd_request_lock>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8c1b      	ldrh	r3, [r3, #32]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	759a      	strb	r2, [r3, #22]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f240 2202 	movw	r2, #514	@ 0x202
 8004d04:	841a      	strh	r2, [r3, #32]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
                    break;
 8004d0c:	e087      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2209      	movs	r2, #9
 8004d12:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
                break;
 8004d1a:	e080      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8c1b      	ldrh	r3, [r3, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
                    break;
 8004d44:	e06b      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f240 6222 	movw	r2, #1570	@ 0x622
 8004d4e:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	7e92      	ldrb	r2, [r2, #26]
 8004d5a:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	7ed2      	ldrb	r2, [r2, #27]
 8004d66:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	7e9a      	ldrb	r2, [r3, #26]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 feca 	bl	8005b22 <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004da0:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004dae:	3306      	adds	r3, #6
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	4623      	mov	r3, r4
 8004db4:	f000 fefc 	bl	8005bb0 <optiga_comms_transceive>
 8004db8:	4603      	mov	r3, r0
 8004dba:	461a      	mov	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8c1b      	ldrh	r3, [r3, #32]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	759a      	strb	r2, [r3, #22]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f240 2202 	movw	r2, #514	@ 0x202
 8004dd4:	841a      	strh	r2, [r3, #32]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
                    break;
 8004ddc:	e01f      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2203      	movs	r2, #3
 8004de2:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	220a      	movs	r2, #10
 8004de8:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7f5b      	ldrb	r3, [r3, #29]
 8004dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	775a      	strb	r2, [r3, #29]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7f5b      	ldrb	r3, [r3, #29]
 8004dfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	775a      	strb	r2, [r3, #29]
                break;
 8004e06:	e00a      	b.n	8004e1e <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	759a      	strb	r2, [r3, #22]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f240 2202 	movw	r2, #514	@ 0x202
 8004e14:	841a      	strh	r2, [r3, #32]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
            break;
 8004e1c:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <optiga_cmd_execute_prepare_command+0x1f0>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	7d9b      	ldrb	r3, [r3, #22]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f43f af10 	beq.w	8004c50 <optiga_cmd_execute_prepare_command+0x10>
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd90      	pop	{r4, r7, pc}

08004e38 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa69 	bl	8005320 <optiga_cmd_get_error_code_handler>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	8c1b      	ldrh	r3, [r3, #32]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <optiga_cmd_execute_get_device_error+0x30>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	8c1b      	ldrh	r3, [r3, #32]
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da0a      	bge.n	8004e7e <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e70:	d10c      	bne.n	8004e8c <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7f5b      	ldrb	r3, [r3, #29]
 8004e76:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d106      	bne.n	8004e8c <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2204      	movs	r2, #4
 8004e82:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
            break;
 8004e8a:	bf00      	nop
        }
    } while (FALSE);
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	7f5b      	ldrb	r3, [r3, #29]
 8004eae:	b25b      	sxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da0b      	bge.n	8004ecc <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8c1b      	ldrh	r3, [r3, #32]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d14e      	bne.n	8004f68 <optiga_cmd_execute_process_optiga_response+0xd4>
 8004eca:	e006      	b.n	8004eda <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
            break;
 8004ed8:	e06f      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2bf1      	cmp	r3, #241	@ 0xf1
 8004ee2:	d113      	bne.n	8004f0c <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	4934      	ldr	r1, [pc, #208]	@ (8004fc4 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004ef4:	f001 fcb4 	bl	8006860 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2203      	movs	r2, #3
 8004f08:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8004f0a:	e056      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7e1b      	ldrb	r3, [r3, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10e      	bne.n	8004f32 <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7ddb      	ldrb	r3, [r3, #23]
 8004f18:	2b0e      	cmp	r3, #14
 8004f1a:	d006      	beq.n	8004f2a <optiga_cmd_execute_process_optiga_response+0x96>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7ddb      	ldrb	r3, [r3, #23]
 8004f20:	2b0d      	cmp	r3, #13
 8004f22:	d002      	beq.n	8004f2a <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	220c      	movs	r2, #12
 8004f28:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
                    break;
 8004f30:	e043      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	4920      	ldr	r1, [pc, #128]	@ (8004fc4 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004f42:	f001 fc8d 	bl	8006860 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7e9b      	ldrb	r3, [r3, #26]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2209      	movs	r2, #9
 8004f64:	75da      	strb	r2, [r3, #23]
}
 8004f66:	e028      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8c1b      	ldrh	r3, [r3, #32]
 8004f6c:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8004f70:	d106      	bne.n	8004f80 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	220c      	movs	r2, #12
 8004f76:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
                break;
 8004f7e:	e01c      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	7ddb      	ldrb	r3, [r3, #23]
 8004f84:	2b0d      	cmp	r3, #13
 8004f86:	d103      	bne.n	8004f90 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
}
 8004f8e:	e014      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	220b      	movs	r2, #11
 8004f94:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7f5b      	ldrb	r3, [r3, #29]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	775a      	strb	r2, [r3, #29]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	7f5b      	ldrb	r3, [r3, #29]
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]
}
 8004fb8:	e7ff      	b.n	8004fba <optiga_cmd_execute_process_optiga_response+0x126>
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	080041eb 	.word	0x080041eb

08004fc8 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7ddb      	ldrb	r3, [r3, #23]
 8004fd6:	3b0a      	subs	r3, #10
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d84d      	bhi.n	8005078 <optiga_cmd_execute_process_response+0xb0>
 8004fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe4 <optiga_cmd_execute_process_response+0x1c>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08004ff9 	.word	0x08004ff9
 8004fe8:	08005003 	.word	0x08005003
 8004fec:	0800504d 	.word	0x0800504d
 8004ff0:	0800500d 	.word	0x0800500d
 8004ff4:	08005061 	.word	0x08005061
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff ff4a 	bl	8004e94 <optiga_cmd_execute_process_optiga_response>
                break;
 8005000:	e045      	b.n	800508e <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ff17 	bl	8004e38 <optiga_cmd_execute_get_device_error>
                break;
 800500a:	e040      	b.n	800508e <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fc3e 	bl	800488e <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8c1b      	ldrh	r3, [r3, #32]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	220c      	movs	r2, #12
 800501e:	75da      	strb	r2, [r3, #23]
 8005020:	e010      	b.n	8005044 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	220b      	movs	r2, #11
 8005026:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7f5b      	ldrb	r3, [r3, #29]
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	775a      	strb	r2, [r3, #29]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7f5b      	ldrb	r3, [r3, #29]
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
                break;
 800504a:	e020      	b.n	800508e <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff fc3a 	bl	80048c6 <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	220e      	movs	r2, #14
 8005056:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	701a      	strb	r2, [r3, #0]
                break;
 800505e:	e016      	b.n	800508e <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68d0      	ldr	r0, [r2, #12]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	8c12      	ldrh	r2, [r2, #32]
 800506c:	4611      	mov	r1, r2
 800506e:	4798      	blx	r3
                *exit_loop = TRUE;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
                break;
 8005076:	e00a      	b.n	800508e <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	759a      	strb	r2, [r3, #22]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f240 2202 	movw	r2, #514	@ 0x202
 8005084:	841a      	strh	r2, [r3, #32]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
            break;
 800508c:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <optiga_cmd_execute_process_response+0xd6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	7d9b      	ldrb	r3, [r3, #22]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d099      	beq.n	8004fd2 <optiga_cmd_execute_process_response+0xa>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop

080050a8 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fc07 	bl	80048c6 <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68d0      	ldr	r0, [r2, #12]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	8c12      	ldrh	r2, [r2, #32]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4798      	blx	r3
        *exit_loop = TRUE;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 80050ec:	887b      	ldrh	r3, [r7, #2]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fc31 	bl	800495a <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2204      	movs	r2, #4
 80050fc:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	7d9b      	ldrb	r3, [r3, #22]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d830      	bhi.n	800516e <optiga_cmd_execute_handler+0x96>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <optiga_cmd_execute_handler+0x3c>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005129 	.word	0x08005129
 8005118:	08005137 	.word	0x08005137
 800511c:	08005145 	.word	0x08005145
 8005120:	08005153 	.word	0x08005153
 8005124:	08005161 	.word	0x08005161
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8005128:	f107 030b 	add.w	r3, r7, #11
 800512c:	4619      	mov	r1, r3
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fc4c 	bl	80049cc <optiga_cmd_execute_comms_open>
                break;
 8005134:	e01c      	b.n	8005170 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8005136:	f107 030b 	add.w	r3, r7, #11
 800513a:	4619      	mov	r1, r3
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff fcdb 	bl	8004af8 <optiga_cmd_execute_comms_close>
                break;
 8005142:	e015      	b.n	8005170 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8005144:	f107 030b 	add.w	r3, r7, #11
 8005148:	4619      	mov	r1, r3
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff fd78 	bl	8004c40 <optiga_cmd_execute_prepare_command>
                break;
 8005150:	e00e      	b.n	8005170 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8005152:	f107 030b 	add.w	r3, r7, #11
 8005156:	4619      	mov	r1, r3
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ff35 	bl	8004fc8 <optiga_cmd_execute_process_response>
                break;
 800515e:	e007      	b.n	8005170 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8005160:	f107 030b 	add.w	r3, r7, #11
 8005164:	4619      	mov	r1, r3
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff9e 	bl	80050a8 <optiga_cmd_execute_error_handler>
                break;
 800516c:	e000      	b.n	8005170 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 800516e:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8005170:	7afb      	ldrb	r3, [r7, #11]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0c6      	beq.n	8005104 <optiga_cmd_execute_handler+0x2c>
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8005192:	f001 fbd3 	bl	800693c <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d15b      	bne.n	8005254 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	4a33      	ldr	r2, [pc, #204]	@ (800526c <optiga_cmd_create+0xec>)
 80051a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2109      	movs	r1, #9
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff f8b9 	bl	8004320 <optiga_cmd_queue_get_count_of>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d051      	beq.n	8005258 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 80051b4:	2128      	movs	r1, #40	@ 0x28
 80051b6:	2001      	movs	r0, #1
 80051b8:	f001 fbce 	bl	8006958 <pal_os_calloc>
 80051bc:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d04b      	beq.n	800525c <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	4a26      	ldr	r2, [pc, #152]	@ (800526c <optiga_cmd_create+0xec>)
 80051d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	4a24      	ldr	r2, [pc, #144]	@ (8005270 <optiga_cmd_create+0xf0>)
 80051e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	7b1b      	ldrb	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d129      	bne.n	8005246 <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	681c      	ldr	r4, [r3, #0]
 80051fa:	4611      	mov	r1, r2
 80051fc:	481d      	ldr	r0, [pc, #116]	@ (8005274 <optiga_cmd_create+0xf4>)
 80051fe:	f001 fb17 	bl	8006830 <pal_os_event_create>
 8005202:	4603      	mov	r3, r0
 8005204:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681c      	ldr	r4, [r3, #0]
 800520c:	6979      	ldr	r1, [r7, #20]
 800520e:	481a      	ldr	r0, [pc, #104]	@ (8005278 <optiga_cmd_create+0xf8>)
 8005210:	f000 fc4a 	bl	8005aa8 <optiga_comms_create>
 8005214:	4603      	mov	r3, r0
 8005216:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8005222:	6978      	ldr	r0, [r7, #20]
 8005224:	f001 fba6 	bl	8006974 <pal_os_free>
                me = NULL;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
                break;
 800522c:	e017      	b.n	800525e <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005244:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	331e      	adds	r3, #30
 800524a:	4619      	mov	r1, r3
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	f7ff f8a8 	bl	80043a2 <optiga_cmd_queue_assign_slot>
 8005252:	e004      	b.n	800525e <optiga_cmd_create+0xde>
            break;
 8005254:	bf00      	nop
 8005256:	e002      	b.n	800525e <optiga_cmd_create+0xde>
            break;
 8005258:	bf00      	nop
 800525a:	e000      	b.n	800525e <optiga_cmd_create+0xde>
            break;
 800525c:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 800525e:	f001 fb74 	bl	800694a <pal_os_lock_exit_critical_section>
    return (me);
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}
 800526c:	200004cc 	.word	0x200004cc
 8005270:	200004d0 	.word	0x200004d0
 8005274:	08004459 	.word	0x08004459
 8005278:	080050d9 	.word	0x080050d9

0800527c <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005284:	f240 2302 	movw	r3, #514	@ 0x202
 8005288:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 800528a:	f001 fb57 	bl	800693c <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d03c      	beq.n	800530e <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fafa 	bl	800488e <optiga_cmd_release_session>
 800529a:	4603      	mov	r3, r0
 800529c:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff f8b1 	bl	8004406 <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <optiga_cmd_destroy+0xa0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2109      	movs	r1, #9
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff f837 	bl	8004320 <optiga_cmd_queue_get_count_of>
 80052b2:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d125      	bne.n	8005304 <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	7b1b      	ldrb	r3, [r3, #12]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d120      	bne.n	8005304 <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 faa2 	bl	8006814 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fc03 	bl	8005af4 <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 fb12 	bl	8006928 <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fb35 	bl	8006974 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 800530a:	2300      	movs	r3, #0
 800530c:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 800530e:	f001 fb1c 	bl	800694a <pal_os_lock_exit_critical_section>

    return (return_status);
 8005312:	89fb      	ldrh	r3, [r7, #14]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200004cc 	.word	0x200004cc

08005320 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b087      	sub	sp, #28
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8005328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532c:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800532e:	2309      	movs	r3, #9
 8005330:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7f5b      	ldrb	r3, [r3, #29]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b03      	cmp	r3, #3
 8005342:	f000 8099 	beq.w	8005478 <optiga_cmd_get_error_code_handler+0x158>
 8005346:	2b03      	cmp	r3, #3
 8005348:	f300 80b6 	bgt.w	80054b8 <optiga_cmd_get_error_code_handler+0x198>
 800534c:	2b01      	cmp	r3, #1
 800534e:	d002      	beq.n	8005356 <optiga_cmd_get_error_code_handler+0x36>
 8005350:	2b02      	cmp	r3, #2
 8005352:	d052      	beq.n	80053fa <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 8005354:	e0b0      	b.n	80054b8 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f103 020d 	add.w	r2, r3, #13
 800535e:	89bb      	ldrh	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fe11 	bl	8005f8e <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800536c:	89bb      	ldrh	r3, [r7, #12]
 800536e:	3302      	adds	r3, #2
 8005370:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f103 020d 	add.w	r2, r3, #13
 800537a:	89bb      	ldrh	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	2100      	movs	r1, #0
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fe04 	bl	8005f8e <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005386:	89bb      	ldrh	r3, [r7, #12]
 8005388:	3302      	adds	r3, #2
 800538a:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f103 020d 	add.w	r2, r3, #13
 8005394:	89bb      	ldrh	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	2101      	movs	r1, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fdf7 	bl	8005f8e <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80053a0:	89bb      	ldrh	r3, [r7, #12]
 80053a2:	3302      	adds	r3, #2
 80053a4:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80053a6:	89bb      	ldrh	r3, [r7, #12]
 80053a8:	3b09      	subs	r3, #9
 80053aa:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80053b2:	3305      	adds	r3, #5
 80053b4:	2100      	movs	r1, #0
 80053b6:	2001      	movs	r0, #1
 80053b8:	f7fe fec3 	bl	8004142 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	89ba      	ldrh	r2, [r7, #12]
 80053c2:	3a05      	subs	r2, #5
 80053c4:	b292      	uxth	r2, r2
 80053c6:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7f5b      	ldrb	r3, [r3, #29]
 80053cc:	f023 0303 	bic.w	r3, r3, #3
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	775a      	strb	r2, [r3, #29]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	7f5b      	ldrb	r3, [r3, #29]
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80053ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4935      	ldr	r1, [pc, #212]	@ (80054c8 <optiga_cmd_get_error_code_handler+0x1a8>)
 80053f4:	f001 fa34 	bl	8006860 <pal_os_event_register_callback_oneshot>
        break;
 80053f8:	e061      	b.n	80054be <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f240 6222 	movw	r2, #1570	@ 0x622
 8005402:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	7e92      	ldrb	r2, [r2, #26]
 800540e:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	7ed2      	ldrb	r2, [r2, #27]
 800541a:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fb7d 	bl	8005b22 <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	3306      	adds	r3, #6
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4623      	mov	r3, r4
 8005444:	f000 fbb4 	bl	8005bb0 <optiga_comms_transceive>
 8005448:	4603      	mov	r3, r0
 800544a:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 800544c:	89fb      	ldrh	r3, [r7, #14]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 8005452:	f240 2302 	movw	r3, #514	@ 0x202
 8005456:	81fb      	strh	r3, [r7, #14]
                break;
 8005458:	e031      	b.n	80054be <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7f5b      	ldrb	r3, [r3, #29]
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	b2da      	uxtb	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	775a      	strb	r2, [r3, #29]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7f5b      	ldrb	r3, [r3, #29]
 800546c:	f043 0303 	orr.w	r3, r3, #3
 8005470:	b2da      	uxtb	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	775a      	strb	r2, [r3, #29]
        break;
 8005476:	e022      	b.n	80054be <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	7c9b      	ldrb	r3, [r3, #18]
 800547e:	2bff      	cmp	r3, #255	@ 0xff
 8005480:	d01c      	beq.n	80054bc <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	7d9b      	ldrb	r3, [r3, #22]
 8005488:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 800548a:	89fb      	ldrh	r3, [r7, #14]
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2203      	movs	r2, #3
 800549a:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	220a      	movs	r2, #10
 80054a0:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80054aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4905      	ldr	r1, [pc, #20]	@ (80054c8 <optiga_cmd_get_error_code_handler+0x1a8>)
 80054b2:	f001 f9d5 	bl	8006860 <pal_os_event_register_callback_oneshot>
        break;
 80054b6:	e002      	b.n	80054be <optiga_cmd_get_error_code_handler+0x19e>
            break;
 80054b8:	bf00      	nop
 80054ba:	e000      	b.n	80054be <optiga_cmd_get_error_code_handler+0x19e>
                break;
 80054bc:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 80054be:	89fb      	ldrh	r3, [r7, #14]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}
 80054c8:	080041eb 	.word	0x080041eb

080054cc <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80054d4:	f240 2302 	movw	r3, #514	@ 0x202
 80054d8:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	7d9b      	ldrb	r3, [r3, #22]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d002      	beq.n	80054e8 <optiga_cmd_open_application_handler+0x1c>
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d075      	beq.n	80055d2 <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 80054e6:	e08e      	b.n	8005606 <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 80054e8:	2314      	movs	r3, #20
 80054ea:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7e5b      	ldrb	r3, [r3, #25]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <optiga_cmd_open_application_handler+0x2c>
 80054f4:	2200      	movs	r2, #0
 80054f6:	e000      	b.n	80054fa <optiga_cmd_open_application_handler+0x2e>
 80054f8:	2208      	movs	r2, #8
 80054fa:	89bb      	ldrh	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005500:	89bb      	ldrh	r3, [r7, #12]
 8005502:	f240 6215 	movw	r2, #1557	@ 0x615
 8005506:	4293      	cmp	r3, r2
 8005508:	d903      	bls.n	8005512 <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800550a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800550e:	81fb      	strh	r3, [r7, #14]
                break;
 8005510:	e079      	b.n	8005606 <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	7e5b      	ldrb	r3, [r3, #25]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff f9df 	bl	80048de <optiga_cmd_restore_context>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d16e      	bne.n	8005604 <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <optiga_cmd_open_application_handler+0x6a>
 8005532:	2210      	movs	r2, #16
 8005534:	e000      	b.n	8005538 <optiga_cmd_open_application_handler+0x6c>
 8005536:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800553e:	3305      	adds	r3, #5
 8005540:	20f0      	movs	r0, #240	@ 0xf0
 8005542:	f7fe fdfe 	bl	8004142 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330d      	adds	r3, #13
 800554c:	3309      	adds	r3, #9
 800554e:	2210      	movs	r2, #16
 8005550:	492f      	ldr	r1, [pc, #188]	@ (8005610 <optiga_cmd_open_application_handler+0x144>)
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fa19 	bl	800698a <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	7e5b      	ldrb	r3, [r3, #25]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005570:	2208      	movs	r2, #8
 8005572:	4619      	mov	r1, r3
 8005574:	f001 fa09 	bl	800698a <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <optiga_cmd_open_application_handler+0xb8>
 8005580:	2214      	movs	r2, #20
 8005582:	e000      	b.n	8005586 <optiga_cmd_open_application_handler+0xba>
 8005584:	221c      	movs	r2, #28
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005594:	2208      	movs	r2, #8
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f001 fa05 	bl	80069a8 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d012      	beq.n	80055cc <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80055b2:	2208      	movs	r2, #8
 80055b4:	4619      	mov	r1, r3
 80055b6:	f001 f80f 	bl	80065d8 <pal_os_datastore_write>
 80055ba:	4603      	mov	r3, r0
 80055bc:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 80055be:	89fb      	ldrh	r3, [r7, #14]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 80055c4:	f240 2302 	movw	r3, #514	@ 0x202
 80055c8:	81fb      	strh	r3, [r7, #14]
                    break;
 80055ca:	e01c      	b.n	8005606 <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 80055cc:	2300      	movs	r3, #0
 80055ce:	81fb      	strh	r3, [r7, #14]
        break;
 80055d0:	e019      	b.n	8005606 <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	7c9b      	ldrb	r3, [r3, #18]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00b      	beq.n	80055f4 <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	7f5b      	ldrb	r3, [r3, #29]
 80055e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	775a      	strb	r2, [r3, #29]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7f5a      	ldrb	r2, [r3, #29]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	775a      	strb	r2, [r3, #29]
                break;
 80055f2:	e008      	b.n	8005606 <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2233      	movs	r2, #51	@ 0x33
 80055fc:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 80055fe:	2300      	movs	r3, #0
 8005600:	81fb      	strh	r3, [r7, #14]
        break;
 8005602:	e000      	b.n	8005606 <optiga_cmd_open_application_handler+0x13a>
                    break;
 8005604:	bf00      	nop
    }

    return (return_status);
 8005606:	89fb      	ldrh	r3, [r7, #14]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	0800f6b8 	.word	0x0800f6b8

08005614 <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af04      	add	r7, sp, #16
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	460b      	mov	r3, r1
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005622:	7af9      	ldrb	r1, [r7, #11]
 8005624:	23f0      	movs	r3, #240	@ 0xf0
 8005626:	9302      	str	r3, [sp, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2300      	movs	r3, #0
 8005632:	4a04      	ldr	r2, [pc, #16]	@ (8005644 <optiga_cmd_open_application+0x30>)
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7fe fde4 	bl	8004202 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	080054cd 	.word	0x080054cd

08005648 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005656:	f240 2302 	movw	r3, #514	@ 0x202
 800565a:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800565c:	2309      	movs	r3, #9
 800565e:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 8005660:	2381      	movs	r3, #129	@ 0x81
 8005662:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7d9b      	ldrb	r3, [r3, #22]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d002      	beq.n	8005672 <optiga_cmd_get_data_object_handler+0x2a>
 800566c:	2b03      	cmp	r3, #3
 800566e:	d06e      	beq.n	800574e <optiga_cmd_get_data_object_handler+0x106>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005670:	e0ec      	b.n	800584c <optiga_cmd_get_data_object_handler+0x204>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8005672:	230a      	movs	r3, #10
 8005674:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005676:	8a3b      	ldrh	r3, [r7, #16]
 8005678:	f240 6215 	movw	r2, #1557	@ 0x615
 800567c:	4293      	cmp	r3, r2
 800567e:	d907      	bls.n	8005690 <optiga_cmd_get_data_object_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005680:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005684:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	801a      	strh	r2, [r3, #0]
                break;
 800568e:	e0dd      	b.n	800584c <optiga_cmd_get_data_object_handler+0x204>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	8bbb      	ldrh	r3, [r7, #28]
 8005696:	3308      	adds	r3, #8
 8005698:	4413      	add	r3, r2
 800569a:	1d5a      	adds	r2, r3, #5
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	891b      	ldrh	r3, [r3, #8]
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 fc73 	bl	8005f8e <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80056a8:	8bbb      	ldrh	r3, [r7, #28]
 80056aa:	3302      	adds	r3, #2
 80056ac:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	899b      	ldrh	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	89db      	ldrh	r3, [r3, #14]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f240 6211 	movw	r2, #1553	@ 0x611
 80056be:	4293      	cmp	r3, r2
 80056c0:	bfa8      	it	ge
 80056c2:	4613      	movge	r3, r2
 80056c4:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	7c9b      	ldrb	r3, [r3, #18]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11f      	bne.n	800570e <optiga_cmd_get_data_object_handler+0xc6>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	8bbb      	ldrh	r3, [r7, #28]
 80056d4:	3308      	adds	r3, #8
 80056d6:	4413      	add	r3, r2
 80056d8:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	895a      	ldrh	r2, [r3, #10]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056e2:	4413      	add	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	f000 fc51 	bl	8005f8e <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80056ec:	8bbb      	ldrh	r3, [r7, #28]
 80056ee:	3302      	adds	r3, #2
 80056f0:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	8bbb      	ldrh	r3, [r7, #28]
 80056f8:	3308      	adds	r3, #8
 80056fa:	4413      	add	r3, r2
 80056fc:	3305      	adds	r3, #5
 80056fe:	89fa      	ldrh	r2, [r7, #14]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fc43 	bl	8005f8e <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005708:	8bbb      	ldrh	r3, [r7, #28]
 800570a:	3302      	adds	r3, #2
 800570c:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	891b      	ldrh	r3, [r3, #8]
 8005712:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 8005716:	4293      	cmp	r3, r2
 8005718:	d101      	bne.n	800571e <optiga_cmd_get_data_object_handler+0xd6>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 800571a:	2301      	movs	r3, #1
 800571c:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	7e59      	ldrb	r1, [r3, #25]
 8005722:	8bbb      	ldrh	r3, [r7, #28]
 8005724:	3b09      	subs	r3, #9
 8005726:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 800572e:	3305      	adds	r3, #5
 8005730:	7ef8      	ldrb	r0, [r7, #27]
 8005732:	f7fe fd06 	bl	8004142 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	8bba      	ldrh	r2, [r7, #28]
 800573c:	3a05      	subs	r2, #5
 800573e:	b292      	uxth	r2, r2
 8005740:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	89fa      	ldrh	r2, [r7, #14]
 8005746:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 8005748:	2300      	movs	r3, #0
 800574a:	83fb      	strh	r3, [r7, #30]
        break;
 800574c:	e07e      	b.n	800584c <optiga_cmd_get_data_object_handler+0x204>
            me->chaining_ongoing = FALSE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	7c9b      	ldrb	r3, [r3, #18]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d025      	beq.n	80057aa <optiga_cmd_get_data_object_handler+0x162>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	89db      	ldrh	r3, [r3, #14]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00e      	beq.n	8005784 <optiga_cmd_get_data_object_handler+0x13c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7f5b      	ldrb	r3, [r3, #29]
 800576a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576e:	b2da      	uxtb	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	775a      	strb	r2, [r3, #29]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	7f5b      	ldrb	r3, [r3, #29]
 8005778:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800577c:	b2da      	uxtb	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	775a      	strb	r2, [r3, #29]
 8005782:	e00e      	b.n	80057a2 <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7f5b      	ldrb	r3, [r3, #29]
 8005788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	775a      	strb	r2, [r3, #29]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7f5a      	ldrb	r2, [r3, #29]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 80057a2:	f240 2302 	movw	r3, #514	@ 0x202
 80057a6:	83fb      	strh	r3, [r7, #30]
        break;
 80057a8:	e04f      	b.n	800584a <optiga_cmd_get_data_object_handler+0x202>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8c1b      	ldrh	r3, [r3, #32]
 80057ae:	f248 0208 	movw	r2, #32776	@ 0x8008
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d107      	bne.n	80057c6 <optiga_cmd_get_data_object_handler+0x17e>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	89d2      	ldrh	r2, [r2, #14]
 80057be:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 80057c0:	2300      	movs	r3, #0
 80057c2:	83fb      	strh	r3, [r7, #30]
        break;
 80057c4:	e041      	b.n	800584a <optiga_cmd_get_data_object_handler+0x202>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	88db      	ldrh	r3, [r3, #6]
 80057cc:	3b04      	subs	r3, #4
 80057ce:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	899b      	ldrh	r3, [r3, #12]
 80057d4:	8a7a      	ldrh	r2, [r7, #18]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d907      	bls.n	80057ea <optiga_cmd_get_data_object_handler+0x1a2>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80057da:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80057de:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2200      	movs	r2, #0
 80057e6:	801a      	strh	r2, [r3, #0]
                    break;
 80057e8:	e030      	b.n	800584c <optiga_cmd_get_data_object_handler+0x204>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	89d2      	ldrh	r2, [r2, #14]
 80057f2:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 80057fa:	3309      	adds	r3, #9
 80057fc:	8a7a      	ldrh	r2, [r7, #18]
 80057fe:	4619      	mov	r1, r3
 8005800:	f001 f8c3 	bl	800698a <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	89da      	ldrh	r2, [r3, #14]
 8005808:	8a7b      	ldrh	r3, [r7, #18]
 800580a:	4413      	add	r3, r2
 800580c:	b29a      	uxth	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	8a1b      	ldrh	r3, [r3, #16]
 8005816:	8a7a      	ldrh	r2, [r7, #18]
 8005818:	429a      	cmp	r2, r3
 800581a:	d305      	bcc.n	8005828 <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	89da      	ldrh	r2, [r3, #14]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d10b      	bne.n	8005840 <optiga_cmd_get_data_object_handler+0x1f8>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	89d2      	ldrh	r2, [r2, #14]
 8005830:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2200      	movs	r2, #0
 8005836:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2200      	movs	r2, #0
 800583c:	821a      	strh	r2, [r3, #16]
 800583e:	e002      	b.n	8005846 <optiga_cmd_get_data_object_handler+0x1fe>
                    me->chaining_ongoing = TRUE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	761a      	strb	r2, [r3, #24]
                return_status = OPTIGA_LIB_SUCCESS;
 8005846:	2300      	movs	r3, #0
 8005848:	83fb      	strh	r3, [r7, #30]
        break;
 800584a:	bf00      	nop
    }

    return (return_status);
 800584c:	8bfb      	ldrh	r3, [r7, #30]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af04      	add	r7, sp, #16
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	460b      	mov	r3, r1
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005866:	7af9      	ldrb	r1, [r7, #11]
 8005868:	2381      	movs	r3, #129	@ 0x81
 800586a:	9302      	str	r3, [sp, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	2306      	movs	r3, #6
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2302      	movs	r3, #2
 8005876:	4a04      	ldr	r2, [pc, #16]	@ (8005888 <optiga_cmd_get_data_object+0x30>)
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7fe fcc2 	bl	8004202 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	08005649 	.word	0x08005649

0800588c <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800589a:	2309      	movs	r3, #9
 800589c:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800589e:	f240 2302 	movw	r3, #514	@ 0x202
 80058a2:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	7d9b      	ldrb	r3, [r3, #22]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d003      	beq.n	80058b4 <optiga_cmd_verify_sign_handler+0x28>
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	f000 80c7 	beq.w	8005a40 <optiga_cmd_verify_sign_handler+0x1b4>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 80058b2:	e0d9      	b.n	8005a68 <optiga_cmd_verify_sign_handler+0x1dc>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	7c1b      	ldrb	r3, [r3, #16]
 80058b8:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	899b      	ldrh	r3, [r3, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <optiga_cmd_verify_sign_handler+0x4a>
                                     p_optiga_verify_sign->public_key->length));
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 80058d0:	3309      	adds	r3, #9
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	e000      	b.n	80058d8 <optiga_cmd_verify_sign_handler+0x4c>
 80058d6:	2305      	movs	r3, #5
 80058d8:	4413      	add	r3, r2
 80058da:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80058dc:	330a      	adds	r3, #10
 80058de:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80058e0:	89fb      	ldrh	r3, [r7, #14]
 80058e2:	f240 6215 	movw	r2, #1557	@ 0x615
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d903      	bls.n	80058f2 <optiga_cmd_verify_sign_handler+0x66>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80058ea:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80058ee:	82fb      	strh	r3, [r7, #22]
                break;
 80058f0:	e0ba      	b.n	8005a68 <optiga_cmd_verify_sign_handler+0x1dc>
                                          p_optiga_verify_sign->digest_length,
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80058f6:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 8005900:	f107 030c 	add.w	r3, r7, #12
 8005904:	2001      	movs	r0, #1
 8005906:	f7fe fc3f 	bl	8004188 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330d      	adds	r3, #13
 8005910:	89ba      	ldrh	r2, [r7, #12]
 8005912:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800591c:	461a      	mov	r2, r3
 800591e:	f001 f834 	bl	800698a <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	7c1b      	ldrb	r3, [r3, #16]
 8005926:	461a      	mov	r2, r3
 8005928:	89bb      	ldrh	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	b29b      	uxth	r3, r3
 800592e:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 800593c:	f107 030c 	add.w	r3, r7, #12
 8005940:	2002      	movs	r0, #2
 8005942:	f7fe fc21 	bl	8004188 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330d      	adds	r3, #13
 800594c:	89ba      	ldrh	r2, [r7, #12]
 800594e:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005958:	461a      	mov	r2, r3
 800595a:	f001 f816 	bl	800698a <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	899a      	ldrh	r2, [r3, #12]
 8005962:	89bb      	ldrh	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	7c5b      	ldrb	r3, [r3, #17]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d119      	bne.n	80059a6 <optiga_cmd_verify_sign_handler+0x11a>
                                              me->p_optiga->optiga_comms_buffer,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	2102      	movs	r1, #2
 8005980:	2004      	movs	r0, #4
 8005982:	f7fe fc01 	bl	8004188 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330d      	adds	r3, #13
 800598c:	89ba      	ldrh	r2, [r7, #12]
 800598e:	441a      	add	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	89db      	ldrh	r3, [r3, #14]
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f000 faf9 	bl	8005f8e <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800599c:	89bb      	ldrh	r3, [r7, #12]
 800599e:	3302      	adds	r3, #2
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	81bb      	strh	r3, [r7, #12]
 80059a4:	e037      	b.n	8005a16 <optiga_cmd_verify_sign_handler+0x18a>
                                              me->p_optiga->optiga_comms_buffer,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 80059ae:	f107 030c 	add.w	r3, r7, #12
 80059b2:	2101      	movs	r1, #1
 80059b4:	2005      	movs	r0, #5
 80059b6:	f7fe fbe7 	bl	8004188 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f103 010d 	add.w	r1, r3, #13
 80059c6:	89bb      	ldrh	r3, [r7, #12]
 80059c8:	1c58      	adds	r0, r3, #1
 80059ca:	b280      	uxth	r0, r0
 80059cc:	81b8      	strh	r0, [r7, #12]
 80059ce:	440b      	add	r3, r1
 80059d0:	7992      	ldrb	r2, [r2, #6]
 80059d2:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80059d8:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	2006      	movs	r0, #6
 80059e8:	f7fe fbce 	bl	8004188 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330d      	adds	r3, #13
 80059f2:	89ba      	ldrh	r2, [r7, #12]
 80059f4:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 ffc1 	bl	800698a <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	889a      	ldrh	r2, [r3, #4]
 8005a0e:	89bb      	ldrh	r3, [r7, #12]
 8005a10:	4413      	add	r3, r2
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	7e59      	ldrb	r1, [r3, #25]
 8005a1a:	89bb      	ldrh	r3, [r7, #12]
 8005a1c:	3b09      	subs	r3, #9
 8005a1e:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005a26:	3305      	adds	r3, #5
 8005a28:	20b2      	movs	r0, #178	@ 0xb2
 8005a2a:	f7fe fb8a 	bl	8004142 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005a2e:	89ba      	ldrh	r2, [r7, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3a05      	subs	r2, #5
 8005a36:	b292      	uxth	r2, r2
 8005a38:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	82fb      	strh	r3, [r7, #22]
        break;
 8005a3e:	e013      	b.n	8005a68 <optiga_cmd_verify_sign_handler+0x1dc>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	7c9b      	ldrb	r3, [r3, #18]
 8005a46:	2bff      	cmp	r3, #255	@ 0xff
 8005a48:	d10b      	bne.n	8005a62 <optiga_cmd_verify_sign_handler+0x1d6>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	7f5b      	ldrb	r3, [r3, #29]
 8005a4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	775a      	strb	r2, [r3, #29]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7f5a      	ldrb	r2, [r3, #29]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	775a      	strb	r2, [r3, #29]
                break;
 8005a60:	e002      	b.n	8005a68 <optiga_cmd_verify_sign_handler+0x1dc>
            return_status = OPTIGA_LIB_SUCCESS;
 8005a62:	2300      	movs	r3, #0
 8005a64:	82fb      	strh	r3, [r7, #22]
        break;
 8005a66:	bf00      	nop
    }

    return (return_status);
 8005a68:	8afb      	ldrh	r3, [r7, #22]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af04      	add	r7, sp, #16
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005a82:	7af9      	ldrb	r1, [r7, #11]
 8005a84:	23b2      	movs	r3, #178	@ 0xb2
 8005a86:	9302      	str	r3, [sp, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	2306      	movs	r3, #6
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	2302      	movs	r3, #2
 8005a92:	4a04      	ldr	r2, [pc, #16]	@ (8005aa4 <optiga_cmd_verify_sign+0x30>)
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7fe fbb4 	bl	8004202 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	0800588d 	.word	0x0800588d

08005aa8 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 8005ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <optiga_comms_create+0x48>)
 8005ab8:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	7c1b      	ldrb	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d110      	bne.n	8005ae4 <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8005ac2:	f000 fc0c 	bl	80062de <pal_init>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
                break;
 8005ad0:	e008      	b.n	8005ae4 <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200004d4 	.word	0x200004d4

08005af4 <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	7c1b      	ldrb	r3, [r3, #16]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10a      	bne.n	8005b1a <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 8005b16:	f000 fbea 	bl	80062ee <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	609a      	str	r2, [r3, #8]
    return (0);
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005b48:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005b4c:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f8a6 	bl	8005ca0 <check_optiga_comms_state>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d122      	bne.n	8005ba0 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	4a10      	ldr	r2, [pc, #64]	@ (8005bac <optiga_comms_open+0x6c>)
 8005b6a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	7d12      	ldrb	r2, [r2, #20]
 8005b76:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fa fcf0 	bl	8000570 <ifx_i2c_open>
 8005b90:	4603      	mov	r3, r0
 8005b92:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005b94:	89fb      	ldrh	r3, [r7, #14]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005ba0:	89fb      	ldrh	r3, [r7, #14]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	08005cd5 	.word	0x08005cd5

08005bb0 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005bc0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005bc4:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f86a 	bl	8005ca0 <check_optiga_comms_state>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d12c      	bne.n	8005c2c <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <optiga_comms_transceive+0x88>)
 8005be2:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	7c92      	ldrb	r2, [r2, #18]
 8005bee:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	7cd2      	ldrb	r2, [r2, #19]
 8005bfa:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	7d12      	ldrb	r2, [r2, #20]
 8005c06:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6858      	ldr	r0, [r3, #4]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	f7fa fce3 	bl	80005e2 <ifx_i2c_transceive>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c20:	8afb      	ldrh	r3, [r7, #22]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c2c:	8afb      	ldrh	r3, [r7, #22]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	08005cd5 	.word	0x08005cd5

08005c3c <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c44:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c48:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f828 	bl	8005ca0 <check_optiga_comms_state>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11c      	bne.n	8005c90 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a0d      	ldr	r2, [pc, #52]	@ (8005c9c <optiga_comms_close+0x60>)
 8005c66:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	7d12      	ldrb	r2, [r2, #20]
 8005c72:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fa fcea 	bl	8000654 <ifx_i2c_close>
 8005c80:	4603      	mov	r3, r0
 8005c82:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c90:	89fb      	ldrh	r3, [r7, #14]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08005cd5 	.word	0x08005cd5

08005ca0 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005ca8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005cac:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <check_optiga_comms_state+0x26>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	7c5b      	ldrb	r3, [r3, #17]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d004      	beq.n	8005cc6 <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	4611      	mov	r1, r2
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	745a      	strb	r2, [r3, #17]
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    me->handler(me->caller_context, event);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d20:	8879      	ldrh	r1, [r7, #2]
 8005d22:	4610      	mov	r0, r2
 8005d24:	4798      	blx	r3
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <optiga_crypt_reset_protection_level+0x18>
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f880 	bl	8005e46 <optiga_crypt_set_comms_params>
    }
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	72fb      	strb	r3, [r7, #11]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8005d62:	f240 4302 	movw	r3, #1026	@ 0x402
 8005d66:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <optiga_crypt_verify+0x3a>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <optiga_crypt_verify+0x3a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <optiga_crypt_verify+0x3a>
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005d88:	f240 4303 	movw	r3, #1027	@ 0x403
 8005d8c:	82fb      	strh	r3, [r7, #22]
            break;
 8005d8e:	e052      	b.n	8005e36 <optiga_crypt_verify+0xe8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d103      	bne.n	8005da2 <optiga_crypt_verify+0x54>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005d9a:	f240 4305 	movw	r3, #1029	@ 0x405
 8005d9e:	82fb      	strh	r3, [r7, #22]
            break;
 8005da0:	e049      	b.n	8005e36 <optiga_crypt_verify+0xe8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2234      	movs	r2, #52	@ 0x34
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fdf7 	bl	80069a8 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f7fe f996 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f7fe f98d 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	7aba      	ldrb	r2, [r7, #10]
 8005de8:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005df4:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005dfc:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8005dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <optiga_crypt_verify+0xc2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	81da      	strh	r2, [r3, #14]
 8005e0e:	e002      	b.n	8005e16 <optiga_crypt_verify+0xc8>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e14:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1a:	7af9      	ldrb	r1, [r7, #11]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fe28 	bl	8005a74 <optiga_cmd_verify_sign>
 8005e24:	4603      	mov	r3, r0
 8005e26:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005e28:	8afb      	ldrh	r3, [r7, #22]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <optiga_crypt_verify+0xe8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff ff79 	bl	8005d2e <optiga_crypt_reset_protection_level>

    return (return_value);
 8005e3c:	8afb      	ldrh	r3, [r7, #22]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <optiga_crypt_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
 8005e52:	4613      	mov	r3, r2
 8005e54:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d002      	beq.n	8005e62 <optiga_crypt_set_comms_params+0x1c>
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d005      	beq.n	8005e6c <optiga_crypt_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005e60:	e009      	b.n	8005e76 <optiga_crypt_set_comms_params+0x30>
            me->protection_level = value;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	78ba      	ldrb	r2, [r7, #2]
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            break;
 8005e6a:	e004      	b.n	8005e76 <optiga_crypt_set_comms_params+0x30>
            me->protocol_version = value;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	78ba      	ldrb	r2, [r7, #2]
 8005e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
            break;
 8005e74:	bf00      	nop
        }
    }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d02c      	beq.n	8005ef6 <optiga_crypt_create+0x72>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8005e9c:	2144      	movs	r1, #68	@ 0x44
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	f000 fd5a 	bl	8006958 <pal_os_calloc>
 8005ea4:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d026      	beq.n	8005efa <optiga_crypt_create+0x76>
        {
            break;
        }

        me->handler = handler;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
        me->caller_context = caller_context;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	490c      	ldr	r1, [pc, #48]	@ (8005f08 <optiga_crypt_create+0x84>)
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff f952 	bl	8005180 <optiga_cmd_create>
 8005edc:	4602      	mov	r2, r0
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	635a      	str	r2, [r3, #52]	@ 0x34
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d108      	bne.n	8005efc <optiga_crypt_create+0x78>
        {
            pal_os_free(me);
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f000 fd42 	bl	8006974 <pal_os_free>
            me = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e002      	b.n	8005efc <optiga_crypt_create+0x78>
            break;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <optiga_crypt_create+0x78>
            break;
 8005efa:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8005efc:	697b      	ldr	r3, [r7, #20]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	08005d01 	.word	0x08005d01

08005f0c <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005f1a:	f240 4303 	movw	r3, #1027	@ 0x403
 8005f1e:	81fb      	strh	r3, [r7, #14]
            break;
 8005f20:	e012      	b.n	8005f48 <optiga_crypt_destroy+0x3c>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d103      	bne.n	8005f34 <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005f2c:	f240 4305 	movw	r3, #1029	@ 0x405
 8005f30:	81fb      	strh	r3, [r7, #14]
            break;
 8005f32:	e009      	b.n	8005f48 <optiga_crypt_destroy+0x3c>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff f99f 	bl	800527c <optiga_cmd_destroy>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fd16 	bl	8006974 <pal_os_free>

    } while (FALSE);
    return (return_value);
 8005f48:	89fb      	ldrh	r3, [r7, #14]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08a      	sub	sp, #40	@ 0x28
 8005f56:	af06      	add	r7, sp, #24
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
 8005f62:	79fa      	ldrb	r2, [r7, #7]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	7f3b      	ldrb	r3, [r7, #28]
 8005f6e:	9302      	str	r3, [sp, #8]
 8005f70:	8b3b      	ldrh	r3, [r7, #24]
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	2111      	movs	r1, #17
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff fee5 	bl	8005d4e <optiga_crypt_verify>
 8005f84:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	887a      	ldrh	r2, [r7, #2]
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	0e1b      	lsrs	r3, r3, #24
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	0c1a      	lsrs	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	0a1a      	lsrs	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3302      	adds	r3, #2
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	3303      	adds	r3, #3
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	061a      	lsls	r2, r3, #24
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3301      	adds	r3, #1
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3302      	adds	r3, #2
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800601c:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	3103      	adds	r1, #3
 8006022:	7809      	ldrb	r1, [r1, #0]
 8006024:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	6992      	ldr	r2, [r2, #24]
 8006056:	8879      	ldrh	r1, [r7, #2]
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8006072:	2200      	movs	r2, #0
 8006074:	2101      	movs	r1, #1
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f804 	bl	8006084 <optiga_util_set_comms_params>
    }
}
 800607c:	bf00      	nop
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
 8006090:	4613      	mov	r3, r2
 8006092:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d002      	beq.n	80060a0 <optiga_util_set_comms_params+0x1c>
 800609a:	2b02      	cmp	r3, #2
 800609c:	d005      	beq.n	80060aa <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 800609e:	e009      	b.n	80060b4 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	78ba      	ldrb	r2, [r7, #2]
 80060a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 80060a8:	e004      	b.n	80060b4 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	78ba      	ldrb	r2, [r7, #2]
 80060ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 80060b2:	bf00      	nop
        }
    }
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d02b      	beq.n	8006130 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80060d8:	2124      	movs	r1, #36	@ 0x24
 80060da:	2001      	movs	r0, #1
 80060dc:	f000 fc3c 	bl	8006958 <pal_os_calloc>
 80060e0:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d025      	beq.n	8006134 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	490c      	ldr	r1, [pc, #48]	@ (8006140 <optiga_util_create+0x80>)
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff f835 	bl	8005180 <optiga_cmd_create>
 8006116:	4602      	mov	r2, r0
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8006124:	6978      	ldr	r0, [r7, #20]
 8006126:	f000 fc25 	bl	8006974 <pal_os_free>
            me = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e002      	b.n	8006136 <optiga_util_create+0x76>
            break;
 8006130:	bf00      	nop
 8006132:	e000      	b.n	8006136 <optiga_util_create+0x76>
            break;
 8006134:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 8006136:	697b      	ldr	r3, [r7, #20]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	08006039 	.word	0x08006039

08006144 <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8006150:	f240 3302 	movw	r3, #770	@ 0x302
 8006154:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <optiga_util_open_application+0x20>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d103      	bne.n	800616c <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8006164:	f240 3303 	movw	r3, #771	@ 0x303
 8006168:	81fb      	strh	r3, [r7, #14]
            break;
 800616a:	e03d      	b.n	80061e8 <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8c1b      	ldrh	r3, [r3, #32]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d103      	bne.n	800617c <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8006174:	f240 3305 	movw	r3, #773	@ 0x305
 8006178:	81fb      	strh	r3, [r7, #14]
            break;
 800617a:	e035      	b.n	80061e8 <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6958      	ldr	r0, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800618c:	2200      	movs	r2, #0
 800618e:	4619      	mov	r1, r3
 8006190:	f7fd ffb2 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6958      	ldr	r0, [r3, #20]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800619e:	2201      	movs	r2, #1
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fd ffa9 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d107      	bne.n	80061bc <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2202      	movs	r2, #2
 80061b2:	2133      	movs	r1, #51	@ 0x33
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fd ff9f 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
 80061ba:	e006      	b.n	80061ca <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	2202      	movs	r2, #2
 80061c2:	2111      	movs	r1, #17
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fd ff97 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	78f9      	ldrb	r1, [r7, #3]
 80061d0:	2200      	movs	r2, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fa1e 	bl	8005614 <optiga_cmd_open_application>
 80061d8:	4603      	mov	r3, r0
 80061da:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 80061dc:	89fb      	ldrh	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff3b 	bl	8006064 <optiga_util_reset_protection_level>

    return (return_value);
 80061ee:	89fb      	ldrh	r3, [r7, #14]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	817b      	strh	r3, [r7, #10]
 8006206:	4613      	mov	r3, r2
 8006208:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 800620a:	f240 3302 	movw	r3, #770	@ 0x302
 800620e:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <optiga_util_read_data+0x32>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <optiga_util_read_data+0x32>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 800622a:	f240 3303 	movw	r3, #771	@ 0x303
 800622e:	82fb      	strh	r3, [r7, #22]
            break;
 8006230:	e04d      	b.n	80062ce <optiga_util_read_data+0xd6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8c1b      	ldrh	r3, [r3, #32]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d103      	bne.n	8006242 <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 800623a:	f240 3305 	movw	r3, #773	@ 0x305
 800623e:	82fb      	strh	r3, [r7, #22]
            break;
 8006240:	e045      	b.n	80062ce <optiga_util_read_data+0xd6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2214      	movs	r2, #20
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fba8 	bl	80069a8 <pal_os_memset>

        p_params->oid = optiga_oid;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	897a      	ldrh	r2, [r7, #10]
 800625c:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	893a      	ldrh	r2, [r7, #8]
 8006262:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2200      	movs	r2, #0
 8006268:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6a3a      	ldr	r2, [r7, #32]
 800627c:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2200      	movs	r2, #0
 8006282:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2200      	movs	r2, #0
 8006288:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6958      	ldr	r0, [r3, #20]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006294:	2200      	movs	r2, #0
 8006296:	4619      	mov	r1, r3
 8006298:	f7fd ff2e 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6958      	ldr	r0, [r3, #20]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80062a6:	2201      	movs	r2, #1
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fd ff25 	bl	80040f8 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6958      	ldr	r0, [r3, #20]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	7c9b      	ldrb	r3, [r3, #18]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	4619      	mov	r1, r3
 80062ba:	f7ff facd 	bl	8005858 <optiga_cmd_get_data_object>
 80062be:	4603      	mov	r3, r0
 80062c0:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 80062c2:	8afb      	ldrh	r3, [r7, #22]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <optiga_util_read_data+0xd6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff fec8 	bl	8006064 <optiga_util_reset_protection_level>

    return (return_value);
 80062d4:	8afb      	ldrh	r3, [r7, #22]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <pal_deinit>:


pal_status_t pal_deinit(void)
{
 80062ee:	b480      	push	{r7}
 80062f0:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 80062fe:	b480      	push	{r7}
 8006300:	b087      	sub	sp, #28
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	461a      	mov	r2, r3
 800630a:	460b      	mov	r3, r1
 800630c:	817b      	strh	r3, [r7, #10]
 800630e:	4613      	mov	r3, r2
 8006310:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d012      	beq.n	800633e <pal_crypt_tls_prf_sha256+0x40>
 8006318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00f      	beq.n	800633e <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 800631e:	2300      	movs	r3, #0
 8006320:	82fb      	strh	r3, [r7, #22]
 8006322:	e007      	b.n	8006334 <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8006324:	8afb      	ldrh	r3, [r7, #22]
 8006326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006328:	4413      	add	r3, r2
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	3301      	adds	r3, #1
 8006332:	82fb      	strh	r3, [r7, #22]
 8006334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	8afa      	ldrh	r2, [r7, #22]
 800633a:	429a      	cmp	r2, r3
 800633c:	d3f2      	bcc.n	8006324 <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 800633e:	bf00      	nop
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 800634a:	b480      	push	{r7}
 800634c:	b087      	sub	sp, #28
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	603b      	str	r3, [r7, #0]
 8006356:	4613      	mov	r3, r2
 8006358:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 800635a:	2300      	movs	r3, #0
 800635c:	82fb      	strh	r3, [r7, #22]
 800635e:	e00a      	b.n	8006376 <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 8006360:	8afb      	ldrh	r3, [r7, #22]
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	441a      	add	r2, r3
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800636a:	440b      	add	r3, r1
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8006370:	8afb      	ldrh	r3, [r7, #22]
 8006372:	3301      	adds	r3, #1
 8006374:	82fb      	strh	r3, [r7, #22]
 8006376:	8afa      	ldrh	r2, [r7, #22]
 8006378:	8c3b      	ldrh	r3, [r7, #32]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3f0      	bcc.n	8006360 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 800639c:	2300      	movs	r3, #0
 800639e:	82fb      	strh	r3, [r7, #22]
 80063a0:	e00a      	b.n	80063b8 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 80063a2:	8afb      	ldrh	r3, [r7, #22]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	441a      	add	r2, r3
 80063a8:	8afb      	ldrh	r3, [r7, #22]
 80063aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80063ac:	440b      	add	r3, r1
 80063ae:	7812      	ldrb	r2, [r2, #0]
 80063b0:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80063b2:	8afb      	ldrh	r3, [r7, #22]
 80063b4:	3301      	adds	r3, #1
 80063b6:	82fb      	strh	r3, [r7, #22]
 80063b8:	8afa      	ldrh	r2, [r7, #22]
 80063ba:	8c3b      	ldrh	r3, [r7, #32]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d3f0      	bcc.n	80063a2 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b082      	sub	sp, #8
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063de:	2201      	movs	r2, #1
 80063e0:	4619      	mov	r1, r3
 80063e2:	f003 f8bf 	bl	8009564 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 80063fe:	2200      	movs	r2, #0
 8006400:	4619      	mov	r1, r3
 8006402:	f003 f8af 	bl	8009564 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8006418:	4b08      	ldr	r3, [pc, #32]	@ (800643c <pal_i2c_acquire+0x2c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <pal_i2c_acquire+0x2c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	4a05      	ldr	r2, [pc, #20]	@ (800643c <pal_i2c_acquire+0x2c>)
 8006428:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 800642e:	2301      	movs	r3, #1
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000d54 	.word	0x20000d54

08006440 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 8006448:	4b04      	ldr	r3, [pc, #16]	@ (800645c <pal_i2c_release+0x1c>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	20000d54 	.word	0x20000d54

08006460 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8006460:	b590      	push	{r4, r7, lr}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 800647e:	887a      	ldrh	r2, [r7, #2]
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff ffd8 	bl	8006440 <pal_i2c_release>
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	bd90      	pop	{r4, r7, pc}

08006498 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff ff9a 	bl	8006410 <pal_i2c_acquire>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d120      	bne.n	8006524 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 80064e2:	4a16      	ldr	r2, [pc, #88]	@ (800653c <pal_i2c_write+0x78>)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	b299      	uxth	r1, r3
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064fa:	9200      	str	r2, [sp, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	f003 f9e3 	bl	80098c8 <HAL_I2C_Master_Transmit>
 8006502:	4603      	mov	r3, r0
 8006504:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006506:	7d7b      	ldrb	r3, [r7, #21]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 800650c:	2100      	movs	r1, #0
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f7ff ffa6 	bl	8006460 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006514:	2300      	movs	r3, #0
 8006516:	82fb      	strh	r3, [r7, #22]
 8006518:	e00a      	b.n	8006530 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 800651a:	2101      	movs	r1, #1
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f7ff ff9f 	bl	8006460 <invoke_upper_layer_callback>
 8006522:	e005      	b.n	8006530 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006524:	2302      	movs	r3, #2
 8006526:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006528:	2102      	movs	r1, #2
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff ff98 	bl	8006460 <invoke_upper_layer_callback>
    }

    return status;
 8006530:	8afb      	ldrh	r3, [r7, #22]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000d58 	.word	0x20000d58

08006540 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 800654e:	2301      	movs	r3, #1
 8006550:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f7ff ff5c 	bl	8006410 <pal_i2c_acquire>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d120      	bne.n	80065a0 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 800655e:	4a16      	ldr	r2, [pc, #88]	@ (80065b8 <pal_i2c_read+0x78>)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	b299      	uxth	r1, r3
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006576:	9200      	str	r2, [sp, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	f003 faa3 	bl	8009ac4 <HAL_I2C_Master_Receive>
 800657e:	4603      	mov	r3, r0
 8006580:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006582:	7d7b      	ldrb	r3, [r7, #21]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d106      	bne.n	8006596 <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006588:	2100      	movs	r1, #0
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff ff68 	bl	8006460 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006590:	2300      	movs	r3, #0
 8006592:	82fb      	strh	r3, [r7, #22]
 8006594:	e00a      	b.n	80065ac <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8006596:	2101      	movs	r1, #1
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff ff61 	bl	8006460 <invoke_upper_layer_callback>
 800659e:	e005      	b.n	80065ac <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80065a0:	2302      	movs	r3, #2
 80065a2:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 80065a4:	2102      	movs	r1, #2
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff ff5a 	bl	8006460 <invoke_upper_layer_callback>
    }

    return status;
 80065ac:	8afb      	ldrh	r3, [r7, #22]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000d58 	.word	0x20000d58

080065bc <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	80fb      	strh	r3, [r7, #6]
 80065e4:	4613      	mov	r3, r2
 80065e6:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	2b33      	cmp	r3, #51	@ 0x33
 80065f4:	d043      	beq.n	800667e <pal_os_datastore_write+0xa6>
 80065f6:	2b33      	cmp	r3, #51	@ 0x33
 80065f8:	dc5e      	bgt.n	80066b8 <pal_os_datastore_write+0xe0>
 80065fa:	2b11      	cmp	r3, #17
 80065fc:	d002      	beq.n	8006604 <pal_os_datastore_write+0x2c>
 80065fe:	2b22      	cmp	r3, #34	@ 0x22
 8006600:	d020      	beq.n	8006644 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8006602:	e059      	b.n	80066b8 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006604:	88bb      	ldrh	r3, [r7, #4]
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d858      	bhi.n	80066bc <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 800660a:	88bb      	ldrh	r3, [r7, #4]
 800660c:	0a1b      	lsrs	r3, r3, #8
 800660e:	b299      	uxth	r1, r3
 8006610:	7b7b      	ldrb	r3, [r7, #13]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	737a      	strb	r2, [r7, #13]
 8006616:	461a      	mov	r2, r3
 8006618:	b2c9      	uxtb	r1, r1
 800661a:	4b2b      	ldr	r3, [pc, #172]	@ (80066c8 <pal_os_datastore_write+0xf0>)
 800661c:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 800661e:	7b7b      	ldrb	r3, [r7, #13]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	737a      	strb	r2, [r7, #13]
 8006624:	461a      	mov	r2, r3
 8006626:	88bb      	ldrh	r3, [r7, #4]
 8006628:	b2d9      	uxtb	r1, r3
 800662a:	4b27      	ldr	r3, [pc, #156]	@ (80066c8 <pal_os_datastore_write+0xf0>)
 800662c:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 800662e:	7b7b      	ldrb	r3, [r7, #13]
 8006630:	4a25      	ldr	r2, [pc, #148]	@ (80066c8 <pal_os_datastore_write+0xf0>)
 8006632:	4413      	add	r3, r2
 8006634:	88ba      	ldrh	r2, [r7, #4]
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f008 f936 	bl	800e8aa <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 800663e:	2300      	movs	r3, #0
 8006640:	81fb      	strh	r3, [r7, #14]
            break;
 8006642:	e03b      	b.n	80066bc <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8006644:	88bb      	ldrh	r3, [r7, #4]
 8006646:	0a1b      	lsrs	r3, r3, #8
 8006648:	b299      	uxth	r1, r3
 800664a:	7b7b      	ldrb	r3, [r7, #13]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	737a      	strb	r2, [r7, #13]
 8006650:	461a      	mov	r2, r3
 8006652:	b2c9      	uxtb	r1, r1
 8006654:	4b1d      	ldr	r3, [pc, #116]	@ (80066cc <pal_os_datastore_write+0xf4>)
 8006656:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8006658:	7b7b      	ldrb	r3, [r7, #13]
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	737a      	strb	r2, [r7, #13]
 800665e:	461a      	mov	r2, r3
 8006660:	88bb      	ldrh	r3, [r7, #4]
 8006662:	b2d9      	uxtb	r1, r3
 8006664:	4b19      	ldr	r3, [pc, #100]	@ (80066cc <pal_os_datastore_write+0xf4>)
 8006666:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8006668:	7b7b      	ldrb	r3, [r7, #13]
 800666a:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <pal_os_datastore_write+0xf4>)
 800666c:	4413      	add	r3, r2
 800666e:	88ba      	ldrh	r2, [r7, #4]
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f008 f919 	bl	800e8aa <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8006678:	2300      	movs	r3, #0
 800667a:	81fb      	strh	r3, [r7, #14]
            break;
 800667c:	e01f      	b.n	80066be <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 800667e:	88bb      	ldrh	r3, [r7, #4]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	b299      	uxth	r1, r3
 8006684:	7b7b      	ldrb	r3, [r7, #13]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	737a      	strb	r2, [r7, #13]
 800668a:	461a      	mov	r2, r3
 800668c:	b2c9      	uxtb	r1, r1
 800668e:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <pal_os_datastore_write+0xf8>)
 8006690:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8006692:	7b7b      	ldrb	r3, [r7, #13]
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	737a      	strb	r2, [r7, #13]
 8006698:	461a      	mov	r2, r3
 800669a:	88bb      	ldrh	r3, [r7, #4]
 800669c:	b2d9      	uxtb	r1, r3
 800669e:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <pal_os_datastore_write+0xf8>)
 80066a0:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 80066a2:	7b7b      	ldrb	r3, [r7, #13]
 80066a4:	4a0a      	ldr	r2, [pc, #40]	@ (80066d0 <pal_os_datastore_write+0xf8>)
 80066a6:	4413      	add	r3, r2
 80066a8:	88ba      	ldrh	r2, [r7, #4]
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f008 f8fc 	bl	800e8aa <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80066b2:	2300      	movs	r3, #0
 80066b4:	81fb      	strh	r3, [r7, #14]
            break;
 80066b6:	e002      	b.n	80066be <pal_os_datastore_write+0xe6>
            break;
 80066b8:	bf00      	nop
 80066ba:	e000      	b.n	80066be <pal_os_datastore_write+0xe6>
            break;
 80066bc:	bf00      	nop
        }
    }
    return return_status;
 80066be:	89fb      	ldrh	r3, [r7, #14]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	2000050c 	.word	0x2000050c
 80066cc:	20000d5c 	.word	0x20000d5c
 80066d0:	20000da0 	.word	0x20000da0

080066d4 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	4603      	mov	r3, r0
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 80066e2:	2301      	movs	r3, #1
 80066e4:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 80066ea:	89fb      	ldrh	r3, [r7, #14]
 80066ec:	2b33      	cmp	r3, #51	@ 0x33
 80066ee:	d049      	beq.n	8006784 <pal_os_datastore_read+0xb0>
 80066f0:	2b33      	cmp	r3, #51	@ 0x33
 80066f2:	dc67      	bgt.n	80067c4 <pal_os_datastore_read+0xf0>
 80066f4:	2b11      	cmp	r3, #17
 80066f6:	d002      	beq.n	80066fe <pal_os_datastore_read+0x2a>
 80066f8:	2b22      	cmp	r3, #34	@ 0x22
 80066fa:	d023      	beq.n	8006744 <pal_os_datastore_read+0x70>
 80066fc:	e062      	b.n	80067c4 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 80066fe:	7d7b      	ldrb	r3, [r7, #21]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	757a      	strb	r2, [r7, #21]
 8006704:	461a      	mov	r2, r3
 8006706:	4b34      	ldr	r3, [pc, #208]	@ (80067d8 <pal_os_datastore_read+0x104>)
 8006708:	5c9b      	ldrb	r3, [r3, r2]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 800670e:	7d7b      	ldrb	r3, [r7, #21]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	757a      	strb	r2, [r7, #21]
 8006714:	461a      	mov	r2, r3
 8006716:	4b30      	ldr	r3, [pc, #192]	@ (80067d8 <pal_os_datastore_read+0x104>)
 8006718:	5c9b      	ldrb	r3, [r3, r2]
 800671a:	461a      	mov	r2, r3
 800671c:	8a7b      	ldrh	r3, [r7, #18]
 800671e:	4313      	orrs	r3, r2
 8006720:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006722:	8a7b      	ldrh	r3, [r7, #18]
 8006724:	2b40      	cmp	r3, #64	@ 0x40
 8006726:	d851      	bhi.n	80067cc <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8006728:	7d7b      	ldrb	r3, [r7, #21]
 800672a:	4a2b      	ldr	r2, [pc, #172]	@ (80067d8 <pal_os_datastore_read+0x104>)
 800672c:	4413      	add	r3, r2
 800672e:	8a7a      	ldrh	r2, [r7, #18]
 8006730:	4619      	mov	r1, r3
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f008 f8b9 	bl	800e8aa <memcpy>
                *p_buffer_length = data_length;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8a7a      	ldrh	r2, [r7, #18]
 800673c:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 800673e:	2300      	movs	r3, #0
 8006740:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8006742:	e043      	b.n	80067cc <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8006744:	7d7b      	ldrb	r3, [r7, #21]
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	757a      	strb	r2, [r7, #21]
 800674a:	461a      	mov	r2, r3
 800674c:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <pal_os_datastore_read+0x108>)
 800674e:	5c9b      	ldrb	r3, [r3, r2]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006754:	7d7b      	ldrb	r3, [r7, #21]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	757a      	strb	r2, [r7, #21]
 800675a:	461a      	mov	r2, r3
 800675c:	4b1f      	ldr	r3, [pc, #124]	@ (80067dc <pal_os_datastore_read+0x108>)
 800675e:	5c9b      	ldrb	r3, [r3, r2]
 8006760:	461a      	mov	r2, r3
 8006762:	8a7b      	ldrh	r3, [r7, #18]
 8006764:	4313      	orrs	r3, r2
 8006766:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8006768:	7d7b      	ldrb	r3, [r7, #21]
 800676a:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <pal_os_datastore_read+0x108>)
 800676c:	4413      	add	r3, r2
 800676e:	8a7a      	ldrh	r2, [r7, #18]
 8006770:	4619      	mov	r1, r3
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	f008 f899 	bl	800e8aa <memcpy>
            *p_buffer_length = data_length;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8a7a      	ldrh	r2, [r7, #18]
 800677c:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 800677e:	2300      	movs	r3, #0
 8006780:	82fb      	strh	r3, [r7, #22]
            break;
 8006782:	e024      	b.n	80067ce <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8006784:	7d7b      	ldrb	r3, [r7, #21]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	757a      	strb	r2, [r7, #21]
 800678a:	461a      	mov	r2, r3
 800678c:	4b14      	ldr	r3, [pc, #80]	@ (80067e0 <pal_os_datastore_read+0x10c>)
 800678e:	5c9b      	ldrb	r3, [r3, r2]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8006794:	7d7b      	ldrb	r3, [r7, #21]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	757a      	strb	r2, [r7, #21]
 800679a:	461a      	mov	r2, r3
 800679c:	4b10      	ldr	r3, [pc, #64]	@ (80067e0 <pal_os_datastore_read+0x10c>)
 800679e:	5c9b      	ldrb	r3, [r3, r2]
 80067a0:	461a      	mov	r2, r3
 80067a2:	8a7b      	ldrh	r3, [r7, #18]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 80067a8:	7d7b      	ldrb	r3, [r7, #21]
 80067aa:	4a0d      	ldr	r2, [pc, #52]	@ (80067e0 <pal_os_datastore_read+0x10c>)
 80067ac:	4413      	add	r3, r2
 80067ae:	8a7a      	ldrh	r2, [r7, #18]
 80067b0:	4619      	mov	r1, r3
 80067b2:	68b8      	ldr	r0, [r7, #8]
 80067b4:	f008 f879 	bl	800e8aa <memcpy>
            *p_buffer_length = data_length;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8a7a      	ldrh	r2, [r7, #18]
 80067bc:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80067be:	2300      	movs	r3, #0
 80067c0:	82fb      	strh	r3, [r7, #22]
            break;
 80067c2:	e004      	b.n	80067ce <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	801a      	strh	r2, [r3, #0]
            break;
 80067ca:	e000      	b.n	80067ce <pal_os_datastore_read+0xfa>
            break;
 80067cc:	bf00      	nop
        }
    }

    return return_status;
 80067ce:	8afb      	ldrh	r3, [r7, #22]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	2000050c 	.word	0x2000050c
 80067dc:	20000d5c 	.word	0x20000d5c
 80067e0:	20000da0 	.word	0x20000da0

080067e4 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	7a1b      	ldrb	r3, [r3, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 80067fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f82a 	bl	8006860 <pal_os_event_register_callback_oneshot>
    }
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	721a      	strb	r2, [r3, #8]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <pal_os_event_create+0x20>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d004      	beq.n	8006850 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4804      	ldr	r0, [pc, #16]	@ (800685c <pal_os_event_create+0x2c>)
 800684c:	f7ff ffca 	bl	80067e4 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006850:	4b02      	ldr	r3, [pc, #8]	@ (800685c <pal_os_event_create+0x2c>)
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000dac 	.word	0x20000dac

08006860 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	4a0d      	ldr	r2, [pc, #52]	@ (80068a8 <pal_os_event_register_callback_oneshot+0x48>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	099b      	lsrs	r3, r3, #6
 8006878:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 8006886:	f002 fb07 	bl	8008e98 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	4413      	add	r3, r2
 8006890:	4a06      	ldr	r2, [pc, #24]	@ (80068ac <pal_os_event_register_callback_oneshot+0x4c>)
 8006892:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <pal_os_event_register_callback_oneshot+0x50>)
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 800689a:	4806      	ldr	r0, [pc, #24]	@ (80068b4 <pal_os_event_register_callback_oneshot+0x54>)
 800689c:	f006 f9b0 	bl	800cc00 <HAL_TIM_Base_Start_IT>
}
 80068a0:	bf00      	nop
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	10624dd3 	.word	0x10624dd3
 80068ac:	20000dc4 	.word	0x20000dc4
 80068b0:	20000dc8 	.word	0x20000dc8
 80068b4:	20000634 	.word	0x20000634

080068b8 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <pal_os_event_trigger_registered_callback+0x3c>)
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d011      	beq.n	80068ea <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <pal_os_event_trigger_registered_callback+0x3c>)
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 80068cc:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <pal_os_event_trigger_registered_callback+0x3c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 80068d2:	4b08      	ldr	r3, [pc, #32]	@ (80068f4 <pal_os_event_trigger_registered_callback+0x3c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 80068d8:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <pal_os_event_trigger_registered_callback+0x3c>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 80068de:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <pal_os_event_trigger_registered_callback+0x40>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6838      	ldr	r0, [r7, #0]
 80068e8:	4798      	blx	r3
    }
}
 80068ea:	bf00      	nop
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000dac 	.word	0x20000dac
 80068f8:	20000dc8 	.word	0x20000dc8

080068fc <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006900:	4b07      	ldr	r3, [pc, #28]	@ (8006920 <pal_os_event_timer_tick+0x24>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <pal_os_event_timer_tick+0x1e>
 8006908:	f002 fac6 	bl	8008e98 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	4b05      	ldr	r3, [pc, #20]	@ (8006924 <pal_os_event_timer_tick+0x28>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d301      	bcc.n	800691a <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 8006916:	f7ff ffcf 	bl	80068b8 <pal_os_event_trigger_registered_callback>
    }
}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000dc8 	.word	0x20000dc8
 8006924:	20000dc4 	.word	0x20000dc4

08006928 <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 800694a:	b480      	push	{r7}
 800694c:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 800694e:	bf00      	nop
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f007 fd47 	bl	800e3f8 <calloc>
 800696a:	4603      	mov	r3, r0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <pal_os_free>:

void pal_os_free(void * block)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
    free(block);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f007 fd57 	bl	800e430 <free>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	68b9      	ldr	r1, [r7, #8]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f007 ff85 	bl	800e8aa <memcpy>
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	4619      	mov	r1, r3
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f007 ff2f 	bl	800e820 <memset>
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 80069ce:	f002 fa63 	bl	8008e98 <HAL_GetTick>
 80069d2:	4603      	mov	r3, r0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 80069dc:	f002 fa5c 	bl	8008e98 <HAL_GetTick>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 80069fa:	4b05      	ldr	r3, [pc, #20]	@ (8006a10 <mbedtls_platform_zeroize+0x20>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000550 	.word	0x20000550

08006a14 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006a1c:	226c      	movs	r2, #108	@ 0x6c
 8006a1e:	2100      	movs	r1, #0
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f007 fefd 	bl	800e820 <memset>
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b082      	sub	sp, #8
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8006a3c:	216c      	movs	r1, #108	@ 0x6c
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ffd6 	bl	80069f0 <mbedtls_platform_zeroize>
 8006a44:	e000      	b.n	8006a48 <mbedtls_sha256_free+0x1a>
        return;
 8006a46:	bf00      	nop
}
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d118      	bne.n	8006a9e <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <mbedtls_sha256_starts_ret+0x94>)
 8006a70:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae8 <mbedtls_sha256_starts_ret+0x98>)
 8006a76:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006aec <mbedtls_sha256_starts_ret+0x9c>)
 8006a7c:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a1b      	ldr	r2, [pc, #108]	@ (8006af0 <mbedtls_sha256_starts_ret+0xa0>)
 8006a82:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1b      	ldr	r2, [pc, #108]	@ (8006af4 <mbedtls_sha256_starts_ret+0xa4>)
 8006a88:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006af8 <mbedtls_sha256_starts_ret+0xa8>)
 8006a8e:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1a      	ldr	r2, [pc, #104]	@ (8006afc <mbedtls_sha256_starts_ret+0xac>)
 8006a94:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a19      	ldr	r2, [pc, #100]	@ (8006b00 <mbedtls_sha256_starts_ret+0xb0>)
 8006a9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a9c:	e017      	b.n	8006ace <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a18      	ldr	r2, [pc, #96]	@ (8006b04 <mbedtls_sha256_starts_ret+0xb4>)
 8006aa2:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	@ (8006b08 <mbedtls_sha256_starts_ret+0xb8>)
 8006aa8:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a17      	ldr	r2, [pc, #92]	@ (8006b0c <mbedtls_sha256_starts_ret+0xbc>)
 8006aae:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a17      	ldr	r2, [pc, #92]	@ (8006b10 <mbedtls_sha256_starts_ret+0xc0>)
 8006ab4:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a16      	ldr	r2, [pc, #88]	@ (8006b14 <mbedtls_sha256_starts_ret+0xc4>)
 8006aba:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a16      	ldr	r2, [pc, #88]	@ (8006b18 <mbedtls_sha256_starts_ret+0xc8>)
 8006ac0:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <mbedtls_sha256_starts_ret+0xcc>)
 8006ac6:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a15      	ldr	r2, [pc, #84]	@ (8006b20 <mbedtls_sha256_starts_ret+0xd0>)
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	6a09e667 	.word	0x6a09e667
 8006ae8:	bb67ae85 	.word	0xbb67ae85
 8006aec:	3c6ef372 	.word	0x3c6ef372
 8006af0:	a54ff53a 	.word	0xa54ff53a
 8006af4:	510e527f 	.word	0x510e527f
 8006af8:	9b05688c 	.word	0x9b05688c
 8006afc:	1f83d9ab 	.word	0x1f83d9ab
 8006b00:	5be0cd19 	.word	0x5be0cd19
 8006b04:	c1059ed8 	.word	0xc1059ed8
 8006b08:	367cd507 	.word	0x367cd507
 8006b0c:	3070dd17 	.word	0x3070dd17
 8006b10:	f70e5939 	.word	0xf70e5939
 8006b14:	ffc00b31 	.word	0xffc00b31
 8006b18:	68581511 	.word	0x68581511
 8006b1c:	64f98fa7 	.word	0x64f98fa7
 8006b20:	befa4fa4 	.word	0xbefa4fa4

08006b24 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8006b24:	b490      	push	{r4, r7}
 8006b26:	b0ce      	sub	sp, #312	@ 0x138
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006b32:	6018      	str	r0, [r3, #0]
 8006b34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006b3c:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b44:	e016      	b.n	8006b74 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8006b46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006b54:	3202      	adds	r2, #2
 8006b56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006b62:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8006b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b6e:	3301      	adds	r3, #1
 8006b70:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	d9e4      	bls.n	8006b46 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006b82:	e03e      	b.n	8006c02 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8006b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006b8e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	061a      	lsls	r2, r3, #24
 8006b9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006ba6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006baa:	6809      	ldr	r1, [r1, #0]
 8006bac:	440b      	add	r3, r1
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	041b      	lsls	r3, r3, #16
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	3302      	adds	r3, #2
 8006bbc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006bc0:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006bc4:	6809      	ldr	r1, [r1, #0]
 8006bc6:	440b      	add	r3, r1
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	3203      	adds	r2, #3
 8006bd6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8006bda:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006bde:	6809      	ldr	r1, [r1, #0]
 8006be0:	440a      	add	r2, r1
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	ea43 0102 	orr.w	r1, r3, r2
 8006be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006bec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006bf0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8006bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8006bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006c02:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	d9bc      	bls.n	8006b84 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006c10:	f000 bcba 	b.w	8007588 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8006c14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c1c:	69da      	ldr	r2, [r3, #28]
 8006c1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006c2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006c3a:	4059      	eors	r1, r3
 8006c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006c4a:	404b      	eors	r3, r1
 8006c4c:	441a      	add	r2, r3
 8006c4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c56:	6999      	ldr	r1, [r3, #24]
 8006c58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c60:	6918      	ldr	r0, [r3, #16]
 8006c62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c6a:	695c      	ldr	r4, [r3, #20]
 8006c6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	4063      	eors	r3, r4
 8006c78:	4003      	ands	r3, r0
 8006c7a:	404b      	eors	r3, r1
 8006c7c:	441a      	add	r2, r3
 8006c7e:	49e0      	ldr	r1, [pc, #896]	@ (8007000 <mbedtls_internal_sha256_process+0x4dc>)
 8006c80:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c88:	441a      	add	r2, r3
 8006c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006c8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006c92:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8006c96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006ca0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ca4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006cae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006cbc:	405a      	eors	r2, r3
 8006cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006ccc:	405a      	eors	r2, r3
 8006cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cd6:	6819      	ldr	r1, [r3, #0]
 8006cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4019      	ands	r1, r3
 8006ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ce8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cec:	6898      	ldr	r0, [r3, #8]
 8006cee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cf2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cf6:	681c      	ldr	r4, [r3, #0]
 8006cf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006cfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	4323      	orrs	r3, r4
 8006d04:	4003      	ands	r3, r0
 8006d06:	430b      	orrs	r3, r1
 8006d08:	4413      	add	r3, r2
 8006d0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006d1c:	441a      	add	r2, r3
 8006d1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d26:	60da      	str	r2, [r3, #12]
 8006d28:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d30:	441a      	add	r2, r3
 8006d32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d3a:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8006d3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006d54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006d62:	4059      	eors	r1, r3
 8006d64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006d72:	404b      	eors	r3, r1
 8006d74:	441a      	add	r2, r3
 8006d76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d7e:	6959      	ldr	r1, [r3, #20]
 8006d80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d88:	68d8      	ldr	r0, [r3, #12]
 8006d8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d92:	691c      	ldr	r4, [r3, #16]
 8006d94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006d98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	4063      	eors	r3, r4
 8006da0:	4003      	ands	r3, r0
 8006da2:	404b      	eors	r3, r1
 8006da4:	441a      	add	r2, r3
 8006da6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006daa:	3301      	adds	r3, #1
 8006dac:	4994      	ldr	r1, [pc, #592]	@ (8007000 <mbedtls_internal_sha256_process+0x4dc>)
 8006dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006db2:	441a      	add	r2, r3
 8006db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006dc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006dda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006de8:	405a      	eors	r2, r3
 8006dea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006df8:	405a      	eors	r2, r3
 8006dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006dfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e02:	69d9      	ldr	r1, [r3, #28]
 8006e04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4019      	ands	r1, r3
 8006e10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e18:	6858      	ldr	r0, [r3, #4]
 8006e1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e22:	69dc      	ldr	r4, [r3, #28]
 8006e24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4323      	orrs	r3, r4
 8006e30:	4003      	ands	r3, r0
 8006e32:	430b      	orrs	r3, r1
 8006e34:	4413      	add	r3, r2
 8006e36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006e3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006e48:	441a      	add	r2, r3
 8006e4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e52:	609a      	str	r2, [r3, #8]
 8006e54:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e5c:	441a      	add	r2, r3
 8006e5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e66:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8006e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e70:	695a      	ldr	r2, [r3, #20]
 8006e72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006e80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006e8e:	4059      	eors	r1, r3
 8006e90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006e94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006e9e:	404b      	eors	r3, r1
 8006ea0:	441a      	add	r2, r3
 8006ea2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ea6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eaa:	6919      	ldr	r1, [r3, #16]
 8006eac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006eb4:	6898      	ldr	r0, [r3, #8]
 8006eb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ebe:	68dc      	ldr	r4, [r3, #12]
 8006ec0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ec4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	4063      	eors	r3, r4
 8006ecc:	4003      	ands	r3, r0
 8006ece:	404b      	eors	r3, r1
 8006ed0:	441a      	add	r2, r3
 8006ed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	4949      	ldr	r1, [pc, #292]	@ (8007000 <mbedtls_internal_sha256_process+0x4dc>)
 8006eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006ede:	441a      	add	r2, r3
 8006ee0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006ee4:	1c99      	adds	r1, r3, #2
 8006ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006eee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006efc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8006f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	ea4f 3373 	mov.w	r3, r3, ror #13
 8006f14:	405a      	eors	r2, r3
 8006f16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8006f24:	405a      	eors	r2, r3
 8006f26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f2e:	6999      	ldr	r1, [r3, #24]
 8006f30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	4019      	ands	r1, r3
 8006f3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f4e:	699c      	ldr	r4, [r3, #24]
 8006f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	4323      	orrs	r3, r4
 8006f5c:	4003      	ands	r3, r0
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	4413      	add	r3, r2
 8006f62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006f66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006f74:	441a      	add	r2, r3
 8006f76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f7e:	605a      	str	r2, [r3, #4]
 8006f80:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f88:	441a      	add	r2, r3
 8006f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f92:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8006f94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006f98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8006fac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8006fba:	4059      	eors	r1, r3
 8006fbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8006fca:	404b      	eors	r3, r1
 8006fcc:	441a      	add	r2, r3
 8006fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fd6:	68d9      	ldr	r1, [r3, #12]
 8006fd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fe0:	6858      	ldr	r0, [r3, #4]
 8006fe2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006fe6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006fea:	689c      	ldr	r4, [r3, #8]
 8006fec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ff0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	4063      	eors	r3, r4
 8006ff8:	4003      	ands	r3, r0
 8006ffa:	404b      	eors	r3, r1
 8006ffc:	441a      	add	r2, r3
 8006ffe:	e001      	b.n	8007004 <mbedtls_internal_sha256_process+0x4e0>
 8007000:	0800f6c8 	.word	0x0800f6c8
 8007004:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007008:	3303      	adds	r3, #3
 800700a:	49e0      	ldr	r1, [pc, #896]	@ (800738c <mbedtls_internal_sha256_process+0x868>)
 800700c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007010:	441a      	add	r2, r3
 8007012:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007016:	1cd9      	adds	r1, r3, #3
 8007018:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800701c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007020:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007024:	4413      	add	r3, r2
 8007026:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800702a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800702e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007038:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800703c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007046:	405a      	eors	r2, r3
 8007048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800704c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007056:	405a      	eors	r2, r3
 8007058:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800705c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007060:	6959      	ldr	r1, [r3, #20]
 8007062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	4019      	ands	r1, r3
 800706e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007072:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007076:	69d8      	ldr	r0, [r3, #28]
 8007078:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800707c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007080:	695c      	ldr	r4, [r3, #20]
 8007082:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	4323      	orrs	r3, r4
 800708e:	4003      	ands	r3, r0
 8007090:	430b      	orrs	r3, r1
 8007092:	4413      	add	r3, r2
 8007094:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007098:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800709c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80070a6:	441a      	add	r2, r3
 80070a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80070b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80070ba:	441a      	add	r2, r3
 80070bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070c4:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80070c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80070de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80070ec:	4059      	eors	r1, r3
 80070ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80070fc:	404b      	eors	r3, r1
 80070fe:	441a      	add	r2, r3
 8007100:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007104:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007108:	6899      	ldr	r1, [r3, #8]
 800710a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800710e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007118:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800711c:	685c      	ldr	r4, [r3, #4]
 800711e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007122:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4063      	eors	r3, r4
 800712a:	4003      	ands	r3, r0
 800712c:	404b      	eors	r3, r1
 800712e:	441a      	add	r2, r3
 8007130:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007134:	3304      	adds	r3, #4
 8007136:	4995      	ldr	r1, [pc, #596]	@ (800738c <mbedtls_internal_sha256_process+0x868>)
 8007138:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800713c:	441a      	add	r2, r3
 800713e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007142:	1d19      	adds	r1, r3, #4
 8007144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007148:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800714c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007150:	4413      	add	r3, r2
 8007152:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800715a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007164:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007168:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007172:	405a      	eors	r2, r3
 8007174:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007178:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007182:	405a      	eors	r2, r3
 8007184:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007188:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800718c:	6919      	ldr	r1, [r3, #16]
 800718e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007192:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	4019      	ands	r1, r3
 800719a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800719e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071a2:	6998      	ldr	r0, [r3, #24]
 80071a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ac:	691c      	ldr	r4, [r3, #16]
 80071ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	4323      	orrs	r3, r4
 80071ba:	4003      	ands	r3, r0
 80071bc:	430b      	orrs	r3, r1
 80071be:	4413      	add	r3, r2
 80071c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80071c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071cc:	69da      	ldr	r2, [r3, #28]
 80071ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80071d2:	441a      	add	r2, r3
 80071d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071dc:	61da      	str	r2, [r3, #28]
 80071de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80071e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80071e6:	441a      	add	r2, r3
 80071e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071f0:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80071f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007200:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800720a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800720e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007218:	4059      	eors	r1, r3
 800721a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800721e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007228:	404b      	eors	r3, r1
 800722a:	441a      	add	r2, r3
 800722c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007230:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007234:	6859      	ldr	r1, [r3, #4]
 8007236:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800723a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800723e:	69d8      	ldr	r0, [r3, #28]
 8007240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007244:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007248:	681c      	ldr	r4, [r3, #0]
 800724a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800724e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4063      	eors	r3, r4
 8007256:	4003      	ands	r3, r0
 8007258:	404b      	eors	r3, r1
 800725a:	441a      	add	r2, r3
 800725c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007260:	3305      	adds	r3, #5
 8007262:	494a      	ldr	r1, [pc, #296]	@ (800738c <mbedtls_internal_sha256_process+0x868>)
 8007264:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007268:	441a      	add	r2, r3
 800726a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800726e:	1d59      	adds	r1, r3, #5
 8007270:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007274:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800727c:	4413      	add	r3, r2
 800727e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007282:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007286:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007290:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007294:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800729e:	405a      	eors	r2, r3
 80072a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80072ae:	405a      	eors	r2, r3
 80072b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072b8:	68d9      	ldr	r1, [r3, #12]
 80072ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4019      	ands	r1, r3
 80072c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072ce:	6958      	ldr	r0, [r3, #20]
 80072d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072d8:	68dc      	ldr	r4, [r3, #12]
 80072da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	4323      	orrs	r3, r4
 80072e6:	4003      	ands	r3, r0
 80072e8:	430b      	orrs	r3, r1
 80072ea:	4413      	add	r3, r2
 80072ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80072f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072fe:	441a      	add	r2, r3
 8007300:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007304:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007308:	619a      	str	r2, [r3, #24]
 800730a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800730e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007312:	441a      	add	r2, r3
 8007314:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007318:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800731c:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 800731e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007322:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800732c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007336:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800733a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007344:	4059      	eors	r1, r3
 8007346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800734a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007354:	404b      	eors	r3, r1
 8007356:	441a      	add	r2, r3
 8007358:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800735c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007360:	6819      	ldr	r1, [r3, #0]
 8007362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007366:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800736a:	6998      	ldr	r0, [r3, #24]
 800736c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007370:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007374:	69dc      	ldr	r4, [r3, #28]
 8007376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800737a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4063      	eors	r3, r4
 8007382:	4003      	ands	r3, r0
 8007384:	404b      	eors	r3, r1
 8007386:	441a      	add	r2, r3
 8007388:	e002      	b.n	8007390 <mbedtls_internal_sha256_process+0x86c>
 800738a:	bf00      	nop
 800738c:	0800f6c8 	.word	0x0800f6c8
 8007390:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007394:	3306      	adds	r3, #6
 8007396:	4981      	ldr	r1, [pc, #516]	@ (800759c <mbedtls_internal_sha256_process+0xa78>)
 8007398:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800739c:	441a      	add	r2, r3
 800739e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80073a2:	1d99      	adds	r1, r3, #6
 80073a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80073ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073b0:	4413      	add	r3, r2
 80073b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80073b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80073c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80073d2:	405a      	eors	r2, r3
 80073d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80073e2:	405a      	eors	r2, r3
 80073e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ec:	6899      	ldr	r1, [r3, #8]
 80073ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	4019      	ands	r1, r3
 80073fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007402:	6918      	ldr	r0, [r3, #16]
 8007404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007408:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800740c:	689c      	ldr	r4, [r3, #8]
 800740e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007412:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	4323      	orrs	r3, r4
 800741a:	4003      	ands	r3, r0
 800741c:	430b      	orrs	r3, r1
 800741e:	4413      	add	r3, r2
 8007420:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007432:	441a      	add	r2, r3
 8007434:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007438:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800743c:	615a      	str	r2, [r3, #20]
 800743e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007446:	441a      	add	r2, r3
 8007448:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800744c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007450:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8007452:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007456:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007460:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800746a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800746e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007478:	4059      	eors	r1, r3
 800747a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800747e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007488:	404b      	eors	r3, r1
 800748a:	441a      	add	r2, r3
 800748c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007494:	69d9      	ldr	r1, [r3, #28]
 8007496:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800749a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800749e:	6958      	ldr	r0, [r3, #20]
 80074a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074a8:	699c      	ldr	r4, [r3, #24]
 80074aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	4063      	eors	r3, r4
 80074b6:	4003      	ands	r3, r0
 80074b8:	404b      	eors	r3, r1
 80074ba:	441a      	add	r2, r3
 80074bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074c0:	3307      	adds	r3, #7
 80074c2:	4936      	ldr	r1, [pc, #216]	@ (800759c <mbedtls_internal_sha256_process+0xa78>)
 80074c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074c8:	441a      	add	r2, r3
 80074ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074ce:	1dd9      	adds	r1, r3, #7
 80074d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80074d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074dc:	4413      	add	r3, r2
 80074de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80074e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80074f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80074fe:	405a      	eors	r2, r3
 8007500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007504:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800750e:	405a      	eors	r2, r3
 8007510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007514:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800751e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	4019      	ands	r1, r3
 8007526:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800752a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800752e:	68d8      	ldr	r0, [r3, #12]
 8007530:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007534:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007538:	685c      	ldr	r4, [r3, #4]
 800753a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800753e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4323      	orrs	r3, r4
 8007546:	4003      	ands	r3, r0
 8007548:	430b      	orrs	r3, r1
 800754a:	4413      	add	r3, r2
 800754c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007550:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007554:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800755e:	441a      	add	r2, r3
 8007560:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007564:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007568:	611a      	str	r2, [r3, #16]
 800756a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800756e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007572:	441a      	add	r2, r3
 8007574:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007578:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800757c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 800757e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007582:	3308      	adds	r3, #8
 8007584:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007588:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800758c:	2b0f      	cmp	r3, #15
 800758e:	f67f ab41 	bls.w	8006c14 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8007592:	2310      	movs	r3, #16
 8007594:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007598:	f000 bfd5 	b.w	8008546 <mbedtls_internal_sha256_process+0x1a22>
 800759c:	0800f6c8 	.word	0x0800f6c8
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80075a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075a8:	69da      	ldr	r2, [r3, #28]
 80075aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80075b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80075c6:	4059      	eors	r1, r3
 80075c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80075d6:	404b      	eors	r3, r1
 80075d8:	441a      	add	r2, r3
 80075da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075e2:	6999      	ldr	r1, [r3, #24]
 80075e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075ec:	6918      	ldr	r0, [r3, #16]
 80075ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075f6:	695c      	ldr	r4, [r3, #20]
 80075f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	4063      	eors	r3, r4
 8007604:	4003      	ands	r3, r0
 8007606:	404b      	eors	r3, r1
 8007608:	441a      	add	r2, r3
 800760a:	49ec      	ldr	r1, [pc, #944]	@ (80079bc <mbedtls_internal_sha256_process+0xe98>)
 800760c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007610:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007614:	441a      	add	r2, r3
 8007616:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800761a:	1e99      	subs	r1, r3, #2
 800761c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007620:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007628:	ea4f 4173 	mov.w	r1, r3, ror #17
 800762c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007630:	1e98      	subs	r0, r3, #2
 8007632:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007636:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800763a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800763e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007642:	4059      	eors	r1, r3
 8007644:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007648:	1e98      	subs	r0, r3, #2
 800764a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800764e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007652:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007656:	0a9b      	lsrs	r3, r3, #10
 8007658:	4059      	eors	r1, r3
 800765a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800765e:	1fd8      	subs	r0, r3, #7
 8007660:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007664:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007668:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800766c:	4419      	add	r1, r3
 800766e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007672:	f1a3 000f 	sub.w	r0, r3, #15
 8007676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800767a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800767e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007682:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007686:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800768a:	f1a3 040f 	sub.w	r4, r3, #15
 800768e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007692:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007696:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800769a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800769e:	4058      	eors	r0, r3
 80076a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076a4:	f1a3 040f 	sub.w	r4, r3, #15
 80076a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076b0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80076b4:	08db      	lsrs	r3, r3, #3
 80076b6:	4043      	eors	r3, r0
 80076b8:	4419      	add	r1, r3
 80076ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076be:	f1a3 0010 	sub.w	r0, r3, #16
 80076c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80076ce:	18c8      	adds	r0, r1, r3
 80076d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076d8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80076dc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 80076e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076e8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80076ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076f0:	4413      	add	r3, r2
 80076f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80076f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007704:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007708:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007712:	405a      	eors	r2, r3
 8007714:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007718:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007722:	405a      	eors	r2, r3
 8007724:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007728:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007732:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4019      	ands	r1, r3
 800773a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800773e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007742:	6898      	ldr	r0, [r3, #8]
 8007744:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007748:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800774c:	681c      	ldr	r4, [r3, #0]
 800774e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007752:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4323      	orrs	r3, r4
 800775a:	4003      	ands	r3, r0
 800775c:	430b      	orrs	r3, r1
 800775e:	4413      	add	r3, r2
 8007760:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007764:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007768:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007772:	441a      	add	r2, r3
 8007774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007778:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800777c:	60da      	str	r2, [r3, #12]
 800777e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007782:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007786:	441a      	add	r2, r3
 8007788:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800778c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007790:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8007792:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007796:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80077aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80077b8:	4059      	eors	r1, r3
 80077ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80077c8:	404b      	eors	r3, r1
 80077ca:	441a      	add	r2, r3
 80077cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077d4:	6959      	ldr	r1, [r3, #20]
 80077d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077de:	68d8      	ldr	r0, [r3, #12]
 80077e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077e8:	691c      	ldr	r4, [r3, #16]
 80077ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	4063      	eors	r3, r4
 80077f6:	4003      	ands	r3, r0
 80077f8:	404b      	eors	r3, r1
 80077fa:	441a      	add	r2, r3
 80077fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007800:	3301      	adds	r3, #1
 8007802:	496e      	ldr	r1, [pc, #440]	@ (80079bc <mbedtls_internal_sha256_process+0xe98>)
 8007804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007808:	441a      	add	r2, r3
 800780a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800780e:	1e59      	subs	r1, r3, #1
 8007810:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007814:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800781c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007820:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007824:	1e58      	subs	r0, r3, #1
 8007826:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800782a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800782e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007832:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007836:	4059      	eors	r1, r3
 8007838:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800783c:	1e58      	subs	r0, r3, #1
 800783e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007842:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007846:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800784a:	0a9b      	lsrs	r3, r3, #10
 800784c:	4059      	eors	r1, r3
 800784e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007852:	1f98      	subs	r0, r3, #6
 8007854:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007858:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800785c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007860:	4419      	add	r1, r3
 8007862:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007866:	f1a3 000e 	sub.w	r0, r3, #14
 800786a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800786e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007872:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007876:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800787a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800787e:	f1a3 040e 	sub.w	r4, r3, #14
 8007882:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007886:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800788a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800788e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007892:	4058      	eors	r0, r3
 8007894:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007898:	f1a3 040e 	sub.w	r4, r3, #14
 800789c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80078a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80078a8:	08db      	lsrs	r3, r3, #3
 80078aa:	4043      	eors	r3, r0
 80078ac:	18c8      	adds	r0, r1, r3
 80078ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078b2:	f1a3 010f 	sub.w	r1, r3, #15
 80078b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80078be:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80078c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078c6:	3301      	adds	r3, #1
 80078c8:	4408      	add	r0, r1
 80078ca:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80078ce:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80078d2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80078d6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80078da:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80078de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80078e2:	4413      	add	r3, r2
 80078e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80078e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80078f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007904:	405a      	eors	r2, r3
 8007906:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800790a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007914:	405a      	eors	r2, r3
 8007916:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800791a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800791e:	69d9      	ldr	r1, [r3, #28]
 8007920:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4019      	ands	r1, r3
 800792c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007930:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007934:	6858      	ldr	r0, [r3, #4]
 8007936:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800793a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800793e:	69dc      	ldr	r4, [r3, #28]
 8007940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007944:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4323      	orrs	r3, r4
 800794c:	4003      	ands	r3, r0
 800794e:	430b      	orrs	r3, r1
 8007950:	4413      	add	r3, r2
 8007952:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800795a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007964:	441a      	add	r2, r3
 8007966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800796a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800796e:	609a      	str	r2, [r3, #8]
 8007970:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007974:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007978:	441a      	add	r2, r3
 800797a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800797e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007982:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8007984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800798c:	695a      	ldr	r2, [r3, #20]
 800798e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007992:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800799c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80079aa:	4059      	eors	r1, r3
 80079ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80079ba:	e001      	b.n	80079c0 <mbedtls_internal_sha256_process+0xe9c>
 80079bc:	0800f6c8 	.word	0x0800f6c8
 80079c0:	404b      	eors	r3, r1
 80079c2:	441a      	add	r2, r3
 80079c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079cc:	6919      	ldr	r1, [r3, #16]
 80079ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079d6:	6898      	ldr	r0, [r3, #8]
 80079d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079e0:	68dc      	ldr	r4, [r3, #12]
 80079e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	4063      	eors	r3, r4
 80079ee:	4003      	ands	r3, r0
 80079f0:	404b      	eors	r3, r1
 80079f2:	441a      	add	r2, r3
 80079f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80079f8:	3302      	adds	r3, #2
 80079fa:	49ec      	ldr	r1, [pc, #944]	@ (8007dac <mbedtls_internal_sha256_process+0x1288>)
 80079fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007a00:	441a      	add	r2, r3
 8007a02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a0a:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007a0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a12:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007a16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a1e:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007a22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a26:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007a2a:	4059      	eors	r1, r3
 8007a2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a34:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007a38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a3c:	0a9b      	lsrs	r3, r3, #10
 8007a3e:	4059      	eors	r1, r3
 8007a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a44:	1f58      	subs	r0, r3, #5
 8007a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a52:	4419      	add	r1, r3
 8007a54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a58:	f1a3 000d 	sub.w	r0, r3, #13
 8007a5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a60:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007a68:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007a6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a70:	f1a3 040d 	sub.w	r4, r3, #13
 8007a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a80:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007a84:	4058      	eors	r0, r3
 8007a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a8a:	f1a3 040d 	sub.w	r4, r3, #13
 8007a8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	4043      	eors	r3, r0
 8007a9e:	18c8      	adds	r0, r1, r3
 8007aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007aa4:	f1a3 010e 	sub.w	r1, r3, #14
 8007aa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ab0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ab8:	3302      	adds	r3, #2
 8007aba:	4408      	add	r0, r1
 8007abc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007ac0:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ac4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007ac8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007acc:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007ad0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007ada:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ade:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007ae8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007af6:	405a      	eors	r2, r3
 8007af8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007afc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007b06:	405a      	eors	r2, r3
 8007b08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b10:	6999      	ldr	r1, [r3, #24]
 8007b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	4019      	ands	r1, r3
 8007b1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b30:	699c      	ldr	r4, [r3, #24]
 8007b32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	4323      	orrs	r3, r4
 8007b3e:	4003      	ands	r3, r0
 8007b40:	430b      	orrs	r3, r1
 8007b42:	4413      	add	r3, r2
 8007b44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007b48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b56:	441a      	add	r2, r3
 8007b58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b60:	605a      	str	r2, [r3, #4]
 8007b62:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b6a:	441a      	add	r2, r3
 8007b6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b74:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8007b76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007b8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007b9c:	4059      	eors	r1, r3
 8007b9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ba2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007bac:	404b      	eors	r3, r1
 8007bae:	441a      	add	r2, r3
 8007bb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bb8:	68d9      	ldr	r1, [r3, #12]
 8007bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bc2:	6858      	ldr	r0, [r3, #4]
 8007bc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bcc:	689c      	ldr	r4, [r3, #8]
 8007bce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4063      	eors	r3, r4
 8007bda:	4003      	ands	r3, r0
 8007bdc:	404b      	eors	r3, r1
 8007bde:	441a      	add	r2, r3
 8007be0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007be4:	3303      	adds	r3, #3
 8007be6:	4971      	ldr	r1, [pc, #452]	@ (8007dac <mbedtls_internal_sha256_process+0x1288>)
 8007be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007bec:	441a      	add	r2, r3
 8007bee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bf2:	1c59      	adds	r1, r3, #1
 8007bf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bf8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c00:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007c04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c08:	1c58      	adds	r0, r3, #1
 8007c0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c16:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007c1a:	4059      	eors	r1, r3
 8007c1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c20:	1c58      	adds	r0, r3, #1
 8007c22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c2e:	0a9b      	lsrs	r3, r3, #10
 8007c30:	4059      	eors	r1, r3
 8007c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c36:	1f18      	subs	r0, r3, #4
 8007c38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c44:	4419      	add	r1, r3
 8007c46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c4a:	f1a3 000c 	sub.w	r0, r3, #12
 8007c4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c5a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007c5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c62:	f1a3 040c 	sub.w	r4, r3, #12
 8007c66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c72:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007c76:	4058      	eors	r0, r3
 8007c78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c7c:	f1a3 040c 	sub.w	r4, r3, #12
 8007c80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c88:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c8c:	08db      	lsrs	r3, r3, #3
 8007c8e:	4043      	eors	r3, r0
 8007c90:	18c8      	adds	r0, r1, r3
 8007c92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c96:	f1a3 010d 	sub.w	r1, r3, #13
 8007c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ca2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007caa:	3303      	adds	r3, #3
 8007cac:	4408      	add	r0, r1
 8007cae:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007cb2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007cb6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007cba:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007cbe:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007cc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007ccc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007cda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007ce8:	405a      	eors	r2, r3
 8007cea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007cf8:	405a      	eors	r2, r3
 8007cfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d02:	6959      	ldr	r1, [r3, #20]
 8007d04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	4019      	ands	r1, r3
 8007d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d18:	69d8      	ldr	r0, [r3, #28]
 8007d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d22:	695c      	ldr	r4, [r3, #20]
 8007d24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	4323      	orrs	r3, r4
 8007d30:	4003      	ands	r3, r0
 8007d32:	430b      	orrs	r3, r1
 8007d34:	4413      	add	r3, r2
 8007d36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007d3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d48:	441a      	add	r2, r3
 8007d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d5c:	441a      	add	r2, r3
 8007d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d66:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8007d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007d80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007d8e:	4059      	eors	r1, r3
 8007d90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007d9e:	404b      	eors	r3, r1
 8007da0:	441a      	add	r2, r3
 8007da2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007da6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007daa:	e001      	b.n	8007db0 <mbedtls_internal_sha256_process+0x128c>
 8007dac:	0800f6c8 	.word	0x0800f6c8
 8007db0:	6899      	ldr	r1, [r3, #8]
 8007db2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007db6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dc4:	685c      	ldr	r4, [r3, #4]
 8007dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	4063      	eors	r3, r4
 8007dd2:	4003      	ands	r3, r0
 8007dd4:	404b      	eors	r3, r1
 8007dd6:	441a      	add	r2, r3
 8007dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ddc:	3304      	adds	r3, #4
 8007dde:	49ec      	ldr	r1, [pc, #944]	@ (8008190 <mbedtls_internal_sha256_process+0x166c>)
 8007de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007de4:	441a      	add	r2, r3
 8007de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dea:	1c99      	adds	r1, r3, #2
 8007dec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007df4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007df8:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007dfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e00:	1c98      	adds	r0, r3, #2
 8007e02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e0e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007e12:	4059      	eors	r1, r3
 8007e14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e18:	1c98      	adds	r0, r3, #2
 8007e1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e26:	0a9b      	lsrs	r3, r3, #10
 8007e28:	4059      	eors	r1, r3
 8007e2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e2e:	1ed8      	subs	r0, r3, #3
 8007e30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e3c:	4419      	add	r1, r3
 8007e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e42:	f1a3 000b 	sub.w	r0, r3, #11
 8007e46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e52:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007e56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e5a:	f1a3 040b 	sub.w	r4, r3, #11
 8007e5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e6a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007e6e:	4058      	eors	r0, r3
 8007e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e74:	f1a3 040b 	sub.w	r4, r3, #11
 8007e78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e80:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e84:	08db      	lsrs	r3, r3, #3
 8007e86:	4043      	eors	r3, r0
 8007e88:	18c8      	adds	r0, r1, r3
 8007e8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e8e:	f1a3 010c 	sub.w	r1, r3, #12
 8007e92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e9a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4408      	add	r0, r1
 8007ea6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007eaa:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007eae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007eb2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007eb6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007ec4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ec8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007ee0:	405a      	eors	r2, r3
 8007ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ee6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007ef0:	405a      	eors	r2, r3
 8007ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007efa:	6919      	ldr	r1, [r3, #16]
 8007efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	4019      	ands	r1, r3
 8007f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f10:	6998      	ldr	r0, [r3, #24]
 8007f12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f1a:	691c      	ldr	r4, [r3, #16]
 8007f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	4323      	orrs	r3, r4
 8007f28:	4003      	ands	r3, r0
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f3a:	69da      	ldr	r2, [r3, #28]
 8007f3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f40:	441a      	add	r2, r3
 8007f42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f4a:	61da      	str	r2, [r3, #28]
 8007f4c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f54:	441a      	add	r2, r3
 8007f56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f5e:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8007f60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007f78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007f86:	4059      	eors	r1, r3
 8007f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007f96:	404b      	eors	r3, r1
 8007f98:	441a      	add	r2, r3
 8007f9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fa2:	6859      	ldr	r1, [r3, #4]
 8007fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fac:	69d8      	ldr	r0, [r3, #28]
 8007fae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fb6:	681c      	ldr	r4, [r3, #0]
 8007fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	4063      	eors	r3, r4
 8007fc4:	4003      	ands	r3, r0
 8007fc6:	404b      	eors	r3, r1
 8007fc8:	441a      	add	r2, r3
 8007fca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fce:	3305      	adds	r3, #5
 8007fd0:	496f      	ldr	r1, [pc, #444]	@ (8008190 <mbedtls_internal_sha256_process+0x166c>)
 8007fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fd6:	441a      	add	r2, r3
 8007fd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fdc:	1cd9      	adds	r1, r3, #3
 8007fde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fe2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fea:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ff2:	1cd8      	adds	r0, r3, #3
 8007ff4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ff8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ffc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008000:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008004:	4059      	eors	r1, r3
 8008006:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800800a:	1cd8      	adds	r0, r3, #3
 800800c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008014:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008018:	0a9b      	lsrs	r3, r3, #10
 800801a:	4059      	eors	r1, r3
 800801c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008020:	1e98      	subs	r0, r3, #2
 8008022:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008026:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800802a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800802e:	4419      	add	r1, r3
 8008030:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008034:	f1a3 000a 	sub.w	r0, r3, #10
 8008038:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800803c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008040:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008044:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008048:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800804c:	f1a3 040a 	sub.w	r4, r3, #10
 8008050:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008054:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008058:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800805c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008060:	4058      	eors	r0, r3
 8008062:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008066:	f1a3 040a 	sub.w	r4, r3, #10
 800806a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800806e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008072:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008076:	08db      	lsrs	r3, r3, #3
 8008078:	4043      	eors	r3, r0
 800807a:	18c8      	adds	r0, r1, r3
 800807c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008080:	f1a3 010b 	sub.w	r1, r3, #11
 8008084:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008088:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800808c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008090:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008094:	3305      	adds	r3, #5
 8008096:	4408      	add	r0, r1
 8008098:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800809c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80080a0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80080a4:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80080a8:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80080ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080b0:	4413      	add	r3, r2
 80080b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80080b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80080c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	ea4f 3373 	mov.w	r3, r3, ror #13
 80080d2:	405a      	eors	r2, r3
 80080d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80080e2:	405a      	eors	r2, r3
 80080e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ec:	68d9      	ldr	r1, [r3, #12]
 80080ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	4019      	ands	r1, r3
 80080fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008102:	6958      	ldr	r0, [r3, #20]
 8008104:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008108:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800810c:	68dc      	ldr	r4, [r3, #12]
 800810e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008112:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	4323      	orrs	r3, r4
 800811a:	4003      	ands	r3, r0
 800811c:	430b      	orrs	r3, r1
 800811e:	4413      	add	r3, r2
 8008120:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008124:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008128:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008132:	441a      	add	r2, r3
 8008134:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008138:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800813c:	619a      	str	r2, [r3, #24]
 800813e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008146:	441a      	add	r2, r3
 8008148:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800814c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008150:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8008152:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008160:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800816a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800816e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008178:	4059      	eors	r1, r3
 800817a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800817e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008188:	404b      	eors	r3, r1
 800818a:	441a      	add	r2, r3
 800818c:	e002      	b.n	8008194 <mbedtls_internal_sha256_process+0x1670>
 800818e:	bf00      	nop
 8008190:	0800f6c8 	.word	0x0800f6c8
 8008194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008198:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800819c:	6819      	ldr	r1, [r3, #0]
 800819e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081a6:	6998      	ldr	r0, [r3, #24]
 80081a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081b0:	69dc      	ldr	r4, [r3, #28]
 80081b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4063      	eors	r3, r4
 80081be:	4003      	ands	r3, r0
 80081c0:	404b      	eors	r3, r1
 80081c2:	441a      	add	r2, r3
 80081c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081c8:	3306      	adds	r3, #6
 80081ca:	49e3      	ldr	r1, [pc, #908]	@ (8008558 <mbedtls_internal_sha256_process+0x1a34>)
 80081cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081d0:	441a      	add	r2, r3
 80081d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081d6:	1d19      	adds	r1, r3, #4
 80081d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081e4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80081e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081ec:	1d18      	adds	r0, r3, #4
 80081ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081fa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80081fe:	4059      	eors	r1, r3
 8008200:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008204:	1d18      	adds	r0, r3, #4
 8008206:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800820a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800820e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008212:	0a9b      	lsrs	r3, r3, #10
 8008214:	4059      	eors	r1, r3
 8008216:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800821a:	1e58      	subs	r0, r3, #1
 800821c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008220:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008224:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008228:	4419      	add	r1, r3
 800822a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800822e:	f1a3 0009 	sub.w	r0, r3, #9
 8008232:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008236:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800823a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800823e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008242:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008246:	f1a3 0409 	sub.w	r4, r3, #9
 800824a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800824e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008252:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008256:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800825a:	4058      	eors	r0, r3
 800825c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008260:	f1a3 0409 	sub.w	r4, r3, #9
 8008264:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008268:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800826c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008270:	08db      	lsrs	r3, r3, #3
 8008272:	4043      	eors	r3, r0
 8008274:	18c8      	adds	r0, r1, r3
 8008276:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800827a:	f1a3 010a 	sub.w	r1, r3, #10
 800827e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008282:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008286:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800828a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800828e:	3306      	adds	r3, #6
 8008290:	4408      	add	r0, r1
 8008292:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008296:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800829a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800829e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80082a2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80082a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80082aa:	4413      	add	r3, r2
 80082ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80082b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80082be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80082cc:	405a      	eors	r2, r3
 80082ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80082dc:	405a      	eors	r2, r3
 80082de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082e6:	6899      	ldr	r1, [r3, #8]
 80082e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	4019      	ands	r1, r3
 80082f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082fc:	6918      	ldr	r0, [r3, #16]
 80082fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008302:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008306:	689c      	ldr	r4, [r3, #8]
 8008308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800830c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	4323      	orrs	r3, r4
 8008314:	4003      	ands	r3, r0
 8008316:	430b      	orrs	r3, r1
 8008318:	4413      	add	r3, r2
 800831a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800831e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008322:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008326:	695a      	ldr	r2, [r3, #20]
 8008328:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800832c:	441a      	add	r2, r3
 800832e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008332:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008336:	615a      	str	r2, [r3, #20]
 8008338:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800833c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008340:	441a      	add	r2, r3
 8008342:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008346:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800834a:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 800834c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800835a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008364:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008368:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008372:	4059      	eors	r1, r3
 8008374:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008378:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008382:	404b      	eors	r3, r1
 8008384:	441a      	add	r2, r3
 8008386:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800838a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800838e:	69d9      	ldr	r1, [r3, #28]
 8008390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008394:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008398:	6958      	ldr	r0, [r3, #20]
 800839a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800839e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083a2:	699c      	ldr	r4, [r3, #24]
 80083a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	4063      	eors	r3, r4
 80083b0:	4003      	ands	r3, r0
 80083b2:	404b      	eors	r3, r1
 80083b4:	441a      	add	r2, r3
 80083b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083ba:	3307      	adds	r3, #7
 80083bc:	4966      	ldr	r1, [pc, #408]	@ (8008558 <mbedtls_internal_sha256_process+0x1a34>)
 80083be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80083c2:	441a      	add	r2, r3
 80083c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083c8:	1d59      	adds	r1, r3, #5
 80083ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083d6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80083da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083de:	1d58      	adds	r0, r3, #5
 80083e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083ec:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80083f0:	4059      	eors	r1, r3
 80083f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083f6:	1d58      	adds	r0, r3, #5
 80083f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008400:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008404:	0a9b      	lsrs	r3, r3, #10
 8008406:	4059      	eors	r1, r3
 8008408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800840c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008410:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008414:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008418:	4419      	add	r1, r3
 800841a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800841e:	f1a3 0008 	sub.w	r0, r3, #8
 8008422:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008426:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800842a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800842e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008432:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008436:	f1a3 0408 	sub.w	r4, r3, #8
 800843a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800843e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008442:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008446:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800844a:	4058      	eors	r0, r3
 800844c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008450:	f1a3 0408 	sub.w	r4, r3, #8
 8008454:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008458:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800845c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008460:	08db      	lsrs	r3, r3, #3
 8008462:	4043      	eors	r3, r0
 8008464:	18c8      	adds	r0, r1, r3
 8008466:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800846a:	f1a3 0109 	sub.w	r1, r3, #9
 800846e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008472:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008476:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800847a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800847e:	3307      	adds	r3, #7
 8008480:	4408      	add	r0, r1
 8008482:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008486:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800848a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800848e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008492:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008496:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800849a:	4413      	add	r3, r2
 800849c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80084a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80084ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80084bc:	405a      	eors	r2, r3
 80084be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80084cc:	405a      	eors	r2, r3
 80084ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084d6:	6859      	ldr	r1, [r3, #4]
 80084d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	4019      	ands	r1, r3
 80084e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ec:	68d8      	ldr	r0, [r3, #12]
 80084ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084f6:	685c      	ldr	r4, [r3, #4]
 80084f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	4323      	orrs	r3, r4
 8008504:	4003      	ands	r3, r0
 8008506:	430b      	orrs	r3, r1
 8008508:	4413      	add	r3, r2
 800850a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800850e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008512:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800851c:	441a      	add	r2, r3
 800851e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008522:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008526:	611a      	str	r2, [r3, #16]
 8008528:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800852c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008530:	441a      	add	r2, r3
 8008532:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008536:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800853a:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 800853c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008540:	3308      	adds	r3, #8
 8008542:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008546:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800854a:	2b3f      	cmp	r3, #63	@ 0x3f
 800854c:	f67f a828 	bls.w	80075a0 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8008550:	2300      	movs	r3, #0
 8008552:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008556:	e023      	b.n	80085a0 <mbedtls_internal_sha256_process+0x1a7c>
 8008558:	0800f6c8 	.word	0x0800f6c8
        ctx->state[i] += A[i];
 800855c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008560:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800856a:	3202      	adds	r2, #2
 800856c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008570:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008578:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800857c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008580:	18d1      	adds	r1, r2, r3
 8008582:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008586:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8008590:	3202      	adds	r2, #2
 8008592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8008596:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800859a:	3301      	adds	r3, #1
 800859c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80085a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085a4:	2b07      	cmp	r3, #7
 80085a6:	d9d9      	bls.n	800855c <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bc90      	pop	{r4, r7}
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop

080085b8 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 80085ca:	2300      	movs	r3, #0
 80085cc:	e065      	b.n	800869a <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085d6:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80085de:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	441a      	add	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d904      	bls.n	8008608 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d034      	beq.n	8008678 <mbedtls_sha256_update_ret+0xc0>
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	429a      	cmp	r2, r3
 8008614:	d330      	bcc.n	8008678 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	68b9      	ldr	r1, [r7, #8]
 8008624:	4618      	mov	r0, r3
 8008626:	f006 f940 	bl	800e8aa <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3328      	adds	r3, #40	@ 0x28
 800862e:	4619      	mov	r1, r3
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7fe fa77 	bl	8006b24 <mbedtls_internal_sha256_process>
 8008636:	6178      	str	r0, [r7, #20]
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	e02b      	b.n	800869a <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	4413      	add	r3, r2
 8008648:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	607b      	str	r3, [r7, #4]
        left = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8008656:	e00f      	b.n	8008678 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8008658:	68b9      	ldr	r1, [r7, #8]
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7fe fa62 	bl	8006b24 <mbedtls_internal_sha256_process>
 8008660:	6178      	str	r0, [r7, #20]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	e016      	b.n	800869a <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3340      	adds	r3, #64	@ 0x40
 8008670:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3b40      	subs	r3, #64	@ 0x40
 8008676:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b3f      	cmp	r3, #63	@ 0x3f
 800867c:	d8ec      	bhi.n	8008658 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d009      	beq.n	8008698 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	68b9      	ldr	r1, [r7, #8]
 8008692:	4618      	mov	r0, r3
 8008694:	f006 f909 	bl	800e8aa <memcpy>

    return( 0 );
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086b4:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	617a      	str	r2, [r7, #20]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	4413      	add	r3, r2
 80086c0:	2280      	movs	r2, #128	@ 0x80
 80086c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b38      	cmp	r3, #56	@ 0x38
 80086ca:	d80c      	bhi.n	80086e6 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	18d0      	adds	r0, r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80086dc:	461a      	mov	r2, r3
 80086de:	2100      	movs	r1, #0
 80086e0:	f006 f89e 	bl	800e820 <memset>
 80086e4:	e01e      	b.n	8008724 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	18d0      	adds	r0, r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80086f6:	461a      	mov	r2, r3
 80086f8:	2100      	movs	r1, #0
 80086fa:	f006 f891 	bl	800e820 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3328      	adds	r3, #40	@ 0x28
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fe fa0d 	bl	8006b24 <mbedtls_internal_sha256_process>
 800870a:	6138      	str	r0, [r7, #16]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	e128      	b.n	8008968 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3328      	adds	r3, #40	@ 0x28
 800871a:	2238      	movs	r2, #56	@ 0x38
 800871c:	2100      	movs	r1, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f006 f87e 	bl	800e820 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	0e1b      	lsrs	r3, r3, #24
 8008740:	b2da      	uxtb	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	0c1b      	lsrs	r3, r3, #16
 800874c:	b2da      	uxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	b2da      	uxtb	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	b2da      	uxtb	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	0e1b      	lsrs	r3, r3, #24
 800876e:	b2da      	uxtb	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	0c1b      	lsrs	r3, r3, #16
 800877a:	b2da      	uxtb	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	0a1b      	lsrs	r3, r3, #8
 8008786:	b2da      	uxtb	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	b2da      	uxtb	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3328      	adds	r3, #40	@ 0x28
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7fe f9c0 	bl	8006b24 <mbedtls_internal_sha256_process>
 80087a4:	6138      	str	r0, [r7, #16]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	e0db      	b.n	8008968 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	0e1b      	lsrs	r3, r3, #24
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	0c1a      	lsrs	r2, r3, #16
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	0a1a      	lsrs	r2, r3, #8
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	3302      	adds	r3, #2
 80087d4:	b2d2      	uxtb	r2, r2
 80087d6:	701a      	strb	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	3303      	adds	r3, #3
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	0e1a      	lsrs	r2, r3, #24
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	3304      	adds	r3, #4
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	0c1a      	lsrs	r2, r3, #16
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	3305      	adds	r3, #5
 80087fc:	b2d2      	uxtb	r2, r2
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	0a1a      	lsrs	r2, r3, #8
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	3306      	adds	r3, #6
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	3307      	adds	r3, #7
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	0e1a      	lsrs	r2, r3, #24
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	3308      	adds	r3, #8
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	0c1a      	lsrs	r2, r3, #16
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3309      	adds	r3, #9
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	0a1a      	lsrs	r2, r3, #8
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	330a      	adds	r3, #10
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	330b      	adds	r3, #11
 800884c:	b2d2      	uxtb	r2, r2
 800884e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	0e1a      	lsrs	r2, r3, #24
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	330c      	adds	r3, #12
 800885a:	b2d2      	uxtb	r2, r2
 800885c:	701a      	strb	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	0c1a      	lsrs	r2, r3, #16
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	330d      	adds	r3, #13
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	0a1a      	lsrs	r2, r3, #8
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	330e      	adds	r3, #14
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	330f      	adds	r3, #15
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	0e1a      	lsrs	r2, r3, #24
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	3310      	adds	r3, #16
 8008890:	b2d2      	uxtb	r2, r2
 8008892:	701a      	strb	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	0c1a      	lsrs	r2, r3, #16
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	3311      	adds	r3, #17
 800889e:	b2d2      	uxtb	r2, r2
 80088a0:	701a      	strb	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	0a1a      	lsrs	r2, r3, #8
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	3312      	adds	r3, #18
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699a      	ldr	r2, [r3, #24]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	3313      	adds	r3, #19
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	0e1a      	lsrs	r2, r3, #24
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	3314      	adds	r3, #20
 80088c6:	b2d2      	uxtb	r2, r2
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	0c1a      	lsrs	r2, r3, #16
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3315      	adds	r3, #21
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	0a1a      	lsrs	r2, r3, #8
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	3316      	adds	r3, #22
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69da      	ldr	r2, [r3, #28]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	3317      	adds	r3, #23
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	0e1a      	lsrs	r2, r3, #24
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	3318      	adds	r3, #24
 80088fc:	b2d2      	uxtb	r2, r2
 80088fe:	701a      	strb	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	0c1a      	lsrs	r2, r3, #16
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	3319      	adds	r3, #25
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	0a1a      	lsrs	r2, r3, #8
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	331a      	adds	r3, #26
 8008918:	b2d2      	uxtb	r2, r2
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a1a      	ldr	r2, [r3, #32]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	331b      	adds	r3, #27
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800892c:	2b00      	cmp	r3, #0
 800892e:	d11a      	bne.n	8008966 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008934:	0e1a      	lsrs	r2, r3, #24
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	331c      	adds	r3, #28
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008942:	0c1a      	lsrs	r2, r3, #16
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	331d      	adds	r3, #29
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008950:	0a1a      	lsrs	r2, r3, #8
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	331e      	adds	r3, #30
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	331f      	adds	r3, #31
 8008962:	b2d2      	uxtb	r2, r2
 8008964:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
 800897a:	4b10      	ldr	r3, [pc, #64]	@ (80089bc <HAL_MspInit+0x4c>)
 800897c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800897e:	4a0f      	ldr	r2, [pc, #60]	@ (80089bc <HAL_MspInit+0x4c>)
 8008980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008984:	6453      	str	r3, [r2, #68]	@ 0x44
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <HAL_MspInit+0x4c>)
 8008988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800898a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800898e:	607b      	str	r3, [r7, #4]
 8008990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008992:	2300      	movs	r3, #0
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	4b09      	ldr	r3, [pc, #36]	@ (80089bc <HAL_MspInit+0x4c>)
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	4a08      	ldr	r2, [pc, #32]	@ (80089bc <HAL_MspInit+0x4c>)
 800899c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80089a2:	4b06      	ldr	r3, [pc, #24]	@ (80089bc <HAL_MspInit+0x4c>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	40023800 	.word	0x40023800

080089c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	@ 0x28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a54 <HAL_I2C_MspInit+0x94>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d134      	bne.n	8008a4c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a58 <HAL_I2C_MspInit+0x98>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008a58 <HAL_I2C_MspInit+0x98>)
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80089f2:	4b19      	ldr	r3, [pc, #100]	@ (8008a58 <HAL_I2C_MspInit+0x98>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80089fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a04:	2312      	movs	r3, #18
 8008a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008a10:	2304      	movs	r3, #4
 8008a12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4810      	ldr	r0, [pc, #64]	@ (8008a5c <HAL_I2C_MspInit+0x9c>)
 8008a1c:	f000 fc1e 	bl	800925c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <HAL_I2C_MspInit+0x98>)
 8008a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a28:	4a0b      	ldr	r2, [pc, #44]	@ (8008a58 <HAL_I2C_MspInit+0x98>)
 8008a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a30:	4b09      	ldr	r3, [pc, #36]	@ (8008a58 <HAL_I2C_MspInit+0x98>)
 8008a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2100      	movs	r1, #0
 8008a40:	2020      	movs	r0, #32
 8008a42:	f000 fb34 	bl	80090ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008a46:	2020      	movs	r0, #32
 8008a48:	f000 fb4d 	bl	80090e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008a4c:	bf00      	nop
 8008a4e:	3728      	adds	r7, #40	@ 0x28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	40005400 	.word	0x40005400
 8008a58:	40023800 	.word	0x40023800
 8008a5c:	40020400 	.word	0x40020400

08008a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a70:	d115      	bne.n	8008a9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <HAL_TIM_Base_MspInit+0x48>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8008aa8 <HAL_TIM_Base_MspInit+0x48>)
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a82:	4b09      	ldr	r3, [pc, #36]	@ (8008aa8 <HAL_TIM_Base_MspInit+0x48>)
 8008a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	201c      	movs	r0, #28
 8008a94:	f000 fb0b 	bl	80090ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008a98:	201c      	movs	r0, #28
 8008a9a:	f000 fb24 	bl	80090e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	40023800 	.word	0x40023800

08008aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08a      	sub	sp, #40	@ 0x28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab4:	f107 0314 	add.w	r3, r7, #20
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	605a      	str	r2, [r3, #4]
 8008abe:	609a      	str	r2, [r3, #8]
 8008ac0:	60da      	str	r2, [r3, #12]
 8008ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b40 <HAL_UART_MspInit+0x94>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d133      	bne.n	8008b36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008ace:	2300      	movs	r3, #0
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8008b44 <HAL_UART_MspInit+0x98>)
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8008b44 <HAL_UART_MspInit+0x98>)
 8008ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ade:	4b19      	ldr	r3, [pc, #100]	@ (8008b44 <HAL_UART_MspInit+0x98>)
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aea:	2300      	movs	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <HAL_UART_MspInit+0x98>)
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	4a14      	ldr	r2, [pc, #80]	@ (8008b44 <HAL_UART_MspInit+0x98>)
 8008af4:	f043 0301 	orr.w	r3, r3, #1
 8008af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008afa:	4b12      	ldr	r3, [pc, #72]	@ (8008b44 <HAL_UART_MspInit+0x98>)
 8008afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008b06:	230c      	movs	r3, #12
 8008b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b12:	2300      	movs	r3, #0
 8008b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008b16:	2307      	movs	r3, #7
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4809      	ldr	r0, [pc, #36]	@ (8008b48 <HAL_UART_MspInit+0x9c>)
 8008b22:	f000 fb9b 	bl	800925c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008b26:	2200      	movs	r2, #0
 8008b28:	2100      	movs	r1, #0
 8008b2a:	2026      	movs	r0, #38	@ 0x26
 8008b2c:	f000 fabf 	bl	80090ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008b30:	2026      	movs	r0, #38	@ 0x26
 8008b32:	f000 fad8 	bl	80090e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8008b36:	bf00      	nop
 8008b38:	3728      	adds	r7, #40	@ 0x28
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	40004400 	.word	0x40004400
 8008b44:	40023800 	.word	0x40023800
 8008b48:	40020000 	.word	0x40020000

08008b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008b50:	bf00      	nop
 8008b52:	e7fd      	b.n	8008b50 <NMI_Handler+0x4>

08008b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <HardFault_Handler+0x4>

08008b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <MemManage_Handler+0x4>

08008b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b68:	bf00      	nop
 8008b6a:	e7fd      	b.n	8008b68 <BusFault_Handler+0x4>

08008b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <UsageFault_Handler+0x4>

08008b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b82:	b480      	push	{r7}
 8008b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b86:	bf00      	nop
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ba2:	f000 f965 	bl	8008e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008bb0:	4802      	ldr	r0, [pc, #8]	@ (8008bbc <TIM2_IRQHandler+0x10>)
 8008bb2:	f004 f887 	bl	800ccc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008bb6:	bf00      	nop
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	20000634 	.word	0x20000634

08008bc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008bc4:	4802      	ldr	r0, [pc, #8]	@ (8008bd0 <I2C1_EV_IRQHandler+0x10>)
 8008bc6:	f001 fadd 	bl	800a184 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	200005e0 	.word	0x200005e0

08008bd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8008bd8:	4802      	ldr	r0, [pc, #8]	@ (8008be4 <I2C1_ER_IRQHandler+0x10>)
 8008bda:	f001 fc26 	bl	800a42a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8008bde:	bf00      	nop
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200005e0 	.word	0x200005e0

08008be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008bec:	4802      	ldr	r0, [pc, #8]	@ (8008bf8 <USART2_IRQHandler+0x10>)
 8008bee:	f004 fcc7 	bl	800d580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008bf2:	bf00      	nop
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	2000067c 	.word	0x2000067c

08008bfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008c00:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008c04:	f000 fce2 	bl	80095cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008c08:	bf00      	nop
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c18:	2300      	movs	r3, #0
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e00a      	b.n	8008c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c1e:	f3af 8000 	nop.w
 8008c22:	4601      	mov	r1, r0
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	60ba      	str	r2, [r7, #8]
 8008c2a:	b2ca      	uxtb	r2, r1
 8008c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3301      	adds	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	dbf0      	blt.n	8008c1e <_read+0x12>
  }

  return len;
 8008c3c:	687b      	ldr	r3, [r7, #4]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b086      	sub	sp, #24
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c52:	2300      	movs	r3, #0
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	e009      	b.n	8008c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	60ba      	str	r2, [r7, #8]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fa fddb 	bl	800381c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	dbf1      	blt.n	8008c58 <_write+0x12>
  }
  return len;
 8008c74:	687b      	ldr	r3, [r7, #4]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <_close>:

int _close(int file)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <_isatty>:

int _isatty(int file)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008cbe:	2301      	movs	r3, #1
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008cf0:	4a14      	ldr	r2, [pc, #80]	@ (8008d44 <_sbrk+0x5c>)
 8008cf2:	4b15      	ldr	r3, [pc, #84]	@ (8008d48 <_sbrk+0x60>)
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cfc:	4b13      	ldr	r3, [pc, #76]	@ (8008d4c <_sbrk+0x64>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d04:	4b11      	ldr	r3, [pc, #68]	@ (8008d4c <_sbrk+0x64>)
 8008d06:	4a12      	ldr	r2, [pc, #72]	@ (8008d50 <_sbrk+0x68>)
 8008d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d0a:	4b10      	ldr	r3, [pc, #64]	@ (8008d4c <_sbrk+0x64>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d207      	bcs.n	8008d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d18:	f005 fd9a 	bl	800e850 <__errno>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	220c      	movs	r2, #12
 8008d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d26:	e009      	b.n	8008d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d28:	4b08      	ldr	r3, [pc, #32]	@ (8008d4c <_sbrk+0x64>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d2e:	4b07      	ldr	r3, [pc, #28]	@ (8008d4c <_sbrk+0x64>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4413      	add	r3, r2
 8008d36:	4a05      	ldr	r2, [pc, #20]	@ (8008d4c <_sbrk+0x64>)
 8008d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20018000 	.word	0x20018000
 8008d48:	00000400 	.word	0x00000400
 8008d4c:	20000dcc 	.word	0x20000dcc
 8008d50:	20000f20 	.word	0x20000f20

08008d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d58:	4b06      	ldr	r3, [pc, #24]	@ (8008d74 <SystemInit+0x20>)
 8008d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5e:	4a05      	ldr	r2, [pc, #20]	@ (8008d74 <SystemInit+0x20>)
 8008d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d68:	bf00      	nop
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	e000ed00 	.word	0xe000ed00

08008d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008db0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008d7c:	f7ff ffea 	bl	8008d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008d80:	480c      	ldr	r0, [pc, #48]	@ (8008db4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d82:	490d      	ldr	r1, [pc, #52]	@ (8008db8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d84:	4a0d      	ldr	r2, [pc, #52]	@ (8008dbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d88:	e002      	b.n	8008d90 <LoopCopyDataInit>

08008d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d8e:	3304      	adds	r3, #4

08008d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d94:	d3f9      	bcc.n	8008d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d96:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008d98:	4c0a      	ldr	r4, [pc, #40]	@ (8008dc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d9c:	e001      	b.n	8008da2 <LoopFillZerobss>

08008d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008da0:	3204      	adds	r2, #4

08008da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008da4:	d3fb      	bcc.n	8008d9e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8008da6:	f005 fd59 	bl	800e85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008daa:	f7fa ff8b 	bl	8003cc4 <main>
  bx  lr    
 8008dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008db0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8008db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008db8:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8008dbc:	0800f824 	.word	0x0800f824
  ldr r2, =_sbss
 8008dc0:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 8008dc4:	20000f20 	.word	0x20000f20

08008dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008dc8:	e7fe      	b.n	8008dc8 <ADC_IRQHandler>
	...

08008dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8008e0c <HAL_Init+0x40>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008e0c <HAL_Init+0x40>)
 8008dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e0c <HAL_Init+0x40>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e0c <HAL_Init+0x40>)
 8008de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008de8:	4b08      	ldr	r3, [pc, #32]	@ (8008e0c <HAL_Init+0x40>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a07      	ldr	r2, [pc, #28]	@ (8008e0c <HAL_Init+0x40>)
 8008dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008df4:	2003      	movs	r0, #3
 8008df6:	f000 f94f 	bl	8009098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f000 f808 	bl	8008e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e00:	f7ff fdb6 	bl	8008970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40023c00 	.word	0x40023c00

08008e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e18:	4b12      	ldr	r3, [pc, #72]	@ (8008e64 <HAL_InitTick+0x54>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b12      	ldr	r3, [pc, #72]	@ (8008e68 <HAL_InitTick+0x58>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f967 	bl	8009102 <HAL_SYSTICK_Config>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e00e      	b.n	8008e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b0f      	cmp	r3, #15
 8008e42:	d80a      	bhi.n	8008e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e44:	2200      	movs	r2, #0
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e4c:	f000 f92f 	bl	80090ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e50:	4a06      	ldr	r2, [pc, #24]	@ (8008e6c <HAL_InitTick+0x5c>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	e000      	b.n	8008e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000554 	.word	0x20000554
 8008e68:	2000055c 	.word	0x2000055c
 8008e6c:	20000558 	.word	0x20000558

08008e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e74:	4b06      	ldr	r3, [pc, #24]	@ (8008e90 <HAL_IncTick+0x20>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4b06      	ldr	r3, [pc, #24]	@ (8008e94 <HAL_IncTick+0x24>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4413      	add	r3, r2
 8008e80:	4a04      	ldr	r2, [pc, #16]	@ (8008e94 <HAL_IncTick+0x24>)
 8008e82:	6013      	str	r3, [r2, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	2000055c 	.word	0x2000055c
 8008e94:	20000dd0 	.word	0x20000dd0

08008e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8008e9c:	4b03      	ldr	r3, [pc, #12]	@ (8008eac <HAL_GetTick+0x14>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000dd0 	.word	0x20000dd0

08008eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008eb8:	f7ff ffee 	bl	8008e98 <HAL_GetTick>
 8008ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ec8:	d005      	beq.n	8008ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008eca:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <HAL_Delay+0x44>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ed6:	bf00      	nop
 8008ed8:	f7ff ffde 	bl	8008e98 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d8f7      	bhi.n	8008ed8 <HAL_Delay+0x28>
  {
  }
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	2000055c 	.word	0x2000055c

08008ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f08:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <__NVIC_SetPriorityGrouping+0x44>)
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f14:	4013      	ands	r3, r2
 8008f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f2a:	4a04      	ldr	r2, [pc, #16]	@ (8008f3c <__NVIC_SetPriorityGrouping+0x44>)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	60d3      	str	r3, [r2, #12]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	e000ed00 	.word	0xe000ed00

08008f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f44:	4b04      	ldr	r3, [pc, #16]	@ (8008f58 <__NVIC_GetPriorityGrouping+0x18>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	0a1b      	lsrs	r3, r3, #8
 8008f4a:	f003 0307 	and.w	r3, r3, #7
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	e000ed00 	.word	0xe000ed00

08008f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	db0b      	blt.n	8008f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	f003 021f 	and.w	r2, r3, #31
 8008f74:	4907      	ldr	r1, [pc, #28]	@ (8008f94 <__NVIC_EnableIRQ+0x38>)
 8008f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8008f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	e000e100 	.word	0xe000e100

08008f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db0a      	blt.n	8008fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	490c      	ldr	r1, [pc, #48]	@ (8008fe4 <__NVIC_SetPriority+0x4c>)
 8008fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb6:	0112      	lsls	r2, r2, #4
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	440b      	add	r3, r1
 8008fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fc0:	e00a      	b.n	8008fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	4908      	ldr	r1, [pc, #32]	@ (8008fe8 <__NVIC_SetPriority+0x50>)
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	3b04      	subs	r3, #4
 8008fd0:	0112      	lsls	r2, r2, #4
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	761a      	strb	r2, [r3, #24]
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	e000e100 	.word	0xe000e100
 8008fe8:	e000ed00 	.word	0xe000ed00

08008fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b089      	sub	sp, #36	@ 0x24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	f1c3 0307 	rsb	r3, r3, #7
 8009006:	2b04      	cmp	r3, #4
 8009008:	bf28      	it	cs
 800900a:	2304      	movcs	r3, #4
 800900c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	3304      	adds	r3, #4
 8009012:	2b06      	cmp	r3, #6
 8009014:	d902      	bls.n	800901c <NVIC_EncodePriority+0x30>
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	3b03      	subs	r3, #3
 800901a:	e000      	b.n	800901e <NVIC_EncodePriority+0x32>
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43da      	mvns	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	401a      	ands	r2, r3
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009034:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	fa01 f303 	lsl.w	r3, r1, r3
 800903e:	43d9      	mvns	r1, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009044:	4313      	orrs	r3, r2
         );
}
 8009046:	4618      	mov	r0, r3
 8009048:	3724      	adds	r7, #36	@ 0x24
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
	...

08009054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3b01      	subs	r3, #1
 8009060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009064:	d301      	bcc.n	800906a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009066:	2301      	movs	r3, #1
 8009068:	e00f      	b.n	800908a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800906a:	4a0a      	ldr	r2, [pc, #40]	@ (8009094 <SysTick_Config+0x40>)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3b01      	subs	r3, #1
 8009070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009072:	210f      	movs	r1, #15
 8009074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009078:	f7ff ff8e 	bl	8008f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <SysTick_Config+0x40>)
 800907e:	2200      	movs	r2, #0
 8009080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009082:	4b04      	ldr	r3, [pc, #16]	@ (8009094 <SysTick_Config+0x40>)
 8009084:	2207      	movs	r2, #7
 8009086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	e000e010 	.word	0xe000e010

08009098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff ff29 	bl	8008ef8 <__NVIC_SetPriorityGrouping>
}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	4603      	mov	r3, r0
 80090b6:	60b9      	str	r1, [r7, #8]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80090c0:	f7ff ff3e 	bl	8008f40 <__NVIC_GetPriorityGrouping>
 80090c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f7ff ff8e 	bl	8008fec <NVIC_EncodePriority>
 80090d0:	4602      	mov	r2, r0
 80090d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff ff5d 	bl	8008f98 <__NVIC_SetPriority>
}
 80090de:	bf00      	nop
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	4603      	mov	r3, r0
 80090ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7ff ff31 	bl	8008f5c <__NVIC_EnableIRQ>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff ffa2 	bl	8009054 <SysTick_Config>
 8009110:	4603      	mov	r3, r0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009126:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009128:	f7ff feb6 	bl	8008e98 <HAL_GetTick>
 800912c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d008      	beq.n	800914c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2280      	movs	r2, #128	@ 0x80
 800913e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e052      	b.n	80091f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f022 0216 	bic.w	r2, r2, #22
 800915a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	695a      	ldr	r2, [r3, #20]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800916a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <HAL_DMA_Abort+0x62>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009178:	2b00      	cmp	r3, #0
 800917a:	d007      	beq.n	800918c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0208 	bic.w	r2, r2, #8
 800918a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f022 0201 	bic.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800919c:	e013      	b.n	80091c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800919e:	f7ff fe7b 	bl	8008e98 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b05      	cmp	r3, #5
 80091aa:	d90c      	bls.n	80091c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2203      	movs	r2, #3
 80091b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e015      	b.n	80091f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e4      	bne.n	800919e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091d8:	223f      	movs	r2, #63	@ 0x3f
 80091da:	409a      	lsls	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d004      	beq.n	8009218 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2280      	movs	r2, #128	@ 0x80
 8009212:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e00c      	b.n	8009232 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2205      	movs	r2, #5
 800921c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800924c:	b2db      	uxtb	r3, r3
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
	...

0800925c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	@ 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800926e:	2300      	movs	r3, #0
 8009270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	e159      	b.n	800952c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009278:	2201      	movs	r2, #1
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	fa02 f303 	lsl.w	r3, r2, r3
 8009280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4013      	ands	r3, r2
 800928a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	429a      	cmp	r2, r3
 8009292:	f040 8148 	bne.w	8009526 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d005      	beq.n	80092ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d130      	bne.n	8009310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	2203      	movs	r2, #3
 80092ba:	fa02 f303 	lsl.w	r3, r2, r3
 80092be:	43db      	mvns	r3, r3
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	4013      	ands	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092e4:	2201      	movs	r2, #1
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	43db      	mvns	r3, r3
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	4013      	ands	r3, r2
 80092f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	091b      	lsrs	r3, r3, #4
 80092fa:	f003 0201 	and.w	r2, r3, #1
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	4313      	orrs	r3, r2
 8009308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f003 0303 	and.w	r3, r3, #3
 8009318:	2b03      	cmp	r3, #3
 800931a:	d017      	beq.n	800934c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	2203      	movs	r2, #3
 8009328:	fa02 f303 	lsl.w	r3, r2, r3
 800932c:	43db      	mvns	r3, r3
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	4013      	ands	r3, r2
 8009332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	fa02 f303 	lsl.w	r3, r2, r3
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4313      	orrs	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d123      	bne.n	80093a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	08da      	lsrs	r2, r3, #3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3208      	adds	r2, #8
 8009360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	220f      	movs	r2, #15
 8009370:	fa02 f303 	lsl.w	r3, r2, r3
 8009374:	43db      	mvns	r3, r3
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	4013      	ands	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	4313      	orrs	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	08da      	lsrs	r2, r3, #3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3208      	adds	r2, #8
 800939a:	69b9      	ldr	r1, [r7, #24]
 800939c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	2203      	movs	r2, #3
 80093ac:	fa02 f303 	lsl.w	r3, r2, r3
 80093b0:	43db      	mvns	r3, r3
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	4013      	ands	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f003 0203 	and.w	r2, r3, #3
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	fa02 f303 	lsl.w	r3, r2, r3
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80a2 	beq.w	8009526 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	4b57      	ldr	r3, [pc, #348]	@ (8009544 <HAL_GPIO_Init+0x2e8>)
 80093e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ea:	4a56      	ldr	r2, [pc, #344]	@ (8009544 <HAL_GPIO_Init+0x2e8>)
 80093ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80093f2:	4b54      	ldr	r3, [pc, #336]	@ (8009544 <HAL_GPIO_Init+0x2e8>)
 80093f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093fe:	4a52      	ldr	r2, [pc, #328]	@ (8009548 <HAL_GPIO_Init+0x2ec>)
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	3302      	adds	r3, #2
 8009406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800940a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	220f      	movs	r2, #15
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	43db      	mvns	r3, r3
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	4013      	ands	r3, r2
 8009420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a49      	ldr	r2, [pc, #292]	@ (800954c <HAL_GPIO_Init+0x2f0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d019      	beq.n	800945e <HAL_GPIO_Init+0x202>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a48      	ldr	r2, [pc, #288]	@ (8009550 <HAL_GPIO_Init+0x2f4>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <HAL_GPIO_Init+0x1fe>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a47      	ldr	r2, [pc, #284]	@ (8009554 <HAL_GPIO_Init+0x2f8>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00d      	beq.n	8009456 <HAL_GPIO_Init+0x1fa>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a46      	ldr	r2, [pc, #280]	@ (8009558 <HAL_GPIO_Init+0x2fc>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d007      	beq.n	8009452 <HAL_GPIO_Init+0x1f6>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a45      	ldr	r2, [pc, #276]	@ (800955c <HAL_GPIO_Init+0x300>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d101      	bne.n	800944e <HAL_GPIO_Init+0x1f2>
 800944a:	2304      	movs	r3, #4
 800944c:	e008      	b.n	8009460 <HAL_GPIO_Init+0x204>
 800944e:	2307      	movs	r3, #7
 8009450:	e006      	b.n	8009460 <HAL_GPIO_Init+0x204>
 8009452:	2303      	movs	r3, #3
 8009454:	e004      	b.n	8009460 <HAL_GPIO_Init+0x204>
 8009456:	2302      	movs	r3, #2
 8009458:	e002      	b.n	8009460 <HAL_GPIO_Init+0x204>
 800945a:	2301      	movs	r3, #1
 800945c:	e000      	b.n	8009460 <HAL_GPIO_Init+0x204>
 800945e:	2300      	movs	r3, #0
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	f002 0203 	and.w	r2, r2, #3
 8009466:	0092      	lsls	r2, r2, #2
 8009468:	4093      	lsls	r3, r2
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	4313      	orrs	r3, r2
 800946e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009470:	4935      	ldr	r1, [pc, #212]	@ (8009548 <HAL_GPIO_Init+0x2ec>)
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	089b      	lsrs	r3, r3, #2
 8009476:	3302      	adds	r3, #2
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800947e:	4b38      	ldr	r3, [pc, #224]	@ (8009560 <HAL_GPIO_Init+0x304>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	43db      	mvns	r3, r3
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	4013      	ands	r3, r2
 800948c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4313      	orrs	r3, r2
 80094a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80094a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009560 <HAL_GPIO_Init+0x304>)
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009560 <HAL_GPIO_Init+0x304>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	43db      	mvns	r3, r3
 80094b2:	69ba      	ldr	r2, [r7, #24]
 80094b4:	4013      	ands	r3, r2
 80094b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094cc:	4a24      	ldr	r2, [pc, #144]	@ (8009560 <HAL_GPIO_Init+0x304>)
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80094d2:	4b23      	ldr	r3, [pc, #140]	@ (8009560 <HAL_GPIO_Init+0x304>)
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	43db      	mvns	r3, r3
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	4013      	ands	r3, r2
 80094e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80094f6:	4a1a      	ldr	r2, [pc, #104]	@ (8009560 <HAL_GPIO_Init+0x304>)
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80094fc:	4b18      	ldr	r3, [pc, #96]	@ (8009560 <HAL_GPIO_Init+0x304>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	43db      	mvns	r3, r3
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	4013      	ands	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	4313      	orrs	r3, r2
 800951e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009520:	4a0f      	ldr	r2, [pc, #60]	@ (8009560 <HAL_GPIO_Init+0x304>)
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	3301      	adds	r3, #1
 800952a:	61fb      	str	r3, [r7, #28]
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	2b0f      	cmp	r3, #15
 8009530:	f67f aea2 	bls.w	8009278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop
 8009538:	3724      	adds	r7, #36	@ 0x24
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	40023800 	.word	0x40023800
 8009548:	40013800 	.word	0x40013800
 800954c:	40020000 	.word	0x40020000
 8009550:	40020400 	.word	0x40020400
 8009554:	40020800 	.word	0x40020800
 8009558:	40020c00 	.word	0x40020c00
 800955c:	40021000 	.word	0x40021000
 8009560:	40013c00 	.word	0x40013c00

08009564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	807b      	strh	r3, [r7, #2]
 8009570:	4613      	mov	r3, r2
 8009572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009574:	787b      	ldrb	r3, [r7, #1]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800957a:	887a      	ldrh	r2, [r7, #2]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009580:	e003      	b.n	800958a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009582:	887b      	ldrh	r3, [r7, #2]
 8009584:	041a      	lsls	r2, r3, #16
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	619a      	str	r2, [r3, #24]
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009596:	b480      	push	{r7}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80095a8:	887a      	ldrh	r2, [r7, #2]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4013      	ands	r3, r2
 80095ae:	041a      	lsls	r2, r3, #16
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	43d9      	mvns	r1, r3
 80095b4:	887b      	ldrh	r3, [r7, #2]
 80095b6:	400b      	ands	r3, r1
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	619a      	str	r2, [r3, #24]
}
 80095be:	bf00      	nop
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	4603      	mov	r3, r0
 80095d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80095d6:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095d8:	695a      	ldr	r2, [r3, #20]
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	4013      	ands	r3, r2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d006      	beq.n	80095f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80095e2:	4a05      	ldr	r2, [pc, #20]	@ (80095f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80095e4:	88fb      	ldrh	r3, [r7, #6]
 80095e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80095e8:	88fb      	ldrh	r3, [r7, #6]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 f806 	bl	80095fc <HAL_GPIO_EXTI_Callback>
  }
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	40013c00 	.word	0x40013c00

080095fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
	...

08009614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e12b      	b.n	800987e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff f9c0 	bl	80089c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2224      	movs	r2, #36	@ 0x24
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0201 	bic.w	r2, r2, #1
 8009656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009678:	f003 fa4a 	bl	800cb10 <HAL_RCC_GetPCLK1Freq>
 800967c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4a81      	ldr	r2, [pc, #516]	@ (8009888 <HAL_I2C_Init+0x274>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d807      	bhi.n	8009698 <HAL_I2C_Init+0x84>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a80      	ldr	r2, [pc, #512]	@ (800988c <HAL_I2C_Init+0x278>)
 800968c:	4293      	cmp	r3, r2
 800968e:	bf94      	ite	ls
 8009690:	2301      	movls	r3, #1
 8009692:	2300      	movhi	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	e006      	b.n	80096a6 <HAL_I2C_Init+0x92>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4a7d      	ldr	r2, [pc, #500]	@ (8009890 <HAL_I2C_Init+0x27c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	bf94      	ite	ls
 80096a0:	2301      	movls	r3, #1
 80096a2:	2300      	movhi	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e0e7      	b.n	800987e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4a78      	ldr	r2, [pc, #480]	@ (8009894 <HAL_I2C_Init+0x280>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	0c9b      	lsrs	r3, r3, #18
 80096b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	4a6a      	ldr	r2, [pc, #424]	@ (8009888 <HAL_I2C_Init+0x274>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d802      	bhi.n	80096e8 <HAL_I2C_Init+0xd4>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	3301      	adds	r3, #1
 80096e6:	e009      	b.n	80096fc <HAL_I2C_Init+0xe8>
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80096ee:	fb02 f303 	mul.w	r3, r2, r3
 80096f2:	4a69      	ldr	r2, [pc, #420]	@ (8009898 <HAL_I2C_Init+0x284>)
 80096f4:	fba2 2303 	umull	r2, r3, r2, r3
 80096f8:	099b      	lsrs	r3, r3, #6
 80096fa:	3301      	adds	r3, #1
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6812      	ldr	r2, [r2, #0]
 8009700:	430b      	orrs	r3, r1
 8009702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800970e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	495c      	ldr	r1, [pc, #368]	@ (8009888 <HAL_I2C_Init+0x274>)
 8009718:	428b      	cmp	r3, r1
 800971a:	d819      	bhi.n	8009750 <HAL_I2C_Init+0x13c>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	1e59      	subs	r1, r3, #1
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	005b      	lsls	r3, r3, #1
 8009726:	fbb1 f3f3 	udiv	r3, r1, r3
 800972a:	1c59      	adds	r1, r3, #1
 800972c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009730:	400b      	ands	r3, r1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <HAL_I2C_Init+0x138>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1e59      	subs	r1, r3, #1
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	fbb1 f3f3 	udiv	r3, r1, r3
 8009744:	3301      	adds	r3, #1
 8009746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974a:	e051      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 800974c:	2304      	movs	r3, #4
 800974e:	e04f      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d111      	bne.n	800977c <HAL_I2C_Init+0x168>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	1e58      	subs	r0, r3, #1
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6859      	ldr	r1, [r3, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	440b      	add	r3, r1
 8009766:	fbb0 f3f3 	udiv	r3, r0, r3
 800976a:	3301      	adds	r3, #1
 800976c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009770:	2b00      	cmp	r3, #0
 8009772:	bf0c      	ite	eq
 8009774:	2301      	moveq	r3, #1
 8009776:	2300      	movne	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	e012      	b.n	80097a2 <HAL_I2C_Init+0x18e>
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	1e58      	subs	r0, r3, #1
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6859      	ldr	r1, [r3, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	0099      	lsls	r1, r3, #2
 800978c:	440b      	add	r3, r1
 800978e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009792:	3301      	adds	r3, #1
 8009794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009798:	2b00      	cmp	r3, #0
 800979a:	bf0c      	ite	eq
 800979c:	2301      	moveq	r3, #1
 800979e:	2300      	movne	r3, #0
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <HAL_I2C_Init+0x196>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e022      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10e      	bne.n	80097d0 <HAL_I2C_Init+0x1bc>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1e58      	subs	r0, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6859      	ldr	r1, [r3, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	440b      	add	r3, r1
 80097c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80097c4:	3301      	adds	r3, #1
 80097c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ce:	e00f      	b.n	80097f0 <HAL_I2C_Init+0x1dc>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	1e58      	subs	r0, r3, #1
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6859      	ldr	r1, [r3, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	0099      	lsls	r1, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80097e6:	3301      	adds	r3, #1
 80097e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80097f0:	6879      	ldr	r1, [r7, #4]
 80097f2:	6809      	ldr	r1, [r1, #0]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	69da      	ldr	r2, [r3, #28]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800981e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	6911      	ldr	r1, [r2, #16]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68d2      	ldr	r2, [r2, #12]
 800982a:	4311      	orrs	r1, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6812      	ldr	r2, [r2, #0]
 8009830:	430b      	orrs	r3, r1
 8009832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0201 	orr.w	r2, r2, #1
 800985e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	000186a0 	.word	0x000186a0
 800988c:	001e847f 	.word	0x001e847f
 8009890:	003d08ff 	.word	0x003d08ff
 8009894:	431bde83 	.word	0x431bde83
 8009898:	10624dd3 	.word	0x10624dd3

0800989c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ae:	2b80      	cmp	r3, #128	@ 0x80
 80098b0:	d103      	bne.n	80098ba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2200      	movs	r2, #0
 80098b8:	611a      	str	r2, [r3, #16]
  }
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
	...

080098c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	461a      	mov	r2, r3
 80098d4:	460b      	mov	r3, r1
 80098d6:	817b      	strh	r3, [r7, #10]
 80098d8:	4613      	mov	r3, r2
 80098da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098dc:	f7ff fadc 	bl	8008e98 <HAL_GetTick>
 80098e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	f040 80e0 	bne.w	8009ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	2319      	movs	r3, #25
 80098f6:	2201      	movs	r2, #1
 80098f8:	4970      	ldr	r1, [pc, #448]	@ (8009abc <HAL_I2C_Master_Transmit+0x1f4>)
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f002 fa14 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009906:	2302      	movs	r3, #2
 8009908:	e0d3      	b.n	8009ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009910:	2b01      	cmp	r3, #1
 8009912:	d101      	bne.n	8009918 <HAL_I2C_Master_Transmit+0x50>
 8009914:	2302      	movs	r3, #2
 8009916:	e0cc      	b.n	8009ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b01      	cmp	r3, #1
 800992c:	d007      	beq.n	800993e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0201 	orr.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800994c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2221      	movs	r2, #33	@ 0x21
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2210      	movs	r2, #16
 800995a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	893a      	ldrh	r2, [r7, #8]
 800996e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009974:	b29a      	uxth	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a50      	ldr	r2, [pc, #320]	@ (8009ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800997e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009980:	8979      	ldrh	r1, [r7, #10]
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6a3a      	ldr	r2, [r7, #32]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f001 ffd6 	bl	800b938 <I2C_MasterRequestWrite>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e08d      	b.n	8009ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009996:	2300      	movs	r3, #0
 8009998:	613b      	str	r3, [r7, #16]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	613b      	str	r3, [r7, #16]
 80099aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80099ac:	e066      	b.n	8009a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	6a39      	ldr	r1, [r7, #32]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f002 fad2 	bl	800bf5c <I2C_WaitOnTXEFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00d      	beq.n	80099da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d107      	bne.n	80099d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e06b      	b.n	8009ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d11b      	bne.n	8009a50 <HAL_I2C_Master_Transmit+0x188>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d017      	beq.n	8009a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a24:	781a      	ldrb	r2, [r3, #0]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	6a39      	ldr	r1, [r7, #32]
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f002 fac9 	bl	800bfec <I2C_WaitOnBTFFlagUntilTimeout>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00d      	beq.n	8009a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d107      	bne.n	8009a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e01a      	b.n	8009ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d194      	bne.n	80099ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e000      	b.n	8009ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009ab0:	2302      	movs	r3, #2
  }
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	00100002 	.word	0x00100002
 8009ac0:	ffff0000 	.word	0xffff0000

08009ac4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08c      	sub	sp, #48	@ 0x30
 8009ac8:	af02      	add	r7, sp, #8
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	607a      	str	r2, [r7, #4]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	817b      	strh	r3, [r7, #10]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ad8:	f7ff f9de 	bl	8008e98 <HAL_GetTick>
 8009adc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	f040 8217 	bne.w	8009f1a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	2319      	movs	r3, #25
 8009af2:	2201      	movs	r2, #1
 8009af4:	497c      	ldr	r1, [pc, #496]	@ (8009ce8 <HAL_I2C_Master_Receive+0x224>)
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f002 f916 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009b02:	2302      	movs	r3, #2
 8009b04:	e20a      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d101      	bne.n	8009b14 <HAL_I2C_Master_Receive+0x50>
 8009b10:	2302      	movs	r3, #2
 8009b12:	e203      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d007      	beq.n	8009b3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2222      	movs	r2, #34	@ 0x22
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2210      	movs	r2, #16
 8009b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	893a      	ldrh	r2, [r7, #8]
 8009b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4a5c      	ldr	r2, [pc, #368]	@ (8009cec <HAL_I2C_Master_Receive+0x228>)
 8009b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009b7c:	8979      	ldrh	r1, [r7, #10]
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f001 ff5a 	bl	800ba3c <I2C_MasterRequestRead>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e1c4      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d113      	bne.n	8009bc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	623b      	str	r3, [r7, #32]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	695b      	ldr	r3, [r3, #20]
 8009ba4:	623b      	str	r3, [r7, #32]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	623b      	str	r3, [r7, #32]
 8009bae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bbe:	601a      	str	r2, [r3, #0]
 8009bc0:	e198      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d11b      	bne.n	8009c02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	61fb      	str	r3, [r7, #28]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	61fb      	str	r3, [r7, #28]
 8009bee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	e178      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d11b      	bne.n	8009c42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	61bb      	str	r3, [r7, #24]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	61bb      	str	r3, [r7, #24]
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	e158      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c52:	2300      	movs	r3, #0
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	617b      	str	r3, [r7, #20]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009c68:	e144      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	f200 80f1 	bhi.w	8009e56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d123      	bne.n	8009cc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f002 fa2d 	bl	800c0e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e145      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009cc2:	e117      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d14e      	bne.n	8009d6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	4906      	ldr	r1, [pc, #24]	@ (8009cf0 <HAL_I2C_Master_Receive+0x22c>)
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f002 f826 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e11a      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
 8009ce6:	bf00      	nop
 8009ce8:	00100002 	.word	0x00100002
 8009cec:	ffff0000 	.word	0xffff0000
 8009cf0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0e:	b2d2      	uxtb	r2, r2
 8009d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d20:	3b01      	subs	r3, #1
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	691a      	ldr	r2, [r3, #16]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d40:	b2d2      	uxtb	r2, r2
 8009d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	3b01      	subs	r3, #1
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d68:	e0c4      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	2200      	movs	r2, #0
 8009d72:	496c      	ldr	r1, [pc, #432]	@ (8009f24 <HAL_I2C_Master_Receive+0x460>)
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f001 ffd7 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e0cb      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d9e:	b2d2      	uxtb	r2, r2
 8009da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009db0:	3b01      	subs	r3, #1
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4955      	ldr	r1, [pc, #340]	@ (8009f24 <HAL_I2C_Master_Receive+0x460>)
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f001 ffa9 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e09d      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691a      	ldr	r2, [r3, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	b29a      	uxth	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e54:	e04e      	b.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f002 f940 	bl	800c0e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e058      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691a      	ldr	r2, [r3, #16]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e74:	b2d2      	uxtb	r2, r2
 8009e76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	f003 0304 	and.w	r3, r3, #4
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d124      	bne.n	8009ef4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d107      	bne.n	8009ec2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ec0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	691a      	ldr	r2, [r3, #16]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	b2d2      	uxtb	r2, r2
 8009ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f47f aeb6 	bne.w	8009c6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e000      	b.n	8009f1c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009f1a:	2302      	movs	r3, #2
  }
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3728      	adds	r7, #40	@ 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	00010004 	.word	0x00010004

08009f28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08a      	sub	sp, #40	@ 0x28
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	607a      	str	r2, [r7, #4]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	460b      	mov	r3, r1
 8009f36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009f38:	f7fe ffae 	bl	8008e98 <HAL_GetTick>
 8009f3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b20      	cmp	r3, #32
 8009f4c:	f040 8111 	bne.w	800a172 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	2319      	movs	r3, #25
 8009f56:	2201      	movs	r2, #1
 8009f58:	4988      	ldr	r1, [pc, #544]	@ (800a17c <HAL_I2C_IsDeviceReady+0x254>)
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f001 fee4 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009f66:	2302      	movs	r3, #2
 8009f68:	e104      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d101      	bne.n	8009f78 <HAL_I2C_IsDeviceReady+0x50>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e0fd      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d007      	beq.n	8009f9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0201 	orr.w	r2, r2, #1
 8009f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2224      	movs	r2, #36	@ 0x24
 8009fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a70      	ldr	r2, [pc, #448]	@ (800a180 <HAL_I2C_IsDeviceReady+0x258>)
 8009fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f001 fea2 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00d      	beq.n	800a006 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ff8:	d103      	bne.n	800a002 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a000:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e0b6      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a006:	897b      	ldrh	r3, [r7, #10]
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	461a      	mov	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a014:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a016:	f7fe ff3f 	bl	8008e98 <HAL_GetTick>
 800a01a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b02      	cmp	r3, #2
 800a028:	bf0c      	ite	eq
 800a02a:	2301      	moveq	r3, #1
 800a02c:	2300      	movne	r3, #0
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a03c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a040:	bf0c      	ite	eq
 800a042:	2301      	moveq	r3, #1
 800a044:	2300      	movne	r3, #0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a04a:	e025      	b.n	800a098 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a04c:	f7fe ff24 	bl	8008e98 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d302      	bcc.n	800a062 <HAL_I2C_IsDeviceReady+0x13a>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d103      	bne.n	800a06a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	22a0      	movs	r2, #160	@ 0xa0
 800a066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b02      	cmp	r3, #2
 800a076:	bf0c      	ite	eq
 800a078:	2301      	moveq	r3, #1
 800a07a:	2300      	movne	r3, #0
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a08a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a08e:	bf0c      	ite	eq
 800a090:	2301      	moveq	r3, #1
 800a092:	2300      	movne	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2ba0      	cmp	r3, #160	@ 0xa0
 800a0a2:	d005      	beq.n	800a0b0 <HAL_I2C_IsDeviceReady+0x188>
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d102      	bne.n	800a0b0 <HAL_I2C_IsDeviceReady+0x188>
 800a0aa:	7dbb      	ldrb	r3, [r7, #22]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0cd      	beq.n	800a04c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d129      	bne.n	800a11a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	613b      	str	r3, [r7, #16]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	2319      	movs	r3, #25
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	4921      	ldr	r1, [pc, #132]	@ (800a17c <HAL_I2C_IsDeviceReady+0x254>)
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f001 fe16 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e036      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2220      	movs	r2, #32
 800a10a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	e02c      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a128:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a132:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	2319      	movs	r3, #25
 800a13a:	2201      	movs	r2, #1
 800a13c:	490f      	ldr	r1, [pc, #60]	@ (800a17c <HAL_I2C_IsDeviceReady+0x254>)
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f001 fdf2 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e012      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	3301      	adds	r3, #1
 800a152:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	429a      	cmp	r2, r3
 800a15a:	f4ff af32 	bcc.w	8009fc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2220      	movs	r2, #32
 800a162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e000      	b.n	800a174 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a172:	2302      	movs	r3, #2
  }
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	00100002 	.word	0x00100002
 800a180:	ffff0000 	.word	0xffff0000

0800a184 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a1a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d003      	beq.n	800a1bc <HAL_I2C_EV_IRQHandler+0x38>
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	2b40      	cmp	r3, #64	@ 0x40
 800a1b8:	f040 80b1 	bne.w	800a31e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10d      	bne.n	800a1f2 <HAL_I2C_EV_IRQHandler+0x6e>
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a1dc:	d003      	beq.n	800a1e6 <HAL_I2C_EV_IRQHandler+0x62>
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a1e4:	d101      	bne.n	800a1ea <HAL_I2C_EV_IRQHandler+0x66>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <HAL_I2C_EV_IRQHandler+0x68>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	f000 8114 	beq.w	800a41a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <HAL_I2C_EV_IRQHandler+0x90>
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a202:	2b00      	cmp	r3, #0
 800a204:	d006      	beq.n	800a214 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 fff6 	bl	800c1f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fd76 	bl	800acfe <I2C_Master_SB>
 800a212:	e083      	b.n	800a31c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f003 0308 	and.w	r3, r3, #8
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d008      	beq.n	800a230 <HAL_I2C_EV_IRQHandler+0xac>
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fdee 	bl	800ae0a <I2C_Master_ADD10>
 800a22e:	e075      	b.n	800a31c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f003 0302 	and.w	r3, r3, #2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d008      	beq.n	800a24c <HAL_I2C_EV_IRQHandler+0xc8>
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fe0a 	bl	800ae5e <I2C_Master_ADDR>
 800a24a:	e067      	b.n	800a31c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	f003 0304 	and.w	r3, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d036      	beq.n	800a2c4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a264:	f000 80db 	beq.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00d      	beq.n	800a28e <HAL_I2C_EV_IRQHandler+0x10a>
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d008      	beq.n	800a28e <HAL_I2C_EV_IRQHandler+0x10a>
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f9d6 	bl	800a638 <I2C_MasterTransmit_TXE>
 800a28c:	e046      	b.n	800a31c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80c2 	beq.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80bc 	beq.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
 800a2a8:	2b21      	cmp	r3, #33	@ 0x21
 800a2aa:	d103      	bne.n	800a2b4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa5f 	bl	800a770 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2b2:	e0b4      	b.n	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	2b40      	cmp	r3, #64	@ 0x40
 800a2b8:	f040 80b1 	bne.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 facd 	bl	800a85c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2c2:	e0ac      	b.n	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2d2:	f000 80a4 	beq.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00d      	beq.n	800a2fc <HAL_I2C_EV_IRQHandler+0x178>
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <HAL_I2C_EV_IRQHandler+0x178>
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d103      	bne.n	800a2fc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fb49 	bl	800a98c <I2C_MasterReceive_RXNE>
 800a2fa:	e00f      	b.n	800a31c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f003 0304 	and.w	r3, r3, #4
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 808b 	beq.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 8085 	beq.w	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fc01 	bl	800ab1c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a31a:	e080      	b.n	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
 800a31c:	e07f      	b.n	800a41e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	61fb      	str	r3, [r7, #28]
 800a32e:	e007      	b.n	800a340 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	f003 0302 	and.w	r3, r3, #2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d011      	beq.n	800a36e <HAL_I2C_EV_IRQHandler+0x1ea>
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00c      	beq.n	800a36e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d003      	beq.n	800a364 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a364:	69b9      	ldr	r1, [r7, #24]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 ffc8 	bl	800b2fc <I2C_Slave_ADDR>
 800a36c:	e05a      	b.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b00      	cmp	r3, #0
 800a376:	d008      	beq.n	800a38a <HAL_I2C_EV_IRQHandler+0x206>
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f001 f802 	bl	800b38c <I2C_Slave_STOPF>
 800a388:	e04c      	b.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a38a:	7bbb      	ldrb	r3, [r7, #14]
 800a38c:	2b21      	cmp	r3, #33	@ 0x21
 800a38e:	d002      	beq.n	800a396 <HAL_I2C_EV_IRQHandler+0x212>
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	2b29      	cmp	r3, #41	@ 0x29
 800a394:	d120      	bne.n	800a3d8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00d      	beq.n	800a3bc <HAL_I2C_EV_IRQHandler+0x238>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d008      	beq.n	800a3bc <HAL_I2C_EV_IRQHandler+0x238>
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d103      	bne.n	800a3bc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fee3 	bl	800b180 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3ba:	e032      	b.n	800a422 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	f003 0304 	and.w	r3, r3, #4
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d02d      	beq.n	800a422 <HAL_I2C_EV_IRQHandler+0x29e>
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d028      	beq.n	800a422 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 ff12 	bl	800b1fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3d6:	e024      	b.n	800a422 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <HAL_I2C_EV_IRQHandler+0x27a>
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <HAL_I2C_EV_IRQHandler+0x27a>
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	f003 0304 	and.w	r3, r3, #4
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d103      	bne.n	800a3fe <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 ff20 	bl	800b23c <I2C_SlaveReceive_RXNE>
 800a3fc:	e012      	b.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f003 0304 	and.w	r3, r3, #4
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00d      	beq.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 ff50 	bl	800b2b8 <I2C_SlaveReceive_BTF>
 800a418:	e004      	b.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a41a:	bf00      	nop
 800a41c:	e002      	b.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a422:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b08a      	sub	sp, #40	@ 0x28
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a442:	2300      	movs	r3, #0
 800a444:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a44c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00d      	beq.n	800a474 <HAL_I2C_ER_IRQHandler+0x4a>
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d008      	beq.n	800a474 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	f043 0301 	orr.w	r3, r3, #1
 800a468:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a472:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00d      	beq.n	800a49a <HAL_I2C_ER_IRQHandler+0x70>
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a484:	2b00      	cmp	r3, #0
 800a486:	d008      	beq.n	800a49a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a48a:	f043 0302 	orr.w	r3, r3, #2
 800a48e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800a498:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d03e      	beq.n	800a522 <HAL_I2C_ER_IRQHandler+0xf8>
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d039      	beq.n	800a522 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800a4ae:	7efb      	ldrb	r3, [r7, #27]
 800a4b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a4c8:	7ebb      	ldrb	r3, [r7, #26]
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d112      	bne.n	800a4f4 <HAL_I2C_ER_IRQHandler+0xca>
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10f      	bne.n	800a4f4 <HAL_I2C_ER_IRQHandler+0xca>
 800a4d4:	7cfb      	ldrb	r3, [r7, #19]
 800a4d6:	2b21      	cmp	r3, #33	@ 0x21
 800a4d8:	d008      	beq.n	800a4ec <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a4da:	7cfb      	ldrb	r3, [r7, #19]
 800a4dc:	2b29      	cmp	r3, #41	@ 0x29
 800a4de:	d005      	beq.n	800a4ec <HAL_I2C_ER_IRQHandler+0xc2>
 800a4e0:	7cfb      	ldrb	r3, [r7, #19]
 800a4e2:	2b28      	cmp	r3, #40	@ 0x28
 800a4e4:	d106      	bne.n	800a4f4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b21      	cmp	r3, #33	@ 0x21
 800a4ea:	d103      	bne.n	800a4f4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f001 f87d 	bl	800b5ec <I2C_Slave_AF>
 800a4f2:	e016      	b.n	800a522 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a4fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	f043 0304 	orr.w	r3, r3, #4
 800a504:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a506:	7efb      	ldrb	r3, [r7, #27]
 800a508:	2b10      	cmp	r3, #16
 800a50a:	d002      	beq.n	800a512 <HAL_I2C_ER_IRQHandler+0xe8>
 800a50c:	7efb      	ldrb	r3, [r7, #27]
 800a50e:	2b40      	cmp	r3, #64	@ 0x40
 800a510:	d107      	bne.n	800a522 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a520:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00d      	beq.n	800a548 <HAL_I2C_ER_IRQHandler+0x11e>
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a532:	2b00      	cmp	r3, #0
 800a534:	d008      	beq.n	800a548 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a538:	f043 0308 	orr.w	r3, r3, #8
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800a546:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d008      	beq.n	800a560 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a554:	431a      	orrs	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 f8ba 	bl	800b6d4 <I2C_ITError>
  }
}
 800a560:	bf00      	nop
 800a562:	3728      	adds	r7, #40	@ 0x28
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a62c:	bf00      	nop
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a646:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a64e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a654:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d150      	bne.n	800a700 <I2C_MasterTransmit_TXE+0xc8>
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	2b21      	cmp	r3, #33	@ 0x21
 800a662:	d14d      	bne.n	800a700 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	2b08      	cmp	r3, #8
 800a668:	d01d      	beq.n	800a6a6 <I2C_MasterTransmit_TXE+0x6e>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	d01a      	beq.n	800a6a6 <I2C_MasterTransmit_TXE+0x6e>
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a676:	d016      	beq.n	800a6a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a686:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2211      	movs	r2, #17
 800a68c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2220      	movs	r2, #32
 800a69a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f7ff ff62 	bl	800a568 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6a4:	e060      	b.n	800a768 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a6b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2220      	movs	r2, #32
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	2b40      	cmp	r3, #64	@ 0x40
 800a6de:	d107      	bne.n	800a6f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ff7d 	bl	800a5e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6ee:	e03b      	b.n	800a768 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff ff35 	bl	800a568 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6fe:	e033      	b.n	800a768 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b21      	cmp	r3, #33	@ 0x21
 800a704:	d005      	beq.n	800a712 <I2C_MasterTransmit_TXE+0xda>
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b40      	cmp	r3, #64	@ 0x40
 800a70a:	d12d      	bne.n	800a768 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
 800a70e:	2b22      	cmp	r3, #34	@ 0x22
 800a710:	d12a      	bne.n	800a768 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a716:	b29b      	uxth	r3, r3
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d108      	bne.n	800a72e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a72a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a72c:	e01c      	b.n	800a768 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b40      	cmp	r3, #64	@ 0x40
 800a738:	d103      	bne.n	800a742 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f88e 	bl	800a85c <I2C_MemoryTransmit_TXE_BTF>
}
 800a740:	e012      	b.n	800a768 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a746:	781a      	ldrb	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a752:	1c5a      	adds	r2, r3, #1
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a766:	e7ff      	b.n	800a768 <I2C_MasterTransmit_TXE+0x130>
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b21      	cmp	r3, #33	@ 0x21
 800a788:	d164      	bne.n	800a854 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a78e:	b29b      	uxth	r3, r3
 800a790:	2b00      	cmp	r3, #0
 800a792:	d012      	beq.n	800a7ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a798:	781a      	ldrb	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a7b8:	e04c      	b.n	800a854 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b08      	cmp	r3, #8
 800a7be:	d01d      	beq.n	800a7fc <I2C_MasterTransmit_BTF+0x8c>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	d01a      	beq.n	800a7fc <I2C_MasterTransmit_BTF+0x8c>
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a7cc:	d016      	beq.n	800a7fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2211      	movs	r2, #17
 800a7e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff feb7 	bl	800a568 <HAL_I2C_MasterTxCpltCallback>
}
 800a7fa:	e02b      	b.n	800a854 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a80a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a81a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2220      	movs	r2, #32
 800a826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a830:	b2db      	uxtb	r3, r3
 800a832:	2b40      	cmp	r3, #64	@ 0x40
 800a834:	d107      	bne.n	800a846 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fed2 	bl	800a5e8 <HAL_I2C_MemTxCpltCallback>
}
 800a844:	e006      	b.n	800a854 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff fe8a 	bl	800a568 <HAL_I2C_MasterTxCpltCallback>
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a86a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11d      	bne.n	800a8b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d10b      	bne.n	800a894 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a880:	b2da      	uxtb	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a88c:	1c9a      	adds	r2, r3, #2
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a892:	e077      	b.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a898:	b29b      	uxth	r3, r3
 800a89a:	121b      	asrs	r3, r3, #8
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a8ae:	e069      	b.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d10b      	bne.n	800a8d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a8ce:	e059      	b.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d152      	bne.n	800a97e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b22      	cmp	r3, #34	@ 0x22
 800a8dc:	d10d      	bne.n	800a8fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a8f8:	e044      	b.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d015      	beq.n	800a930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	2b21      	cmp	r3, #33	@ 0x21
 800a908:	d112      	bne.n	800a930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a90e:	781a      	ldrb	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91a:	1c5a      	adds	r2, r3, #1
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a924:	b29b      	uxth	r3, r3
 800a926:	3b01      	subs	r3, #1
 800a928:	b29a      	uxth	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a92e:	e029      	b.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a934:	b29b      	uxth	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d124      	bne.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	2b21      	cmp	r3, #33	@ 0x21
 800a93e:	d121      	bne.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685a      	ldr	r2, [r3, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a94e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a95e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2220      	movs	r2, #32
 800a96a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff fe36 	bl	800a5e8 <HAL_I2C_MemTxCpltCallback>
}
 800a97c:	e002      	b.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7fe ff8c 	bl	800989c <I2C_Flush_DR>
}
 800a984:	bf00      	nop
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b22      	cmp	r3, #34	@ 0x22
 800a99e:	f040 80b9 	bne.w	800ab14 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d921      	bls.n	800a9fa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c0:	b2d2      	uxtb	r2, r2
 800a9c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	f040 8096 	bne.w	800ab14 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9f6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a9f8:	e08c      	b.n	800ab14 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d07f      	beq.n	800ab02 <I2C_MasterReceive_RXNE+0x176>
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d002      	beq.n	800aa0e <I2C_MasterReceive_RXNE+0x82>
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d179      	bne.n	800ab02 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fb34 	bl	800c07c <I2C_WaitOnSTOPRequestThroughIT>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d14c      	bne.n	800aab4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa28:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aa38:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	b2d2      	uxtb	r2, r2
 800aa46:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b40      	cmp	r3, #64	@ 0x40
 800aa72:	d10a      	bne.n	800aa8a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fdba 	bl	800a5fc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aa88:	e044      	b.n	800ab14 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b08      	cmp	r3, #8
 800aa96:	d002      	beq.n	800aa9e <I2C_MasterReceive_RXNE+0x112>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d103      	bne.n	800aaa6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aaa4:	e002      	b.n	800aaac <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2212      	movs	r2, #18
 800aaaa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff fd65 	bl	800a57c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aab2:	e02f      	b.n	800ab14 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aac2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691a      	ldr	r2, [r3, #16]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aace:	b2d2      	uxtb	r2, r2
 800aad0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	3b01      	subs	r3, #1
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7ff fd88 	bl	800a610 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab00:	e008      	b.n	800ab14 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab10:	605a      	str	r2, [r3, #4]
}
 800ab12:	e7ff      	b.n	800ab14 <I2C_MasterReceive_RXNE+0x188>
 800ab14:	bf00      	nop
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d11b      	bne.n	800ab6c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab42:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	691a      	ldr	r2, [r3, #16]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4e:	b2d2      	uxtb	r2, r2
 800ab50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	3b01      	subs	r3, #1
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800ab6a:	e0c4      	b.n	800acf6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d129      	bne.n	800abca <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab84:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	d00a      	beq.n	800aba2 <I2C_MasterReceive_BTF+0x86>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d007      	beq.n	800aba2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aba0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691a      	ldr	r2, [r3, #16]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abac:	b2d2      	uxtb	r2, r2
 800abae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	3b01      	subs	r3, #1
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800abc8:	e095      	b.n	800acf6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abce:	b29b      	uxth	r3, r3
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d17d      	bne.n	800acd0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d002      	beq.n	800abe0 <I2C_MasterReceive_BTF+0xc4>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b10      	cmp	r3, #16
 800abde:	d108      	bne.n	800abf2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	e016      	b.n	800ac20 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b04      	cmp	r3, #4
 800abf6:	d002      	beq.n	800abfe <I2C_MasterReceive_BTF+0xe2>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d108      	bne.n	800ac10 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	e007      	b.n	800ac20 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	691a      	ldr	r2, [r3, #16]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac50:	b2d2      	uxtb	r2, r2
 800ac52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ac7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2220      	movs	r2, #32
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b40      	cmp	r3, #64	@ 0x40
 800ac8e:	d10a      	bne.n	800aca6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff fcac 	bl	800a5fc <HAL_I2C_MemRxCpltCallback>
}
 800aca4:	e027      	b.n	800acf6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d002      	beq.n	800acba <I2C_MasterReceive_BTF+0x19e>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b20      	cmp	r3, #32
 800acb8:	d103      	bne.n	800acc2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	631a      	str	r2, [r3, #48]	@ 0x30
 800acc0:	e002      	b.n	800acc8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2212      	movs	r2, #18
 800acc6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fc57 	bl	800a57c <HAL_I2C_MasterRxCpltCallback>
}
 800acce:	e012      	b.n	800acf6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b40      	cmp	r3, #64	@ 0x40
 800ad10:	d117      	bne.n	800ad42 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d109      	bne.n	800ad2e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	461a      	mov	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad2a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800ad2c:	e067      	b.n	800adfe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	611a      	str	r2, [r3, #16]
}
 800ad40:	e05d      	b.n	800adfe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad4a:	d133      	bne.n	800adb4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b21      	cmp	r3, #33	@ 0x21
 800ad56:	d109      	bne.n	800ad6c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad68:	611a      	str	r2, [r3, #16]
 800ad6a:	e008      	b.n	800ad7e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f043 0301 	orr.w	r3, r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d004      	beq.n	800ad90 <I2C_Master_SB+0x92>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d108      	bne.n	800ada2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d032      	beq.n	800adfe <I2C_Master_SB+0x100>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d02d      	beq.n	800adfe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800adb0:	605a      	str	r2, [r3, #4]
}
 800adb2:	e024      	b.n	800adfe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10e      	bne.n	800adda <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	11db      	asrs	r3, r3, #7
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	f003 0306 	and.w	r3, r3, #6
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	f063 030f 	orn	r3, r3, #15
 800add0:	b2da      	uxtb	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	611a      	str	r2, [r3, #16]
}
 800add8:	e011      	b.n	800adfe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d10d      	bne.n	800adfe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	11db      	asrs	r3, r3, #7
 800adea:	b2db      	uxtb	r3, r3
 800adec:	f003 0306 	and.w	r3, r3, #6
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f063 030e 	orn	r3, r3, #14
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	611a      	str	r2, [r3, #16]
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d004      	beq.n	800ae30 <I2C_Master_ADD10+0x26>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d108      	bne.n	800ae42 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00c      	beq.n	800ae52 <I2C_Master_ADD10+0x48>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d007      	beq.n	800ae52 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae50:	605a      	str	r2, [r3, #4]
  }
}
 800ae52:	bf00      	nop
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ae5e:	b480      	push	{r7}
 800ae60:	b091      	sub	sp, #68	@ 0x44
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae74:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b22      	cmp	r3, #34	@ 0x22
 800ae86:	f040 8169 	bne.w	800b15c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10f      	bne.n	800aeb2 <I2C_Master_ADDR+0x54>
 800ae92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae96:	2b40      	cmp	r3, #64	@ 0x40
 800ae98:	d10b      	bne.n	800aeb2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	e160      	b.n	800b174 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d11d      	bne.n	800aef6 <I2C_Master_ADDR+0x98>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800aec2:	d118      	bne.n	800aef6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aec4:	2300      	movs	r3, #0
 800aec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aee8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	651a      	str	r2, [r3, #80]	@ 0x50
 800aef4:	e13e      	b.n	800b174 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d113      	bne.n	800af28 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af00:	2300      	movs	r3, #0
 800af02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	e115      	b.n	800b154 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	2b01      	cmp	r3, #1
 800af30:	f040 808a 	bne.w	800b048 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800af3a:	d137      	bne.n	800afac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af4a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af5a:	d113      	bne.n	800af84 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af6a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af6c:	2300      	movs	r3, #0
 800af6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	627b      	str	r3, [r7, #36]	@ 0x24
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	e0e7      	b.n	800b154 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af84:	2300      	movs	r3, #0
 800af86:	623b      	str	r3, [r7, #32]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	623b      	str	r3, [r7, #32]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	623b      	str	r3, [r7, #32]
 800af98:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	e0d3      	b.n	800b154 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800afac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d02e      	beq.n	800b010 <I2C_Master_ADDR+0x1b2>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb4:	2b20      	cmp	r3, #32
 800afb6:	d02b      	beq.n	800b010 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800afb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afba:	2b12      	cmp	r3, #18
 800afbc:	d102      	bne.n	800afc4 <I2C_Master_ADDR+0x166>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d125      	bne.n	800b010 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	2b04      	cmp	r3, #4
 800afc8:	d00e      	beq.n	800afe8 <I2C_Master_ADDR+0x18a>
 800afca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d00b      	beq.n	800afe8 <I2C_Master_ADDR+0x18a>
 800afd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd2:	2b10      	cmp	r3, #16
 800afd4:	d008      	beq.n	800afe8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	e007      	b.n	800aff8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aff6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aff8:	2300      	movs	r3, #0
 800affa:	61fb      	str	r3, [r7, #28]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	61fb      	str	r3, [r7, #28]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	61fb      	str	r3, [r7, #28]
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	e0a1      	b.n	800b154 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b01e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b020:	2300      	movs	r3, #0
 800b022:	61bb      	str	r3, [r7, #24]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	61bb      	str	r3, [r7, #24]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	61bb      	str	r3, [r7, #24]
 800b034:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	e085      	b.n	800b154 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d14d      	bne.n	800b0ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	2b04      	cmp	r3, #4
 800b056:	d016      	beq.n	800b086 <I2C_Master_ADDR+0x228>
 800b058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d013      	beq.n	800b086 <I2C_Master_ADDR+0x228>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b060:	2b10      	cmp	r3, #16
 800b062:	d010      	beq.n	800b086 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b072:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	e007      	b.n	800b096 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b094:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0a4:	d117      	bne.n	800b0d6 <I2C_Master_ADDR+0x278>
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b0ac:	d00b      	beq.n	800b0c6 <I2C_Master_ADDR+0x268>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d008      	beq.n	800b0c6 <I2C_Master_ADDR+0x268>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d005      	beq.n	800b0c6 <I2C_Master_ADDR+0x268>
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d002      	beq.n	800b0c6 <I2C_Master_ADDR+0x268>
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c2:	2b20      	cmp	r3, #32
 800b0c4:	d107      	bne.n	800b0d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	617b      	str	r3, [r7, #20]
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	e032      	b.n	800b154 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b0fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b108:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b10c:	d117      	bne.n	800b13e <I2C_Master_ADDR+0x2e0>
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b114:	d00b      	beq.n	800b12e <I2C_Master_ADDR+0x2d0>
 800b116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d008      	beq.n	800b12e <I2C_Master_ADDR+0x2d0>
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	2b08      	cmp	r3, #8
 800b120:	d005      	beq.n	800b12e <I2C_Master_ADDR+0x2d0>
 800b122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b124:	2b10      	cmp	r3, #16
 800b126:	d002      	beq.n	800b12e <I2C_Master_ADDR+0x2d0>
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	2b20      	cmp	r3, #32
 800b12c:	d107      	bne.n	800b13e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b13c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b13e:	2300      	movs	r3, #0
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	613b      	str	r3, [r7, #16]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	613b      	str	r3, [r7, #16]
 800b152:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b15a:	e00b      	b.n	800b174 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	60fb      	str	r3, [r7, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]
}
 800b172:	e7ff      	b.n	800b174 <I2C_Master_ADDR+0x316>
 800b174:	bf00      	nop
 800b176:	3744      	adds	r7, #68	@ 0x44
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b18e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b194:	b29b      	uxth	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d02b      	beq.n	800b1f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d114      	bne.n	800b1f2 <I2C_SlaveTransmit_TXE+0x72>
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	2b29      	cmp	r3, #41	@ 0x29
 800b1cc:	d111      	bne.n	800b1f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2221      	movs	r2, #33	@ 0x21
 800b1e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2228      	movs	r2, #40	@ 0x28
 800b1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff f9cf 	bl	800a590 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b206:	b29b      	uxth	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d011      	beq.n	800b230 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b226:	b29b      	uxth	r3, r3
 800b228:	3b01      	subs	r3, #1
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b24a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b250:	b29b      	uxth	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d02c      	beq.n	800b2b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b260:	b2d2      	uxtb	r2, r2
 800b262:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b268:	1c5a      	adds	r2, r3, #1
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b272:	b29b      	uxth	r3, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	b29a      	uxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d114      	bne.n	800b2b0 <I2C_SlaveReceive_RXNE+0x74>
 800b286:	7bfb      	ldrb	r3, [r7, #15]
 800b288:	2b2a      	cmp	r3, #42	@ 0x2a
 800b28a:	d111      	bne.n	800b2b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b29a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2222      	movs	r2, #34	@ 0x22
 800b2a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2228      	movs	r2, #40	@ 0x28
 800b2a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff f97a 	bl	800a5a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d012      	beq.n	800b2f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d4:	b2d2      	uxtb	r2, r2
 800b2d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b310:	b2db      	uxtb	r3, r3
 800b312:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b316:	2b28      	cmp	r3, #40	@ 0x28
 800b318:	d125      	bne.n	800b366 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b328:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	f003 0304 	and.w	r3, r3, #4
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b334:	2301      	movs	r3, #1
 800b336:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d103      	bne.n	800b34a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	81bb      	strh	r3, [r7, #12]
 800b348:	e002      	b.n	800b350 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b358:	89ba      	ldrh	r2, [r7, #12]
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7ff f92a 	bl	800a5b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b364:	e00e      	b.n	800b384 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b366:	2300      	movs	r3, #0
 800b368:	60bb      	str	r3, [r7, #8]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	60bb      	str	r3, [r7, #8]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	699b      	ldr	r3, [r3, #24]
 800b378:	60bb      	str	r3, [r7, #8]
 800b37a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b384:	bf00      	nop
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b39a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b3aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	60bb      	str	r3, [r7, #8]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f042 0201 	orr.w	r2, r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b3e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3e8:	d172      	bne.n	800b4d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b3ea:	7bfb      	ldrb	r3, [r7, #15]
 800b3ec:	2b22      	cmp	r3, #34	@ 0x22
 800b3ee:	d002      	beq.n	800b3f6 <I2C_Slave_STOPF+0x6a>
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3f4:	d135      	bne.n	800b462 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b408:	b29b      	uxth	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b412:	f043 0204 	orr.w	r2, r3, #4
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b428:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fd ff05 	bl	800923e <HAL_DMA_GetState>
 800b434:	4603      	mov	r3, r0
 800b436:	2b01      	cmp	r3, #1
 800b438:	d049      	beq.n	800b4ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b43e:	4a69      	ldr	r2, [pc, #420]	@ (800b5e4 <I2C_Slave_STOPF+0x258>)
 800b440:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fed7 	bl	80091fa <HAL_DMA_Abort_IT>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d03d      	beq.n	800b4ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b45c:	4610      	mov	r0, r2
 800b45e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b460:	e035      	b.n	800b4ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b474:	b29b      	uxth	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d005      	beq.n	800b486 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47e:	f043 0204 	orr.w	r2, r3, #4
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b494:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fd fecf 	bl	800923e <HAL_DMA_GetState>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d014      	beq.n	800b4d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4aa:	4a4e      	ldr	r2, [pc, #312]	@ (800b5e4 <I2C_Slave_STOPF+0x258>)
 800b4ac:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fd fea1 	bl	80091fa <HAL_DMA_Abort_IT>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d008      	beq.n	800b4d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4798      	blx	r3
 800b4cc:	e000      	b.n	800b4d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d03e      	beq.n	800b558 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	f003 0304 	and.w	r3, r3, #4
 800b4e4:	2b04      	cmp	r3, #4
 800b4e6:	d112      	bne.n	800b50e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	691a      	ldr	r2, [r3, #16]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f2:	b2d2      	uxtb	r2, r2
 800b4f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b504:	b29b      	uxth	r3, r3
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b518:	2b40      	cmp	r3, #64	@ 0x40
 800b51a:	d112      	bne.n	800b542 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	691a      	ldr	r2, [r3, #16]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b526:	b2d2      	uxtb	r2, r2
 800b528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52e:	1c5a      	adds	r2, r3, #1
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b538:	b29b      	uxth	r3, r3
 800b53a:	3b01      	subs	r3, #1
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b546:	b29b      	uxth	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b550:	f043 0204 	orr.w	r2, r3, #4
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f8b7 	bl	800b6d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b566:	e039      	b.n	800b5dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b56c:	d109      	bne.n	800b582 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2228      	movs	r2, #40	@ 0x28
 800b578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff f811 	bl	800a5a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b28      	cmp	r3, #40	@ 0x28
 800b58c:	d111      	bne.n	800b5b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a15      	ldr	r2, [pc, #84]	@ (800b5e8 <I2C_Slave_STOPF+0x25c>)
 800b592:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff f812 	bl	800a5d4 <HAL_I2C_ListenCpltCallback>
}
 800b5b0:	e014      	b.n	800b5dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b6:	2b22      	cmp	r3, #34	@ 0x22
 800b5b8:	d002      	beq.n	800b5c0 <I2C_Slave_STOPF+0x234>
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	2b22      	cmp	r3, #34	@ 0x22
 800b5be:	d10d      	bne.n	800b5dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7fe ffe4 	bl	800a5a4 <HAL_I2C_SlaveRxCpltCallback>
}
 800b5dc:	bf00      	nop
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	0800bbd9 	.word	0x0800bbd9
 800b5e8:	ffff0000 	.word	0xffff0000

0800b5ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b08      	cmp	r3, #8
 800b606:	d002      	beq.n	800b60e <I2C_Slave_AF+0x22>
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b20      	cmp	r3, #32
 800b60c:	d129      	bne.n	800b662 <I2C_Slave_AF+0x76>
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2b28      	cmp	r3, #40	@ 0x28
 800b612:	d126      	bne.n	800b662 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a2e      	ldr	r2, [pc, #184]	@ (800b6d0 <I2C_Slave_AF+0xe4>)
 800b618:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b628:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b632:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	681a      	ldr	r2, [r3, #0]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b642:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2220      	movs	r2, #32
 800b64e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fe ffba 	bl	800a5d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b660:	e031      	b.n	800b6c6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	2b21      	cmp	r3, #33	@ 0x21
 800b666:	d129      	bne.n	800b6bc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a19      	ldr	r2, [pc, #100]	@ (800b6d0 <I2C_Slave_AF+0xe4>)
 800b66c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2221      	movs	r2, #33	@ 0x21
 800b672:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2220      	movs	r2, #32
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b692:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b69c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6ac:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7fe f8f4 	bl	800989c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7fe ff6b 	bl	800a590 <HAL_I2C_SlaveTxCpltCallback>
}
 800b6ba:	e004      	b.n	800b6c6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b6c4:	615a      	str	r2, [r3, #20]
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	ffff0000 	.word	0xffff0000

0800b6d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b10      	cmp	r3, #16
 800b6f0:	d002      	beq.n	800b6f8 <I2C_ITError+0x24>
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	2b40      	cmp	r3, #64	@ 0x40
 800b6f6:	d10a      	bne.n	800b70e <I2C_ITError+0x3a>
 800b6f8:	7bfb      	ldrb	r3, [r7, #15]
 800b6fa:	2b22      	cmp	r3, #34	@ 0x22
 800b6fc:	d107      	bne.n	800b70e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b70c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b714:	2b28      	cmp	r3, #40	@ 0x28
 800b716:	d107      	bne.n	800b728 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2228      	movs	r2, #40	@ 0x28
 800b722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b726:	e015      	b.n	800b754 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b736:	d00a      	beq.n	800b74e <I2C_ITError+0x7a>
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	2b60      	cmp	r3, #96	@ 0x60
 800b73c:	d007      	beq.n	800b74e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b75e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b762:	d162      	bne.n	800b82a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b772:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d020      	beq.n	800b7c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b786:	4a6a      	ldr	r2, [pc, #424]	@ (800b930 <I2C_ITError+0x25c>)
 800b788:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fd fd33 	bl	80091fa <HAL_DMA_Abort_IT>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	f000 8089 	beq.w	800b8ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0201 	bic.w	r2, r2, #1
 800b7aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4798      	blx	r3
 800b7c2:	e074      	b.n	800b8ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c8:	4a59      	ldr	r2, [pc, #356]	@ (800b930 <I2C_ITError+0x25c>)
 800b7ca:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fd fd12 	bl	80091fa <HAL_DMA_Abort_IT>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d068      	beq.n	800b8ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7e6:	2b40      	cmp	r3, #64	@ 0x40
 800b7e8:	d10b      	bne.n	800b802 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	691a      	ldr	r2, [r3, #16]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 0201 	bic.w	r2, r2, #1
 800b810:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2220      	movs	r2, #32
 800b816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	e041      	b.n	800b8ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b60      	cmp	r3, #96	@ 0x60
 800b834:	d125      	bne.n	800b882 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2220      	movs	r2, #32
 800b83a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b84e:	2b40      	cmp	r3, #64	@ 0x40
 800b850:	d10b      	bne.n	800b86a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	691a      	ldr	r2, [r3, #16]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b85c:	b2d2      	uxtb	r2, r2
 800b85e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b864:	1c5a      	adds	r2, r3, #1
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0201 	bic.w	r2, r2, #1
 800b878:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7fe fed2 	bl	800a624 <HAL_I2C_AbortCpltCallback>
 800b880:	e015      	b.n	800b8ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b88c:	2b40      	cmp	r3, #64	@ 0x40
 800b88e:	d10b      	bne.n	800b8a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	691a      	ldr	r2, [r3, #16]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7fe feb1 	bl	800a610 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10e      	bne.n	800b8dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d109      	bne.n	800b8dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d104      	bne.n	800b8dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d007      	beq.n	800b8ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b8ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b04      	cmp	r3, #4
 800b8fe:	d113      	bne.n	800b928 <I2C_ITError+0x254>
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b28      	cmp	r3, #40	@ 0x28
 800b904:	d110      	bne.n	800b928 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a0a      	ldr	r2, [pc, #40]	@ (800b934 <I2C_ITError+0x260>)
 800b90a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7fe fe56 	bl	800a5d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b928:	bf00      	nop
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	0800bbd9 	.word	0x0800bbd9
 800b934:	ffff0000 	.word	0xffff0000

0800b938 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af02      	add	r7, sp, #8
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	607a      	str	r2, [r7, #4]
 800b942:	603b      	str	r3, [r7, #0]
 800b944:	460b      	mov	r3, r1
 800b946:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	2b08      	cmp	r3, #8
 800b952:	d006      	beq.n	800b962 <I2C_MasterRequestWrite+0x2a>
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d003      	beq.n	800b962 <I2C_MasterRequestWrite+0x2a>
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b960:	d108      	bne.n	800b974 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	e00b      	b.n	800b98c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b978:	2b12      	cmp	r3, #18
 800b97a:	d107      	bne.n	800b98c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b98a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f9c5 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00d      	beq.n	800b9c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9b2:	d103      	bne.n	800b9bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e035      	b.n	800ba2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9c8:	d108      	bne.n	800b9dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b9ca:	897b      	ldrh	r3, [r7, #10]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b9d8:	611a      	str	r2, [r3, #16]
 800b9da:	e01b      	b.n	800ba14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b9dc:	897b      	ldrh	r3, [r7, #10]
 800b9de:	11db      	asrs	r3, r3, #7
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0306 	and.w	r3, r3, #6
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f063 030f 	orn	r3, r3, #15
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	490e      	ldr	r1, [pc, #56]	@ (800ba34 <I2C_MasterRequestWrite+0xfc>)
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 fa0e 	bl	800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e010      	b.n	800ba2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ba0a:	897b      	ldrh	r3, [r7, #10]
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	4907      	ldr	r1, [pc, #28]	@ (800ba38 <I2C_MasterRequestWrite+0x100>)
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f000 f9fe 	bl	800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e000      	b.n	800ba2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	00010008 	.word	0x00010008
 800ba38:	00010002 	.word	0x00010002

0800ba3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af02      	add	r7, sp, #8
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	607a      	str	r2, [r7, #4]
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b08      	cmp	r3, #8
 800ba66:	d006      	beq.n	800ba76 <I2C_MasterRequestRead+0x3a>
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d003      	beq.n	800ba76 <I2C_MasterRequestRead+0x3a>
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ba74:	d108      	bne.n	800ba88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba84:	601a      	str	r2, [r3, #0]
 800ba86:	e00b      	b.n	800baa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba8c:	2b11      	cmp	r3, #17
 800ba8e:	d107      	bne.n	800baa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 f93b 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00d      	beq.n	800bad4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bac6:	d103      	bne.n	800bad0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bace:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e079      	b.n	800bbc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800badc:	d108      	bne.n	800baf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bade:	897b      	ldrh	r3, [r7, #10]
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f043 0301 	orr.w	r3, r3, #1
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	611a      	str	r2, [r3, #16]
 800baee:	e05f      	b.n	800bbb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800baf0:	897b      	ldrh	r3, [r7, #10]
 800baf2:	11db      	asrs	r3, r3, #7
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f003 0306 	and.w	r3, r3, #6
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f063 030f 	orn	r3, r3, #15
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4930      	ldr	r1, [pc, #192]	@ (800bbd0 <I2C_MasterRequestRead+0x194>)
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 f984 	bl	800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e054      	b.n	800bbc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bb1e:	897b      	ldrh	r3, [r7, #10]
 800bb20:	b2da      	uxtb	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	4929      	ldr	r1, [pc, #164]	@ (800bbd4 <I2C_MasterRequestRead+0x198>)
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 f974 	bl	800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e044      	b.n	800bbc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb3e:	2300      	movs	r3, #0
 800bb40:	613b      	str	r3, [r7, #16]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	695b      	ldr	r3, [r3, #20]
 800bb48:	613b      	str	r3, [r7, #16]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	613b      	str	r3, [r7, #16]
 800bb52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 f8d9 	bl	800bd28 <I2C_WaitOnFlagUntilTimeout>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00d      	beq.n	800bb98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb8a:	d103      	bne.n	800bb94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb92:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e017      	b.n	800bbc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bb98:	897b      	ldrh	r3, [r7, #10]
 800bb9a:	11db      	asrs	r3, r3, #7
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	f003 0306 	and.w	r3, r3, #6
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f063 030e 	orn	r3, r3, #14
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	4907      	ldr	r1, [pc, #28]	@ (800bbd4 <I2C_MasterRequestRead+0x198>)
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 f930 	bl	800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e000      	b.n	800bbc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bbc6:	2300      	movs	r3, #0
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	00010008 	.word	0x00010008
 800bbd4:	00010002 	.word	0x00010002

0800bbd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bbf2:	4b4b      	ldr	r3, [pc, #300]	@ (800bd20 <I2C_DMAAbort+0x148>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	08db      	lsrs	r3, r3, #3
 800bbf8:	4a4a      	ldr	r2, [pc, #296]	@ (800bd24 <I2C_DMAAbort+0x14c>)
 800bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfe:	0a1a      	lsrs	r2, r3, #8
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	00da      	lsls	r2, r3, #3
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc16:	f043 0220 	orr.w	r2, r3, #32
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800bc1e:	e00a      	b.n	800bc36 <I2C_DMAAbort+0x5e>
    }
    count--;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc34:	d0ea      	beq.n	800bc0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d003      	beq.n	800bc46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc42:	2200      	movs	r2, #0
 800bc44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d003      	beq.n	800bc56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc52:	2200      	movs	r2, #0
 800bc54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc78:	2200      	movs	r2, #0
 800bc7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d003      	beq.n	800bc8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc88:	2200      	movs	r2, #0
 800bc8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0201 	bic.w	r2, r2, #1
 800bc9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b60      	cmp	r3, #96	@ 0x60
 800bca6:	d10e      	bne.n	800bcc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bcbe:	6978      	ldr	r0, [r7, #20]
 800bcc0:	f7fe fcb0 	bl	800a624 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bcc4:	e027      	b.n	800bd16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bcc6:	7cfb      	ldrb	r3, [r7, #19]
 800bcc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bccc:	2b28      	cmp	r3, #40	@ 0x28
 800bcce:	d117      	bne.n	800bd00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f042 0201 	orr.w	r2, r2, #1
 800bcde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bcee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2228      	movs	r2, #40	@ 0x28
 800bcfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bcfe:	e007      	b.n	800bd10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2220      	movs	r2, #32
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800bd10:	6978      	ldr	r0, [r7, #20]
 800bd12:	f7fe fc7d 	bl	800a610 <HAL_I2C_ErrorCallback>
}
 800bd16:	bf00      	nop
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	20000554 	.word	0x20000554
 800bd24:	14f8b589 	.word	0x14f8b589

0800bd28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	4613      	mov	r3, r2
 800bd36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd38:	e048      	b.n	800bdcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd40:	d044      	beq.n	800bdcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd42:	f7fd f8a9 	bl	8008e98 <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d302      	bcc.n	800bd58 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d139      	bne.n	800bdcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	0c1b      	lsrs	r3, r3, #16
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d10d      	bne.n	800bd7e <I2C_WaitOnFlagUntilTimeout+0x56>
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	43da      	mvns	r2, r3
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bf0c      	ite	eq
 800bd74:	2301      	moveq	r3, #1
 800bd76:	2300      	movne	r3, #0
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	e00c      	b.n	800bd98 <I2C_WaitOnFlagUntilTimeout+0x70>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	43da      	mvns	r2, r3
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	4013      	ands	r3, r2
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	bf0c      	ite	eq
 800bd90:	2301      	moveq	r3, #1
 800bd92:	2300      	movne	r3, #0
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	461a      	mov	r2, r3
 800bd98:	79fb      	ldrb	r3, [r7, #7]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d116      	bne.n	800bdcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2220      	movs	r2, #32
 800bda8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb8:	f043 0220 	orr.w	r2, r3, #32
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e023      	b.n	800be14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	0c1b      	lsrs	r3, r3, #16
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d10d      	bne.n	800bdf2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	43da      	mvns	r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	4013      	ands	r3, r2
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	bf0c      	ite	eq
 800bde8:	2301      	moveq	r3, #1
 800bdea:	2300      	movne	r3, #0
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	e00c      	b.n	800be0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	43da      	mvns	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	bf0c      	ite	eq
 800be04:	2301      	moveq	r3, #1
 800be06:	2300      	movne	r3, #0
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	461a      	mov	r2, r3
 800be0c:	79fb      	ldrb	r3, [r7, #7]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d093      	beq.n	800bd3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}

0800be1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be2a:	e071      	b.n	800bf10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be3a:	d123      	bne.n	800be84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800be54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2220      	movs	r2, #32
 800be60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be70:	f043 0204 	orr.w	r2, r3, #4
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e067      	b.n	800bf54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be8a:	d041      	beq.n	800bf10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be8c:	f7fd f804 	bl	8008e98 <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d302      	bcc.n	800bea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d136      	bne.n	800bf10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	0c1b      	lsrs	r3, r3, #16
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d10c      	bne.n	800bec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	43da      	mvns	r2, r3
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	4013      	ands	r3, r2
 800beb8:	b29b      	uxth	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	bf14      	ite	ne
 800bebe:	2301      	movne	r3, #1
 800bec0:	2300      	moveq	r3, #0
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	e00b      	b.n	800bede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	43da      	mvns	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	4013      	ands	r3, r2
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	bf14      	ite	ne
 800bed8:	2301      	movne	r3, #1
 800beda:	2300      	moveq	r3, #0
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d016      	beq.n	800bf10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2220      	movs	r2, #32
 800beec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800befc:	f043 0220 	orr.w	r2, r3, #32
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e021      	b.n	800bf54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	0c1b      	lsrs	r3, r3, #16
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d10c      	bne.n	800bf34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	43da      	mvns	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	4013      	ands	r3, r2
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bf14      	ite	ne
 800bf2c:	2301      	movne	r3, #1
 800bf2e:	2300      	moveq	r3, #0
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	e00b      	b.n	800bf4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	43da      	mvns	r2, r3
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	4013      	ands	r3, r2
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	bf14      	ite	ne
 800bf46:	2301      	movne	r3, #1
 800bf48:	2300      	moveq	r3, #0
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f47f af6d 	bne.w	800be2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf68:	e034      	b.n	800bfd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f915 	bl	800c19a <I2C_IsAcknowledgeFailed>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d001      	beq.n	800bf7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e034      	b.n	800bfe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf80:	d028      	beq.n	800bfd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf82:	f7fc ff89 	bl	8008e98 <HAL_GetTick>
 800bf86:	4602      	mov	r2, r0
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d302      	bcc.n	800bf98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d11d      	bne.n	800bfd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfa2:	2b80      	cmp	r3, #128	@ 0x80
 800bfa4:	d016      	beq.n	800bfd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfc0:	f043 0220 	orr.w	r2, r3, #32
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e007      	b.n	800bfe4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfde:	2b80      	cmp	r3, #128	@ 0x80
 800bfe0:	d1c3      	bne.n	800bf6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bff8:	e034      	b.n	800c064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 f8cd 	bl	800c19a <I2C_IsAcknowledgeFailed>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d001      	beq.n	800c00a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e034      	b.n	800c074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c010:	d028      	beq.n	800c064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c012:	f7fc ff41 	bl	8008e98 <HAL_GetTick>
 800c016:	4602      	mov	r2, r0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d302      	bcc.n	800c028 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d11d      	bne.n	800c064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	f003 0304 	and.w	r3, r3, #4
 800c032:	2b04      	cmp	r3, #4
 800c034:	d016      	beq.n	800c064 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2200      	movs	r2, #0
 800c03a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2220      	movs	r2, #32
 800c040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c050:	f043 0220 	orr.w	r2, r3, #32
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e007      	b.n	800c074 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	f003 0304 	and.w	r3, r3, #4
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d1c3      	bne.n	800bffa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c088:	4b13      	ldr	r3, [pc, #76]	@ (800c0d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	08db      	lsrs	r3, r3, #3
 800c08e:	4a13      	ldr	r2, [pc, #76]	@ (800c0dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c090:	fba2 2303 	umull	r2, r3, r2, r3
 800c094:	0a1a      	lsrs	r2, r3, #8
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d107      	bne.n	800c0ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ae:	f043 0220 	orr.w	r2, r3, #32
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e008      	b.n	800c0cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0c8:	d0e9      	beq.n	800c09e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr
 800c0d8:	20000554 	.word	0x20000554
 800c0dc:	14f8b589 	.word	0x14f8b589

0800c0e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0ec:	e049      	b.n	800c182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	f003 0310 	and.w	r3, r3, #16
 800c0f8:	2b10      	cmp	r3, #16
 800c0fa:	d119      	bne.n	800c130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f06f 0210 	mvn.w	r2, #16
 800c104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e030      	b.n	800c192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c130:	f7fc feb2 	bl	8008e98 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d302      	bcc.n	800c146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11d      	bne.n	800c182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c150:	2b40      	cmp	r3, #64	@ 0x40
 800c152:	d016      	beq.n	800c182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2220      	movs	r2, #32
 800c15e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2200      	movs	r2, #0
 800c166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16e:	f043 0220 	orr.w	r2, r3, #32
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e007      	b.n	800c192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c18c:	2b40      	cmp	r3, #64	@ 0x40
 800c18e:	d1ae      	bne.n	800c0ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1b0:	d11b      	bne.n	800c1ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2220      	movs	r2, #32
 800c1c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d6:	f043 0204 	orr.w	r2, r3, #4
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e000      	b.n	800c1ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c204:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c208:	d103      	bne.n	800c212 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c210:	e007      	b.n	800c222 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c216:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c21a:	d102      	bne.n	800c222 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2208      	movs	r2, #8
 800c220:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c222:	bf00      	nop
 800c224:	370c      	adds	r7, #12
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
	...

0800c230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e267      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d075      	beq.n	800c33a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c24e:	4b88      	ldr	r3, [pc, #544]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 030c 	and.w	r3, r3, #12
 800c256:	2b04      	cmp	r3, #4
 800c258:	d00c      	beq.n	800c274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c25a:	4b85      	ldr	r3, [pc, #532]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c262:	2b08      	cmp	r3, #8
 800c264:	d112      	bne.n	800c28c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c266:	4b82      	ldr	r3, [pc, #520]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c26e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c272:	d10b      	bne.n	800c28c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c274:	4b7e      	ldr	r3, [pc, #504]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d05b      	beq.n	800c338 <HAL_RCC_OscConfig+0x108>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d157      	bne.n	800c338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	e242      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c294:	d106      	bne.n	800c2a4 <HAL_RCC_OscConfig+0x74>
 800c296:	4b76      	ldr	r3, [pc, #472]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a75      	ldr	r2, [pc, #468]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c29c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2a0:	6013      	str	r3, [r2, #0]
 800c2a2:	e01d      	b.n	800c2e0 <HAL_RCC_OscConfig+0xb0>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c2ac:	d10c      	bne.n	800c2c8 <HAL_RCC_OscConfig+0x98>
 800c2ae:	4b70      	ldr	r3, [pc, #448]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a6f      	ldr	r2, [pc, #444]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	4b6d      	ldr	r3, [pc, #436]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a6c      	ldr	r2, [pc, #432]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	e00b      	b.n	800c2e0 <HAL_RCC_OscConfig+0xb0>
 800c2c8:	4b69      	ldr	r3, [pc, #420]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a68      	ldr	r2, [pc, #416]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	4b66      	ldr	r3, [pc, #408]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a65      	ldr	r2, [pc, #404]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c2da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c2de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d013      	beq.n	800c310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2e8:	f7fc fdd6 	bl	8008e98 <HAL_GetTick>
 800c2ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2ee:	e008      	b.n	800c302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2f0:	f7fc fdd2 	bl	8008e98 <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b64      	cmp	r3, #100	@ 0x64
 800c2fc:	d901      	bls.n	800c302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e207      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c302:	4b5b      	ldr	r3, [pc, #364]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0f0      	beq.n	800c2f0 <HAL_RCC_OscConfig+0xc0>
 800c30e:	e014      	b.n	800c33a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c310:	f7fc fdc2 	bl	8008e98 <HAL_GetTick>
 800c314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c316:	e008      	b.n	800c32a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c318:	f7fc fdbe 	bl	8008e98 <HAL_GetTick>
 800c31c:	4602      	mov	r2, r0
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	2b64      	cmp	r3, #100	@ 0x64
 800c324:	d901      	bls.n	800c32a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c326:	2303      	movs	r3, #3
 800c328:	e1f3      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c32a:	4b51      	ldr	r3, [pc, #324]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1f0      	bne.n	800c318 <HAL_RCC_OscConfig+0xe8>
 800c336:	e000      	b.n	800c33a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0302 	and.w	r3, r3, #2
 800c342:	2b00      	cmp	r3, #0
 800c344:	d063      	beq.n	800c40e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c346:	4b4a      	ldr	r3, [pc, #296]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f003 030c 	and.w	r3, r3, #12
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00b      	beq.n	800c36a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c352:	4b47      	ldr	r3, [pc, #284]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c35a:	2b08      	cmp	r3, #8
 800c35c:	d11c      	bne.n	800c398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c35e:	4b44      	ldr	r3, [pc, #272]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d116      	bne.n	800c398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c36a:	4b41      	ldr	r3, [pc, #260]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 0302 	and.w	r3, r3, #2
 800c372:	2b00      	cmp	r3, #0
 800c374:	d005      	beq.n	800c382 <HAL_RCC_OscConfig+0x152>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d001      	beq.n	800c382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e1c7      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c382:	4b3b      	ldr	r3, [pc, #236]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	00db      	lsls	r3, r3, #3
 800c390:	4937      	ldr	r1, [pc, #220]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c392:	4313      	orrs	r3, r2
 800c394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c396:	e03a      	b.n	800c40e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d020      	beq.n	800c3e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3a0:	4b34      	ldr	r3, [pc, #208]	@ (800c474 <HAL_RCC_OscConfig+0x244>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a6:	f7fc fd77 	bl	8008e98 <HAL_GetTick>
 800c3aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3ac:	e008      	b.n	800c3c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3ae:	f7fc fd73 	bl	8008e98 <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d901      	bls.n	800c3c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e1a8      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0302 	and.w	r3, r3, #2
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0f0      	beq.n	800c3ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3cc:	4b28      	ldr	r3, [pc, #160]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	4925      	ldr	r1, [pc, #148]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	600b      	str	r3, [r1, #0]
 800c3e0:	e015      	b.n	800c40e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3e2:	4b24      	ldr	r3, [pc, #144]	@ (800c474 <HAL_RCC_OscConfig+0x244>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3e8:	f7fc fd56 	bl	8008e98 <HAL_GetTick>
 800c3ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3ee:	e008      	b.n	800c402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3f0:	f7fc fd52 	bl	8008e98 <HAL_GetTick>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	2b02      	cmp	r3, #2
 800c3fc:	d901      	bls.n	800c402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e187      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c402:	4b1b      	ldr	r3, [pc, #108]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 0302 	and.w	r3, r3, #2
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1f0      	bne.n	800c3f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 0308 	and.w	r3, r3, #8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d036      	beq.n	800c488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d016      	beq.n	800c450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c422:	4b15      	ldr	r3, [pc, #84]	@ (800c478 <HAL_RCC_OscConfig+0x248>)
 800c424:	2201      	movs	r2, #1
 800c426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c428:	f7fc fd36 	bl	8008e98 <HAL_GetTick>
 800c42c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c42e:	e008      	b.n	800c442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c430:	f7fc fd32 	bl	8008e98 <HAL_GetTick>
 800c434:	4602      	mov	r2, r0
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d901      	bls.n	800c442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c43e:	2303      	movs	r3, #3
 800c440:	e167      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c442:	4b0b      	ldr	r3, [pc, #44]	@ (800c470 <HAL_RCC_OscConfig+0x240>)
 800c444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d0f0      	beq.n	800c430 <HAL_RCC_OscConfig+0x200>
 800c44e:	e01b      	b.n	800c488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c450:	4b09      	ldr	r3, [pc, #36]	@ (800c478 <HAL_RCC_OscConfig+0x248>)
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c456:	f7fc fd1f 	bl	8008e98 <HAL_GetTick>
 800c45a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c45c:	e00e      	b.n	800c47c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c45e:	f7fc fd1b 	bl	8008e98 <HAL_GetTick>
 800c462:	4602      	mov	r2, r0
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d907      	bls.n	800c47c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e150      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
 800c470:	40023800 	.word	0x40023800
 800c474:	42470000 	.word	0x42470000
 800c478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c47c:	4b88      	ldr	r3, [pc, #544]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c47e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c480:	f003 0302 	and.w	r3, r3, #2
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1ea      	bne.n	800c45e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 8097 	beq.w	800c5c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c496:	2300      	movs	r3, #0
 800c498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c49a:	4b81      	ldr	r3, [pc, #516]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c49c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10f      	bne.n	800c4c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60bb      	str	r3, [r7, #8]
 800c4aa:	4b7d      	ldr	r3, [pc, #500]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ae:	4a7c      	ldr	r2, [pc, #496]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c4b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4b4:	6413      	str	r3, [r2, #64]	@ 0x40
 800c4b6:	4b7a      	ldr	r3, [pc, #488]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4be:	60bb      	str	r3, [r7, #8]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4c6:	4b77      	ldr	r3, [pc, #476]	@ (800c6a4 <HAL_RCC_OscConfig+0x474>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d118      	bne.n	800c504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c4d2:	4b74      	ldr	r3, [pc, #464]	@ (800c6a4 <HAL_RCC_OscConfig+0x474>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a73      	ldr	r2, [pc, #460]	@ (800c6a4 <HAL_RCC_OscConfig+0x474>)
 800c4d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4de:	f7fc fcdb 	bl	8008e98 <HAL_GetTick>
 800c4e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4e4:	e008      	b.n	800c4f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4e6:	f7fc fcd7 	bl	8008e98 <HAL_GetTick>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d901      	bls.n	800c4f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e10c      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4f8:	4b6a      	ldr	r3, [pc, #424]	@ (800c6a4 <HAL_RCC_OscConfig+0x474>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c500:	2b00      	cmp	r3, #0
 800c502:	d0f0      	beq.n	800c4e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d106      	bne.n	800c51a <HAL_RCC_OscConfig+0x2ea>
 800c50c:	4b64      	ldr	r3, [pc, #400]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c50e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c510:	4a63      	ldr	r2, [pc, #396]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c512:	f043 0301 	orr.w	r3, r3, #1
 800c516:	6713      	str	r3, [r2, #112]	@ 0x70
 800c518:	e01c      	b.n	800c554 <HAL_RCC_OscConfig+0x324>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	2b05      	cmp	r3, #5
 800c520:	d10c      	bne.n	800c53c <HAL_RCC_OscConfig+0x30c>
 800c522:	4b5f      	ldr	r3, [pc, #380]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c526:	4a5e      	ldr	r2, [pc, #376]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c528:	f043 0304 	orr.w	r3, r3, #4
 800c52c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c52e:	4b5c      	ldr	r3, [pc, #368]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c532:	4a5b      	ldr	r2, [pc, #364]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c534:	f043 0301 	orr.w	r3, r3, #1
 800c538:	6713      	str	r3, [r2, #112]	@ 0x70
 800c53a:	e00b      	b.n	800c554 <HAL_RCC_OscConfig+0x324>
 800c53c:	4b58      	ldr	r3, [pc, #352]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c53e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c540:	4a57      	ldr	r2, [pc, #348]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c542:	f023 0301 	bic.w	r3, r3, #1
 800c546:	6713      	str	r3, [r2, #112]	@ 0x70
 800c548:	4b55      	ldr	r3, [pc, #340]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c54a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c54c:	4a54      	ldr	r2, [pc, #336]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c54e:	f023 0304 	bic.w	r3, r3, #4
 800c552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d015      	beq.n	800c588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c55c:	f7fc fc9c 	bl	8008e98 <HAL_GetTick>
 800c560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c562:	e00a      	b.n	800c57a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c564:	f7fc fc98 	bl	8008e98 <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c572:	4293      	cmp	r3, r2
 800c574:	d901      	bls.n	800c57a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e0cb      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c57a:	4b49      	ldr	r3, [pc, #292]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c57c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0ee      	beq.n	800c564 <HAL_RCC_OscConfig+0x334>
 800c586:	e014      	b.n	800c5b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c588:	f7fc fc86 	bl	8008e98 <HAL_GetTick>
 800c58c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c58e:	e00a      	b.n	800c5a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c590:	f7fc fc82 	bl	8008e98 <HAL_GetTick>
 800c594:	4602      	mov	r2, r0
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d901      	bls.n	800c5a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e0b5      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c5a6:	4b3e      	ldr	r3, [pc, #248]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1ee      	bne.n	800c590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c5b2:	7dfb      	ldrb	r3, [r7, #23]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d105      	bne.n	800c5c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5b8:	4b39      	ldr	r3, [pc, #228]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5bc:	4a38      	ldr	r2, [pc, #224]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c5be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	699b      	ldr	r3, [r3, #24]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 80a1 	beq.w	800c710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c5ce:	4b34      	ldr	r3, [pc, #208]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c5d0:	689b      	ldr	r3, [r3, #8]
 800c5d2:	f003 030c 	and.w	r3, r3, #12
 800c5d6:	2b08      	cmp	r3, #8
 800c5d8:	d05c      	beq.n	800c694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d141      	bne.n	800c666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5e2:	4b31      	ldr	r3, [pc, #196]	@ (800c6a8 <HAL_RCC_OscConfig+0x478>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5e8:	f7fc fc56 	bl	8008e98 <HAL_GetTick>
 800c5ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5ee:	e008      	b.n	800c602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c5f0:	f7fc fc52 	bl	8008e98 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d901      	bls.n	800c602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e087      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c602:	4b27      	ldr	r3, [pc, #156]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1f0      	bne.n	800c5f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69da      	ldr	r2, [r3, #28]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a1b      	ldr	r3, [r3, #32]
 800c616:	431a      	orrs	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c61c:	019b      	lsls	r3, r3, #6
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c624:	085b      	lsrs	r3, r3, #1
 800c626:	3b01      	subs	r3, #1
 800c628:	041b      	lsls	r3, r3, #16
 800c62a:	431a      	orrs	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c630:	061b      	lsls	r3, r3, #24
 800c632:	491b      	ldr	r1, [pc, #108]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c634:	4313      	orrs	r3, r2
 800c636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c638:	4b1b      	ldr	r3, [pc, #108]	@ (800c6a8 <HAL_RCC_OscConfig+0x478>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c63e:	f7fc fc2b 	bl	8008e98 <HAL_GetTick>
 800c642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c644:	e008      	b.n	800c658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c646:	f7fc fc27 	bl	8008e98 <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	2b02      	cmp	r3, #2
 800c652:	d901      	bls.n	800c658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e05c      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c658:	4b11      	ldr	r3, [pc, #68]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d0f0      	beq.n	800c646 <HAL_RCC_OscConfig+0x416>
 800c664:	e054      	b.n	800c710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c666:	4b10      	ldr	r3, [pc, #64]	@ (800c6a8 <HAL_RCC_OscConfig+0x478>)
 800c668:	2200      	movs	r2, #0
 800c66a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c66c:	f7fc fc14 	bl	8008e98 <HAL_GetTick>
 800c670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c672:	e008      	b.n	800c686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c674:	f7fc fc10 	bl	8008e98 <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d901      	bls.n	800c686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e045      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c686:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <HAL_RCC_OscConfig+0x470>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1f0      	bne.n	800c674 <HAL_RCC_OscConfig+0x444>
 800c692:	e03d      	b.n	800c710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d107      	bne.n	800c6ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e038      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
 800c6a0:	40023800 	.word	0x40023800
 800c6a4:	40007000 	.word	0x40007000
 800c6a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800c71c <HAL_RCC_OscConfig+0x4ec>)
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d028      	beq.n	800c70c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d121      	bne.n	800c70c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d11a      	bne.n	800c70c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c6dc:	4013      	ands	r3, r2
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c6e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d111      	bne.n	800c70c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f2:	085b      	lsrs	r3, r3, #1
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d107      	bne.n	800c70c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c708:	429a      	cmp	r2, r3
 800c70a:	d001      	beq.n	800c710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c70c:	2301      	movs	r3, #1
 800c70e:	e000      	b.n	800c712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	40023800 	.word	0x40023800

0800c720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e0cc      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c734:	4b68      	ldr	r3, [pc, #416]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1b8>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d90c      	bls.n	800c75c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c742:	4b65      	ldr	r3, [pc, #404]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1b8>)
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	b2d2      	uxtb	r2, r2
 800c748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c74a:	4b63      	ldr	r3, [pc, #396]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1b8>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f003 0307 	and.w	r3, r3, #7
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	429a      	cmp	r2, r3
 800c756:	d001      	beq.n	800c75c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e0b8      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f003 0302 	and.w	r3, r3, #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d020      	beq.n	800c7aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c774:	4b59      	ldr	r3, [pc, #356]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	4a58      	ldr	r2, [pc, #352]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c77a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c77e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0308 	and.w	r3, r3, #8
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c78c:	4b53      	ldr	r3, [pc, #332]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	4a52      	ldr	r2, [pc, #328]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c798:	4b50      	ldr	r3, [pc, #320]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	494d      	ldr	r1, [pc, #308]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f003 0301 	and.w	r3, r3, #1
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d044      	beq.n	800c840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d107      	bne.n	800c7ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7be:	4b47      	ldr	r3, [pc, #284]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d119      	bne.n	800c7fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e07f      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d003      	beq.n	800c7de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7de:	4b3f      	ldr	r3, [pc, #252]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d109      	bne.n	800c7fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e06f      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7ee:	4b3b      	ldr	r3, [pc, #236]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 0302 	and.w	r3, r3, #2
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e067      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c7fe:	4b37      	ldr	r3, [pc, #220]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	f023 0203 	bic.w	r2, r3, #3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	4934      	ldr	r1, [pc, #208]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c810:	f7fc fb42 	bl	8008e98 <HAL_GetTick>
 800c814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c816:	e00a      	b.n	800c82e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c818:	f7fc fb3e 	bl	8008e98 <HAL_GetTick>
 800c81c:	4602      	mov	r2, r0
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c826:	4293      	cmp	r3, r2
 800c828:	d901      	bls.n	800c82e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c82a:	2303      	movs	r3, #3
 800c82c:	e04f      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c82e:	4b2b      	ldr	r3, [pc, #172]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	f003 020c 	and.w	r2, r3, #12
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d1eb      	bne.n	800c818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c840:	4b25      	ldr	r3, [pc, #148]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1b8>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 0307 	and.w	r3, r3, #7
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d20c      	bcs.n	800c868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c84e:	4b22      	ldr	r3, [pc, #136]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1b8>)
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c856:	4b20      	ldr	r3, [pc, #128]	@ (800c8d8 <HAL_RCC_ClockConfig+0x1b8>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0307 	and.w	r3, r3, #7
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d001      	beq.n	800c868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e032      	b.n	800c8ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b00      	cmp	r3, #0
 800c872:	d008      	beq.n	800c886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c874:	4b19      	ldr	r3, [pc, #100]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	4916      	ldr	r1, [pc, #88]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c882:	4313      	orrs	r3, r2
 800c884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f003 0308 	and.w	r3, r3, #8
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d009      	beq.n	800c8a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c892:	4b12      	ldr	r3, [pc, #72]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	490e      	ldr	r1, [pc, #56]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c8a6:	f000 f821 	bl	800c8ec <HAL_RCC_GetSysClockFreq>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c8dc <HAL_RCC_ClockConfig+0x1bc>)
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	091b      	lsrs	r3, r3, #4
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	490a      	ldr	r1, [pc, #40]	@ (800c8e0 <HAL_RCC_ClockConfig+0x1c0>)
 800c8b8:	5ccb      	ldrb	r3, [r1, r3]
 800c8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c8be:	4a09      	ldr	r2, [pc, #36]	@ (800c8e4 <HAL_RCC_ClockConfig+0x1c4>)
 800c8c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c8c2:	4b09      	ldr	r3, [pc, #36]	@ (800c8e8 <HAL_RCC_ClockConfig+0x1c8>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fc faa2 	bl	8008e10 <HAL_InitTick>

  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	40023c00 	.word	0x40023c00
 800c8dc:	40023800 	.word	0x40023800
 800c8e0:	0800f7c8 	.word	0x0800f7c8
 800c8e4:	20000554 	.word	0x20000554
 800c8e8:	20000558 	.word	0x20000558

0800c8ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8f0:	b094      	sub	sp, #80	@ 0x50
 800c8f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800c900:	2300      	movs	r3, #0
 800c902:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c904:	4b79      	ldr	r3, [pc, #484]	@ (800caec <HAL_RCC_GetSysClockFreq+0x200>)
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f003 030c 	and.w	r3, r3, #12
 800c90c:	2b08      	cmp	r3, #8
 800c90e:	d00d      	beq.n	800c92c <HAL_RCC_GetSysClockFreq+0x40>
 800c910:	2b08      	cmp	r3, #8
 800c912:	f200 80e1 	bhi.w	800cad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d002      	beq.n	800c920 <HAL_RCC_GetSysClockFreq+0x34>
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d003      	beq.n	800c926 <HAL_RCC_GetSysClockFreq+0x3a>
 800c91e:	e0db      	b.n	800cad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c920:	4b73      	ldr	r3, [pc, #460]	@ (800caf0 <HAL_RCC_GetSysClockFreq+0x204>)
 800c922:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c924:	e0db      	b.n	800cade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c926:	4b73      	ldr	r3, [pc, #460]	@ (800caf4 <HAL_RCC_GetSysClockFreq+0x208>)
 800c928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c92a:	e0d8      	b.n	800cade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c92c:	4b6f      	ldr	r3, [pc, #444]	@ (800caec <HAL_RCC_GetSysClockFreq+0x200>)
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c934:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c936:	4b6d      	ldr	r3, [pc, #436]	@ (800caec <HAL_RCC_GetSysClockFreq+0x200>)
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d063      	beq.n	800ca0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c942:	4b6a      	ldr	r3, [pc, #424]	@ (800caec <HAL_RCC_GetSysClockFreq+0x200>)
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	099b      	lsrs	r3, r3, #6
 800c948:	2200      	movs	r2, #0
 800c94a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c94c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c954:	633b      	str	r3, [r7, #48]	@ 0x30
 800c956:	2300      	movs	r3, #0
 800c958:	637b      	str	r3, [r7, #52]	@ 0x34
 800c95a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f04f 0100 	mov.w	r1, #0
 800c96a:	0159      	lsls	r1, r3, #5
 800c96c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c970:	0150      	lsls	r0, r2, #5
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	4621      	mov	r1, r4
 800c978:	1a51      	subs	r1, r2, r1
 800c97a:	6139      	str	r1, [r7, #16]
 800c97c:	4629      	mov	r1, r5
 800c97e:	eb63 0301 	sbc.w	r3, r3, r1
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	f04f 0200 	mov.w	r2, #0
 800c988:	f04f 0300 	mov.w	r3, #0
 800c98c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c990:	4659      	mov	r1, fp
 800c992:	018b      	lsls	r3, r1, #6
 800c994:	4651      	mov	r1, sl
 800c996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c99a:	4651      	mov	r1, sl
 800c99c:	018a      	lsls	r2, r1, #6
 800c99e:	4651      	mov	r1, sl
 800c9a0:	ebb2 0801 	subs.w	r8, r2, r1
 800c9a4:	4659      	mov	r1, fp
 800c9a6:	eb63 0901 	sbc.w	r9, r3, r1
 800c9aa:	f04f 0200 	mov.w	r2, #0
 800c9ae:	f04f 0300 	mov.w	r3, #0
 800c9b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9be:	4690      	mov	r8, r2
 800c9c0:	4699      	mov	r9, r3
 800c9c2:	4623      	mov	r3, r4
 800c9c4:	eb18 0303 	adds.w	r3, r8, r3
 800c9c8:	60bb      	str	r3, [r7, #8]
 800c9ca:	462b      	mov	r3, r5
 800c9cc:	eb49 0303 	adc.w	r3, r9, r3
 800c9d0:	60fb      	str	r3, [r7, #12]
 800c9d2:	f04f 0200 	mov.w	r2, #0
 800c9d6:	f04f 0300 	mov.w	r3, #0
 800c9da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c9de:	4629      	mov	r1, r5
 800c9e0:	024b      	lsls	r3, r1, #9
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	024a      	lsls	r2, r1, #9
 800c9ec:	4610      	mov	r0, r2
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c9f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c9f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c9fc:	f7f3 fc40 	bl	8000280 <__aeabi_uldivmod>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4613      	mov	r3, r2
 800ca06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca08:	e058      	b.n	800cabc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca0a:	4b38      	ldr	r3, [pc, #224]	@ (800caec <HAL_RCC_GetSysClockFreq+0x200>)
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	099b      	lsrs	r3, r3, #6
 800ca10:	2200      	movs	r2, #0
 800ca12:	4618      	mov	r0, r3
 800ca14:	4611      	mov	r1, r2
 800ca16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ca1a:	623b      	str	r3, [r7, #32]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ca24:	4642      	mov	r2, r8
 800ca26:	464b      	mov	r3, r9
 800ca28:	f04f 0000 	mov.w	r0, #0
 800ca2c:	f04f 0100 	mov.w	r1, #0
 800ca30:	0159      	lsls	r1, r3, #5
 800ca32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca36:	0150      	lsls	r0, r2, #5
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4641      	mov	r1, r8
 800ca3e:	ebb2 0a01 	subs.w	sl, r2, r1
 800ca42:	4649      	mov	r1, r9
 800ca44:	eb63 0b01 	sbc.w	fp, r3, r1
 800ca48:	f04f 0200 	mov.w	r2, #0
 800ca4c:	f04f 0300 	mov.w	r3, #0
 800ca50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ca54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ca58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ca5c:	ebb2 040a 	subs.w	r4, r2, sl
 800ca60:	eb63 050b 	sbc.w	r5, r3, fp
 800ca64:	f04f 0200 	mov.w	r2, #0
 800ca68:	f04f 0300 	mov.w	r3, #0
 800ca6c:	00eb      	lsls	r3, r5, #3
 800ca6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca72:	00e2      	lsls	r2, r4, #3
 800ca74:	4614      	mov	r4, r2
 800ca76:	461d      	mov	r5, r3
 800ca78:	4643      	mov	r3, r8
 800ca7a:	18e3      	adds	r3, r4, r3
 800ca7c:	603b      	str	r3, [r7, #0]
 800ca7e:	464b      	mov	r3, r9
 800ca80:	eb45 0303 	adc.w	r3, r5, r3
 800ca84:	607b      	str	r3, [r7, #4]
 800ca86:	f04f 0200 	mov.w	r2, #0
 800ca8a:	f04f 0300 	mov.w	r3, #0
 800ca8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ca92:	4629      	mov	r1, r5
 800ca94:	028b      	lsls	r3, r1, #10
 800ca96:	4621      	mov	r1, r4
 800ca98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	028a      	lsls	r2, r1, #10
 800caa0:	4610      	mov	r0, r2
 800caa2:	4619      	mov	r1, r3
 800caa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caa6:	2200      	movs	r2, #0
 800caa8:	61bb      	str	r3, [r7, #24]
 800caaa:	61fa      	str	r2, [r7, #28]
 800caac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cab0:	f7f3 fbe6 	bl	8000280 <__aeabi_uldivmod>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	4613      	mov	r3, r2
 800caba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800cabc:	4b0b      	ldr	r3, [pc, #44]	@ (800caec <HAL_RCC_GetSysClockFreq+0x200>)
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	0c1b      	lsrs	r3, r3, #16
 800cac2:	f003 0303 	and.w	r3, r3, #3
 800cac6:	3301      	adds	r3, #1
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800cacc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cad6:	e002      	b.n	800cade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cad8:	4b05      	ldr	r3, [pc, #20]	@ (800caf0 <HAL_RCC_GetSysClockFreq+0x204>)
 800cada:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cadc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3750      	adds	r7, #80	@ 0x50
 800cae4:	46bd      	mov	sp, r7
 800cae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800caea:	bf00      	nop
 800caec:	40023800 	.word	0x40023800
 800caf0:	00f42400 	.word	0x00f42400
 800caf4:	007a1200 	.word	0x007a1200

0800caf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cafc:	4b03      	ldr	r3, [pc, #12]	@ (800cb0c <HAL_RCC_GetHCLKFreq+0x14>)
 800cafe:	681b      	ldr	r3, [r3, #0]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	20000554 	.word	0x20000554

0800cb10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cb14:	f7ff fff0 	bl	800caf8 <HAL_RCC_GetHCLKFreq>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	4b05      	ldr	r3, [pc, #20]	@ (800cb30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	0a9b      	lsrs	r3, r3, #10
 800cb20:	f003 0307 	and.w	r3, r3, #7
 800cb24:	4903      	ldr	r1, [pc, #12]	@ (800cb34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb26:	5ccb      	ldrb	r3, [r1, r3]
 800cb28:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	40023800 	.word	0x40023800
 800cb34:	0800f7d8 	.word	0x0800f7d8

0800cb38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cb3c:	f7ff ffdc 	bl	800caf8 <HAL_RCC_GetHCLKFreq>
 800cb40:	4602      	mov	r2, r0
 800cb42:	4b05      	ldr	r3, [pc, #20]	@ (800cb58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	0b5b      	lsrs	r3, r3, #13
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	4903      	ldr	r1, [pc, #12]	@ (800cb5c <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb4e:	5ccb      	ldrb	r3, [r1, r3]
 800cb50:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	40023800 	.word	0x40023800
 800cb5c:	0800f7d8 	.word	0x0800f7d8

0800cb60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d101      	bne.n	800cb72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e041      	b.n	800cbf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7fb ff6a 	bl	8008a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2202      	movs	r2, #2
 800cb90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	4610      	mov	r0, r2
 800cba0:	f000 fa70 	bl	800d084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2201      	movs	r2, #1
 800cba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d001      	beq.n	800cc18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	e044      	b.n	800cca2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2202      	movs	r2, #2
 800cc1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68da      	ldr	r2, [r3, #12]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f042 0201 	orr.w	r2, r2, #1
 800cc2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a1e      	ldr	r2, [pc, #120]	@ (800ccb0 <HAL_TIM_Base_Start_IT+0xb0>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d018      	beq.n	800cc6c <HAL_TIM_Base_Start_IT+0x6c>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc42:	d013      	beq.n	800cc6c <HAL_TIM_Base_Start_IT+0x6c>
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a1a      	ldr	r2, [pc, #104]	@ (800ccb4 <HAL_TIM_Base_Start_IT+0xb4>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00e      	beq.n	800cc6c <HAL_TIM_Base_Start_IT+0x6c>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a19      	ldr	r2, [pc, #100]	@ (800ccb8 <HAL_TIM_Base_Start_IT+0xb8>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d009      	beq.n	800cc6c <HAL_TIM_Base_Start_IT+0x6c>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a17      	ldr	r2, [pc, #92]	@ (800ccbc <HAL_TIM_Base_Start_IT+0xbc>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d004      	beq.n	800cc6c <HAL_TIM_Base_Start_IT+0x6c>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a16      	ldr	r2, [pc, #88]	@ (800ccc0 <HAL_TIM_Base_Start_IT+0xc0>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d111      	bne.n	800cc90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b06      	cmp	r3, #6
 800cc7c:	d010      	beq.n	800cca0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f042 0201 	orr.w	r2, r2, #1
 800cc8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc8e:	e007      	b.n	800cca0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cca0:	2300      	movs	r3, #0
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	40010000 	.word	0x40010000
 800ccb4:	40000400 	.word	0x40000400
 800ccb8:	40000800 	.word	0x40000800
 800ccbc:	40000c00 	.word	0x40000c00
 800ccc0:	40014000 	.word	0x40014000

0800ccc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	f003 0302 	and.w	r3, r3, #2
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d020      	beq.n	800cd28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f003 0302 	and.w	r3, r3, #2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d01b      	beq.n	800cd28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f06f 0202 	mvn.w	r2, #2
 800ccf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	699b      	ldr	r3, [r3, #24]
 800cd06:	f003 0303 	and.w	r3, r3, #3
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f999 	bl	800d046 <HAL_TIM_IC_CaptureCallback>
 800cd14:	e005      	b.n	800cd22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f98b 	bl	800d032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f99c 	bl	800d05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	f003 0304 	and.w	r3, r3, #4
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d020      	beq.n	800cd74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f003 0304 	and.w	r3, r3, #4
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d01b      	beq.n	800cd74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f06f 0204 	mvn.w	r2, #4
 800cd44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d003      	beq.n	800cd62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f973 	bl	800d046 <HAL_TIM_IC_CaptureCallback>
 800cd60:	e005      	b.n	800cd6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f965 	bl	800d032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f976 	bl	800d05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	f003 0308 	and.w	r3, r3, #8
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d020      	beq.n	800cdc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f003 0308 	and.w	r3, r3, #8
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d01b      	beq.n	800cdc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f06f 0208 	mvn.w	r2, #8
 800cd90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2204      	movs	r2, #4
 800cd96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	f003 0303 	and.w	r3, r3, #3
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d003      	beq.n	800cdae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f94d 	bl	800d046 <HAL_TIM_IC_CaptureCallback>
 800cdac:	e005      	b.n	800cdba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f93f 	bl	800d032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 f950 	bl	800d05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	f003 0310 	and.w	r3, r3, #16
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d020      	beq.n	800ce0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f003 0310 	and.w	r3, r3, #16
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d01b      	beq.n	800ce0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f06f 0210 	mvn.w	r2, #16
 800cddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2208      	movs	r2, #8
 800cde2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	69db      	ldr	r3, [r3, #28]
 800cdea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 f927 	bl	800d046 <HAL_TIM_IC_CaptureCallback>
 800cdf8:	e005      	b.n	800ce06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f919 	bl	800d032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f92a 	bl	800d05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00c      	beq.n	800ce30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d007      	beq.n	800ce30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f06f 0201 	mvn.w	r2, #1
 800ce28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7f6 fd1a 	bl	8003864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00c      	beq.n	800ce54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d007      	beq.n	800ce54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ce4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fab0 	bl	800d3b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d007      	beq.n	800ce78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ce70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f8fb 	bl	800d06e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	f003 0320 	and.w	r3, r3, #32
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00c      	beq.n	800ce9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d007      	beq.n	800ce9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f06f 0220 	mvn.w	r2, #32
 800ce94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fa82 	bl	800d3a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce9c:	bf00      	nop
 800ce9e:	3710      	adds	r7, #16
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d101      	bne.n	800cec0 <HAL_TIM_ConfigClockSource+0x1c>
 800cebc:	2302      	movs	r3, #2
 800cebe:	e0b4      	b.n	800d02a <HAL_TIM_ConfigClockSource+0x186>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2202      	movs	r2, #2
 800cecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cef8:	d03e      	beq.n	800cf78 <HAL_TIM_ConfigClockSource+0xd4>
 800cefa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cefe:	f200 8087 	bhi.w	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf06:	f000 8086 	beq.w	800d016 <HAL_TIM_ConfigClockSource+0x172>
 800cf0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf0e:	d87f      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf10:	2b70      	cmp	r3, #112	@ 0x70
 800cf12:	d01a      	beq.n	800cf4a <HAL_TIM_ConfigClockSource+0xa6>
 800cf14:	2b70      	cmp	r3, #112	@ 0x70
 800cf16:	d87b      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf18:	2b60      	cmp	r3, #96	@ 0x60
 800cf1a:	d050      	beq.n	800cfbe <HAL_TIM_ConfigClockSource+0x11a>
 800cf1c:	2b60      	cmp	r3, #96	@ 0x60
 800cf1e:	d877      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf20:	2b50      	cmp	r3, #80	@ 0x50
 800cf22:	d03c      	beq.n	800cf9e <HAL_TIM_ConfigClockSource+0xfa>
 800cf24:	2b50      	cmp	r3, #80	@ 0x50
 800cf26:	d873      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf28:	2b40      	cmp	r3, #64	@ 0x40
 800cf2a:	d058      	beq.n	800cfde <HAL_TIM_ConfigClockSource+0x13a>
 800cf2c:	2b40      	cmp	r3, #64	@ 0x40
 800cf2e:	d86f      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf30:	2b30      	cmp	r3, #48	@ 0x30
 800cf32:	d064      	beq.n	800cffe <HAL_TIM_ConfigClockSource+0x15a>
 800cf34:	2b30      	cmp	r3, #48	@ 0x30
 800cf36:	d86b      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf38:	2b20      	cmp	r3, #32
 800cf3a:	d060      	beq.n	800cffe <HAL_TIM_ConfigClockSource+0x15a>
 800cf3c:	2b20      	cmp	r3, #32
 800cf3e:	d867      	bhi.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d05c      	beq.n	800cffe <HAL_TIM_ConfigClockSource+0x15a>
 800cf44:	2b10      	cmp	r3, #16
 800cf46:	d05a      	beq.n	800cffe <HAL_TIM_ConfigClockSource+0x15a>
 800cf48:	e062      	b.n	800d010 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf5a:	f000 f993 	bl	800d284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cf6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	609a      	str	r2, [r3, #8]
      break;
 800cf76:	e04f      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf88:	f000 f97c 	bl	800d284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	689a      	ldr	r2, [r3, #8]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cf9a:	609a      	str	r2, [r3, #8]
      break;
 800cf9c:	e03c      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfaa:	461a      	mov	r2, r3
 800cfac:	f000 f8f0 	bl	800d190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2150      	movs	r1, #80	@ 0x50
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 f949 	bl	800d24e <TIM_ITRx_SetConfig>
      break;
 800cfbc:	e02c      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f000 f90f 	bl	800d1ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2160      	movs	r1, #96	@ 0x60
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 f939 	bl	800d24e <TIM_ITRx_SetConfig>
      break;
 800cfdc:	e01c      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfea:	461a      	mov	r2, r3
 800cfec:	f000 f8d0 	bl	800d190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2140      	movs	r1, #64	@ 0x40
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 f929 	bl	800d24e <TIM_ITRx_SetConfig>
      break;
 800cffc:	e00c      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4619      	mov	r1, r3
 800d008:	4610      	mov	r0, r2
 800d00a:	f000 f920 	bl	800d24e <TIM_ITRx_SetConfig>
      break;
 800d00e:	e003      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]
      break;
 800d014:	e000      	b.n	800d018 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d028:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d03a:	bf00      	nop
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d046:	b480      	push	{r7}
 800d048:	b083      	sub	sp, #12
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d04e:	bf00      	nop
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d05a:	b480      	push	{r7}
 800d05c:	b083      	sub	sp, #12
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d062:	bf00      	nop
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d076:	bf00      	nop
 800d078:	370c      	adds	r7, #12
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
	...

0800d084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a37      	ldr	r2, [pc, #220]	@ (800d174 <TIM_Base_SetConfig+0xf0>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d00f      	beq.n	800d0bc <TIM_Base_SetConfig+0x38>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0a2:	d00b      	beq.n	800d0bc <TIM_Base_SetConfig+0x38>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a34      	ldr	r2, [pc, #208]	@ (800d178 <TIM_Base_SetConfig+0xf4>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d007      	beq.n	800d0bc <TIM_Base_SetConfig+0x38>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a33      	ldr	r2, [pc, #204]	@ (800d17c <TIM_Base_SetConfig+0xf8>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d003      	beq.n	800d0bc <TIM_Base_SetConfig+0x38>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a32      	ldr	r2, [pc, #200]	@ (800d180 <TIM_Base_SetConfig+0xfc>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d108      	bne.n	800d0ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	4313      	orrs	r3, r2
 800d0cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4a28      	ldr	r2, [pc, #160]	@ (800d174 <TIM_Base_SetConfig+0xf0>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d01b      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0dc:	d017      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a25      	ldr	r2, [pc, #148]	@ (800d178 <TIM_Base_SetConfig+0xf4>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d013      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a24      	ldr	r2, [pc, #144]	@ (800d17c <TIM_Base_SetConfig+0xf8>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00f      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a23      	ldr	r2, [pc, #140]	@ (800d180 <TIM_Base_SetConfig+0xfc>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d00b      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a22      	ldr	r2, [pc, #136]	@ (800d184 <TIM_Base_SetConfig+0x100>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d007      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a21      	ldr	r2, [pc, #132]	@ (800d188 <TIM_Base_SetConfig+0x104>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d003      	beq.n	800d10e <TIM_Base_SetConfig+0x8a>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a20      	ldr	r2, [pc, #128]	@ (800d18c <TIM_Base_SetConfig+0x108>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d108      	bne.n	800d120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	689a      	ldr	r2, [r3, #8]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	4a0c      	ldr	r2, [pc, #48]	@ (800d174 <TIM_Base_SetConfig+0xf0>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d103      	bne.n	800d14e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	691a      	ldr	r2, [r3, #16]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f043 0204 	orr.w	r2, r3, #4
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	601a      	str	r2, [r3, #0]
}
 800d166:	bf00      	nop
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	40010000 	.word	0x40010000
 800d178:	40000400 	.word	0x40000400
 800d17c:	40000800 	.word	0x40000800
 800d180:	40000c00 	.word	0x40000c00
 800d184:	40014000 	.word	0x40014000
 800d188:	40014400 	.word	0x40014400
 800d18c:	40014800 	.word	0x40014800

0800d190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6a1b      	ldr	r3, [r3, #32]
 800d1a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	f023 0201 	bic.w	r2, r3, #1
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d1ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	011b      	lsls	r3, r3, #4
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	f023 030a 	bic.w	r3, r3, #10
 800d1cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	621a      	str	r2, [r3, #32]
}
 800d1e2:	bf00      	nop
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b087      	sub	sp, #28
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	60f8      	str	r0, [r7, #12]
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6a1b      	ldr	r3, [r3, #32]
 800d1fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6a1b      	ldr	r3, [r3, #32]
 800d204:	f023 0210 	bic.w	r2, r3, #16
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	699b      	ldr	r3, [r3, #24]
 800d210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	031b      	lsls	r3, r3, #12
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	4313      	orrs	r3, r2
 800d222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d22a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	4313      	orrs	r3, r2
 800d234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	621a      	str	r2, [r3, #32]
}
 800d242:	bf00      	nop
 800d244:	371c      	adds	r7, #28
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d24e:	b480      	push	{r7}
 800d250:	b085      	sub	sp, #20
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	f043 0307 	orr.w	r3, r3, #7
 800d270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	609a      	str	r2, [r3, #8]
}
 800d278:	bf00      	nop
 800d27a:	3714      	adds	r7, #20
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d284:	b480      	push	{r7}
 800d286:	b087      	sub	sp, #28
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
 800d290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d29e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	021a      	lsls	r2, r3, #8
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	431a      	orrs	r2, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	697a      	ldr	r2, [r7, #20]
 800d2b6:	609a      	str	r2, [r3, #8]
}
 800d2b8:	bf00      	nop
 800d2ba:	371c      	adds	r7, #28
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d101      	bne.n	800d2dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d2d8:	2302      	movs	r3, #2
 800d2da:	e050      	b.n	800d37e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a1c      	ldr	r2, [pc, #112]	@ (800d38c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d018      	beq.n	800d352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d328:	d013      	beq.n	800d352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a18      	ldr	r2, [pc, #96]	@ (800d390 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d00e      	beq.n	800d352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a16      	ldr	r2, [pc, #88]	@ (800d394 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d009      	beq.n	800d352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a15      	ldr	r2, [pc, #84]	@ (800d398 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d004      	beq.n	800d352 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a13      	ldr	r2, [pc, #76]	@ (800d39c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d10c      	bne.n	800d36c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d358:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	4313      	orrs	r3, r2
 800d362:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	40010000 	.word	0x40010000
 800d390:	40000400 	.word	0x40000400
 800d394:	40000800 	.word	0x40000800
 800d398:	40000c00 	.word	0x40000c00
 800d39c:	40014000 	.word	0x40014000

0800d3a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d3a8:	bf00      	nop
 800d3aa:	370c      	adds	r7, #12
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d3bc:	bf00      	nop
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e042      	b.n	800d460 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d106      	bne.n	800d3f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7fb fb5c 	bl	8008aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2224      	movs	r2, #36	@ 0x24
 800d3f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68da      	ldr	r2, [r3, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d40a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 fd7f 	bl	800df10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	691a      	ldr	r2, [r3, #16]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	695a      	ldr	r2, [r3, #20]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	68da      	ldr	r2, [r3, #12]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2220      	movs	r2, #32
 800d44c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2220      	movs	r2, #32
 800d454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b08a      	sub	sp, #40	@ 0x28
 800d46c:	af02      	add	r7, sp, #8
 800d46e:	60f8      	str	r0, [r7, #12]
 800d470:	60b9      	str	r1, [r7, #8]
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	4613      	mov	r3, r2
 800d476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2b20      	cmp	r3, #32
 800d486:	d175      	bne.n	800d574 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d002      	beq.n	800d494 <HAL_UART_Transmit+0x2c>
 800d48e:	88fb      	ldrh	r3, [r7, #6]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	e06e      	b.n	800d576 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2221      	movs	r2, #33	@ 0x21
 800d4a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d4a6:	f7fb fcf7 	bl	8008e98 <HAL_GetTick>
 800d4aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	88fa      	ldrh	r2, [r7, #6]
 800d4b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	88fa      	ldrh	r2, [r7, #6]
 800d4b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4c0:	d108      	bne.n	800d4d4 <HAL_UART_Transmit+0x6c>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d104      	bne.n	800d4d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	61bb      	str	r3, [r7, #24]
 800d4d2:	e003      	b.n	800d4dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d4dc:	e02e      	b.n	800d53c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	2180      	movs	r1, #128	@ 0x80
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f000 fb1d 	bl	800db28 <UART_WaitOnFlagUntilTimeout>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2220      	movs	r2, #32
 800d4f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	e03a      	b.n	800d576 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10b      	bne.n	800d51e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	881b      	ldrh	r3, [r3, #0]
 800d50a:	461a      	mov	r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d514:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	3302      	adds	r3, #2
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	e007      	b.n	800d52e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	781a      	ldrb	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	3301      	adds	r3, #1
 800d52c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d532:	b29b      	uxth	r3, r3
 800d534:	3b01      	subs	r3, #1
 800d536:	b29a      	uxth	r2, r3
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d540:	b29b      	uxth	r3, r3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1cb      	bne.n	800d4de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	2200      	movs	r2, #0
 800d54e:	2140      	movs	r1, #64	@ 0x40
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f000 fae9 	bl	800db28 <UART_WaitOnFlagUntilTimeout>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d005      	beq.n	800d568 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2220      	movs	r2, #32
 800d560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800d564:	2303      	movs	r3, #3
 800d566:	e006      	b.n	800d576 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2220      	movs	r2, #32
 800d56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	e000      	b.n	800d576 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800d574:	2302      	movs	r3, #2
  }
}
 800d576:	4618      	mov	r0, r3
 800d578:	3720      	adds	r7, #32
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b0ba      	sub	sp, #232	@ 0xe8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5b6:	f003 030f 	and.w	r3, r3, #15
 800d5ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d5be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10f      	bne.n	800d5e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5ca:	f003 0320 	and.w	r3, r3, #32
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d009      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x66>
 800d5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5d6:	f003 0320 	and.w	r3, r3, #32
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fbd7 	bl	800dd92 <UART_Receive_IT>
      return;
 800d5e4:	e273      	b.n	800dace <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d5e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 80de 	beq.w	800d7ac <HAL_UART_IRQHandler+0x22c>
 800d5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d5f4:	f003 0301 	and.w	r3, r3, #1
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d106      	bne.n	800d60a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d600:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 80d1 	beq.w	800d7ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d60e:	f003 0301 	and.w	r3, r3, #1
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00b      	beq.n	800d62e <HAL_UART_IRQHandler+0xae>
 800d616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d61a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d005      	beq.n	800d62e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d626:	f043 0201 	orr.w	r2, r3, #1
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d62e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d632:	f003 0304 	and.w	r3, r3, #4
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00b      	beq.n	800d652 <HAL_UART_IRQHandler+0xd2>
 800d63a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d005      	beq.n	800d652 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d64a:	f043 0202 	orr.w	r2, r3, #2
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d656:	f003 0302 	and.w	r3, r3, #2
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00b      	beq.n	800d676 <HAL_UART_IRQHandler+0xf6>
 800d65e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d662:	f003 0301 	and.w	r3, r3, #1
 800d666:	2b00      	cmp	r3, #0
 800d668:	d005      	beq.n	800d676 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d66e:	f043 0204 	orr.w	r2, r3, #4
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d67a:	f003 0308 	and.w	r3, r3, #8
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d011      	beq.n	800d6a6 <HAL_UART_IRQHandler+0x126>
 800d682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d686:	f003 0320 	and.w	r3, r3, #32
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d105      	bne.n	800d69a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d68e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	d005      	beq.n	800d6a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d69e:	f043 0208 	orr.w	r2, r3, #8
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f000 820a 	beq.w	800dac4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d008      	beq.n	800d6ce <HAL_UART_IRQHandler+0x14e>
 800d6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6c0:	f003 0320 	and.w	r3, r3, #32
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fb62 	bl	800dd92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6d8:	2b40      	cmp	r3, #64	@ 0x40
 800d6da:	bf0c      	ite	eq
 800d6dc:	2301      	moveq	r3, #1
 800d6de:	2300      	movne	r3, #0
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ea:	f003 0308 	and.w	r3, r3, #8
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <HAL_UART_IRQHandler+0x17a>
 800d6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d04f      	beq.n	800d79a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fa6d 	bl	800dbda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	695b      	ldr	r3, [r3, #20]
 800d706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d70a:	2b40      	cmp	r3, #64	@ 0x40
 800d70c:	d141      	bne.n	800d792 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	3314      	adds	r3, #20
 800d714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d72c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3314      	adds	r3, #20
 800d736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d73a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d73e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d74a:	e841 2300 	strex	r3, r2, [r1]
 800d74e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1d9      	bne.n	800d70e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d013      	beq.n	800d78a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d766:	4a8a      	ldr	r2, [pc, #552]	@ (800d990 <HAL_UART_IRQHandler+0x410>)
 800d768:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fb fd43 	bl	80091fa <HAL_DMA_Abort_IT>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d016      	beq.n	800d7a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d77e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d788:	e00e      	b.n	800d7a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f9b6 	bl	800dafc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d790:	e00a      	b.n	800d7a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f9b2 	bl	800dafc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d798:	e006      	b.n	800d7a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f000 f9ae 	bl	800dafc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d7a6:	e18d      	b.n	800dac4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7a8:	bf00      	nop
    return;
 800d7aa:	e18b      	b.n	800dac4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7b0:	2b01      	cmp	r3, #1
 800d7b2:	f040 8167 	bne.w	800da84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d7ba:	f003 0310 	and.w	r3, r3, #16
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f000 8160 	beq.w	800da84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800d7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d7c8:	f003 0310 	and.w	r3, r3, #16
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f000 8159 	beq.w	800da84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60bb      	str	r3, [r7, #8]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60bb      	str	r3, [r7, #8]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	60bb      	str	r3, [r7, #8]
 800d7e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7f2:	2b40      	cmp	r3, #64	@ 0x40
 800d7f4:	f040 80ce 	bne.w	800d994 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 80a9 	beq.w	800d960 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d816:	429a      	cmp	r2, r3
 800d818:	f080 80a2 	bcs.w	800d960 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d822:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d82e:	f000 8088 	beq.w	800d942 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	330c      	adds	r3, #12
 800d838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d840:	e853 3f00 	ldrex	r3, [r3]
 800d844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d84c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	330c      	adds	r3, #12
 800d85a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d85e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d866:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d86a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d86e:	e841 2300 	strex	r3, r2, [r1]
 800d872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1d9      	bne.n	800d832 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	3314      	adds	r3, #20
 800d884:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d888:	e853 3f00 	ldrex	r3, [r3]
 800d88c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d88e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d890:	f023 0301 	bic.w	r3, r3, #1
 800d894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	3314      	adds	r3, #20
 800d89e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d8a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d8a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d8aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d8b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e1      	bne.n	800d87e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	3314      	adds	r3, #20
 800d8c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8c4:	e853 3f00 	ldrex	r3, [r3]
 800d8c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d8ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3314      	adds	r3, #20
 800d8da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d8de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d8e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d8e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d8e6:	e841 2300 	strex	r3, r2, [r1]
 800d8ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d8ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e3      	bne.n	800d8ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2220      	movs	r2, #32
 800d8f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	330c      	adds	r3, #12
 800d906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d90a:	e853 3f00 	ldrex	r3, [r3]
 800d90e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d912:	f023 0310 	bic.w	r3, r3, #16
 800d916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	330c      	adds	r3, #12
 800d920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d924:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d926:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d928:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d92a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d92c:	e841 2300 	strex	r3, r2, [r1]
 800d930:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1e3      	bne.n	800d900 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fb fbec 	bl	800911a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2202      	movs	r2, #2
 800d946:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d950:	b29b      	uxth	r3, r3
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	b29b      	uxth	r3, r3
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f8d9 	bl	800db10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d95e:	e0b3      	b.n	800dac8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d968:	429a      	cmp	r2, r3
 800d96a:	f040 80ad 	bne.w	800dac8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d978:	f040 80a6 	bne.w	800dac8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2202      	movs	r2, #2
 800d980:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f8c1 	bl	800db10 <HAL_UARTEx_RxEventCallback>
      return;
 800d98e:	e09b      	b.n	800dac8 <HAL_UART_IRQHandler+0x548>
 800d990:	0800dca1 	.word	0x0800dca1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 808e 	beq.w	800dacc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800d9b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 8089 	beq.w	800dacc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	330c      	adds	r3, #12
 800d9c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c4:	e853 3f00 	ldrex	r3, [r3]
 800d9c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	330c      	adds	r3, #12
 800d9da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d9de:	647a      	str	r2, [r7, #68]	@ 0x44
 800d9e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9e6:	e841 2300 	strex	r3, r2, [r1]
 800d9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1e3      	bne.n	800d9ba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	3314      	adds	r3, #20
 800d9f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fc:	e853 3f00 	ldrex	r3, [r3]
 800da00:	623b      	str	r3, [r7, #32]
   return(result);
 800da02:	6a3b      	ldr	r3, [r7, #32]
 800da04:	f023 0301 	bic.w	r3, r3, #1
 800da08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3314      	adds	r3, #20
 800da12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800da16:	633a      	str	r2, [r7, #48]	@ 0x30
 800da18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da1e:	e841 2300 	strex	r3, r2, [r1]
 800da22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1e3      	bne.n	800d9f2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2220      	movs	r2, #32
 800da2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	330c      	adds	r3, #12
 800da3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	e853 3f00 	ldrex	r3, [r3]
 800da46:	60fb      	str	r3, [r7, #12]
   return(result);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f023 0310 	bic.w	r3, r3, #16
 800da4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	330c      	adds	r3, #12
 800da58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800da5c:	61fa      	str	r2, [r7, #28]
 800da5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	69b9      	ldr	r1, [r7, #24]
 800da62:	69fa      	ldr	r2, [r7, #28]
 800da64:	e841 2300 	strex	r3, r2, [r1]
 800da68:	617b      	str	r3, [r7, #20]
   return(result);
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1e3      	bne.n	800da38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2202      	movs	r2, #2
 800da74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da7a:	4619      	mov	r1, r3
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 f847 	bl	800db10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da82:	e023      	b.n	800dacc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800da84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d009      	beq.n	800daa4 <HAL_UART_IRQHandler+0x524>
 800da90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d003      	beq.n	800daa4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f910 	bl	800dcc2 <UART_Transmit_IT>
    return;
 800daa2:	e014      	b.n	800dace <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800daa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00e      	beq.n	800dace <HAL_UART_IRQHandler+0x54e>
 800dab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d008      	beq.n	800dace <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 f950 	bl	800dd62 <UART_EndTransmit_IT>
    return;
 800dac2:	e004      	b.n	800dace <HAL_UART_IRQHandler+0x54e>
    return;
 800dac4:	bf00      	nop
 800dac6:	e002      	b.n	800dace <HAL_UART_IRQHandler+0x54e>
      return;
 800dac8:	bf00      	nop
 800daca:	e000      	b.n	800dace <HAL_UART_IRQHandler+0x54e>
      return;
 800dacc:	bf00      	nop
  }
}
 800dace:	37e8      	adds	r7, #232	@ 0xe8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	603b      	str	r3, [r7, #0]
 800db34:	4613      	mov	r3, r2
 800db36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db38:	e03b      	b.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db40:	d037      	beq.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db42:	f7fb f9a9 	bl	8008e98 <HAL_GetTick>
 800db46:	4602      	mov	r2, r0
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	1ad3      	subs	r3, r2, r3
 800db4c:	6a3a      	ldr	r2, [r7, #32]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d302      	bcc.n	800db58 <UART_WaitOnFlagUntilTimeout+0x30>
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db58:	2303      	movs	r3, #3
 800db5a:	e03a      	b.n	800dbd2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	f003 0304 	and.w	r3, r3, #4
 800db66:	2b00      	cmp	r3, #0
 800db68:	d023      	beq.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	2b80      	cmp	r3, #128	@ 0x80
 800db6e:	d020      	beq.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2b40      	cmp	r3, #64	@ 0x40
 800db74:	d01d      	beq.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f003 0308 	and.w	r3, r3, #8
 800db80:	2b08      	cmp	r3, #8
 800db82:	d116      	bne.n	800dbb2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800db84:	2300      	movs	r3, #0
 800db86:	617b      	str	r3, [r7, #20]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	617b      	str	r3, [r7, #20]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	617b      	str	r3, [r7, #20]
 800db98:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 f81d 	bl	800dbda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2208      	movs	r2, #8
 800dba4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e00f      	b.n	800dbd2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	4013      	ands	r3, r2
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	bf0c      	ite	eq
 800dbc2:	2301      	moveq	r3, #1
 800dbc4:	2300      	movne	r3, #0
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	461a      	mov	r2, r3
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d0b4      	beq.n	800db3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b095      	sub	sp, #84	@ 0x54
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	330c      	adds	r3, #12
 800dbe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbec:	e853 3f00 	ldrex	r3, [r3]
 800dbf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	330c      	adds	r3, #12
 800dc00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dc02:	643a      	str	r2, [r7, #64]	@ 0x40
 800dc04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc0a:	e841 2300 	strex	r3, r2, [r1]
 800dc0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1e5      	bne.n	800dbe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	3314      	adds	r3, #20
 800dc1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1e:	6a3b      	ldr	r3, [r7, #32]
 800dc20:	e853 3f00 	ldrex	r3, [r3]
 800dc24:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc26:	69fb      	ldr	r3, [r7, #28]
 800dc28:	f023 0301 	bic.w	r3, r3, #1
 800dc2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	3314      	adds	r3, #20
 800dc34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc3e:	e841 2300 	strex	r3, r2, [r1]
 800dc42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1e5      	bne.n	800dc16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d119      	bne.n	800dc86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	330c      	adds	r3, #12
 800dc58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	e853 3f00 	ldrex	r3, [r3]
 800dc60:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	f023 0310 	bic.w	r3, r3, #16
 800dc68:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	330c      	adds	r3, #12
 800dc70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc72:	61ba      	str	r2, [r7, #24]
 800dc74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	6979      	ldr	r1, [r7, #20]
 800dc78:	69ba      	ldr	r2, [r7, #24]
 800dc7a:	e841 2300 	strex	r3, r2, [r1]
 800dc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e5      	bne.n	800dc52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dc94:	bf00      	nop
 800dc96:	3754      	adds	r7, #84	@ 0x54
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff ff21 	bl	800dafc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcba:	bf00      	nop
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dcc2:	b480      	push	{r7}
 800dcc4:	b085      	sub	sp, #20
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b21      	cmp	r3, #33	@ 0x21
 800dcd4:	d13e      	bne.n	800dd54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcde:	d114      	bne.n	800dd0a <UART_Transmit_IT+0x48>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d110      	bne.n	800dd0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a1b      	ldr	r3, [r3, #32]
 800dcec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dcfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	1c9a      	adds	r2, r3, #2
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	621a      	str	r2, [r3, #32]
 800dd08:	e008      	b.n	800dd1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a1b      	ldr	r3, [r3, #32]
 800dd0e:	1c59      	adds	r1, r3, #1
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	6211      	str	r1, [r2, #32]
 800dd14:	781a      	ldrb	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3b01      	subs	r3, #1
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10f      	bne.n	800dd50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68da      	ldr	r2, [r3, #12]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	e000      	b.n	800dd56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dd54:	2302      	movs	r3, #2
  }
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2220      	movs	r2, #32
 800dd7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f7ff fea6 	bl	800dad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3708      	adds	r7, #8
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b08c      	sub	sp, #48	@ 0x30
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b22      	cmp	r3, #34	@ 0x22
 800ddac:	f040 80aa 	bne.w	800df04 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddb8:	d115      	bne.n	800dde6 <UART_Receive_IT+0x54>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d111      	bne.n	800dde6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	685b      	ldr	r3, [r3, #4]
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddde:	1c9a      	adds	r2, r3, #2
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	629a      	str	r2, [r3, #40]	@ 0x28
 800dde4:	e024      	b.n	800de30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddf4:	d007      	beq.n	800de06 <UART_Receive_IT+0x74>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10a      	bne.n	800de14 <UART_Receive_IT+0x82>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	e008      	b.n	800de26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de20:	b2da      	uxtb	r2, r3
 800de22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de34:	b29b      	uxth	r3, r3
 800de36:	3b01      	subs	r3, #1
 800de38:	b29b      	uxth	r3, r3
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	4619      	mov	r1, r3
 800de3e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800de40:	2b00      	cmp	r3, #0
 800de42:	d15d      	bne.n	800df00 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	68da      	ldr	r2, [r3, #12]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f022 0220 	bic.w	r2, r2, #32
 800de52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68da      	ldr	r2, [r3, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800de62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	695a      	ldr	r2, [r3, #20]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f022 0201 	bic.w	r2, r2, #1
 800de72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2220      	movs	r2, #32
 800de78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2200      	movs	r2, #0
 800de80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de86:	2b01      	cmp	r3, #1
 800de88:	d135      	bne.n	800def6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	330c      	adds	r3, #12
 800de96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	e853 3f00 	ldrex	r3, [r3]
 800de9e:	613b      	str	r3, [r7, #16]
   return(result);
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	f023 0310 	bic.w	r3, r3, #16
 800dea6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	330c      	adds	r3, #12
 800deae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb0:	623a      	str	r2, [r7, #32]
 800deb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb4:	69f9      	ldr	r1, [r7, #28]
 800deb6:	6a3a      	ldr	r2, [r7, #32]
 800deb8:	e841 2300 	strex	r3, r2, [r1]
 800debc:	61bb      	str	r3, [r7, #24]
   return(result);
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d1e5      	bne.n	800de90 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f003 0310 	and.w	r3, r3, #16
 800dece:	2b10      	cmp	r3, #16
 800ded0:	d10a      	bne.n	800dee8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	60fb      	str	r3, [r7, #12]
 800dee6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7ff fe0e 	bl	800db10 <HAL_UARTEx_RxEventCallback>
 800def4:	e002      	b.n	800defc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7ff fdf6 	bl	800dae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800defc:	2300      	movs	r3, #0
 800defe:	e002      	b.n	800df06 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800df00:	2300      	movs	r3, #0
 800df02:	e000      	b.n	800df06 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800df04:	2302      	movs	r3, #2
  }
}
 800df06:	4618      	mov	r0, r3
 800df08:	3730      	adds	r7, #48	@ 0x30
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
	...

0800df10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df14:	b0c0      	sub	sp, #256	@ 0x100
 800df16:	af00      	add	r7, sp, #0
 800df18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800df28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df2c:	68d9      	ldr	r1, [r3, #12]
 800df2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	ea40 0301 	orr.w	r3, r0, r1
 800df38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800df3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df3e:	689a      	ldr	r2, [r3, #8]
 800df40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	431a      	orrs	r2, r3
 800df48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	431a      	orrs	r2, r3
 800df50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df54:	69db      	ldr	r3, [r3, #28]
 800df56:	4313      	orrs	r3, r2
 800df58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800df5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800df68:	f021 010c 	bic.w	r1, r1, #12
 800df6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800df76:	430b      	orrs	r3, r1
 800df78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800df7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	695b      	ldr	r3, [r3, #20]
 800df82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800df86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df8a:	6999      	ldr	r1, [r3, #24]
 800df8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	ea40 0301 	orr.w	r3, r0, r1
 800df96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b8f      	ldr	r3, [pc, #572]	@ (800e1dc <UART_SetConfig+0x2cc>)
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d005      	beq.n	800dfb0 <UART_SetConfig+0xa0>
 800dfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	4b8d      	ldr	r3, [pc, #564]	@ (800e1e0 <UART_SetConfig+0x2d0>)
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d104      	bne.n	800dfba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dfb0:	f7fe fdc2 	bl	800cb38 <HAL_RCC_GetPCLK2Freq>
 800dfb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800dfb8:	e003      	b.n	800dfc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dfba:	f7fe fda9 	bl	800cb10 <HAL_RCC_GetPCLK1Freq>
 800dfbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dfc6:	69db      	ldr	r3, [r3, #28]
 800dfc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dfcc:	f040 810c 	bne.w	800e1e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dfd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dfda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800dfde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800dfe2:	4622      	mov	r2, r4
 800dfe4:	462b      	mov	r3, r5
 800dfe6:	1891      	adds	r1, r2, r2
 800dfe8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800dfea:	415b      	adcs	r3, r3
 800dfec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dfee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dff2:	4621      	mov	r1, r4
 800dff4:	eb12 0801 	adds.w	r8, r2, r1
 800dff8:	4629      	mov	r1, r5
 800dffa:	eb43 0901 	adc.w	r9, r3, r1
 800dffe:	f04f 0200 	mov.w	r2, #0
 800e002:	f04f 0300 	mov.w	r3, #0
 800e006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e00a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e00e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e012:	4690      	mov	r8, r2
 800e014:	4699      	mov	r9, r3
 800e016:	4623      	mov	r3, r4
 800e018:	eb18 0303 	adds.w	r3, r8, r3
 800e01c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e020:	462b      	mov	r3, r5
 800e022:	eb49 0303 	adc.w	r3, r9, r3
 800e026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e036:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e03a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e03e:	460b      	mov	r3, r1
 800e040:	18db      	adds	r3, r3, r3
 800e042:	653b      	str	r3, [r7, #80]	@ 0x50
 800e044:	4613      	mov	r3, r2
 800e046:	eb42 0303 	adc.w	r3, r2, r3
 800e04a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e04c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e050:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e054:	f7f2 f914 	bl	8000280 <__aeabi_uldivmod>
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4b61      	ldr	r3, [pc, #388]	@ (800e1e4 <UART_SetConfig+0x2d4>)
 800e05e:	fba3 2302 	umull	r2, r3, r3, r2
 800e062:	095b      	lsrs	r3, r3, #5
 800e064:	011c      	lsls	r4, r3, #4
 800e066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e06a:	2200      	movs	r2, #0
 800e06c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e070:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e074:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e078:	4642      	mov	r2, r8
 800e07a:	464b      	mov	r3, r9
 800e07c:	1891      	adds	r1, r2, r2
 800e07e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e080:	415b      	adcs	r3, r3
 800e082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e084:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e088:	4641      	mov	r1, r8
 800e08a:	eb12 0a01 	adds.w	sl, r2, r1
 800e08e:	4649      	mov	r1, r9
 800e090:	eb43 0b01 	adc.w	fp, r3, r1
 800e094:	f04f 0200 	mov.w	r2, #0
 800e098:	f04f 0300 	mov.w	r3, #0
 800e09c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e0a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e0a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0a8:	4692      	mov	sl, r2
 800e0aa:	469b      	mov	fp, r3
 800e0ac:	4643      	mov	r3, r8
 800e0ae:	eb1a 0303 	adds.w	r3, sl, r3
 800e0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e0b6:	464b      	mov	r3, r9
 800e0b8:	eb4b 0303 	adc.w	r3, fp, r3
 800e0bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e0cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e0d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	18db      	adds	r3, r3, r3
 800e0d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0da:	4613      	mov	r3, r2
 800e0dc:	eb42 0303 	adc.w	r3, r2, r3
 800e0e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e0e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e0e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e0ea:	f7f2 f8c9 	bl	8000280 <__aeabi_uldivmod>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	4b3b      	ldr	r3, [pc, #236]	@ (800e1e4 <UART_SetConfig+0x2d4>)
 800e0f6:	fba3 2301 	umull	r2, r3, r3, r1
 800e0fa:	095b      	lsrs	r3, r3, #5
 800e0fc:	2264      	movs	r2, #100	@ 0x64
 800e0fe:	fb02 f303 	mul.w	r3, r2, r3
 800e102:	1acb      	subs	r3, r1, r3
 800e104:	00db      	lsls	r3, r3, #3
 800e106:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e10a:	4b36      	ldr	r3, [pc, #216]	@ (800e1e4 <UART_SetConfig+0x2d4>)
 800e10c:	fba3 2302 	umull	r2, r3, r3, r2
 800e110:	095b      	lsrs	r3, r3, #5
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e118:	441c      	add	r4, r3
 800e11a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e11e:	2200      	movs	r2, #0
 800e120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e124:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e128:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e12c:	4642      	mov	r2, r8
 800e12e:	464b      	mov	r3, r9
 800e130:	1891      	adds	r1, r2, r2
 800e132:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e134:	415b      	adcs	r3, r3
 800e136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e138:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e13c:	4641      	mov	r1, r8
 800e13e:	1851      	adds	r1, r2, r1
 800e140:	6339      	str	r1, [r7, #48]	@ 0x30
 800e142:	4649      	mov	r1, r9
 800e144:	414b      	adcs	r3, r1
 800e146:	637b      	str	r3, [r7, #52]	@ 0x34
 800e148:	f04f 0200 	mov.w	r2, #0
 800e14c:	f04f 0300 	mov.w	r3, #0
 800e150:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e154:	4659      	mov	r1, fp
 800e156:	00cb      	lsls	r3, r1, #3
 800e158:	4651      	mov	r1, sl
 800e15a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e15e:	4651      	mov	r1, sl
 800e160:	00ca      	lsls	r2, r1, #3
 800e162:	4610      	mov	r0, r2
 800e164:	4619      	mov	r1, r3
 800e166:	4603      	mov	r3, r0
 800e168:	4642      	mov	r2, r8
 800e16a:	189b      	adds	r3, r3, r2
 800e16c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e170:	464b      	mov	r3, r9
 800e172:	460a      	mov	r2, r1
 800e174:	eb42 0303 	adc.w	r3, r2, r3
 800e178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e188:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e18c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e190:	460b      	mov	r3, r1
 800e192:	18db      	adds	r3, r3, r3
 800e194:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e196:	4613      	mov	r3, r2
 800e198:	eb42 0303 	adc.w	r3, r2, r3
 800e19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e19e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e1a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e1a6:	f7f2 f86b 	bl	8000280 <__aeabi_uldivmod>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e4 <UART_SetConfig+0x2d4>)
 800e1b0:	fba3 1302 	umull	r1, r3, r3, r2
 800e1b4:	095b      	lsrs	r3, r3, #5
 800e1b6:	2164      	movs	r1, #100	@ 0x64
 800e1b8:	fb01 f303 	mul.w	r3, r1, r3
 800e1bc:	1ad3      	subs	r3, r2, r3
 800e1be:	00db      	lsls	r3, r3, #3
 800e1c0:	3332      	adds	r3, #50	@ 0x32
 800e1c2:	4a08      	ldr	r2, [pc, #32]	@ (800e1e4 <UART_SetConfig+0x2d4>)
 800e1c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1c8:	095b      	lsrs	r3, r3, #5
 800e1ca:	f003 0207 	and.w	r2, r3, #7
 800e1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4422      	add	r2, r4
 800e1d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e1d8:	e106      	b.n	800e3e8 <UART_SetConfig+0x4d8>
 800e1da:	bf00      	nop
 800e1dc:	40011000 	.word	0x40011000
 800e1e0:	40011400 	.word	0x40011400
 800e1e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e1e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e1f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e1f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e1fa:	4642      	mov	r2, r8
 800e1fc:	464b      	mov	r3, r9
 800e1fe:	1891      	adds	r1, r2, r2
 800e200:	6239      	str	r1, [r7, #32]
 800e202:	415b      	adcs	r3, r3
 800e204:	627b      	str	r3, [r7, #36]	@ 0x24
 800e206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e20a:	4641      	mov	r1, r8
 800e20c:	1854      	adds	r4, r2, r1
 800e20e:	4649      	mov	r1, r9
 800e210:	eb43 0501 	adc.w	r5, r3, r1
 800e214:	f04f 0200 	mov.w	r2, #0
 800e218:	f04f 0300 	mov.w	r3, #0
 800e21c:	00eb      	lsls	r3, r5, #3
 800e21e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e222:	00e2      	lsls	r2, r4, #3
 800e224:	4614      	mov	r4, r2
 800e226:	461d      	mov	r5, r3
 800e228:	4643      	mov	r3, r8
 800e22a:	18e3      	adds	r3, r4, r3
 800e22c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e230:	464b      	mov	r3, r9
 800e232:	eb45 0303 	adc.w	r3, r5, r3
 800e236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e24a:	f04f 0200 	mov.w	r2, #0
 800e24e:	f04f 0300 	mov.w	r3, #0
 800e252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e256:	4629      	mov	r1, r5
 800e258:	008b      	lsls	r3, r1, #2
 800e25a:	4621      	mov	r1, r4
 800e25c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e260:	4621      	mov	r1, r4
 800e262:	008a      	lsls	r2, r1, #2
 800e264:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e268:	f7f2 f80a 	bl	8000280 <__aeabi_uldivmod>
 800e26c:	4602      	mov	r2, r0
 800e26e:	460b      	mov	r3, r1
 800e270:	4b60      	ldr	r3, [pc, #384]	@ (800e3f4 <UART_SetConfig+0x4e4>)
 800e272:	fba3 2302 	umull	r2, r3, r3, r2
 800e276:	095b      	lsrs	r3, r3, #5
 800e278:	011c      	lsls	r4, r3, #4
 800e27a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e27e:	2200      	movs	r2, #0
 800e280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e28c:	4642      	mov	r2, r8
 800e28e:	464b      	mov	r3, r9
 800e290:	1891      	adds	r1, r2, r2
 800e292:	61b9      	str	r1, [r7, #24]
 800e294:	415b      	adcs	r3, r3
 800e296:	61fb      	str	r3, [r7, #28]
 800e298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e29c:	4641      	mov	r1, r8
 800e29e:	1851      	adds	r1, r2, r1
 800e2a0:	6139      	str	r1, [r7, #16]
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	414b      	adcs	r3, r1
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	f04f 0200 	mov.w	r2, #0
 800e2ac:	f04f 0300 	mov.w	r3, #0
 800e2b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e2b4:	4659      	mov	r1, fp
 800e2b6:	00cb      	lsls	r3, r1, #3
 800e2b8:	4651      	mov	r1, sl
 800e2ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e2be:	4651      	mov	r1, sl
 800e2c0:	00ca      	lsls	r2, r1, #3
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	4642      	mov	r2, r8
 800e2ca:	189b      	adds	r3, r3, r2
 800e2cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e2d0:	464b      	mov	r3, r9
 800e2d2:	460a      	mov	r2, r1
 800e2d4:	eb42 0303 	adc.w	r3, r2, r3
 800e2d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e2e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e2e8:	f04f 0200 	mov.w	r2, #0
 800e2ec:	f04f 0300 	mov.w	r3, #0
 800e2f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e2f4:	4649      	mov	r1, r9
 800e2f6:	008b      	lsls	r3, r1, #2
 800e2f8:	4641      	mov	r1, r8
 800e2fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e2fe:	4641      	mov	r1, r8
 800e300:	008a      	lsls	r2, r1, #2
 800e302:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e306:	f7f1 ffbb 	bl	8000280 <__aeabi_uldivmod>
 800e30a:	4602      	mov	r2, r0
 800e30c:	460b      	mov	r3, r1
 800e30e:	4611      	mov	r1, r2
 800e310:	4b38      	ldr	r3, [pc, #224]	@ (800e3f4 <UART_SetConfig+0x4e4>)
 800e312:	fba3 2301 	umull	r2, r3, r3, r1
 800e316:	095b      	lsrs	r3, r3, #5
 800e318:	2264      	movs	r2, #100	@ 0x64
 800e31a:	fb02 f303 	mul.w	r3, r2, r3
 800e31e:	1acb      	subs	r3, r1, r3
 800e320:	011b      	lsls	r3, r3, #4
 800e322:	3332      	adds	r3, #50	@ 0x32
 800e324:	4a33      	ldr	r2, [pc, #204]	@ (800e3f4 <UART_SetConfig+0x4e4>)
 800e326:	fba2 2303 	umull	r2, r3, r2, r3
 800e32a:	095b      	lsrs	r3, r3, #5
 800e32c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e330:	441c      	add	r4, r3
 800e332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e336:	2200      	movs	r2, #0
 800e338:	673b      	str	r3, [r7, #112]	@ 0x70
 800e33a:	677a      	str	r2, [r7, #116]	@ 0x74
 800e33c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e340:	4642      	mov	r2, r8
 800e342:	464b      	mov	r3, r9
 800e344:	1891      	adds	r1, r2, r2
 800e346:	60b9      	str	r1, [r7, #8]
 800e348:	415b      	adcs	r3, r3
 800e34a:	60fb      	str	r3, [r7, #12]
 800e34c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e350:	4641      	mov	r1, r8
 800e352:	1851      	adds	r1, r2, r1
 800e354:	6039      	str	r1, [r7, #0]
 800e356:	4649      	mov	r1, r9
 800e358:	414b      	adcs	r3, r1
 800e35a:	607b      	str	r3, [r7, #4]
 800e35c:	f04f 0200 	mov.w	r2, #0
 800e360:	f04f 0300 	mov.w	r3, #0
 800e364:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e368:	4659      	mov	r1, fp
 800e36a:	00cb      	lsls	r3, r1, #3
 800e36c:	4651      	mov	r1, sl
 800e36e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e372:	4651      	mov	r1, sl
 800e374:	00ca      	lsls	r2, r1, #3
 800e376:	4610      	mov	r0, r2
 800e378:	4619      	mov	r1, r3
 800e37a:	4603      	mov	r3, r0
 800e37c:	4642      	mov	r2, r8
 800e37e:	189b      	adds	r3, r3, r2
 800e380:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e382:	464b      	mov	r3, r9
 800e384:	460a      	mov	r2, r1
 800e386:	eb42 0303 	adc.w	r3, r2, r3
 800e38a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	663b      	str	r3, [r7, #96]	@ 0x60
 800e396:	667a      	str	r2, [r7, #100]	@ 0x64
 800e398:	f04f 0200 	mov.w	r2, #0
 800e39c:	f04f 0300 	mov.w	r3, #0
 800e3a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e3a4:	4649      	mov	r1, r9
 800e3a6:	008b      	lsls	r3, r1, #2
 800e3a8:	4641      	mov	r1, r8
 800e3aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e3ae:	4641      	mov	r1, r8
 800e3b0:	008a      	lsls	r2, r1, #2
 800e3b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e3b6:	f7f1 ff63 	bl	8000280 <__aeabi_uldivmod>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	460b      	mov	r3, r1
 800e3be:	4b0d      	ldr	r3, [pc, #52]	@ (800e3f4 <UART_SetConfig+0x4e4>)
 800e3c0:	fba3 1302 	umull	r1, r3, r3, r2
 800e3c4:	095b      	lsrs	r3, r3, #5
 800e3c6:	2164      	movs	r1, #100	@ 0x64
 800e3c8:	fb01 f303 	mul.w	r3, r1, r3
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	011b      	lsls	r3, r3, #4
 800e3d0:	3332      	adds	r3, #50	@ 0x32
 800e3d2:	4a08      	ldr	r2, [pc, #32]	@ (800e3f4 <UART_SetConfig+0x4e4>)
 800e3d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d8:	095b      	lsrs	r3, r3, #5
 800e3da:	f003 020f 	and.w	r2, r3, #15
 800e3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4422      	add	r2, r4
 800e3e6:	609a      	str	r2, [r3, #8]
}
 800e3e8:	bf00      	nop
 800e3ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e3f4:	51eb851f 	.word	0x51eb851f

0800e3f8 <calloc>:
 800e3f8:	4b02      	ldr	r3, [pc, #8]	@ (800e404 <calloc+0xc>)
 800e3fa:	460a      	mov	r2, r1
 800e3fc:	4601      	mov	r1, r0
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	f000 b802 	b.w	800e408 <_calloc_r>
 800e404:	2000056c 	.word	0x2000056c

0800e408 <_calloc_r>:
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	fba1 5402 	umull	r5, r4, r1, r2
 800e40e:	b93c      	cbnz	r4, 800e420 <_calloc_r+0x18>
 800e410:	4629      	mov	r1, r5
 800e412:	f000 f837 	bl	800e484 <_malloc_r>
 800e416:	4606      	mov	r6, r0
 800e418:	b928      	cbnz	r0, 800e426 <_calloc_r+0x1e>
 800e41a:	2600      	movs	r6, #0
 800e41c:	4630      	mov	r0, r6
 800e41e:	bd70      	pop	{r4, r5, r6, pc}
 800e420:	220c      	movs	r2, #12
 800e422:	6002      	str	r2, [r0, #0]
 800e424:	e7f9      	b.n	800e41a <_calloc_r+0x12>
 800e426:	462a      	mov	r2, r5
 800e428:	4621      	mov	r1, r4
 800e42a:	f000 f9f9 	bl	800e820 <memset>
 800e42e:	e7f5      	b.n	800e41c <_calloc_r+0x14>

0800e430 <free>:
 800e430:	4b02      	ldr	r3, [pc, #8]	@ (800e43c <free+0xc>)
 800e432:	4601      	mov	r1, r0
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f000 ba47 	b.w	800e8c8 <_free_r>
 800e43a:	bf00      	nop
 800e43c:	2000056c 	.word	0x2000056c

0800e440 <sbrk_aligned>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	4e0f      	ldr	r6, [pc, #60]	@ (800e480 <sbrk_aligned+0x40>)
 800e444:	460c      	mov	r4, r1
 800e446:	6831      	ldr	r1, [r6, #0]
 800e448:	4605      	mov	r5, r0
 800e44a:	b911      	cbnz	r1, 800e452 <sbrk_aligned+0x12>
 800e44c:	f000 f9f0 	bl	800e830 <_sbrk_r>
 800e450:	6030      	str	r0, [r6, #0]
 800e452:	4621      	mov	r1, r4
 800e454:	4628      	mov	r0, r5
 800e456:	f000 f9eb 	bl	800e830 <_sbrk_r>
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	d103      	bne.n	800e466 <sbrk_aligned+0x26>
 800e45e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e462:	4620      	mov	r0, r4
 800e464:	bd70      	pop	{r4, r5, r6, pc}
 800e466:	1cc4      	adds	r4, r0, #3
 800e468:	f024 0403 	bic.w	r4, r4, #3
 800e46c:	42a0      	cmp	r0, r4
 800e46e:	d0f8      	beq.n	800e462 <sbrk_aligned+0x22>
 800e470:	1a21      	subs	r1, r4, r0
 800e472:	4628      	mov	r0, r5
 800e474:	f000 f9dc 	bl	800e830 <_sbrk_r>
 800e478:	3001      	adds	r0, #1
 800e47a:	d1f2      	bne.n	800e462 <sbrk_aligned+0x22>
 800e47c:	e7ef      	b.n	800e45e <sbrk_aligned+0x1e>
 800e47e:	bf00      	nop
 800e480:	20000dd4 	.word	0x20000dd4

0800e484 <_malloc_r>:
 800e484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e488:	1ccd      	adds	r5, r1, #3
 800e48a:	f025 0503 	bic.w	r5, r5, #3
 800e48e:	3508      	adds	r5, #8
 800e490:	2d0c      	cmp	r5, #12
 800e492:	bf38      	it	cc
 800e494:	250c      	movcc	r5, #12
 800e496:	2d00      	cmp	r5, #0
 800e498:	4606      	mov	r6, r0
 800e49a:	db01      	blt.n	800e4a0 <_malloc_r+0x1c>
 800e49c:	42a9      	cmp	r1, r5
 800e49e:	d904      	bls.n	800e4aa <_malloc_r+0x26>
 800e4a0:	230c      	movs	r3, #12
 800e4a2:	6033      	str	r3, [r6, #0]
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e580 <_malloc_r+0xfc>
 800e4ae:	f000 f869 	bl	800e584 <__malloc_lock>
 800e4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b6:	461c      	mov	r4, r3
 800e4b8:	bb44      	cbnz	r4, 800e50c <_malloc_r+0x88>
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7ff ffbf 	bl	800e440 <sbrk_aligned>
 800e4c2:	1c43      	adds	r3, r0, #1
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	d158      	bne.n	800e57a <_malloc_r+0xf6>
 800e4c8:	f8d8 4000 	ldr.w	r4, [r8]
 800e4cc:	4627      	mov	r7, r4
 800e4ce:	2f00      	cmp	r7, #0
 800e4d0:	d143      	bne.n	800e55a <_malloc_r+0xd6>
 800e4d2:	2c00      	cmp	r4, #0
 800e4d4:	d04b      	beq.n	800e56e <_malloc_r+0xea>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	4639      	mov	r1, r7
 800e4da:	4630      	mov	r0, r6
 800e4dc:	eb04 0903 	add.w	r9, r4, r3
 800e4e0:	f000 f9a6 	bl	800e830 <_sbrk_r>
 800e4e4:	4581      	cmp	r9, r0
 800e4e6:	d142      	bne.n	800e56e <_malloc_r+0xea>
 800e4e8:	6821      	ldr	r1, [r4, #0]
 800e4ea:	1a6d      	subs	r5, r5, r1
 800e4ec:	4629      	mov	r1, r5
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f7ff ffa6 	bl	800e440 <sbrk_aligned>
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d03a      	beq.n	800e56e <_malloc_r+0xea>
 800e4f8:	6823      	ldr	r3, [r4, #0]
 800e4fa:	442b      	add	r3, r5
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	f8d8 3000 	ldr.w	r3, [r8]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	bb62      	cbnz	r2, 800e560 <_malloc_r+0xdc>
 800e506:	f8c8 7000 	str.w	r7, [r8]
 800e50a:	e00f      	b.n	800e52c <_malloc_r+0xa8>
 800e50c:	6822      	ldr	r2, [r4, #0]
 800e50e:	1b52      	subs	r2, r2, r5
 800e510:	d420      	bmi.n	800e554 <_malloc_r+0xd0>
 800e512:	2a0b      	cmp	r2, #11
 800e514:	d917      	bls.n	800e546 <_malloc_r+0xc2>
 800e516:	1961      	adds	r1, r4, r5
 800e518:	42a3      	cmp	r3, r4
 800e51a:	6025      	str	r5, [r4, #0]
 800e51c:	bf18      	it	ne
 800e51e:	6059      	strne	r1, [r3, #4]
 800e520:	6863      	ldr	r3, [r4, #4]
 800e522:	bf08      	it	eq
 800e524:	f8c8 1000 	streq.w	r1, [r8]
 800e528:	5162      	str	r2, [r4, r5]
 800e52a:	604b      	str	r3, [r1, #4]
 800e52c:	4630      	mov	r0, r6
 800e52e:	f000 f82f 	bl	800e590 <__malloc_unlock>
 800e532:	f104 000b 	add.w	r0, r4, #11
 800e536:	1d23      	adds	r3, r4, #4
 800e538:	f020 0007 	bic.w	r0, r0, #7
 800e53c:	1ac2      	subs	r2, r0, r3
 800e53e:	bf1c      	itt	ne
 800e540:	1a1b      	subne	r3, r3, r0
 800e542:	50a3      	strne	r3, [r4, r2]
 800e544:	e7af      	b.n	800e4a6 <_malloc_r+0x22>
 800e546:	6862      	ldr	r2, [r4, #4]
 800e548:	42a3      	cmp	r3, r4
 800e54a:	bf0c      	ite	eq
 800e54c:	f8c8 2000 	streq.w	r2, [r8]
 800e550:	605a      	strne	r2, [r3, #4]
 800e552:	e7eb      	b.n	800e52c <_malloc_r+0xa8>
 800e554:	4623      	mov	r3, r4
 800e556:	6864      	ldr	r4, [r4, #4]
 800e558:	e7ae      	b.n	800e4b8 <_malloc_r+0x34>
 800e55a:	463c      	mov	r4, r7
 800e55c:	687f      	ldr	r7, [r7, #4]
 800e55e:	e7b6      	b.n	800e4ce <_malloc_r+0x4a>
 800e560:	461a      	mov	r2, r3
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	42a3      	cmp	r3, r4
 800e566:	d1fb      	bne.n	800e560 <_malloc_r+0xdc>
 800e568:	2300      	movs	r3, #0
 800e56a:	6053      	str	r3, [r2, #4]
 800e56c:	e7de      	b.n	800e52c <_malloc_r+0xa8>
 800e56e:	230c      	movs	r3, #12
 800e570:	6033      	str	r3, [r6, #0]
 800e572:	4630      	mov	r0, r6
 800e574:	f000 f80c 	bl	800e590 <__malloc_unlock>
 800e578:	e794      	b.n	800e4a4 <_malloc_r+0x20>
 800e57a:	6005      	str	r5, [r0, #0]
 800e57c:	e7d6      	b.n	800e52c <_malloc_r+0xa8>
 800e57e:	bf00      	nop
 800e580:	20000dd8 	.word	0x20000dd8

0800e584 <__malloc_lock>:
 800e584:	4801      	ldr	r0, [pc, #4]	@ (800e58c <__malloc_lock+0x8>)
 800e586:	f000 b98e 	b.w	800e8a6 <__retarget_lock_acquire_recursive>
 800e58a:	bf00      	nop
 800e58c:	20000f18 	.word	0x20000f18

0800e590 <__malloc_unlock>:
 800e590:	4801      	ldr	r0, [pc, #4]	@ (800e598 <__malloc_unlock+0x8>)
 800e592:	f000 b989 	b.w	800e8a8 <__retarget_lock_release_recursive>
 800e596:	bf00      	nop
 800e598:	20000f18 	.word	0x20000f18

0800e59c <std>:
 800e59c:	2300      	movs	r3, #0
 800e59e:	b510      	push	{r4, lr}
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	e9c0 3300 	strd	r3, r3, [r0]
 800e5a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5aa:	6083      	str	r3, [r0, #8]
 800e5ac:	8181      	strh	r1, [r0, #12]
 800e5ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800e5b0:	81c2      	strh	r2, [r0, #14]
 800e5b2:	6183      	str	r3, [r0, #24]
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	2208      	movs	r2, #8
 800e5b8:	305c      	adds	r0, #92	@ 0x5c
 800e5ba:	f000 f931 	bl	800e820 <memset>
 800e5be:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f4 <std+0x58>)
 800e5c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f8 <std+0x5c>)
 800e5c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e5fc <std+0x60>)
 800e5c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e600 <std+0x64>)
 800e5cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e604 <std+0x68>)
 800e5d0:	6224      	str	r4, [r4, #32]
 800e5d2:	429c      	cmp	r4, r3
 800e5d4:	d006      	beq.n	800e5e4 <std+0x48>
 800e5d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e5da:	4294      	cmp	r4, r2
 800e5dc:	d002      	beq.n	800e5e4 <std+0x48>
 800e5de:	33d0      	adds	r3, #208	@ 0xd0
 800e5e0:	429c      	cmp	r4, r3
 800e5e2:	d105      	bne.n	800e5f0 <std+0x54>
 800e5e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ec:	f000 b95a 	b.w	800e8a4 <__retarget_lock_init_recursive>
 800e5f0:	bd10      	pop	{r4, pc}
 800e5f2:	bf00      	nop
 800e5f4:	0800f055 	.word	0x0800f055
 800e5f8:	0800f077 	.word	0x0800f077
 800e5fc:	0800f0af 	.word	0x0800f0af
 800e600:	0800f0d3 	.word	0x0800f0d3
 800e604:	20000ddc 	.word	0x20000ddc

0800e608 <stdio_exit_handler>:
 800e608:	4a02      	ldr	r2, [pc, #8]	@ (800e614 <stdio_exit_handler+0xc>)
 800e60a:	4903      	ldr	r1, [pc, #12]	@ (800e618 <stdio_exit_handler+0x10>)
 800e60c:	4803      	ldr	r0, [pc, #12]	@ (800e61c <stdio_exit_handler+0x14>)
 800e60e:	f000 b869 	b.w	800e6e4 <_fwalk_sglue>
 800e612:	bf00      	nop
 800e614:	20000560 	.word	0x20000560
 800e618:	0800f005 	.word	0x0800f005
 800e61c:	20000570 	.word	0x20000570

0800e620 <cleanup_stdio>:
 800e620:	6841      	ldr	r1, [r0, #4]
 800e622:	4b0c      	ldr	r3, [pc, #48]	@ (800e654 <cleanup_stdio+0x34>)
 800e624:	4299      	cmp	r1, r3
 800e626:	b510      	push	{r4, lr}
 800e628:	4604      	mov	r4, r0
 800e62a:	d001      	beq.n	800e630 <cleanup_stdio+0x10>
 800e62c:	f000 fcea 	bl	800f004 <_fflush_r>
 800e630:	68a1      	ldr	r1, [r4, #8]
 800e632:	4b09      	ldr	r3, [pc, #36]	@ (800e658 <cleanup_stdio+0x38>)
 800e634:	4299      	cmp	r1, r3
 800e636:	d002      	beq.n	800e63e <cleanup_stdio+0x1e>
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 fce3 	bl	800f004 <_fflush_r>
 800e63e:	68e1      	ldr	r1, [r4, #12]
 800e640:	4b06      	ldr	r3, [pc, #24]	@ (800e65c <cleanup_stdio+0x3c>)
 800e642:	4299      	cmp	r1, r3
 800e644:	d004      	beq.n	800e650 <cleanup_stdio+0x30>
 800e646:	4620      	mov	r0, r4
 800e648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e64c:	f000 bcda 	b.w	800f004 <_fflush_r>
 800e650:	bd10      	pop	{r4, pc}
 800e652:	bf00      	nop
 800e654:	20000ddc 	.word	0x20000ddc
 800e658:	20000e44 	.word	0x20000e44
 800e65c:	20000eac 	.word	0x20000eac

0800e660 <global_stdio_init.part.0>:
 800e660:	b510      	push	{r4, lr}
 800e662:	4b0b      	ldr	r3, [pc, #44]	@ (800e690 <global_stdio_init.part.0+0x30>)
 800e664:	4c0b      	ldr	r4, [pc, #44]	@ (800e694 <global_stdio_init.part.0+0x34>)
 800e666:	4a0c      	ldr	r2, [pc, #48]	@ (800e698 <global_stdio_init.part.0+0x38>)
 800e668:	601a      	str	r2, [r3, #0]
 800e66a:	4620      	mov	r0, r4
 800e66c:	2200      	movs	r2, #0
 800e66e:	2104      	movs	r1, #4
 800e670:	f7ff ff94 	bl	800e59c <std>
 800e674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e678:	2201      	movs	r2, #1
 800e67a:	2109      	movs	r1, #9
 800e67c:	f7ff ff8e 	bl	800e59c <std>
 800e680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e684:	2202      	movs	r2, #2
 800e686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e68a:	2112      	movs	r1, #18
 800e68c:	f7ff bf86 	b.w	800e59c <std>
 800e690:	20000f14 	.word	0x20000f14
 800e694:	20000ddc 	.word	0x20000ddc
 800e698:	0800e609 	.word	0x0800e609

0800e69c <__sfp_lock_acquire>:
 800e69c:	4801      	ldr	r0, [pc, #4]	@ (800e6a4 <__sfp_lock_acquire+0x8>)
 800e69e:	f000 b902 	b.w	800e8a6 <__retarget_lock_acquire_recursive>
 800e6a2:	bf00      	nop
 800e6a4:	20000f19 	.word	0x20000f19

0800e6a8 <__sfp_lock_release>:
 800e6a8:	4801      	ldr	r0, [pc, #4]	@ (800e6b0 <__sfp_lock_release+0x8>)
 800e6aa:	f000 b8fd 	b.w	800e8a8 <__retarget_lock_release_recursive>
 800e6ae:	bf00      	nop
 800e6b0:	20000f19 	.word	0x20000f19

0800e6b4 <__sinit>:
 800e6b4:	b510      	push	{r4, lr}
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	f7ff fff0 	bl	800e69c <__sfp_lock_acquire>
 800e6bc:	6a23      	ldr	r3, [r4, #32]
 800e6be:	b11b      	cbz	r3, 800e6c8 <__sinit+0x14>
 800e6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6c4:	f7ff bff0 	b.w	800e6a8 <__sfp_lock_release>
 800e6c8:	4b04      	ldr	r3, [pc, #16]	@ (800e6dc <__sinit+0x28>)
 800e6ca:	6223      	str	r3, [r4, #32]
 800e6cc:	4b04      	ldr	r3, [pc, #16]	@ (800e6e0 <__sinit+0x2c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1f5      	bne.n	800e6c0 <__sinit+0xc>
 800e6d4:	f7ff ffc4 	bl	800e660 <global_stdio_init.part.0>
 800e6d8:	e7f2      	b.n	800e6c0 <__sinit+0xc>
 800e6da:	bf00      	nop
 800e6dc:	0800e621 	.word	0x0800e621
 800e6e0:	20000f14 	.word	0x20000f14

0800e6e4 <_fwalk_sglue>:
 800e6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	4688      	mov	r8, r1
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	2600      	movs	r6, #0
 800e6f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6f4:	f1b9 0901 	subs.w	r9, r9, #1
 800e6f8:	d505      	bpl.n	800e706 <_fwalk_sglue+0x22>
 800e6fa:	6824      	ldr	r4, [r4, #0]
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	d1f7      	bne.n	800e6f0 <_fwalk_sglue+0xc>
 800e700:	4630      	mov	r0, r6
 800e702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e706:	89ab      	ldrh	r3, [r5, #12]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d907      	bls.n	800e71c <_fwalk_sglue+0x38>
 800e70c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e710:	3301      	adds	r3, #1
 800e712:	d003      	beq.n	800e71c <_fwalk_sglue+0x38>
 800e714:	4629      	mov	r1, r5
 800e716:	4638      	mov	r0, r7
 800e718:	47c0      	blx	r8
 800e71a:	4306      	orrs	r6, r0
 800e71c:	3568      	adds	r5, #104	@ 0x68
 800e71e:	e7e9      	b.n	800e6f4 <_fwalk_sglue+0x10>

0800e720 <iprintf>:
 800e720:	b40f      	push	{r0, r1, r2, r3}
 800e722:	b507      	push	{r0, r1, r2, lr}
 800e724:	4906      	ldr	r1, [pc, #24]	@ (800e740 <iprintf+0x20>)
 800e726:	ab04      	add	r3, sp, #16
 800e728:	6808      	ldr	r0, [r1, #0]
 800e72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e72e:	6881      	ldr	r1, [r0, #8]
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	f000 f93d 	bl	800e9b0 <_vfiprintf_r>
 800e736:	b003      	add	sp, #12
 800e738:	f85d eb04 	ldr.w	lr, [sp], #4
 800e73c:	b004      	add	sp, #16
 800e73e:	4770      	bx	lr
 800e740:	2000056c 	.word	0x2000056c

0800e744 <_puts_r>:
 800e744:	6a03      	ldr	r3, [r0, #32]
 800e746:	b570      	push	{r4, r5, r6, lr}
 800e748:	6884      	ldr	r4, [r0, #8]
 800e74a:	4605      	mov	r5, r0
 800e74c:	460e      	mov	r6, r1
 800e74e:	b90b      	cbnz	r3, 800e754 <_puts_r+0x10>
 800e750:	f7ff ffb0 	bl	800e6b4 <__sinit>
 800e754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e756:	07db      	lsls	r3, r3, #31
 800e758:	d405      	bmi.n	800e766 <_puts_r+0x22>
 800e75a:	89a3      	ldrh	r3, [r4, #12]
 800e75c:	0598      	lsls	r0, r3, #22
 800e75e:	d402      	bmi.n	800e766 <_puts_r+0x22>
 800e760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e762:	f000 f8a0 	bl	800e8a6 <__retarget_lock_acquire_recursive>
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	0719      	lsls	r1, r3, #28
 800e76a:	d502      	bpl.n	800e772 <_puts_r+0x2e>
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d135      	bne.n	800e7de <_puts_r+0x9a>
 800e772:	4621      	mov	r1, r4
 800e774:	4628      	mov	r0, r5
 800e776:	f000 fcef 	bl	800f158 <__swsetup_r>
 800e77a:	b380      	cbz	r0, 800e7de <_puts_r+0x9a>
 800e77c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e782:	07da      	lsls	r2, r3, #31
 800e784:	d405      	bmi.n	800e792 <_puts_r+0x4e>
 800e786:	89a3      	ldrh	r3, [r4, #12]
 800e788:	059b      	lsls	r3, r3, #22
 800e78a:	d402      	bmi.n	800e792 <_puts_r+0x4e>
 800e78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e78e:	f000 f88b 	bl	800e8a8 <__retarget_lock_release_recursive>
 800e792:	4628      	mov	r0, r5
 800e794:	bd70      	pop	{r4, r5, r6, pc}
 800e796:	2b00      	cmp	r3, #0
 800e798:	da04      	bge.n	800e7a4 <_puts_r+0x60>
 800e79a:	69a2      	ldr	r2, [r4, #24]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	dc17      	bgt.n	800e7d0 <_puts_r+0x8c>
 800e7a0:	290a      	cmp	r1, #10
 800e7a2:	d015      	beq.n	800e7d0 <_puts_r+0x8c>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	1c5a      	adds	r2, r3, #1
 800e7a8:	6022      	str	r2, [r4, #0]
 800e7aa:	7019      	strb	r1, [r3, #0]
 800e7ac:	68a3      	ldr	r3, [r4, #8]
 800e7ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e7b2:	3b01      	subs	r3, #1
 800e7b4:	60a3      	str	r3, [r4, #8]
 800e7b6:	2900      	cmp	r1, #0
 800e7b8:	d1ed      	bne.n	800e796 <_puts_r+0x52>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	da11      	bge.n	800e7e2 <_puts_r+0x9e>
 800e7be:	4622      	mov	r2, r4
 800e7c0:	210a      	movs	r1, #10
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f000 fc89 	bl	800f0da <__swbuf_r>
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	d0d7      	beq.n	800e77c <_puts_r+0x38>
 800e7cc:	250a      	movs	r5, #10
 800e7ce:	e7d7      	b.n	800e780 <_puts_r+0x3c>
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f000 fc81 	bl	800f0da <__swbuf_r>
 800e7d8:	3001      	adds	r0, #1
 800e7da:	d1e7      	bne.n	800e7ac <_puts_r+0x68>
 800e7dc:	e7ce      	b.n	800e77c <_puts_r+0x38>
 800e7de:	3e01      	subs	r6, #1
 800e7e0:	e7e4      	b.n	800e7ac <_puts_r+0x68>
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	6022      	str	r2, [r4, #0]
 800e7e8:	220a      	movs	r2, #10
 800e7ea:	701a      	strb	r2, [r3, #0]
 800e7ec:	e7ee      	b.n	800e7cc <_puts_r+0x88>
	...

0800e7f0 <puts>:
 800e7f0:	4b02      	ldr	r3, [pc, #8]	@ (800e7fc <puts+0xc>)
 800e7f2:	4601      	mov	r1, r0
 800e7f4:	6818      	ldr	r0, [r3, #0]
 800e7f6:	f7ff bfa5 	b.w	800e744 <_puts_r>
 800e7fa:	bf00      	nop
 800e7fc:	2000056c 	.word	0x2000056c

0800e800 <memcmp>:
 800e800:	b510      	push	{r4, lr}
 800e802:	3901      	subs	r1, #1
 800e804:	4402      	add	r2, r0
 800e806:	4290      	cmp	r0, r2
 800e808:	d101      	bne.n	800e80e <memcmp+0xe>
 800e80a:	2000      	movs	r0, #0
 800e80c:	e005      	b.n	800e81a <memcmp+0x1a>
 800e80e:	7803      	ldrb	r3, [r0, #0]
 800e810:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e814:	42a3      	cmp	r3, r4
 800e816:	d001      	beq.n	800e81c <memcmp+0x1c>
 800e818:	1b18      	subs	r0, r3, r4
 800e81a:	bd10      	pop	{r4, pc}
 800e81c:	3001      	adds	r0, #1
 800e81e:	e7f2      	b.n	800e806 <memcmp+0x6>

0800e820 <memset>:
 800e820:	4402      	add	r2, r0
 800e822:	4603      	mov	r3, r0
 800e824:	4293      	cmp	r3, r2
 800e826:	d100      	bne.n	800e82a <memset+0xa>
 800e828:	4770      	bx	lr
 800e82a:	f803 1b01 	strb.w	r1, [r3], #1
 800e82e:	e7f9      	b.n	800e824 <memset+0x4>

0800e830 <_sbrk_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	@ (800e84c <_sbrk_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7fa fa54 	bl	8008ce8 <_sbrk>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_sbrk_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_sbrk_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	20000f1c 	.word	0x20000f1c

0800e850 <__errno>:
 800e850:	4b01      	ldr	r3, [pc, #4]	@ (800e858 <__errno+0x8>)
 800e852:	6818      	ldr	r0, [r3, #0]
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	2000056c 	.word	0x2000056c

0800e85c <__libc_init_array>:
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	4d0d      	ldr	r5, [pc, #52]	@ (800e894 <__libc_init_array+0x38>)
 800e860:	4c0d      	ldr	r4, [pc, #52]	@ (800e898 <__libc_init_array+0x3c>)
 800e862:	1b64      	subs	r4, r4, r5
 800e864:	10a4      	asrs	r4, r4, #2
 800e866:	2600      	movs	r6, #0
 800e868:	42a6      	cmp	r6, r4
 800e86a:	d109      	bne.n	800e880 <__libc_init_array+0x24>
 800e86c:	4d0b      	ldr	r5, [pc, #44]	@ (800e89c <__libc_init_array+0x40>)
 800e86e:	4c0c      	ldr	r4, [pc, #48]	@ (800e8a0 <__libc_init_array+0x44>)
 800e870:	f000 fd92 	bl	800f398 <_init>
 800e874:	1b64      	subs	r4, r4, r5
 800e876:	10a4      	asrs	r4, r4, #2
 800e878:	2600      	movs	r6, #0
 800e87a:	42a6      	cmp	r6, r4
 800e87c:	d105      	bne.n	800e88a <__libc_init_array+0x2e>
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	f855 3b04 	ldr.w	r3, [r5], #4
 800e884:	4798      	blx	r3
 800e886:	3601      	adds	r6, #1
 800e888:	e7ee      	b.n	800e868 <__libc_init_array+0xc>
 800e88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e88e:	4798      	blx	r3
 800e890:	3601      	adds	r6, #1
 800e892:	e7f2      	b.n	800e87a <__libc_init_array+0x1e>
 800e894:	0800f81c 	.word	0x0800f81c
 800e898:	0800f81c 	.word	0x0800f81c
 800e89c:	0800f81c 	.word	0x0800f81c
 800e8a0:	0800f820 	.word	0x0800f820

0800e8a4 <__retarget_lock_init_recursive>:
 800e8a4:	4770      	bx	lr

0800e8a6 <__retarget_lock_acquire_recursive>:
 800e8a6:	4770      	bx	lr

0800e8a8 <__retarget_lock_release_recursive>:
 800e8a8:	4770      	bx	lr

0800e8aa <memcpy>:
 800e8aa:	440a      	add	r2, r1
 800e8ac:	4291      	cmp	r1, r2
 800e8ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e8b2:	d100      	bne.n	800e8b6 <memcpy+0xc>
 800e8b4:	4770      	bx	lr
 800e8b6:	b510      	push	{r4, lr}
 800e8b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8c0:	4291      	cmp	r1, r2
 800e8c2:	d1f9      	bne.n	800e8b8 <memcpy+0xe>
 800e8c4:	bd10      	pop	{r4, pc}
	...

0800e8c8 <_free_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	d041      	beq.n	800e954 <_free_r+0x8c>
 800e8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d4:	1f0c      	subs	r4, r1, #4
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfb8      	it	lt
 800e8da:	18e4      	addlt	r4, r4, r3
 800e8dc:	f7ff fe52 	bl	800e584 <__malloc_lock>
 800e8e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e958 <_free_r+0x90>)
 800e8e2:	6813      	ldr	r3, [r2, #0]
 800e8e4:	b933      	cbnz	r3, 800e8f4 <_free_r+0x2c>
 800e8e6:	6063      	str	r3, [r4, #4]
 800e8e8:	6014      	str	r4, [r2, #0]
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8f0:	f7ff be4e 	b.w	800e590 <__malloc_unlock>
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	d908      	bls.n	800e90a <_free_r+0x42>
 800e8f8:	6820      	ldr	r0, [r4, #0]
 800e8fa:	1821      	adds	r1, r4, r0
 800e8fc:	428b      	cmp	r3, r1
 800e8fe:	bf01      	itttt	eq
 800e900:	6819      	ldreq	r1, [r3, #0]
 800e902:	685b      	ldreq	r3, [r3, #4]
 800e904:	1809      	addeq	r1, r1, r0
 800e906:	6021      	streq	r1, [r4, #0]
 800e908:	e7ed      	b.n	800e8e6 <_free_r+0x1e>
 800e90a:	461a      	mov	r2, r3
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	b10b      	cbz	r3, 800e914 <_free_r+0x4c>
 800e910:	42a3      	cmp	r3, r4
 800e912:	d9fa      	bls.n	800e90a <_free_r+0x42>
 800e914:	6811      	ldr	r1, [r2, #0]
 800e916:	1850      	adds	r0, r2, r1
 800e918:	42a0      	cmp	r0, r4
 800e91a:	d10b      	bne.n	800e934 <_free_r+0x6c>
 800e91c:	6820      	ldr	r0, [r4, #0]
 800e91e:	4401      	add	r1, r0
 800e920:	1850      	adds	r0, r2, r1
 800e922:	4283      	cmp	r3, r0
 800e924:	6011      	str	r1, [r2, #0]
 800e926:	d1e0      	bne.n	800e8ea <_free_r+0x22>
 800e928:	6818      	ldr	r0, [r3, #0]
 800e92a:	685b      	ldr	r3, [r3, #4]
 800e92c:	6053      	str	r3, [r2, #4]
 800e92e:	4408      	add	r0, r1
 800e930:	6010      	str	r0, [r2, #0]
 800e932:	e7da      	b.n	800e8ea <_free_r+0x22>
 800e934:	d902      	bls.n	800e93c <_free_r+0x74>
 800e936:	230c      	movs	r3, #12
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	e7d6      	b.n	800e8ea <_free_r+0x22>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	1821      	adds	r1, r4, r0
 800e940:	428b      	cmp	r3, r1
 800e942:	bf04      	itt	eq
 800e944:	6819      	ldreq	r1, [r3, #0]
 800e946:	685b      	ldreq	r3, [r3, #4]
 800e948:	6063      	str	r3, [r4, #4]
 800e94a:	bf04      	itt	eq
 800e94c:	1809      	addeq	r1, r1, r0
 800e94e:	6021      	streq	r1, [r4, #0]
 800e950:	6054      	str	r4, [r2, #4]
 800e952:	e7ca      	b.n	800e8ea <_free_r+0x22>
 800e954:	bd38      	pop	{r3, r4, r5, pc}
 800e956:	bf00      	nop
 800e958:	20000dd8 	.word	0x20000dd8

0800e95c <__sfputc_r>:
 800e95c:	6893      	ldr	r3, [r2, #8]
 800e95e:	3b01      	subs	r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	b410      	push	{r4}
 800e964:	6093      	str	r3, [r2, #8]
 800e966:	da08      	bge.n	800e97a <__sfputc_r+0x1e>
 800e968:	6994      	ldr	r4, [r2, #24]
 800e96a:	42a3      	cmp	r3, r4
 800e96c:	db01      	blt.n	800e972 <__sfputc_r+0x16>
 800e96e:	290a      	cmp	r1, #10
 800e970:	d103      	bne.n	800e97a <__sfputc_r+0x1e>
 800e972:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e976:	f000 bbb0 	b.w	800f0da <__swbuf_r>
 800e97a:	6813      	ldr	r3, [r2, #0]
 800e97c:	1c58      	adds	r0, r3, #1
 800e97e:	6010      	str	r0, [r2, #0]
 800e980:	7019      	strb	r1, [r3, #0]
 800e982:	4608      	mov	r0, r1
 800e984:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <__sfputs_r>:
 800e98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	4614      	mov	r4, r2
 800e992:	18d5      	adds	r5, r2, r3
 800e994:	42ac      	cmp	r4, r5
 800e996:	d101      	bne.n	800e99c <__sfputs_r+0x12>
 800e998:	2000      	movs	r0, #0
 800e99a:	e007      	b.n	800e9ac <__sfputs_r+0x22>
 800e99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a0:	463a      	mov	r2, r7
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ffda 	bl	800e95c <__sfputc_r>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d1f3      	bne.n	800e994 <__sfputs_r+0xa>
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9b0 <_vfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	b09d      	sub	sp, #116	@ 0x74
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	4698      	mov	r8, r3
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b118      	cbz	r0, 800e9c8 <_vfiprintf_r+0x18>
 800e9c0:	6a03      	ldr	r3, [r0, #32]
 800e9c2:	b90b      	cbnz	r3, 800e9c8 <_vfiprintf_r+0x18>
 800e9c4:	f7ff fe76 	bl	800e6b4 <__sinit>
 800e9c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9ca:	07d9      	lsls	r1, r3, #31
 800e9cc:	d405      	bmi.n	800e9da <_vfiprintf_r+0x2a>
 800e9ce:	89ab      	ldrh	r3, [r5, #12]
 800e9d0:	059a      	lsls	r2, r3, #22
 800e9d2:	d402      	bmi.n	800e9da <_vfiprintf_r+0x2a>
 800e9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9d6:	f7ff ff66 	bl	800e8a6 <__retarget_lock_acquire_recursive>
 800e9da:	89ab      	ldrh	r3, [r5, #12]
 800e9dc:	071b      	lsls	r3, r3, #28
 800e9de:	d501      	bpl.n	800e9e4 <_vfiprintf_r+0x34>
 800e9e0:	692b      	ldr	r3, [r5, #16]
 800e9e2:	b99b      	cbnz	r3, 800ea0c <_vfiprintf_r+0x5c>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f000 fbb6 	bl	800f158 <__swsetup_r>
 800e9ec:	b170      	cbz	r0, 800ea0c <_vfiprintf_r+0x5c>
 800e9ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f0:	07dc      	lsls	r4, r3, #31
 800e9f2:	d504      	bpl.n	800e9fe <_vfiprintf_r+0x4e>
 800e9f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9f8:	b01d      	add	sp, #116	@ 0x74
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	89ab      	ldrh	r3, [r5, #12]
 800ea00:	0598      	lsls	r0, r3, #22
 800ea02:	d4f7      	bmi.n	800e9f4 <_vfiprintf_r+0x44>
 800ea04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea06:	f7ff ff4f 	bl	800e8a8 <__retarget_lock_release_recursive>
 800ea0a:	e7f3      	b.n	800e9f4 <_vfiprintf_r+0x44>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea10:	2320      	movs	r3, #32
 800ea12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea1a:	2330      	movs	r3, #48	@ 0x30
 800ea1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebcc <_vfiprintf_r+0x21c>
 800ea20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea24:	f04f 0901 	mov.w	r9, #1
 800ea28:	4623      	mov	r3, r4
 800ea2a:	469a      	mov	sl, r3
 800ea2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea30:	b10a      	cbz	r2, 800ea36 <_vfiprintf_r+0x86>
 800ea32:	2a25      	cmp	r2, #37	@ 0x25
 800ea34:	d1f9      	bne.n	800ea2a <_vfiprintf_r+0x7a>
 800ea36:	ebba 0b04 	subs.w	fp, sl, r4
 800ea3a:	d00b      	beq.n	800ea54 <_vfiprintf_r+0xa4>
 800ea3c:	465b      	mov	r3, fp
 800ea3e:	4622      	mov	r2, r4
 800ea40:	4629      	mov	r1, r5
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7ff ffa1 	bl	800e98a <__sfputs_r>
 800ea48:	3001      	adds	r0, #1
 800ea4a:	f000 80a7 	beq.w	800eb9c <_vfiprintf_r+0x1ec>
 800ea4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea50:	445a      	add	r2, fp
 800ea52:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea54:	f89a 3000 	ldrb.w	r3, [sl]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 809f 	beq.w	800eb9c <_vfiprintf_r+0x1ec>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea68:	f10a 0a01 	add.w	sl, sl, #1
 800ea6c:	9304      	str	r3, [sp, #16]
 800ea6e:	9307      	str	r3, [sp, #28]
 800ea70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea74:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea76:	4654      	mov	r4, sl
 800ea78:	2205      	movs	r2, #5
 800ea7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea7e:	4853      	ldr	r0, [pc, #332]	@ (800ebcc <_vfiprintf_r+0x21c>)
 800ea80:	f7f1 fbae 	bl	80001e0 <memchr>
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	b9d8      	cbnz	r0, 800eac0 <_vfiprintf_r+0x110>
 800ea88:	06d1      	lsls	r1, r2, #27
 800ea8a:	bf44      	itt	mi
 800ea8c:	2320      	movmi	r3, #32
 800ea8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea92:	0713      	lsls	r3, r2, #28
 800ea94:	bf44      	itt	mi
 800ea96:	232b      	movmi	r3, #43	@ 0x2b
 800ea98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eaa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaa2:	d015      	beq.n	800ead0 <_vfiprintf_r+0x120>
 800eaa4:	9a07      	ldr	r2, [sp, #28]
 800eaa6:	4654      	mov	r4, sl
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	f04f 0c0a 	mov.w	ip, #10
 800eaae:	4621      	mov	r1, r4
 800eab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eab4:	3b30      	subs	r3, #48	@ 0x30
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	d94b      	bls.n	800eb52 <_vfiprintf_r+0x1a2>
 800eaba:	b1b0      	cbz	r0, 800eaea <_vfiprintf_r+0x13a>
 800eabc:	9207      	str	r2, [sp, #28]
 800eabe:	e014      	b.n	800eaea <_vfiprintf_r+0x13a>
 800eac0:	eba0 0308 	sub.w	r3, r0, r8
 800eac4:	fa09 f303 	lsl.w	r3, r9, r3
 800eac8:	4313      	orrs	r3, r2
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	46a2      	mov	sl, r4
 800eace:	e7d2      	b.n	800ea76 <_vfiprintf_r+0xc6>
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	1d19      	adds	r1, r3, #4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	9103      	str	r1, [sp, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	bfbb      	ittet	lt
 800eadc:	425b      	neglt	r3, r3
 800eade:	f042 0202 	orrlt.w	r2, r2, #2
 800eae2:	9307      	strge	r3, [sp, #28]
 800eae4:	9307      	strlt	r3, [sp, #28]
 800eae6:	bfb8      	it	lt
 800eae8:	9204      	strlt	r2, [sp, #16]
 800eaea:	7823      	ldrb	r3, [r4, #0]
 800eaec:	2b2e      	cmp	r3, #46	@ 0x2e
 800eaee:	d10a      	bne.n	800eb06 <_vfiprintf_r+0x156>
 800eaf0:	7863      	ldrb	r3, [r4, #1]
 800eaf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaf4:	d132      	bne.n	800eb5c <_vfiprintf_r+0x1ac>
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	1d1a      	adds	r2, r3, #4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	9203      	str	r2, [sp, #12]
 800eafe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb02:	3402      	adds	r4, #2
 800eb04:	9305      	str	r3, [sp, #20]
 800eb06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebdc <_vfiprintf_r+0x22c>
 800eb0a:	7821      	ldrb	r1, [r4, #0]
 800eb0c:	2203      	movs	r2, #3
 800eb0e:	4650      	mov	r0, sl
 800eb10:	f7f1 fb66 	bl	80001e0 <memchr>
 800eb14:	b138      	cbz	r0, 800eb26 <_vfiprintf_r+0x176>
 800eb16:	9b04      	ldr	r3, [sp, #16]
 800eb18:	eba0 000a 	sub.w	r0, r0, sl
 800eb1c:	2240      	movs	r2, #64	@ 0x40
 800eb1e:	4082      	lsls	r2, r0
 800eb20:	4313      	orrs	r3, r2
 800eb22:	3401      	adds	r4, #1
 800eb24:	9304      	str	r3, [sp, #16]
 800eb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2a:	4829      	ldr	r0, [pc, #164]	@ (800ebd0 <_vfiprintf_r+0x220>)
 800eb2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb30:	2206      	movs	r2, #6
 800eb32:	f7f1 fb55 	bl	80001e0 <memchr>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d03f      	beq.n	800ebba <_vfiprintf_r+0x20a>
 800eb3a:	4b26      	ldr	r3, [pc, #152]	@ (800ebd4 <_vfiprintf_r+0x224>)
 800eb3c:	bb1b      	cbnz	r3, 800eb86 <_vfiprintf_r+0x1d6>
 800eb3e:	9b03      	ldr	r3, [sp, #12]
 800eb40:	3307      	adds	r3, #7
 800eb42:	f023 0307 	bic.w	r3, r3, #7
 800eb46:	3308      	adds	r3, #8
 800eb48:	9303      	str	r3, [sp, #12]
 800eb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb4c:	443b      	add	r3, r7
 800eb4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb50:	e76a      	b.n	800ea28 <_vfiprintf_r+0x78>
 800eb52:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb56:	460c      	mov	r4, r1
 800eb58:	2001      	movs	r0, #1
 800eb5a:	e7a8      	b.n	800eaae <_vfiprintf_r+0xfe>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	3401      	adds	r4, #1
 800eb60:	9305      	str	r3, [sp, #20]
 800eb62:	4619      	mov	r1, r3
 800eb64:	f04f 0c0a 	mov.w	ip, #10
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb6e:	3a30      	subs	r2, #48	@ 0x30
 800eb70:	2a09      	cmp	r2, #9
 800eb72:	d903      	bls.n	800eb7c <_vfiprintf_r+0x1cc>
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d0c6      	beq.n	800eb06 <_vfiprintf_r+0x156>
 800eb78:	9105      	str	r1, [sp, #20]
 800eb7a:	e7c4      	b.n	800eb06 <_vfiprintf_r+0x156>
 800eb7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb80:	4604      	mov	r4, r0
 800eb82:	2301      	movs	r3, #1
 800eb84:	e7f0      	b.n	800eb68 <_vfiprintf_r+0x1b8>
 800eb86:	ab03      	add	r3, sp, #12
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	462a      	mov	r2, r5
 800eb8c:	4b12      	ldr	r3, [pc, #72]	@ (800ebd8 <_vfiprintf_r+0x228>)
 800eb8e:	a904      	add	r1, sp, #16
 800eb90:	4630      	mov	r0, r6
 800eb92:	f3af 8000 	nop.w
 800eb96:	4607      	mov	r7, r0
 800eb98:	1c78      	adds	r0, r7, #1
 800eb9a:	d1d6      	bne.n	800eb4a <_vfiprintf_r+0x19a>
 800eb9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb9e:	07d9      	lsls	r1, r3, #31
 800eba0:	d405      	bmi.n	800ebae <_vfiprintf_r+0x1fe>
 800eba2:	89ab      	ldrh	r3, [r5, #12]
 800eba4:	059a      	lsls	r2, r3, #22
 800eba6:	d402      	bmi.n	800ebae <_vfiprintf_r+0x1fe>
 800eba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebaa:	f7ff fe7d 	bl	800e8a8 <__retarget_lock_release_recursive>
 800ebae:	89ab      	ldrh	r3, [r5, #12]
 800ebb0:	065b      	lsls	r3, r3, #25
 800ebb2:	f53f af1f 	bmi.w	800e9f4 <_vfiprintf_r+0x44>
 800ebb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebb8:	e71e      	b.n	800e9f8 <_vfiprintf_r+0x48>
 800ebba:	ab03      	add	r3, sp, #12
 800ebbc:	9300      	str	r3, [sp, #0]
 800ebbe:	462a      	mov	r2, r5
 800ebc0:	4b05      	ldr	r3, [pc, #20]	@ (800ebd8 <_vfiprintf_r+0x228>)
 800ebc2:	a904      	add	r1, sp, #16
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f000 f879 	bl	800ecbc <_printf_i>
 800ebca:	e7e4      	b.n	800eb96 <_vfiprintf_r+0x1e6>
 800ebcc:	0800f7e0 	.word	0x0800f7e0
 800ebd0:	0800f7ea 	.word	0x0800f7ea
 800ebd4:	00000000 	.word	0x00000000
 800ebd8:	0800e98b 	.word	0x0800e98b
 800ebdc:	0800f7e6 	.word	0x0800f7e6

0800ebe0 <_printf_common>:
 800ebe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe4:	4616      	mov	r6, r2
 800ebe6:	4698      	mov	r8, r3
 800ebe8:	688a      	ldr	r2, [r1, #8]
 800ebea:	690b      	ldr	r3, [r1, #16]
 800ebec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	bfb8      	it	lt
 800ebf4:	4613      	movlt	r3, r2
 800ebf6:	6033      	str	r3, [r6, #0]
 800ebf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ebfc:	4607      	mov	r7, r0
 800ebfe:	460c      	mov	r4, r1
 800ec00:	b10a      	cbz	r2, 800ec06 <_printf_common+0x26>
 800ec02:	3301      	adds	r3, #1
 800ec04:	6033      	str	r3, [r6, #0]
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	0699      	lsls	r1, r3, #26
 800ec0a:	bf42      	ittt	mi
 800ec0c:	6833      	ldrmi	r3, [r6, #0]
 800ec0e:	3302      	addmi	r3, #2
 800ec10:	6033      	strmi	r3, [r6, #0]
 800ec12:	6825      	ldr	r5, [r4, #0]
 800ec14:	f015 0506 	ands.w	r5, r5, #6
 800ec18:	d106      	bne.n	800ec28 <_printf_common+0x48>
 800ec1a:	f104 0a19 	add.w	sl, r4, #25
 800ec1e:	68e3      	ldr	r3, [r4, #12]
 800ec20:	6832      	ldr	r2, [r6, #0]
 800ec22:	1a9b      	subs	r3, r3, r2
 800ec24:	42ab      	cmp	r3, r5
 800ec26:	dc26      	bgt.n	800ec76 <_printf_common+0x96>
 800ec28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec2c:	6822      	ldr	r2, [r4, #0]
 800ec2e:	3b00      	subs	r3, #0
 800ec30:	bf18      	it	ne
 800ec32:	2301      	movne	r3, #1
 800ec34:	0692      	lsls	r2, r2, #26
 800ec36:	d42b      	bmi.n	800ec90 <_printf_common+0xb0>
 800ec38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec3c:	4641      	mov	r1, r8
 800ec3e:	4638      	mov	r0, r7
 800ec40:	47c8      	blx	r9
 800ec42:	3001      	adds	r0, #1
 800ec44:	d01e      	beq.n	800ec84 <_printf_common+0xa4>
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	6922      	ldr	r2, [r4, #16]
 800ec4a:	f003 0306 	and.w	r3, r3, #6
 800ec4e:	2b04      	cmp	r3, #4
 800ec50:	bf02      	ittt	eq
 800ec52:	68e5      	ldreq	r5, [r4, #12]
 800ec54:	6833      	ldreq	r3, [r6, #0]
 800ec56:	1aed      	subeq	r5, r5, r3
 800ec58:	68a3      	ldr	r3, [r4, #8]
 800ec5a:	bf0c      	ite	eq
 800ec5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec60:	2500      	movne	r5, #0
 800ec62:	4293      	cmp	r3, r2
 800ec64:	bfc4      	itt	gt
 800ec66:	1a9b      	subgt	r3, r3, r2
 800ec68:	18ed      	addgt	r5, r5, r3
 800ec6a:	2600      	movs	r6, #0
 800ec6c:	341a      	adds	r4, #26
 800ec6e:	42b5      	cmp	r5, r6
 800ec70:	d11a      	bne.n	800eca8 <_printf_common+0xc8>
 800ec72:	2000      	movs	r0, #0
 800ec74:	e008      	b.n	800ec88 <_printf_common+0xa8>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4652      	mov	r2, sl
 800ec7a:	4641      	mov	r1, r8
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	47c8      	blx	r9
 800ec80:	3001      	adds	r0, #1
 800ec82:	d103      	bne.n	800ec8c <_printf_common+0xac>
 800ec84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec8c:	3501      	adds	r5, #1
 800ec8e:	e7c6      	b.n	800ec1e <_printf_common+0x3e>
 800ec90:	18e1      	adds	r1, r4, r3
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	2030      	movs	r0, #48	@ 0x30
 800ec96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec9a:	4422      	add	r2, r4
 800ec9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eca0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eca4:	3302      	adds	r3, #2
 800eca6:	e7c7      	b.n	800ec38 <_printf_common+0x58>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	4622      	mov	r2, r4
 800ecac:	4641      	mov	r1, r8
 800ecae:	4638      	mov	r0, r7
 800ecb0:	47c8      	blx	r9
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	d0e6      	beq.n	800ec84 <_printf_common+0xa4>
 800ecb6:	3601      	adds	r6, #1
 800ecb8:	e7d9      	b.n	800ec6e <_printf_common+0x8e>
	...

0800ecbc <_printf_i>:
 800ecbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc0:	7e0f      	ldrb	r7, [r1, #24]
 800ecc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ecc4:	2f78      	cmp	r7, #120	@ 0x78
 800ecc6:	4691      	mov	r9, r2
 800ecc8:	4680      	mov	r8, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	469a      	mov	sl, r3
 800ecce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ecd2:	d807      	bhi.n	800ece4 <_printf_i+0x28>
 800ecd4:	2f62      	cmp	r7, #98	@ 0x62
 800ecd6:	d80a      	bhi.n	800ecee <_printf_i+0x32>
 800ecd8:	2f00      	cmp	r7, #0
 800ecda:	f000 80d2 	beq.w	800ee82 <_printf_i+0x1c6>
 800ecde:	2f58      	cmp	r7, #88	@ 0x58
 800ece0:	f000 80b9 	beq.w	800ee56 <_printf_i+0x19a>
 800ece4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ece8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ecec:	e03a      	b.n	800ed64 <_printf_i+0xa8>
 800ecee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ecf2:	2b15      	cmp	r3, #21
 800ecf4:	d8f6      	bhi.n	800ece4 <_printf_i+0x28>
 800ecf6:	a101      	add	r1, pc, #4	@ (adr r1, 800ecfc <_printf_i+0x40>)
 800ecf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecfc:	0800ed55 	.word	0x0800ed55
 800ed00:	0800ed69 	.word	0x0800ed69
 800ed04:	0800ece5 	.word	0x0800ece5
 800ed08:	0800ece5 	.word	0x0800ece5
 800ed0c:	0800ece5 	.word	0x0800ece5
 800ed10:	0800ece5 	.word	0x0800ece5
 800ed14:	0800ed69 	.word	0x0800ed69
 800ed18:	0800ece5 	.word	0x0800ece5
 800ed1c:	0800ece5 	.word	0x0800ece5
 800ed20:	0800ece5 	.word	0x0800ece5
 800ed24:	0800ece5 	.word	0x0800ece5
 800ed28:	0800ee69 	.word	0x0800ee69
 800ed2c:	0800ed93 	.word	0x0800ed93
 800ed30:	0800ee23 	.word	0x0800ee23
 800ed34:	0800ece5 	.word	0x0800ece5
 800ed38:	0800ece5 	.word	0x0800ece5
 800ed3c:	0800ee8b 	.word	0x0800ee8b
 800ed40:	0800ece5 	.word	0x0800ece5
 800ed44:	0800ed93 	.word	0x0800ed93
 800ed48:	0800ece5 	.word	0x0800ece5
 800ed4c:	0800ece5 	.word	0x0800ece5
 800ed50:	0800ee2b 	.word	0x0800ee2b
 800ed54:	6833      	ldr	r3, [r6, #0]
 800ed56:	1d1a      	adds	r2, r3, #4
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6032      	str	r2, [r6, #0]
 800ed5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed64:	2301      	movs	r3, #1
 800ed66:	e09d      	b.n	800eea4 <_printf_i+0x1e8>
 800ed68:	6833      	ldr	r3, [r6, #0]
 800ed6a:	6820      	ldr	r0, [r4, #0]
 800ed6c:	1d19      	adds	r1, r3, #4
 800ed6e:	6031      	str	r1, [r6, #0]
 800ed70:	0606      	lsls	r6, r0, #24
 800ed72:	d501      	bpl.n	800ed78 <_printf_i+0xbc>
 800ed74:	681d      	ldr	r5, [r3, #0]
 800ed76:	e003      	b.n	800ed80 <_printf_i+0xc4>
 800ed78:	0645      	lsls	r5, r0, #25
 800ed7a:	d5fb      	bpl.n	800ed74 <_printf_i+0xb8>
 800ed7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed80:	2d00      	cmp	r5, #0
 800ed82:	da03      	bge.n	800ed8c <_printf_i+0xd0>
 800ed84:	232d      	movs	r3, #45	@ 0x2d
 800ed86:	426d      	negs	r5, r5
 800ed88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed8c:	4859      	ldr	r0, [pc, #356]	@ (800eef4 <_printf_i+0x238>)
 800ed8e:	230a      	movs	r3, #10
 800ed90:	e011      	b.n	800edb6 <_printf_i+0xfa>
 800ed92:	6821      	ldr	r1, [r4, #0]
 800ed94:	6833      	ldr	r3, [r6, #0]
 800ed96:	0608      	lsls	r0, r1, #24
 800ed98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed9c:	d402      	bmi.n	800eda4 <_printf_i+0xe8>
 800ed9e:	0649      	lsls	r1, r1, #25
 800eda0:	bf48      	it	mi
 800eda2:	b2ad      	uxthmi	r5, r5
 800eda4:	2f6f      	cmp	r7, #111	@ 0x6f
 800eda6:	4853      	ldr	r0, [pc, #332]	@ (800eef4 <_printf_i+0x238>)
 800eda8:	6033      	str	r3, [r6, #0]
 800edaa:	bf14      	ite	ne
 800edac:	230a      	movne	r3, #10
 800edae:	2308      	moveq	r3, #8
 800edb0:	2100      	movs	r1, #0
 800edb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800edb6:	6866      	ldr	r6, [r4, #4]
 800edb8:	60a6      	str	r6, [r4, #8]
 800edba:	2e00      	cmp	r6, #0
 800edbc:	bfa2      	ittt	ge
 800edbe:	6821      	ldrge	r1, [r4, #0]
 800edc0:	f021 0104 	bicge.w	r1, r1, #4
 800edc4:	6021      	strge	r1, [r4, #0]
 800edc6:	b90d      	cbnz	r5, 800edcc <_printf_i+0x110>
 800edc8:	2e00      	cmp	r6, #0
 800edca:	d04b      	beq.n	800ee64 <_printf_i+0x1a8>
 800edcc:	4616      	mov	r6, r2
 800edce:	fbb5 f1f3 	udiv	r1, r5, r3
 800edd2:	fb03 5711 	mls	r7, r3, r1, r5
 800edd6:	5dc7      	ldrb	r7, [r0, r7]
 800edd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eddc:	462f      	mov	r7, r5
 800edde:	42bb      	cmp	r3, r7
 800ede0:	460d      	mov	r5, r1
 800ede2:	d9f4      	bls.n	800edce <_printf_i+0x112>
 800ede4:	2b08      	cmp	r3, #8
 800ede6:	d10b      	bne.n	800ee00 <_printf_i+0x144>
 800ede8:	6823      	ldr	r3, [r4, #0]
 800edea:	07df      	lsls	r7, r3, #31
 800edec:	d508      	bpl.n	800ee00 <_printf_i+0x144>
 800edee:	6923      	ldr	r3, [r4, #16]
 800edf0:	6861      	ldr	r1, [r4, #4]
 800edf2:	4299      	cmp	r1, r3
 800edf4:	bfde      	ittt	le
 800edf6:	2330      	movle	r3, #48	@ 0x30
 800edf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edfc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ee00:	1b92      	subs	r2, r2, r6
 800ee02:	6122      	str	r2, [r4, #16]
 800ee04:	f8cd a000 	str.w	sl, [sp]
 800ee08:	464b      	mov	r3, r9
 800ee0a:	aa03      	add	r2, sp, #12
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4640      	mov	r0, r8
 800ee10:	f7ff fee6 	bl	800ebe0 <_printf_common>
 800ee14:	3001      	adds	r0, #1
 800ee16:	d14a      	bne.n	800eeae <_printf_i+0x1f2>
 800ee18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee1c:	b004      	add	sp, #16
 800ee1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	f043 0320 	orr.w	r3, r3, #32
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	4833      	ldr	r0, [pc, #204]	@ (800eef8 <_printf_i+0x23c>)
 800ee2c:	2778      	movs	r7, #120	@ 0x78
 800ee2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee32:	6823      	ldr	r3, [r4, #0]
 800ee34:	6831      	ldr	r1, [r6, #0]
 800ee36:	061f      	lsls	r7, r3, #24
 800ee38:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee3c:	d402      	bmi.n	800ee44 <_printf_i+0x188>
 800ee3e:	065f      	lsls	r7, r3, #25
 800ee40:	bf48      	it	mi
 800ee42:	b2ad      	uxthmi	r5, r5
 800ee44:	6031      	str	r1, [r6, #0]
 800ee46:	07d9      	lsls	r1, r3, #31
 800ee48:	bf44      	itt	mi
 800ee4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee4e:	6023      	strmi	r3, [r4, #0]
 800ee50:	b11d      	cbz	r5, 800ee5a <_printf_i+0x19e>
 800ee52:	2310      	movs	r3, #16
 800ee54:	e7ac      	b.n	800edb0 <_printf_i+0xf4>
 800ee56:	4827      	ldr	r0, [pc, #156]	@ (800eef4 <_printf_i+0x238>)
 800ee58:	e7e9      	b.n	800ee2e <_printf_i+0x172>
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	f023 0320 	bic.w	r3, r3, #32
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	e7f6      	b.n	800ee52 <_printf_i+0x196>
 800ee64:	4616      	mov	r6, r2
 800ee66:	e7bd      	b.n	800ede4 <_printf_i+0x128>
 800ee68:	6833      	ldr	r3, [r6, #0]
 800ee6a:	6825      	ldr	r5, [r4, #0]
 800ee6c:	6961      	ldr	r1, [r4, #20]
 800ee6e:	1d18      	adds	r0, r3, #4
 800ee70:	6030      	str	r0, [r6, #0]
 800ee72:	062e      	lsls	r6, r5, #24
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	d501      	bpl.n	800ee7c <_printf_i+0x1c0>
 800ee78:	6019      	str	r1, [r3, #0]
 800ee7a:	e002      	b.n	800ee82 <_printf_i+0x1c6>
 800ee7c:	0668      	lsls	r0, r5, #25
 800ee7e:	d5fb      	bpl.n	800ee78 <_printf_i+0x1bc>
 800ee80:	8019      	strh	r1, [r3, #0]
 800ee82:	2300      	movs	r3, #0
 800ee84:	6123      	str	r3, [r4, #16]
 800ee86:	4616      	mov	r6, r2
 800ee88:	e7bc      	b.n	800ee04 <_printf_i+0x148>
 800ee8a:	6833      	ldr	r3, [r6, #0]
 800ee8c:	1d1a      	adds	r2, r3, #4
 800ee8e:	6032      	str	r2, [r6, #0]
 800ee90:	681e      	ldr	r6, [r3, #0]
 800ee92:	6862      	ldr	r2, [r4, #4]
 800ee94:	2100      	movs	r1, #0
 800ee96:	4630      	mov	r0, r6
 800ee98:	f7f1 f9a2 	bl	80001e0 <memchr>
 800ee9c:	b108      	cbz	r0, 800eea2 <_printf_i+0x1e6>
 800ee9e:	1b80      	subs	r0, r0, r6
 800eea0:	6060      	str	r0, [r4, #4]
 800eea2:	6863      	ldr	r3, [r4, #4]
 800eea4:	6123      	str	r3, [r4, #16]
 800eea6:	2300      	movs	r3, #0
 800eea8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeac:	e7aa      	b.n	800ee04 <_printf_i+0x148>
 800eeae:	6923      	ldr	r3, [r4, #16]
 800eeb0:	4632      	mov	r2, r6
 800eeb2:	4649      	mov	r1, r9
 800eeb4:	4640      	mov	r0, r8
 800eeb6:	47d0      	blx	sl
 800eeb8:	3001      	adds	r0, #1
 800eeba:	d0ad      	beq.n	800ee18 <_printf_i+0x15c>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	079b      	lsls	r3, r3, #30
 800eec0:	d413      	bmi.n	800eeea <_printf_i+0x22e>
 800eec2:	68e0      	ldr	r0, [r4, #12]
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	4298      	cmp	r0, r3
 800eec8:	bfb8      	it	lt
 800eeca:	4618      	movlt	r0, r3
 800eecc:	e7a6      	b.n	800ee1c <_printf_i+0x160>
 800eece:	2301      	movs	r3, #1
 800eed0:	4632      	mov	r2, r6
 800eed2:	4649      	mov	r1, r9
 800eed4:	4640      	mov	r0, r8
 800eed6:	47d0      	blx	sl
 800eed8:	3001      	adds	r0, #1
 800eeda:	d09d      	beq.n	800ee18 <_printf_i+0x15c>
 800eedc:	3501      	adds	r5, #1
 800eede:	68e3      	ldr	r3, [r4, #12]
 800eee0:	9903      	ldr	r1, [sp, #12]
 800eee2:	1a5b      	subs	r3, r3, r1
 800eee4:	42ab      	cmp	r3, r5
 800eee6:	dcf2      	bgt.n	800eece <_printf_i+0x212>
 800eee8:	e7eb      	b.n	800eec2 <_printf_i+0x206>
 800eeea:	2500      	movs	r5, #0
 800eeec:	f104 0619 	add.w	r6, r4, #25
 800eef0:	e7f5      	b.n	800eede <_printf_i+0x222>
 800eef2:	bf00      	nop
 800eef4:	0800f7f1 	.word	0x0800f7f1
 800eef8:	0800f802 	.word	0x0800f802

0800eefc <__sflush_r>:
 800eefc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef04:	0716      	lsls	r6, r2, #28
 800ef06:	4605      	mov	r5, r0
 800ef08:	460c      	mov	r4, r1
 800ef0a:	d454      	bmi.n	800efb6 <__sflush_r+0xba>
 800ef0c:	684b      	ldr	r3, [r1, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	dc02      	bgt.n	800ef18 <__sflush_r+0x1c>
 800ef12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dd48      	ble.n	800efaa <__sflush_r+0xae>
 800ef18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef1a:	2e00      	cmp	r6, #0
 800ef1c:	d045      	beq.n	800efaa <__sflush_r+0xae>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef24:	682f      	ldr	r7, [r5, #0]
 800ef26:	6a21      	ldr	r1, [r4, #32]
 800ef28:	602b      	str	r3, [r5, #0]
 800ef2a:	d030      	beq.n	800ef8e <__sflush_r+0x92>
 800ef2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	0759      	lsls	r1, r3, #29
 800ef32:	d505      	bpl.n	800ef40 <__sflush_r+0x44>
 800ef34:	6863      	ldr	r3, [r4, #4]
 800ef36:	1ad2      	subs	r2, r2, r3
 800ef38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef3a:	b10b      	cbz	r3, 800ef40 <__sflush_r+0x44>
 800ef3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef3e:	1ad2      	subs	r2, r2, r3
 800ef40:	2300      	movs	r3, #0
 800ef42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef44:	6a21      	ldr	r1, [r4, #32]
 800ef46:	4628      	mov	r0, r5
 800ef48:	47b0      	blx	r6
 800ef4a:	1c43      	adds	r3, r0, #1
 800ef4c:	89a3      	ldrh	r3, [r4, #12]
 800ef4e:	d106      	bne.n	800ef5e <__sflush_r+0x62>
 800ef50:	6829      	ldr	r1, [r5, #0]
 800ef52:	291d      	cmp	r1, #29
 800ef54:	d82b      	bhi.n	800efae <__sflush_r+0xb2>
 800ef56:	4a2a      	ldr	r2, [pc, #168]	@ (800f000 <__sflush_r+0x104>)
 800ef58:	410a      	asrs	r2, r1
 800ef5a:	07d6      	lsls	r6, r2, #31
 800ef5c:	d427      	bmi.n	800efae <__sflush_r+0xb2>
 800ef5e:	2200      	movs	r2, #0
 800ef60:	6062      	str	r2, [r4, #4]
 800ef62:	04d9      	lsls	r1, r3, #19
 800ef64:	6922      	ldr	r2, [r4, #16]
 800ef66:	6022      	str	r2, [r4, #0]
 800ef68:	d504      	bpl.n	800ef74 <__sflush_r+0x78>
 800ef6a:	1c42      	adds	r2, r0, #1
 800ef6c:	d101      	bne.n	800ef72 <__sflush_r+0x76>
 800ef6e:	682b      	ldr	r3, [r5, #0]
 800ef70:	b903      	cbnz	r3, 800ef74 <__sflush_r+0x78>
 800ef72:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef76:	602f      	str	r7, [r5, #0]
 800ef78:	b1b9      	cbz	r1, 800efaa <__sflush_r+0xae>
 800ef7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef7e:	4299      	cmp	r1, r3
 800ef80:	d002      	beq.n	800ef88 <__sflush_r+0x8c>
 800ef82:	4628      	mov	r0, r5
 800ef84:	f7ff fca0 	bl	800e8c8 <_free_r>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef8c:	e00d      	b.n	800efaa <__sflush_r+0xae>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	4628      	mov	r0, r5
 800ef92:	47b0      	blx	r6
 800ef94:	4602      	mov	r2, r0
 800ef96:	1c50      	adds	r0, r2, #1
 800ef98:	d1c9      	bne.n	800ef2e <__sflush_r+0x32>
 800ef9a:	682b      	ldr	r3, [r5, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d0c6      	beq.n	800ef2e <__sflush_r+0x32>
 800efa0:	2b1d      	cmp	r3, #29
 800efa2:	d001      	beq.n	800efa8 <__sflush_r+0xac>
 800efa4:	2b16      	cmp	r3, #22
 800efa6:	d11e      	bne.n	800efe6 <__sflush_r+0xea>
 800efa8:	602f      	str	r7, [r5, #0]
 800efaa:	2000      	movs	r0, #0
 800efac:	e022      	b.n	800eff4 <__sflush_r+0xf8>
 800efae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efb2:	b21b      	sxth	r3, r3
 800efb4:	e01b      	b.n	800efee <__sflush_r+0xf2>
 800efb6:	690f      	ldr	r7, [r1, #16]
 800efb8:	2f00      	cmp	r7, #0
 800efba:	d0f6      	beq.n	800efaa <__sflush_r+0xae>
 800efbc:	0793      	lsls	r3, r2, #30
 800efbe:	680e      	ldr	r6, [r1, #0]
 800efc0:	bf08      	it	eq
 800efc2:	694b      	ldreq	r3, [r1, #20]
 800efc4:	600f      	str	r7, [r1, #0]
 800efc6:	bf18      	it	ne
 800efc8:	2300      	movne	r3, #0
 800efca:	eba6 0807 	sub.w	r8, r6, r7
 800efce:	608b      	str	r3, [r1, #8]
 800efd0:	f1b8 0f00 	cmp.w	r8, #0
 800efd4:	dde9      	ble.n	800efaa <__sflush_r+0xae>
 800efd6:	6a21      	ldr	r1, [r4, #32]
 800efd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efda:	4643      	mov	r3, r8
 800efdc:	463a      	mov	r2, r7
 800efde:	4628      	mov	r0, r5
 800efe0:	47b0      	blx	r6
 800efe2:	2800      	cmp	r0, #0
 800efe4:	dc08      	bgt.n	800eff8 <__sflush_r+0xfc>
 800efe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efee:	81a3      	strh	r3, [r4, #12]
 800eff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff8:	4407      	add	r7, r0
 800effa:	eba8 0800 	sub.w	r8, r8, r0
 800effe:	e7e7      	b.n	800efd0 <__sflush_r+0xd4>
 800f000:	dfbffffe 	.word	0xdfbffffe

0800f004 <_fflush_r>:
 800f004:	b538      	push	{r3, r4, r5, lr}
 800f006:	690b      	ldr	r3, [r1, #16]
 800f008:	4605      	mov	r5, r0
 800f00a:	460c      	mov	r4, r1
 800f00c:	b913      	cbnz	r3, 800f014 <_fflush_r+0x10>
 800f00e:	2500      	movs	r5, #0
 800f010:	4628      	mov	r0, r5
 800f012:	bd38      	pop	{r3, r4, r5, pc}
 800f014:	b118      	cbz	r0, 800f01e <_fflush_r+0x1a>
 800f016:	6a03      	ldr	r3, [r0, #32]
 800f018:	b90b      	cbnz	r3, 800f01e <_fflush_r+0x1a>
 800f01a:	f7ff fb4b 	bl	800e6b4 <__sinit>
 800f01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d0f3      	beq.n	800f00e <_fflush_r+0xa>
 800f026:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f028:	07d0      	lsls	r0, r2, #31
 800f02a:	d404      	bmi.n	800f036 <_fflush_r+0x32>
 800f02c:	0599      	lsls	r1, r3, #22
 800f02e:	d402      	bmi.n	800f036 <_fflush_r+0x32>
 800f030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f032:	f7ff fc38 	bl	800e8a6 <__retarget_lock_acquire_recursive>
 800f036:	4628      	mov	r0, r5
 800f038:	4621      	mov	r1, r4
 800f03a:	f7ff ff5f 	bl	800eefc <__sflush_r>
 800f03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f040:	07da      	lsls	r2, r3, #31
 800f042:	4605      	mov	r5, r0
 800f044:	d4e4      	bmi.n	800f010 <_fflush_r+0xc>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	059b      	lsls	r3, r3, #22
 800f04a:	d4e1      	bmi.n	800f010 <_fflush_r+0xc>
 800f04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f04e:	f7ff fc2b 	bl	800e8a8 <__retarget_lock_release_recursive>
 800f052:	e7dd      	b.n	800f010 <_fflush_r+0xc>

0800f054 <__sread>:
 800f054:	b510      	push	{r4, lr}
 800f056:	460c      	mov	r4, r1
 800f058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f05c:	f000 f978 	bl	800f350 <_read_r>
 800f060:	2800      	cmp	r0, #0
 800f062:	bfab      	itete	ge
 800f064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f066:	89a3      	ldrhlt	r3, [r4, #12]
 800f068:	181b      	addge	r3, r3, r0
 800f06a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f06e:	bfac      	ite	ge
 800f070:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f072:	81a3      	strhlt	r3, [r4, #12]
 800f074:	bd10      	pop	{r4, pc}

0800f076 <__swrite>:
 800f076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07a:	461f      	mov	r7, r3
 800f07c:	898b      	ldrh	r3, [r1, #12]
 800f07e:	05db      	lsls	r3, r3, #23
 800f080:	4605      	mov	r5, r0
 800f082:	460c      	mov	r4, r1
 800f084:	4616      	mov	r6, r2
 800f086:	d505      	bpl.n	800f094 <__swrite+0x1e>
 800f088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f08c:	2302      	movs	r3, #2
 800f08e:	2200      	movs	r2, #0
 800f090:	f000 f94c 	bl	800f32c <_lseek_r>
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f09a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	4632      	mov	r2, r6
 800f0a2:	463b      	mov	r3, r7
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0aa:	f000 b963 	b.w	800f374 <_write_r>

0800f0ae <__sseek>:
 800f0ae:	b510      	push	{r4, lr}
 800f0b0:	460c      	mov	r4, r1
 800f0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0b6:	f000 f939 	bl	800f32c <_lseek_r>
 800f0ba:	1c43      	adds	r3, r0, #1
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	bf15      	itete	ne
 800f0c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f0c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f0c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f0ca:	81a3      	strheq	r3, [r4, #12]
 800f0cc:	bf18      	it	ne
 800f0ce:	81a3      	strhne	r3, [r4, #12]
 800f0d0:	bd10      	pop	{r4, pc}

0800f0d2 <__sclose>:
 800f0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d6:	f000 b8f7 	b.w	800f2c8 <_close_r>

0800f0da <__swbuf_r>:
 800f0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0dc:	460e      	mov	r6, r1
 800f0de:	4614      	mov	r4, r2
 800f0e0:	4605      	mov	r5, r0
 800f0e2:	b118      	cbz	r0, 800f0ec <__swbuf_r+0x12>
 800f0e4:	6a03      	ldr	r3, [r0, #32]
 800f0e6:	b90b      	cbnz	r3, 800f0ec <__swbuf_r+0x12>
 800f0e8:	f7ff fae4 	bl	800e6b4 <__sinit>
 800f0ec:	69a3      	ldr	r3, [r4, #24]
 800f0ee:	60a3      	str	r3, [r4, #8]
 800f0f0:	89a3      	ldrh	r3, [r4, #12]
 800f0f2:	071a      	lsls	r2, r3, #28
 800f0f4:	d501      	bpl.n	800f0fa <__swbuf_r+0x20>
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	b943      	cbnz	r3, 800f10c <__swbuf_r+0x32>
 800f0fa:	4621      	mov	r1, r4
 800f0fc:	4628      	mov	r0, r5
 800f0fe:	f000 f82b 	bl	800f158 <__swsetup_r>
 800f102:	b118      	cbz	r0, 800f10c <__swbuf_r+0x32>
 800f104:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f108:	4638      	mov	r0, r7
 800f10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f10c:	6823      	ldr	r3, [r4, #0]
 800f10e:	6922      	ldr	r2, [r4, #16]
 800f110:	1a98      	subs	r0, r3, r2
 800f112:	6963      	ldr	r3, [r4, #20]
 800f114:	b2f6      	uxtb	r6, r6
 800f116:	4283      	cmp	r3, r0
 800f118:	4637      	mov	r7, r6
 800f11a:	dc05      	bgt.n	800f128 <__swbuf_r+0x4e>
 800f11c:	4621      	mov	r1, r4
 800f11e:	4628      	mov	r0, r5
 800f120:	f7ff ff70 	bl	800f004 <_fflush_r>
 800f124:	2800      	cmp	r0, #0
 800f126:	d1ed      	bne.n	800f104 <__swbuf_r+0x2a>
 800f128:	68a3      	ldr	r3, [r4, #8]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	60a3      	str	r3, [r4, #8]
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	6022      	str	r2, [r4, #0]
 800f134:	701e      	strb	r6, [r3, #0]
 800f136:	6962      	ldr	r2, [r4, #20]
 800f138:	1c43      	adds	r3, r0, #1
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d004      	beq.n	800f148 <__swbuf_r+0x6e>
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	07db      	lsls	r3, r3, #31
 800f142:	d5e1      	bpl.n	800f108 <__swbuf_r+0x2e>
 800f144:	2e0a      	cmp	r6, #10
 800f146:	d1df      	bne.n	800f108 <__swbuf_r+0x2e>
 800f148:	4621      	mov	r1, r4
 800f14a:	4628      	mov	r0, r5
 800f14c:	f7ff ff5a 	bl	800f004 <_fflush_r>
 800f150:	2800      	cmp	r0, #0
 800f152:	d0d9      	beq.n	800f108 <__swbuf_r+0x2e>
 800f154:	e7d6      	b.n	800f104 <__swbuf_r+0x2a>
	...

0800f158 <__swsetup_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4b29      	ldr	r3, [pc, #164]	@ (800f200 <__swsetup_r+0xa8>)
 800f15c:	4605      	mov	r5, r0
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	460c      	mov	r4, r1
 800f162:	b118      	cbz	r0, 800f16c <__swsetup_r+0x14>
 800f164:	6a03      	ldr	r3, [r0, #32]
 800f166:	b90b      	cbnz	r3, 800f16c <__swsetup_r+0x14>
 800f168:	f7ff faa4 	bl	800e6b4 <__sinit>
 800f16c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f170:	0719      	lsls	r1, r3, #28
 800f172:	d422      	bmi.n	800f1ba <__swsetup_r+0x62>
 800f174:	06da      	lsls	r2, r3, #27
 800f176:	d407      	bmi.n	800f188 <__swsetup_r+0x30>
 800f178:	2209      	movs	r2, #9
 800f17a:	602a      	str	r2, [r5, #0]
 800f17c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f180:	81a3      	strh	r3, [r4, #12]
 800f182:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f186:	e033      	b.n	800f1f0 <__swsetup_r+0x98>
 800f188:	0758      	lsls	r0, r3, #29
 800f18a:	d512      	bpl.n	800f1b2 <__swsetup_r+0x5a>
 800f18c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f18e:	b141      	cbz	r1, 800f1a2 <__swsetup_r+0x4a>
 800f190:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f194:	4299      	cmp	r1, r3
 800f196:	d002      	beq.n	800f19e <__swsetup_r+0x46>
 800f198:	4628      	mov	r0, r5
 800f19a:	f7ff fb95 	bl	800e8c8 <_free_r>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1a2:	89a3      	ldrh	r3, [r4, #12]
 800f1a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1a8:	81a3      	strh	r3, [r4, #12]
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	6063      	str	r3, [r4, #4]
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f043 0308 	orr.w	r3, r3, #8
 800f1b8:	81a3      	strh	r3, [r4, #12]
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	b94b      	cbnz	r3, 800f1d2 <__swsetup_r+0x7a>
 800f1be:	89a3      	ldrh	r3, [r4, #12]
 800f1c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1c8:	d003      	beq.n	800f1d2 <__swsetup_r+0x7a>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4628      	mov	r0, r5
 800f1ce:	f000 f83f 	bl	800f250 <__smakebuf_r>
 800f1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1d6:	f013 0201 	ands.w	r2, r3, #1
 800f1da:	d00a      	beq.n	800f1f2 <__swsetup_r+0x9a>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	60a2      	str	r2, [r4, #8]
 800f1e0:	6962      	ldr	r2, [r4, #20]
 800f1e2:	4252      	negs	r2, r2
 800f1e4:	61a2      	str	r2, [r4, #24]
 800f1e6:	6922      	ldr	r2, [r4, #16]
 800f1e8:	b942      	cbnz	r2, 800f1fc <__swsetup_r+0xa4>
 800f1ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f1ee:	d1c5      	bne.n	800f17c <__swsetup_r+0x24>
 800f1f0:	bd38      	pop	{r3, r4, r5, pc}
 800f1f2:	0799      	lsls	r1, r3, #30
 800f1f4:	bf58      	it	pl
 800f1f6:	6962      	ldrpl	r2, [r4, #20]
 800f1f8:	60a2      	str	r2, [r4, #8]
 800f1fa:	e7f4      	b.n	800f1e6 <__swsetup_r+0x8e>
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	e7f7      	b.n	800f1f0 <__swsetup_r+0x98>
 800f200:	2000056c 	.word	0x2000056c

0800f204 <__swhatbuf_r>:
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	460c      	mov	r4, r1
 800f208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f20c:	2900      	cmp	r1, #0
 800f20e:	b096      	sub	sp, #88	@ 0x58
 800f210:	4615      	mov	r5, r2
 800f212:	461e      	mov	r6, r3
 800f214:	da0d      	bge.n	800f232 <__swhatbuf_r+0x2e>
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f21c:	f04f 0100 	mov.w	r1, #0
 800f220:	bf14      	ite	ne
 800f222:	2340      	movne	r3, #64	@ 0x40
 800f224:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f228:	2000      	movs	r0, #0
 800f22a:	6031      	str	r1, [r6, #0]
 800f22c:	602b      	str	r3, [r5, #0]
 800f22e:	b016      	add	sp, #88	@ 0x58
 800f230:	bd70      	pop	{r4, r5, r6, pc}
 800f232:	466a      	mov	r2, sp
 800f234:	f000 f858 	bl	800f2e8 <_fstat_r>
 800f238:	2800      	cmp	r0, #0
 800f23a:	dbec      	blt.n	800f216 <__swhatbuf_r+0x12>
 800f23c:	9901      	ldr	r1, [sp, #4]
 800f23e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f242:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f246:	4259      	negs	r1, r3
 800f248:	4159      	adcs	r1, r3
 800f24a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f24e:	e7eb      	b.n	800f228 <__swhatbuf_r+0x24>

0800f250 <__smakebuf_r>:
 800f250:	898b      	ldrh	r3, [r1, #12]
 800f252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f254:	079d      	lsls	r5, r3, #30
 800f256:	4606      	mov	r6, r0
 800f258:	460c      	mov	r4, r1
 800f25a:	d507      	bpl.n	800f26c <__smakebuf_r+0x1c>
 800f25c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f260:	6023      	str	r3, [r4, #0]
 800f262:	6123      	str	r3, [r4, #16]
 800f264:	2301      	movs	r3, #1
 800f266:	6163      	str	r3, [r4, #20]
 800f268:	b003      	add	sp, #12
 800f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f26c:	ab01      	add	r3, sp, #4
 800f26e:	466a      	mov	r2, sp
 800f270:	f7ff ffc8 	bl	800f204 <__swhatbuf_r>
 800f274:	9f00      	ldr	r7, [sp, #0]
 800f276:	4605      	mov	r5, r0
 800f278:	4639      	mov	r1, r7
 800f27a:	4630      	mov	r0, r6
 800f27c:	f7ff f902 	bl	800e484 <_malloc_r>
 800f280:	b948      	cbnz	r0, 800f296 <__smakebuf_r+0x46>
 800f282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f286:	059a      	lsls	r2, r3, #22
 800f288:	d4ee      	bmi.n	800f268 <__smakebuf_r+0x18>
 800f28a:	f023 0303 	bic.w	r3, r3, #3
 800f28e:	f043 0302 	orr.w	r3, r3, #2
 800f292:	81a3      	strh	r3, [r4, #12]
 800f294:	e7e2      	b.n	800f25c <__smakebuf_r+0xc>
 800f296:	89a3      	ldrh	r3, [r4, #12]
 800f298:	6020      	str	r0, [r4, #0]
 800f29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f29e:	81a3      	strh	r3, [r4, #12]
 800f2a0:	9b01      	ldr	r3, [sp, #4]
 800f2a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2a6:	b15b      	cbz	r3, 800f2c0 <__smakebuf_r+0x70>
 800f2a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f000 f82d 	bl	800f30c <_isatty_r>
 800f2b2:	b128      	cbz	r0, 800f2c0 <__smakebuf_r+0x70>
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	f023 0303 	bic.w	r3, r3, #3
 800f2ba:	f043 0301 	orr.w	r3, r3, #1
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	89a3      	ldrh	r3, [r4, #12]
 800f2c2:	431d      	orrs	r5, r3
 800f2c4:	81a5      	strh	r5, [r4, #12]
 800f2c6:	e7cf      	b.n	800f268 <__smakebuf_r+0x18>

0800f2c8 <_close_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	4d06      	ldr	r5, [pc, #24]	@ (800f2e4 <_close_r+0x1c>)
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	4608      	mov	r0, r1
 800f2d2:	602b      	str	r3, [r5, #0]
 800f2d4:	f7f9 fcd3 	bl	8008c7e <_close>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d102      	bne.n	800f2e2 <_close_r+0x1a>
 800f2dc:	682b      	ldr	r3, [r5, #0]
 800f2de:	b103      	cbz	r3, 800f2e2 <_close_r+0x1a>
 800f2e0:	6023      	str	r3, [r4, #0]
 800f2e2:	bd38      	pop	{r3, r4, r5, pc}
 800f2e4:	20000f1c 	.word	0x20000f1c

0800f2e8 <_fstat_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d07      	ldr	r5, [pc, #28]	@ (800f308 <_fstat_r+0x20>)
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	602b      	str	r3, [r5, #0]
 800f2f6:	f7f9 fcce 	bl	8008c96 <_fstat>
 800f2fa:	1c43      	adds	r3, r0, #1
 800f2fc:	d102      	bne.n	800f304 <_fstat_r+0x1c>
 800f2fe:	682b      	ldr	r3, [r5, #0]
 800f300:	b103      	cbz	r3, 800f304 <_fstat_r+0x1c>
 800f302:	6023      	str	r3, [r4, #0]
 800f304:	bd38      	pop	{r3, r4, r5, pc}
 800f306:	bf00      	nop
 800f308:	20000f1c 	.word	0x20000f1c

0800f30c <_isatty_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d06      	ldr	r5, [pc, #24]	@ (800f328 <_isatty_r+0x1c>)
 800f310:	2300      	movs	r3, #0
 800f312:	4604      	mov	r4, r0
 800f314:	4608      	mov	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f9 fccd 	bl	8008cb6 <_isatty>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_isatty_r+0x1a>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_isatty_r+0x1a>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20000f1c 	.word	0x20000f1c

0800f32c <_lseek_r>:
 800f32c:	b538      	push	{r3, r4, r5, lr}
 800f32e:	4d07      	ldr	r5, [pc, #28]	@ (800f34c <_lseek_r+0x20>)
 800f330:	4604      	mov	r4, r0
 800f332:	4608      	mov	r0, r1
 800f334:	4611      	mov	r1, r2
 800f336:	2200      	movs	r2, #0
 800f338:	602a      	str	r2, [r5, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	f7f9 fcc6 	bl	8008ccc <_lseek>
 800f340:	1c43      	adds	r3, r0, #1
 800f342:	d102      	bne.n	800f34a <_lseek_r+0x1e>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	b103      	cbz	r3, 800f34a <_lseek_r+0x1e>
 800f348:	6023      	str	r3, [r4, #0]
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	20000f1c 	.word	0x20000f1c

0800f350 <_read_r>:
 800f350:	b538      	push	{r3, r4, r5, lr}
 800f352:	4d07      	ldr	r5, [pc, #28]	@ (800f370 <_read_r+0x20>)
 800f354:	4604      	mov	r4, r0
 800f356:	4608      	mov	r0, r1
 800f358:	4611      	mov	r1, r2
 800f35a:	2200      	movs	r2, #0
 800f35c:	602a      	str	r2, [r5, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	f7f9 fc54 	bl	8008c0c <_read>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_read_r+0x1e>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_read_r+0x1e>
 800f36c:	6023      	str	r3, [r4, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	20000f1c 	.word	0x20000f1c

0800f374 <_write_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	@ (800f394 <_write_r+0x20>)
 800f378:	4604      	mov	r4, r0
 800f37a:	4608      	mov	r0, r1
 800f37c:	4611      	mov	r1, r2
 800f37e:	2200      	movs	r2, #0
 800f380:	602a      	str	r2, [r5, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	f7f9 fc5f 	bl	8008c46 <_write>
 800f388:	1c43      	adds	r3, r0, #1
 800f38a:	d102      	bne.n	800f392 <_write_r+0x1e>
 800f38c:	682b      	ldr	r3, [r5, #0]
 800f38e:	b103      	cbz	r3, 800f392 <_write_r+0x1e>
 800f390:	6023      	str	r3, [r4, #0]
 800f392:	bd38      	pop	{r3, r4, r5, pc}
 800f394:	20000f1c 	.word	0x20000f1c

0800f398 <_init>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	bf00      	nop
 800f39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39e:	bc08      	pop	{r3}
 800f3a0:	469e      	mov	lr, r3
 800f3a2:	4770      	bx	lr

0800f3a4 <_fini>:
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	bf00      	nop
 800f3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3aa:	bc08      	pop	{r3}
 800f3ac:	469e      	mov	lr, r3
 800f3ae:	4770      	bx	lr
