
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000924  0800e758  0800e758  0000f758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f07c  0800f07c  000115b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f07c  0800f07c  0001007c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f084  0800f084  000115b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f084  0800f084  00010084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f088  0800f088  00010088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005b8  20000000  0800f08c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd8  200005b8  0800f644  000115b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001390  0800f644  00012390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000115b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2a6  00000000  00000000  000115e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054b1  00000000  00000000  0003088e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  00035d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001477  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb3d  00000000  00000000  00038c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025116  00000000  00000000  000547bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c841  00000000  00000000  000798d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007668  00000000  00000000  00116158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005b8 	.word	0x200005b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e740 	.word	0x0800e740

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005bc 	.word	0x200005bc
 80001dc:	0800e740 	.word	0x0800e740

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <int_to_str>:
  * @brief  Convert an Integer to a string
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void int_to_str(uint8_t* p_str, uint32_t intNum) {
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, divider = 1000000000,pos = 0, status = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <int_to_str+0x94>)
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]

	for (i = 0;i < 10;i++) {
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e02e      	b.n	80005ee <int_to_str+0x7e>
		p_str[pos++] = (intNum/divider) + 48;
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	693b      	ldr	r3, [r7, #16]
 8000594:	fbb2 f3f3 	udiv	r3, r2, r3
 8000598:	b2da      	uxtb	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	1c59      	adds	r1, r3, #1
 800059e:	60f9      	str	r1, [r7, #12]
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	440b      	add	r3, r1
 80005a4:	3230      	adds	r2, #48	@ 0x30
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	701a      	strb	r2, [r3, #0]
		intNum %= divider;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80005b2:	6939      	ldr	r1, [r7, #16]
 80005b4:	fb01 f202 	mul.w	r2, r1, r2
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	603b      	str	r3, [r7, #0]
		divider /= 10;
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4a12      	ldr	r2, [pc, #72]	@ (8000608 <int_to_str+0x98>)
 80005c0:	fba2 2303 	umull	r2, r3, r2, r3
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	613b      	str	r3, [r7, #16]
		if ((p_str[pos-1] == '0') || (status == 0)) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3b01      	subs	r3, #1
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b30      	cmp	r3, #48	@ 0x30
 80005d4:	d002      	beq.n	80005dc <int_to_str+0x6c>
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <int_to_str+0x72>
			pos = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <int_to_str+0x78>
		}
		else {
			status++;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
	for (i = 0;i < 10;i++) {
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	2b09      	cmp	r3, #9
 80005f2:	d9cd      	bls.n	8000590 <int_to_str+0x20>
		}
	}
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	3b9aca00 	.word	0x3b9aca00
 8000608:	cccccccd 	.word	0xcccccccd

0800060c <str_to_int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */

uint32_t str_to_int(uint8_t *p_inputStr, uint32_t* p_intNum) {
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	uint32_t i = 0, res = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
	  uint32_t val = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]

	  if ((p_inputStr[0] == '0') && ((p_inputStr[1] == 'x') || (p_inputStr[1] == 'X')))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b30      	cmp	r3, #48	@ 0x30
 8000628:	f040 80d7 	bne.w	80007da <str_to_int+0x1ce>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b78      	cmp	r3, #120	@ 0x78
 8000634:	d005      	beq.n	8000642 <str_to_int+0x36>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3301      	adds	r3, #1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b58      	cmp	r3, #88	@ 0x58
 800063e:	f040 80cc 	bne.w	80007da <str_to_int+0x1ce>
	  {
	    i = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 8000646:	e057      	b.n	80006f8 <str_to_int+0xec>
	    {
	      if (IS_VALID_HEX(p_inputStr[i]))
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b40      	cmp	r3, #64	@ 0x40
 8000652:	d905      	bls.n	8000660 <str_to_int+0x54>
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b46      	cmp	r3, #70	@ 0x46
 800065e:	d917      	bls.n	8000690 <str_to_int+0x84>
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b60      	cmp	r3, #96	@ 0x60
 800066a:	d905      	bls.n	8000678 <str_to_int+0x6c>
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b66      	cmp	r3, #102	@ 0x66
 8000676:	d90b      	bls.n	8000690 <str_to_int+0x84>
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b2f      	cmp	r3, #47	@ 0x2f
 8000682:	d936      	bls.n	80006f2 <str_to_int+0xe6>
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	4413      	add	r3, r2
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b39      	cmp	r3, #57	@ 0x39
 800068e:	d830      	bhi.n	80006f2 <str_to_int+0xe6>
	      {
	        val = (val << 4) + CONVERTHEX(p_inputStr[i]);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	440a      	add	r2, r1
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	2a2f      	cmp	r2, #47	@ 0x2f
 800069e:	d90b      	bls.n	80006b8 <str_to_int+0xac>
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	440a      	add	r2, r1
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	2a39      	cmp	r2, #57	@ 0x39
 80006aa:	d805      	bhi.n	80006b8 <str_to_int+0xac>
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	440a      	add	r2, r1
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	3a30      	subs	r2, #48	@ 0x30
 80006b6:	e016      	b.n	80006e6 <str_to_int+0xda>
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	440a      	add	r2, r1
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2a40      	cmp	r2, #64	@ 0x40
 80006c2:	d90b      	bls.n	80006dc <str_to_int+0xd0>
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	440a      	add	r2, r1
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	2a46      	cmp	r2, #70	@ 0x46
 80006ce:	d805      	bhi.n	80006dc <str_to_int+0xd0>
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	440a      	add	r2, r1
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	3a37      	subs	r2, #55	@ 0x37
 80006da:	e004      	b.n	80006e6 <str_to_int+0xda>
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	440a      	add	r2, r1
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	3a57      	subs	r2, #87	@ 0x57
 80006e6:	4413      	add	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
	      {
	        /* Return 0, Invalid input */
	        res = 0;
	        break;
	      }
	      i++;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	3301      	adds	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e002      	b.n	80006f8 <str_to_int+0xec>
	        res = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
	        break;
 80006f6:	e008      	b.n	800070a <str_to_int+0xfe>
	    while ( ( i < 11 ) && ( p_inputStr[i] != '\0' ) )
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b0a      	cmp	r3, #10
 80006fc:	d805      	bhi.n	800070a <str_to_int+0xfe>
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d19e      	bne.n	8000648 <str_to_int+0x3c>
	    }

	    /* valid result */
	    if (p_inputStr[i] == '\0')
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d167      	bne.n	80007e6 <str_to_int+0x1da>
	    {
	      *p_intNum= val;
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]
	      res = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
	    if (p_inputStr[i] == '\0')
 8000720:	e061      	b.n	80007e6 <str_to_int+0x1da>
	  }
	  else /* max 10-digit decimal input */
	  {
	    while ( ( i < 11 ) && ( res != 1 ) )
	    {
	      if (p_inputStr[i] == '\0')
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <str_to_int+0x12e>
	      {
	        *p_intNum = val;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	601a      	str	r2, [r3, #0]
	        /* return 1 */
	        res = 1;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	e04c      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'k') || (p_inputStr[i] == 'K')) && (i > 0))
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4413      	add	r3, r2
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b6b      	cmp	r3, #107	@ 0x6b
 8000744:	d005      	beq.n	8000752 <str_to_int+0x146>
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000750:	d10b      	bne.n	800076a <str_to_int+0x15e>
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <str_to_int+0x15e>
	      {
	        val = val << 10;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	e034      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (((p_inputStr[i] == 'm') || (p_inputStr[i] == 'M')) && (i > 0))
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b6d      	cmp	r3, #109	@ 0x6d
 8000774:	d005      	beq.n	8000782 <str_to_int+0x176>
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000780:	d10b      	bne.n	800079a <str_to_int+0x18e>
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d008      	beq.n	800079a <str_to_int+0x18e>
	      {
	        val = val << 20;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	051b      	lsls	r3, r3, #20
 800078c:	60fb      	str	r3, [r7, #12]
	        *p_intNum = val;
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	601a      	str	r2, [r3, #0]
	        res = 1;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	e01c      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else if (ISVALIDDEC(p_inputStr[i]))
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a4:	d913      	bls.n	80007ce <str_to_int+0x1c2>
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b39      	cmp	r3, #57	@ 0x39
 80007b0:	d80d      	bhi.n	80007ce <str_to_int+0x1c2>
	      {
	        val = val * 10 + CONVERTDEC(p_inputStr[i]);
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4619      	mov	r1, r3
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	440b      	add	r3, r1
 80007c8:	3b30      	subs	r3, #48	@ 0x30
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e002      	b.n	80007d4 <str_to_int+0x1c8>
	      }
	      else
	      {
	        /* return 0, Invalid input */
	        res = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
	        break;
 80007d2:	e008      	b.n	80007e6 <str_to_int+0x1da>
	      }
	      i++;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
	    while ( ( i < 11 ) && ( res != 1 ) )
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b0a      	cmp	r3, #10
 80007de:	d802      	bhi.n	80007e6 <str_to_int+0x1da>
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d19d      	bne.n	8000722 <str_to_int+0x116>
	    }
	  }

	  return res;
 80007e6:	693b      	ldr	r3, [r7, #16]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <serial_put_string>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */

void serial_put_string(uint8_t* p_string) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	 uint16_t length = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	81fb      	strh	r3, [r7, #14]

	  while (p_string[length] != '\0')
 8000800:	e002      	b.n	8000808 <serial_put_string+0x14>
	  {
	    length++;
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	81fb      	strh	r3, [r7, #14]
	  while (p_string[length] != '\0')
 8000808:	89fb      	ldrh	r3, [r7, #14]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f6      	bne.n	8000802 <serial_put_string+0xe>
	  }
	  HAL_UART_Transmit(&UartHandle, p_string, length, TX_TIMEOUT);
 8000814:	89fa      	ldrh	r2, [r7, #14]
 8000816:	2364      	movs	r3, #100	@ 0x64
 8000818:	6879      	ldr	r1, [r7, #4]
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <serial_put_string+0x34>)
 800081c:	f00b fd9a 	bl	800c354 <HAL_UART_Transmit>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000678 	.word	0x20000678

0800082c <serial_put_byte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */

HAL_StatusTypeDef serial_put_byte(uint8_t param) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
	/* May be timeouted... */
	  if ( UartHandle.gState == HAL_UART_STATE_TIMEOUT )
 8000836:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <serial_put_byte+0x34>)
 8000838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2ba0      	cmp	r3, #160	@ 0xa0
 8000840:	d103      	bne.n	800084a <serial_put_byte+0x1e>
	  {
	    UartHandle.gState = HAL_UART_STATE_READY;
 8000842:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <serial_put_byte+0x34>)
 8000844:	2220      	movs	r2, #32
 8000846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	  }
	  return HAL_UART_Transmit(&UartHandle, &param, 1, TX_TIMEOUT);
 800084a:	1df9      	adds	r1, r7, #7
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	2201      	movs	r2, #1
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <serial_put_byte+0x34>)
 8000852:	f00b fd7f 	bl	800c354 <HAL_UART_Transmit>
 8000856:	4603      	mov	r3, r0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000678 	.word	0x20000678

08000864 <get_sector>:
#include "ymodem/flash_if.h"



uint32_t get_sector(uint32_t Address)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if (Address < 0x08004000) return FLASH_SECTOR_0;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <get_sector+0x78>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d201      	bcs.n	8000878 <get_sector+0x14>
 8000874:	2300      	movs	r3, #0
 8000876:	e02a      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08008000) return FLASH_SECTOR_1;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <get_sector+0x7c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d201      	bcs.n	8000884 <get_sector+0x20>
 8000880:	2301      	movs	r3, #1
 8000882:	e024      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x0800C000) return FLASH_SECTOR_2;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <get_sector+0x80>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d201      	bcs.n	8000890 <get_sector+0x2c>
 800088c:	2302      	movs	r3, #2
 800088e:	e01e      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08010000) return FLASH_SECTOR_3;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a15      	ldr	r2, [pc, #84]	@ (80008e8 <get_sector+0x84>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d801      	bhi.n	800089c <get_sector+0x38>
 8000898:	2303      	movs	r3, #3
 800089a:	e018      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08020000) return FLASH_SECTOR_4;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a13      	ldr	r2, [pc, #76]	@ (80008ec <get_sector+0x88>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d801      	bhi.n	80008a8 <get_sector+0x44>
 80008a4:	2304      	movs	r3, #4
 80008a6:	e012      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08040000) return FLASH_SECTOR_5;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <get_sector+0x8c>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d801      	bhi.n	80008b4 <get_sector+0x50>
 80008b0:	2305      	movs	r3, #5
 80008b2:	e00c      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08060000) return FLASH_SECTOR_6;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <get_sector+0x90>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d801      	bhi.n	80008c0 <get_sector+0x5c>
 80008bc:	2306      	movs	r3, #6
 80008be:	e006      	b.n	80008ce <get_sector+0x6a>
  else if (Address < 0x08080000) return FLASH_SECTOR_7;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0d      	ldr	r2, [pc, #52]	@ (80008f8 <get_sector+0x94>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d801      	bhi.n	80008cc <get_sector+0x68>
 80008c8:	2307      	movs	r3, #7
 80008ca:	e000      	b.n	80008ce <get_sector+0x6a>
  else return FLASH_SECTOR_7; // fallback
 80008cc:	2307      	movs	r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	08004000 	.word	0x08004000
 80008e0:	08008000 	.word	0x08008000
 80008e4:	0800c000 	.word	0x0800c000
 80008e8:	0800ffff 	.word	0x0800ffff
 80008ec:	0801ffff 	.word	0x0801ffff
 80008f0:	0803ffff 	.word	0x0803ffff
 80008f4:	0805ffff 	.word	0x0805ffff
 80008f8:	0807ffff 	.word	0x0807ffff

080008fc <FLASH_IF_init>:
/**
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_IF_init(void) {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
/* Unlocking hte program memroy*/
	 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <FLASH_IF_init+0x14>)
 8000902:	2293      	movs	r2, #147	@ 0x93
 8000904:	60da      	str	r2, [r3, #12]
	                         FLASH_FLAG_PGSERR);


}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	40023c00 	.word	0x40023c00

08000914 <FLASH_IF_erase>:
  * @param  start: start of user flash area
  * @retval FLASHIF_OK : user flash area successfully erased
  *         FLASHIF_ERASEKO : error occurred
  */

uint32_t FLASH_IF_erase(uint32_t StartSector) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b096      	sub	sp, #88	@ 0x58
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef desc;
	uint32_t result = FLASHIF_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t sectorError;
	uint32_t userStartSector;

	  /* Unlock the Flash to enable the flash control register access *************/

	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000920:	f007 f8ea 	bl	8007af8 <HAL_FLASH_Unlock>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <FLASH_IF_erase+0x20>
		serial_put_string((uint8_t*)"Erase failed at unlock itself 1");
 800092a:	481c      	ldr	r0, [pc, #112]	@ (800099c <FLASH_IF_erase+0x88>)
 800092c:	f7ff ff62 	bl	80007f4 <serial_put_string>
		result = FLASHIF_ERASEKO;
 8000930:	2301      	movs	r3, #1
 8000932:	657b      	str	r3, [r7, #84]	@ 0x54
	}
	FLASH_IF_init();
 8000934:	f7ff ffe2 	bl	80008fc <FLASH_IF_init>


	desc.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000938:	2300      	movs	r3, #0
 800093a:	643b      	str	r3, [r7, #64]	@ 0x40
	desc.Sector = get_sector(StartSector);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff91 	bl	8000864 <get_sector>
 8000942:	4603      	mov	r3, r0
 8000944:	64bb      	str	r3, [r7, #72]	@ 0x48
	desc.NbSectors = 3;
 8000946:	2303      	movs	r3, #3
 8000948:	64fb      	str	r3, [r7, #76]	@ 0x4c
	desc.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800094a:	2302      	movs	r3, #2
 800094c:	653b      	str	r3, [r7, #80]	@ 0x50

	if (StartSector < USER_FLASH_END_ADDRESS) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a13      	ldr	r2, [pc, #76]	@ (80009a0 <FLASH_IF_erase+0x8c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d219      	bcs.n	800098a <FLASH_IF_erase+0x76>
		if (HAL_FLASHEx_Erase(&desc, &sectorError) != HAL_OK) {
 8000956:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800095a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f007 fa7b 	bl	8007e5c <HAL_FLASHEx_Erase>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d010      	beq.n	800098e <FLASH_IF_erase+0x7a>
			char msg[50];
			sprintf(msg, "Erase failed at sector: %lu\n", sectorError);
 800096c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <FLASH_IF_erase+0x90>)
 8000974:	4618      	mov	r0, r3
 8000976:	f00c fe1d 	bl	800d5b4 <siprintf>
			serial_put_string((uint8_t*)msg);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff38 	bl	80007f4 <serial_put_string>
			result = FLASHIF_ERASEKO;
 8000984:	2301      	movs	r3, #1
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
 8000988:	e001      	b.n	800098e <FLASH_IF_erase+0x7a>
		}


	}
	else result = FLASHIF_ERASEKO;
 800098a:	2301      	movs	r3, #1
 800098c:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_FLASH_Lock();
 800098e:	f007 f8d5 	bl	8007b3c <HAL_FLASH_Lock>
	return result;
 8000992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8000994:	4618      	mov	r0, r3
 8000996:	3758      	adds	r7, #88	@ 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800e758 	.word	0x0800e758
 80009a0:	0807ffff 	.word	0x0807ffff
 80009a4:	0800e778 	.word	0x0800e778

080009a8 <FLASH_IF_disable_all_protection>:


void FLASH_IF_disable_all_protection(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80009ae:	f007 f8a3 	bl	8007af8 <HAL_FLASH_Unlock>
    HAL_FLASH_OB_Unlock();
 80009b2:	f007 f8d3 	bl	8007b5c <HAL_FLASH_OB_Unlock>

    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASHEx_OBGetConfig(&OBInit);
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4618      	mov	r0, r3
 80009ba:	f007 fb2b 	bl	8008014 <HAL_FLASHEx_OBGetConfig>

    // Set RDP to Level 0 (no protection)
    OBInit.OptionType = OPTIONBYTE_RDP | OPTIONBYTE_WRP;
 80009be:	2303      	movs	r3, #3
 80009c0:	607b      	str	r3, [r7, #4]
    OBInit.RDPLevel = OB_RDP_LEVEL_0;
 80009c2:	23aa      	movs	r3, #170	@ 0xaa
 80009c4:	617b      	str	r3, [r7, #20]
    OBInit.WRPSector = 0xFFF; // All sectors
 80009c6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80009ca:	60fb      	str	r3, [r7, #12]
    OBInit.Banks = FLASH_BANK_1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
    OBInit.WRPState = OB_WRPSTATE_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]

    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f007 faae 	bl	8007f38 <HAL_FLASHEx_OBProgram>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <FLASH_IF_disable_all_protection+0x40>
        serial_put_string("Option byte programming failed!");
 80009e2:	4808      	ldr	r0, [pc, #32]	@ (8000a04 <FLASH_IF_disable_all_protection+0x5c>)
 80009e4:	f7ff ff06 	bl	80007f4 <serial_put_string>
    }

    // Launch Option Bytes programming
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80009e8:	f007 f8e4 	bl	8007bb4 <HAL_FLASH_OB_Launch>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <FLASH_IF_disable_all_protection+0x50>
    	serial_put_string((uint8_t*)"OB launch failed!");
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <FLASH_IF_disable_all_protection+0x60>)
 80009f4:	f7ff fefe 	bl	80007f4 <serial_put_string>
    }

    HAL_FLASH_OB_Lock();
 80009f8:	f007 f8cc 	bl	8007b94 <HAL_FLASH_OB_Lock>
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0800e798 	.word	0x0800e798
 8000a08:	0800e7b8 	.word	0x0800e7b8

08000a0c <FLASH_IF_write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */

uint32_t FLASH_IF_write(uint32_t destination, uint32_t* p_source, uint32_t length) {
 8000a0c:	b5b0      	push	{r4, r5, r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	uint32_t status = FLASHIF_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8000a20:	f007 f86a 	bl	8007af8 <HAL_FLASH_Unlock>

	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	e026      	b.n	8000a78 <FLASH_IF_write+0x6c>
	        /* Word programming (32-bit) */
	        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, *(p_source + i)) == HAL_OK) {
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4413      	add	r3, r2
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	461c      	mov	r4, r3
 8000a38:	4615      	mov	r5, r2
 8000a3a:	4622      	mov	r2, r4
 8000a3c:	462b      	mov	r3, r5
 8000a3e:	68f9      	ldr	r1, [r7, #12]
 8000a40:	2002      	movs	r0, #2
 8000a42:	f007 f807 	bl	8007a54 <HAL_FLASH_Program>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10f      	bne.n	8000a6c <FLASH_IF_write+0x60>
	            /* Check the written value */
	            if (*(uint32_t*)destination != *(p_source + i)) {
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	440b      	add	r3, r1
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d002      	beq.n	8000a64 <FLASH_IF_write+0x58>
	                status = FLASHIF_WRITINGCTRL_ERROR;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
	                break;
 8000a62:	e011      	b.n	8000a88 <FLASH_IF_write+0x7c>
	            }
	            destination += 4; // Move to next word
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3304      	adds	r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e002      	b.n	8000a72 <FLASH_IF_write+0x66>
	        } else {
	            status = FLASHIF_WRITING_ERROR;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	617b      	str	r3, [r7, #20]
	            break;
 8000a70:	e00a      	b.n	8000a88 <FLASH_IF_write+0x7c>
	for (i = 0; (i < length) && (destination <= USER_FLASH_END_ADDRESS - 4); i++) {
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	3301      	adds	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d203      	bcs.n	8000a88 <FLASH_IF_write+0x7c>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <FLASH_IF_write+0x8c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d9d0      	bls.n	8000a2a <FLASH_IF_write+0x1e>
	        }
	    }
	HAL_FLASH_Lock();
 8000a88:	f007 f858 	bl	8007b3c <HAL_FLASH_Lock>

	return status;
 8000a8c:	697b      	ldr	r3, [r7, #20]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bdb0      	pop	{r4, r5, r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0807fffb 	.word	0x0807fffb

08000a9c <FLASH_IF_get_write_protection_status>:
  * @param  None
  * @retval If a sector in application area is write-protected returned value is a combination
            of the possible values : FLASHIF_PROTECTION_WRPENABLED, FLASHIF_PROTECTION_PCROPENABLED, ...
  *         If no sector is write-protected FLASHIF_PROTECTION_NONE is returned.
  */
uint32_t FLASH_IF_get_write_protection_status(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef config;
	uint32_t protected = FLASHIF_PROTECTION_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
	 /* Get the current configuration */
	HAL_FLASHEx_OBGetConfig(&config);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 fab3 	bl	8008014 <HAL_FLASHEx_OBGetConfig>

	 /* Get pages already write protected ****************************************/
	 /* Check if write protection is enabled for any sectors */
	if ((config.WRPState == OB_WRPSTATE_ENABLE) && (config.WRPSector & FLASH_SECTOR_TO_BE_PROTECTED)) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <FLASH_IF_get_write_protection_status+0x26>
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <FLASH_IF_get_write_protection_status+0x26>
		protected = FLASHIF_PROTECTION_WRPENABLED;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61fb      	str	r3, [r7, #28]
	}
	return protected;
 8000ac2:	69fb      	ldr	r3, [r7, #28]

}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3720      	adds	r7, #32
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <FLASH_IF_write_protection_config>:
  * @param  protectionstate : FLASHIF_WRP_DISABLE or FLASHIF_WRP_ENABLE the protection
  * @retval uint32_t FLASHIF_OK if change is applied.
  */

uint32_t FLASH_IF_write_protection_config(uint32_t protectionState)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    FLASH_OBProgramInitTypeDef config;
    HAL_StatusTypeDef status;

    // Unlock the Flash to enable the flash control register access
    if (HAL_FLASH_Unlock() != HAL_OK) {
 8000ad4:	f007 f810 	bl	8007af8 <HAL_FLASH_Unlock>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <FLASH_IF_write_protection_config+0x1c>
        serial_put_string((uint8_t *)"Error: Failed to unlock Flash control register\r\n");
 8000ade:	4827      	ldr	r0, [pc, #156]	@ (8000b7c <FLASH_IF_write_protection_config+0xb0>)
 8000ae0:	f7ff fe88 	bl	80007f4 <serial_put_string>
        return FLASHIF_PROTECTION_ERROR;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	e045      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    // Unlock the Option Bytes
    if (HAL_FLASH_OB_Unlock() != HAL_OK) {
 8000ae8:	f007 f838 	bl	8007b5c <HAL_FLASH_OB_Unlock>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <FLASH_IF_write_protection_config+0x34>
        serial_put_string((uint8_t *)"Error: Failed to unlock Option Bytes\r\n");
 8000af2:	4823      	ldr	r0, [pc, #140]	@ (8000b80 <FLASH_IF_write_protection_config+0xb4>)
 8000af4:	f7ff fe7e 	bl	80007f4 <serial_put_string>
        HAL_FLASH_Lock(); // Lock flash back before returning
 8000af8:	f007 f820 	bl	8007b3c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000afc:	2304      	movs	r3, #4
 8000afe:	e039      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    // Prepare Option Bytes configuration
    config.OptionType = OPTIONBYTE_WRP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
    config.Banks = FLASH_BANK_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
    config.WRPSector = FLASH_SECTOR_TO_BE_PROTECTED;
 8000b08:	23e0      	movs	r3, #224	@ 0xe0
 8000b0a:	613b      	str	r3, [r7, #16]

    if (protectionState == FLASHIF_WRP_ENABLE) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <FLASH_IF_write_protection_config+0x4c>
        config.WRPState = OB_WRPSTATE_ENABLE;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e001      	b.n	8000b1c <FLASH_IF_write_protection_config+0x50>
    } else {
        config.WRPState = OB_WRPSTATE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
    }

    // Program the Option Bytes
    status = HAL_FLASHEx_OBProgram(&config);
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fa09 	bl	8007f38 <HAL_FLASHEx_OBProgram>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d008      	beq.n	8000b46 <FLASH_IF_write_protection_config+0x7a>
        serial_put_string((uint8_t *)"Error: Failed to program Option Bytes\r\n");
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <FLASH_IF_write_protection_config+0xb8>)
 8000b36:	f7ff fe5d 	bl	80007f4 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b3a:	f007 f82b 	bl	8007b94 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b3e:	f006 fffd 	bl	8007b3c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b42:	2304      	movs	r3, #4
 8000b44:	e016      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    // Launch Option Bytes loading (causes a system reset)
    status = HAL_FLASH_OB_Launch();
 8000b46:	f007 f835 	bl	8007bb4 <HAL_FLASH_OB_Launch>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8000b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <FLASH_IF_write_protection_config+0x9e>
        serial_put_string((uint8_t *)"Error: Failed to launch Option Bytes reload\r\n");
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <FLASH_IF_write_protection_config+0xbc>)
 8000b5a:	f7ff fe4b 	bl	80007f4 <serial_put_string>
        HAL_FLASH_OB_Lock();
 8000b5e:	f007 f819 	bl	8007b94 <HAL_FLASH_OB_Lock>
        HAL_FLASH_Lock();
 8000b62:	f006 ffeb 	bl	8007b3c <HAL_FLASH_Lock>
        return FLASHIF_PROTECTION_ERROR;
 8000b66:	2304      	movs	r3, #4
 8000b68:	e004      	b.n	8000b74 <FLASH_IF_write_protection_config+0xa8>
    }

    HAL_FLASH_OB_Lock();
 8000b6a:	f007 f813 	bl	8007b94 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000b6e:	f006 ffe5 	bl	8007b3c <HAL_FLASH_Lock>

    return FLASHIF_OK;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	0800e7cc 	.word	0x0800e7cc
 8000b80:	0800e800 	.word	0x0800e800
 8000b84:	0800e828 	.word	0x0800e828
 8000b88:	0800e850 	.word	0x0800e850

08000b8c <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000b94:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000b98:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d027      	beq.n	8000bf4 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d818      	bhi.n	8000bf2 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	22b1      	movs	r2, #177	@ 0xb1
 8000bc4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f8f5 	bl	8000dc8 <ifx_i2c_init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d105      	bne.n	8000bf4 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8000bf0:	e000      	b.n	8000bf4 <ifx_i2c_open+0x68>
                break;
 8000bf2:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b088      	sub	sp, #32
 8000c02:	af02      	add	r7, sp, #8
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c0e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c12:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d122      	bne.n	8000c64 <ifx_i2c_transceive+0x66>
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d01d      	beq.n	8000c64 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6a3a      	ldr	r2, [r7, #32]
 8000c34:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f001 fb00 	bl	8002248 <ifx_i2c_prl_transceive>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000c4c:	8afb      	ldrh	r3, [r7, #22]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d108      	bne.n	8000c64 <ifx_i2c_transceive+0x66>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d103      	bne.n	8000c64 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000c64:	8afb      	ldrh	r3, [r7, #22]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000c78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000c7c:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d02a      	beq.n	8000cde <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000c92:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000c9e:	4912      	ldr	r1, [pc, #72]	@ (8000ce8 <ifx_i2c_close+0x78>)
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f001 fa8f 	bl	80021c4 <ifx_i2c_prl_close>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000cb0:	d115      	bne.n	8000cde <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f005 fa14 	bl	80060e6 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 f9af 	bl	8006028 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f005 f9a9 	bl	8006028 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2204      	movs	r2, #4
 8000cda:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 8000cde:	89fb      	ldrh	r3, [r7, #14]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08000d55 	.word	0x08000d55

08000cec <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	817b      	strh	r3, [r7, #10]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000d16:	8979      	ldrh	r1, [r7, #10]
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	897a      	ldrh	r2, [r7, #10]
 8000d20:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2204      	movs	r2, #4
 8000d28:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d107      	bne.n	8000d46 <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000d36:	897b      	ldrh	r3, [r7, #10]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d106      	bne.n	8000d4a <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000d44:	e001      	b.n	8000d4a <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8000d46:	bf00      	nop
 8000d48:	e000      	b.n	8000d4c <ifx_i2c_tl_event_handler+0x60>
            break;
 8000d4a:	bf00      	nop
    }
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	817b      	strh	r3, [r7, #10]
 8000d64:	4613      	mov	r3, r2
 8000d66:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d112      	bne.n	8000da0 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000d80:	4618      	mov	r0, r3
 8000d82:	f005 f9b0 	bl	80060e6 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f005 f94b 	bl	8006028 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 f945 	bl	8006028 <pal_gpio_set_low>
            break;
 8000d9e:	e000      	b.n	8000da2 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000da0:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000db8:	8979      	ldrh	r1, [r7, #10]
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4798      	blx	r3
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8000dd0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000dd4:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d004      	beq.n	8000dea <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d156      	bne.n	8000e98 <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000df0:	2bb3      	cmp	r3, #179	@ 0xb3
 8000df2:	d048      	beq.n	8000e86 <ifx_i2c_init+0xbe>
 8000df4:	2bb3      	cmp	r3, #179	@ 0xb3
 8000df6:	dc4d      	bgt.n	8000e94 <ifx_i2c_init+0xcc>
 8000df8:	2bb1      	cmp	r3, #177	@ 0xb1
 8000dfa:	d002      	beq.n	8000e02 <ifx_i2c_init+0x3a>
 8000dfc:	2bb2      	cmp	r3, #178	@ 0xb2
 8000dfe:	d021      	beq.n	8000e44 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 8000e00:	e048      	b.n	8000e94 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 f908 	bl	8006028 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f005 f902 	bl	8006028 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	22b2      	movs	r2, #178	@ 0xb2
 8000e28:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e32:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4923      	ldr	r1, [pc, #140]	@ (8000ec8 <ifx_i2c_init+0x100>)
 8000e3a:	f005 fb2d 	bl	8006498 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	81fb      	strh	r3, [r7, #14]
                break;
 8000e42:	e028      	b.n	8000e96 <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d105      	bne.n	8000e5a <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000e54:	4618      	mov	r0, r3
 8000e56:	f005 f8d7 	bl	8006008 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000e60:	4618      	mov	r0, r3
 8000e62:	f005 f8d1 	bl	8006008 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	22b3      	movs	r2, #179	@ 0xb3
 8000e6a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000e74:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4913      	ldr	r1, [pc, #76]	@ (8000ec8 <ifx_i2c_init+0x100>)
 8000e7c:	f005 fb0c 	bl	8006498 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000e80:	2300      	movs	r3, #0
 8000e82:	81fb      	strh	r3, [r7, #14]
                break;
 8000e84:	e007      	b.n	8000e96 <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000e86:	4911      	ldr	r1, [pc, #68]	@ (8000ecc <ifx_i2c_init+0x104>)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f001 f953 	bl	8002134 <ifx_i2c_prl_init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	81fb      	strh	r3, [r7, #14]
                break;
 8000e92:	e000      	b.n	8000e96 <ifx_i2c_init+0xce>
                break;
 8000e94:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8000e96:	e009      	b.n	8000eac <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000ea0:	490a      	ldr	r1, [pc, #40]	@ (8000ecc <ifx_i2c_init+0x104>)
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f001 f946 	bl	8002134 <ifx_i2c_prl_init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000eb2:	89f9      	ldrh	r1, [r7, #14]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff17 	bl	8000cec <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	08000dc9 	.word	0x08000dc9
 8000ecc:	08000ced 	.word	0x08000ced

08000ed0 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000ee2:	4919      	ldr	r1, [pc, #100]	@ (8000f48 <ifx_i2c_dl_init+0x78>)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fc37 	bl	8001758 <ifx_i2c_pl_init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000ef0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000ef4:	e024      	b.n	8000f40 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2203      	movs	r2, #3
 8000f12:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	080012ed 	.word	0x080012ed

08000f4c <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <ifx_i2c_dl_send_frame+0x1c>
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000f68:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000f6c:	e01a      	b.n	8000fa4 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2202      	movs	r2, #2
 8000f72:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	887a      	ldrh	r2, [r7, #2]
 8000f8a:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	220a      	movs	r2, #10
 8000f92:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000f96:	8879      	ldrh	r1, [r7, #2]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f88a 	bl	80010b6 <ifx_i2c_dl_send_frame_internal>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000fbe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000fc2:	e019      	b.n	8000ff8 <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000fdc:	f005 fb07 	bl	80065ee <pal_os_timer_get_time_in_milliseconds>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <ifx_i2c_dl_receive_frame+0x54>)
 8000fec:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fc2a 	bl	800184a <ifx_i2c_pl_receive_frame>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	0002bf20 	.word	0x0002bf20

08001004 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	4613      	mov	r3, r2
 8001012:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	b29a      	uxth	r2, r3
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	4053      	eors	r3, r2
 800101c:	b29b      	uxth	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	b29a      	uxth	r2, r3
 8001030:	89fb      	ldrh	r3, [r7, #14]
 8001032:	4053      	eors	r3, r2
 8001034:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8001036:	897b      	ldrh	r3, [r7, #10]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800103c:	897b      	ldrh	r3, [r7, #10]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	b29a      	uxth	r2, r3
 8001042:	893b      	ldrh	r3, [r7, #8]
 8001044:	4053      	eors	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b29a      	uxth	r2, r3
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	4053      	eors	r3, r2
 8001050:	b29b      	uxth	r3, r3
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	b29a      	uxth	r2, r3
 8001056:	893b      	ldrh	r3, [r7, #8]
 8001058:	4053      	eors	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	4053      	eors	r3, r2
 8001064:	b29b      	uxth	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b084      	sub	sp, #16
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	81fb      	strh	r3, [r7, #14]
 8001086:	e00d      	b.n	80010a4 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	89bb      	ldrh	r3, [r7, #12]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffb5 	bl	8001004 <ifx_i2c_dl_calc_crc_byte>
 800109a:	4603      	mov	r3, r0
 800109c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	3301      	adds	r3, #1
 80010a2:	81fb      	strh	r3, [r7, #14]
 80010a4:	89fa      	ldrh	r2, [r7, #14]
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3ed      	bcc.n	8001088 <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 80010ac:	89bb      	ldrh	r3, [r7, #12]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	4608      	mov	r0, r1
 80010c0:	4611      	mov	r1, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	4603      	mov	r3, r0
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	460b      	mov	r3, r1
 80010ca:	707b      	strb	r3, [r7, #1]
 80010cc:	4613      	mov	r3, r2
 80010ce:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80010d6:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d107      	bne.n	80010ee <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80010e4:	3301      	adds	r3, #1
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80010f4:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 80010f6:	787b      	ldrb	r3, [r7, #1]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d105      	bne.n	8001108 <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001106:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d108      	bne.n	8001120 <ifx_i2c_dl_send_frame_internal+0x6a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001114:	2b09      	cmp	r3, #9
 8001116:	d103      	bne.n	8001120 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800111e:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b2da      	uxtb	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d022      	beq.n	8001186 <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8001140:	783b      	ldrb	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <ifx_i2c_dl_send_frame_internal+0x9a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001156:	3301      	adds	r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	781a      	ldrb	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8001184:	e006      	b.n	8001194 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800118e:	b2da      	uxtb	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	0a1b      	lsrs	r3, r3, #8
 8001198:	b29a      	uxth	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	3301      	adds	r3, #1
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3302      	adds	r3, #2
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	3303      	adds	r3, #3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4619      	mov	r1, r3
 80011b4:	6938      	ldr	r0, [r7, #16]
 80011b6:	f7ff ff5c 	bl	8001072 <ifx_i2c_dl_calc_crc>
 80011ba:	4603      	mov	r3, r0
 80011bc:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	3303      	adds	r3, #3
 80011c8:	4619      	mov	r1, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	440b      	add	r3, r1
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	3304      	adds	r3, #4
 80011d6:	461a      	mov	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4413      	add	r3, r2
 80011dc:	89fa      	ldrh	r2, [r7, #14]
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	3305      	adds	r3, #5
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	6939      	ldr	r1, [r7, #16]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fb03 	bl	80017f8 <ifx_i2c_pl_send_frame>
 80011f2:	4603      	mov	r3, r0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2203      	movs	r2, #3
 8001210:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2205      	movs	r2, #5
 8001220:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8001224:	2300      	movs	r3, #0
 8001226:	2202      	movs	r2, #2
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff43 	bl	80010b6 <ifx_i2c_dl_send_frame_internal>
 8001230:	4603      	mov	r3, r0
 8001232:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8001234:	89fb      	ldrh	r3, [r7, #14]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 800124c:	f005 f9cf 	bl	80065ee <pal_os_timer_get_time_in_milliseconds>
 8001250:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	429a      	cmp	r2, r3
 8001268:	d205      	bcs.n	8001276 <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <ifx_i2c_dl_resend_frame+0xa8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d82c      	bhi.n	80012d8 <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001284:	2b03      	cmp	r3, #3
 8001286:	d109      	bne.n	800129c <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffb3 	bl	80011fc <ifx_i2c_dl_resync>
 8001296:	4603      	mov	r3, r0
 8001298:	82fb      	strh	r3, [r7, #22]
 800129a:	e015      	b.n	80012c8 <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 80012ba:	78fa      	ldrb	r2, [r7, #3]
 80012bc:	2301      	movs	r3, #1
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fef9 	bl	80010b6 <ifx_i2c_dl_send_frame_internal>
 80012c4:	4603      	mov	r3, r0
 80012c6:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 80012c8:	8afb      	ldrh	r3, [r7, #22]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d008      	beq.n	80012e0 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2206      	movs	r2, #6
 80012d2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 80012d6:	e003      	b.n	80012e0 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2208      	movs	r2, #8
 80012dc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	0002bf1f 	.word	0x0002bf1f

080012ec <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	817b      	strh	r3, [r7, #10]
 80012fc:	4613      	mov	r3, r2
 80012fe:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8001314:	2301      	movs	r3, #1
 8001316:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800132a:	d108      	bne.n	800133e <ifx_i2c_pl_event_handler+0x52>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001332:	2b01      	cmp	r3, #1
 8001334:	d003      	beq.n	800133e <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2208      	movs	r2, #8
 800133a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001344:	3b01      	subs	r3, #1
 8001346:	2b0a      	cmp	r3, #10
 8001348:	f200 81ed 	bhi.w	8001726 <ifx_i2c_pl_event_handler+0x43a>
 800134c:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <ifx_i2c_pl_event_handler+0x68>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001381 	.word	0x08001381
 8001358:	080013a7 	.word	0x080013a7
 800135c:	080013e9 	.word	0x080013e9
 8001360:	0800163b 	.word	0x0800163b
 8001364:	080016bd 	.word	0x080016bd
 8001368:	080016a3 	.word	0x080016a3
 800136c:	08001727 	.word	0x08001727
 8001370:	080016d5 	.word	0x080016d5
 8001374:	08001627 	.word	0x08001627
 8001378:	08001495 	.word	0x08001495
 800137c:	08001565 	.word	0x08001565
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8001380:	897b      	ldrh	r3, [r7, #10]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <ifx_i2c_pl_event_handler+0x9e>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <ifx_i2c_pl_event_handler+0xa0>
 800138a:	2302      	movs	r3, #2
 800138c:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 800138e:	2300      	movs	r3, #0
 8001390:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	b299      	uxth	r1, r3
 800139c:	2300      	movs	r3, #0
 800139e:	2200      	movs	r2, #0
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	47a0      	blx	r4
            }
            break;
 80013a4:	e1cf      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 80013a6:	897b      	ldrh	r3, [r7, #10]
 80013a8:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80013ac:	d104      	bne.n	80013b8 <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2205      	movs	r2, #5
 80013b2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013b6:	e1c6      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 80013b8:	f005 f919 	bl	80065ee <pal_os_timer_get_time_in_milliseconds>
 80013bc:	4602      	mov	r2, r0
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2203      	movs	r2, #3
 80013c8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 fa3c 	bl	800184a <ifx_i2c_pl_receive_frame>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2206      	movs	r2, #6
 80013dc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 80013e0:	e1b1      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	773b      	strb	r3, [r7, #28]
            break;
 80013e6:	e1ae      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 80013e8:	897b      	ldrh	r3, [r7, #10]
 80013ea:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80013ee:	d104      	bne.n	80013fa <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2205      	movs	r2, #5
 80013f4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013f8:	e1a5      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d804      	bhi.n	800140a <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2206      	movs	r2, #6
 8001404:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001408:	e19d      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	09db      	lsrs	r3, r3, #7
 8001414:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	115b      	asrs	r3, r3, #5
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8001422:	7d7b      	ldrb	r3, [r7, #21]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 800142a:	7d7b      	ldrb	r3, [r7, #21]
 800142c:	109b      	asrs	r3, r3, #2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3302      	adds	r3, #2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 800144e:	893b      	ldrh	r3, [r7, #8]
 8001450:	3b02      	subs	r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	b21a      	sxth	r2, r3
 800145c:	893b      	ldrh	r3, [r7, #8]
 800145e:	3b01      	subs	r3, #1
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	440b      	add	r3, r1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 800146e:	893b      	ldrh	r3, [r7, #8]
 8001470:	3b02      	subs	r3, #2
 8001472:	b29b      	uxth	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fdfb 	bl	8001072 <ifx_i2c_dl_calc_crc>
 800147c:	4603      	mov	r3, r0
 800147e:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8001480:	7d3b      	ldrb	r3, [r7, #20]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <ifx_i2c_pl_event_handler+0x19e>
 8001486:	220b      	movs	r2, #11
 8001488:	e000      	b.n	800148c <ifx_i2c_pl_event_handler+0x1a0>
 800148a:	220a      	movs	r2, #10
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8001492:	e158      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001494:	8b3a      	ldrh	r2, [r7, #24]
 8001496:	8afb      	ldrh	r3, [r7, #22]
 8001498:	429a      	cmp	r2, r3
 800149a:	d10d      	bne.n	80014b8 <ifx_i2c_pl_event_handler+0x1cc>
 800149c:	8b7b      	ldrh	r3, [r7, #26]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00a      	beq.n	80014b8 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 80014a2:	893a      	ldrh	r2, [r7, #8]
 80014a4:	8b7b      	ldrh	r3, [r7, #26]
 80014a6:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d105      	bne.n	80014b8 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 80014ac:	7f7b      	ldrb	r3, [r7, #29]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d002      	beq.n	80014b8 <ifx_i2c_pl_event_handler+0x1cc>
 80014b2:	7f7b      	ldrb	r3, [r7, #29]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d104      	bne.n	80014c2 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2206      	movs	r2, #6
 80014bc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80014c0:	e141      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 80014c2:	7ffa      	ldrb	r2, [r7, #31]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80014ca:	3301      	adds	r3, #1
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d00c      	beq.n	80014ee <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2209      	movs	r2, #9
 80014d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 80014dc:	2300      	movs	r3, #0
 80014de:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 80014e0:	2300      	movs	r3, #0
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fde5 	bl	80010b6 <ifx_i2c_dl_send_frame_internal>
                    break;
 80014ec:	e12b      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80014f4:	7fba      	ldrb	r2, [r7, #30]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d004      	beq.n	8001504 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2209      	movs	r2, #9
 80014fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001502:	e120      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d104      	bne.n	8001514 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001512:	e118      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 800151a:	3301      	adds	r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001530:	893a      	ldrh	r2, [r7, #8]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	f00c f9e4 	bl	800d902 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	893a      	ldrh	r2, [r7, #8]
 800153e:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2204      	movs	r2, #4
 800154e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001552:	2300      	movs	r3, #0
 8001554:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8001556:	2300      	movs	r3, #0
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fdaa 	bl	80010b6 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001562:	e0f0      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800156a:	461a      	mov	r2, r3
 800156c:	7f7b      	ldrb	r3, [r7, #29]
 800156e:	2b02      	cmp	r3, #2
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	429a      	cmp	r2, r3
 800157a:	d004      	beq.n	8001586 <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2209      	movs	r2, #9
 8001580:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001584:	e0df      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 8001586:	8b3a      	ldrh	r2, [r7, #24]
 8001588:	8afb      	ldrh	r3, [r7, #22]
 800158a:	429a      	cmp	r2, r3
 800158c:	d004      	beq.n	8001598 <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001596:	e0d6      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8001598:	893b      	ldrh	r3, [r7, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d802      	bhi.n	80015a4 <ifx_i2c_pl_event_handler+0x2b8>
 800159e:	8b7b      	ldrh	r3, [r7, #26]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2209      	movs	r2, #9
 80015a8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80015ac:	e0cb      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 80015ae:	7f7b      	ldrb	r3, [r7, #29]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d110      	bne.n	80015d6 <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2209      	movs	r2, #9
 80015b8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2203      	movs	r2, #3
 80015c8:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2203      	movs	r2, #3
 80015d0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 80015d4:	e0b7      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <ifx_i2c_pl_event_handler+0x302>
 80015dc:	7f7b      	ldrb	r3, [r7, #29]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d005      	beq.n	80015ee <ifx_i2c_pl_event_handler+0x302>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80015e8:	7fba      	ldrb	r2, [r7, #30]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d004      	beq.n	80015f8 <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2209      	movs	r2, #9
 80015f2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80015f6:	e0a6      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80015f8:	7f7b      	ldrb	r3, [r7, #29]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d104      	bne.n	8001608 <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2205      	movs	r2, #5
 8001602:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001606:	e09e      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001610:	2300      	movs	r3, #0
 8001612:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	2102      	movs	r1, #2
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	47a0      	blx	r4
            }
            break;
 8001624:	e08f      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2203      	movs	r2, #3
 800162a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800162e:	2300      	movs	r3, #0
 8001630:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f909 	bl	800184a <ifx_i2c_pl_receive_frame>
            }
            break;
 8001638:	e085      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800163a:	897b      	ldrh	r3, [r7, #10]
 800163c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001640:	d104      	bne.n	800164c <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800164a:	e07c      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001654:	2300      	movs	r3, #0
 8001656:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00f      	beq.n	8001682 <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800166e:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001676:	3b05      	subs	r3, #5
 8001678:	b29b      	uxth	r3, r3
 800167a:	2104      	movs	r1, #4
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001680:	e061      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800168e:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001696:	3b05      	subs	r3, #5
 8001698:	b29b      	uxth	r3, r3
 800169a:	2106      	movs	r1, #6
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	47a0      	blx	r4
            break;
 80016a0:	e051      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2202      	movs	r2, #2
 80016a6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 80016ae:	2300      	movs	r3, #0
 80016b0:	2201      	movs	r2, #1
 80016b2:	2100      	movs	r1, #0
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fcfe 	bl	80010b6 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 80016ba:	e044      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 80016bc:	2100      	movs	r1, #0
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff fdbe 	bl	8001240 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d03a      	beq.n	8001744 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 80016d2:	e037      	b.n	8001744 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10c      	bne.n	800170a <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80016fe:	2300      	movs	r3, #0
 8001700:	2200      	movs	r2, #0
 8001702:	2101      	movs	r1, #1
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	47a0      	blx	r4
 8001708:	e00a      	b.n	8001720 <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fd76 	bl	80011fc <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2208      	movs	r2, #8
 8001714:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 8001720:	2300      	movs	r3, #0
 8001722:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001724:	e00f      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001734:	2300      	movs	r3, #0
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	47a0      	blx	r4
                continue_state_machine = FALSE;
 800173e:	2300      	movs	r3, #0
 8001740:	773b      	strb	r3, [r7, #28]
                break;
 8001742:	e000      	b.n	8001746 <ifx_i2c_pl_event_handler+0x45a>
            break;
 8001744:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 8001746:	7f3b      	ldrb	r3, [r7, #28]
 8001748:	2b01      	cmp	r3, #1
 800174a:	f43f adeb 	beq.w	8001324 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	3724      	adds	r7, #36	@ 0x24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}

08001758 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	22bb      	movs	r2, #187	@ 0xbb
 8001776:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 8001786:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800178e:	4a19      	ldr	r2, [pc, #100]	@ (80017f4 <ifx_i2c_pl_init+0x9c>)
 8001790:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	22c8      	movs	r2, #200	@ 0xc8
 8001796:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10b      	bne.n	80017bc <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fc90 	bl	80060d0 <pal_i2c_init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 80017b6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80017ba:	e016      	b.n	80017ea <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2299      	movs	r2, #153	@ 0x99
 80017ca:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2205      	movs	r2, #5
 80017d2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80017d6:	e003      	b.n	80017e0 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80017e0:	2100      	movs	r1, #0
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa84 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08001fd9 	.word	0x08001fd9

080017f8 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	4613      	mov	r3, r2
 8001804:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800180c:	2b01      	cmp	r3, #1
 800180e:	d007      	beq.n	8001820 <ifx_i2c_pl_send_frame+0x28>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001816:	2b02      	cmp	r3, #2
 8001818:	d002      	beq.n	8001820 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 800181a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800181e:	e010      	b.n	8001842 <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001838:	2100      	movs	r1, #0
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fa58 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001858:	2b01      	cmp	r3, #1
 800185a:	d007      	beq.n	800186c <ifx_i2c_pl_receive_frame+0x22>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001862:	2b02      	cmp	r3, #2
 8001864:	d002      	beq.n	800186c <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8001866:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800186a:	e008      	b.n	800187e <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fa3a 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
 8001892:	4613      	mov	r3, r2
 8001894:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	883a      	ldrh	r2, [r7, #0]
 80018aa:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	22c8      	movs	r2, #200	@ 0xc8
 80018ba:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80018d8:	461a      	mov	r2, r3
 80018da:	f004 fc0f 	bl	80060fc <pal_i2c_write>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	72fb      	strb	r3, [r7, #11]
 80018f4:	4613      	mov	r3, r2
 80018f6:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	7afa      	ldrb	r2, [r7, #11]
 80018fc:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001906:	3301      	adds	r3, #1
 8001908:	893a      	ldrh	r2, [r7, #8]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f00b fff8 	bl	800d902 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 8001912:	893b      	ldrh	r3, [r7, #8]
 8001914:	3301      	adds	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	22c8      	movs	r2, #200	@ 0xc8
 800192a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001948:	461a      	mov	r2, r3
 800194a:	f004 fbd7 	bl	80060fc <pal_i2c_write>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800195e:	2204      	movs	r2, #4
 8001960:	2182      	movs	r1, #130	@ 0x82
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff8f 	bl	8001886 <ifx_i2c_pl_read_register>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f004 fc2a 	bl	80061f4 <pal_i2c_set_bitrate>
 80019a0:	4603      	mov	r3, r0
 80019a2:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d019      	beq.n	80019e8 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 80019ba:	1e5a      	subs	r2, r3, #1
 80019bc:	b291      	uxth	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4908      	ldr	r1, [pc, #32]	@ (80019f8 <ifx_i2c_pl_set_bit_rate+0x88>)
 80019d6:	f004 fd5f 	bl	8006498 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 80019da:	2301      	movs	r3, #1
 80019dc:	81fb      	strh	r3, [r7, #14]
 80019de:	e005      	b.n	80019ec <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 80019e0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80019e4:	81fb      	strh	r3, [r7, #14]
 80019e6:	e001      	b.n	80019ec <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 80019e8:	2300      	movs	r3, #0
 80019ea:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 80019ec:	89fb      	ldrh	r3, [r7, #14]

}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	080019fd 	.word	0x080019fd

080019fc <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b08b      	sub	sp, #44	@ 0x2c
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 8001a04:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001a08:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	733b      	strb	r3, [r7, #12]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8001a3a:	2bbb      	cmp	r3, #187	@ 0xbb
 8001a3c:	d031      	beq.n	8001aa2 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001a3e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001a40:	f300 8145 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a44:	2baa      	cmp	r3, #170	@ 0xaa
 8001a46:	f000 812d 	beq.w	8001ca4 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 8001a4a:	2baa      	cmp	r3, #170	@ 0xaa
 8001a4c:	f300 813f 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a50:	2b88      	cmp	r3, #136	@ 0x88
 8001a52:	f000 8103 	beq.w	8001c5c <ifx_i2c_pl_negotiation_event_handler+0x260>
 8001a56:	2b88      	cmp	r3, #136	@ 0x88
 8001a58:	f300 8139 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a5c:	2b77      	cmp	r3, #119	@ 0x77
 8001a5e:	f000 80c6 	beq.w	8001bee <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001a62:	2b77      	cmp	r3, #119	@ 0x77
 8001a64:	f300 8133 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a68:	2b66      	cmp	r3, #102	@ 0x66
 8001a6a:	f000 809d 	beq.w	8001ba8 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001a6e:	2b66      	cmp	r3, #102	@ 0x66
 8001a70:	f300 812d 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a74:	2b55      	cmp	r3, #85	@ 0x55
 8001a76:	f000 808d 	beq.w	8001b94 <ifx_i2c_pl_negotiation_event_handler+0x198>
 8001a7a:	2b55      	cmp	r3, #85	@ 0x55
 8001a7c:	f300 8127 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a80:	2b44      	cmp	r3, #68	@ 0x44
 8001a82:	d040      	beq.n	8001b06 <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001a84:	2b44      	cmp	r3, #68	@ 0x44
 8001a86:	f300 8122 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a8a:	2b33      	cmp	r3, #51	@ 0x33
 8001a8c:	d031      	beq.n	8001af2 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001a8e:	2b33      	cmp	r3, #51	@ 0x33
 8001a90:	f300 811d 	bgt.w	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001a94:	2b11      	cmp	r3, #17
 8001a96:	f000 80cb 	beq.w	8001c30 <ifx_i2c_pl_negotiation_event_handler+0x234>
 8001a9a:	2b22      	cmp	r3, #34	@ 0x22
 8001a9c:	f000 80d4 	beq.w	8001c48 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001aa0:	e115      	b.n	8001cce <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001aa2:	2164      	movs	r1, #100	@ 0x64
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff63 	bl	8001970 <ifx_i2c_pl_set_bit_rate>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2233      	movs	r2, #51	@ 0x33
 8001ab8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001ac2:	e106      	b.n	8001cd2 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001ac4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ac6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001aca:	f040 8102 	bne.w	8001cd2 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	22aa      	movs	r2, #170	@ 0xaa
 8001ad2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ae4:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4980      	ldr	r1, [pc, #512]	@ (8001cec <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 8001aec:	f004 fcd4 	bl	8006498 <pal_os_event_register_callback_oneshot>
            break;
 8001af0:	e0ef      	b.n	8001cd2 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2244      	movs	r2, #68	@ 0x44
 8001af6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001afa:	2204      	movs	r2, #4
 8001afc:	2184      	movs	r1, #132	@ 0x84
 8001afe:	69b8      	ldr	r0, [r7, #24]
 8001b00:	f7ff fec1 	bl	8001886 <ifx_i2c_pl_read_register>
            break;
 8001b04:	e0e8      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001b0c:	021b      	lsls	r3, r3, #8
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001b28:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b2c:	d911      	bls.n	8001b52 <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001b2e:	8abb      	ldrh	r3, [r7, #20]
 8001b30:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b34:	d80d      	bhi.n	8001b52 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001b36:	2304      	movs	r3, #4
 8001b38:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2255      	movs	r2, #85	@ 0x55
 8001b3e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	2202      	movs	r2, #2
 8001b48:	2189      	movs	r1, #137	@ 0x89
 8001b4a:	69b8      	ldr	r0, [r7, #24]
 8001b4c:	f7ff fecb 	bl	80018e6 <ifx_i2c_pl_write_register>
 8001b50:	e01f      	b.n	8001b92 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001b58:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b5c:	d811      	bhi.n	8001b82 <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001b5e:	8abb      	ldrh	r3, [r7, #20]
 8001b60:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b64:	d90d      	bls.n	8001b82 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001b66:	2303      	movs	r3, #3
 8001b68:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	2255      	movs	r2, #85	@ 0x55
 8001b6e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2202      	movs	r2, #2
 8001b78:	2189      	movs	r1, #137	@ 0x89
 8001b7a:	69b8      	ldr	r0, [r7, #24]
 8001b7c:	f7ff feb3 	bl	80018e6 <ifx_i2c_pl_write_register>
 8001b80:	e007      	b.n	8001b92 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2266      	movs	r2, #102	@ 0x66
 8001b86:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001b90:	e0a2      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001b92:	e0a1      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2266      	movs	r2, #102	@ 0x66
 8001b98:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	2184      	movs	r1, #132	@ 0x84
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	f7ff fe70 	bl	8001886 <ifx_i2c_pl_read_register>
            break;
 8001ba6:	e097      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001bc6:	8aba      	ldrh	r2, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d208      	bcs.n	8001bde <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	22aa      	movs	r2, #170	@ 0xaa
 8001bd8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001bdc:	e003      	b.n	8001be6 <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2277      	movs	r2, #119	@ 0x77
 8001be2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001be6:	2301      	movs	r3, #1
 8001be8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001bec:	e074      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff feba 	bl	8001970 <ifx_i2c_pl_set_bit_rate>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001c00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	2211      	movs	r2, #17
 8001c0a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001c14:	e05f      	b.n	8001cd6 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001c16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001c18:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001c1c:	d15b      	bne.n	8001cd6 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	22aa      	movs	r2, #170	@ 0xaa
 8001c22:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001c2e:	e052      	b.n	8001cd6 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2222      	movs	r2, #34	@ 0x22
 8001c34:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	2181      	movs	r1, #129	@ 0x81
 8001c40:	69b8      	ldr	r0, [r7, #24]
 8001c42:	f7ff fe50 	bl	80018e6 <ifx_i2c_pl_write_register>
            break;
 8001c46:	e047      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2288      	movs	r2, #136	@ 0x88
 8001c4c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001c50:	2202      	movs	r2, #2
 8001c52:	2181      	movs	r1, #129	@ 0x81
 8001c54:	69b8      	ldr	r0, [r7, #24]
 8001c56:	f7ff fe16 	bl	8001886 <ifx_i2c_pl_read_register>
            break;
 8001c5a:	e03d      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	22aa      	movs	r2, #170	@ 0xaa
 8001c60:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001c82:	8afa      	ldrh	r2, [r7, #22]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d805      	bhi.n	8001c94 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	8afa      	ldrh	r2, [r7, #22]
 8001c8c:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001c90:	2300      	movs	r3, #0
 8001c92:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001ca2:	e019      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001ca4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d104      	bne.n	8001cb4 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001cb2:	e003      	b.n	8001cbc <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001cc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001cc4:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	69b8      	ldr	r0, [r7, #24]
 8001cca:	47a0      	blx	r4
            break;
 8001ccc:	e004      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 8001cce:	bf00      	nop
 8001cd0:	e002      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001cd2:	bf00      	nop
 8001cd4:	e000      	b.n	8001cd8 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001cd6:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001cd8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f47f aea6 	bne.w	8001a2e <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8001ce2:	bf00      	nop
 8001ce4:	bf00      	nop
 8001ce6:	372c      	adds	r7, #44	@ 0x2c
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	080019fd 	.word	0x080019fd

08001cf0 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00c      	beq.n	8001d1c <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d10:	8879      	ldrh	r1, [r7, #2]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2200      	movs	r2, #0
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001d1a:	e0f0      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001d22:	3b01      	subs	r3, #1
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	f200 80dc 	bhi.w	8001ee2 <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d30 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001d4d 	.word	0x08001d4d
 8001d34:	08001d55 	.word	0x08001d55
 8001d38:	08001d73 	.word	0x08001d73
 8001d3c:	08001ec1 	.word	0x08001ec1
 8001d40:	08001d45 	.word	0x08001d45
                ifx_i2c_pl_soft_reset(p_ctx);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f983 	bl	8002050 <ifx_i2c_pl_soft_reset>
            break;
 8001d4a:	e0d8      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fe55 	bl	80019fc <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001d52:	e0d4      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2203      	movs	r2, #3
 8001d58:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d105      	bne.n	8001d72 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001d66:	2204      	movs	r2, #4
 8001d68:	2182      	movs	r1, #130	@ 0x82
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fd8b 	bl	8001886 <ifx_i2c_pl_read_register>
                    break;
 8001d70:	e0c5      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d159      	bne.n	8001e30 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d052      	beq.n	8001e30 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001d9a:	b21b      	sxth	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001da2:	8a7b      	ldrh	r3, [r7, #18]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <ifx_i2c_pl_frame_event_handler+0xda>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001dae:	8a7a      	ldrh	r2, [r7, #18]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d80a      	bhi.n	8001dca <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2204      	movs	r2, #4
 8001db8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001dbc:	8a7b      	ldrh	r3, [r7, #18]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	2180      	movs	r1, #128	@ 0x80
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fd5f 	bl	8001886 <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001dc8:	e079      	b.n	8001ebe <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001dca:	f004 fc10 	bl	80065ee <pal_os_timer_get_time_in_milliseconds>
 8001dce:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d205      	bcs.n	8001df4 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d209      	bcs.n	8001e14 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001e06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	493e      	ldr	r1, [pc, #248]	@ (8001f08 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001e0e:	f004 fb43 	bl	8006498 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e12:	e054      	b.n	8001ebe <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001e22:	2300      	movs	r3, #0
 8001e24:	2200      	movs	r2, #0
 8001e26:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001e2e:	e046      	b.n	8001ebe <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10e      	bne.n	8001e58 <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001e4e:	2180      	movs	r1, #128	@ 0x80
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fd48 	bl	80018e6 <ifx_i2c_pl_write_register>
            break;
 8001e56:	e052      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001e58:	f004 fbc9 	bl	80065ee <pal_os_timer_get_time_in_milliseconds>
 8001e5c:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d205      	bcs.n	8001e82 <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d209      	bcs.n	8001ea2 <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001e94:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	491b      	ldr	r1, [pc, #108]	@ (8001f08 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001e9c:	f004 fafc 	bl	8006498 <pal_os_event_register_callback_oneshot>
            break;
 8001ea0:	e02d      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	47a0      	blx	r4
            break;
 8001ebc:	e01f      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
 8001ebe:	e01e      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001eda:	2100      	movs	r1, #0
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	47a0      	blx	r4
            break;
 8001ee0:	e00d      	b.n	8001efe <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	47a0      	blx	r4
            break;
 8001efc:	bf00      	nop
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd90      	pop	{r4, r7, pc}
 8001f06:	bf00      	nop
 8001f08:	08001957 	.word	0x08001957

08001f0c <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10c      	bne.n	8001f3c <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001f34:	461a      	mov	r2, r3
 8001f36:	f004 f8e1 	bl	80060fc <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8001f3a:	e010      	b.n	8001f5e <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d10b      	bne.n	8001f5e <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f004 f90d 	bl	8006178 <pal_i2c_read>
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11f      	bne.n	8001fbc <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d110      	bne.n	8001fa8 <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f004 f8e9 	bl	8006178 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8001fa6:	e012      	b.n	8001fce <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d10d      	bne.n	8001fce <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fe9b 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
}
 8001fba:	e008      	b.n	8001fce <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d103      	bne.n	8001fce <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff fe91 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60fb      	str	r3, [r7, #12]
    switch (event)
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01e      	beq.n	800202c <ifx_i2c_pl_pal_event_handler+0x54>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db25      	blt.n	800203e <ifx_i2c_pl_pal_event_handler+0x66>
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d822      	bhi.n	800203e <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001ffe:	1e5a      	subs	r2, r3, #1
 8002000:	b291      	uxth	r1, r2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	490b      	ldr	r1, [pc, #44]	@ (8002048 <ifx_i2c_pl_pal_event_handler+0x70>)
 800201a:	f004 fa3d 	bl	8006498 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 800201e:	e00f      	b.n	8002040 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8002020:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fe63 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
            break;
 800202a:	e009      	b.n	8002040 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8002032:	2332      	movs	r3, #50	@ 0x32
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4905      	ldr	r1, [pc, #20]	@ (800204c <ifx_i2c_pl_pal_event_handler+0x74>)
 8002038:	f004 fa2e 	bl	8006498 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 800203c:	e000      	b.n	8002040 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 800203e:	bf00      	nop
    }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	08001f0d 	.word	0x08001f0d
 800204c:	08001f67 	.word	0x08001f67

08002050 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8002058:	2300      	movs	r3, #0
 800205a:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8002062:	3b99      	subs	r3, #153	@ 0x99
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d85e      	bhi.n	8002126 <ifx_i2c_pl_soft_reset+0xd6>
 8002068:	a201      	add	r2, pc, #4	@ (adr r2, 8002070 <ifx_i2c_pl_soft_reset+0x20>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	0800209d 	.word	0x0800209d
 8002074:	08002127 	.word	0x08002127
 8002078:	08002127 	.word	0x08002127
 800207c:	08002127 	.word	0x08002127
 8002080:	08002127 	.word	0x08002127
 8002084:	08002127 	.word	0x08002127
 8002088:	08002127 	.word	0x08002127
 800208c:	08002127 	.word	0x08002127
 8002090:	08002115 	.word	0x08002115
 8002094:	080020b1 	.word	0x080020b1
 8002098:	080020f9 	.word	0x080020f9
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	22a2      	movs	r2, #162	@ 0xa2
 80020a0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 80020a4:	2204      	movs	r2, #4
 80020a6:	2182      	movs	r1, #130	@ 0x82
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fbec 	bl	8001886 <ifx_i2c_pl_read_register>
            break;
 80020ae:	e03b      	b.n	8002128 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d10b      	bne.n	80020e4 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	22a3      	movs	r2, #163	@ 0xa3
 80020d0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	2202      	movs	r2, #2
 80020da:	2188      	movs	r1, #136	@ 0x88
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff fc02 	bl	80018e6 <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 80020e2:	e021      	b.n	8002128 <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 80020ec:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fdfd 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
            break;
 80020f6:	e017      	b.n	8002128 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	22a1      	movs	r2, #161	@ 0xa1
 80020fc:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8002106:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4908      	ldr	r1, [pc, #32]	@ (8002130 <ifx_i2c_pl_soft_reset+0xe0>)
 800210e:	f004 f9c3 	bl	8006498 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8002112:	e009      	b.n	8002128 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800211c:	2100      	movs	r1, #0
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fde6 	bl	8001cf0 <ifx_i2c_pl_frame_event_handler>
            break;
 8002124:	e000      	b.n	8002128 <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8002126:	bf00      	nop
    }
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	08002051 	.word	0x08002051

08002134 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800213e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002142:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 800214c:	491c      	ldr	r1, [pc, #112]	@ (80021c0 <ifx_i2c_prl_init+0x8c>)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f001 faa0 	bl	8003694 <ifx_i2c_tl_init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d12b      	bne.n	80021b2 <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002166:	2b11      	cmp	r3, #17
 8002168:	d104      	bne.n	8002174 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8002172:	e003      	b.n	800217c <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2211      	movs	r2, #17
 80021a0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2211      	movs	r2, #17
 80021a8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 80021ac:	2300      	movs	r3, #0
 80021ae:	81fb      	strh	r3, [r7, #14]
 80021b0:	e000      	b.n	80021b4 <ifx_i2c_prl_init+0x80>
            break;
 80021b2:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 80021b4:	89fb      	ldrh	r3, [r7, #14]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08002d3d 	.word	0x08002d3d

080021c4 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80021ce:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80021d2:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d12e      	bne.n	800223c <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80021ea:	2b33      	cmp	r3, #51	@ 0x33
 80021ec:	d109      	bne.n	8002202 <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80021f2:	2300      	movs	r3, #0
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 80021fc:	2300      	movs	r3, #0
 80021fe:	81fb      	strh	r3, [r7, #14]
            break;
 8002200:	e01d      	b.n	800223e <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002208:	2b01      	cmp	r3, #1
 800220a:	d118      	bne.n	800223e <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8002212:	2b22      	cmp	r3, #34	@ 0x22
 8002214:	d113      	bne.n	800223e <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2208      	movs	r2, #8
 800221a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 800222c:	2301      	movs	r3, #1
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fd83 	bl	8002d3c <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8002236:	2300      	movs	r3, #0
 8002238:	81fb      	strh	r3, [r7, #14]
            break;
 800223a:	e000      	b.n	800223e <ifx_i2c_prl_close+0x7a>
            break;
 800223c:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 800223e:	89fb      	ldrh	r3, [r7, #14]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002258:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800225c:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d05a      	beq.n	800231a <ifx_i2c_prl_transceive+0xd2>
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d057      	beq.n	800231a <ifx_i2c_prl_transceive+0xd2>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002270:	2b01      	cmp	r3, #1
 8002272:	d152      	bne.n	800231a <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800227a:	2b11      	cmp	r3, #17
 800227c:	d10d      	bne.n	800229a <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2208      	movs	r2, #8
 800228c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8002298:	e003      	b.n	80022a2 <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d006      	beq.n	80022cc <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80022c4:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d103      	bne.n	80022d4 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80022d2:	e003      	b.n	80022dc <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	1d1a      	adds	r2, r3, #4
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a3a      	ldr	r2, [r7, #32]
 80022e0:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2211      	movs	r2, #17
 8002306:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	2100      	movs	r1, #0
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fd13 	bl	8002d3c <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8002316:	2300      	movs	r3, #0
 8002318:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 800231a:	8afb      	ldrh	r3, [r7, #22]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b09e      	sub	sp, #120	@ 0x78
 8002328:	af06      	add	r7, sp, #24
 800232a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 800232c:	f240 1307 	movw	r3, #263	@ 0x107
 8002330:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <ifx_i2c_prl_prf+0xa4>)
 8002336:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800233a:	461d      	mov	r5, r3
 800233c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002340:	682b      	ldr	r3, [r5, #0]
 8002342:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	f107 020a 	add.w	r2, r7, #10
 8002350:	f107 010c 	add.w	r1, r7, #12
 8002354:	4618      	mov	r0, r3
 8002356:	f003 ffd9 	bl	800630c <pal_os_datastore_read>
 800235a:	4603      	mov	r3, r0
 800235c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8002360:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002368:	f240 1307 	movw	r3, #263	@ 0x107
 800236c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8002370:	e024      	b.n	80023bc <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002372:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 800237c:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002380:	f107 010c 	add.w	r1, r7, #12
 8002384:	2528      	movs	r5, #40	@ 0x28
 8002386:	9504      	str	r5, [sp, #16]
 8002388:	9203      	str	r2, [sp, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	9202      	str	r2, [sp, #8]
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2310      	movs	r3, #16
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4623      	mov	r3, r4
 8002396:	4602      	mov	r2, r0
 8002398:	2000      	movs	r0, #0
 800239a:	f003 fdcd 	bl	8005f38 <pal_crypt_tls_prf_sha256>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 80023a4:	f240 1307 	movw	r3, #263	@ 0x107
 80023a8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00b fa5e 	bl	800d878 <memset>

    } while (FALSE);
    return (return_status);
 80023bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3760      	adds	r7, #96	@ 0x60
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	0800e880 	.word	0x0800e880

080023cc <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	461a      	mov	r2, r3
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
 80023dc:	4613      	mov	r3, r2
 80023de:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	7a7a      	ldrb	r2, [r7, #9]
 80023e4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	33a1      	adds	r3, #161	@ 0xa1
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f003 fc7b 	bl	8005cea <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	33a6      	adds	r3, #166	@ 0xa6
 8002404:	897a      	ldrh	r2, [r7, #10]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f003 fc57 	bl	8005cbc <optiga_common_set_uint16>
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b08e      	sub	sp, #56	@ 0x38
 800241a:	af06      	add	r7, sp, #24
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002426:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800242a:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 800242c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002430:	88f9      	ldrh	r1, [r7, #6]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ffc9 	bl	80023cc <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3378      	adds	r3, #120	@ 0x78
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	3304      	adds	r3, #4
 8002448:	6839      	ldr	r1, [r7, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f003 fc4d 	bl	8005cea <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 800245a:	88f9      	ldrh	r1, [r7, #6]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	9205      	str	r2, [sp, #20]
 8002460:	2208      	movs	r2, #8
 8002462:	9204      	str	r2, [sp, #16]
 8002464:	2208      	movs	r2, #8
 8002466:	9203      	str	r2, [sp, #12]
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2308      	movs	r3, #8
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4603      	mov	r3, r0
 8002476:	460a      	mov	r2, r1
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	2000      	movs	r0, #0
 800247c:	f003 fd82 	bl	8005f84 <pal_crypt_encrypt_aes128_ccm>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8002486:	2300      	movs	r3, #0
 8002488:	83fb      	strh	r3, [r7, #30]
 800248a:	e000      	b.n	800248e <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 800248c:	bf00      	nop
    } while (FALSE);
    return (return_status);
 800248e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	@ 0x38
 800249c:	af06      	add	r7, sp, #24
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80024a8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80024ac:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 80024ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80024b2:	88f9      	ldrh	r1, [r7, #6]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff ff88 	bl	80023cc <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80024bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80024c0:	3358      	adds	r3, #88	@ 0x58
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	3304      	adds	r3, #4
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fc09 	bl	8005cea <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	3308      	adds	r3, #8
 80024dc:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80024de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024e2:	3358      	adds	r3, #88	@ 0x58
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80024ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ee:	9205      	str	r2, [sp, #20]
 80024f0:	2208      	movs	r2, #8
 80024f2:	9204      	str	r2, [sp, #16]
 80024f4:	2208      	movs	r2, #8
 80024f6:	9203      	str	r2, [sp, #12]
 80024f8:	9302      	str	r3, [sp, #8]
 80024fa:	2308      	movs	r3, #8
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	4603      	mov	r3, r0
 8002506:	460a      	mov	r2, r1
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	2000      	movs	r0, #0
 800250c:	f003 fd5b 	bl	8005fc6 <pal_crypt_decrypt_aes128_ccm>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8002516:	2300      	movs	r3, #0
 8002518:	83fb      	strh	r3, [r7, #30]
 800251a:	e000      	b.n	800251e <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 800251c:	bf00      	nop
    } while (FALSE);
    return (return_status);
 800251e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8002530:	2300      	movs	r3, #0
 8002532:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002542:	2b04      	cmp	r3, #4
 8002544:	d134      	bne.n	80025b0 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 800254c:	3301      	adds	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2203      	movs	r2, #3
 800255a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800256c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002570:	b2da      	uxtb	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3354      	adds	r3, #84	@ 0x54
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	2201      	movs	r2, #1
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f001 f8a9 	bl	80036f0 <ifx_i2c_tl_transceive>
 800259e:	4603      	mov	r3, r0
 80025a0:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	e00d      	b.n	80025cc <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80025b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	22ff      	movs	r2, #255	@ 0xff
 80025c6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 80025ca:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 80025cc:	89fb      	ldrh	r3, [r7, #14]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08a      	sub	sp, #40	@ 0x28
 80025da:	af04      	add	r7, sp, #16
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80025e0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80025e4:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80025f0:	2b55      	cmp	r3, #85	@ 0x55
 80025f2:	f000 8178 	beq.w	80028e6 <ifx_i2c_prl_do_handshake+0x310>
 80025f6:	2b55      	cmp	r3, #85	@ 0x55
 80025f8:	f300 817f 	bgt.w	80028fa <ifx_i2c_prl_do_handshake+0x324>
 80025fc:	2b44      	cmp	r3, #68	@ 0x44
 80025fe:	f000 8100 	beq.w	8002802 <ifx_i2c_prl_do_handshake+0x22c>
 8002602:	2b44      	cmp	r3, #68	@ 0x44
 8002604:	f300 8179 	bgt.w	80028fa <ifx_i2c_prl_do_handshake+0x324>
 8002608:	2b33      	cmp	r3, #51	@ 0x33
 800260a:	f000 8095 	beq.w	8002738 <ifx_i2c_prl_do_handshake+0x162>
 800260e:	2b33      	cmp	r3, #51	@ 0x33
 8002610:	f300 8173 	bgt.w	80028fa <ifx_i2c_prl_do_handshake+0x324>
 8002614:	2b11      	cmp	r3, #17
 8002616:	d002      	beq.n	800261e <ifx_i2c_prl_do_handshake+0x48>
 8002618:	2b22      	cmp	r3, #34	@ 0x22
 800261a:	d034      	beq.n	8002686 <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 800261c:	e16d      	b.n	80028fa <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2226      	movs	r2, #38	@ 0x26
 8002642:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3354      	adds	r3, #84	@ 0x54
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	2202      	movs	r2, #2
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f001 f847 	bl	80036f0 <ifx_i2c_tl_transceive>
 8002662:	4603      	mov	r3, r0
 8002664:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002666:	8afb      	ldrh	r3, [r7, #22]
 8002668:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800266c:	d106      	bne.n	800267c <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2255      	movs	r2, #85	@ 0x55
 8002672:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002676:	2301      	movs	r3, #1
 8002678:	613b      	str	r3, [r7, #16]
                    break;
 800267a:	e13f      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2222      	movs	r2, #34	@ 0x22
 8002680:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002684:	e13a      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 8002686:	2301      	movs	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00e      	beq.n	80026c0 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d109      	bne.n	80026c0 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80026ac:	f240 1307 	movw	r3, #263	@ 0x107
 80026b0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	22ff      	movs	r2, #255	@ 0xff
 80026b6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
                    break;
 80026be:	e11d      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80026c6:	2b26      	cmp	r3, #38	@ 0x26
 80026c8:	d108      	bne.n	80026dc <ifx_i2c_prl_do_handshake+0x106>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d104      	bne.n	80026dc <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d004      	beq.n	80026e6 <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2255      	movs	r2, #85	@ 0x55
 80026e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80026e4:	e10a      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3322      	adds	r3, #34	@ 0x22
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fb1e 	bl	8005d2c <optiga_common_get_uint32>
 80026f0:	4602      	mov	r2, r0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	3302      	adds	r3, #2
 8002708:	2220      	movs	r2, #32
 800270a:	4619      	mov	r1, r3
 800270c:	f00b f8f9 	bl	800d902 <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fe07 	bl	8002324 <ifx_i2c_prl_prf>
 8002716:	4603      	mov	r3, r0
 8002718:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 800271a:	8afb      	ldrh	r3, [r7, #22]
 800271c:	f240 1207 	movw	r2, #263	@ 0x107
 8002720:	4293      	cmp	r3, r2
 8002722:	d104      	bne.n	800272e <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2255      	movs	r2, #85	@ 0x55
 8002728:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 800272c:	e0e6      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2233      	movs	r2, #51	@ 0x33
 8002732:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002736:	e0e1      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2208      	movs	r2, #8
 800273c:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3380      	adds	r3, #128	@ 0x80
 800274e:	2220      	movs	r2, #32
 8002750:	4619      	mov	r1, r3
 8002752:	f00b f8d6 	bl	800d902 <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f003 fac1 	bl	8005cea <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	2224      	movs	r2, #36	@ 0x24
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fe49 	bl	8002416 <ifx_i2c_prl_encrypt_msg>
 8002784:	4603      	mov	r3, r0
 8002786:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002788:	8afb      	ldrh	r3, [r7, #22]
 800278a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800278e:	d106      	bne.n	800279e <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2255      	movs	r2, #85	@ 0x55
 8002794:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	613b      	str	r3, [r7, #16]
                    break;
 800279c:	e0ae      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f003 fa97 	bl	8005cea <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2231      	movs	r2, #49	@ 0x31
 80027c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3354      	adds	r3, #84	@ 0x54
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	2231      	movs	r2, #49	@ 0x31
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 ff88 	bl	80036f0 <ifx_i2c_tl_transceive>
 80027e0:	4603      	mov	r3, r0
 80027e2:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80027e4:	8afb      	ldrh	r3, [r7, #22]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2255      	movs	r2, #85	@ 0x55
 80027ee:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
                    break;
 80027f6:	e081      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2244      	movs	r2, #68	@ 0x44
 80027fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002800:	e07c      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d104      	bne.n	8002814 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 8002810:	2b31      	cmp	r3, #49	@ 0x31
 8002812:	d006      	beq.n	8002822 <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2255      	movs	r2, #85	@ 0x55
 8002818:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
                    break;
 8002820:	e06c      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fa80 	bl	8005d2c <optiga_common_get_uint32>
 800282c:	4602      	mov	r2, r0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	1d59      	adds	r1, r3, #5
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002844:	9203      	str	r2, [sp, #12]
 8002846:	2224      	movs	r2, #36	@ 0x24
 8002848:	9202      	str	r2, [sp, #8]
 800284a:	2210      	movs	r2, #16
 800284c:	9201      	str	r2, [sp, #4]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4603      	mov	r3, r0
 8002852:	2224      	movs	r2, #36	@ 0x24
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fe1f 	bl	8002498 <ifx_i2c_prl_decrypt_msg>
 800285a:	4603      	mov	r3, r0
 800285c:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800285e:	8afb      	ldrh	r3, [r7, #22]
 8002860:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002864:	d106      	bne.n	8002874 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2255      	movs	r2, #85	@ 0x55
 800286a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800286e:	2301      	movs	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
                    break;
 8002872:	e043      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fa33 	bl	8005cea <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	33a8      	adds	r3, #168	@ 0xa8
 800288e:	2220      	movs	r2, #32
 8002890:	4619      	mov	r1, r3
 8002892:	f00a ffe1 	bl	800d858 <memcmp>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 800289c:	f240 1307 	movw	r3, #263	@ 0x107
 80028a0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2255      	movs	r2, #85	@ 0x55
 80028a6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	613b      	str	r3, [r7, #16]
                    break;
 80028ae:	e025      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	2204      	movs	r2, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f00a ffcb 	bl	800d858 <memcmp>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80028c8:	f240 1307 	movw	r3, #263	@ 0x107
 80028cc:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2255      	movs	r2, #85	@ 0x55
 80028d2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	613b      	str	r3, [r7, #16]
                    break;
 80028da:	e00f      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80028e4:	e00a      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80028e6:	f240 1307 	movw	r3, #263	@ 0x107
 80028ea:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	22ff      	movs	r2, #255	@ 0xff
 80028f0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
            break;
 80028f8:	e000      	b.n	80028fc <ifx_i2c_prl_do_handshake+0x326>
            break;
 80028fa:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f43f ae73 	beq.w	80025ea <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 8002904:	8afb      	ldrh	r3, [r7, #22]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b094      	sub	sp, #80	@ 0x50
 8002912:	af02      	add	r7, sp, #8
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800291e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002922:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 800292c:	2b01      	cmp	r3, #1
 800292e:	d003      	beq.n	8002938 <ifx_i2c_prl_do_manage_context+0x2a>
 8002930:	2b02      	cmp	r3, #2
 8002932:	f000 80eb 	beq.w	8002b0c <ifx_i2c_prl_do_manage_context+0x1fe>
 8002936:	e1df      	b.n	8002cf8 <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800293e:	b25b      	sxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	da07      	bge.n	8002954 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 800294c:	2300      	movs	r3, #0
 800294e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002952:	e1ed      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800295a:	2b22      	cmp	r3, #34	@ 0x22
 800295c:	d10c      	bne.n	8002978 <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2260      	movs	r2, #96	@ 0x60
 8002962:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8002976:	e0a6      	b.n	8002ac6 <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800297e:	2b11      	cmp	r3, #17
 8002980:	f040 8093 	bne.w	8002aaa <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800298a:	885b      	ldrh	r3, [r3, #2]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d033      	beq.n	80029f8 <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2234      	movs	r2, #52	@ 0x34
 8002994:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800299e:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80029a0:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3354      	adds	r3, #84	@ 0x54
 80029a6:	461a      	mov	r2, r3
 80029a8:	f003 fcb0 	bl	800630c <pal_os_datastore_read>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 80029b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f000 81b7 	beq.w	8002d2a <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d130      	bne.n	8002a34 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80029f6:	e19b      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d112      	bne.n	8002a28 <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 8002a26:	e183      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2268      	movs	r2, #104	@ 0x68
 8002a38:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	f003 f94e 	bl	8005cea <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2205      	movs	r2, #5
 8002a52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2205      	movs	r2, #5
 8002a60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a72:	885b      	ldrh	r3, [r3, #2]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d026      	beq.n	8002ac6 <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2234      	movs	r2, #52	@ 0x34
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00a fef9 	bl	800d878 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002a8c:	885b      	ldrh	r3, [r3, #2]
 8002a8e:	f107 0110 	add.w	r1, r7, #16
 8002a92:	2234      	movs	r2, #52	@ 0x34
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fbbb 	bl	8006210 <pal_os_datastore_write>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10e      	bne.n	8002ac6 <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 8002aa8:	e142      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	22ff      	movs	r2, #255	@ 0xff
 8002aae:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002ac0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002ac4:	e134      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3354      	adds	r3, #84	@ 0x54
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4603      	mov	r3, r0
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fe05 	bl	80036f0 <ifx_i2c_tl_transceive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 8002aec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 811c 	bne.w	8002d2e <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2202      	movs	r2, #2
 8002afa:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002b0a:	e111      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002b1e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b22:	2b6c      	cmp	r3, #108	@ 0x6c
 8002b24:	d133      	bne.n	8002b8e <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d12e      	bne.n	8002b8e <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d12b      	bne.n	8002b8e <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	2228      	movs	r2, #40	@ 0x28
 8002b42:	4619      	mov	r1, r3
 8002b44:	f00a fedd 	bl	800d902 <memcpy>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2204      	movs	r2, #4
 8002b88:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b8c:	e0ac      	b.n	8002ce8 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002b8e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	f040 808b 	bne.w	8002cae <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002b9e:	2b22      	cmp	r3, #34	@ 0x22
 8002ba0:	f040 8085 	bne.w	8002cae <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	f040 8081 	bne.w	8002cae <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f103 0008 	add.w	r0, r3, #8
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3358      	adds	r3, #88	@ 0x58
 8002bbe:	2228      	movs	r2, #40	@ 0x28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f00a fe9e 	bl	800d902 <memcpy>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002c00:	885b      	ldrh	r3, [r3, #2]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d02e      	beq.n	8002c64 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2234      	movs	r2, #52	@ 0x34
 8002c0a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002c14:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002c16:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f003 faf6 	bl	8006210 <pal_os_datastore_write>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002c2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	22ff      	movs	r2, #255	@ 0xff
 8002c36:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
                        break;
 8002c62:	e065      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3358      	adds	r3, #88	@ 0x58
 8002c68:	2228      	movs	r2, #40	@ 0x28
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f00a fe03 	bl	800d878 <memset>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	649a      	str	r2, [r3, #72]	@ 0x48
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002cac:	e01c      	b.n	8002ce8 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2234      	movs	r2, #52	@ 0x34
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f00a fddf 	bl	800d878 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002cc0:	885b      	ldrh	r3, [r3, #2]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ccc:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002cce:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002cd0:	2234      	movs	r2, #52	@ 0x34
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fa9c 	bl	8006210 <pal_os_datastore_write>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8002cde:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002ce2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002ce6:	e023      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002cf6:	e01b      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	22ff      	movs	r2, #255	@ 0xff
 8002cfc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2207      	movs	r2, #7
 8002d04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002d28:	e002      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002d2e:	bf00      	nop
    }
  return (return_status);
 8002d30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3748      	adds	r7, #72	@ 0x48
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b097      	sub	sp, #92	@ 0x5c
 8002d40:	af04      	add	r7, sp, #16
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	817b      	strh	r3, [r7, #10]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002d56:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002d5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d104      	bne.n	8002d72 <ifx_i2c_prl_event_handler+0x36>
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d029      	beq.n	8002dc6 <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22ff      	movs	r2, #255	@ 0xff
 8002d76:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d105      	bne.n	8002d90 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f240 1207 	movw	r2, #263	@ 0x107
 8002d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d8e:	e016      	b.n	8002dbe <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10d      	bne.n	8002db6 <ifx_i2c_prl_event_handler+0x7a>
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da0:	d009      	beq.n	8002db6 <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002db4:	e003      	b.n	8002dbe <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	897a      	ldrh	r2, [r7, #10]
 8002dba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	2b07      	cmp	r3, #7
 8002dd0:	f200 8445 	bhi.w	800365e <ifx_i2c_prl_event_handler+0x922>
 8002dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ddc <ifx_i2c_prl_event_handler+0xa0>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002dfd 	.word	0x08002dfd
 8002de0:	08002e6b 	.word	0x08002e6b
 8002de4:	0800327d 	.word	0x0800327d
 8002de8:	08002fab 	.word	0x08002fab
 8002dec:	08002eaf 	.word	0x08002eaf
 8002df0:	08003515 	.word	0x08003515
 8002df4:	0800362f 	.word	0x0800362f
 8002df8:	08002e19 	.word	0x08002e19
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002e06:	2300      	movs	r3, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	47a0      	blx	r4
                exit_machine = FALSE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002e14:	f000 bc34 	b.w	8003680 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002e18:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002e1c:	893a      	ldrh	r2, [r7, #8]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff fd74 	bl	800290e <ifx_i2c_prl_do_manage_context>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8424 	beq.w	800367e <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	22ff      	movs	r2, #255	@ 0xff
 8002e3a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2207      	movs	r2, #7
 8002e42:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002e66:	f000 bc0a 	b.w	800367e <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	db09      	blt.n	8002e8a <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d011      	beq.n	8002ea4 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2211      	movs	r2, #17
 8002e96:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002ea2:	e3ed      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002eac:	e3e8      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	2228      	movs	r2, #40	@ 0x28
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f00a fcde 	bl	800d878 <memset>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002ee8:	f107 0310 	add.w	r3, r7, #16
 8002eec:	2234      	movs	r2, #52	@ 0x34
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00a fcc1 	bl	800d878 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002efc:	885b      	ldrh	r3, [r3, #2]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02e      	beq.n	8002f60 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002f08:	885b      	ldrh	r3, [r3, #2]
 8002f0a:	f107 0110 	add.w	r1, r7, #16
 8002f0e:	2234      	movs	r2, #52	@ 0x34
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 f97d 	bl	8006210 <pal_os_datastore_write>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002f1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01d      	beq.n	8002f60 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	22ff      	movs	r2, #255	@ 0xff
 8002f28:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2207      	movs	r2, #7
 8002f30:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f240 1207 	movw	r2, #263	@ 0x107
 8002f5a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002f5e:	e38f      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fb37 	bl	80025d6 <ifx_i2c_prl_do_handshake>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002f6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f72:	f240 1207 	movw	r2, #263	@ 0x107
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d109      	bne.n	8002f8e <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002f80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2207      	movs	r2, #7
 8002f88:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002f8c:	e378      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d104      	bne.n	8002fa2 <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002fa0:	e36e      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002fa8:	e36a      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	f043 0320 	orr.w	r3, r3, #32
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d006      	beq.n	8002fe2 <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002fda:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d122      	bne.n	8003028 <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f113 0f10 	cmn.w	r3, #16
 8002fec:	d914      	bls.n	8003018 <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10f      	bne.n	8003018 <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2205      	movs	r2, #5
 8003004:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003008:	2301      	movs	r3, #1
 800300a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2211      	movs	r2, #17
 8003012:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8003016:	e333      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	320d      	adds	r2, #13
 8003024:	b292      	uxth	r2, r2
 8003026:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d007      	beq.n	8003052 <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003048:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 800304c:	2b03      	cmp	r3, #3
 800304e:	f040 80c2 	bne.w	80031d6 <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	3301      	adds	r3, #1
 8003058:	f113 0f10 	cmn.w	r3, #16
 800305c:	d914      	bls.n	8003088 <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10f      	bne.n	8003088 <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2205      	movs	r2, #5
 8003074:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2211      	movs	r2, #17
 8003082:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8003086:	e2fb      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800308e:	2b04      	cmp	r3, #4
 8003090:	d13f      	bne.n	8003112 <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003096:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80030a6:	3305      	adds	r3, #5
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 80030ae:	9203      	str	r2, [sp, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	9202      	str	r2, [sp, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	9201      	str	r2, [sp, #4]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	4623      	mov	r3, r4
 80030bc:	4602      	mov	r2, r0
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff f9ea 	bl	8002498 <ifx_i2c_prl_decrypt_msg>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 80030ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80030ce:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80030d2:	d118      	bne.n	8003106 <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	22ff      	movs	r2, #255	@ 0xff
 80030d8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2207      	movs	r2, #7
 80030e0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80030f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8003104:	e2bc      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8003110:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2205      	movs	r2, #5
 8003120:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f002 fdda 	bl	8005cea <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800313a:	1d59      	adds	r1, r3, #5
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4603      	mov	r3, r0
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f7ff f960 	bl	8002416 <ifx_i2c_prl_encrypt_msg>
 8003156:	4603      	mov	r3, r0
 8003158:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 800315c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003160:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003164:	d118      	bne.n	8003198 <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	22ff      	movs	r2, #255	@ 0xff
 800316a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2207      	movs	r2, #7
 8003172:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003184:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003196:	e273      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80031a2:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 80031b4:	4413      	add	r3, r2
 80031b6:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80031b8:	3308      	adds	r3, #8
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	4603      	mov	r3, r0
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fa91 	bl	80036f0 <ifx_i2c_tl_transceive>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80031d4:	e021      	b.n	800321a <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e2:	3304      	adds	r3, #4
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80031ea:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80031f0:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80031fe:	4413      	add	r3, r2
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4603      	mov	r3, r0
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa6e 	bl	80036f0 <ifx_i2c_tl_transceive>
 8003214:	4603      	mov	r3, r0
 8003216:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 800321a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800321e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003222:	d11d      	bne.n	8003260 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	@ 0xff
 8003228:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2207      	movs	r2, #7
 8003230:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003242:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800325a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 800325e:	e20f      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	881a      	ldrh	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2203      	movs	r2, #3
 8003270:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 800327a:	e201      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	3301      	adds	r3, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f002 fd52 	bl	8005d2c <optiga_common_get_uint32>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 800328e:	893b      	ldrh	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d118      	bne.n	80032c6 <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	22ff      	movs	r2, #255	@ 0xff
 8003298:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2207      	movs	r2, #7
 80032a0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80032b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 80032c4:	e1dc      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d040      	beq.n	8003354 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	d003      	beq.n	80032e2 <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80032de:	2b44      	cmp	r3, #68	@ 0x44
 80032e0:	d10c      	bne.n	80032fc <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d004      	beq.n	80032f2 <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d004      	beq.n	80032fc <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d109      	bne.n	8003310 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003302:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800330e:	e018      	b.n	8003342 <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10e      	bne.n	8003338 <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8003320:	2b11      	cmp	r3, #17
 8003322:	d109      	bne.n	8003338 <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003332:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003336:	e004      	b.n	8003342 <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800333e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2206      	movs	r2, #6
 8003346:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	@ 0xff
 800334e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003352:	e195      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 800335e:	429a      	cmp	r2, r3
 8003360:	d018      	beq.n	8003394 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	22ff      	movs	r2, #255	@ 0xff
 8003366:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2207      	movs	r2, #7
 800336e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003380:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8003392:	e175      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d006      	beq.n	80033ae <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	f040 8082 	bne.w	80034b2 <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 80033ae:	893b      	ldrh	r3, [r7, #8]
 80033b0:	2b0d      	cmp	r3, #13
 80033b2:	d818      	bhi.n	80033e6 <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	22ff      	movs	r2, #255	@ 0xff
 80033b8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2207      	movs	r2, #7
 80033c0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80033e4:	e14c      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	3303      	adds	r3, #3
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d805      	bhi.n	8003400 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d818      	bhi.n	8003432 <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	22ff      	movs	r2, #255	@ 0xff
 8003404:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2207      	movs	r2, #7
 800340c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800341e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003430:	e126      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343e:	881a      	ldrh	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	3a0d      	subs	r2, #13
 8003446:	b292      	uxth	r2, r2
 8003448:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003454:	8818      	ldrh	r0, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 800345e:	3305      	adds	r3, #5
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8003466:	9203      	str	r2, [sp, #12]
 8003468:	2224      	movs	r2, #36	@ 0x24
 800346a:	9202      	str	r2, [sp, #8]
 800346c:	2210      	movs	r2, #16
 800346e:	9201      	str	r2, [sp, #4]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4623      	mov	r3, r4
 8003474:	4602      	mov	r2, r0
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff f80e 	bl	8002498 <ifx_i2c_prl_decrypt_msg>
 800347c:	4603      	mov	r3, r0
 800347e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003482:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003486:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800348a:	d108      	bne.n	800349e <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2206      	movs	r2, #6
 8003490:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2204      	movs	r2, #4
 8003498:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 800349c:	e0f0      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 80034ae:	bf00      	nop
            break;
 80034b0:	e0e6      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d81c      	bhi.n	80034f2 <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2207      	movs	r2, #7
 80034bc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	22ff      	movs	r2, #255	@ 0xff
 80034c4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80034d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 80034dc:	e0d0      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80034e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80034f0:	e0c6      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	3a01      	subs	r2, #1
 80034fe:	b292      	uxth	r2, r2
 8003500:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003512:	e0b5      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b44      	cmp	r3, #68	@ 0x44
 800351a:	d166      	bne.n	80035ea <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d104      	bne.n	800352c <ifx_i2c_prl_event_handler+0x7f0>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003528:	2b02      	cmp	r3, #2
 800352a:	d918      	bls.n	800355e <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	22ff      	movs	r2, #255	@ 0xff
 8003530:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2207      	movs	r2, #7
 8003538:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800354a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 800355c:	e090      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d004      	beq.n	8003572 <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 800356e:	2b03      	cmp	r3, #3
 8003570:	d136      	bne.n	80035e0 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003578:	3301      	adds	r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003590:	2b03      	cmp	r3, #3
 8003592:	d91c      	bls.n	80035ce <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	22ff      	movs	r2, #255	@ 0xff
 8003598:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2207      	movs	r2, #7
 80035a0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80035b2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 80035cc:	e058      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2204      	movs	r2, #4
 80035d2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2204      	movs	r2, #4
 80035da:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 80035de:	e04f      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2207      	movs	r2, #7
 80035e4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80035e8:	e04a      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d117      	bne.n	8003624 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	22ff      	movs	r2, #255	@ 0xff
 80035f8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2207      	movs	r2, #7
 8003600:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003612:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2207      	movs	r2, #7
 8003628:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 800362c:	e028      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003634:	2bff      	cmp	r3, #255	@ 0xff
 8003636:	d00d      	beq.n	8003654 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7fe ff75 	bl	8002528 <ifx_i2c_prl_send_alert>
 800363e:	4603      	mov	r3, r0
 8003640:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	22ff      	movs	r2, #255	@ 0xff
 8003648:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 800364c:	2300      	movs	r3, #0
 800364e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003652:	e015      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 800365c:	e010      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800366a:	2300      	movs	r3, #0
 800366c:	2200      	movs	r2, #0
 800366e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	47a0      	blx	r4
                exit_machine = FALSE;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 800367c:	e000      	b.n	8003680 <ifx_i2c_prl_event_handler+0x944>
            break;
 800367e:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003680:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003684:	2b01      	cmp	r3, #1
 8003686:	f43f ab9e 	beq.w	8002dc6 <ifx_i2c_prl_event_handler+0x8a>
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	374c      	adds	r7, #76	@ 0x4c
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}

08003694 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 80036a6:	4911      	ldr	r1, [pc, #68]	@ (80036ec <ifx_i2c_tl_init+0x58>)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fd fc11 	bl	8000ed0 <ifx_i2c_dl_init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 80036b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80036b8:	e014      	b.n	80036e4 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80036d8:	3b06      	subs	r3, #6
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	080039d5 	.word	0x080039d5

080036f0 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003700:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003704:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d041      	beq.n	8003790 <ifx_i2c_tl_transceive+0xa0>
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d03e      	beq.n	8003790 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003718:	2b01      	cmp	r3, #1
 800371a:	d138      	bne.n	800378e <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003724:	f002 ff63 	bl	80065ee <pal_os_timer_get_time_in_milliseconds>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800377e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f866 	bl	8003854 <ifx_i2c_tl_send_next_fragment>
 8003788:	4603      	mov	r3, r0
 800378a:	82fb      	strh	r3, [r7, #22]
 800378c:	e000      	b.n	8003790 <ifx_i2c_tl_transceive+0xa0>
            break;
 800378e:	bf00      	nop
    } while (FALSE);
    return (status);
 8003790:	8afb      	ldrh	r3, [r7, #22]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d002      	beq.n	80037b2 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 80037ac:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80037b0:	e00f      	b.n	80037d2 <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f842 	bl	8003854 <ifx_i2c_tl_send_next_fragment>
 80037d0:	4603      	mov	r3, r0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80037e8:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <ifx_i2c_tl_calculate_pctr+0x38>
 8003804:	897a      	ldrh	r2, [r7, #10]
 8003806:	89bb      	ldrh	r3, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d802      	bhi.n	8003812 <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e019      	b.n	8003846 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <ifx_i2c_tl_calculate_pctr+0x50>
 800381c:	897a      	ldrh	r2, [r7, #10]
 800381e:	89bb      	ldrh	r3, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d902      	bls.n	800382a <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e00d      	b.n	8003846 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <ifx_i2c_tl_calculate_pctr+0x68>
 8003834:	897a      	ldrh	r2, [r7, #10]
 8003836:	89bb      	ldrh	r3, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 800383c:	2302      	movs	r3, #2
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e001      	b.n	8003846 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8003842:	2304      	movs	r3, #4
 8003844:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 8003846:	7bfb      	ldrb	r3, [r7, #15]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003862:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ffb8 	bl	80037da <ifx_i2c_tl_calculate_pctr>
 800386a:	4603      	mov	r3, r0
 800386c:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003874:	461a      	mov	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800387c:	1ad2      	subs	r2, r2, r3
 800387e:	89fb      	ldrh	r3, [r7, #14]
 8003880:	429a      	cmp	r2, r3
 8003882:	da07      	bge.n	8003894 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003894:	7b7b      	ldrb	r3, [r7, #13]
 8003896:	f043 0308 	orr.w	r3, r3, #8
 800389a:	b2da      	uxtb	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 80038a8:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 80038b6:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 80038b8:	89fa      	ldrh	r2, [r7, #14]
 80038ba:	4619      	mov	r1, r3
 80038bc:	f00a f821 	bl	800d902 <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	4413      	add	r3, r2
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	3301      	adds	r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd fb36 	bl	8000f4c <ifx_i2c_dl_send_frame>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2207      	movs	r2, #7
 80038fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 8003906:	89fb      	ldrh	r3, [r7, #14]
 8003908:	4619      	mov	r1, r3
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fb1e 	bl	8000f4c <ifx_i2c_dl_send_frame>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	460a      	mov	r2, r1
 8003926:	71fb      	strb	r3, [r7, #7]
 8003928:	4613      	mov	r3, r2
 800392a:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 800392c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003930:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2b07      	cmp	r3, #7
 8003936:	d00b      	beq.n	8003950 <ifx_i2c_tl_check_chaining_error+0x34>
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <ifx_i2c_tl_check_chaining_error+0x34>
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d005      	beq.n	8003950 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d002      	beq.n	8003950 <ifx_i2c_tl_check_chaining_error+0x34>
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d110      	bne.n	8003972 <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	4a0b      	ldr	r2, [pc, #44]	@ (8003980 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003954:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003958:	79ba      	ldrb	r2, [r7, #6]
 800395a:	429a      	cmp	r2, r3
 800395c:	d007      	beq.n	800396e <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003968:	79ba      	ldrb	r2, [r7, #6]
 800396a:	429a      	cmp	r2, r3
 800396c:	d101      	bne.n	8003972 <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 800396e:	2300      	movs	r3, #0
 8003970:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003972:	89fb      	ldrh	r3, [r7, #14]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	0800f010 	.word	0x0800f010

08003984 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003990:	2300      	movs	r3, #0
 8003992:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	f023 0307 	bic.w	r3, r3, #7
 800399a:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <presence_bit_check+0x42>
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d004      	beq.n	80039ba <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 80039ba:	7b7b      	ldrb	r3, [r7, #13]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d002      	beq.n	80039c6 <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 80039c0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80039c4:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 80039c6:	89fb      	ldrh	r3, [r7, #14]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	4613      	mov	r3, r2
 80039e6:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2206      	movs	r2, #6
 8003a16:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003a20:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d010      	beq.n	8003a4c <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff ffa8 	bl	8003984 <presence_bit_check>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2206      	movs	r2, #6
 8003a3e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003a48:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	2b07      	cmp	r3, #7
 8003a5e:	f200 81d0 	bhi.w	8003e02 <ifx_i2c_dl_event_handler+0x42e>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <ifx_i2c_dl_event_handler+0x94>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a89 	.word	0x08003a89
 8003a6c:	08003a9f 	.word	0x08003a9f
 8003a70:	08003e03 	.word	0x08003e03
 8003a74:	08003b35 	.word	0x08003b35
 8003a78:	08003c7b 	.word	0x08003c7b
 8003a7c:	08003dd1 	.word	0x08003dd1
 8003a80:	08003d8f 	.word	0x08003d8f
 8003a84:	08003d33 	.word	0x08003d33
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003a92:	2300      	movs	r3, #0
 8003a94:	2200      	movs	r2, #0
 8003a96:	2100      	movs	r1, #0
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	47a0      	blx	r4
            }
            break;
 8003a9c:	e1c3      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d040      	beq.n	8003b2a <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d215      	bcs.n	8003ae4 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8003ab8:	7dbb      	ldrb	r3, [r7, #22]
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	d104      	bne.n	8003ac8 <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003ac6:	e1ae      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8003ac8:	893b      	ldrh	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2206      	movs	r2, #6
 8003ad2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003ad6:	e1a6      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f7ff feb9 	bl	8003854 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003ae2:	e19f      	b.n	8003e24 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003b04:	897b      	ldrh	r3, [r7, #10]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f040 818a 	bne.w	8003e24 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7fd fa4b 	bl	8000fac <ifx_i2c_dl_receive_frame>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2206      	movs	r2, #6
 8003b20:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	757b      	strb	r3, [r7, #21]
            break;
 8003b28:	e17c      	b.n	8003e24 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2206      	movs	r2, #6
 8003b2e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003b32:	e178      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003b34:	897b      	ldrh	r3, [r7, #10]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8098 	beq.w	8003c70 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d104      	bne.n	8003b50 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2206      	movs	r2, #6
 8003b4a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003b4e:	e16a      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003b56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5a:	d114      	bne.n	8003b86 <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003b5c:	7dbb      	ldrb	r3, [r7, #22]
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d005      	beq.n	8003b6e <ifx_i2c_dl_event_handler+0x19a>
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7fd fa22 	bl	8000fac <ifx_i2c_dl_receive_frame>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2206      	movs	r2, #6
 8003b72:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003b76:	e156      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	757b      	strb	r3, [r7, #21]
                        break;
 8003b84:	e14f      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003b8c:	7dbb      	ldrb	r3, [r7, #22]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fec3 	bl	800391c <ifx_i2c_tl_check_chaining_error>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003ba4:	e13f      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003ba6:	7dbb      	ldrb	r3, [r7, #22]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d104      	bne.n	8003bc4 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2206      	movs	r2, #6
 8003bbe:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003bc2:	e130      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003bc4:	7dbb      	ldrb	r3, [r7, #22]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <ifx_i2c_dl_event_handler+0x1fc>
 8003bca:	7dbb      	ldrb	r3, [r7, #22]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d14a      	bne.n	8003c66 <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	4413      	add	r3, r2
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003be4:	8812      	ldrh	r2, [r2, #0]
 8003be6:	4293      	cmp	r3, r2
 8003be8:	dd09      	ble.n	8003bfe <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bf0:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2206      	movs	r2, #6
 8003bf8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003bfc:	e113      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003c0e:	1898      	adds	r0, r3, r2
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f009 fe72 	bl	800d902 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003c24:	893b      	ldrh	r3, [r7, #8]
 8003c26:	4413      	add	r3, r2
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003c48:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003c64:	e0df      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2205      	movs	r2, #5
 8003c6a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003c6e:	e0da      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2206      	movs	r2, #6
 8003c74:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003c78:	e0d5      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003c7a:	893a      	ldrh	r2, [r7, #8]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003c82:	3301      	adds	r3, #1
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d004      	beq.n	8003c92 <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003c90:	e0c9      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003c98:	461a      	mov	r2, r3
 8003c9a:	893b      	ldrh	r3, [r7, #8]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003ca6:	8812      	ldrh	r2, [r2, #0]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	dd09      	ble.n	8003cc0 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003cb2:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003cbe:	e0b2      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2206      	movs	r2, #6
 8003cca:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003cce:	e0aa      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003cdc:	1898      	adds	r0, r3, r2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f009 fe0b 	bl	800d902 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003cf2:	893b      	ldrh	r3, [r7, #8]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2204      	movs	r2, #4
 8003d14:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7fd f947 	bl	8000fac <ifx_i2c_dl_receive_frame>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2206      	movs	r2, #6
 8003d28:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003d30:	e079      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003d32:	893b      	ldrh	r3, [r7, #8]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d909      	bls.n	8003d4c <ifx_i2c_dl_event_handler+0x378>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d104      	bne.n	8003d4c <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2207      	movs	r2, #7
 8003d46:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003d4a:	e06c      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	b2d1      	uxtb	r1, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d111      	bne.n	8003d84 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fd16 	bl	800379a <ifx_i2c_tl_resend_packets>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2206      	movs	r2, #6
 8003d78:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003d7c:	e053      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	757b      	strb	r3, [r7, #21]
            break;
 8003d82:	e050      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2206      	movs	r2, #6
 8003d88:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003d8c:	e04b      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	b2d1      	uxtb	r1, r2
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f7ff fd9d 	bl	80038ea <ifx_i2c_tl_send_chaining_error>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2206      	movs	r2, #6
 8003dba:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003dbe:	e032      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	757b      	strb	r3, [r7, #21]
            break;
 8003dc4:	e02f      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2206      	movs	r2, #6
 8003dca:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003dce:	e02a      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <ifx_i2c_dl_event_handler+0x410>
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	47a0      	blx	r4
            }
            break;
 8003e00:	e011      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	47a0      	blx	r4
            }
            break;
 8003e22:	e000      	b.n	8003e26 <ifx_i2c_dl_event_handler+0x452>
            break;
 8003e24:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003e26:	7d7b      	ldrb	r3, [r7, #21]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	f43f ade3 	beq.w	80039f4 <ifx_i2c_dl_event_handler+0x20>
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003e40:	1d39      	adds	r1, r7, #4
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e46:	2201      	movs	r2, #1
 8003e48:	4803      	ldr	r0, [pc, #12]	@ (8003e58 <__io_putchar+0x20>)
 8003e4a:	f008 fa83 	bl	800c354 <HAL_UART_Transmit>

  return ch;
 8003e4e:	687b      	ldr	r3, [r7, #4]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000678 	.word	0x20000678

08003e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e62:	f003 fb61 	bl	8007528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e66:	f000 f871 	bl	8003f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e6a:	f000 f9a1 	bl	80041b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e6e:	f000 f975 	bl	800415c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003e72:	f000 f8f7 	bl	8004064 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003e76:	f000 f923 	bl	80040c0 <MX_TIM2_Init>
  MX_CRC_Init();
 8003e7a:	f000 f8df 	bl	800403c <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003e7e:	f000 f8d1 	bl	8004024 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003e82:	4829      	ldr	r0, [pc, #164]	@ (8003f28 <main+0xcc>)
 8003e84:	f007 fe32 	bl	800baec <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	201c      	movs	r0, #28
 8003e8e:	f003 fcbc 	bl	800780a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e92:	201c      	movs	r0, #28
 8003e94:	f003 fcd5 	bl	8007842 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2120      	movs	r1, #32
 8003e9c:	4823      	ldr	r0, [pc, #140]	@ (8003f2c <main+0xd0>)
 8003e9e:	f004 fc1f 	bl	80086e0 <HAL_GPIO_WritePin>



   // optiga_main_logic();
    /* Check the GPIO for 3 seconds */
  	  optiga_main_logic();
 8003ea2:	f000 fa1f 	bl	80042e4 <optiga_main_logic>
      GPIO_PinState OTA_Pin_state;
      uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8003ea6:	f003 fba5 	bl	80075f4 <HAL_GetTick>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8003eb0:	60fb      	str	r3, [r7, #12]

      printf("Press the User Button PC13 to trigger OTA update...\r\n");
 8003eb2:	481f      	ldr	r0, [pc, #124]	@ (8003f30 <main+0xd4>)
 8003eb4:	f009 fcc8 	bl	800d848 <puts>
      do
      {
        OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8003eb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ebc:	481d      	ldr	r0, [pc, #116]	@ (8003f34 <main+0xd8>)
 8003ebe:	f004 fbf7 	bl	80086b0 <HAL_GPIO_ReadPin>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	72fb      	strb	r3, [r7, #11]
        uint32_t current_tick = HAL_GetTick();
 8003ec6:	f003 fb95 	bl	80075f4 <HAL_GetTick>
 8003eca:	6078      	str	r0, [r7, #4]

        /* Check the button is pressed or not for 3seconds */
        if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d104      	bne.n	8003edc <main+0x80>
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d800      	bhi.n	8003edc <main+0x80>
      {
 8003eda:	e7ed      	b.n	8003eb8 <main+0x5c>
        {
          /* Either timeout or Button is pressed */
          break;
        }
      }while( 1 );
      if( OTA_Pin_state == GPIO_PIN_RESET ) {
 8003edc:	7afb      	ldrb	r3, [r7, #11]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <main+0x90>
    	  /* Initialise Flash */
    	 	  FLASH_IF_init();
 8003ee2:	f7fc fd0b 	bl	80008fc <FLASH_IF_init>
    	 	  /* Display main menu */
    	 	  main_menu ();
 8003ee6:	f000 fb09 	bl	80044fc <main_menu>
 8003eea:	e01a      	b.n	8003f22 <main+0xc6>
      }
      else {
    	  /* Test if user code is programmed starting from address "APPLICATION_ADDRESS" */
    	 	  if (((*(__IO uint32_t*)APPLICATION_ADDRESS) & 0x2FFE0000 ) == 0x20000000)
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <main+0xdc>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <main+0xe0>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef8:	d113      	bne.n	8003f22 <main+0xc6>
    	 	  {
    	 		  /* Jump to user application */
    	 		  jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8003efa:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <main+0xe4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <main+0xe8>)
 8003f00:	6013      	str	r3, [r2, #0]
    	 		  jumpToApplication = (pFunction) jumpAddress;
 8003f02:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <main+0xe8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <main+0xec>)
 8003f0a:	601a      	str	r2, [r3, #0]
    	 		  /* Initialize user application's Stack Pointer */
    	 		  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <main+0xdc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f383 8808 	msr	MSP, r3
}
 8003f18:	bf00      	nop
    	 		  jumpToApplication();
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <main+0xec>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <main+0xc6>
 8003f26:	bf00      	nop
 8003f28:	20000630 	.word	0x20000630
 8003f2c:	40020000 	.word	0x40020000
 8003f30:	0800e894 	.word	0x0800e894
 8003f34:	40020800 	.word	0x40020800
 8003f38:	08020000 	.word	0x08020000
 8003f3c:	2ffe0000 	.word	0x2ffe0000
 8003f40:	08020004 	.word	0x08020004
 8003f44:	200006c8 	.word	0x200006c8
 8003f48:	200006c4 	.word	0x200006c4

08003f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b094      	sub	sp, #80	@ 0x50
 8003f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f52:	f107 0320 	add.w	r3, r7, #32
 8003f56:	2230      	movs	r2, #48	@ 0x30
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f009 fc8c 	bl	800d878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	4b29      	ldr	r3, [pc, #164]	@ (800401c <SystemClock_Config+0xd0>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	4a28      	ldr	r2, [pc, #160]	@ (800401c <SystemClock_Config+0xd0>)
 8003f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f80:	4b26      	ldr	r3, [pc, #152]	@ (800401c <SystemClock_Config+0xd0>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	607b      	str	r3, [r7, #4]
 8003f90:	4b23      	ldr	r3, [pc, #140]	@ (8004020 <SystemClock_Config+0xd4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f98:	4a21      	ldr	r2, [pc, #132]	@ (8004020 <SystemClock_Config+0xd4>)
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8004020 <SystemClock_Config+0xd4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003fa8:	607b      	str	r3, [r7, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003fac:	2302      	movs	r3, #2
 8003fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003fc4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003fc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003fca:	2304      	movs	r3, #4
 8003fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003fce:	2307      	movs	r3, #7
 8003fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd2:	f107 0320 	add.w	r3, r7, #32
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f007 f8a0 	bl	800b11c <HAL_RCC_OscConfig>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003fe2:	f000 f9df 	bl	80043a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fe6:	230f      	movs	r3, #15
 8003fe8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fea:	2302      	movs	r3, #2
 8003fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ff6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ffc:	f107 030c 	add.w	r3, r7, #12
 8004000:	2102      	movs	r1, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f007 fb02 	bl	800b60c <HAL_RCC_ClockConfig>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800400e:	f000 f9c9 	bl	80043a4 <Error_Handler>
  }
}
 8004012:	bf00      	nop
 8004014:	3750      	adds	r7, #80	@ 0x50
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40007000 	.word	0x40007000

08004024 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004028:	2200      	movs	r2, #0
 800402a:	2100      	movs	r1, #0
 800402c:	201f      	movs	r0, #31
 800402e:	f003 fbec 	bl	800780a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004032:	201f      	movs	r0, #31
 8004034:	f003 fc05 	bl	8007842 <HAL_NVIC_EnableIRQ>
}
 8004038:	bf00      	nop
 800403a:	bd80      	pop	{r7, pc}

0800403c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004040:	4b06      	ldr	r3, [pc, #24]	@ (800405c <MX_CRC_Init+0x20>)
 8004042:	4a07      	ldr	r2, [pc, #28]	@ (8004060 <MX_CRC_Init+0x24>)
 8004044:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004046:	4805      	ldr	r0, [pc, #20]	@ (800405c <MX_CRC_Init+0x20>)
 8004048:	f003 fc15 	bl	8007876 <HAL_CRC_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004052:	f000 f9a7 	bl	80043a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200005d4 	.word	0x200005d4
 8004060:	40023000 	.word	0x40023000

08004064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004068:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <MX_I2C1_Init+0x50>)
 800406a:	4a13      	ldr	r2, [pc, #76]	@ (80040b8 <MX_I2C1_Init+0x54>)
 800406c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800406e:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <MX_I2C1_Init+0x50>)
 8004070:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <MX_I2C1_Init+0x58>)
 8004072:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004074:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <MX_I2C1_Init+0x50>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800407a:	4b0e      	ldr	r3, [pc, #56]	@ (80040b4 <MX_I2C1_Init+0x50>)
 800407c:	2200      	movs	r2, #0
 800407e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <MX_I2C1_Init+0x50>)
 8004082:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004086:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004088:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <MX_I2C1_Init+0x50>)
 800408a:	2200      	movs	r2, #0
 800408c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800408e:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <MX_I2C1_Init+0x50>)
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <MX_I2C1_Init+0x50>)
 8004096:	2200      	movs	r2, #0
 8004098:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <MX_I2C1_Init+0x50>)
 800409c:	2200      	movs	r2, #0
 800409e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040a0:	4804      	ldr	r0, [pc, #16]	@ (80040b4 <MX_I2C1_Init+0x50>)
 80040a2:	f004 fb5b 	bl	800875c <HAL_I2C_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040ac:	f000 f97a 	bl	80043a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040b0:	bf00      	nop
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	200005dc 	.word	0x200005dc
 80040b8:	40005400 	.word	0x40005400
 80040bc:	00061a80 	.word	0x00061a80

080040c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d4:	463b      	mov	r3, r7
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <MX_TIM2_Init+0x98>)
 80040de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80040e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004158 <MX_TIM2_Init+0x98>)
 80040e6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80040ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004158 <MX_TIM2_Init+0x98>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80040f2:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <MX_TIM2_Init+0x98>)
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80040f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040fa:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <MX_TIM2_Init+0x98>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004100:	4b15      	ldr	r3, [pc, #84]	@ (8004158 <MX_TIM2_Init+0x98>)
 8004102:	2280      	movs	r2, #128	@ 0x80
 8004104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004106:	4814      	ldr	r0, [pc, #80]	@ (8004158 <MX_TIM2_Init+0x98>)
 8004108:	f007 fca0 	bl	800ba4c <HAL_TIM_Base_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004112:	f000 f947 	bl	80043a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800411a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	4619      	mov	r1, r3
 8004122:	480d      	ldr	r0, [pc, #52]	@ (8004158 <MX_TIM2_Init+0x98>)
 8004124:	f007 fe34 	bl	800bd90 <HAL_TIM_ConfigClockSource>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800412e:	f000 f939 	bl	80043a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004132:	2300      	movs	r3, #0
 8004134:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800413a:	463b      	mov	r3, r7
 800413c:	4619      	mov	r1, r3
 800413e:	4806      	ldr	r0, [pc, #24]	@ (8004158 <MX_TIM2_Init+0x98>)
 8004140:	f008 f836 	bl	800c1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800414a:	f000 f92b 	bl	80043a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000630 	.word	0x20000630

0800415c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004160:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004162:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <MX_USART2_UART_Init+0x50>)
 8004164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004166:	4b10      	ldr	r3, [pc, #64]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004168:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800416c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800416e:	4b0e      	ldr	r3, [pc, #56]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004170:	2200      	movs	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004176:	2200      	movs	r2, #0
 8004178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800417a:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004182:	220c      	movs	r2, #12
 8004184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004186:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 800418e:	2200      	movs	r2, #0
 8004190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004192:	4805      	ldr	r0, [pc, #20]	@ (80041a8 <MX_USART2_UART_Init+0x4c>)
 8004194:	f008 f88e 	bl	800c2b4 <HAL_UART_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800419e:	f000 f901 	bl	80043a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000678 	.word	0x20000678
 80041ac:	40004400 	.word	0x40004400

080041b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	@ 0x28
 80041b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	609a      	str	r2, [r3, #8]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	4b32      	ldr	r3, [pc, #200]	@ (8004294 <MX_GPIO_Init+0xe4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	4a31      	ldr	r2, [pc, #196]	@ (8004294 <MX_GPIO_Init+0xe4>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004294 <MX_GPIO_Init+0xe4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004294 <MX_GPIO_Init+0xe4>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004294 <MX_GPIO_Init+0xe4>)
 80041ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80041f2:	4b28      	ldr	r3, [pc, #160]	@ (8004294 <MX_GPIO_Init+0xe4>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <MX_GPIO_Init+0xe4>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4a23      	ldr	r2, [pc, #140]	@ (8004294 <MX_GPIO_Init+0xe4>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6313      	str	r3, [r2, #48]	@ 0x30
 800420e:	4b21      	ldr	r3, [pc, #132]	@ (8004294 <MX_GPIO_Init+0xe4>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
 800421e:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <MX_GPIO_Init+0xe4>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <MX_GPIO_Init+0xe4>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	6313      	str	r3, [r2, #48]	@ 0x30
 800422a:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <MX_GPIO_Init+0xe4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8004236:	2200      	movs	r2, #0
 8004238:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800423c:	4816      	ldr	r0, [pc, #88]	@ (8004298 <MX_GPIO_Init+0xe8>)
 800423e:	f004 fa4f 	bl	80086e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004248:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800424c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004252:	f107 0314 	add.w	r3, r7, #20
 8004256:	4619      	mov	r1, r3
 8004258:	4810      	ldr	r0, [pc, #64]	@ (800429c <MX_GPIO_Init+0xec>)
 800425a:	f004 f8a5 	bl	80083a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 800425e:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8004262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004264:	2301      	movs	r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800426c:	2300      	movs	r3, #0
 800426e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004270:	f107 0314 	add.w	r3, r7, #20
 8004274:	4619      	mov	r1, r3
 8004276:	4808      	ldr	r0, [pc, #32]	@ (8004298 <MX_GPIO_Init+0xe8>)
 8004278:	f004 f896 	bl	80083a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800427c:	2200      	movs	r2, #0
 800427e:	2100      	movs	r1, #0
 8004280:	2028      	movs	r0, #40	@ 0x28
 8004282:	f003 fac2 	bl	800780a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004286:	2028      	movs	r0, #40	@ 0x28
 8004288:	f003 fadb 	bl	8007842 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800428c:	bf00      	nop
 800428e:	3728      	adds	r7, #40	@ 0x28
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40023800 	.word	0x40023800
 8004298:	40020000 	.word	0x40020000
 800429c:	40020800 	.word	0x40020800

080042a0 <optiga_util_callback>:

/* USER CODE BEGIN 4 */

// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80042ac:	4a04      	ldr	r2, [pc, #16]	@ (80042c0 <optiga_util_callback+0x20>)
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	8013      	strh	r3, [r2, #0]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	200006c0 	.word	0x200006c0

080042c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d4:	d101      	bne.n	80042da <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 80042d6:	f002 f92d 	bl	8006534 <pal_os_event_timer_tick>
    }
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <optiga_main_logic>:
void optiga_main_logic(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 80042ee:	f240 3302 	movw	r3, #770	@ 0x302
 80042f2:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 80042f4:	2200      	movs	r2, #0
 80042f6:	4924      	ldr	r1, [pc, #144]	@ (8004388 <optiga_main_logic+0xa4>)
 80042f8:	2000      	movs	r0, #0
 80042fa:	f001 fd79 	bl	8005df0 <optiga_util_create>
 80042fe:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8004306:	4821      	ldr	r0, [pc, #132]	@ (800438c <optiga_main_logic+0xa8>)
 8004308:	f009 fa9e 	bl	800d848 <puts>
        return;
 800430c:	e038      	b.n	8004380 <optiga_main_logic+0x9c>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800430e:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <optiga_main_logic+0xac>)
 8004310:	2201      	movs	r2, #1
 8004312:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 8004314:	2100      	movs	r1, #0
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 fdac 	bl	8005e74 <optiga_util_open_application>
 800431c:	4603      	mov	r3, r0
 800431e:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 8004320:	887b      	ldrh	r3, [r7, #2]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 8004326:	481b      	ldr	r0, [pc, #108]	@ (8004394 <optiga_main_logic+0xb0>)
 8004328:	f009 fa8e 	bl	800d848 <puts>
            continue;
 800432c:	e027      	b.n	800437e <optiga_main_logic+0x9a>
        }
        HAL_Delay(100);
 800432e:	2064      	movs	r0, #100	@ 0x64
 8004330:	f003 f96c 	bl	800760c <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8004334:	e001      	b.n	800433a <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8004336:	f002 f8db 	bl	80064f0 <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <optiga_main_logic+0xac>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d0f8      	beq.n	8004336 <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 8004344:	2064      	movs	r0, #100	@ 0x64
 8004346:	f003 f961 	bl	800760c <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 800434a:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <optiga_main_logic+0xac>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <optiga_main_logic+0x84>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8004354:	4810      	ldr	r0, [pc, #64]	@ (8004398 <optiga_main_logic+0xb4>)
 8004356:	f009 fa77 	bl	800d848 <puts>
            break;
 800435a:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Turn ON LED if you want
 800435c:	2201      	movs	r2, #1
 800435e:	2120      	movs	r1, #32
 8004360:	480e      	ldr	r0, [pc, #56]	@ (800439c <optiga_main_logic+0xb8>)
 8004362:	f004 f9bd 	bl	80086e0 <HAL_GPIO_WritePin>
 8004366:	e00b      	b.n	8004380 <optiga_main_logic+0x9c>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <optiga_main_logic+0xac>)
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	4619      	mov	r1, r3
 8004370:	480b      	ldr	r0, [pc, #44]	@ (80043a0 <optiga_main_logic+0xbc>)
 8004372:	f009 fa01 	bl	800d778 <iprintf>
            HAL_Delay(2000);
 8004376:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800437a:	f003 f947 	bl	800760c <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800437e:	e7c6      	b.n	800430e <optiga_main_logic+0x2a>

}
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	080042a1 	.word	0x080042a1
 800438c:	0800e8cc 	.word	0x0800e8cc
 8004390:	200006c0 	.word	0x200006c0
 8004394:	0800e8f4 	.word	0x0800e8f4
 8004398:	0800e934 	.word	0x0800e934
 800439c:	40020000 	.word	0x40020000
 80043a0:	0800e960 	.word	0x0800e960

080043a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043a8:	b672      	cpsid	i
}
 80043aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <Error_Handler+0x8>

080043b0 <serial_download>:
/**
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void serial_download(void) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
	uint8_t number[11] = {0};
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f8c3 2003 	str.w	r2, [r3, #3]
	uint32_t size = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	603b      	str	r3, [r7, #0]
	COM_StatusTypeDef result = COM_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
	serial_put_string((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 80043ce:	4825      	ldr	r0, [pc, #148]	@ (8004464 <serial_download+0xb4>)
 80043d0:	f7fc fa10 	bl	80007f4 <serial_put_string>

	if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 80043d4:	4824      	ldr	r0, [pc, #144]	@ (8004468 <serial_download+0xb8>)
 80043d6:	f7fc fa9d 	bl	8000914 <FLASH_IF_erase>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <serial_download+0x36>
		serial_put_string((uint8_t*)"Error occured while erasing the flash");
 80043e0:	4822      	ldr	r0, [pc, #136]	@ (800446c <serial_download+0xbc>)
 80043e2:	f7fc fa07 	bl	80007f4 <serial_put_string>
	}

	result = ymodem_receive(&size);
 80043e6:	463b      	mov	r3, r7
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 fd2d 	bl	8006e48 <ymodem_receive>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]

	if (result == COM_OK) {
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d119      	bne.n	800442c <serial_download+0x7c>
			serial_put_string((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 80043f8:	481d      	ldr	r0, [pc, #116]	@ (8004470 <serial_download+0xc0>)
 80043fa:	f7fc f9fb 	bl	80007f4 <serial_put_string>
			serial_put_string((uint8_t *)aFileName);
 80043fe:	481d      	ldr	r0, [pc, #116]	@ (8004474 <serial_download+0xc4>)
 8004400:	f7fc f9f8 	bl	80007f4 <serial_put_string>
		    int_to_str(number, size);
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7fc f8b0 	bl	8000570 <int_to_str>
		    serial_put_string((uint8_t *)"\n\r Size: ");
 8004410:	4819      	ldr	r0, [pc, #100]	@ (8004478 <serial_download+0xc8>)
 8004412:	f7fc f9ef 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)number);
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc f9eb 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)" Bytes\r\n");
 800441e:	4817      	ldr	r0, [pc, #92]	@ (800447c <serial_download+0xcc>)
 8004420:	f7fc f9e8 	bl	80007f4 <serial_put_string>
		    serial_put_string((uint8_t *)"-------------------\n");
 8004424:	4816      	ldr	r0, [pc, #88]	@ (8004480 <serial_download+0xd0>)
 8004426:	f7fc f9e5 	bl	80007f4 <serial_put_string>
	}
	else
	  {
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
	  }
}
 800442a:	e017      	b.n	800445c <serial_download+0xac>
	else if (result == COM_ABORT) {
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d103      	bne.n	800443a <serial_download+0x8a>
		serial_put_string((uint8_t*)"\r\n\nAborted by er.\n\r");
 8004432:	4814      	ldr	r0, [pc, #80]	@ (8004484 <serial_download+0xd4>)
 8004434:	f7fc f9de 	bl	80007f4 <serial_put_string>
}
 8004438:	e010      	b.n	800445c <serial_download+0xac>
	else if (result == COM_LIMIT) {
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b05      	cmp	r3, #5
 800443e:	d103      	bne.n	8004448 <serial_download+0x98>
		serial_put_string((uint8_t*)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8004440:	4811      	ldr	r0, [pc, #68]	@ (8004488 <serial_download+0xd8>)
 8004442:	f7fc f9d7 	bl	80007f4 <serial_put_string>
}
 8004446:	e009      	b.n	800445c <serial_download+0xac>
	else if (result == COM_DATA) {
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b04      	cmp	r3, #4
 800444c:	d103      	bne.n	8004456 <serial_download+0xa6>
		serial_put_string((uint8_t *)"\n\n\rVerification failed!\n\r");
 800444e:	480f      	ldr	r0, [pc, #60]	@ (800448c <serial_download+0xdc>)
 8004450:	f7fc f9d0 	bl	80007f4 <serial_put_string>
}
 8004454:	e002      	b.n	800445c <serial_download+0xac>
		serial_put_string((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8004456:	480e      	ldr	r0, [pc, #56]	@ (8004490 <serial_download+0xe0>)
 8004458:	f7fc f9cc 	bl	80007f4 <serial_put_string>
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	0800e990 	.word	0x0800e990
 8004468:	08020000 	.word	0x08020000
 800446c:	0800e9cc 	.word	0x0800e9cc
 8004470:	0800e9f4 	.word	0x0800e9f4
 8004474:	200006d0 	.word	0x200006d0
 8004478:	0800ea48 	.word	0x0800ea48
 800447c:	0800ea54 	.word	0x0800ea54
 8004480:	0800ea60 	.word	0x0800ea60
 8004484:	0800ea78 	.word	0x0800ea78
 8004488:	0800ea8c 	.word	0x0800ea8c
 800448c:	0800eacc 	.word	0x0800eacc
 8004490:	0800eae8 	.word	0x0800eae8

08004494 <serial_upload>:
  * @brief  Upload a file via serial port.
  * @param  None
  * @retval None
  */

void serial_upload(void) {
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
	 uint8_t status = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	71fb      	strb	r3, [r7, #7]
	 serial_put_string((uint8_t *)"\n\n\rSelect Receive File\n\r");
 800449e:	4811      	ldr	r0, [pc, #68]	@ (80044e4 <serial_upload+0x50>)
 80044a0:	f7fc f9a8 	bl	80007f4 <serial_put_string>
	 HAL_UART_Receive(&UartHandle, &status, 1, RX_TIMEOUT);
 80044a4:	1df9      	adds	r1, r7, #7
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044aa:	2201      	movs	r2, #1
 80044ac:	480e      	ldr	r0, [pc, #56]	@ (80044e8 <serial_upload+0x54>)
 80044ae:	f007 ffdc 	bl	800c46a <HAL_UART_Receive>
	 if ( status == CRC16)
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	2b43      	cmp	r3, #67	@ 0x43
 80044b6:	d111      	bne.n	80044dc <serial_upload+0x48>
	   {
	     /* Transmit the flash image through ymodem protocol */
	     status = ymodem_transmit((uint8_t*)APPLICATION_ADDRESS, (const uint8_t*)"UploadedFlashImage.bin", USER_FLASH_SIZE);
 80044b8:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80044bc:	490b      	ldr	r1, [pc, #44]	@ (80044ec <serial_upload+0x58>)
 80044be:	480c      	ldr	r0, [pc, #48]	@ (80044f0 <serial_upload+0x5c>)
 80044c0:	f002 fe6e 	bl	80071a0 <ymodem_transmit>
 80044c4:	4603      	mov	r3, r0
 80044c6:	71fb      	strb	r3, [r7, #7]

	     if (status != 0)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <serial_upload+0x42>
	     {
	       serial_put_string((uint8_t *)"\n\rError Occurred while Transmitting File\n\r");
 80044ce:	4809      	ldr	r0, [pc, #36]	@ (80044f4 <serial_upload+0x60>)
 80044d0:	f7fc f990 	bl	80007f4 <serial_put_string>
	     else
	     {
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
	     }
	   }
}
 80044d4:	e002      	b.n	80044dc <serial_upload+0x48>
	    	 serial_put_string((uint8_t *)"\n\rFile uploaded successfully \n\r");
 80044d6:	4808      	ldr	r0, [pc, #32]	@ (80044f8 <serial_upload+0x64>)
 80044d8:	f7fc f98c 	bl	80007f4 <serial_put_string>
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	0800eb08 	.word	0x0800eb08
 80044e8:	20000678 	.word	0x20000678
 80044ec:	0800eb24 	.word	0x0800eb24
 80044f0:	08020000 	.word	0x08020000
 80044f4:	0800eb3c 	.word	0x0800eb3c
 80044f8:	0800eb68 	.word	0x0800eb68

080044fc <main_menu>:
  * @brief  Display the Main Menu on HyperTerminal
  * @param  None
  * @retval None
  */

void main_menu(void) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
	 uint8_t key = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	70fb      	strb	r3, [r7, #3]

	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8004506:	484b      	ldr	r0, [pc, #300]	@ (8004634 <main_menu+0x138>)
 8004508:	f7fc f974 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 800450c:	484a      	ldr	r0, [pc, #296]	@ (8004638 <main_menu+0x13c>)
 800450e:	f7fc f971 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n= Secure Booting and Firmware Update with hardware root of trust(1.1)=");
 8004512:	484a      	ldr	r0, [pc, #296]	@ (800463c <main_menu+0x140>)
 8004514:	f7fc f96e 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                                                    =");
 8004518:	4847      	ldr	r0, [pc, #284]	@ (8004638 <main_menu+0x13c>)
 800451a:	f7fc f96b 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n=                                   By STM Application Team          =");
 800451e:	4848      	ldr	r0, [pc, #288]	@ (8004640 <main_menu+0x144>)
 8004520:	f7fc f968 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n======================================================================");
 8004524:	4843      	ldr	r0, [pc, #268]	@ (8004634 <main_menu+0x138>)
 8004526:	f7fc f965 	bl	80007f4 <serial_put_string>
	 serial_put_string((uint8_t *)"\r\n\r\n");
 800452a:	4846      	ldr	r0, [pc, #280]	@ (8004644 <main_menu+0x148>)
 800452c:	f7fc f962 	bl	80007f4 <serial_put_string>
	  FLASH_IF_disable_all_protection();
 8004530:	f7fc fa3a 	bl	80009a8 <FLASH_IF_disable_all_protection>

	  while (1)
	  {

		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8004534:	4844      	ldr	r0, [pc, #272]	@ (8004648 <main_menu+0x14c>)
 8004536:	f7fc f95d 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Download image to the internal Flash ----------------- 1\r\n\n");
 800453a:	4844      	ldr	r0, [pc, #272]	@ (800464c <main_menu+0x150>)
 800453c:	f7fc f95a 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Upload image from the internal Flash ----------------- 2\r\n\n");
 8004540:	4843      	ldr	r0, [pc, #268]	@ (8004650 <main_menu+0x154>)
 8004542:	f7fc f957 	bl	80007f4 <serial_put_string>
		  serial_put_string((uint8_t *)"  Execute the loaded application ----------------------- 3\r\n\n");
 8004546:	4843      	ldr	r0, [pc, #268]	@ (8004654 <main_menu+0x158>)
 8004548:	f7fc f954 	bl	80007f4 <serial_put_string>

		  flashProtection = FLASH_IF_get_write_protection_status();
 800454c:	f7fc faa6 	bl	8000a9c <FLASH_IF_get_write_protection_status>
 8004550:	4603      	mov	r3, r0
 8004552:	4a41      	ldr	r2, [pc, #260]	@ (8004658 <main_menu+0x15c>)
 8004554:	6013      	str	r3, [r2, #0]

	    if(flashProtection == FLASHIF_PROTECTION_WRPENABLED)
 8004556:	4b40      	ldr	r3, [pc, #256]	@ (8004658 <main_menu+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d103      	bne.n	8004566 <main_menu+0x6a>
	    {
	    	serial_put_string((uint8_t *)"  Disable the write protection ------------------------- 4\r\n\n");
 800455e:	483f      	ldr	r0, [pc, #252]	@ (800465c <main_menu+0x160>)
 8004560:	f7fc f948 	bl	80007f4 <serial_put_string>
 8004564:	e002      	b.n	800456c <main_menu+0x70>
	    }
	    else
	    {
	    	serial_put_string((uint8_t *)"  Enable the write protection -------------------------- 4\r\n\n");
 8004566:	483e      	ldr	r0, [pc, #248]	@ (8004660 <main_menu+0x164>)
 8004568:	f7fc f944 	bl	80007f4 <serial_put_string>
	    }
	    serial_put_string((uint8_t *)"==========================================================\r\n\n");
 800456c:	483d      	ldr	r0, [pc, #244]	@ (8004664 <main_menu+0x168>)
 800456e:	f7fc f941 	bl	80007f4 <serial_put_string>

	    /* Clean the input path */
	    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8004572:	4b3d      	ldr	r3, [pc, #244]	@ (8004668 <main_menu+0x16c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
	//    __HAL_UART_CLEAR_OREFLAG(&UartHandle);

	    /* Receive key */
	    HAL_UART_Receive(&UartHandle, &key, 1, RX_TIMEOUT);
 8004578:	1cf9      	adds	r1, r7, #3
 800457a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800457e:	2201      	movs	r2, #1
 8004580:	4839      	ldr	r0, [pc, #228]	@ (8004668 <main_menu+0x16c>)
 8004582:	f007 ff72 	bl	800c46a <HAL_UART_Receive>



	    switch (key)
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	3b31      	subs	r3, #49	@ 0x31
 800458a:	2b03      	cmp	r3, #3
 800458c:	d84d      	bhi.n	800462a <main_menu+0x12e>
 800458e:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <main_menu+0x98>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045a5 	.word	0x080045a5
 8004598:	080045ab 	.word	0x080045ab
 800459c:	080045b1 	.word	0x080045b1
 80045a0:	080045df 	.word	0x080045df
	    {
	    case '1' :
	      /* Download user application in the Flash */
	      serial_download();
 80045a4:	f7ff ff04 	bl	80043b0 <serial_download>
	      break;
 80045a8:	e043      	b.n	8004632 <main_menu+0x136>
	    case '2' :
	      /* Upload user application from the Flash */
	      serial_upload();
 80045aa:	f7ff ff73 	bl	8004494 <serial_upload>
	      break;
 80045ae:	e040      	b.n	8004632 <main_menu+0x136>
	    case '3' :
	    	serial_put_string((uint8_t *)"Start program execution......\r\n\n");
 80045b0:	482e      	ldr	r0, [pc, #184]	@ (800466c <main_menu+0x170>)
 80045b2:	f7fc f91f 	bl	80007f4 <serial_put_string>
	      /* execute the new program */
	      jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 80045b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004670 <main_menu+0x174>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004674 <main_menu+0x178>)
 80045bc:	6013      	str	r3, [r2, #0]
	      /* Jump to user application */
	      jumpToApplication = (pFunction)jumpAddress;
 80045be:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <main_menu+0x178>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b2c      	ldr	r3, [pc, #176]	@ (8004678 <main_menu+0x17c>)
 80045c6:	601a      	str	r2, [r3, #0]
	      /* Initialize user application's Stack Pointer */
	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 80045c8:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <main_menu+0x180>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f383 8808 	msr	MSP, r3
}
 80045d4:	bf00      	nop
	      jumpToApplication();
 80045d6:	4b28      	ldr	r3, [pc, #160]	@ (8004678 <main_menu+0x17c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4798      	blx	r3
	      break;
 80045dc:	e029      	b.n	8004632 <main_menu+0x136>
	    case '4' :

	      if (flashProtection != FLASHIF_PROTECTION_NONE)
 80045de:	4b1e      	ldr	r3, [pc, #120]	@ (8004658 <main_menu+0x15c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <main_menu+0x10c>
	      {
	        /* Disable the write protection */
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_DISABLE) == FLASHIF_OK)
 80045e6:	2001      	movs	r0, #1
 80045e8:	f7fc fa70 	bl	8000acc <FLASH_IF_write_protection_config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <main_menu+0x104>
	        {
	        	serial_put_string((uint8_t *)"Write Protection disabled...\r\n");
 80045f2:	4823      	ldr	r0, [pc, #140]	@ (8004680 <main_menu+0x184>)
 80045f4:	f7fc f8fe 	bl	80007f4 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 80045f8:	4822      	ldr	r0, [pc, #136]	@ (8004684 <main_menu+0x188>)
 80045fa:	f7fc f8fb 	bl	80007f4 <serial_put_string>
	        else
	        {
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
	        }
	      }
	      break;
 80045fe:	e018      	b.n	8004632 <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write un-protection failed...\r\n");
 8004600:	4821      	ldr	r0, [pc, #132]	@ (8004688 <main_menu+0x18c>)
 8004602:	f7fc f8f7 	bl	80007f4 <serial_put_string>
	      break;
 8004606:	e014      	b.n	8004632 <main_menu+0x136>
	        if (FLASH_IF_write_protection_config(FLASHIF_WRP_ENABLE) == FLASHIF_OK)
 8004608:	2000      	movs	r0, #0
 800460a:	f7fc fa5f 	bl	8000acc <FLASH_IF_write_protection_config>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <main_menu+0x126>
	        	serial_put_string((uint8_t *)"Write Protection enabled...\r\n");
 8004614:	481d      	ldr	r0, [pc, #116]	@ (800468c <main_menu+0x190>)
 8004616:	f7fc f8ed 	bl	80007f4 <serial_put_string>
	        	serial_put_string((uint8_t *)"System will now restart...\r\n");
 800461a:	481a      	ldr	r0, [pc, #104]	@ (8004684 <main_menu+0x188>)
 800461c:	f7fc f8ea 	bl	80007f4 <serial_put_string>
	      break;
 8004620:	e007      	b.n	8004632 <main_menu+0x136>
	        	serial_put_string((uint8_t *)"Error: Flash write protection failed...\r\n");
 8004622:	481b      	ldr	r0, [pc, #108]	@ (8004690 <main_menu+0x194>)
 8004624:	f7fc f8e6 	bl	80007f4 <serial_put_string>
	      break;
 8004628:	e003      	b.n	8004632 <main_menu+0x136>
		default:
			serial_put_string((uint8_t *)"Invalid Number ! ==> The number should be either 1, 2, 3 or 4\r");
 800462a:	481a      	ldr	r0, [pc, #104]	@ (8004694 <main_menu+0x198>)
 800462c:	f7fc f8e2 	bl	80007f4 <serial_put_string>
		break;
 8004630:	bf00      	nop
		  serial_put_string((uint8_t *)"\r\n=================== Main Menu ============================\r\n\n");
 8004632:	e77f      	b.n	8004534 <main_menu+0x38>
 8004634:	0800eb88 	.word	0x0800eb88
 8004638:	0800ebd4 	.word	0x0800ebd4
 800463c:	0800ec20 	.word	0x0800ec20
 8004640:	0800ec6c 	.word	0x0800ec6c
 8004644:	0800ecb8 	.word	0x0800ecb8
 8004648:	0800ecc0 	.word	0x0800ecc0
 800464c:	0800ed00 	.word	0x0800ed00
 8004650:	0800ed40 	.word	0x0800ed40
 8004654:	0800ed80 	.word	0x0800ed80
 8004658:	200006cc 	.word	0x200006cc
 800465c:	0800edc0 	.word	0x0800edc0
 8004660:	0800ee00 	.word	0x0800ee00
 8004664:	0800ee40 	.word	0x0800ee40
 8004668:	20000678 	.word	0x20000678
 800466c:	0800ee80 	.word	0x0800ee80
 8004670:	08020004 	.word	0x08020004
 8004674:	200006c8 	.word	0x200006c8
 8004678:	200006c4 	.word	0x200006c4
 800467c:	08020000 	.word	0x08020000
 8004680:	0800eea4 	.word	0x0800eea4
 8004684:	0800eec4 	.word	0x0800eec4
 8004688:	0800eee4 	.word	0x0800eee4
 800468c:	0800ef14 	.word	0x0800ef14
 8004690:	0800ef34 	.word	0x0800ef34
 8004694:	0800ef60 	.word	0x0800ef60

08004698 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
 80046a4:	4613      	mov	r3, r2
 80046a6:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 80046a8:	78bb      	ldrb	r3, [r7, #2]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d00e      	beq.n	80046cc <optiga_cmd_set_shielded_connection_option+0x34>
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	dc10      	bgt.n	80046d4 <optiga_cmd_set_shielded_connection_option+0x3c>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <optiga_cmd_set_shielded_connection_option+0x24>
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d004      	beq.n	80046c4 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 80046ba:	e00b      	b.n	80046d4 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	769a      	strb	r2, [r3, #26]
        break;
 80046c2:	e008      	b.n	80046d6 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	76da      	strb	r2, [r3, #27]
        break;
 80046ca:	e004      	b.n	80046d6 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	771a      	strb	r2, [r3, #28]
        break;
 80046d2:	e000      	b.n	80046d6 <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 80046d4:	bf00      	nop
    }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4603      	mov	r3, r0
 80046ec:	71fb      	strb	r3, [r7, #7]
 80046ee:	460b      	mov	r3, r1
 80046f0:	71bb      	strb	r3, [r7, #6]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	79fa      	ldrb	r2, [r7, #7]
 80046fa:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	79ba      	ldrb	r2, [r7, #6]
 8004702:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8004704:	88bb      	ldrh	r3, [r7, #4]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	b29a      	uxth	r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	3302      	adds	r3, #2
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	3303      	adds	r3, #3
 8004716:	88ba      	ldrh	r2, [r7, #4]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8004730:	2100      	movs	r1, #0
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 ff46 	bl	80055c4 <optiga_cmd_execute_handler>
}
 8004738:	bf00      	nop
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	460b      	mov	r3, r1
 800474e:	72fb      	strb	r3, [r7, #11]
 8004750:	4613      	mov	r3, r2
 8004752:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	7aba      	ldrb	r2, [r7, #10]
 800475e:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	7e3a      	ldrb	r2, [r7, #24]
 8004764:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	7afa      	ldrb	r2, [r7, #11]
 8004776:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8c3a      	ldrh	r2, [r7, #32]
 800477c:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 800477e:	2100      	movs	r1, #0
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 ff1f 	bl	80055c4 <optiga_cmd_execute_handler>
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3308      	adds	r3, #8
 800479a:	4618      	mov	r0, r3
 800479c:	f001 fac6 	bl	8005d2c <optiga_common_get_uint32>
 80047a0:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 80047a8:	d201      	bcs.n	80047ae <optiga_cmd_session_available+0x20>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <optiga_cmd_session_available+0x22>
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3308      	adds	r3, #8
 80047c6:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8a9b      	ldrh	r3, [r3, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11d      	bne.n	800480c <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e017      	b.n	8004806 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	4413      	add	r3, r2
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d00e      	beq.n	8004800 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	b21a      	sxth	r2, r3
 80047e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <optiga_cmd_session_assign+0x60>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	4413      	add	r3, r2
 80047f8:	2210      	movs	r2, #16
 80047fa:	701a      	strb	r2, [r3, #0]
                break;
 80047fc:	bf00      	nop
            }
        }
    }
}
 80047fe:	e005      	b.n	800480c <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	3301      	adds	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d9e4      	bls.n	80047d6 <optiga_cmd_session_assign+0x1e>
}
 800480c:	bf00      	nop
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	ffffe100 	.word	0xffffe100

0800481c <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8a9b      	ldrh	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00d      	beq.n	8004850 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8a9b      	ldrh	r3, [r3, #20]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
    }
}
 8004850:	bf00      	nop
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
 8004868:	4613      	mov	r3, r2
 800486a:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e027      	b.n	80048ca <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d002      	beq.n	8004886 <optiga_cmd_queue_get_count_of+0x2a>
 8004880:	2b09      	cmp	r3, #9
 8004882:	d00c      	beq.n	800489e <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 8004884:	e017      	b.n	80048b6 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	737b      	strb	r3, [r7, #13]
            break;
 800489c:	e00b      	b.n	80048b6 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 800489e:	7bfa      	ldrb	r2, [r7, #15]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	737b      	strb	r3, [r7, #13]
            break;
 80048b4:	bf00      	nop
        }
        if (state_to_check == slot_value)
 80048b6:	78ba      	ldrb	r2, [r7, #2]
 80048b8:	7b7b      	ldrb	r3, [r7, #13]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d102      	bne.n	80048c4 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	3301      	adds	r3, #1
 80048c2:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	3301      	adds	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	d9d4      	bls.n	800487a <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 80048d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	73fb      	strb	r3, [r7, #15]
 80048ec:	e01f      	b.n	800492e <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	7bfa      	ldrb	r2, [r7, #15]
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
           break;
 8004926:	e006      	b.n	8004936 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	3301      	adds	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b05      	cmp	r3, #5
 8004932:	d9dc      	bls.n	80048ee <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004950:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 8004952:	23ff      	movs	r3, #255	@ 0xff
 8004954:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 8004956:	2300      	movs	r3, #0
 8004958:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004964:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004966:	2202      	movs	r2, #2
 8004968:	2109      	movs	r1, #9
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	f7ff ff76 	bl	800485c <optiga_cmd_queue_get_count_of>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d107      	bne.n	8004986 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004976:	2208      	movs	r2, #8
 8004978:	2109      	movs	r1, #9
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f7ff ff6e 	bl	800485c <optiga_cmd_queue_get_count_of>
 8004980:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00f      	beq.n	80049a6 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004986:	2204      	movs	r2, #4
 8004988:	2109      	movs	r1, #9
 800498a:	6978      	ldr	r0, [r7, #20]
 800498c:	f7ff ff66 	bl	800485c <optiga_cmd_queue_get_count_of>
 8004990:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004992:	2b01      	cmp	r3, #1
 8004994:	d10f      	bne.n	80049b6 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 8004996:	2223      	movs	r2, #35	@ 0x23
 8004998:	2108      	movs	r1, #8
 800499a:	6978      	ldr	r0, [r7, #20]
 800499c:	f7ff ff5e 	bl	800485c <optiga_cmd_queue_get_count_of>
 80049a0:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80049a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	496d      	ldr	r1, [pc, #436]	@ (8004b64 <optiga_cmd_queue_scheduler+0x220>)
 80049ae:	6938      	ldr	r0, [r7, #16]
 80049b0:	f001 fd72 	bl	8006498 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 80049b4:	e0d2      	b.n	8004b5c <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 80049b6:	6938      	ldr	r0, [r7, #16]
 80049b8:	f001 fd48 	bl	800644c <pal_os_event_stop>
            if(overflow_detected == TRUE)
 80049bc:	7e7b      	ldrb	r3, [r7, #25]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	76fb      	strb	r3, [r7, #27]
 80049d2:	e05b      	b.n	8004a8c <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 80049d4:	7efa      	ldrb	r2, [r7, #27]
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4413      	add	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 80049e8:	2208      	movs	r2, #8
 80049ea:	2109      	movs	r1, #9
 80049ec:	6978      	ldr	r0, [r7, #20]
 80049ee:	f7ff ff35 	bl	800485c <optiga_cmd_queue_get_count_of>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10d      	bne.n	8004a14 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	7a5b      	ldrb	r3, [r3, #9]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d142      	bne.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004a04:	2b23      	cmp	r3, #35	@ 0x23
 8004a06:	d13e      	bne.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8004a0e:	7efb      	ldrb	r3, [r7, #27]
 8004a10:	76bb      	strb	r3, [r7, #26]
 8004a12:	e038      	b.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	7a5b      	ldrb	r3, [r3, #9]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d134      	bne.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d201      	bcs.n	8004a2e <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d326      	bcc.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d31f      	bcc.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004a4a:	2b22      	cmp	r3, #34	@ 0x22
 8004a4c:	d105      	bne.n	8004a5a <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004a4e:	6978      	ldr	r0, [r7, #20]
 8004a50:	f7ff fe9d 	bl	800478e <optiga_cmd_session_available>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d010      	beq.n	8004a7c <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004a5e:	2b22      	cmp	r3, #34	@ 0x22
 8004a60:	d104      	bne.n	8004a6c <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	8a9b      	ldrh	r3, [r3, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004a70:	2b21      	cmp	r3, #33	@ 0x21
 8004a72:	d003      	beq.n	8004a7c <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004a78:	2b23      	cmp	r3, #35	@ 0x23
 8004a7a:	d104      	bne.n	8004a86 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 8004a82:	7efb      	ldrb	r3, [r7, #27]
 8004a84:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004a86:	7efb      	ldrb	r3, [r7, #27]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	7efb      	ldrb	r3, [r7, #27]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d9a0      	bls.n	80049d4 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8004a92:	7ebb      	ldrb	r3, [r7, #26]
 8004a94:	2bff      	cmp	r3, #255	@ 0xff
 8004a96:	d102      	bne.n	8004a9e <optiga_cmd_queue_scheduler+0x15a>
 8004a98:	7e7b      	ldrb	r3, [r7, #25]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d08e      	beq.n	80049bc <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 8004a9e:	7ebb      	ldrb	r3, [r7, #26]
 8004aa0:	2bff      	cmp	r3, #255	@ 0xff
 8004aa2:	d054      	beq.n	8004b4e <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 8004aa4:	7eba      	ldrb	r2, [r7, #26]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004ab8:	7eba      	ldrb	r2, [r7, #26]
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b22      	cmp	r3, #34	@ 0x22
 8004ace:	d111      	bne.n	8004af4 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8004ada:	7eba      	ldrb	r2, [r7, #26]
 8004adc:	6979      	ldr	r1, [r7, #20]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fe62 	bl	80047b8 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8004af4:	7eba      	ldrb	r2, [r7, #26]
 8004af6:	6979      	ldr	r1, [r7, #20]
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004b0e:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8004b10:	7eba      	ldrb	r2, [r7, #26]
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	4613      	mov	r3, r2
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	2332      	movs	r3, #50	@ 0x32
 8004b26:	4910      	ldr	r1, [pc, #64]	@ (8004b68 <optiga_cmd_queue_scheduler+0x224>)
 8004b28:	6938      	ldr	r0, [r7, #16]
 8004b2a:	f001 fcb5 	bl	8006498 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8004b2e:	7eba      	ldrb	r2, [r7, #26]
 8004b30:	6979      	ldr	r1, [r7, #20]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004b40:	2204      	movs	r2, #4
 8004b42:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8004b4c:	e006      	b.n	8004b5c <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8004b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4903      	ldr	r1, [pc, #12]	@ (8004b64 <optiga_cmd_queue_scheduler+0x220>)
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	f001 fc9e 	bl	8006498 <pal_os_event_register_callback_oneshot>
}
 8004b5c:	bf00      	nop
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	08004945 	.word	0x08004945
 8004b68:	08004729 	.word	0x08004729

08004b6c <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7f9b      	ldrb	r3, [r3, #30]
 8004b80:	4619      	mov	r1, r3
 8004b82:	460b      	mov	r3, r1
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	440b      	add	r3, r1
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b23      	cmp	r3, #35	@ 0x23
 8004b94:	d111      	bne.n	8004bba <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7f9b      	ldrb	r3, [r3, #30]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	440b      	add	r3, r1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004bae:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004bb0:	2b23      	cmp	r3, #35	@ 0x23
 8004bb2:	d112      	bne.n	8004bda <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b23      	cmp	r3, #35	@ 0x23
 8004bb8:	d00f      	beq.n	8004bda <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681c      	ldr	r4, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7f9b      	ldrb	r3, [r3, #30]
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	f001 fd1a 	bl	80065fc <pal_os_timer_get_time_in_microseconds>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	462b      	mov	r3, r5
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	442b      	add	r3, r5
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4423      	add	r3, r4
 8004bd4:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004bd8:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7f9b      	ldrb	r3, [r3, #30]
 8004be2:	4619      	mov	r1, r3
 8004be4:	460b      	mov	r3, r1
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	440b      	add	r3, r1
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	7f9b      	ldrb	r3, [r3, #30]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	440b      	add	r3, r1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b23      	cmp	r3, #35	@ 0x23
 8004c12:	d111      	bne.n	8004c38 <optiga_cmd_queue_update_slot+0xcc>
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	2b23      	cmp	r3, #35	@ 0x23
 8004c18:	d10e      	bne.n	8004c38 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7f9b      	ldrb	r3, [r3, #30]
 8004c22:	4619      	mov	r1, r3
 8004c24:	460b      	mov	r3, r1
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	440b      	add	r3, r1
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004c32:	2208      	movs	r2, #8
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e00d      	b.n	8004c54 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7f9b      	ldrb	r3, [r3, #30]
 8004c40:	4619      	mov	r1, r3
 8004c42:	460b      	mov	r3, r1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	440b      	add	r3, r1
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004c50:	2202      	movs	r2, #2
 8004c52:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7f9b      	ldrb	r3, [r3, #30]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	460b      	mov	r3, r1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	701a      	strb	r2, [r3, #0]
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bdb0      	pop	{r4, r5, r7, pc}

08004c78 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7f9b      	ldrb	r3, [r3, #30]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	440b      	add	r3, r1
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004c98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c9c:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7f9b      	ldrb	r3, [r3, #30]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	460b      	mov	r3, r1
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	440b      	add	r3, r1
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7f9b      	ldrb	r3, [r3, #30]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	440b      	add	r3, r1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	7f9b      	ldrb	r3, [r3, #30]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	440b      	add	r3, r1
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	4903      	ldr	r1, [pc, #12]	@ (8004d10 <optiga_cmd_queue_reset_slot+0x98>)
 8004d02:	f001 fb8b 	bl	800641c <pal_os_event_start>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08004945 	.word	0x08004945

08004d14 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	7f9b      	ldrb	r3, [r3, #30]
 8004d24:	4619      	mov	r1, r3
 8004d26:	460b      	mov	r3, r1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	440b      	add	r3, r1
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7f9b      	ldrb	r3, [r3, #30]
 8004d40:	4619      	mov	r1, r3
 8004d42:	460b      	mov	r3, r1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	440b      	add	r3, r1
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004d68:	2122      	movs	r1, #34	@ 0x22
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fefe 	bl	8004b6c <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fd4a 	bl	800481c <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fee2 	bl	8004b6c <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff ff5c 	bl	8004c78 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8004dd2:	f240 2302 	movw	r3, #514	@ 0x202
 8004dd6:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d011      	beq.n	8004e04 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8004de0:	2308      	movs	r3, #8
 8004de2:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004df0:	f107 020c 	add.w	r2, r7, #12
 8004df4:	4619      	mov	r1, r3
 8004df6:	f001 fa89 	bl	800630c <pal_os_datastore_read>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8004dfe:	89fb      	ldrh	r3, [r7, #14]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11a      	bne.n	8004e3a <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 ff8d 	bl	8005d2c <optiga_common_get_uint32>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10d      	bne.n	8004e34 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 ff83 	bl	8005d2c <optiga_common_get_uint32>
 8004e26:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d103      	bne.n	8004e34 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8004e2c:	f240 2302 	movw	r3, #514	@ 0x202
 8004e30:	81fb      	strh	r3, [r7, #14]
            break;
 8004e32:	e003      	b.n	8004e3c <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8004e34:	2300      	movs	r3, #0
 8004e36:	81fb      	strh	r3, [r7, #14]
 8004e38:	e000      	b.n	8004e3c <optiga_cmd_restore_context+0x72>
                break;
 8004e3a:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8004e3c:	89fb      	ldrh	r3, [r7, #14]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	7e5b      	ldrb	r3, [r3, #25]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d029      	beq.n	8004eae <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004e5e:	2b22      	cmp	r3, #34	@ 0x22
 8004e60:	d125      	bne.n	8004eae <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fbac 	bl	80065cc <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e78:	2b33      	cmp	r3, #51	@ 0x33
 8004e7a:	d118      	bne.n	8004eae <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d014      	beq.n	8004eae <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004e90:	2208      	movs	r2, #8
 8004e92:	4619      	mov	r1, r3
 8004e94:	f001 f9bc 	bl	8006210 <pal_os_datastore_write>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8c1b      	ldrh	r3, [r3, #32]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2204      	movs	r2, #4
 8004eac:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7ddb      	ldrb	r3, [r3, #23]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d05f      	beq.n	8004f90 <optiga_cmd_execute_comms_open+0xd8>
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	dc6d      	bgt.n	8004fb0 <optiga_cmd_execute_comms_open+0xf8>
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <optiga_cmd_execute_comms_open+0x26>
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d01b      	beq.n	8004f14 <optiga_cmd_execute_comms_open+0x5c>
 8004edc:	e068      	b.n	8004fb0 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004ede:	2121      	movs	r1, #33	@ 0x21
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff56 	bl	8004d92 <optiga_cmd_request_lock>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	461a      	mov	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8c1b      	ldrh	r3, [r3, #32]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	759a      	strb	r2, [r3, #22]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f240 2202 	movw	r2, #514	@ 0x202
 8004f02:	841a      	strh	r2, [r3, #32]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
                    break;
 8004f0a:	e05c      	b.n	8004fc6 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	75da      	strb	r2, [r3, #23]
                break;
 8004f12:	e058      	b.n	8004fc6 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	7e92      	ldrb	r2, [r2, #26]
 8004f1e:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	7ed2      	ldrb	r2, [r2, #27]
 8004f2a:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	7f12      	ldrb	r2, [r2, #28]
 8004f36:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004f46:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fdc3 	bl	8005adc <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fdcd 	bl	8005afc <optiga_comms_open>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8c1b      	ldrh	r3, [r3, #32]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2204      	movs	r2, #4
 8004f76:	759a      	strb	r2, [r3, #22]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f240 2202 	movw	r2, #514	@ 0x202
 8004f7e:	841a      	strh	r2, [r3, #32]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
                    break;
 8004f86:	e01e      	b.n	8004fc6 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	75da      	strb	r2, [r3, #23]
                break;
 8004f8e:	e01a      	b.n	8004fc6 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004f98:	2332      	movs	r3, #50	@ 0x32
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4910      	ldr	r1, [pc, #64]	@ (8004fe0 <optiga_cmd_execute_comms_open+0x128>)
 8004f9e:	f001 fa7b 	bl	8006498 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2202      	movs	r2, #2
 8004fa6:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2209      	movs	r2, #9
 8004fac:	75da      	strb	r2, [r3, #23]
                break;
 8004fae:	e00a      	b.n	8004fc6 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	759a      	strb	r2, [r3, #22]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f240 2202 	movw	r2, #514	@ 0x202
 8004fbc:	841a      	strh	r2, [r3, #32]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
            break;
 8004fc4:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <optiga_cmd_execute_comms_open+0x120>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7d9b      	ldrb	r3, [r3, #22]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f43f af75 	beq.w	8004ec2 <optiga_cmd_execute_comms_open+0xa>
}
 8004fd8:	bf00      	nop
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	08004729 	.word	0x08004729

08004fe4 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	7ddb      	ldrb	r3, [r3, #23]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d002      	beq.n	8005002 <optiga_cmd_execute_comms_close+0x1e>
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d068      	beq.n	80050d2 <optiga_cmd_execute_comms_close+0xee>
 8005000:	e07a      	b.n	80050f8 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7f1b      	ldrb	r3, [r3, #28]
 8005006:	2b22      	cmp	r3, #34	@ 0x22
 8005008:	d002      	beq.n	8005010 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2204      	movs	r2, #4
 800500e:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	7e92      	ldrb	r2, [r2, #26]
 800501a:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	7ed2      	ldrb	r2, [r2, #27]
 8005026:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8005030:	2b00      	cmp	r3, #0
 8005032:	d006      	beq.n	8005042 <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	7f12      	ldrb	r2, [r2, #28]
 800503e:	751a      	strb	r2, [r3, #20]
 8005040:	e004      	b.n	800504c <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2233      	movs	r2, #51	@ 0x33
 800504a:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2204      	movs	r2, #4
 800505a:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 800506a:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fd31 	bl	8005adc <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fdb9 	bl	8005bf8 <optiga_comms_close>
 8005086:	4603      	mov	r3, r0
 8005088:	461a      	mov	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8c1b      	ldrh	r3, [r3, #32]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2204      	movs	r2, #4
 800509a:	759a      	strb	r2, [r3, #22]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f240 2202 	movw	r2, #514	@ 0x202
 80050a2:	841a      	strh	r2, [r3, #32]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
                    break;
 80050aa:	e031      	b.n	8005110 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7f1b      	ldrb	r3, [r3, #28]
 80050b0:	2b22      	cmp	r3, #34	@ 0x22
 80050b2:	d106      	bne.n	80050c2 <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2204      	movs	r2, #4
 80050b8:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 80050c0:	e026      	b.n	8005110 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff fe75 	bl	8004db2 <optiga_cmd_release_lock>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	841a      	strh	r2, [r3, #32]
                break;
 80050d0:	e01e      	b.n	8005110 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68d2      	ldr	r2, [r2, #12]
 80050da:	2100      	movs	r1, #0
 80050dc:	4610      	mov	r0, r2
 80050de:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7f1b      	ldrb	r3, [r3, #28]
 80050e4:	2b22      	cmp	r3, #34	@ 0x22
 80050e6:	d112      	bne.n	800510e <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fe62 	bl	8004db2 <optiga_cmd_release_lock>
 80050ee:	4603      	mov	r3, r0
 80050f0:	461a      	mov	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 80050f6:	e00a      	b.n	800510e <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2204      	movs	r2, #4
 80050fc:	759a      	strb	r2, [r3, #22]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f240 2202 	movw	r2, #514	@ 0x202
 8005104:	841a      	strh	r2, [r3, #32]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
            break;
 800510c:	e000      	b.n	8005110 <optiga_cmd_execute_comms_close+0x12c>
                break;
 800510e:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <optiga_cmd_execute_comms_close+0x13e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7d9b      	ldrb	r3, [r3, #22]
 800511c:	2b01      	cmp	r3, #1
 800511e:	f43f af66 	beq.w	8004fee <optiga_cmd_execute_comms_close+0xa>
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800512c:	b590      	push	{r4, r7, lr}
 800512e:	b087      	sub	sp, #28
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	7ddb      	ldrb	r3, [r3, #23]
 8005140:	3b05      	subs	r3, #5
 8005142:	2b04      	cmp	r3, #4
 8005144:	f200 80d6 	bhi.w	80052f4 <optiga_cmd_execute_prepare_command+0x1c8>
 8005148:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <optiga_cmd_execute_prepare_command+0x24>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005165 	.word	0x08005165
 8005154:	08005165 	.word	0x08005165
 8005158:	080051b9 	.word	0x080051b9
 800515c:	080051cd 	.word	0x080051cd
 8005160:	08005209 	.word	0x08005209
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7ddb      	ldrb	r3, [r3, #23]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d107      	bne.n	8005182 <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fdf4 	bl	8004d60 <optiga_cmd_request_session>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	841a      	strh	r2, [r3, #32]
 8005180:	e007      	b.n	8005192 <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8005182:	2121      	movs	r1, #33	@ 0x21
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fe04 	bl	8004d92 <optiga_cmd_request_lock>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8c1b      	ldrh	r3, [r3, #32]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	759a      	strb	r2, [r3, #22]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f240 2202 	movw	r2, #514	@ 0x202
 80051a6:	841a      	strh	r2, [r3, #32]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
                    break;
 80051ae:	e0ac      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2209      	movs	r2, #9
 80051b4:	75da      	strb	r2, [r3, #23]
                break;
 80051b6:	e0a8      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fdab 	bl	8004d14 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2208      	movs	r2, #8
 80051c2:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
                break;
 80051ca:	e09e      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 80051cc:	2123      	movs	r1, #35	@ 0x23
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fddf 	bl	8004d92 <optiga_cmd_request_lock>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8c1b      	ldrh	r3, [r3, #32]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2204      	movs	r2, #4
 80051e8:	759a      	strb	r2, [r3, #22]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f240 2202 	movw	r2, #514	@ 0x202
 80051f0:	841a      	strh	r2, [r3, #32]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
                    break;
 80051f8:	e087      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2209      	movs	r2, #9
 80051fe:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2201      	movs	r2, #1
 8005204:	701a      	strb	r2, [r3, #0]
                break;
 8005206:	e080      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
 8005214:	4603      	mov	r3, r0
 8005216:	461a      	mov	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8c1b      	ldrh	r3, [r3, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
                    break;
 8005230:	e06b      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f240 6222 	movw	r2, #1570	@ 0x622
 800523a:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	7e92      	ldrb	r2, [r2, #26]
 8005246:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	7ed2      	ldrb	r2, [r2, #27]
 8005252:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7e9a      	ldrb	r2, [r3, #26]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fc31 	bl	8005adc <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800528c:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800529a:	3306      	adds	r3, #6
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4623      	mov	r3, r4
 80052a0:	f000 fc64 	bl	8005b6c <optiga_comms_transceive>
 80052a4:	4603      	mov	r3, r0
 80052a6:	461a      	mov	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8c1b      	ldrh	r3, [r3, #32]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2204      	movs	r2, #4
 80052b8:	759a      	strb	r2, [r3, #22]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f240 2202 	movw	r2, #514	@ 0x202
 80052c0:	841a      	strh	r2, [r3, #32]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
                    break;
 80052c8:	e01f      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2203      	movs	r2, #3
 80052ce:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	220a      	movs	r2, #10
 80052d4:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7f5b      	ldrb	r3, [r3, #29]
 80052da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	775a      	strb	r2, [r3, #29]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7f5b      	ldrb	r3, [r3, #29]
 80052e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	775a      	strb	r2, [r3, #29]
                break;
 80052f2:	e00a      	b.n	800530a <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2204      	movs	r2, #4
 80052f8:	759a      	strb	r2, [r3, #22]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f240 2202 	movw	r2, #514	@ 0x202
 8005300:	841a      	strh	r2, [r3, #32]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
            break;
 8005308:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <optiga_cmd_execute_prepare_command+0x1f0>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	7d9b      	ldrb	r3, [r3, #22]
 8005316:	2b02      	cmp	r3, #2
 8005318:	f43f af10 	beq.w	800513c <optiga_cmd_execute_prepare_command+0x10>
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	bd90      	pop	{r4, r7, pc}

08005324 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa17 	bl	8005768 <optiga_cmd_get_error_code_handler>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8c1b      	ldrh	r3, [r3, #32]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <optiga_cmd_execute_get_device_error+0x30>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8c1b      	ldrh	r3, [r3, #32]
 800534e:	b21b      	sxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	da0a      	bge.n	800536a <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8005358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800535c:	d10c      	bne.n	8005378 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	7f5b      	ldrb	r3, [r3, #29]
 8005362:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8005366:	2b03      	cmp	r3, #3
 8005368:	d106      	bne.n	8005378 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2204      	movs	r2, #4
 800536e:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
            break;
 8005376:	bf00      	nop
        }
    } while (FALSE);
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	7f5b      	ldrb	r3, [r3, #29]
 800539a:	b25b      	sxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	da0b      	bge.n	80053b8 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	4798      	blx	r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	461a      	mov	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8c1b      	ldrh	r3, [r3, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d14e      	bne.n	8005454 <optiga_cmd_execute_process_optiga_response+0xd4>
 80053b6:	e006      	b.n	80053c6 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2204      	movs	r2, #4
 80053bc:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
            break;
 80053c4:	e06f      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2bf1      	cmp	r3, #241	@ 0xf1
 80053ce:	d113      	bne.n	80053f8 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80053d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	4934      	ldr	r1, [pc, #208]	@ (80054b0 <optiga_cmd_execute_process_optiga_response+0x130>)
 80053e0:	f001 f85a 	bl	8006498 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2203      	movs	r2, #3
 80053f4:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 80053f6:	e056      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	7e1b      	ldrb	r3, [r3, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10e      	bne.n	800541e <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	7ddb      	ldrb	r3, [r3, #23]
 8005404:	2b0e      	cmp	r3, #14
 8005406:	d006      	beq.n	8005416 <optiga_cmd_execute_process_optiga_response+0x96>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7ddb      	ldrb	r3, [r3, #23]
 800540c:	2b0d      	cmp	r3, #13
 800540e:	d002      	beq.n	8005416 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	220c      	movs	r2, #12
 8005414:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
                    break;
 800541c:	e043      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4920      	ldr	r1, [pc, #128]	@ (80054b0 <optiga_cmd_execute_process_optiga_response+0x130>)
 800542e:	f001 f833 	bl	8006498 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	7e9b      	ldrb	r3, [r3, #26]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	b2da      	uxtb	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2209      	movs	r2, #9
 8005450:	75da      	strb	r2, [r3, #23]
}
 8005452:	e028      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8c1b      	ldrh	r3, [r3, #32]
 8005458:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800545c:	d106      	bne.n	800546c <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	220c      	movs	r2, #12
 8005462:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
                break;
 800546a:	e01c      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	7ddb      	ldrb	r3, [r3, #23]
 8005470:	2b0d      	cmp	r3, #13
 8005472:	d103      	bne.n	800547c <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
}
 800547a:	e014      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	220b      	movs	r2, #11
 8005480:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	7f5b      	ldrb	r3, [r3, #29]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	b2da      	uxtb	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	775a      	strb	r2, [r3, #29]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7f5b      	ldrb	r3, [r3, #29]
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	b2da      	uxtb	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
}
 80054a4:	e7ff      	b.n	80054a6 <optiga_cmd_execute_process_optiga_response+0x126>
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	08004729 	.word	0x08004729

080054b4 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	7ddb      	ldrb	r3, [r3, #23]
 80054c2:	3b0a      	subs	r3, #10
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d84d      	bhi.n	8005564 <optiga_cmd_execute_process_response+0xb0>
 80054c8:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <optiga_cmd_execute_process_response+0x1c>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	080054e5 	.word	0x080054e5
 80054d4:	080054ef 	.word	0x080054ef
 80054d8:	08005539 	.word	0x08005539
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	0800554d 	.word	0x0800554d
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7ff ff4a 	bl	8005380 <optiga_cmd_execute_process_optiga_response>
                break;
 80054ec:	e045      	b.n	800557a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff ff17 	bl	8005324 <optiga_cmd_execute_get_device_error>
                break;
 80054f6:	e040      	b.n	800557a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fc3e 	bl	8004d7a <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8c1b      	ldrh	r3, [r3, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	220c      	movs	r2, #12
 800550a:	75da      	strb	r2, [r3, #23]
 800550c:	e010      	b.n	8005530 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	220b      	movs	r2, #11
 8005512:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7f5b      	ldrb	r3, [r3, #29]
 8005518:	f023 0303 	bic.w	r3, r3, #3
 800551c:	b2da      	uxtb	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	775a      	strb	r2, [r3, #29]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	7f5b      	ldrb	r3, [r3, #29]
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
                break;
 8005536:	e020      	b.n	800557a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fc3a 	bl	8004db2 <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	220e      	movs	r2, #14
 8005542:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
                break;
 800554a:	e016      	b.n	800557a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68d0      	ldr	r0, [r2, #12]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	8c12      	ldrh	r2, [r2, #32]
 8005558:	4611      	mov	r1, r2
 800555a:	4798      	blx	r3
                *exit_loop = TRUE;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
                break;
 8005562:	e00a      	b.n	800557a <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2204      	movs	r2, #4
 8005568:	759a      	strb	r2, [r3, #22]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f240 2202 	movw	r2, #514	@ 0x202
 8005570:	841a      	strh	r2, [r3, #32]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
            break;
 8005578:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <optiga_cmd_execute_process_response+0xd6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	7d9b      	ldrb	r3, [r3, #22]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d099      	beq.n	80054be <optiga_cmd_execute_process_response+0xa>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop

08005594 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fc07 	bl	8004db2 <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68d0      	ldr	r0, [r2, #12]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	8c12      	ldrh	r2, [r2, #32]
 80055b0:	4611      	mov	r1, r2
 80055b2:	4798      	blx	r3
        *exit_loop = TRUE;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 80055d0:	2301      	movs	r3, #1
 80055d2:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 80055d8:	887b      	ldrh	r3, [r7, #2]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fc31 	bl	8004e46 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2204      	movs	r2, #4
 80055e8:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	887a      	ldrh	r2, [r7, #2]
 80055ee:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	7d9b      	ldrb	r3, [r3, #22]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d830      	bhi.n	800565a <optiga_cmd_execute_handler+0x96>
 80055f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <optiga_cmd_execute_handler+0x3c>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005615 	.word	0x08005615
 8005604:	08005623 	.word	0x08005623
 8005608:	08005631 	.word	0x08005631
 800560c:	0800563f 	.word	0x0800563f
 8005610:	0800564d 	.word	0x0800564d
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8005614:	f107 030b 	add.w	r3, r7, #11
 8005618:	4619      	mov	r1, r3
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fc4c 	bl	8004eb8 <optiga_cmd_execute_comms_open>
                break;
 8005620:	e01c      	b.n	800565c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8005622:	f107 030b 	add.w	r3, r7, #11
 8005626:	4619      	mov	r1, r3
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff fcdb 	bl	8004fe4 <optiga_cmd_execute_comms_close>
                break;
 800562e:	e015      	b.n	800565c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8005630:	f107 030b 	add.w	r3, r7, #11
 8005634:	4619      	mov	r1, r3
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff fd78 	bl	800512c <optiga_cmd_execute_prepare_command>
                break;
 800563c:	e00e      	b.n	800565c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 800563e:	f107 030b 	add.w	r3, r7, #11
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff35 	bl	80054b4 <optiga_cmd_execute_process_response>
                break;
 800564a:	e007      	b.n	800565c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 800564c:	f107 030b 	add.w	r3, r7, #11
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff ff9e 	bl	8005594 <optiga_cmd_execute_error_handler>
                break;
 8005658:	e000      	b.n	800565c <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 800565a:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0c6      	beq.n	80055f0 <optiga_cmd_execute_handler+0x2c>
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 800566c:	b590      	push	{r4, r7, lr}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 800567e:	f000 ff6f 	bl	8006560 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d15b      	bne.n	8005740 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	4a33      	ldr	r2, [pc, #204]	@ (8005758 <optiga_cmd_create+0xec>)
 800568c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005690:	2200      	movs	r2, #0
 8005692:	2109      	movs	r1, #9
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f8e1 	bl	800485c <optiga_cmd_queue_get_count_of>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d051      	beq.n	8005744 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 80056a0:	2128      	movs	r1, #40	@ 0x28
 80056a2:	2001      	movs	r0, #1
 80056a4:	f000 ff6a 	bl	800657c <pal_os_calloc>
 80056a8:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d04b      	beq.n	8005748 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	4a26      	ldr	r2, [pc, #152]	@ (8005758 <optiga_cmd_create+0xec>)
 80056c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	4a24      	ldr	r2, [pc, #144]	@ (800575c <optiga_cmd_create+0xf0>)
 80056cc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	7b1b      	ldrb	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d129      	bne.n	8005732 <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	681c      	ldr	r4, [r3, #0]
 80056e6:	4611      	mov	r1, r2
 80056e8:	481d      	ldr	r0, [pc, #116]	@ (8005760 <optiga_cmd_create+0xf4>)
 80056ea:	f000 febd 	bl	8006468 <pal_os_event_create>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681c      	ldr	r4, [r3, #0]
 80056f8:	6979      	ldr	r1, [r7, #20]
 80056fa:	481a      	ldr	r0, [pc, #104]	@ (8005764 <optiga_cmd_create+0xf8>)
 80056fc:	f000 f9c8 	bl	8005a90 <optiga_comms_create>
 8005700:	4603      	mov	r3, r0
 8005702:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 800570e:	6978      	ldr	r0, [r7, #20]
 8005710:	f000 ff42 	bl	8006598 <pal_os_free>
                me = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
                break;
 8005718:	e017      	b.n	800574a <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2201      	movs	r2, #1
 8005720:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8005730:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	331e      	adds	r3, #30
 8005736:	4619      	mov	r1, r3
 8005738:	6978      	ldr	r0, [r7, #20]
 800573a:	f7ff f8d0 	bl	80048de <optiga_cmd_queue_assign_slot>
 800573e:	e004      	b.n	800574a <optiga_cmd_create+0xde>
            break;
 8005740:	bf00      	nop
 8005742:	e002      	b.n	800574a <optiga_cmd_create+0xde>
            break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <optiga_cmd_create+0xde>
            break;
 8005748:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 800574a:	f000 ff10 	bl	800656e <pal_os_lock_exit_critical_section>
    return (me);
 800574e:	697b      	ldr	r3, [r7, #20]
}
 8005750:	4618      	mov	r0, r3
 8005752:	371c      	adds	r7, #28
 8005754:	46bd      	mov	sp, r7
 8005756:	bd90      	pop	{r4, r7, pc}
 8005758:	200004cc 	.word	0x200004cc
 800575c:	200004d0 	.word	0x200004d0
 8005760:	08004945 	.word	0x08004945
 8005764:	080055c5 	.word	0x080055c5

08005768 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b087      	sub	sp, #28
 800576c:	af02      	add	r7, sp, #8
 800576e:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8005770:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005774:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005776:	2309      	movs	r3, #9
 8005778:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	7f5b      	ldrb	r3, [r3, #29]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b03      	cmp	r3, #3
 800578a:	f000 8099 	beq.w	80058c0 <optiga_cmd_get_error_code_handler+0x158>
 800578e:	2b03      	cmp	r3, #3
 8005790:	f300 80b6 	bgt.w	8005900 <optiga_cmd_get_error_code_handler+0x198>
 8005794:	2b01      	cmp	r3, #1
 8005796:	d002      	beq.n	800579e <optiga_cmd_get_error_code_handler+0x36>
 8005798:	2b02      	cmp	r3, #2
 800579a:	d052      	beq.n	8005842 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 800579c:	e0b0      	b.n	8005900 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f103 020d 	add.w	r2, r3, #13
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fa84 	bl	8005cbc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80057b4:	89bb      	ldrh	r3, [r7, #12]
 80057b6:	3302      	adds	r3, #2
 80057b8:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f103 020d 	add.w	r2, r3, #13
 80057c2:	89bb      	ldrh	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fa77 	bl	8005cbc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80057ce:	89bb      	ldrh	r3, [r7, #12]
 80057d0:	3302      	adds	r3, #2
 80057d2:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f103 020d 	add.w	r2, r3, #13
 80057dc:	89bb      	ldrh	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fa6a 	bl	8005cbc <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80057e8:	89bb      	ldrh	r3, [r7, #12]
 80057ea:	3302      	adds	r3, #2
 80057ec:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80057ee:	89bb      	ldrh	r3, [r7, #12]
 80057f0:	3b09      	subs	r3, #9
 80057f2:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80057fa:	3305      	adds	r3, #5
 80057fc:	2100      	movs	r1, #0
 80057fe:	2001      	movs	r0, #1
 8005800:	f7fe ff6f 	bl	80046e2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	89ba      	ldrh	r2, [r7, #12]
 800580a:	3a05      	subs	r2, #5
 800580c:	b292      	uxth	r2, r2
 800580e:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7f5b      	ldrb	r3, [r3, #29]
 8005814:	f023 0303 	bic.w	r3, r3, #3
 8005818:	b2da      	uxtb	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	775a      	strb	r2, [r3, #29]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7f5b      	ldrb	r3, [r3, #29]
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4935      	ldr	r1, [pc, #212]	@ (8005910 <optiga_cmd_get_error_code_handler+0x1a8>)
 800583c:	f000 fe2c 	bl	8006498 <pal_os_event_register_callback_oneshot>
        break;
 8005840:	e061      	b.n	8005906 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f240 6222 	movw	r2, #1570	@ 0x622
 800584a:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	7e92      	ldrb	r2, [r2, #26]
 8005856:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	7ed2      	ldrb	r2, [r2, #27]
 8005862:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f936 	bl	8005adc <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	3306      	adds	r3, #6
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4623      	mov	r3, r4
 800588c:	f000 f96e 	bl	8005b6c <optiga_comms_transceive>
 8005890:	4603      	mov	r3, r0
 8005892:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8005894:	89fb      	ldrh	r3, [r7, #14]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 800589a:	f240 2302 	movw	r3, #514	@ 0x202
 800589e:	81fb      	strh	r3, [r7, #14]
                break;
 80058a0:	e031      	b.n	8005906 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7f5b      	ldrb	r3, [r3, #29]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	775a      	strb	r2, [r3, #29]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7f5b      	ldrb	r3, [r3, #29]
 80058b4:	f043 0303 	orr.w	r3, r3, #3
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	775a      	strb	r2, [r3, #29]
        break;
 80058be:	e022      	b.n	8005906 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	7c9b      	ldrb	r3, [r3, #18]
 80058c6:	2bff      	cmp	r3, #255	@ 0xff
 80058c8:	d01c      	beq.n	8005904 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	7d9b      	ldrb	r3, [r3, #22]
 80058d0:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 80058d2:	89fb      	ldrh	r3, [r7, #14]
 80058d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058dc:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2203      	movs	r2, #3
 80058e2:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	220a      	movs	r2, #10
 80058e8:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80058f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4905      	ldr	r1, [pc, #20]	@ (8005910 <optiga_cmd_get_error_code_handler+0x1a8>)
 80058fa:	f000 fdcd 	bl	8006498 <pal_os_event_register_callback_oneshot>
        break;
 80058fe:	e002      	b.n	8005906 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005904:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005906:	89fb      	ldrh	r3, [r7, #14]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	bd90      	pop	{r4, r7, pc}
 8005910:	08004729 	.word	0x08004729

08005914 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800591c:	f240 2302 	movw	r3, #514	@ 0x202
 8005920:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7d9b      	ldrb	r3, [r3, #22]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d002      	beq.n	8005930 <optiga_cmd_open_application_handler+0x1c>
 800592a:	2b03      	cmp	r3, #3
 800592c:	d075      	beq.n	8005a1a <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 800592e:	e08e      	b.n	8005a4e <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8005930:	2314      	movs	r3, #20
 8005932:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7e5b      	ldrb	r3, [r3, #25]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <optiga_cmd_open_application_handler+0x2c>
 800593c:	2200      	movs	r2, #0
 800593e:	e000      	b.n	8005942 <optiga_cmd_open_application_handler+0x2e>
 8005940:	2208      	movs	r2, #8
 8005942:	89bb      	ldrh	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005948:	89bb      	ldrh	r3, [r7, #12]
 800594a:	f240 6215 	movw	r2, #1557	@ 0x615
 800594e:	4293      	cmp	r3, r2
 8005950:	d903      	bls.n	800595a <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005952:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005956:	81fb      	strh	r3, [r7, #14]
                break;
 8005958:	e079      	b.n	8005a4e <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7e5b      	ldrb	r3, [r3, #25]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fa31 	bl	8004dca <optiga_cmd_restore_context>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d16e      	bne.n	8005a4c <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <optiga_cmd_open_application_handler+0x6a>
 800597a:	2210      	movs	r2, #16
 800597c:	e000      	b.n	8005980 <optiga_cmd_open_application_handler+0x6c>
 800597e:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005986:	3305      	adds	r3, #5
 8005988:	20f0      	movs	r0, #240	@ 0xf0
 800598a:	f7fe feaa 	bl	80046e2 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330d      	adds	r3, #13
 8005994:	3309      	adds	r3, #9
 8005996:	2210      	movs	r2, #16
 8005998:	492f      	ldr	r1, [pc, #188]	@ (8005a58 <optiga_cmd_open_application_handler+0x144>)
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fe07 	bl	80065ae <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7e5b      	ldrb	r3, [r3, #25]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80059b8:	2208      	movs	r2, #8
 80059ba:	4619      	mov	r1, r3
 80059bc:	f000 fdf7 	bl	80065ae <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <optiga_cmd_open_application_handler+0xb8>
 80059c8:	2214      	movs	r2, #20
 80059ca:	e000      	b.n	80059ce <optiga_cmd_open_application_handler+0xba>
 80059cc:	221c      	movs	r2, #28
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80059dc:	2208      	movs	r2, #8
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fdf3 	bl	80065cc <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d012      	beq.n	8005a14 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80059fa:	2208      	movs	r2, #8
 80059fc:	4619      	mov	r1, r3
 80059fe:	f000 fc07 	bl	8006210 <pal_os_datastore_write>
 8005a02:	4603      	mov	r3, r0
 8005a04:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005a06:	89fb      	ldrh	r3, [r7, #14]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 8005a0c:	f240 2302 	movw	r3, #514	@ 0x202
 8005a10:	81fb      	strh	r3, [r7, #14]
                    break;
 8005a12:	e01c      	b.n	8005a4e <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 8005a14:	2300      	movs	r3, #0
 8005a16:	81fb      	strh	r3, [r7, #14]
        break;
 8005a18:	e019      	b.n	8005a4e <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	7c9b      	ldrb	r3, [r3, #18]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7f5b      	ldrb	r3, [r3, #29]
 8005a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	775a      	strb	r2, [r3, #29]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7f5a      	ldrb	r2, [r3, #29]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	775a      	strb	r2, [r3, #29]
                break;
 8005a3a:	e008      	b.n	8005a4e <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2233      	movs	r2, #51	@ 0x33
 8005a44:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 8005a46:	2300      	movs	r3, #0
 8005a48:	81fb      	strh	r3, [r7, #14]
        break;
 8005a4a:	e000      	b.n	8005a4e <optiga_cmd_open_application_handler+0x13a>
                    break;
 8005a4c:	bf00      	nop
    }

    return (return_status);
 8005a4e:	89fb      	ldrh	r3, [r7, #14]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	0800f020 	.word	0x0800f020

08005a5c <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af04      	add	r7, sp, #16
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	460b      	mov	r3, r1
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005a6a:	7af9      	ldrb	r1, [r7, #11]
 8005a6c:	23f0      	movs	r3, #240	@ 0xf0
 8005a6e:	9302      	str	r3, [sp, #8]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4a04      	ldr	r2, [pc, #16]	@ (8005a8c <optiga_cmd_open_application+0x30>)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f7fe fe5f 	bl	8004740 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08005915 	.word	0x08005915

08005a90 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <optiga_comms_create+0x48>)
 8005aa0:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	7c1b      	ldrb	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d110      	bne.n	8005acc <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8005aaa:	f000 fa3d 	bl	8005f28 <pal_init>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
                break;
 8005ab8:	e008      	b.n	8005acc <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8005acc:	68fb      	ldr	r3, [r7, #12]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200004d4 	.word	0x200004d4

08005adc <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	609a      	str	r2, [r3, #8]
    return (0);
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005b04:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005b08:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f8a6 	bl	8005c5c <check_optiga_comms_state>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d122      	bne.n	8005b5c <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a10      	ldr	r2, [pc, #64]	@ (8005b68 <optiga_comms_open+0x6c>)
 8005b26:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	7d12      	ldrb	r2, [r2, #20]
 8005b32:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fb f820 	bl	8000b8c <ifx_i2c_open>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005b50:	89fb      	ldrh	r3, [r7, #14]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08005c91 	.word	0x08005c91

08005b6c <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005b7c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005b80:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 f86a 	bl	8005c5c <check_optiga_comms_state>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d12c      	bne.n	8005be8 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a15      	ldr	r2, [pc, #84]	@ (8005bf4 <optiga_comms_transceive+0x88>)
 8005b9e:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	7c92      	ldrb	r2, [r2, #18]
 8005baa:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	7cd2      	ldrb	r2, [r2, #19]
 8005bb6:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	7d12      	ldrb	r2, [r2, #20]
 8005bc2:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6858      	ldr	r0, [r3, #4]
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	f7fb f813 	bl	8000bfe <ifx_i2c_transceive>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005bdc:	8afb      	ldrh	r3, [r7, #22]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005be8:	8afb      	ldrh	r3, [r7, #22]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	08005c91 	.word	0x08005c91

08005bf8 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c00:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c04:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f828 	bl	8005c5c <check_optiga_comms_state>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11c      	bne.n	8005c4c <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a0d      	ldr	r2, [pc, #52]	@ (8005c58 <optiga_comms_close+0x60>)
 8005c22:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	7d12      	ldrb	r2, [r2, #20]
 8005c2e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fb f81a 	bl	8000c70 <ifx_i2c_close>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c40:	89fb      	ldrh	r3, [r7, #14]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	08005c91 	.word	0x08005c91

08005c5c <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c64:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c68:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d008      	beq.n	8005c82 <check_optiga_comms_state+0x26>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7c5b      	ldrb	r3, [r3, #17]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d004      	beq.n	8005c82 <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005c82:	89fb      	ldrh	r3, [r7, #14]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	887a      	ldrh	r2, [r7, #2]
 8005ca8:	4611      	mov	r1, r2
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	745a      	strb	r2, [r3, #17]
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005cc8:	887b      	ldrh	r3, [r7, #2]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	0e1b      	lsrs	r3, r3, #24
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	0c1a      	lsrs	r2, r3, #16
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3301      	adds	r3, #1
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	0a1a      	lsrs	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3302      	adds	r3, #2
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3303      	adds	r3, #3
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	061a      	lsls	r2, r3, #24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3302      	adds	r3, #2
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005d4a:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	3103      	adds	r1, #3
 8005d50:	7809      	ldrb	r1, [r1, #0]
 8005d52:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 8005d58:	68fb      	ldr	r3, [r7, #12]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	6992      	ldr	r2, [r2, #24]
 8005d84:	8879      	ldrh	r1, [r7, #2]
 8005d86:	4610      	mov	r0, r2
 8005d88:	4798      	blx	r3
}
 8005d8a:	bf00      	nop
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8005da0:	2200      	movs	r2, #0
 8005da2:	2101      	movs	r1, #1
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f804 	bl	8005db2 <optiga_util_set_comms_params>
    }
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	70fb      	strb	r3, [r7, #3]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d002      	beq.n	8005dce <optiga_util_set_comms_params+0x1c>
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d005      	beq.n	8005dd8 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005dcc:	e009      	b.n	8005de2 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	78ba      	ldrb	r2, [r7, #2]
 8005dd2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8005dd6:	e004      	b.n	8005de2 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	78ba      	ldrb	r2, [r7, #2]
 8005ddc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 8005de0:	bf00      	nop
        }
    }
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02b      	beq.n	8005e60 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8005e08:	2124      	movs	r1, #36	@ 0x24
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f000 fbb6 	bl	800657c <pal_os_calloc>
 8005e10:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d025      	beq.n	8005e64 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2200      	movs	r2, #0
 8005e28:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	490c      	ldr	r1, [pc, #48]	@ (8005e70 <optiga_util_create+0x80>)
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fc13 	bl	800566c <optiga_cmd_create>
 8005e46:	4602      	mov	r2, r0
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d108      	bne.n	8005e66 <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8005e54:	6978      	ldr	r0, [r7, #20]
 8005e56:	f000 fb9f 	bl	8006598 <pal_os_free>
            me = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e002      	b.n	8005e66 <optiga_util_create+0x76>
            break;
 8005e60:	bf00      	nop
 8005e62:	e000      	b.n	8005e66 <optiga_util_create+0x76>
            break;
 8005e64:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 8005e66:	697b      	ldr	r3, [r7, #20]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	08005d67 	.word	0x08005d67

08005e74 <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005e80:	f240 3302 	movw	r3, #770	@ 0x302
 8005e84:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <optiga_util_open_application+0x20>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d103      	bne.n	8005e9c <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005e94:	f240 3303 	movw	r3, #771	@ 0x303
 8005e98:	81fb      	strh	r3, [r7, #14]
            break;
 8005e9a:	e03d      	b.n	8005f18 <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8c1b      	ldrh	r3, [r3, #32]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d103      	bne.n	8005eac <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005ea4:	f240 3305 	movw	r3, #773	@ 0x305
 8005ea8:	81fb      	strh	r3, [r7, #14]
            break;
 8005eaa:	e035      	b.n	8005f18 <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6958      	ldr	r0, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	f7fe fbea 	bl	8004698 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6958      	ldr	r0, [r3, #20]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7fe fbe1 	bl	8004698 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	2133      	movs	r1, #51	@ 0x33
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fbd7 	bl	8004698 <optiga_cmd_set_shielded_connection_option>
 8005eea:	e006      	b.n	8005efa <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	2111      	movs	r1, #17
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe fbcf 	bl	8004698 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	78f9      	ldrb	r1, [r7, #3]
 8005f00:	2200      	movs	r2, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fdaa 	bl	8005a5c <optiga_cmd_open_application>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff ff3a 	bl	8005d92 <optiga_util_reset_protection_level>

    return (return_value);
 8005f1e:	89fb      	ldrh	r3, [r7, #14]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	461a      	mov	r2, r3
 8005f44:	460b      	mov	r3, r1
 8005f46:	817b      	strh	r3, [r7, #10]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d012      	beq.n	8005f78 <pal_crypt_tls_prf_sha256+0x40>
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00f      	beq.n	8005f78 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	82fb      	strh	r3, [r7, #22]
 8005f5c:	e007      	b.n	8005f6e <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f62:	4413      	add	r3, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8005f68:	8afb      	ldrh	r3, [r7, #22]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	82fb      	strh	r3, [r7, #22]
 8005f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	8afa      	ldrh	r2, [r7, #22]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3f2      	bcc.n	8005f5e <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 8005f78:	bf00      	nop
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	603b      	str	r3, [r7, #0]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8005f94:	2300      	movs	r3, #0
 8005f96:	82fb      	strh	r3, [r7, #22]
 8005f98:	e00a      	b.n	8005fb0 <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 8005f9a:	8afb      	ldrh	r3, [r7, #22]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	441a      	add	r2, r3
 8005fa0:	8afb      	ldrh	r3, [r7, #22]
 8005fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fa4:	440b      	add	r3, r1
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8005faa:	8afb      	ldrh	r3, [r7, #22]
 8005fac:	3301      	adds	r3, #1
 8005fae:	82fb      	strh	r3, [r7, #22]
 8005fb0:	8afa      	ldrh	r2, [r7, #22]
 8005fb2:	8c3b      	ldrh	r3, [r7, #32]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d3f0      	bcc.n	8005f9a <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	603b      	str	r3, [r7, #0]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	82fb      	strh	r3, [r7, #22]
 8005fda:	e00a      	b.n	8005ff2 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 8005fdc:	8afb      	ldrh	r3, [r7, #22]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	8afb      	ldrh	r3, [r7, #22]
 8005fe4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005fe6:	440b      	add	r3, r1
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8005fec:	8afb      	ldrh	r3, [r7, #22]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	82fb      	strh	r3, [r7, #22]
 8005ff2:	8afa      	ldrh	r2, [r7, #22]
 8005ff4:	8c3b      	ldrh	r3, [r7, #32]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d3f0      	bcc.n	8005fdc <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006018:	2201      	movs	r2, #1
 800601a:	4619      	mov	r1, r3
 800601c:	f002 fb60 	bl	80086e0 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006038:	2200      	movs	r2, #0
 800603a:	4619      	mov	r1, r3
 800603c:	f002 fb50 	bl	80086e0 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8006050:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <pal_i2c_acquire+0x2c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8006058:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <pal_i2c_acquire+0x2c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3301      	adds	r3, #1
 800605e:	4a05      	ldr	r2, [pc, #20]	@ (8006074 <pal_i2c_acquire+0x2c>)
 8006060:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 8006066:	2301      	movs	r3, #1
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000d9c 	.word	0x20000d9c

08006078 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 8006080:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <pal_i2c_release+0x1c>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	20000d9c 	.word	0x20000d9c

08006098 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80060b6:	887a      	ldrh	r2, [r7, #2]
 80060b8:	4611      	mov	r1, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff ffd8 	bl	8006078 <pal_i2c_release>
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}

080060d0 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 800610a:	2301      	movs	r3, #1
 800610c:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f7ff ff9a 	bl	8006048 <pal_i2c_acquire>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d120      	bne.n	800615c <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 800611a:	4a16      	ldr	r2, [pc, #88]	@ (8006174 <pal_i2c_write+0x78>)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	b299      	uxth	r1, r3
 800612c:	88fb      	ldrh	r3, [r7, #6]
 800612e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006132:	9200      	str	r2, [sp, #0]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	f002 fc6b 	bl	8008a10 <HAL_I2C_Master_Transmit>
 800613a:	4603      	mov	r3, r0
 800613c:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 800613e:	7d7b      	ldrb	r3, [r7, #21]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d106      	bne.n	8006152 <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006144:	2100      	movs	r1, #0
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7ff ffa6 	bl	8006098 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 800614c:	2300      	movs	r3, #0
 800614e:	82fb      	strh	r3, [r7, #22]
 8006150:	e00a      	b.n	8006168 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8006152:	2101      	movs	r1, #1
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff ff9f 	bl	8006098 <invoke_upper_layer_callback>
 800615a:	e005      	b.n	8006168 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 800615c:	2302      	movs	r3, #2
 800615e:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006160:	2102      	movs	r1, #2
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff ff98 	bl	8006098 <invoke_upper_layer_callback>
    }

    return status;
 8006168:	8afb      	ldrh	r3, [r7, #22]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000da0 	.word	0x20000da0

08006178 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006186:	2301      	movs	r3, #1
 8006188:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff ff5c 	bl	8006048 <pal_i2c_acquire>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d120      	bne.n	80061d8 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006196:	4a16      	ldr	r2, [pc, #88]	@ (80061f0 <pal_i2c_read+0x78>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	b299      	uxth	r1, r3
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80061ae:	9200      	str	r2, [sp, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	f002 fd2b 	bl	8008c0c <HAL_I2C_Master_Receive>
 80061b6:	4603      	mov	r3, r0
 80061b8:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 80061ba:	7d7b      	ldrb	r3, [r7, #21]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 80061c0:	2100      	movs	r1, #0
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f7ff ff68 	bl	8006098 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 80061c8:	2300      	movs	r3, #0
 80061ca:	82fb      	strh	r3, [r7, #22]
 80061cc:	e00a      	b.n	80061e4 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 80061ce:	2101      	movs	r1, #1
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ff61 	bl	8006098 <invoke_upper_layer_callback>
 80061d6:	e005      	b.n	80061e4 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 80061d8:	2302      	movs	r3, #2
 80061da:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 80061dc:	2102      	movs	r1, #2
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff ff5a 	bl	8006098 <invoke_upper_layer_callback>
    }

    return status;
 80061e4:	8afb      	ldrh	r3, [r7, #22]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000da0 	.word	0x20000da0

080061f4 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
	...

08006210 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	4603      	mov	r3, r0
 8006218:	6039      	str	r1, [r7, #0]
 800621a:	80fb      	strh	r3, [r7, #6]
 800621c:	4613      	mov	r3, r2
 800621e:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006220:	2301      	movs	r3, #1
 8006222:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	2b33      	cmp	r3, #51	@ 0x33
 800622c:	d043      	beq.n	80062b6 <pal_os_datastore_write+0xa6>
 800622e:	2b33      	cmp	r3, #51	@ 0x33
 8006230:	dc5e      	bgt.n	80062f0 <pal_os_datastore_write+0xe0>
 8006232:	2b11      	cmp	r3, #17
 8006234:	d002      	beq.n	800623c <pal_os_datastore_write+0x2c>
 8006236:	2b22      	cmp	r3, #34	@ 0x22
 8006238:	d020      	beq.n	800627c <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 800623a:	e059      	b.n	80062f0 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 800623c:	88bb      	ldrh	r3, [r7, #4]
 800623e:	2b40      	cmp	r3, #64	@ 0x40
 8006240:	d858      	bhi.n	80062f4 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8006242:	88bb      	ldrh	r3, [r7, #4]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	b299      	uxth	r1, r3
 8006248:	7b7b      	ldrb	r3, [r7, #13]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	737a      	strb	r2, [r7, #13]
 800624e:	461a      	mov	r2, r3
 8006250:	b2c9      	uxtb	r1, r1
 8006252:	4b2b      	ldr	r3, [pc, #172]	@ (8006300 <pal_os_datastore_write+0xf0>)
 8006254:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8006256:	7b7b      	ldrb	r3, [r7, #13]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	737a      	strb	r2, [r7, #13]
 800625c:	461a      	mov	r2, r3
 800625e:	88bb      	ldrh	r3, [r7, #4]
 8006260:	b2d9      	uxtb	r1, r3
 8006262:	4b27      	ldr	r3, [pc, #156]	@ (8006300 <pal_os_datastore_write+0xf0>)
 8006264:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8006266:	7b7b      	ldrb	r3, [r7, #13]
 8006268:	4a25      	ldr	r2, [pc, #148]	@ (8006300 <pal_os_datastore_write+0xf0>)
 800626a:	4413      	add	r3, r2
 800626c:	88ba      	ldrh	r2, [r7, #4]
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	4618      	mov	r0, r3
 8006272:	f007 fb46 	bl	800d902 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8006276:	2300      	movs	r3, #0
 8006278:	81fb      	strh	r3, [r7, #14]
            break;
 800627a:	e03b      	b.n	80062f4 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 800627c:	88bb      	ldrh	r3, [r7, #4]
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	b299      	uxth	r1, r3
 8006282:	7b7b      	ldrb	r3, [r7, #13]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	737a      	strb	r2, [r7, #13]
 8006288:	461a      	mov	r2, r3
 800628a:	b2c9      	uxtb	r1, r1
 800628c:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <pal_os_datastore_write+0xf4>)
 800628e:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8006290:	7b7b      	ldrb	r3, [r7, #13]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	737a      	strb	r2, [r7, #13]
 8006296:	461a      	mov	r2, r3
 8006298:	88bb      	ldrh	r3, [r7, #4]
 800629a:	b2d9      	uxtb	r1, r3
 800629c:	4b19      	ldr	r3, [pc, #100]	@ (8006304 <pal_os_datastore_write+0xf4>)
 800629e:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 80062a0:	7b7b      	ldrb	r3, [r7, #13]
 80062a2:	4a18      	ldr	r2, [pc, #96]	@ (8006304 <pal_os_datastore_write+0xf4>)
 80062a4:	4413      	add	r3, r2
 80062a6:	88ba      	ldrh	r2, [r7, #4]
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f007 fb29 	bl	800d902 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80062b0:	2300      	movs	r3, #0
 80062b2:	81fb      	strh	r3, [r7, #14]
            break;
 80062b4:	e01f      	b.n	80062f6 <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	b299      	uxth	r1, r3
 80062bc:	7b7b      	ldrb	r3, [r7, #13]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	737a      	strb	r2, [r7, #13]
 80062c2:	461a      	mov	r2, r3
 80062c4:	b2c9      	uxtb	r1, r1
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <pal_os_datastore_write+0xf8>)
 80062c8:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 80062ca:	7b7b      	ldrb	r3, [r7, #13]
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	737a      	strb	r2, [r7, #13]
 80062d0:	461a      	mov	r2, r3
 80062d2:	88bb      	ldrh	r3, [r7, #4]
 80062d4:	b2d9      	uxtb	r1, r3
 80062d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <pal_os_datastore_write+0xf8>)
 80062d8:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 80062da:	7b7b      	ldrb	r3, [r7, #13]
 80062dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006308 <pal_os_datastore_write+0xf8>)
 80062de:	4413      	add	r3, r2
 80062e0:	88ba      	ldrh	r2, [r7, #4]
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f007 fb0c 	bl	800d902 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 80062ea:	2300      	movs	r3, #0
 80062ec:	81fb      	strh	r3, [r7, #14]
            break;
 80062ee:	e002      	b.n	80062f6 <pal_os_datastore_write+0xe6>
            break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <pal_os_datastore_write+0xe6>
            break;
 80062f4:	bf00      	nop
        }
    }
    return return_status;
 80062f6:	89fb      	ldrh	r3, [r7, #14]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	2000050c 	.word	0x2000050c
 8006304:	20000da4 	.word	0x20000da4
 8006308:	20000de8 	.word	0x20000de8

0800630c <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 800631a:	2301      	movs	r3, #1
 800631c:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8006322:	89fb      	ldrh	r3, [r7, #14]
 8006324:	2b33      	cmp	r3, #51	@ 0x33
 8006326:	d049      	beq.n	80063bc <pal_os_datastore_read+0xb0>
 8006328:	2b33      	cmp	r3, #51	@ 0x33
 800632a:	dc67      	bgt.n	80063fc <pal_os_datastore_read+0xf0>
 800632c:	2b11      	cmp	r3, #17
 800632e:	d002      	beq.n	8006336 <pal_os_datastore_read+0x2a>
 8006330:	2b22      	cmp	r3, #34	@ 0x22
 8006332:	d023      	beq.n	800637c <pal_os_datastore_read+0x70>
 8006334:	e062      	b.n	80063fc <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8006336:	7d7b      	ldrb	r3, [r7, #21]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	757a      	strb	r2, [r7, #21]
 800633c:	461a      	mov	r2, r3
 800633e:	4b34      	ldr	r3, [pc, #208]	@ (8006410 <pal_os_datastore_read+0x104>)
 8006340:	5c9b      	ldrb	r3, [r3, r2]
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8006346:	7d7b      	ldrb	r3, [r7, #21]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	757a      	strb	r2, [r7, #21]
 800634c:	461a      	mov	r2, r3
 800634e:	4b30      	ldr	r3, [pc, #192]	@ (8006410 <pal_os_datastore_read+0x104>)
 8006350:	5c9b      	ldrb	r3, [r3, r2]
 8006352:	461a      	mov	r2, r3
 8006354:	8a7b      	ldrh	r3, [r7, #18]
 8006356:	4313      	orrs	r3, r2
 8006358:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	2b40      	cmp	r3, #64	@ 0x40
 800635e:	d851      	bhi.n	8006404 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8006360:	7d7b      	ldrb	r3, [r7, #21]
 8006362:	4a2b      	ldr	r2, [pc, #172]	@ (8006410 <pal_os_datastore_read+0x104>)
 8006364:	4413      	add	r3, r2
 8006366:	8a7a      	ldrh	r2, [r7, #18]
 8006368:	4619      	mov	r1, r3
 800636a:	68b8      	ldr	r0, [r7, #8]
 800636c:	f007 fac9 	bl	800d902 <memcpy>
                *p_buffer_length = data_length;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8a7a      	ldrh	r2, [r7, #18]
 8006374:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8006376:	2300      	movs	r3, #0
 8006378:	82fb      	strh	r3, [r7, #22]
            }
            break;
 800637a:	e043      	b.n	8006404 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 800637c:	7d7b      	ldrb	r3, [r7, #21]
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	757a      	strb	r2, [r7, #21]
 8006382:	461a      	mov	r2, r3
 8006384:	4b23      	ldr	r3, [pc, #140]	@ (8006414 <pal_os_datastore_read+0x108>)
 8006386:	5c9b      	ldrb	r3, [r3, r2]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 800638c:	7d7b      	ldrb	r3, [r7, #21]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	757a      	strb	r2, [r7, #21]
 8006392:	461a      	mov	r2, r3
 8006394:	4b1f      	ldr	r3, [pc, #124]	@ (8006414 <pal_os_datastore_read+0x108>)
 8006396:	5c9b      	ldrb	r3, [r3, r2]
 8006398:	461a      	mov	r2, r3
 800639a:	8a7b      	ldrh	r3, [r7, #18]
 800639c:	4313      	orrs	r3, r2
 800639e:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 80063a0:	7d7b      	ldrb	r3, [r7, #21]
 80063a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006414 <pal_os_datastore_read+0x108>)
 80063a4:	4413      	add	r3, r2
 80063a6:	8a7a      	ldrh	r2, [r7, #18]
 80063a8:	4619      	mov	r1, r3
 80063aa:	68b8      	ldr	r0, [r7, #8]
 80063ac:	f007 faa9 	bl	800d902 <memcpy>
            *p_buffer_length = data_length;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8a7a      	ldrh	r2, [r7, #18]
 80063b4:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80063b6:	2300      	movs	r3, #0
 80063b8:	82fb      	strh	r3, [r7, #22]
            break;
 80063ba:	e024      	b.n	8006406 <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 80063bc:	7d7b      	ldrb	r3, [r7, #21]
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	757a      	strb	r2, [r7, #21]
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b14      	ldr	r3, [pc, #80]	@ (8006418 <pal_os_datastore_read+0x10c>)
 80063c6:	5c9b      	ldrb	r3, [r3, r2]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 80063cc:	7d7b      	ldrb	r3, [r7, #21]
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	757a      	strb	r2, [r7, #21]
 80063d2:	461a      	mov	r2, r3
 80063d4:	4b10      	ldr	r3, [pc, #64]	@ (8006418 <pal_os_datastore_read+0x10c>)
 80063d6:	5c9b      	ldrb	r3, [r3, r2]
 80063d8:	461a      	mov	r2, r3
 80063da:	8a7b      	ldrh	r3, [r7, #18]
 80063dc:	4313      	orrs	r3, r2
 80063de:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 80063e0:	7d7b      	ldrb	r3, [r7, #21]
 80063e2:	4a0d      	ldr	r2, [pc, #52]	@ (8006418 <pal_os_datastore_read+0x10c>)
 80063e4:	4413      	add	r3, r2
 80063e6:	8a7a      	ldrh	r2, [r7, #18]
 80063e8:	4619      	mov	r1, r3
 80063ea:	68b8      	ldr	r0, [r7, #8]
 80063ec:	f007 fa89 	bl	800d902 <memcpy>
            *p_buffer_length = data_length;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8a7a      	ldrh	r2, [r7, #18]
 80063f4:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 80063f6:	2300      	movs	r3, #0
 80063f8:	82fb      	strh	r3, [r7, #22]
            break;
 80063fa:	e004      	b.n	8006406 <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	801a      	strh	r2, [r3, #0]
            break;
 8006402:	e000      	b.n	8006406 <pal_os_datastore_read+0xfa>
            break;
 8006404:	bf00      	nop
        }
    }

    return return_status;
 8006406:	8afb      	ldrh	r3, [r7, #22]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	2000050c 	.word	0x2000050c
 8006414:	20000da4 	.word	0x20000da4
 8006418:	20000de8 	.word	0x20000de8

0800641c <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	7a1b      	ldrb	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8006436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 f82a 	bl	8006498 <pal_os_event_register_callback_oneshot>
    }
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	721a      	strb	r2, [r3, #8]
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
	...

08006468 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <pal_os_event_create+0x20>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4804      	ldr	r0, [pc, #16]	@ (8006494 <pal_os_event_create+0x2c>)
 8006484:	f7ff ffca 	bl	800641c <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006488:	4b02      	ldr	r3, [pc, #8]	@ (8006494 <pal_os_event_create+0x2c>)
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000df4 	.word	0x20000df4

08006498 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	4a0d      	ldr	r2, [pc, #52]	@ (80064e0 <pal_os_event_register_callback_oneshot+0x48>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 80064be:	f001 f899 	bl	80075f4 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	4a06      	ldr	r2, [pc, #24]	@ (80064e4 <pal_os_event_register_callback_oneshot+0x4c>)
 80064ca:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 80064cc:	4b06      	ldr	r3, [pc, #24]	@ (80064e8 <pal_os_event_register_callback_oneshot+0x50>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 80064d2:	4806      	ldr	r0, [pc, #24]	@ (80064ec <pal_os_event_register_callback_oneshot+0x54>)
 80064d4:	f005 fb0a 	bl	800baec <HAL_TIM_Base_Start_IT>
}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	10624dd3 	.word	0x10624dd3
 80064e4:	20000e0c 	.word	0x20000e0c
 80064e8:	20000e10 	.word	0x20000e10
 80064ec:	20000630 	.word	0x20000630

080064f0 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <pal_os_event_trigger_registered_callback+0x3c>)
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 80064fe:	4b0b      	ldr	r3, [pc, #44]	@ (800652c <pal_os_event_trigger_registered_callback+0x3c>)
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8006504:	4b09      	ldr	r3, [pc, #36]	@ (800652c <pal_os_event_trigger_registered_callback+0x3c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 800650a:	4b08      	ldr	r3, [pc, #32]	@ (800652c <pal_os_event_trigger_registered_callback+0x3c>)
 800650c:	2200      	movs	r2, #0
 800650e:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8006510:	4b06      	ldr	r3, [pc, #24]	@ (800652c <pal_os_event_trigger_registered_callback+0x3c>)
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 8006516:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <pal_os_event_trigger_registered_callback+0x40>)
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6838      	ldr	r0, [r7, #0]
 8006520:	4798      	blx	r3
    }
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000df4 	.word	0x20000df4
 8006530:	20000e10 	.word	0x20000e10

08006534 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006538:	4b07      	ldr	r3, [pc, #28]	@ (8006558 <pal_os_event_timer_tick+0x24>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d008      	beq.n	8006552 <pal_os_event_timer_tick+0x1e>
 8006540:	f001 f858 	bl	80075f4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	4b05      	ldr	r3, [pc, #20]	@ (800655c <pal_os_event_timer_tick+0x28>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d301      	bcc.n	8006552 <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 800654e:	f7ff ffcf 	bl	80064f0 <pal_os_event_trigger_registered_callback>
    }
}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000e10 	.word	0x20000e10
 800655c:	20000e0c 	.word	0x20000e0c

08006560 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006564:	bf00      	nop
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 800656e:	b480      	push	{r7}
 8006570:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 8006572:	bf00      	nop
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f006 ff41 	bl	800d410 <calloc>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <pal_os_free>:

void pal_os_free(void * block)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
    free(block);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f006 ff51 	bl	800d448 <free>
}
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f007 f99f 	bl	800d902 <memcpy>
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f007 f949 	bl	800d878 <memset>
}
 80065e6:	bf00      	nop
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 80065f2:	f000 ffff 	bl	80075f4 <HAL_GetTick>
 80065f6:	4603      	mov	r3, r0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	bd80      	pop	{r7, pc}

080065fc <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8006600:	f000 fff8 	bl	80075f4 <HAL_GetTick>
 8006604:	4603      	mov	r3, r0
 8006606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800660a:	fb02 f303 	mul.w	r3, r2, r3
}
 800660e:	4618      	mov	r0, r3
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	607b      	str	r3, [r7, #4]
 800661e:	4b10      	ldr	r3, [pc, #64]	@ (8006660 <HAL_MspInit+0x4c>)
 8006620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006622:	4a0f      	ldr	r2, [pc, #60]	@ (8006660 <HAL_MspInit+0x4c>)
 8006624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006628:	6453      	str	r3, [r2, #68]	@ 0x44
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <HAL_MspInit+0x4c>)
 800662c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800662e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006636:	2300      	movs	r3, #0
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <HAL_MspInit+0x4c>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663e:	4a08      	ldr	r2, [pc, #32]	@ (8006660 <HAL_MspInit+0x4c>)
 8006640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006644:	6413      	str	r3, [r2, #64]	@ 0x40
 8006646:	4b06      	ldr	r3, [pc, #24]	@ (8006660 <HAL_MspInit+0x4c>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800

08006664 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a0b      	ldr	r2, [pc, #44]	@ (80066a0 <HAL_CRC_MspInit+0x3c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10d      	bne.n	8006692 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	4b0a      	ldr	r3, [pc, #40]	@ (80066a4 <HAL_CRC_MspInit+0x40>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667e:	4a09      	ldr	r2, [pc, #36]	@ (80066a4 <HAL_CRC_MspInit+0x40>)
 8006680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006684:	6313      	str	r3, [r2, #48]	@ 0x30
 8006686:	4b07      	ldr	r3, [pc, #28]	@ (80066a4 <HAL_CRC_MspInit+0x40>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40023000 	.word	0x40023000
 80066a4:	40023800 	.word	0x40023800

080066a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	@ 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b0:	f107 0314 	add.w	r3, r7, #20
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	60da      	str	r2, [r3, #12]
 80066be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1d      	ldr	r2, [pc, #116]	@ (800673c <HAL_I2C_MspInit+0x94>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d134      	bne.n	8006734 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006740 <HAL_I2C_MspInit+0x98>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006740 <HAL_I2C_MspInit+0x98>)
 80066d4:	f043 0302 	orr.w	r3, r3, #2
 80066d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066da:	4b19      	ldr	r3, [pc, #100]	@ (8006740 <HAL_I2C_MspInit+0x98>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80066e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80066ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066ec:	2312      	movs	r3, #18
 80066ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f0:	2300      	movs	r3, #0
 80066f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f4:	2303      	movs	r3, #3
 80066f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80066f8:	2304      	movs	r3, #4
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066fc:	f107 0314 	add.w	r3, r7, #20
 8006700:	4619      	mov	r1, r3
 8006702:	4810      	ldr	r0, [pc, #64]	@ (8006744 <HAL_I2C_MspInit+0x9c>)
 8006704:	f001 fe50 	bl	80083a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	4b0c      	ldr	r3, [pc, #48]	@ (8006740 <HAL_I2C_MspInit+0x98>)
 800670e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006710:	4a0b      	ldr	r2, [pc, #44]	@ (8006740 <HAL_I2C_MspInit+0x98>)
 8006712:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006716:	6413      	str	r3, [r2, #64]	@ 0x40
 8006718:	4b09      	ldr	r3, [pc, #36]	@ (8006740 <HAL_I2C_MspInit+0x98>)
 800671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006724:	2200      	movs	r2, #0
 8006726:	2100      	movs	r1, #0
 8006728:	2020      	movs	r0, #32
 800672a:	f001 f86e 	bl	800780a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800672e:	2020      	movs	r0, #32
 8006730:	f001 f887 	bl	8007842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006734:	bf00      	nop
 8006736:	3728      	adds	r7, #40	@ 0x28
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40005400 	.word	0x40005400
 8006740:	40023800 	.word	0x40023800
 8006744:	40020400 	.word	0x40020400

08006748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006758:	d115      	bne.n	8006786 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	4b0c      	ldr	r3, [pc, #48]	@ (8006790 <HAL_TIM_Base_MspInit+0x48>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	4a0b      	ldr	r2, [pc, #44]	@ (8006790 <HAL_TIM_Base_MspInit+0x48>)
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	6413      	str	r3, [r2, #64]	@ 0x40
 800676a:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_TIM_Base_MspInit+0x48>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	201c      	movs	r0, #28
 800677c:	f001 f845 	bl	800780a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006780:	201c      	movs	r0, #28
 8006782:	f001 f85e 	bl	8007842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800

08006794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	@ 0x28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679c:	f107 0314 	add.w	r3, r7, #20
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006828 <HAL_UART_MspInit+0x94>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d133      	bne.n	800681e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80067b6:	2300      	movs	r3, #0
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	4b1c      	ldr	r3, [pc, #112]	@ (800682c <HAL_UART_MspInit+0x98>)
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	4a1b      	ldr	r2, [pc, #108]	@ (800682c <HAL_UART_MspInit+0x98>)
 80067c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067c6:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_UART_MspInit+0x98>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <HAL_UART_MspInit+0x98>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067da:	4a14      	ldr	r2, [pc, #80]	@ (800682c <HAL_UART_MspInit+0x98>)
 80067dc:	f043 0301 	orr.w	r3, r3, #1
 80067e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80067e2:	4b12      	ldr	r3, [pc, #72]	@ (800682c <HAL_UART_MspInit+0x98>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80067ee:	230c      	movs	r3, #12
 80067f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f2:	2302      	movs	r3, #2
 80067f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067fa:	2300      	movs	r3, #0
 80067fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80067fe:	2307      	movs	r3, #7
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006802:	f107 0314 	add.w	r3, r7, #20
 8006806:	4619      	mov	r1, r3
 8006808:	4809      	ldr	r0, [pc, #36]	@ (8006830 <HAL_UART_MspInit+0x9c>)
 800680a:	f001 fdcd 	bl	80083a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800680e:	2200      	movs	r2, #0
 8006810:	2100      	movs	r1, #0
 8006812:	2026      	movs	r0, #38	@ 0x26
 8006814:	f000 fff9 	bl	800780a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006818:	2026      	movs	r0, #38	@ 0x26
 800681a:	f001 f812 	bl	8007842 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800681e:	bf00      	nop
 8006820:	3728      	adds	r7, #40	@ 0x28
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40004400 	.word	0x40004400
 800682c:	40023800 	.word	0x40023800
 8006830:	40020000 	.word	0x40020000

08006834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <NMI_Handler+0x4>

0800683c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <HardFault_Handler+0x4>

08006844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <MemManage_Handler+0x4>

0800684c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006850:	bf00      	nop
 8006852:	e7fd      	b.n	8006850 <BusFault_Handler+0x4>

08006854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006858:	bf00      	nop
 800685a:	e7fd      	b.n	8006858 <UsageFault_Handler+0x4>

0800685c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006860:	bf00      	nop
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800686a:	b480      	push	{r7}
 800686c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800686e:	bf00      	nop
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800687c:	bf00      	nop
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800688a:	f000 fe9f 	bl	80075cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800688e:	bf00      	nop
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006898:	4802      	ldr	r0, [pc, #8]	@ (80068a4 <TIM2_IRQHandler+0x10>)
 800689a:	f005 f989 	bl	800bbb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800689e:	bf00      	nop
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000630 	.word	0x20000630

080068a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80068ac:	4802      	ldr	r0, [pc, #8]	@ (80068b8 <I2C1_EV_IRQHandler+0x10>)
 80068ae:	f002 fbdf 	bl	8009070 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80068b2:	bf00      	nop
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200005dc 	.word	0x200005dc

080068bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80068c0:	4802      	ldr	r0, [pc, #8]	@ (80068cc <I2C1_ER_IRQHandler+0x10>)
 80068c2:	f002 fd28 	bl	8009316 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80068c6:	bf00      	nop
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200005dc 	.word	0x200005dc

080068d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80068d4:	4802      	ldr	r0, [pc, #8]	@ (80068e0 <USART2_IRQHandler+0x10>)
 80068d6:	f005 fe5f 	bl	800c598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80068da:	bf00      	nop
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000678 	.word	0x20000678

080068e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80068e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80068ec:	f001 ff12 	bl	8008714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80068f0:	bf00      	nop
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e00a      	b.n	800691c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006906:	f3af 8000 	nop.w
 800690a:	4601      	mov	r1, r0
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	60ba      	str	r2, [r7, #8]
 8006912:	b2ca      	uxtb	r2, r1
 8006914:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	3301      	adds	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	dbf0      	blt.n	8006906 <_read+0x12>
  }

  return len;
 8006924:	687b      	ldr	r3, [r7, #4]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	e009      	b.n	8006954 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	60ba      	str	r2, [r7, #8]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	4618      	mov	r0, r3
 800694a:	f7fd fa75 	bl	8003e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	3301      	adds	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	dbf1      	blt.n	8006940 <_write+0x12>
  }
  return len;
 800695c:	687b      	ldr	r3, [r7, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <_close>:

int _close(int file)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800696e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800698e:	605a      	str	r2, [r3, #4]
  return 0;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <_isatty>:

int _isatty(int file)
{
 800699e:	b480      	push	{r7}
 80069a0:	b083      	sub	sp, #12
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80069a6:	2301      	movs	r3, #1
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069d8:	4a14      	ldr	r2, [pc, #80]	@ (8006a2c <_sbrk+0x5c>)
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <_sbrk+0x60>)
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069e4:	4b13      	ldr	r3, [pc, #76]	@ (8006a34 <_sbrk+0x64>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d102      	bne.n	80069f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069ec:	4b11      	ldr	r3, [pc, #68]	@ (8006a34 <_sbrk+0x64>)
 80069ee:	4a12      	ldr	r2, [pc, #72]	@ (8006a38 <_sbrk+0x68>)
 80069f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069f2:	4b10      	ldr	r3, [pc, #64]	@ (8006a34 <_sbrk+0x64>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4413      	add	r3, r2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d207      	bcs.n	8006a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a00:	f006 ff52 	bl	800d8a8 <__errno>
 8006a04:	4603      	mov	r3, r0
 8006a06:	220c      	movs	r2, #12
 8006a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a0e:	e009      	b.n	8006a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a10:	4b08      	ldr	r3, [pc, #32]	@ (8006a34 <_sbrk+0x64>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a16:	4b07      	ldr	r3, [pc, #28]	@ (8006a34 <_sbrk+0x64>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	4a05      	ldr	r2, [pc, #20]	@ (8006a34 <_sbrk+0x64>)
 8006a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a22:	68fb      	ldr	r3, [r7, #12]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20018000 	.word	0x20018000
 8006a30:	00000400 	.word	0x00000400
 8006a34:	20000e14 	.word	0x20000e14
 8006a38:	20001390 	.word	0x20001390

08006a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a40:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <SystemInit+0x20>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	4a05      	ldr	r2, [pc, #20]	@ (8006a5c <SystemInit+0x20>)
 8006a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	e000ed00 	.word	0xe000ed00

08006a60 <receive_packet>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */

static HAL_StatusTypeDef receive_packet(uint8_t *p_data, uint32_t *p_length, uint32_t timeout) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
    uint16_t crc;
    uint32_t packetSize = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
    HAL_StatusTypeDef status;
    uint8_t char1;

    *p_length = 0;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
    status = HAL_UART_Receive(&UartHandle, &char1, 1, timeout);
 8006a76:	f107 0117 	add.w	r1, r7, #23
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	485e      	ldr	r0, [pc, #376]	@ (8006bf8 <receive_packet+0x198>)
 8006a80:	f005 fcf3 	bl	800c46a <HAL_UART_Receive>
 8006a84:	4603      	mov	r3, r0
 8006a86:	76fb      	strb	r3, [r7, #27]

    if (status != HAL_OK) {
 8006a88:	7efb      	ldrb	r3, [r7, #27]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <receive_packet+0x32>
        return status;
 8006a8e:	7efb      	ldrb	r3, [r7, #27]
 8006a90:	e0ae      	b.n	8006bf0 <receive_packet+0x190>
    }

    switch(char1) {
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
 8006a94:	2b61      	cmp	r3, #97	@ 0x61
 8006a96:	d057      	beq.n	8006b48 <receive_packet+0xe8>
 8006a98:	2b61      	cmp	r3, #97	@ 0x61
 8006a9a:	dc57      	bgt.n	8006b4c <receive_packet+0xec>
 8006a9c:	2b18      	cmp	r3, #24
 8006a9e:	dc37      	bgt.n	8006b10 <receive_packet+0xb0>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	dd53      	ble.n	8006b4c <receive_packet+0xec>
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	2b17      	cmp	r3, #23
 8006aa8:	d850      	bhi.n	8006b4c <receive_packet+0xec>
 8006aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab0 <receive_packet+0x50>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006b17 	.word	0x08006b17
 8006ab4:	08006b1d 	.word	0x08006b1d
 8006ab8:	08006b4d 	.word	0x08006b4d
 8006abc:	08006b51 	.word	0x08006b51
 8006ac0:	08006b4d 	.word	0x08006b4d
 8006ac4:	08006b4d 	.word	0x08006b4d
 8006ac8:	08006b4d 	.word	0x08006b4d
 8006acc:	08006b4d 	.word	0x08006b4d
 8006ad0:	08006b4d 	.word	0x08006b4d
 8006ad4:	08006b4d 	.word	0x08006b4d
 8006ad8:	08006b4d 	.word	0x08006b4d
 8006adc:	08006b4d 	.word	0x08006b4d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b4d 	.word	0x08006b4d
 8006af0:	08006b4d 	.word	0x08006b4d
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006b4d 	.word	0x08006b4d
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b4d 	.word	0x08006b4d
 8006b08:	08006b4d 	.word	0x08006b4d
 8006b0c:	08006b25 	.word	0x08006b25
 8006b10:	2b41      	cmp	r3, #65	@ 0x41
 8006b12:	d019      	beq.n	8006b48 <receive_packet+0xe8>
 8006b14:	e01a      	b.n	8006b4c <receive_packet+0xec>
        case SOH:
            packetSize = PACKET_SIZE;
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	61fb      	str	r3, [r7, #28]
            break;
 8006b1a:	e01a      	b.n	8006b52 <receive_packet+0xf2>
        case STX:
            packetSize = PACKET_1K_SIZE;
 8006b1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b20:	61fb      	str	r3, [r7, #28]
            break;
 8006b22:	e016      	b.n	8006b52 <receive_packet+0xf2>
        case EOT:
        	break;

        case CA:
            if ((HAL_UART_Receive(&UartHandle, &char1, 1, timeout) != HAL_OK) || (char1 != CA)) {
 8006b24:	f107 0117 	add.w	r1, r7, #23
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4832      	ldr	r0, [pc, #200]	@ (8006bf8 <receive_packet+0x198>)
 8006b2e:	f005 fc9c 	bl	800c46a <HAL_UART_Receive>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <receive_packet+0xde>
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	2b18      	cmp	r3, #24
 8006b3c:	d001      	beq.n	8006b42 <receive_packet+0xe2>
                return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e056      	b.n	8006bf0 <receive_packet+0x190>
            }
            packetSize = 2;
 8006b42:	2302      	movs	r3, #2
 8006b44:	61fb      	str	r3, [r7, #28]
            break;
 8006b46:	e004      	b.n	8006b52 <receive_packet+0xf2>
        case ABORT1:
        case ABORT2:
            return HAL_BUSY;
 8006b48:	2302      	movs	r3, #2
 8006b4a:	e051      	b.n	8006bf0 <receive_packet+0x190>
        default:
            return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e04f      	b.n	8006bf0 <receive_packet+0x190>
        	break;
 8006b50:	bf00      	nop
    }

    *p_data = char1;
 8006b52:	7dfa      	ldrb	r2, [r7, #23]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	701a      	strb	r2, [r3, #0]

    if (packetSize >= PACKET_SIZE) {
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b5c:	d942      	bls.n	8006be4 <receive_packet+0x184>
        status = HAL_UART_Receive(&UartHandle,
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1c99      	adds	r1, r3, #2
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3304      	adds	r3, #4
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4822      	ldr	r0, [pc, #136]	@ (8006bf8 <receive_packet+0x198>)
 8006b6e:	f005 fc7c 	bl	800c46a <HAL_UART_Receive>
 8006b72:	4603      	mov	r3, r0
 8006b74:	76fb      	strb	r3, [r7, #27]
                                &p_data[PACKET_NUMBER_INDEX],
                                (packetSize + PACKET_OVERHEAD_SIZE),
                                timeout);

        if (status != HAL_OK) {
 8006b76:	7efb      	ldrb	r3, [r7, #27]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d004      	beq.n	8006b86 <receive_packet+0x126>
            *p_length = 0;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
            return status;
 8006b82:	7efb      	ldrb	r3, [r7, #27]
 8006b84:	e034      	b.n	8006bf0 <receive_packet+0x190>
        }

        /* Validate packet sequence numbers */
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE)) {
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3302      	adds	r3, #2
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3303      	adds	r3, #3
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	43db      	mvns	r3, r3
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d004      	beq.n	8006ba4 <receive_packet+0x144>
            *p_length = 0;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
            return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e025      	b.n	8006bf0 <receive_packet+0x190>
        }

        /* Check CRC */
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	b21a      	sxth	r2, r3
               p_data[packetSize + PACKET_DATA_INDEX + 1];
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3305      	adds	r3, #5
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	440b      	add	r3, r1
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	b21b      	sxth	r3, r3
        crc = (p_data[packetSize + PACKET_DATA_INDEX] << 8) |
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	b21b      	sxth	r3, r3
 8006bc2:	833b      	strh	r3, [r7, #24]

        if (calc_crc16(&p_data[PACKET_DATA_INDEX], packetSize) != crc )
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	69f9      	ldr	r1, [r7, #28]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f90a 	bl	8006de4 <calc_crc16>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	8b3b      	ldrh	r3, [r7, #24]
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d006      	beq.n	8006be8 <receive_packet+0x188>
                  {
                    packetSize = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
                    status = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	76fb      	strb	r3, [r7, #27]
 8006be2:	e001      	b.n	8006be8 <receive_packet+0x188>
                  }
    }
    else packetSize = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]

    *p_length = packetSize;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	20000678 	.word	0x20000678

08006bfc <prepare_initial_packet>:
  * @param  p_file_name: name of the file to be sent
  * @param  length: length of the file to be sent in bytes
  * @retval None
  */

static void prepare_initial_packet(uint8_t* p_data, const uint8_t* p_file_name, uint32_t length) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	@ 0x28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
    uint32_t i = 0, j = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	623b      	str	r3, [r7, #32]
    uint8_t aString[10];  // camelCase for non-pointers

    /* First three bytes are constant */
    p_data[PACKET_START_INDEX] = SOH;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3301      	adds	r3, #1
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_NUMBER_INDEX] = 0x00;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3302      	adds	r3, #2
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
    p_data[PACKET_CNUMBER_INDEX] = 0xff;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3303      	adds	r3, #3
 8006c24:	22ff      	movs	r2, #255	@ 0xff
 8006c26:	701a      	strb	r2, [r3, #0]

    /* Filename written */
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2c:	e00b      	b.n	8006c46 <prepare_initial_packet+0x4a>
        p_data[i + PACKET_DATA_INDEX] = p_file_name[i];
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	441a      	add	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	3304      	adds	r3, #4
 8006c38:	68f9      	ldr	r1, [r7, #12]
 8006c3a:	440b      	add	r3, r1
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	701a      	strb	r2, [r3, #0]
    for (i = 0; (p_file_name[i] != '\0') && (i < FILE_NAME_LENGTH); i++) {
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	3301      	adds	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	4413      	add	r3, r2
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <prepare_initial_packet+0x5c>
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c56:	d9ea      	bls.n	8006c2e <prepare_initial_packet+0x32>
    }
    p_data[i + PACKET_DATA_INDEX] = 0x00;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]

    /* File size written */
    int_to_str(aString, length);  // Assuming `int_to_str` is your function
 8006c64:	f107 0314 	add.w	r3, r7, #20
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7f9 fc80 	bl	8000570 <int_to_str>
    i += 1 + PACKET_DATA_INDEX;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	3305      	adds	r3, #5
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
    while (aString[j] != '\0') {
 8006c76:	e00c      	b.n	8006c92 <prepare_initial_packet+0x96>
        p_data[i++] = aString[j++];
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	623a      	str	r2, [r7, #32]
 8006c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c80:	1c51      	adds	r1, r2, #1
 8006c82:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c84:	68f9      	ldr	r1, [r7, #12]
 8006c86:	440a      	add	r2, r1
 8006c88:	3328      	adds	r3, #40	@ 0x28
 8006c8a:	443b      	add	r3, r7
 8006c8c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006c90:	7013      	strb	r3, [r2, #0]
    while (aString[j] != '\0') {
 8006c92:	f107 0214 	add.w	r2, r7, #20
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	4413      	add	r3, r2
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1eb      	bne.n	8006c78 <prepare_initial_packet+0x7c>
    }

    /* Padding with zeros */
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	623b      	str	r3, [r7, #32]
 8006ca4:	e007      	b.n	8006cb6 <prepare_initial_packet+0xba>
        p_data[j] = 0;
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	4413      	add	r3, r2
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
    for (j = i; j < PACKET_SIZE + PACKET_DATA_INDEX; j++) {
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	623b      	str	r3, [r7, #32]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b83      	cmp	r3, #131	@ 0x83
 8006cba:	d9f4      	bls.n	8006ca6 <prepare_initial_packet+0xaa>
    }
}
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
 8006cc0:	3728      	adds	r7, #40	@ 0x28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <prepare_packet>:
  * @param  pkt_nr: number of the packet
  * @param  size_blk: length of the block to be sent in bytes
  * @retval None
  */

void prepare_packet(uint8_t* p_source, uint8_t* p_packet, uint8_t pktNr, uint32_t sizeBlk) {
 8006cc6:	b480      	push	{r7}
 8006cc8:	b089      	sub	sp, #36	@ 0x24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	71fb      	strb	r3, [r7, #7]
    uint8_t* p_record;  // Pointer: p_ prefix + snake_case
    uint32_t i, size, packetSize;  // camelCase for non-pointers

    /* Determine packet size (1K or normal) */
    packetSize = (sizeBlk >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cdc:	d302      	bcc.n	8006ce4 <prepare_packet+0x1e>
 8006cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ce2:	e000      	b.n	8006ce6 <prepare_packet+0x20>
 8006ce4:	2380      	movs	r3, #128	@ 0x80
 8006ce6:	617b      	str	r3, [r7, #20]
    size = (sizeBlk < packetSize) ? sizeBlk : packetSize;
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bf28      	it	cs
 8006cf0:	4613      	movcs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

    /* Set packet header */
    p_packet[PACKET_START_INDEX] = (packetSize == PACKET_1K_SIZE) ? STX : SOH;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfa:	d101      	bne.n	8006d00 <prepare_packet+0x3a>
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	e000      	b.n	8006d02 <prepare_packet+0x3c>
 8006d00:	2201      	movs	r2, #1
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3301      	adds	r3, #1
 8006d06:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_NUMBER_INDEX] = pktNr;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	79fa      	ldrb	r2, [r7, #7]
 8006d0e:	701a      	strb	r2, [r3, #0]
    p_packet[PACKET_CNUMBER_INDEX] = ~pktNr;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3303      	adds	r3, #3
 8006d14:	79fa      	ldrb	r2, [r7, #7]
 8006d16:	43d2      	mvns	r2, r2
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]

    /* Copy data into packet */
    p_record = p_source;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	61fb      	str	r3, [r7, #28]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 8006d20:	2304      	movs	r3, #4
 8006d22:	61bb      	str	r3, [r7, #24]
 8006d24:	e00a      	b.n	8006d3c <prepare_packet+0x76>
        p_packet[i] = *p_record++;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	68b9      	ldr	r1, [r7, #8]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	440a      	add	r2, r1
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	7013      	strb	r3, [r2, #0]
    for (i = PACKET_DATA_INDEX; i < size + PACKET_DATA_INDEX; i++) {
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d3ef      	bcc.n	8006d26 <prepare_packet+0x60>
    }

    /* Pad remaining space with EOF (0x1A) */
    if (size <= packetSize) {
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d810      	bhi.n	8006d70 <prepare_packet+0xaa>
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3304      	adds	r3, #4
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	e007      	b.n	8006d66 <prepare_packet+0xa0>
            p_packet[i] = 0x1A;  // EOF marker
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	221a      	movs	r2, #26
 8006d5e:	701a      	strb	r2, [r3, #0]
        for (i = size + PACKET_DATA_INDEX; i < packetSize + PACKET_DATA_INDEX; i++) {
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	3301      	adds	r3, #1
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d3f2      	bcc.n	8006d56 <prepare_packet+0x90>
        }
    }
}
 8006d70:	bf00      	nop
 8006d72:	3724      	adds	r7, #36	@ 0x24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <update_crc16>:
  * @brief  Update CRC16 for input byte
  * @param  crc_in input value
  * @param  input byte
  * @retval None
  */
uint16_t update_crc16(uint16_t crcIn, uint8_t byte) {
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	460a      	mov	r2, r1
 8006d86:	80fb      	strh	r3, [r7, #6]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	717b      	strb	r3, [r7, #5]
    uint32_t crc = crcIn;
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	60fb      	str	r3, [r7, #12]
    uint32_t in = byte | 0x100;
 8006d90:	797b      	ldrb	r3, [r7, #5]
 8006d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d96:	60bb      	str	r3, [r7, #8]

    do {
        crc <<= 1;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
        in <<= 1;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	60bb      	str	r3, [r7, #8]
        if (in & 0x100)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <update_crc16+0x38>
            ++crc;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
        if (crc & 0x10000)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <update_crc16+0x4e>
            crc ^= 0x1021;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8006dc4:	f083 0301 	eor.w	r3, r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]
    } while (!(in & 0x10000));
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0e1      	beq.n	8006d98 <update_crc16+0x1c>

    return crc & 0xFFFFu;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	b29b      	uxth	r3, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <calc_crc16>:
  * @brief  Cal CRC16 for YModem Packet
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t calc_crc16(const uint8_t* p_data, uint32_t size) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	uint32_t crc = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
	const uint8_t* p_data_end = p_data + size;
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	4413      	add	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]

	while (p_data < p_data_end)
 8006dfa:	e00a      	b.n	8006e12 <calc_crc16+0x2e>
		crc = update_crc16(crc, *p_data++);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	b298      	uxth	r0, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f7ff ffb7 	bl	8006d7c <update_crc16>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	60fb      	str	r3, [r7, #12]
	while (p_data < p_data_end)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d3f0      	bcc.n	8006dfc <calc_crc16+0x18>

	crc = update_crc16(crc, 0);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff ffab 	bl	8006d7c <update_crc16>
 8006e26:	4603      	mov	r3, r0
 8006e28:	60fb      	str	r3, [r7, #12]
	crc = update_crc16(crc, 0);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff ffa3 	bl	8006d7c <update_crc16>
 8006e36:	4603      	mov	r3, r0
 8006e38:	60fb      	str	r3, [r7, #12]

	return crc & 0xFFFFu;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	b29b      	uxth	r3, r3
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <ymodem_receive>:
/**
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef ymodem_receive(uint32_t* p_size) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b09a      	sub	sp, #104	@ 0x68
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	 	 	 HAL_FLASH_Unlock();
 8006e50:	f000 fe52 	bl	8007af8 <HAL_FLASH_Unlock>
			 HAL_FLASH_OB_Unlock();
 8006e54:	f000 fe82 	bl	8007b5c <HAL_FLASH_OB_Unlock>
			  FLASH_OBProgramInitTypeDef config;
			  HAL_FLASHEx_OBGetConfig(&config);
 8006e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f8d9 	bl	8008014 <HAL_FLASHEx_OBGetConfig>
			 config.OptionType = OPTIONBYTE_WRP;
 8006e62:	2301      	movs	r3, #1
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
			 config.WRPState= OB_WRPSTATE_DISABLE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
			 config.RDPLevel = OB_RDP_LEVEL0;
 8006e6a:	23aa      	movs	r3, #170	@ 0xaa
 8006e6c:	637b      	str	r3, [r7, #52]	@ 0x34
			  config.WRPSector = (OB_WRP_SECTOR_5 | OB_WRP_SECTOR_6 | OB_WRP_SECTOR_7);
 8006e6e:	23e0      	movs	r3, #224	@ 0xe0
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  if (HAL_FLASHEx_OBProgram(&config) == HAL_OK)
 8006e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f85e 	bl	8007f38 <HAL_FLASHEx_OBProgram>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <ymodem_receive+0x3e>
			  {
			      HAL_FLASH_OB_Launch(); // This will cause a reset!
 8006e82:	f000 fe97 	bl	8007bb4 <HAL_FLASH_OB_Launch>
			  }

			  HAL_FLASH_OB_Lock();
 8006e86:	f000 fe85 	bl	8007b94 <HAL_FLASH_OB_Lock>
			  HAL_FLASH_Lock();
 8006e8a:	f000 fe57 	bl	8007b3c <HAL_FLASH_Lock>

    uint32_t flashDestination, ramSource, fileSize;
    uint32_t i, packetLength, sessionDone = 0, fileDone, sessionBegin = 0, errors = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e92:	2300      	movs	r3, #0
 8006e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e96:	2300      	movs	r3, #0
 8006e98:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t* p_filePtr;
    uint8_t p_fileSize[FILE_SIZE_LENGTH], tmp, packetsReceived;
    COM_StatusTypeDef result = COM_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

    flashDestination = APPLICATION_ADDRESS;
 8006ea0:	4bad      	ldr	r3, [pc, #692]	@ (8007158 <ymodem_receive+0x310>)
 8006ea2:	667b      	str	r3, [r7, #100]	@ 0x64

    while ((sessionDone == 0) && (result == COM_OK)) {
 8006ea4:	e125      	b.n	80070f2 <ymodem_receive+0x2aa>
        packetsReceived = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        fileDone = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	65bb      	str	r3, [r7, #88]	@ 0x58
        while ((fileDone == 0) && (result == COM_OK)) {
 8006eb0:	e117      	b.n	80070e2 <ymodem_receive+0x29a>
            switch (receive_packet(aPacketData, &packetLength, DOWNLOAD_TIMEOUT)) {
 8006eb2:	f107 031c 	add.w	r3, r7, #28
 8006eb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eba:	4619      	mov	r1, r3
 8006ebc:	48a7      	ldr	r0, [pc, #668]	@ (800715c <ymodem_receive+0x314>)
 8006ebe:	f7ff fdcf 	bl	8006a60 <receive_packet>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <ymodem_receive+0x88>
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	f000 80e9 	beq.w	80070a0 <ymodem_receive+0x258>
 8006ece:	e0f1      	b.n	80070b4 <ymodem_receive+0x26c>
                case HAL_OK:
                    errors = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	653b      	str	r3, [r7, #80]	@ 0x50
                    switch (packetLength) {
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d008      	beq.n	8006eec <ymodem_receive+0xa4>
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d10c      	bne.n	8006ef8 <ymodem_receive+0xb0>
                        case 2:
                            serial_put_byte(ACK);
 8006ede:	2006      	movs	r0, #6
 8006ee0:	f7f9 fca4 	bl	800082c <serial_put_byte>
                            result = COM_ABORT;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                            break;
 8006eea:	e0d8      	b.n	800709e <ymodem_receive+0x256>

                        case 0:
                            serial_put_byte(ACK);
 8006eec:	2006      	movs	r0, #6
 8006eee:	f7f9 fc9d 	bl	800082c <serial_put_byte>
                            fileDone = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
                            break;
 8006ef6:	e0d2      	b.n	800709e <ymodem_receive+0x256>

                        default:
                            if (aPacketData[PACKET_NUMBER_INDEX] != (packetsReceived & 0xffU)) {
 8006ef8:	4b98      	ldr	r3, [pc, #608]	@ (800715c <ymodem_receive+0x314>)
 8006efa:	789b      	ldrb	r3, [r3, #2]
 8006efc:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d003      	beq.n	8006f0c <ymodem_receive+0xc4>
                                serial_put_byte(NAK);
 8006f04:	2015      	movs	r0, #21
 8006f06:	f7f9 fc91 	bl	800082c <serial_put_byte>
                                	}
                                }
                                packetsReceived++;
                                sessionBegin = 1;
                            }
                            break;
 8006f0a:	e0c7      	b.n	800709c <ymodem_receive+0x254>
                                if (packetsReceived == 0) {
 8006f0c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d17c      	bne.n	800700e <ymodem_receive+0x1c6>
                                    if (aPacketData[PACKET_DATA_INDEX] != 0) {
 8006f14:	4b91      	ldr	r3, [pc, #580]	@ (800715c <ymodem_receive+0x314>)
 8006f16:	791b      	ldrb	r3, [r3, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d070      	beq.n	8006ffe <ymodem_receive+0x1b6>
                                        p_filePtr = aPacketData + PACKET_DATA_INDEX;
 8006f1c:	4b90      	ldr	r3, [pc, #576]	@ (8007160 <ymodem_receive+0x318>)
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        i = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	663b      	str	r3, [r7, #96]	@ 0x60
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 8006f24:	e008      	b.n	8006f38 <ymodem_receive+0xf0>
                                            aFileName[i++] = *p_filePtr++;
 8006f26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f28:	1c53      	adds	r3, r2, #1
 8006f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f2e:	1c59      	adds	r1, r3, #1
 8006f30:	6639      	str	r1, [r7, #96]	@ 0x60
 8006f32:	7811      	ldrb	r1, [r2, #0]
 8006f34:	4a8b      	ldr	r2, [pc, #556]	@ (8007164 <ymodem_receive+0x31c>)
 8006f36:	54d1      	strb	r1, [r2, r3]
                                        while ((*p_filePtr != 0) && (i < FILE_NAME_LENGTH)) {
 8006f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <ymodem_receive+0xfe>
 8006f40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f44:	d9ef      	bls.n	8006f26 <ymodem_receive+0xde>
                                        aFileName[i++] = '\0';
 8006f46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	663a      	str	r2, [r7, #96]	@ 0x60
 8006f4c:	4a85      	ldr	r2, [pc, #532]	@ (8007164 <ymodem_receive+0x31c>)
 8006f4e:	2100      	movs	r1, #0
 8006f50:	54d1      	strb	r1, [r2, r3]
                                        i = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	663b      	str	r3, [r7, #96]	@ 0x60
                                        p_filePtr++;
 8006f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f58:	3301      	adds	r3, #1
 8006f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8006f5c:	e00a      	b.n	8006f74 <ymodem_receive+0x12c>
                                            p_fileSize[i++] = *p_filePtr++;
 8006f5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f60:	1c53      	adds	r3, r2, #1
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f66:	1c59      	adds	r1, r3, #1
 8006f68:	6639      	str	r1, [r7, #96]	@ 0x60
 8006f6a:	7812      	ldrb	r2, [r2, #0]
 8006f6c:	3368      	adds	r3, #104	@ 0x68
 8006f6e:	443b      	add	r3, r7
 8006f70:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        while ((*p_filePtr != ' ') && (i < FILE_SIZE_LENGTH)) {
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d002      	beq.n	8006f82 <ymodem_receive+0x13a>
 8006f7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f7e:	2b0f      	cmp	r3, #15
 8006f80:	d9ed      	bls.n	8006f5e <ymodem_receive+0x116>
                                        p_fileSize[i++] = '\0';
 8006f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	663a      	str	r2, [r7, #96]	@ 0x60
 8006f88:	3368      	adds	r3, #104	@ 0x68
 8006f8a:	443b      	add	r3, r7
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f803 2c5c 	strb.w	r2, [r3, #-92]
                                        str_to_int(p_fileSize, &fileSize);
 8006f92:	f107 0220 	add.w	r2, r7, #32
 8006f96:	f107 030c 	add.w	r3, r7, #12
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7f9 fb35 	bl	800060c <str_to_int>
                                        if (fileSize > (USER_FLASH_SIZE + 1)) {
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	4a70      	ldr	r2, [pc, #448]	@ (8007168 <ymodem_receive+0x320>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d915      	bls.n	8006fd6 <ymodem_receive+0x18e>
                                            tmp = CA;
 8006faa:	2318      	movs	r3, #24
 8006fac:	72fb      	strb	r3, [r7, #11]
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8006fae:	f107 010b 	add.w	r1, r7, #11
 8006fb2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	486c      	ldr	r0, [pc, #432]	@ (800716c <ymodem_receive+0x324>)
 8006fba:	f005 f9cb 	bl	800c354 <HAL_UART_Transmit>
                                            HAL_UART_Transmit(&UartHandle, &tmp, 1, NAK_TIMEOUT);
 8006fbe:	f107 010b 	add.w	r1, r7, #11
 8006fc2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	4868      	ldr	r0, [pc, #416]	@ (800716c <ymodem_receive+0x324>)
 8006fca:	f005 f9c3 	bl	800c354 <HAL_UART_Transmit>
                                            result = COM_LIMIT;
 8006fce:	2305      	movs	r3, #5
 8006fd0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                                            break;
 8006fd4:	e063      	b.n	800709e <ymodem_receive+0x256>
                                        FLASH_IF_disable_all_protection();
 8006fd6:	f7f9 fce7 	bl	80009a8 <FLASH_IF_disable_all_protection>
                                        if (FLASH_IF_erase(APPLICATION_ADDRESS) != FLASHIF_OK) {
 8006fda:	485f      	ldr	r0, [pc, #380]	@ (8007158 <ymodem_receive+0x310>)
 8006fdc:	f7f9 fc9a 	bl	8000914 <FLASH_IF_erase>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <ymodem_receive+0x1a2>
                                            return COM_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0d4      	b.n	8007194 <ymodem_receive+0x34c>
                                        *p_size = fileSize;
 8006fea:	6a3a      	ldr	r2, [r7, #32]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
                                        serial_put_byte(ACK);
 8006ff0:	2006      	movs	r0, #6
 8006ff2:	f7f9 fc1b 	bl	800082c <serial_put_byte>
                                        serial_put_byte(CRC16);
 8006ff6:	2043      	movs	r0, #67	@ 0x43
 8006ff8:	f7f9 fc18 	bl	800082c <serial_put_byte>
 8006ffc:	e047      	b.n	800708e <ymodem_receive+0x246>
                                        serial_put_byte(ACK);
 8006ffe:	2006      	movs	r0, #6
 8007000:	f7f9 fc14 	bl	800082c <serial_put_byte>
                                        fileDone = 1;
 8007004:	2301      	movs	r3, #1
 8007006:	65bb      	str	r3, [r7, #88]	@ 0x58
                                        sessionDone = 1;
 8007008:	2301      	movs	r3, #1
 800700a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                        break;
 800700c:	e047      	b.n	800709e <ymodem_receive+0x256>
                                	ramSource = (uint32_t)&aPacketData[PACKET_DATA_INDEX];
 800700e:	4b54      	ldr	r3, [pc, #336]	@ (8007160 <ymodem_receive+0x318>)
 8007010:	647b      	str	r3, [r7, #68]	@ 0x44
                                	if (ramSource == 0 || ramSource < 0x20000000 || ramSource > 0x2004FFFF) {
 8007012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <ymodem_receive+0x1e0>
 8007018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800701a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701e:	d303      	bcc.n	8007028 <ymodem_receive+0x1e0>
 8007020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007022:	4a53      	ldr	r2, [pc, #332]	@ (8007170 <ymodem_receive+0x328>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d909      	bls.n	800703c <ymodem_receive+0x1f4>
                                	    serial_put_byte(CA);
 8007028:	2018      	movs	r0, #24
 800702a:	f7f9 fbff 	bl	800082c <serial_put_byte>
                                	    serial_put_byte(CA);
 800702e:	2018      	movs	r0, #24
 8007030:	f7f9 fbfc 	bl	800082c <serial_put_byte>
                                	    result = FLASHIF_WRITING_ERROR;
 8007034:	2303      	movs	r3, #3
 8007036:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800703a:	e028      	b.n	800708e <ymodem_receive+0x246>
                                	    uint32_t stt = FLASH_IF_write(flashDestination, (uint32_t*)ramSource, packetLength / 4);
 800703c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	089b      	lsrs	r3, r3, #2
 8007042:	461a      	mov	r2, r3
 8007044:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007046:	f7f9 fce1 	bl	8000a0c <FLASH_IF_write>
 800704a:	6438      	str	r0, [r7, #64]	@ 0x40
                                	    if (stt == FLASHIF_WRITING_ERROR) {
 800704c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800704e:	2b03      	cmp	r3, #3
 8007050:	d109      	bne.n	8007066 <ymodem_receive+0x21e>
                                	        serial_put_byte(CA);
 8007052:	2018      	movs	r0, #24
 8007054:	f7f9 fbea 	bl	800082c <serial_put_byte>
                                	        serial_put_byte(CA);
 8007058:	2018      	movs	r0, #24
 800705a:	f7f9 fbe7 	bl	800082c <serial_put_byte>
                                	        result = FLASHIF_WRITING_ERROR;
 800705e:	2303      	movs	r3, #3
 8007060:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8007064:	e013      	b.n	800708e <ymodem_receive+0x246>
                                	    else if (stt == FLASHIF_WRITINGCTRL_ERROR) {
 8007066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007068:	2b02      	cmp	r3, #2
 800706a:	d109      	bne.n	8007080 <ymodem_receive+0x238>
                                	        serial_put_byte(CA);
 800706c:	2018      	movs	r0, #24
 800706e:	f7f9 fbdd 	bl	800082c <serial_put_byte>
                                	        serial_put_byte(CA);
 8007072:	2018      	movs	r0, #24
 8007074:	f7f9 fbda 	bl	800082c <serial_put_byte>
                                	        result = FLASHIF_WRITINGCTRL_ERROR;
 8007078:	2302      	movs	r3, #2
 800707a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800707e:	e006      	b.n	800708e <ymodem_receive+0x246>
                                	        flashDestination += packetLength;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007084:	4413      	add	r3, r2
 8007086:	667b      	str	r3, [r7, #100]	@ 0x64
                                	        serial_put_byte(ACK);
 8007088:	2006      	movs	r0, #6
 800708a:	f7f9 fbcf 	bl	800082c <serial_put_byte>
                                packetsReceived++;
 800708e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007092:	3301      	adds	r3, #1
 8007094:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
                                sessionBegin = 1;
 8007098:	2301      	movs	r3, #1
 800709a:	657b      	str	r3, [r7, #84]	@ 0x54
                            break;
 800709c:	bf00      	nop
                    }
                    break;
 800709e:	e020      	b.n	80070e2 <ymodem_receive+0x29a>

                case HAL_BUSY:

                    serial_put_byte(CA);
 80070a0:	2018      	movs	r0, #24
 80070a2:	f7f9 fbc3 	bl	800082c <serial_put_byte>
                    serial_put_byte(CA);
 80070a6:	2018      	movs	r0, #24
 80070a8:	f7f9 fbc0 	bl	800082c <serial_put_byte>
                    result = COM_ABORT;
 80070ac:	2302      	movs	r3, #2
 80070ae:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    break;
 80070b2:	e016      	b.n	80070e2 <ymodem_receive+0x29a>

                default:
                    if (sessionBegin) {
 80070b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <ymodem_receive+0x278>
                        errors++;
 80070ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070bc:	3301      	adds	r3, #1
 80070be:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                    if (errors > MAX_ERRORS) {
 80070c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	d909      	bls.n	80070da <ymodem_receive+0x292>

                        serial_put_byte(CA);
 80070c6:	2018      	movs	r0, #24
 80070c8:	f7f9 fbb0 	bl	800082c <serial_put_byte>
                        serial_put_byte(CA);
 80070cc:	2018      	movs	r0, #24
 80070ce:	f7f9 fbad 	bl	800082c <serial_put_byte>
                        result = COM_ABORT;
 80070d2:	2302      	movs	r3, #2
 80070d4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
                    }
                    else {
                        serial_put_byte(CRC16);
                    }
                    break;
 80070d8:	e002      	b.n	80070e0 <ymodem_receive+0x298>
                        serial_put_byte(CRC16);
 80070da:	2043      	movs	r0, #67	@ 0x43
 80070dc:	f7f9 fba6 	bl	800082c <serial_put_byte>
                    break;
 80070e0:	bf00      	nop
        while ((fileDone == 0) && (result == COM_OK)) {
 80070e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <ymodem_receive+0x2aa>
 80070e8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f43f aee0 	beq.w	8006eb2 <ymodem_receive+0x6a>
    while ((sessionDone == 0) && (result == COM_OK)) {
 80070f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <ymodem_receive+0x2ba>
 80070f8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f43f aed2 	beq.w	8006ea6 <ymodem_receive+0x5e>
            }
        }
    }

    /* Final status report */
    if (result == COM_OK) {
 8007102:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <ymodem_receive+0x2da>
        serial_put_string((uint8_t*)"\r\nYMODEM Success: ");
 800710a:	481a      	ldr	r0, [pc, #104]	@ (8007174 <ymodem_receive+0x32c>)
 800710c:	f7f9 fb72 	bl	80007f4 <serial_put_string>
        serial_put_string(aFileName);
 8007110:	4814      	ldr	r0, [pc, #80]	@ (8007164 <ymodem_receive+0x31c>)
 8007112:	f7f9 fb6f 	bl	80007f4 <serial_put_string>

        serial_put_string((uint8_t*)p_fileSize);
 8007116:	f107 030c 	add.w	r3, r7, #12
 800711a:	4618      	mov	r0, r3
 800711c:	f7f9 fb6a 	bl	80007f4 <serial_put_string>
 8007120:	e036      	b.n	8007190 <ymodem_receive+0x348>
    }
    else {
        serial_put_string((uint8_t*)"\r\nYMODEM Failed: ");
 8007122:	4815      	ldr	r0, [pc, #84]	@ (8007178 <ymodem_receive+0x330>)
 8007124:	f7f9 fb66 	bl	80007f4 <serial_put_string>
        switch(result) {
 8007128:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800712c:	2b05      	cmp	r3, #5
 800712e:	d006      	beq.n	800713e <ymodem_receive+0x2f6>
 8007130:	2b05      	cmp	r3, #5
 8007132:	dc29      	bgt.n	8007188 <ymodem_receive+0x340>
 8007134:	2b02      	cmp	r3, #2
 8007136:	d00a      	beq.n	800714e <ymodem_receive+0x306>
 8007138:	2b04      	cmp	r3, #4
 800713a:	d004      	beq.n	8007146 <ymodem_receive+0x2fe>
 800713c:	e024      	b.n	8007188 <ymodem_receive+0x340>
            case COM_LIMIT:
                serial_put_string((uint8_t*)"File too large");
 800713e:	480f      	ldr	r0, [pc, #60]	@ (800717c <ymodem_receive+0x334>)
 8007140:	f7f9 fb58 	bl	80007f4 <serial_put_string>
                break;
 8007144:	e024      	b.n	8007190 <ymodem_receive+0x348>
            case COM_DATA:
                serial_put_string((uint8_t*)"Flash write error");
 8007146:	480e      	ldr	r0, [pc, #56]	@ (8007180 <ymodem_receive+0x338>)
 8007148:	f7f9 fb54 	bl	80007f4 <serial_put_string>
                break;
 800714c:	e020      	b.n	8007190 <ymodem_receive+0x348>

            case COM_ABORT:
                serial_put_string((uint8_t*)"Transfer aborted");
 800714e:	480d      	ldr	r0, [pc, #52]	@ (8007184 <ymodem_receive+0x33c>)
 8007150:	f7f9 fb50 	bl	80007f4 <serial_put_string>
                break;
 8007154:	e01c      	b.n	8007190 <ymodem_receive+0x348>
 8007156:	bf00      	nop
 8007158:	08020000 	.word	0x08020000
 800715c:	20000e18 	.word	0x20000e18
 8007160:	20000e1c 	.word	0x20000e1c
 8007164:	200006d0 	.word	0x200006d0
 8007168:	00060001 	.word	0x00060001
 800716c:	20000678 	.word	0x20000678
 8007170:	2004ffff 	.word	0x2004ffff
 8007174:	0800efa0 	.word	0x0800efa0
 8007178:	0800efb4 	.word	0x0800efb4
 800717c:	0800efc8 	.word	0x0800efc8
 8007180:	0800efd8 	.word	0x0800efd8
 8007184:	0800efec 	.word	0x0800efec
            default:
                serial_put_string((uint8_t*)"Unknown error");\
 8007188:	4804      	ldr	r0, [pc, #16]	@ (800719c <ymodem_receive+0x354>)
 800718a:	f7f9 fb33 	bl	80007f4 <serial_put_string>
                break;
 800718e:	bf00      	nop
        }
    }

    return result;
 8007190:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
}
 8007194:	4618      	mov	r0, r3
 8007196:	3768      	adds	r7, #104	@ 0x68
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	0800f000 	.word	0x0800f000

080071a0 <ymodem_transmit>:
  * @param  p_buff: Address of the first byte
  * @param  p_file_name: Name of the file sent
  * @param  file_size: Size of the transmission
  * @retval COM_StatusTypeDef result of the communication
  */
COM_StatusTypeDef ymodem_transmit(uint8_t* p_buf, const uint8_t* p_file_name, uint32_t file_size) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	@ 0x38
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
    uint32_t errors = 0, ackRecpt = 0, size = 0, pktSize;
 80071ac:	2300      	movs	r3, #0
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b0:	2300      	movs	r3, #0
 80071b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071b4:	2300      	movs	r3, #0
 80071b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t *p_buf_int;
    COM_StatusTypeDef result = COM_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t blkNumber = 1;
 80071be:	2301      	movs	r3, #1
 80071c0:	623b      	str	r3, [r7, #32]
#else
    uint8_t tempChkSum;
#endif

    /* Prepare first block - header */
    prepare_initial_packet(aPacketData, p_file_name, file_size);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	4899      	ldr	r0, [pc, #612]	@ (800742c <ymodem_transmit+0x28c>)
 80071c8:	f7ff fd18 	bl	8006bfc <prepare_initial_packet>

    while ((!ackRecpt) && (result == COM_OK)) {
 80071cc:	e054      	b.n	8007278 <ymodem_transmit+0xd8>
        /* Send Packet */
        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80071ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80071d2:	2283      	movs	r2, #131	@ 0x83
 80071d4:	4996      	ldr	r1, [pc, #600]	@ (8007430 <ymodem_transmit+0x290>)
 80071d6:	4897      	ldr	r0, [pc, #604]	@ (8007434 <ymodem_transmit+0x294>)
 80071d8:	f005 f8bc 	bl	800c354 <HAL_UART_Transmit>

        /* Send CRC or Checksum */
#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 80071dc:	2280      	movs	r2, #128	@ 0x80
 80071de:	4996      	ldr	r1, [pc, #600]	@ (8007438 <ymodem_transmit+0x298>)
 80071e0:	4896      	ldr	r0, [pc, #600]	@ (800743c <ymodem_transmit+0x29c>)
 80071e2:	f000 fb64 	bl	80078ae <HAL_CRC_Calculate>
 80071e6:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7f9 fb1c 	bl	800082c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7f9 fb17 	bl	800082c <serial_put_byte>
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        /* Wait for response */
        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 80071fe:	f107 0110 	add.w	r1, r7, #16
 8007202:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007206:	2201      	movs	r2, #1
 8007208:	488a      	ldr	r0, [pc, #552]	@ (8007434 <ymodem_transmit+0x294>)
 800720a:	f005 f92e 	bl	800c46a <HAL_UART_Receive>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d128      	bne.n	8007266 <ymodem_transmit+0xc6>
            if (aRxCtrl[0] == ACK) {
 8007214:	7c3b      	ldrb	r3, [r7, #16]
 8007216:	2b06      	cmp	r3, #6
 8007218:	d10a      	bne.n	8007230 <ymodem_transmit+0x90>
                ackRecpt = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	633b      	str	r3, [r7, #48]	@ 0x30
                HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT); // Wait for 'C'
 800721e:	f107 0110 	add.w	r1, r7, #16
 8007222:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007226:	2201      	movs	r2, #1
 8007228:	4882      	ldr	r0, [pc, #520]	@ (8007434 <ymodem_transmit+0x294>)
 800722a:	f005 f91e 	bl	800c46a <HAL_UART_Receive>
 800722e:	e01d      	b.n	800726c <ymodem_transmit+0xcc>
            }
            else if (aRxCtrl[0] == CA) {
 8007230:	7c3b      	ldrb	r3, [r7, #16]
 8007232:	2b18      	cmp	r3, #24
 8007234:	d11a      	bne.n	800726c <ymodem_transmit+0xcc>
                if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 8007236:	f107 0110 	add.w	r1, r7, #16
 800723a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800723e:	2201      	movs	r2, #1
 8007240:	487c      	ldr	r0, [pc, #496]	@ (8007434 <ymodem_transmit+0x294>)
 8007242:	f005 f912 	bl	800c46a <HAL_UART_Receive>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10f      	bne.n	800726c <ymodem_transmit+0xcc>
 800724c:	7c3b      	ldrb	r3, [r7, #16]
 800724e:	2b18      	cmp	r3, #24
 8007250:	d10c      	bne.n	800726c <ymodem_transmit+0xcc>
                    HAL_Delay(2);
 8007252:	2002      	movs	r0, #2
 8007254:	f000 f9da 	bl	800760c <HAL_Delay>
                    __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 8007258:	4b76      	ldr	r3, [pc, #472]	@ (8007434 <ymodem_transmit+0x294>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
                    result = COM_ABORT;
 800725e:	2302      	movs	r3, #2
 8007260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007264:	e002      	b.n	800726c <ymodem_transmit+0xcc>
                }
            }
        }
        else {
            errors++;
 8007266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007268:	3301      	adds	r3, #1
 800726a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        if (errors >= MAX_ERRORS) {
 800726c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726e:	2b04      	cmp	r3, #4
 8007270:	d902      	bls.n	8007278 <ymodem_transmit+0xd8>
            result = COM_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((!ackRecpt) && (result == COM_OK)) {
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <ymodem_transmit+0xe6>
 800727e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0a3      	beq.n	80071ce <ymodem_transmit+0x2e>
        }
    }

    p_buf_int = p_buf;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	62bb      	str	r3, [r7, #40]	@ 0x28
    size = file_size;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Send data packets */
    while ((size) && (result == COM_OK)) {
 800728e:	e06e      	b.n	800736e <ymodem_transmit+0x1ce>
        prepare_packet(p_buf_int, aPacketData, blkNumber, size);
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	4965      	ldr	r1, [pc, #404]	@ (800742c <ymodem_transmit+0x28c>)
 8007298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800729a:	f7ff fd14 	bl	8006cc6 <prepare_packet>
        ackRecpt = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34

        while ((!ackRecpt) && (result == COM_OK)) {
 80072a6:	e05b      	b.n	8007360 <ymodem_transmit+0x1c0>
            /* Determine packet size */
            pktSize = (size >= PACKET_1K_SIZE) ? PACKET_1K_SIZE : PACKET_SIZE;
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ae:	d302      	bcc.n	80072b6 <ymodem_transmit+0x116>
 80072b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072b4:	e000      	b.n	80072b8 <ymodem_transmit+0x118>
 80072b6:	2380      	movs	r3, #128	@ 0x80
 80072b8:	617b      	str	r3, [r7, #20]

            /* Send packet */
            HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], pktSize + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	3303      	adds	r3, #3
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80072c6:	495a      	ldr	r1, [pc, #360]	@ (8007430 <ymodem_transmit+0x290>)
 80072c8:	485a      	ldr	r0, [pc, #360]	@ (8007434 <ymodem_transmit+0x294>)
 80072ca:	f005 f843 	bl	800c354 <HAL_UART_Transmit>

            /* Send CRC/Checksum */
#ifdef CRC16_F
            tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], pktSize);
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4959      	ldr	r1, [pc, #356]	@ (8007438 <ymodem_transmit+0x298>)
 80072d2:	485a      	ldr	r0, [pc, #360]	@ (800743c <ymodem_transmit+0x29c>)
 80072d4:	f000 faeb 	bl	80078ae <HAL_CRC_Calculate>
 80072d8:	61b8      	str	r0, [r7, #24]
            serial_put_byte(tempCrc >> 8);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7f9 faa3 	bl	800082c <serial_put_byte>
            serial_put_byte(tempCrc & 0xFF);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7f9 fa9e 	bl	800082c <serial_put_byte>
            tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], pktSize);
            Serial_PutByte(tempChkSum);
#endif

            /* Wait for ACK */
            if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == ACK)) {
 80072f0:	f107 0110 	add.w	r1, r7, #16
 80072f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80072f8:	2201      	movs	r2, #1
 80072fa:	484e      	ldr	r0, [pc, #312]	@ (8007434 <ymodem_transmit+0x294>)
 80072fc:	f005 f8b5 	bl	800c46a <HAL_UART_Receive>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d123      	bne.n	800734e <ymodem_transmit+0x1ae>
 8007306:	7c3b      	ldrb	r3, [r7, #16]
 8007308:	2b06      	cmp	r3, #6
 800730a:	d120      	bne.n	800734e <ymodem_transmit+0x1ae>
                ackRecpt = 1;
 800730c:	2301      	movs	r3, #1
 800730e:	633b      	str	r3, [r7, #48]	@ 0x30
                if (size > pktSize) {
 8007310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	429a      	cmp	r2, r3
 8007316:	d913      	bls.n	8007340 <ymodem_transmit+0x1a0>
                    p_buf_int += pktSize;
 8007318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	4413      	add	r3, r2
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size -= pktSize;
 8007320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if (blkNumber == (USER_FLASH_SIZE / PACKET_1K_SIZE)) {
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800732e:	d103      	bne.n	8007338 <ymodem_transmit+0x198>
                        result = COM_LIMIT;
 8007330:	2305      	movs	r3, #5
 8007332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if (size > pktSize) {
 8007336:	e00d      	b.n	8007354 <ymodem_transmit+0x1b4>
                    } else {
                        blkNumber++;
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	3301      	adds	r3, #1
 800733c:	623b      	str	r3, [r7, #32]
                if (size > pktSize) {
 800733e:	e009      	b.n	8007354 <ymodem_transmit+0x1b4>
                    }
                }
                else {
                    p_buf_int += pktSize;
 8007340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	4413      	add	r3, r2
 8007346:	62bb      	str	r3, [r7, #40]	@ 0x28
                    size = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                if (size > pktSize) {
 800734c:	e002      	b.n	8007354 <ymodem_transmit+0x1b4>
                }
            }
            else {
                errors++;
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	3301      	adds	r3, #1
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 8007354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007356:	2b04      	cmp	r3, #4
 8007358:	d902      	bls.n	8007360 <ymodem_transmit+0x1c0>
                result = COM_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <ymodem_transmit+0x1ce>
 8007366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800736a:	2b00      	cmp	r3, #0
 800736c:	d09c      	beq.n	80072a8 <ymodem_transmit+0x108>
    while ((size) && (result == COM_OK)) {
 800736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <ymodem_transmit+0x1dc>
 8007374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007378:	2b00      	cmp	r3, #0
 800737a:	d089      	beq.n	8007290 <ymodem_transmit+0xf0>
            }
        }
    }

    /* Send EOT */
    if (result == COM_OK) {
 800737c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007380:	2b00      	cmp	r3, #0
 8007382:	d143      	bne.n	800740c <ymodem_transmit+0x26c>
        ackRecpt = 0;
 8007384:	2300      	movs	r3, #0
 8007386:	633b      	str	r3, [r7, #48]	@ 0x30
        errors = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	637b      	str	r3, [r7, #52]	@ 0x34
        while ((!ackRecpt) && (result == COM_OK)) {
 800738c:	e037      	b.n	80073fe <ymodem_transmit+0x25e>
            serial_put_byte(EOT);
 800738e:	2004      	movs	r0, #4
 8007390:	f7f9 fa4c 	bl	800082c <serial_put_byte>

            if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 8007394:	f107 0110 	add.w	r1, r7, #16
 8007398:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800739c:	2201      	movs	r2, #1
 800739e:	4825      	ldr	r0, [pc, #148]	@ (8007434 <ymodem_transmit+0x294>)
 80073a0:	f005 f863 	bl	800c46a <HAL_UART_Receive>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d120      	bne.n	80073ec <ymodem_transmit+0x24c>
                if (aRxCtrl[0] == ACK) {
 80073aa:	7c3b      	ldrb	r3, [r7, #16]
 80073ac:	2b06      	cmp	r3, #6
 80073ae:	d102      	bne.n	80073b6 <ymodem_transmit+0x216>
                    ackRecpt = 1;
 80073b0:	2301      	movs	r3, #1
 80073b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b4:	e01d      	b.n	80073f2 <ymodem_transmit+0x252>
                }
                else if (aRxCtrl[0] == CA) {
 80073b6:	7c3b      	ldrb	r3, [r7, #16]
 80073b8:	2b18      	cmp	r3, #24
 80073ba:	d11a      	bne.n	80073f2 <ymodem_transmit+0x252>
                    if ((HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) && (aRxCtrl[0] == CA)) {
 80073bc:	f107 0110 	add.w	r1, r7, #16
 80073c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80073c4:	2201      	movs	r2, #1
 80073c6:	481b      	ldr	r0, [pc, #108]	@ (8007434 <ymodem_transmit+0x294>)
 80073c8:	f005 f84f 	bl	800c46a <HAL_UART_Receive>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10f      	bne.n	80073f2 <ymodem_transmit+0x252>
 80073d2:	7c3b      	ldrb	r3, [r7, #16]
 80073d4:	2b18      	cmp	r3, #24
 80073d6:	d10c      	bne.n	80073f2 <ymodem_transmit+0x252>
                        HAL_Delay(2);
 80073d8:	2002      	movs	r0, #2
 80073da:	f000 f917 	bl	800760c <HAL_Delay>
                        __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80073de:	4b15      	ldr	r3, [pc, #84]	@ (8007434 <ymodem_transmit+0x294>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
                        result = COM_ABORT;
 80073e4:	2302      	movs	r3, #2
 80073e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80073ea:	e002      	b.n	80073f2 <ymodem_transmit+0x252>
                    }
                }
            }
            else {
                errors++;
 80073ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ee:	3301      	adds	r3, #1
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            if (errors >= MAX_ERRORS) {
 80073f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d902      	bls.n	80073fe <ymodem_transmit+0x25e>
                result = COM_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        while ((!ackRecpt) && (result == COM_OK)) {
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <ymodem_transmit+0x26c>
 8007404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0c0      	beq.n	800738e <ymodem_transmit+0x1ee>
            }
        }
    }

    /* Send empty packet to close session */
    if (result == COM_OK) {
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007410:	2b00      	cmp	r3, #0
 8007412:	d14e      	bne.n	80074b2 <ymodem_transmit+0x312>
        aPacketData[PACKET_START_INDEX] = SOH;
 8007414:	4b05      	ldr	r3, [pc, #20]	@ (800742c <ymodem_transmit+0x28c>)
 8007416:	2201      	movs	r2, #1
 8007418:	705a      	strb	r2, [r3, #1]
        aPacketData[PACKET_NUMBER_INDEX] = 0;
 800741a:	4b04      	ldr	r3, [pc, #16]	@ (800742c <ymodem_transmit+0x28c>)
 800741c:	2200      	movs	r2, #0
 800741e:	709a      	strb	r2, [r3, #2]
        aPacketData[PACKET_CNUMBER_INDEX] = 0xFF;
 8007420:	4b02      	ldr	r3, [pc, #8]	@ (800742c <ymodem_transmit+0x28c>)
 8007422:	22ff      	movs	r2, #255	@ 0xff
 8007424:	70da      	strb	r2, [r3, #3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 8007426:	2304      	movs	r3, #4
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e010      	b.n	800744e <ymodem_transmit+0x2ae>
 800742c:	20000e18 	.word	0x20000e18
 8007430:	20000e19 	.word	0x20000e19
 8007434:	20000678 	.word	0x20000678
 8007438:	20000e1c 	.word	0x20000e1c
 800743c:	200005d4 	.word	0x200005d4
            aPacketData[i] = 0x00;
 8007440:	7ffb      	ldrb	r3, [r7, #31]
 8007442:	4a1f      	ldr	r2, [pc, #124]	@ (80074c0 <ymodem_transmit+0x320>)
 8007444:	2100      	movs	r1, #0
 8007446:	54d1      	strb	r1, [r2, r3]
        for (i = PACKET_DATA_INDEX; i < (PACKET_SIZE + PACKET_DATA_INDEX); i++) {
 8007448:	7ffb      	ldrb	r3, [r7, #31]
 800744a:	3301      	adds	r3, #1
 800744c:	77fb      	strb	r3, [r7, #31]
 800744e:	7ffb      	ldrb	r3, [r7, #31]
 8007450:	2b83      	cmp	r3, #131	@ 0x83
 8007452:	d9f5      	bls.n	8007440 <ymodem_transmit+0x2a0>
        }

        HAL_UART_Transmit(&UartHandle, &aPacketData[PACKET_START_INDEX], PACKET_SIZE + PACKET_HEADER_SIZE, NAK_TIMEOUT);
 8007454:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007458:	2283      	movs	r2, #131	@ 0x83
 800745a:	491a      	ldr	r1, [pc, #104]	@ (80074c4 <ymodem_transmit+0x324>)
 800745c:	481a      	ldr	r0, [pc, #104]	@ (80074c8 <ymodem_transmit+0x328>)
 800745e:	f004 ff79 	bl	800c354 <HAL_UART_Transmit>

#ifdef CRC16_F
        tempCrc = HAL_CRC_Calculate(&CrcHandle, (uint32_t*)&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
 8007462:	2280      	movs	r2, #128	@ 0x80
 8007464:	4919      	ldr	r1, [pc, #100]	@ (80074cc <ymodem_transmit+0x32c>)
 8007466:	481a      	ldr	r0, [pc, #104]	@ (80074d0 <ymodem_transmit+0x330>)
 8007468:	f000 fa21 	bl	80078ae <HAL_CRC_Calculate>
 800746c:	61b8      	str	r0, [r7, #24]
        serial_put_byte(tempCrc >> 8);
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	0a1b      	lsrs	r3, r3, #8
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4618      	mov	r0, r3
 8007476:	f7f9 f9d9 	bl	800082c <serial_put_byte>
        serial_put_byte(tempCrc & 0xFF);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	4618      	mov	r0, r3
 8007480:	f7f9 f9d4 	bl	800082c <serial_put_byte>
#else
        tempChkSum = calc_checksum(&aPacketData[PACKET_DATA_INDEX], PACKET_SIZE);
        Serial_PutByte(tempChkSum);
#endif

        if (HAL_UART_Receive(&UartHandle, &aRxCtrl[0], 1, NAK_TIMEOUT) == HAL_OK) {
 8007484:	f107 0110 	add.w	r1, r7, #16
 8007488:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800748c:	2201      	movs	r2, #1
 800748e:	480e      	ldr	r0, [pc, #56]	@ (80074c8 <ymodem_transmit+0x328>)
 8007490:	f004 ffeb 	bl	800c46a <HAL_UART_Receive>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <ymodem_transmit+0x312>
            if (aRxCtrl[0] == CA) {
 800749a:	7c3b      	ldrb	r3, [r7, #16]
 800749c:	2b18      	cmp	r3, #24
 800749e:	d108      	bne.n	80074b2 <ymodem_transmit+0x312>
                HAL_Delay(2);
 80074a0:	2002      	movs	r0, #2
 80074a2:	f000 f8b3 	bl	800760c <HAL_Delay>
                __HAL_UART_FLUSH_DRREGISTER(&UartHandle);
 80074a6:	4b08      	ldr	r3, [pc, #32]	@ (80074c8 <ymodem_transmit+0x328>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
                result = COM_ABORT;
 80074ac:	2302      	movs	r3, #2
 80074ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return result;
 80074b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3738      	adds	r7, #56	@ 0x38
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000e18 	.word	0x20000e18
 80074c4:	20000e19 	.word	0x20000e19
 80074c8:	20000678 	.word	0x20000678
 80074cc:	20000e1c 	.word	0x20000e1c
 80074d0:	200005d4 	.word	0x200005d4

080074d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80074d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800750c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80074d8:	f7ff fab0 	bl	8006a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80074dc:	480c      	ldr	r0, [pc, #48]	@ (8007510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80074de:	490d      	ldr	r1, [pc, #52]	@ (8007514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80074e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80074e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074e4:	e002      	b.n	80074ec <LoopCopyDataInit>

080074e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074ea:	3304      	adds	r3, #4

080074ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074f0:	d3f9      	bcc.n	80074e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074f2:	4a0a      	ldr	r2, [pc, #40]	@ (800751c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80074f4:	4c0a      	ldr	r4, [pc, #40]	@ (8007520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80074f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074f8:	e001      	b.n	80074fe <LoopFillZerobss>

080074fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074fc:	3204      	adds	r2, #4

080074fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007500:	d3fb      	bcc.n	80074fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8007502:	f006 f9d7 	bl	800d8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007506:	f7fc fca9 	bl	8003e5c <main>
  bx  lr    
 800750a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800750c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8007510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007514:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 8007518:	0800f08c 	.word	0x0800f08c
  ldr r2, =_sbss
 800751c:	200005b8 	.word	0x200005b8
  ldr r4, =_ebss
 8007520:	20001390 	.word	0x20001390

08007524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007524:	e7fe      	b.n	8007524 <ADC_IRQHandler>
	...

08007528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800752c:	4b0e      	ldr	r3, [pc, #56]	@ (8007568 <HAL_Init+0x40>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a0d      	ldr	r2, [pc, #52]	@ (8007568 <HAL_Init+0x40>)
 8007532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007538:	4b0b      	ldr	r3, [pc, #44]	@ (8007568 <HAL_Init+0x40>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0a      	ldr	r2, [pc, #40]	@ (8007568 <HAL_Init+0x40>)
 800753e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007544:	4b08      	ldr	r3, [pc, #32]	@ (8007568 <HAL_Init+0x40>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a07      	ldr	r2, [pc, #28]	@ (8007568 <HAL_Init+0x40>)
 800754a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800754e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007550:	2003      	movs	r0, #3
 8007552:	f000 f94f 	bl	80077f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007556:	2000      	movs	r0, #0
 8007558:	f000 f808 	bl	800756c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800755c:	f7ff f85a 	bl	8006614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40023c00 	.word	0x40023c00

0800756c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <HAL_InitTick+0x54>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <HAL_InitTick+0x58>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4619      	mov	r1, r3
 800757e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007582:	fbb3 f3f1 	udiv	r3, r3, r1
 8007586:	fbb2 f3f3 	udiv	r3, r2, r3
 800758a:	4618      	mov	r0, r3
 800758c:	f000 f967 	bl	800785e <HAL_SYSTICK_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e00e      	b.n	80075b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b0f      	cmp	r3, #15
 800759e:	d80a      	bhi.n	80075b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075a0:	2200      	movs	r2, #0
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075a8:	f000 f92f 	bl	800780a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80075ac:	4a06      	ldr	r2, [pc, #24]	@ (80075c8 <HAL_InitTick+0x5c>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e000      	b.n	80075b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000550 	.word	0x20000550
 80075c4:	20000558 	.word	0x20000558
 80075c8:	20000554 	.word	0x20000554

080075cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80075d0:	4b06      	ldr	r3, [pc, #24]	@ (80075ec <HAL_IncTick+0x20>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <HAL_IncTick+0x24>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4413      	add	r3, r2
 80075dc:	4a04      	ldr	r2, [pc, #16]	@ (80075f0 <HAL_IncTick+0x24>)
 80075de:	6013      	str	r3, [r2, #0]
}
 80075e0:	bf00      	nop
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	20000558 	.word	0x20000558
 80075f0:	20001220 	.word	0x20001220

080075f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return uwTick;
 80075f8:	4b03      	ldr	r3, [pc, #12]	@ (8007608 <HAL_GetTick+0x14>)
 80075fa:	681b      	ldr	r3, [r3, #0]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	20001220 	.word	0x20001220

0800760c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007614:	f7ff ffee 	bl	80075f4 <HAL_GetTick>
 8007618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007624:	d005      	beq.n	8007632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007626:	4b0a      	ldr	r3, [pc, #40]	@ (8007650 <HAL_Delay+0x44>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007632:	bf00      	nop
 8007634:	f7ff ffde 	bl	80075f4 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	429a      	cmp	r2, r3
 8007642:	d8f7      	bhi.n	8007634 <HAL_Delay+0x28>
  {
  }
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000558 	.word	0x20000558

08007654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007664:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <__NVIC_SetPriorityGrouping+0x44>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007670:	4013      	ands	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800767c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007686:	4a04      	ldr	r2, [pc, #16]	@ (8007698 <__NVIC_SetPriorityGrouping+0x44>)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	60d3      	str	r3, [r2, #12]
}
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076a0:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <__NVIC_GetPriorityGrouping+0x18>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	0a1b      	lsrs	r3, r3, #8
 80076a6:	f003 0307 	and.w	r3, r3, #7
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	e000ed00 	.word	0xe000ed00

080076b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	db0b      	blt.n	80076e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076ca:	79fb      	ldrb	r3, [r7, #7]
 80076cc:	f003 021f 	and.w	r2, r3, #31
 80076d0:	4907      	ldr	r1, [pc, #28]	@ (80076f0 <__NVIC_EnableIRQ+0x38>)
 80076d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	2001      	movs	r0, #1
 80076da:	fa00 f202 	lsl.w	r2, r0, r2
 80076de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	e000e100 	.word	0xe000e100

080076f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	6039      	str	r1, [r7, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007704:	2b00      	cmp	r3, #0
 8007706:	db0a      	blt.n	800771e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	b2da      	uxtb	r2, r3
 800770c:	490c      	ldr	r1, [pc, #48]	@ (8007740 <__NVIC_SetPriority+0x4c>)
 800770e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007712:	0112      	lsls	r2, r2, #4
 8007714:	b2d2      	uxtb	r2, r2
 8007716:	440b      	add	r3, r1
 8007718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800771c:	e00a      	b.n	8007734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	b2da      	uxtb	r2, r3
 8007722:	4908      	ldr	r1, [pc, #32]	@ (8007744 <__NVIC_SetPriority+0x50>)
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	3b04      	subs	r3, #4
 800772c:	0112      	lsls	r2, r2, #4
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	440b      	add	r3, r1
 8007732:	761a      	strb	r2, [r3, #24]
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	e000e100 	.word	0xe000e100
 8007744:	e000ed00 	.word	0xe000ed00

08007748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007748:	b480      	push	{r7}
 800774a:	b089      	sub	sp, #36	@ 0x24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f1c3 0307 	rsb	r3, r3, #7
 8007762:	2b04      	cmp	r3, #4
 8007764:	bf28      	it	cs
 8007766:	2304      	movcs	r3, #4
 8007768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	3304      	adds	r3, #4
 800776e:	2b06      	cmp	r3, #6
 8007770:	d902      	bls.n	8007778 <NVIC_EncodePriority+0x30>
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3b03      	subs	r3, #3
 8007776:	e000      	b.n	800777a <NVIC_EncodePriority+0x32>
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800777c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	43da      	mvns	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	401a      	ands	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007790:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	43d9      	mvns	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a0:	4313      	orrs	r3, r2
         );
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3724      	adds	r7, #36	@ 0x24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c0:	d301      	bcc.n	80077c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077c2:	2301      	movs	r3, #1
 80077c4:	e00f      	b.n	80077e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077c6:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <SysTick_Config+0x40>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077ce:	210f      	movs	r1, #15
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d4:	f7ff ff8e 	bl	80076f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077d8:	4b05      	ldr	r3, [pc, #20]	@ (80077f0 <SysTick_Config+0x40>)
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077de:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <SysTick_Config+0x40>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000e010 	.word	0xe000e010

080077f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff ff29 	bl	8007654 <__NVIC_SetPriorityGrouping>
}
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	4603      	mov	r3, r0
 8007812:	60b9      	str	r1, [r7, #8]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800781c:	f7ff ff3e 	bl	800769c <__NVIC_GetPriorityGrouping>
 8007820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	6978      	ldr	r0, [r7, #20]
 8007828:	f7ff ff8e 	bl	8007748 <NVIC_EncodePriority>
 800782c:	4602      	mov	r2, r0
 800782e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007832:	4611      	mov	r1, r2
 8007834:	4618      	mov	r0, r3
 8007836:	f7ff ff5d 	bl	80076f4 <__NVIC_SetPriority>
}
 800783a:	bf00      	nop
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	4603      	mov	r3, r0
 800784a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800784c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff ff31 	bl	80076b8 <__NVIC_EnableIRQ>
}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff ffa2 	bl	80077b0 <SysTick_Config>
 800786c:	4603      	mov	r3, r0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e00e      	b.n	80078a6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	795b      	ldrb	r3, [r3, #5]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d105      	bne.n	800789e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7fe fee3 	bl	8006664 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b087      	sub	sp, #28
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	60f8      	str	r0, [r7, #12]
 80078b6:	60b9      	str	r1, [r7, #8]
 80078b8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2202      	movs	r2, #2
 80078c2:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	e00a      	b.n	80078f0 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	3301      	adds	r3, #1
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d3f0      	bcc.n	80078da <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8007906:	693b      	ldr	r3, [r7, #16]
}
 8007908:	4618      	mov	r0, r3
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007920:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007922:	f7ff fe67 	bl	80075f4 <HAL_GetTick>
 8007926:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d008      	beq.n	8007946 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2280      	movs	r2, #128	@ 0x80
 8007938:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e052      	b.n	80079ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0216 	bic.w	r2, r2, #22
 8007954:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695a      	ldr	r2, [r3, #20]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007964:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <HAL_DMA_Abort+0x62>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0208 	bic.w	r2, r2, #8
 8007984:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007996:	e013      	b.n	80079c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007998:	f7ff fe2c 	bl	80075f4 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d90c      	bls.n	80079c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2203      	movs	r2, #3
 80079b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e015      	b.n	80079ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e4      	bne.n	8007998 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d2:	223f      	movs	r2, #63	@ 0x3f
 80079d4:	409a      	lsls	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d004      	beq.n	8007a12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2280      	movs	r2, #128	@ 0x80
 8007a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e00c      	b.n	8007a2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2205      	movs	r2, #5
 8007a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a46:	b2db      	uxtb	r3, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a62:	4b23      	ldr	r3, [pc, #140]	@ (8007af0 <HAL_FLASH_Program+0x9c>)
 8007a64:	7e1b      	ldrb	r3, [r3, #24]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d101      	bne.n	8007a6e <HAL_FLASH_Program+0x1a>
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	e03b      	b.n	8007ae6 <HAL_FLASH_Program+0x92>
 8007a6e:	4b20      	ldr	r3, [pc, #128]	@ (8007af0 <HAL_FLASH_Program+0x9c>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007a78:	f000 f8b0 	bl	8007bdc <FLASH_WaitForLastOperation>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d12b      	bne.n	8007ade <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007a8c:	783b      	ldrb	r3, [r7, #0]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68b8      	ldr	r0, [r7, #8]
 8007a92:	f000 f95b 	bl	8007d4c <FLASH_Program_Byte>
 8007a96:	e016      	b.n	8007ac6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007a9e:	883b      	ldrh	r3, [r7, #0]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68b8      	ldr	r0, [r7, #8]
 8007aa4:	f000 f92e 	bl	8007d04 <FLASH_Program_HalfWord>
 8007aa8:	e00d      	b.n	8007ac6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d105      	bne.n	8007abc <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68b8      	ldr	r0, [r7, #8]
 8007ab6:	f000 f903 	bl	8007cc0 <FLASH_Program_Word>
 8007aba:	e004      	b.n	8007ac6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f000 f8cb 	bl	8007c5c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ac6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007aca:	f000 f887 	bl	8007bdc <FLASH_WaitForLastOperation>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8007ad2:	4b08      	ldr	r3, [pc, #32]	@ (8007af4 <HAL_FLASH_Program+0xa0>)
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	4a07      	ldr	r2, [pc, #28]	@ (8007af4 <HAL_FLASH_Program+0xa0>)
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ade:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <HAL_FLASH_Program+0x9c>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	761a      	strb	r2, [r3, #24]

  return status;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20001224 	.word	0x20001224
 8007af4:	40023c00 	.word	0x40023c00

08007af8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b02:	4b0b      	ldr	r3, [pc, #44]	@ (8007b30 <HAL_FLASH_Unlock+0x38>)
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	da0b      	bge.n	8007b22 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b0a:	4b09      	ldr	r3, [pc, #36]	@ (8007b30 <HAL_FLASH_Unlock+0x38>)
 8007b0c:	4a09      	ldr	r2, [pc, #36]	@ (8007b34 <HAL_FLASH_Unlock+0x3c>)
 8007b0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b10:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <HAL_FLASH_Unlock+0x38>)
 8007b12:	4a09      	ldr	r2, [pc, #36]	@ (8007b38 <HAL_FLASH_Unlock+0x40>)
 8007b14:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b16:	4b06      	ldr	r3, [pc, #24]	@ (8007b30 <HAL_FLASH_Unlock+0x38>)
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	da01      	bge.n	8007b22 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007b22:	79fb      	ldrb	r3, [r7, #7]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	40023c00 	.word	0x40023c00
 8007b34:	45670123 	.word	0x45670123
 8007b38:	cdef89ab 	.word	0xcdef89ab

08007b3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007b40:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <HAL_FLASH_Lock+0x1c>)
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	4a04      	ldr	r2, [pc, #16]	@ (8007b58 <HAL_FLASH_Lock+0x1c>)
 8007b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b4a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	40023c00 	.word	0x40023c00

08007b5c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8007b60:	4b09      	ldr	r3, [pc, #36]	@ (8007b88 <HAL_FLASH_OB_Unlock+0x2c>)
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	@ (8007b88 <HAL_FLASH_OB_Unlock+0x2c>)
 8007b6e:	4a07      	ldr	r2, [pc, #28]	@ (8007b8c <HAL_FLASH_OB_Unlock+0x30>)
 8007b70:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8007b72:	4b05      	ldr	r3, [pc, #20]	@ (8007b88 <HAL_FLASH_OB_Unlock+0x2c>)
 8007b74:	4a06      	ldr	r2, [pc, #24]	@ (8007b90 <HAL_FLASH_OB_Unlock+0x34>)
 8007b76:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e000      	b.n	8007b7e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40023c00 	.word	0x40023c00
 8007b8c:	08192a3b 	.word	0x08192a3b
 8007b90:	4c5d6e7f 	.word	0x4c5d6e7f

08007b94 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8007b98:	4b05      	ldr	r3, [pc, #20]	@ (8007bb0 <HAL_FLASH_OB_Lock+0x1c>)
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	4a04      	ldr	r2, [pc, #16]	@ (8007bb0 <HAL_FLASH_OB_Lock+0x1c>)
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40023c00 	.word	0x40023c00

08007bb4 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8007bb8:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <HAL_FLASH_OB_Launch+0x24>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	4a06      	ldr	r2, [pc, #24]	@ (8007bd8 <HAL_FLASH_OB_Launch+0x24>)
 8007bc0:	f043 0302 	orr.w	r3, r3, #2
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8007bc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007bcc:	f000 f806 	bl	8007bdc <FLASH_WaitForLastOperation>
 8007bd0:	4603      	mov	r3, r0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	40023c14 	.word	0x40023c14

08007bdc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007be8:	4b1a      	ldr	r3, [pc, #104]	@ (8007c54 <FLASH_WaitForLastOperation+0x78>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007bee:	f7ff fd01 	bl	80075f4 <HAL_GetTick>
 8007bf2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8007bf4:	e010      	b.n	8007c18 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007bfc:	d00c      	beq.n	8007c18 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d007      	beq.n	8007c14 <FLASH_WaitForLastOperation+0x38>
 8007c04:	f7ff fcf6 	bl	80075f4 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d201      	bcs.n	8007c18 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e019      	b.n	8007c4c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8007c18:	4b0f      	ldr	r3, [pc, #60]	@ (8007c58 <FLASH_WaitForLastOperation+0x7c>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e8      	bne.n	8007bf6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007c24:	4b0c      	ldr	r3, [pc, #48]	@ (8007c58 <FLASH_WaitForLastOperation+0x7c>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d002      	beq.n	8007c36 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c30:	4b09      	ldr	r3, [pc, #36]	@ (8007c58 <FLASH_WaitForLastOperation+0x7c>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007c36:	4b08      	ldr	r3, [pc, #32]	@ (8007c58 <FLASH_WaitForLastOperation+0x7c>)
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007c42:	f000 f8a5 	bl	8007d90 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0

}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20001224 	.word	0x20001224
 8007c58:	40023c00 	.word	0x40023c00

08007c5c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c68:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <FLASH_Program_DoubleWord+0x60>)
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	4a13      	ldr	r2, [pc, #76]	@ (8007cbc <FLASH_Program_DoubleWord+0x60>)
 8007c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007c74:	4b11      	ldr	r3, [pc, #68]	@ (8007cbc <FLASH_Program_DoubleWord+0x60>)
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	4a10      	ldr	r2, [pc, #64]	@ (8007cbc <FLASH_Program_DoubleWord+0x60>)
 8007c7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007c7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c80:	4b0e      	ldr	r3, [pc, #56]	@ (8007cbc <FLASH_Program_DoubleWord+0x60>)
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	4a0d      	ldr	r2, [pc, #52]	@ (8007cbc <FLASH_Program_DoubleWord+0x60>)
 8007c86:	f043 0301 	orr.w	r3, r3, #1
 8007c8a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007c92:	f3bf 8f6f 	isb	sy
}
 8007c96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8007c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	000a      	movs	r2, r1
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	68f9      	ldr	r1, [r7, #12]
 8007caa:	3104      	adds	r1, #4
 8007cac:	4613      	mov	r3, r2
 8007cae:	600b      	str	r3, [r1, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	40023c00 	.word	0x40023c00

08007cc0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007cca:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <FLASH_Program_Word+0x40>)
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	4a0c      	ldr	r2, [pc, #48]	@ (8007d00 <FLASH_Program_Word+0x40>)
 8007cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <FLASH_Program_Word+0x40>)
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	4a09      	ldr	r2, [pc, #36]	@ (8007d00 <FLASH_Program_Word+0x40>)
 8007cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ce0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007ce2:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <FLASH_Program_Word+0x40>)
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	4a06      	ldr	r2, [pc, #24]	@ (8007d00 <FLASH_Program_Word+0x40>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40023c00 	.word	0x40023c00

08007d04 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d10:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <FLASH_Program_HalfWord+0x44>)
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	4a0c      	ldr	r2, [pc, #48]	@ (8007d48 <FLASH_Program_HalfWord+0x44>)
 8007d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d48 <FLASH_Program_HalfWord+0x44>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	4a09      	ldr	r2, [pc, #36]	@ (8007d48 <FLASH_Program_HalfWord+0x44>)
 8007d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007d28:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <FLASH_Program_HalfWord+0x44>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	4a06      	ldr	r2, [pc, #24]	@ (8007d48 <FLASH_Program_HalfWord+0x44>)
 8007d2e:	f043 0301 	orr.w	r3, r3, #1
 8007d32:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	887a      	ldrh	r2, [r7, #2]
 8007d38:	801a      	strh	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40023c00 	.word	0x40023c00

08007d4c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d58:	4b0c      	ldr	r3, [pc, #48]	@ (8007d8c <FLASH_Program_Byte+0x40>)
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d8c <FLASH_Program_Byte+0x40>)
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <FLASH_Program_Byte+0x40>)
 8007d66:	4a09      	ldr	r2, [pc, #36]	@ (8007d8c <FLASH_Program_Byte+0x40>)
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <FLASH_Program_Byte+0x40>)
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	4a06      	ldr	r2, [pc, #24]	@ (8007d8c <FLASH_Program_Byte+0x40>)
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	701a      	strb	r2, [r3, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40023c00 	.word	0x40023c00

08007d90 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007d94:	4b2f      	ldr	r3, [pc, #188]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007da0:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f043 0310 	orr.w	r3, r3, #16
 8007da8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007daa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007dac:	4b29      	ldr	r3, [pc, #164]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007dae:	2210      	movs	r2, #16
 8007db0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007db2:	4b28      	ldr	r3, [pc, #160]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d008      	beq.n	8007dd0 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007dbe:	4b26      	ldr	r3, [pc, #152]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f043 0308 	orr.w	r3, r3, #8
 8007dc6:	4a24      	ldr	r2, [pc, #144]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007dc8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007dca:	4b22      	ldr	r3, [pc, #136]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007dcc:	2220      	movs	r2, #32
 8007dce:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007dd0:	4b20      	ldr	r3, [pc, #128]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f043 0304 	orr.w	r3, r3, #4
 8007de4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007de6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007de8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007dea:	2240      	movs	r2, #64	@ 0x40
 8007dec:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007dee:	4b19      	ldr	r3, [pc, #100]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007dfa:	4b17      	ldr	r3, [pc, #92]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f043 0302 	orr.w	r3, r3, #2
 8007e02:	4a15      	ldr	r2, [pc, #84]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007e04:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007e06:	4b13      	ldr	r3, [pc, #76]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007e08:	2280      	movs	r2, #128	@ 0x80
 8007e0a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8007e0c:	4b11      	ldr	r3, [pc, #68]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d009      	beq.n	8007e2c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8007e18:	4b0f      	ldr	r3, [pc, #60]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f043 0301 	orr.w	r3, r3, #1
 8007e20:	4a0d      	ldr	r2, [pc, #52]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007e22:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8007e24:	4b0b      	ldr	r3, [pc, #44]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e2a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007e2c:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007e38:	4b07      	ldr	r3, [pc, #28]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f043 0320 	orr.w	r3, r3, #32
 8007e40:	4a05      	ldr	r2, [pc, #20]	@ (8007e58 <FLASH_SetErrorCode+0xc8>)
 8007e42:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007e44:	4b03      	ldr	r3, [pc, #12]	@ (8007e54 <FLASH_SetErrorCode+0xc4>)
 8007e46:	2202      	movs	r2, #2
 8007e48:	60da      	str	r2, [r3, #12]
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	40023c00 	.word	0x40023c00
 8007e58:	20001224 	.word	0x20001224

08007e5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007e6a:	4b31      	ldr	r3, [pc, #196]	@ (8007f30 <HAL_FLASHEx_Erase+0xd4>)
 8007e6c:	7e1b      	ldrb	r3, [r3, #24]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_FLASHEx_Erase+0x1a>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e058      	b.n	8007f28 <HAL_FLASHEx_Erase+0xcc>
 8007e76:	4b2e      	ldr	r3, [pc, #184]	@ (8007f30 <HAL_FLASHEx_Erase+0xd4>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007e80:	f7ff feac 	bl	8007bdc <FLASH_WaitForLastOperation>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d148      	bne.n	8007f20 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e94:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d115      	bne.n	8007eca <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f000 f8d6 	bl	800805c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007eb0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007eb4:	f7ff fe92 	bl	8007bdc <FLASH_WaitForLastOperation>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8007f34 <HAL_FLASHEx_Erase+0xd8>)
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f34 <HAL_FLASHEx_Erase+0xd8>)
 8007ec2:	f023 0304 	bic.w	r3, r3, #4
 8007ec6:	6113      	str	r3, [r2, #16]
 8007ec8:	e028      	b.n	8007f1c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	e01c      	b.n	8007f0c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	4619      	mov	r1, r3
 8007eda:	68b8      	ldr	r0, [r7, #8]
 8007edc:	f000 f8e2 	bl	80080a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ee0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007ee4:	f7ff fe7a 	bl	8007bdc <FLASH_WaitForLastOperation>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007eec:	4b11      	ldr	r3, [pc, #68]	@ (8007f34 <HAL_FLASHEx_Erase+0xd8>)
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	4a10      	ldr	r2, [pc, #64]	@ (8007f34 <HAL_FLASHEx_Erase+0xd8>)
 8007ef2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8007ef6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	601a      	str	r2, [r3, #0]
          break;
 8007f04:	e00a      	b.n	8007f1c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d3da      	bcc.n	8007ed2 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007f1c:	f000 f9fe 	bl	800831c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007f20:	4b03      	ldr	r3, [pc, #12]	@ (8007f30 <HAL_FLASHEx_Erase+0xd4>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	761a      	strb	r2, [r3, #24]

  return status;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20001224 	.word	0x20001224
 8007f34:	40023c00 	.word	0x40023c00

08007f38 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007f44:	4b32      	ldr	r3, [pc, #200]	@ (8008010 <HAL_FLASHEx_OBProgram+0xd8>)
 8007f46:	7e1b      	ldrb	r3, [r3, #24]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_FLASHEx_OBProgram+0x18>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e05b      	b.n	8008008 <HAL_FLASHEx_OBProgram+0xd0>
 8007f50:	4b2f      	ldr	r3, [pc, #188]	@ (8008010 <HAL_FLASHEx_OBProgram+0xd8>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d018      	beq.n	8007f94 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d10a      	bne.n	8007f80 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	4619      	mov	r1, r3
 8007f74:	4610      	mov	r0, r2
 8007f76:	f000 f8dd 	bl	8008134 <FLASH_OB_EnableWRP>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]
 8007f7e:	e009      	b.n	8007f94 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f000 f8f4 	bl	8008178 <FLASH_OB_DisableWRP>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d007      	beq.n	8007fb0 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f906 	bl	80081b8 <FLASH_OB_RDP_LevelConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d013      	beq.n	8007fe4 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	7e1b      	ldrb	r3, [r3, #24]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8007fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fce:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8007fd4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f000 f906 	bl	80081ec <FLASH_OB_UserConfig>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f926 	bl	8008248 <FLASH_OB_BOR_LevelConfig>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008000:	4b03      	ldr	r3, [pc, #12]	@ (8008010 <HAL_FLASHEx_OBProgram+0xd8>)
 8008002:	2200      	movs	r2, #0
 8008004:	761a      	strb	r2, [r3, #24]

  return status;
 8008006:	7bfb      	ldrb	r3, [r7, #15]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20001224 	.word	0x20001224

08008014 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	220f      	movs	r2, #15
 8008020:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8008022:	f000 f93f 	bl	80082a4 <FLASH_OB_GetWRP>
 8008026:	4603      	mov	r3, r0
 8008028:	461a      	mov	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800802e:	f000 f945 	bl	80082bc <FLASH_OB_GetRDP>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800803a:	f000 f923 	bl	8008284 <FLASH_OB_GetUser>
 800803e:	4603      	mov	r3, r0
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8008046:	f000 f959 	bl	80082fc <FLASH_OB_GetBOR>
 800804a:	4603      	mov	r3, r0
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	615a      	str	r2, [r3, #20]
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008068:	4b0d      	ldr	r3, [pc, #52]	@ (80080a0 <FLASH_MassErase+0x44>)
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	4a0c      	ldr	r2, [pc, #48]	@ (80080a0 <FLASH_MassErase+0x44>)
 800806e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008072:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008074:	4b0a      	ldr	r3, [pc, #40]	@ (80080a0 <FLASH_MassErase+0x44>)
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	4a09      	ldr	r2, [pc, #36]	@ (80080a0 <FLASH_MassErase+0x44>)
 800807a:	f043 0304 	orr.w	r3, r3, #4
 800807e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8008080:	4b07      	ldr	r3, [pc, #28]	@ (80080a0 <FLASH_MassErase+0x44>)
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	4313      	orrs	r3, r2
 800808a:	4a05      	ldr	r2, [pc, #20]	@ (80080a0 <FLASH_MassErase+0x44>)
 800808c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008090:	6113      	str	r3, [r2, #16]
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40023c00 	.word	0x40023c00

080080a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	e010      	b.n	80080e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d103      	bne.n	80080ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80080c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e009      	b.n	80080e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d103      	bne.n	80080dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80080d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	e002      	b.n	80080e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80080dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80080e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80080e2:	4b13      	ldr	r3, [pc, #76]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	4a12      	ldr	r2, [pc, #72]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 80080e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80080ee:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	490f      	ldr	r1, [pc, #60]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80080fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 8008100:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008104:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008106:	4b0a      	ldr	r3, [pc, #40]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	4313      	orrs	r3, r2
 8008110:	4a07      	ldr	r2, [pc, #28]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 8008112:	f043 0302 	orr.w	r3, r3, #2
 8008116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008118:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	4a04      	ldr	r2, [pc, #16]	@ (8008130 <FLASH_Erase_Sector+0x8c>)
 800811e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008122:	6113      	str	r3, [r2, #16]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	40023c00 	.word	0x40023c00

08008134 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008142:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008146:	f7ff fd49 	bl	8007bdc <FLASH_WaitForLastOperation>
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 8008154:	4b07      	ldr	r3, [pc, #28]	@ (8008174 <FLASH_OB_EnableWRP+0x40>)
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	b29b      	uxth	r3, r3
 800815e:	43db      	mvns	r3, r3
 8008160:	b29b      	uxth	r3, r3
 8008162:	4904      	ldr	r1, [pc, #16]	@ (8008174 <FLASH_OB_EnableWRP+0x40>)
 8008164:	4013      	ands	r3, r2
 8008166:	b29b      	uxth	r3, r3
 8008168:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40023c16 	.word	0x40023c16

08008178 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008186:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800818a:	f7ff fd27 	bl	8007bdc <FLASH_WaitForLastOperation>
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d108      	bne.n	80081aa <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8008198:	4b06      	ldr	r3, [pc, #24]	@ (80081b4 <FLASH_OB_DisableWRP+0x3c>)
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4904      	ldr	r1, [pc, #16]	@ (80081b4 <FLASH_OB_DisableWRP+0x3c>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	40023c16 	.word	0x40023c16

080081b8 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081c6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80081ca:	f7ff fd07 	bl	8007bdc <FLASH_WaitForLastOperation>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 80081d8:	4a03      	ldr	r2, [pc, #12]	@ (80081e8 <FLASH_OB_RDP_LevelConfig+0x30>)
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	7013      	strb	r3, [r2, #0]
  }

  return status;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	40023c15 	.word	0x40023c15

080081ec <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
 80081f6:	460b      	mov	r3, r1
 80081f8:	71bb      	strb	r3, [r7, #6]
 80081fa:	4613      	mov	r3, r2
 80081fc:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp;
  HAL_StatusTypeDef status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008202:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8008206:	f7ff fce9 	bl	8007bdc <FLASH_WaitForLastOperation>
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d111      	bne.n	8008238 <FLASH_OB_UserConfig+0x4c>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8008214:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <FLASH_OB_UserConfig+0x58>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	73bb      	strb	r3, [r7, #14]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 8008220:	79ba      	ldrb	r2, [r7, #6]
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	4313      	orrs	r3, r2
 8008226:	b2da      	uxtb	r2, r3
 8008228:	797b      	ldrb	r3, [r7, #5]
 800822a:	4313      	orrs	r3, r2
 800822c:	b2da      	uxtb	r2, r3
 800822e:	4905      	ldr	r1, [pc, #20]	@ (8008244 <FLASH_OB_UserConfig+0x58>)
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	4313      	orrs	r3, r2
 8008234:	b2db      	uxtb	r3, r3
 8008236:	700b      	strb	r3, [r1, #0]
  }

  return status;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	40023c14 	.word	0x40023c14

08008248 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8008252:	4b0b      	ldr	r3, [pc, #44]	@ (8008280 <FLASH_OB_BOR_LevelConfig+0x38>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	4a09      	ldr	r2, [pc, #36]	@ (8008280 <FLASH_OB_BOR_LevelConfig+0x38>)
 800825a:	f023 030c 	bic.w	r3, r3, #12
 800825e:	b2db      	uxtb	r3, r3
 8008260:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8008262:	4b07      	ldr	r3, [pc, #28]	@ (8008280 <FLASH_OB_BOR_LevelConfig+0x38>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	b2da      	uxtb	r2, r3
 8008268:	4905      	ldr	r1, [pc, #20]	@ (8008280 <FLASH_OB_BOR_LevelConfig+0x38>)
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	4313      	orrs	r3, r2
 800826e:	b2db      	uxtb	r3, r3
 8008270:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 8008272:	2300      	movs	r3, #0

}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	40023c14 	.word	0x40023c14

08008284 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8008288:	4b05      	ldr	r3, [pc, #20]	@ (80082a0 <FLASH_OB_GetUser+0x1c>)
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f023 031f 	bic.w	r3, r3, #31
 8008292:	b2db      	uxtb	r3, r3
}
 8008294:	4618      	mov	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40023c00 	.word	0x40023c00

080082a4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80082a8:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <FLASH_OB_GetWRP+0x14>)
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40023c16 	.word	0x40023c16

080082bc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80082c2:	23aa      	movs	r3, #170	@ 0xaa
 80082c4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 80082c6:	4b0c      	ldr	r3, [pc, #48]	@ (80082f8 <FLASH_OB_GetRDP+0x3c>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2bcc      	cmp	r3, #204	@ 0xcc
 80082ce:	d102      	bne.n	80082d6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80082d0:	23cc      	movs	r3, #204	@ 0xcc
 80082d2:	71fb      	strb	r3, [r7, #7]
 80082d4:	e009      	b.n	80082ea <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80082d6:	4b08      	ldr	r3, [pc, #32]	@ (80082f8 <FLASH_OB_GetRDP+0x3c>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2baa      	cmp	r3, #170	@ 0xaa
 80082de:	d102      	bne.n	80082e6 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80082e0:	23aa      	movs	r3, #170	@ 0xaa
 80082e2:	71fb      	strb	r3, [r7, #7]
 80082e4:	e001      	b.n	80082ea <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80082e6:	2355      	movs	r3, #85	@ 0x55
 80082e8:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80082ea:	79fb      	ldrb	r3, [r7, #7]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40023c15 	.word	0x40023c15

080082fc <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8008300:	4b05      	ldr	r3, [pc, #20]	@ (8008318 <FLASH_OB_GetBOR+0x1c>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 030c 	and.w	r3, r3, #12
 800830a:	b2db      	uxtb	r3, r3
}
 800830c:	4618      	mov	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40023c14 	.word	0x40023c14

0800831c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008320:	4b20      	ldr	r3, [pc, #128]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008328:	2b00      	cmp	r3, #0
 800832a:	d017      	beq.n	800835c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800832c:	4b1d      	ldr	r3, [pc, #116]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1c      	ldr	r2, [pc, #112]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008332:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008336:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008338:	4b1a      	ldr	r3, [pc, #104]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a19      	ldr	r2, [pc, #100]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800833e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	4b17      	ldr	r3, [pc, #92]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a16      	ldr	r2, [pc, #88]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800834a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800834e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008350:	4b14      	ldr	r3, [pc, #80]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a13      	ldr	r2, [pc, #76]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008356:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800835a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800835c:	4b11      	ldr	r3, [pc, #68]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008364:	2b00      	cmp	r3, #0
 8008366:	d017      	beq.n	8008398 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008368:	4b0e      	ldr	r3, [pc, #56]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a0d      	ldr	r2, [pc, #52]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800836e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008372:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008374:	4b0b      	ldr	r3, [pc, #44]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a0a      	ldr	r2, [pc, #40]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800837a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	4b08      	ldr	r3, [pc, #32]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a07      	ldr	r2, [pc, #28]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800838a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800838c:	4b05      	ldr	r3, [pc, #20]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a04      	ldr	r2, [pc, #16]	@ (80083a4 <FLASH_FlushCaches+0x88>)
 8008392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008396:	6013      	str	r3, [r2, #0]
  }
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40023c00 	.word	0x40023c00

080083a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b089      	sub	sp, #36	@ 0x24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083be:	2300      	movs	r3, #0
 80083c0:	61fb      	str	r3, [r7, #28]
 80083c2:	e159      	b.n	8008678 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083c4:	2201      	movs	r2, #1
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4013      	ands	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	429a      	cmp	r2, r3
 80083de:	f040 8148 	bne.w	8008672 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d005      	beq.n	80083fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d130      	bne.n	800845c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	2203      	movs	r2, #3
 8008406:	fa02 f303 	lsl.w	r3, r2, r3
 800840a:	43db      	mvns	r3, r3
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	4013      	ands	r3, r2
 8008410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4313      	orrs	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008430:	2201      	movs	r2, #1
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	43db      	mvns	r3, r3
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	4013      	ands	r3, r2
 800843e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 0201 	and.w	r2, r3, #1
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	fa02 f303 	lsl.w	r3, r2, r3
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	4313      	orrs	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69ba      	ldr	r2, [r7, #24]
 800845a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	2b03      	cmp	r3, #3
 8008466:	d017      	beq.n	8008498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	2203      	movs	r2, #3
 8008474:	fa02 f303 	lsl.w	r3, r2, r3
 8008478:	43db      	mvns	r3, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	4013      	ands	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	4313      	orrs	r3, r2
 8008490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d123      	bne.n	80084ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	08da      	lsrs	r2, r3, #3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3208      	adds	r2, #8
 80084ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	220f      	movs	r2, #15
 80084bc:	fa02 f303 	lsl.w	r3, r2, r3
 80084c0:	43db      	mvns	r3, r3
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	4013      	ands	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f003 0307 	and.w	r3, r3, #7
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4313      	orrs	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	08da      	lsrs	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3208      	adds	r2, #8
 80084e6:	69b9      	ldr	r1, [r7, #24]
 80084e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	2203      	movs	r2, #3
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	43db      	mvns	r3, r3
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	4013      	ands	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f003 0203 	and.w	r2, r3, #3
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	4313      	orrs	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 80a2 	beq.w	8008672 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	4b57      	ldr	r3, [pc, #348]	@ (8008690 <HAL_GPIO_Init+0x2e8>)
 8008534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008536:	4a56      	ldr	r2, [pc, #344]	@ (8008690 <HAL_GPIO_Init+0x2e8>)
 8008538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800853c:	6453      	str	r3, [r2, #68]	@ 0x44
 800853e:	4b54      	ldr	r3, [pc, #336]	@ (8008690 <HAL_GPIO_Init+0x2e8>)
 8008540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800854a:	4a52      	ldr	r2, [pc, #328]	@ (8008694 <HAL_GPIO_Init+0x2ec>)
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	089b      	lsrs	r3, r3, #2
 8008550:	3302      	adds	r3, #2
 8008552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	220f      	movs	r2, #15
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	43db      	mvns	r3, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	4013      	ands	r3, r2
 800856c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a49      	ldr	r2, [pc, #292]	@ (8008698 <HAL_GPIO_Init+0x2f0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d019      	beq.n	80085aa <HAL_GPIO_Init+0x202>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a48      	ldr	r2, [pc, #288]	@ (800869c <HAL_GPIO_Init+0x2f4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <HAL_GPIO_Init+0x1fe>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a47      	ldr	r2, [pc, #284]	@ (80086a0 <HAL_GPIO_Init+0x2f8>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00d      	beq.n	80085a2 <HAL_GPIO_Init+0x1fa>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a46      	ldr	r2, [pc, #280]	@ (80086a4 <HAL_GPIO_Init+0x2fc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d007      	beq.n	800859e <HAL_GPIO_Init+0x1f6>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a45      	ldr	r2, [pc, #276]	@ (80086a8 <HAL_GPIO_Init+0x300>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d101      	bne.n	800859a <HAL_GPIO_Init+0x1f2>
 8008596:	2304      	movs	r3, #4
 8008598:	e008      	b.n	80085ac <HAL_GPIO_Init+0x204>
 800859a:	2307      	movs	r3, #7
 800859c:	e006      	b.n	80085ac <HAL_GPIO_Init+0x204>
 800859e:	2303      	movs	r3, #3
 80085a0:	e004      	b.n	80085ac <HAL_GPIO_Init+0x204>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e002      	b.n	80085ac <HAL_GPIO_Init+0x204>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <HAL_GPIO_Init+0x204>
 80085aa:	2300      	movs	r3, #0
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	f002 0203 	and.w	r2, r2, #3
 80085b2:	0092      	lsls	r2, r2, #2
 80085b4:	4093      	lsls	r3, r2
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085bc:	4935      	ldr	r1, [pc, #212]	@ (8008694 <HAL_GPIO_Init+0x2ec>)
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	089b      	lsrs	r3, r3, #2
 80085c2:	3302      	adds	r3, #2
 80085c4:	69ba      	ldr	r2, [r7, #24]
 80085c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80085ca:	4b38      	ldr	r3, [pc, #224]	@ (80086ac <HAL_GPIO_Init+0x304>)
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69ba      	ldr	r2, [r7, #24]
 80085d6:	4013      	ands	r3, r2
 80085d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d003      	beq.n	80085ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80085ee:	4a2f      	ldr	r2, [pc, #188]	@ (80086ac <HAL_GPIO_Init+0x304>)
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80085f4:	4b2d      	ldr	r3, [pc, #180]	@ (80086ac <HAL_GPIO_Init+0x304>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4013      	ands	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008618:	4a24      	ldr	r2, [pc, #144]	@ (80086ac <HAL_GPIO_Init+0x304>)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800861e:	4b23      	ldr	r3, [pc, #140]	@ (80086ac <HAL_GPIO_Init+0x304>)
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	43db      	mvns	r3, r3
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	4013      	ands	r3, r2
 800862c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800863a:	69ba      	ldr	r2, [r7, #24]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008642:	4a1a      	ldr	r2, [pc, #104]	@ (80086ac <HAL_GPIO_Init+0x304>)
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008648:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <HAL_GPIO_Init+0x304>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	43db      	mvns	r3, r3
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	4013      	ands	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800866c:	4a0f      	ldr	r2, [pc, #60]	@ (80086ac <HAL_GPIO_Init+0x304>)
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	2b0f      	cmp	r3, #15
 800867c:	f67f aea2 	bls.w	80083c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	3724      	adds	r7, #36	@ 0x24
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40023800 	.word	0x40023800
 8008694:	40013800 	.word	0x40013800
 8008698:	40020000 	.word	0x40020000
 800869c:	40020400 	.word	0x40020400
 80086a0:	40020800 	.word	0x40020800
 80086a4:	40020c00 	.word	0x40020c00
 80086a8:	40021000 	.word	0x40021000
 80086ac:	40013c00 	.word	0x40013c00

080086b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	887b      	ldrh	r3, [r7, #2]
 80086c2:	4013      	ands	r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
 80086cc:	e001      	b.n	80086d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	807b      	strh	r3, [r7, #2]
 80086ec:	4613      	mov	r3, r2
 80086ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086f0:	787b      	ldrb	r3, [r7, #1]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80086f6:	887a      	ldrh	r2, [r7, #2]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80086fc:	e003      	b.n	8008706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80086fe:	887b      	ldrh	r3, [r7, #2]
 8008700:	041a      	lsls	r2, r3, #16
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	619a      	str	r2, [r3, #24]
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800871e:	4b08      	ldr	r3, [pc, #32]	@ (8008740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008720:	695a      	ldr	r2, [r3, #20]
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	4013      	ands	r3, r2
 8008726:	2b00      	cmp	r3, #0
 8008728:	d006      	beq.n	8008738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800872a:	4a05      	ldr	r2, [pc, #20]	@ (8008740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800872c:	88fb      	ldrh	r3, [r7, #6]
 800872e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f806 	bl	8008744 <HAL_GPIO_EXTI_Callback>
  }
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	40013c00 	.word	0x40013c00

08008744 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e12b      	b.n	80089c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7fd ff90 	bl	80066a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2224      	movs	r2, #36	@ 0x24
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 0201 	bic.w	r2, r2, #1
 800879e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80087c0:	f003 f91c 	bl	800b9fc <HAL_RCC_GetPCLK1Freq>
 80087c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	4a81      	ldr	r2, [pc, #516]	@ (80089d0 <HAL_I2C_Init+0x274>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d807      	bhi.n	80087e0 <HAL_I2C_Init+0x84>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4a80      	ldr	r2, [pc, #512]	@ (80089d4 <HAL_I2C_Init+0x278>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	bf94      	ite	ls
 80087d8:	2301      	movls	r3, #1
 80087da:	2300      	movhi	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	e006      	b.n	80087ee <HAL_I2C_Init+0x92>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4a7d      	ldr	r2, [pc, #500]	@ (80089d8 <HAL_I2C_Init+0x27c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	bf94      	ite	ls
 80087e8:	2301      	movls	r3, #1
 80087ea:	2300      	movhi	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e0e7      	b.n	80089c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a78      	ldr	r2, [pc, #480]	@ (80089dc <HAL_I2C_Init+0x280>)
 80087fa:	fba2 2303 	umull	r2, r3, r2, r3
 80087fe:	0c9b      	lsrs	r3, r3, #18
 8008800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4a6a      	ldr	r2, [pc, #424]	@ (80089d0 <HAL_I2C_Init+0x274>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d802      	bhi.n	8008830 <HAL_I2C_Init+0xd4>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3301      	adds	r3, #1
 800882e:	e009      	b.n	8008844 <HAL_I2C_Init+0xe8>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008836:	fb02 f303 	mul.w	r3, r2, r3
 800883a:	4a69      	ldr	r2, [pc, #420]	@ (80089e0 <HAL_I2C_Init+0x284>)
 800883c:	fba2 2303 	umull	r2, r3, r2, r3
 8008840:	099b      	lsrs	r3, r3, #6
 8008842:	3301      	adds	r3, #1
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6812      	ldr	r2, [r2, #0]
 8008848:	430b      	orrs	r3, r1
 800884a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008856:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	495c      	ldr	r1, [pc, #368]	@ (80089d0 <HAL_I2C_Init+0x274>)
 8008860:	428b      	cmp	r3, r1
 8008862:	d819      	bhi.n	8008898 <HAL_I2C_Init+0x13c>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	1e59      	subs	r1, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008872:	1c59      	adds	r1, r3, #1
 8008874:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008878:	400b      	ands	r3, r1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <HAL_I2C_Init+0x138>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	1e59      	subs	r1, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	fbb1 f3f3 	udiv	r3, r1, r3
 800888c:	3301      	adds	r3, #1
 800888e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008892:	e051      	b.n	8008938 <HAL_I2C_Init+0x1dc>
 8008894:	2304      	movs	r3, #4
 8008896:	e04f      	b.n	8008938 <HAL_I2C_Init+0x1dc>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d111      	bne.n	80088c4 <HAL_I2C_Init+0x168>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	1e58      	subs	r0, r3, #1
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6859      	ldr	r1, [r3, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	440b      	add	r3, r1
 80088ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80088b2:	3301      	adds	r3, #1
 80088b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	e012      	b.n	80088ea <HAL_I2C_Init+0x18e>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	1e58      	subs	r0, r3, #1
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6859      	ldr	r1, [r3, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	440b      	add	r3, r1
 80088d2:	0099      	lsls	r1, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80088da:	3301      	adds	r3, #1
 80088dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <HAL_I2C_Init+0x196>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e022      	b.n	8008938 <HAL_I2C_Init+0x1dc>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10e      	bne.n	8008918 <HAL_I2C_Init+0x1bc>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	1e58      	subs	r0, r3, #1
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6859      	ldr	r1, [r3, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	440b      	add	r3, r1
 8008908:	fbb0 f3f3 	udiv	r3, r0, r3
 800890c:	3301      	adds	r3, #1
 800890e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008916:	e00f      	b.n	8008938 <HAL_I2C_Init+0x1dc>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	1e58      	subs	r0, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6859      	ldr	r1, [r3, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	440b      	add	r3, r1
 8008926:	0099      	lsls	r1, r3, #2
 8008928:	440b      	add	r3, r1
 800892a:	fbb0 f3f3 	udiv	r3, r0, r3
 800892e:	3301      	adds	r3, #1
 8008930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	6809      	ldr	r1, [r1, #0]
 800893c:	4313      	orrs	r3, r2
 800893e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	69da      	ldr	r2, [r3, #28]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6911      	ldr	r1, [r2, #16]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68d2      	ldr	r2, [r2, #12]
 8008972:	4311      	orrs	r1, r2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6812      	ldr	r2, [r2, #0]
 8008978:	430b      	orrs	r3, r1
 800897a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	000186a0 	.word	0x000186a0
 80089d4:	001e847f 	.word	0x001e847f
 80089d8:	003d08ff 	.word	0x003d08ff
 80089dc:	431bde83 	.word	0x431bde83
 80089e0:	10624dd3 	.word	0x10624dd3

080089e4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089f6:	2b80      	cmp	r3, #128	@ 0x80
 80089f8:	d103      	bne.n	8008a02 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	611a      	str	r2, [r3, #16]
  }
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
	...

08008a10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	817b      	strh	r3, [r7, #10]
 8008a20:	4613      	mov	r3, r2
 8008a22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a24:	f7fe fde6 	bl	80075f4 <HAL_GetTick>
 8008a28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	f040 80e0 	bne.w	8008bf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	2319      	movs	r3, #25
 8008a3e:	2201      	movs	r2, #1
 8008a40:	4970      	ldr	r1, [pc, #448]	@ (8008c04 <HAL_I2C_Master_Transmit+0x1f4>)
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f002 f8e6 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e0d3      	b.n	8008bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_I2C_Master_Transmit+0x50>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e0cc      	b.n	8008bfa <HAL_I2C_Master_Transmit+0x1ea>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d007      	beq.n	8008a86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f042 0201 	orr.w	r2, r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2221      	movs	r2, #33	@ 0x21
 8008a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2210      	movs	r2, #16
 8008aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	893a      	ldrh	r2, [r7, #8]
 8008ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4a50      	ldr	r2, [pc, #320]	@ (8008c08 <HAL_I2C_Master_Transmit+0x1f8>)
 8008ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008ac8:	8979      	ldrh	r1, [r7, #10]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f001 fea8 	bl	800a824 <I2C_MasterRequestWrite>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e08d      	b.n	8008bfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	613b      	str	r3, [r7, #16]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008af4:	e066      	b.n	8008bc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	6a39      	ldr	r1, [r7, #32]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f002 f9a4 	bl	800ae48 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00d      	beq.n	8008b22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d107      	bne.n	8008b1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e06b      	b.n	8008bfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d11b      	bne.n	8008b98 <HAL_I2C_Master_Transmit+0x188>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d017      	beq.n	8008b98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	781a      	ldrb	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	3b01      	subs	r3, #1
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b90:	3b01      	subs	r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	6a39      	ldr	r1, [r7, #32]
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f002 f99b 	bl	800aed8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00d      	beq.n	8008bc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bac:	2b04      	cmp	r3, #4
 8008bae:	d107      	bne.n	8008bc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e01a      	b.n	8008bfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d194      	bne.n	8008af6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e000      	b.n	8008bfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008bf8:	2302      	movs	r3, #2
  }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	00100002 	.word	0x00100002
 8008c08:	ffff0000 	.word	0xffff0000

08008c0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08c      	sub	sp, #48	@ 0x30
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	607a      	str	r2, [r7, #4]
 8008c16:	461a      	mov	r2, r3
 8008c18:	460b      	mov	r3, r1
 8008c1a:	817b      	strh	r3, [r7, #10]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c20:	f7fe fce8 	bl	80075f4 <HAL_GetTick>
 8008c24:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	f040 8217 	bne.w	8009062 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2319      	movs	r3, #25
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	497c      	ldr	r1, [pc, #496]	@ (8008e30 <HAL_I2C_Master_Receive+0x224>)
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f001 ffe8 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e20a      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_I2C_Master_Receive+0x50>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e203      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d007      	beq.n	8008c82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0201 	orr.w	r2, r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2222      	movs	r2, #34	@ 0x22
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2210      	movs	r2, #16
 8008c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	893a      	ldrh	r2, [r7, #8]
 8008cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8008e34 <HAL_I2C_Master_Receive+0x228>)
 8008cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008cc4:	8979      	ldrh	r1, [r7, #10]
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f001 fe2c 	bl	800a928 <I2C_MasterRequestRead>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e1c4      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d113      	bne.n	8008d0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	623b      	str	r3, [r7, #32]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	623b      	str	r3, [r7, #32]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	623b      	str	r3, [r7, #32]
 8008cf6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	e198      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d11b      	bne.n	8008d4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d22:	2300      	movs	r3, #0
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	61fb      	str	r3, [r7, #28]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	61fb      	str	r3, [r7, #28]
 8008d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e178      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d11b      	bne.n	8008d8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d72:	2300      	movs	r3, #0
 8008d74:	61bb      	str	r3, [r7, #24]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	61bb      	str	r3, [r7, #24]
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	e158      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008d98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	617b      	str	r3, [r7, #20]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008db0:	e144      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	f200 80f1 	bhi.w	8008f9e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d123      	bne.n	8008e0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f002 f8ff 	bl	800afcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e145      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	691a      	ldr	r2, [r3, #16]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e0a:	e117      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d14e      	bne.n	8008eb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4906      	ldr	r1, [pc, #24]	@ (8008e38 <HAL_I2C_Master_Receive+0x22c>)
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f001 fef8 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d008      	beq.n	8008e3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e11a      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
 8008e2e:	bf00      	nop
 8008e30:	00100002 	.word	0x00100002
 8008e34:	ffff0000 	.word	0xffff0000
 8008e38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691a      	ldr	r2, [r3, #16]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e88:	b2d2      	uxtb	r2, r2
 8008e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008eb0:	e0c4      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb8:	2200      	movs	r2, #0
 8008eba:	496c      	ldr	r1, [pc, #432]	@ (800906c <HAL_I2C_Master_Receive+0x460>)
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f001 fea9 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0cb      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee6:	b2d2      	uxtb	r2, r2
 8008ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	2200      	movs	r2, #0
 8008f16:	4955      	ldr	r1, [pc, #340]	@ (800906c <HAL_I2C_Master_Receive+0x460>)
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f001 fe7b 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e09d      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691a      	ldr	r2, [r3, #16]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f42:	b2d2      	uxtb	r2, r2
 8008f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f74:	b2d2      	uxtb	r2, r2
 8008f76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f86:	3b01      	subs	r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f9c:	e04e      	b.n	800903c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fa0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f002 f812 	bl	800afcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e058      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	691a      	ldr	r2, [r3, #16]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d124      	bne.n	800903c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d107      	bne.n	800900a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009008:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009040:	2b00      	cmp	r3, #0
 8009042:	f47f aeb6 	bne.w	8008db2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	e000      	b.n	8009064 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009062:	2302      	movs	r3, #2
  }
}
 8009064:	4618      	mov	r0, r3
 8009066:	3728      	adds	r7, #40	@ 0x28
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	00010004 	.word	0x00010004

08009070 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009088:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009090:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009098:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b10      	cmp	r3, #16
 800909e:	d003      	beq.n	80090a8 <HAL_I2C_EV_IRQHandler+0x38>
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	2b40      	cmp	r3, #64	@ 0x40
 80090a4:	f040 80b1 	bne.w	800920a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10d      	bne.n	80090de <HAL_I2C_EV_IRQHandler+0x6e>
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80090c8:	d003      	beq.n	80090d2 <HAL_I2C_EV_IRQHandler+0x62>
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80090d0:	d101      	bne.n	80090d6 <HAL_I2C_EV_IRQHandler+0x66>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <HAL_I2C_EV_IRQHandler+0x68>
 80090d6:	2300      	movs	r3, #0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f000 8114 	beq.w	8009306 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_I2C_EV_IRQHandler+0x90>
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 fff6 	bl	800b0e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fd76 	bl	8009bea <I2C_Master_SB>
 80090fe:	e083      	b.n	8009208 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d008      	beq.n	800911c <HAL_I2C_EV_IRQHandler+0xac>
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fdee 	bl	8009cf6 <I2C_Master_ADD10>
 800911a:	e075      	b.n	8009208 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <HAL_I2C_EV_IRQHandler+0xc8>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fe0a 	bl	8009d4a <I2C_Master_ADDR>
 8009136:	e067      	b.n	8009208 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	d036      	beq.n	80091b0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800914c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009150:	f000 80db 	beq.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00d      	beq.n	800917a <HAL_I2C_EV_IRQHandler+0x10a>
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <HAL_I2C_EV_IRQHandler+0x10a>
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d103      	bne.n	800917a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f9d6 	bl	8009524 <I2C_MasterTransmit_TXE>
 8009178:	e046      	b.n	8009208 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80c2 	beq.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80bc 	beq.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	2b21      	cmp	r3, #33	@ 0x21
 8009196:	d103      	bne.n	80091a0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fa5f 	bl	800965c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800919e:	e0b4      	b.n	800930a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	f040 80b1 	bne.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 facd 	bl	8009748 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091ae:	e0ac      	b.n	800930a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091be:	f000 80a4 	beq.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00d      	beq.n	80091e8 <HAL_I2C_EV_IRQHandler+0x178>
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d008      	beq.n	80091e8 <HAL_I2C_EV_IRQHandler+0x178>
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	f003 0304 	and.w	r3, r3, #4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d103      	bne.n	80091e8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fb49 	bl	8009878 <I2C_MasterReceive_RXNE>
 80091e6:	e00f      	b.n	8009208 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	f003 0304 	and.w	r3, r3, #4
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 808b 	beq.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8085 	beq.w	800930a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fc01 	bl	8009a08 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009206:	e080      	b.n	800930a <HAL_I2C_EV_IRQHandler+0x29a>
 8009208:	e07f      	b.n	800930a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d004      	beq.n	800921c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	61fb      	str	r3, [r7, #28]
 800921a:	e007      	b.n	800922c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d011      	beq.n	800925a <HAL_I2C_EV_IRQHandler+0x1ea>
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00c      	beq.n	800925a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009250:	69b9      	ldr	r1, [r7, #24]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 ffc8 	bl	800a1e8 <I2C_Slave_ADDR>
 8009258:	e05a      	b.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <HAL_I2C_EV_IRQHandler+0x206>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f802 	bl	800a278 <I2C_Slave_STOPF>
 8009274:	e04c      	b.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b21      	cmp	r3, #33	@ 0x21
 800927a:	d002      	beq.n	8009282 <HAL_I2C_EV_IRQHandler+0x212>
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b29      	cmp	r3, #41	@ 0x29
 8009280:	d120      	bne.n	80092c4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00d      	beq.n	80092a8 <HAL_I2C_EV_IRQHandler+0x238>
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <HAL_I2C_EV_IRQHandler+0x238>
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fee3 	bl	800a06c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092a6:	e032      	b.n	800930e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	f003 0304 	and.w	r3, r3, #4
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d02d      	beq.n	800930e <HAL_I2C_EV_IRQHandler+0x29e>
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d028      	beq.n	800930e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 ff12 	bl	800a0e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092c2:	e024      	b.n	800930e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00d      	beq.n	80092ea <HAL_I2C_EV_IRQHandler+0x27a>
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d008      	beq.n	80092ea <HAL_I2C_EV_IRQHandler+0x27a>
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d103      	bne.n	80092ea <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 ff20 	bl	800a128 <I2C_SlaveReceive_RXNE>
 80092e8:	e012      	b.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00d      	beq.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d008      	beq.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 ff50 	bl	800a1a4 <I2C_SlaveReceive_BTF>
 8009304:	e004      	b.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8009306:	bf00      	nop
 8009308:	e002      	b.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800930e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009310:	3720      	adds	r7, #32
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b08a      	sub	sp, #40	@ 0x28
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009338:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00d      	beq.n	8009360 <HAL_I2C_ER_IRQHandler+0x4a>
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d008      	beq.n	8009360 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800934e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009350:	f043 0301 	orr.w	r3, r3, #1
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800935e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <HAL_I2C_ER_IRQHandler+0x70>
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	f043 0302 	orr.w	r3, r3, #2
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8009384:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800938c:	2b00      	cmp	r3, #0
 800938e:	d03e      	beq.n	800940e <HAL_I2C_ER_IRQHandler+0xf8>
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009396:	2b00      	cmp	r3, #0
 8009398:	d039      	beq.n	800940e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800939a:	7efb      	ldrb	r3, [r7, #27]
 800939c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80093b4:	7ebb      	ldrb	r3, [r7, #26]
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d112      	bne.n	80093e0 <HAL_I2C_ER_IRQHandler+0xca>
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10f      	bne.n	80093e0 <HAL_I2C_ER_IRQHandler+0xca>
 80093c0:	7cfb      	ldrb	r3, [r7, #19]
 80093c2:	2b21      	cmp	r3, #33	@ 0x21
 80093c4:	d008      	beq.n	80093d8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80093c6:	7cfb      	ldrb	r3, [r7, #19]
 80093c8:	2b29      	cmp	r3, #41	@ 0x29
 80093ca:	d005      	beq.n	80093d8 <HAL_I2C_ER_IRQHandler+0xc2>
 80093cc:	7cfb      	ldrb	r3, [r7, #19]
 80093ce:	2b28      	cmp	r3, #40	@ 0x28
 80093d0:	d106      	bne.n	80093e0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2b21      	cmp	r3, #33	@ 0x21
 80093d6:	d103      	bne.n	80093e0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f87d 	bl	800a4d8 <I2C_Slave_AF>
 80093de:	e016      	b.n	800940e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80093e8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	f043 0304 	orr.w	r3, r3, #4
 80093f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80093f2:	7efb      	ldrb	r3, [r7, #27]
 80093f4:	2b10      	cmp	r3, #16
 80093f6:	d002      	beq.n	80093fe <HAL_I2C_ER_IRQHandler+0xe8>
 80093f8:	7efb      	ldrb	r3, [r7, #27]
 80093fa:	2b40      	cmp	r3, #64	@ 0x40
 80093fc:	d107      	bne.n	800940e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800940c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00d      	beq.n	8009434 <HAL_I2C_ER_IRQHandler+0x11e>
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009424:	f043 0308 	orr.w	r3, r3, #8
 8009428:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8009432:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	d008      	beq.n	800944c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	431a      	orrs	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 f8ba 	bl	800a5c0 <I2C_ITError>
  }
}
 800944c:	bf00      	nop
 800944e:	3728      	adds	r7, #40	@ 0x28
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	70fb      	strb	r3, [r7, #3]
 80094b0:	4613      	mov	r3, r2
 80094b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009504:	bf00      	nop
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009532:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800953a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009540:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009546:	2b00      	cmp	r3, #0
 8009548:	d150      	bne.n	80095ec <I2C_MasterTransmit_TXE+0xc8>
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	2b21      	cmp	r3, #33	@ 0x21
 800954e:	d14d      	bne.n	80095ec <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b08      	cmp	r3, #8
 8009554:	d01d      	beq.n	8009592 <I2C_MasterTransmit_TXE+0x6e>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b20      	cmp	r3, #32
 800955a:	d01a      	beq.n	8009592 <I2C_MasterTransmit_TXE+0x6e>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009562:	d016      	beq.n	8009592 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009572:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2211      	movs	r2, #17
 8009578:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff ff62 	bl	8009454 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009590:	e060      	b.n	8009654 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80095a0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b40      	cmp	r3, #64	@ 0x40
 80095ca:	d107      	bne.n	80095dc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff ff7d 	bl	80094d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80095da:	e03b      	b.n	8009654 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff ff35 	bl	8009454 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80095ea:	e033      	b.n	8009654 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b21      	cmp	r3, #33	@ 0x21
 80095f0:	d005      	beq.n	80095fe <I2C_MasterTransmit_TXE+0xda>
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
 80095f4:	2b40      	cmp	r3, #64	@ 0x40
 80095f6:	d12d      	bne.n	8009654 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b22      	cmp	r3, #34	@ 0x22
 80095fc:	d12a      	bne.n	8009654 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009602:	b29b      	uxth	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d108      	bne.n	800961a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009616:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009618:	e01c      	b.n	8009654 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b40      	cmp	r3, #64	@ 0x40
 8009624:	d103      	bne.n	800962e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f88e 	bl	8009748 <I2C_MemoryTransmit_TXE_BTF>
}
 800962c:	e012      	b.n	8009654 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	3b01      	subs	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009652:	e7ff      	b.n	8009654 <I2C_MasterTransmit_TXE+0x130>
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b21      	cmp	r3, #33	@ 0x21
 8009674:	d164      	bne.n	8009740 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800967a:	b29b      	uxth	r3, r3
 800967c:	2b00      	cmp	r3, #0
 800967e:	d012      	beq.n	80096a6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009684:	781a      	ldrb	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80096a4:	e04c      	b.n	8009740 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d01d      	beq.n	80096e8 <I2C_MasterTransmit_BTF+0x8c>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b20      	cmp	r3, #32
 80096b0:	d01a      	beq.n	80096e8 <I2C_MasterTransmit_BTF+0x8c>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80096b8:	d016      	beq.n	80096e8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685a      	ldr	r2, [r3, #4]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80096c8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2211      	movs	r2, #17
 80096ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff feb7 	bl	8009454 <HAL_I2C_MasterTxCpltCallback>
}
 80096e6:	e02b      	b.n	8009740 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80096f6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009706:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b40      	cmp	r3, #64	@ 0x40
 8009720:	d107      	bne.n	8009732 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff fed2 	bl	80094d4 <HAL_I2C_MemTxCpltCallback>
}
 8009730:	e006      	b.n	8009740 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fe8a 	bl	8009454 <HAL_I2C_MasterTxCpltCallback>
}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009756:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800975c:	2b00      	cmp	r3, #0
 800975e:	d11d      	bne.n	800979c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009764:	2b01      	cmp	r3, #1
 8009766:	d10b      	bne.n	8009780 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800976c:	b2da      	uxtb	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009778:	1c9a      	adds	r2, r3, #2
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800977e:	e077      	b.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009784:	b29b      	uxth	r3, r3
 8009786:	121b      	asrs	r3, r3, #8
 8009788:	b2da      	uxtb	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800979a:	e069      	b.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d10b      	bne.n	80097bc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80097ba:	e059      	b.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d152      	bne.n	800986a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	2b22      	cmp	r3, #34	@ 0x22
 80097c8:	d10d      	bne.n	80097e6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097d8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80097e4:	e044      	b.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d015      	beq.n	800981c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	2b21      	cmp	r3, #33	@ 0x21
 80097f4:	d112      	bne.n	800981c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fa:	781a      	ldrb	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009806:	1c5a      	adds	r2, r3, #1
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009810:	b29b      	uxth	r3, r3
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800981a:	e029      	b.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d124      	bne.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	2b21      	cmp	r3, #33	@ 0x21
 800982a:	d121      	bne.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800983a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800984a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff fe36 	bl	80094d4 <HAL_I2C_MemTxCpltCallback>
}
 8009868:	e002      	b.n	8009870 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f7ff f8ba 	bl	80089e4 <I2C_Flush_DR>
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009886:	b2db      	uxtb	r3, r3
 8009888:	2b22      	cmp	r3, #34	@ 0x22
 800988a:	f040 80b9 	bne.w	8009a00 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009892:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009898:	b29b      	uxth	r3, r3
 800989a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d921      	bls.n	80098e6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ac:	b2d2      	uxtb	r2, r2
 80098ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098be:	b29b      	uxth	r3, r3
 80098c0:	3b01      	subs	r3, #1
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	f040 8096 	bne.w	8009a00 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098e2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80098e4:	e08c      	b.n	8009a00 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d07f      	beq.n	80099ee <I2C_MasterReceive_RXNE+0x176>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d002      	beq.n	80098fa <I2C_MasterReceive_RXNE+0x82>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d179      	bne.n	80099ee <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fb34 	bl	800af68 <I2C_WaitOnSTOPRequestThroughIT>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d14c      	bne.n	80099a0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009914:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009924:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691a      	ldr	r2, [r3, #16]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009930:	b2d2      	uxtb	r2, r2
 8009932:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b40      	cmp	r3, #64	@ 0x40
 800995e:	d10a      	bne.n	8009976 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7ff fdba 	bl	80094e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009974:	e044      	b.n	8009a00 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b08      	cmp	r3, #8
 8009982:	d002      	beq.n	800998a <I2C_MasterReceive_RXNE+0x112>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b20      	cmp	r3, #32
 8009988:	d103      	bne.n	8009992 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009990:	e002      	b.n	8009998 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2212      	movs	r2, #18
 8009996:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fd65 	bl	8009468 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800999e:	e02f      	b.n	8009a00 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80099ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	691a      	ldr	r2, [r3, #16]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ba:	b2d2      	uxtb	r2, r2
 80099bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2220      	movs	r2, #32
 80099da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff fd88 	bl	80094fc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80099ec:	e008      	b.n	8009a00 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099fc:	605a      	str	r2, [r3, #4]
}
 80099fe:	e7ff      	b.n	8009a00 <I2C_MasterReceive_RXNE+0x188>
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d11b      	bne.n	8009a58 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a2e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	691a      	ldr	r2, [r3, #16]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	b2d2      	uxtb	r2, r2
 8009a3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009a56:	e0c4      	b.n	8009be2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d129      	bne.n	8009ab6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a70:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d00a      	beq.n	8009a8e <I2C_MasterReceive_BTF+0x86>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d007      	beq.n	8009a8e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a8c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	3b01      	subs	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009ab4:	e095      	b.n	8009be2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d17d      	bne.n	8009bbc <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d002      	beq.n	8009acc <I2C_MasterReceive_BTF+0xc4>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d108      	bne.n	8009ade <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	e016      	b.n	8009b0c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	d002      	beq.n	8009aea <I2C_MasterReceive_BTF+0xe2>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d108      	bne.n	8009afc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	e007      	b.n	8009b0c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691a      	ldr	r2, [r3, #16]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8009b66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b40      	cmp	r3, #64	@ 0x40
 8009b7a:	d10a      	bne.n	8009b92 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fcac 	bl	80094e8 <HAL_I2C_MemRxCpltCallback>
}
 8009b90:	e027      	b.n	8009be2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d002      	beq.n	8009ba6 <I2C_MasterReceive_BTF+0x19e>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	d103      	bne.n	8009bae <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8009bac:	e002      	b.n	8009bb4 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2212      	movs	r2, #18
 8009bb2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fc57 	bl	8009468 <HAL_I2C_MasterRxCpltCallback>
}
 8009bba:	e012      	b.n	8009be2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	691a      	ldr	r2, [r3, #16]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009be2:	bf00      	nop
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b40      	cmp	r3, #64	@ 0x40
 8009bfc:	d117      	bne.n	8009c2e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d109      	bne.n	8009c1a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009c16:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009c18:	e067      	b.n	8009cea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	611a      	str	r2, [r3, #16]
}
 8009c2c:	e05d      	b.n	8009cea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c36:	d133      	bne.n	8009ca0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b21      	cmp	r3, #33	@ 0x21
 8009c42:	d109      	bne.n	8009c58 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009c54:	611a      	str	r2, [r3, #16]
 8009c56:	e008      	b.n	8009c6a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f043 0301 	orr.w	r3, r3, #1
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d004      	beq.n	8009c7c <I2C_Master_SB+0x92>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d032      	beq.n	8009cea <I2C_Master_SB+0x100>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02d      	beq.n	8009cea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c9c:	605a      	str	r2, [r3, #4]
}
 8009c9e:	e024      	b.n	8009cea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10e      	bne.n	8009cc6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	11db      	asrs	r3, r3, #7
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	f003 0306 	and.w	r3, r3, #6
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f063 030f 	orn	r3, r3, #15
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	611a      	str	r2, [r3, #16]
}
 8009cc4:	e011      	b.n	8009cea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d10d      	bne.n	8009cea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	11db      	asrs	r3, r3, #7
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	f003 0306 	and.w	r3, r3, #6
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f063 030e 	orn	r3, r3, #14
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	611a      	str	r2, [r3, #16]
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d004      	beq.n	8009d1c <I2C_Master_ADD10+0x26>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d108      	bne.n	8009d2e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00c      	beq.n	8009d3e <I2C_Master_ADD10+0x48>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d007      	beq.n	8009d3e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d3c:	605a      	str	r2, [r3, #4]
  }
}
 8009d3e:	bf00      	nop
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b091      	sub	sp, #68	@ 0x44
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d66:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b22      	cmp	r3, #34	@ 0x22
 8009d72:	f040 8169 	bne.w	800a048 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10f      	bne.n	8009d9e <I2C_Master_ADDR+0x54>
 8009d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009d82:	2b40      	cmp	r3, #64	@ 0x40
 8009d84:	d10b      	bne.n	8009d9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d86:	2300      	movs	r3, #0
 8009d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9c:	e160      	b.n	800a060 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11d      	bne.n	8009de2 <I2C_Master_ADDR+0x98>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009dae:	d118      	bne.n	8009de2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009db0:	2300      	movs	r3, #0
 8009db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009dd4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	651a      	str	r2, [r3, #80]	@ 0x50
 8009de0:	e13e      	b.n	800a060 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d113      	bne.n	8009e14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dec:	2300      	movs	r3, #0
 8009dee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	e115      	b.n	800a040 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	f040 808a 	bne.w	8009f34 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009e26:	d137      	bne.n	8009e98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e46:	d113      	bne.n	8009e70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e58:	2300      	movs	r3, #0
 8009e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6e:	e0e7      	b.n	800a040 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e70:	2300      	movs	r3, #0
 8009e72:	623b      	str	r3, [r7, #32]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	623b      	str	r3, [r7, #32]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	623b      	str	r3, [r7, #32]
 8009e84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e0d3      	b.n	800a040 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	d02e      	beq.n	8009efc <I2C_Master_ADDR+0x1b2>
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d02b      	beq.n	8009efc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea6:	2b12      	cmp	r3, #18
 8009ea8:	d102      	bne.n	8009eb0 <I2C_Master_ADDR+0x166>
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d125      	bne.n	8009efc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d00e      	beq.n	8009ed4 <I2C_Master_ADDR+0x18a>
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d00b      	beq.n	8009ed4 <I2C_Master_ADDR+0x18a>
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d008      	beq.n	8009ed4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e007      	b.n	8009ee4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ee2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	61fb      	str	r3, [r7, #28]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	e0a1      	b.n	800a040 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	61bb      	str	r3, [r7, #24]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	61bb      	str	r3, [r7, #24]
 8009f20:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e085      	b.n	800a040 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d14d      	bne.n	8009fda <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d016      	beq.n	8009f72 <I2C_Master_ADDR+0x228>
 8009f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d013      	beq.n	8009f72 <I2C_Master_ADDR+0x228>
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	2b10      	cmp	r3, #16
 8009f4e:	d010      	beq.n	8009f72 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f5e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e007      	b.n	8009f82 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f80:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f90:	d117      	bne.n	8009fc2 <I2C_Master_ADDR+0x278>
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f98:	d00b      	beq.n	8009fb2 <I2C_Master_ADDR+0x268>
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d008      	beq.n	8009fb2 <I2C_Master_ADDR+0x268>
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d005      	beq.n	8009fb2 <I2C_Master_ADDR+0x268>
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d002      	beq.n	8009fb2 <I2C_Master_ADDR+0x268>
 8009fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	d107      	bne.n	8009fc2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009fc0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	617b      	str	r3, [r7, #20]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	617b      	str	r3, [r7, #20]
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	e032      	b.n	800a040 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009fe8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ff8:	d117      	bne.n	800a02a <I2C_Master_ADDR+0x2e0>
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a000:	d00b      	beq.n	800a01a <I2C_Master_ADDR+0x2d0>
 800a002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a004:	2b01      	cmp	r3, #1
 800a006:	d008      	beq.n	800a01a <I2C_Master_ADDR+0x2d0>
 800a008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00a:	2b08      	cmp	r3, #8
 800a00c:	d005      	beq.n	800a01a <I2C_Master_ADDR+0x2d0>
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	2b10      	cmp	r3, #16
 800a012:	d002      	beq.n	800a01a <I2C_Master_ADDR+0x2d0>
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	2b20      	cmp	r3, #32
 800a018:	d107      	bne.n	800a02a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a028:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a02a:	2300      	movs	r3, #0
 800a02c:	613b      	str	r3, [r7, #16]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	695b      	ldr	r3, [r3, #20]
 800a034:	613b      	str	r3, [r7, #16]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a046:	e00b      	b.n	800a060 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
}
 800a05e:	e7ff      	b.n	800a060 <I2C_Master_ADDR+0x316>
 800a060:	bf00      	nop
 800a062:	3744      	adds	r7, #68	@ 0x44
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a07a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a080:	b29b      	uxth	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d02b      	beq.n	800a0de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a08a:	781a      	ldrb	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d114      	bne.n	800a0de <I2C_SlaveTransmit_TXE+0x72>
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b29      	cmp	r3, #41	@ 0x29
 800a0b8:	d111      	bne.n	800a0de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2221      	movs	r2, #33	@ 0x21
 800a0ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2228      	movs	r2, #40	@ 0x28
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff f9cf 	bl	800947c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d011      	beq.n	800a11c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fc:	781a      	ldrb	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a112:	b29b      	uxth	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a136:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d02c      	beq.n	800a19c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d114      	bne.n	800a19c <I2C_SlaveReceive_RXNE+0x74>
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	2b2a      	cmp	r3, #42	@ 0x2a
 800a176:	d111      	bne.n	800a19c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a186:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2222      	movs	r2, #34	@ 0x22
 800a18c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2228      	movs	r2, #40	@ 0x28
 800a192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7ff f97a 	bl	8009490 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d012      	beq.n	800a1dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c0:	b2d2      	uxtb	r2, r2
 800a1c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a202:	2b28      	cmp	r3, #40	@ 0x28
 800a204:	d125      	bne.n	800a252 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a214:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a220:	2301      	movs	r3, #1
 800a222:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d103      	bne.n	800a236 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	81bb      	strh	r3, [r7, #12]
 800a234:	e002      	b.n	800a23c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800a244:	89ba      	ldrh	r2, [r7, #12]
 800a246:	7bfb      	ldrb	r3, [r7, #15]
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7ff f92a 	bl	80094a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a250:	e00e      	b.n	800a270 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a252:	2300      	movs	r3, #0
 800a254:	60bb      	str	r3, [r7, #8]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	60bb      	str	r3, [r7, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	699b      	ldr	r3, [r3, #24]
 800a264:	60bb      	str	r3, [r7, #8]
 800a266:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800a270:	bf00      	nop
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a286:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a296:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a298:	2300      	movs	r3, #0
 800a29a:	60bb      	str	r3, [r7, #8]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	60bb      	str	r3, [r7, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f042 0201 	orr.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2d4:	d172      	bne.n	800a3bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	2b22      	cmp	r3, #34	@ 0x22
 800a2da:	d002      	beq.n	800a2e2 <I2C_Slave_STOPF+0x6a>
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2e0:	d135      	bne.n	800a34e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d005      	beq.n	800a306 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2fe:	f043 0204 	orr.w	r2, r3, #4
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a314:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fd fb8c 	bl	8007a38 <HAL_DMA_GetState>
 800a320:	4603      	mov	r3, r0
 800a322:	2b01      	cmp	r3, #1
 800a324:	d049      	beq.n	800a3ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32a:	4a69      	ldr	r2, [pc, #420]	@ (800a4d0 <I2C_Slave_STOPF+0x258>)
 800a32c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a332:	4618      	mov	r0, r3
 800a334:	f7fd fb5e 	bl	80079f4 <HAL_DMA_Abort_IT>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d03d      	beq.n	800a3ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a348:	4610      	mov	r0, r2
 800a34a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a34c:	e035      	b.n	800a3ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a360:	b29b      	uxth	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d005      	beq.n	800a372 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a36a:	f043 0204 	orr.w	r2, r3, #4
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a380:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a386:	4618      	mov	r0, r3
 800a388:	f7fd fb56 	bl	8007a38 <HAL_DMA_GetState>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d014      	beq.n	800a3bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a396:	4a4e      	ldr	r2, [pc, #312]	@ (800a4d0 <I2C_Slave_STOPF+0x258>)
 800a398:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd fb28 	bl	80079f4 <HAL_DMA_Abort_IT>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d008      	beq.n	800a3bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	e000      	b.n	800a3bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a3ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d03e      	beq.n	800a444 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b04      	cmp	r3, #4
 800a3d2:	d112      	bne.n	800a3fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	695b      	ldr	r3, [r3, #20]
 800a400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a404:	2b40      	cmp	r3, #64	@ 0x40
 800a406:	d112      	bne.n	800a42e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	691a      	ldr	r2, [r3, #16]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a424:	b29b      	uxth	r3, r3
 800a426:	3b01      	subs	r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a43c:	f043 0204 	orr.w	r2, r3, #4
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f8b7 	bl	800a5c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a452:	e039      	b.n	800a4c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	2b2a      	cmp	r3, #42	@ 0x2a
 800a458:	d109      	bne.n	800a46e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2228      	movs	r2, #40	@ 0x28
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff f811 	bl	8009490 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b28      	cmp	r3, #40	@ 0x28
 800a478:	d111      	bne.n	800a49e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a15      	ldr	r2, [pc, #84]	@ (800a4d4 <I2C_Slave_STOPF+0x25c>)
 800a47e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2220      	movs	r2, #32
 800a48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff f812 	bl	80094c0 <HAL_I2C_ListenCpltCallback>
}
 800a49c:	e014      	b.n	800a4c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a2:	2b22      	cmp	r3, #34	@ 0x22
 800a4a4:	d002      	beq.n	800a4ac <I2C_Slave_STOPF+0x234>
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	2b22      	cmp	r3, #34	@ 0x22
 800a4aa:	d10d      	bne.n	800a4c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fe ffe4 	bl	8009490 <HAL_I2C_SlaveRxCpltCallback>
}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	0800aac5 	.word	0x0800aac5
 800a4d4:	ffff0000 	.word	0xffff0000

0800a4d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d002      	beq.n	800a4fa <I2C_Slave_AF+0x22>
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d129      	bne.n	800a54e <I2C_Slave_AF+0x76>
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b28      	cmp	r3, #40	@ 0x28
 800a4fe:	d126      	bne.n	800a54e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a2e      	ldr	r2, [pc, #184]	@ (800a5bc <I2C_Slave_AF+0xe4>)
 800a504:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a514:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a51e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a52e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2220      	movs	r2, #32
 800a53a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7fe ffba 	bl	80094c0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a54c:	e031      	b.n	800a5b2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
 800a550:	2b21      	cmp	r3, #33	@ 0x21
 800a552:	d129      	bne.n	800a5a8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a19      	ldr	r2, [pc, #100]	@ (800a5bc <I2C_Slave_AF+0xe4>)
 800a558:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2221      	movs	r2, #33	@ 0x21
 800a55e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2220      	movs	r2, #32
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a57e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a588:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a598:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7fe fa22 	bl	80089e4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7fe ff6b 	bl	800947c <HAL_I2C_SlaveTxCpltCallback>
}
 800a5a6:	e004      	b.n	800a5b2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a5b0:	615a      	str	r2, [r3, #20]
}
 800a5b2:	bf00      	nop
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	ffff0000 	.word	0xffff0000

0800a5c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	2b10      	cmp	r3, #16
 800a5dc:	d002      	beq.n	800a5e4 <I2C_ITError+0x24>
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	2b40      	cmp	r3, #64	@ 0x40
 800a5e2:	d10a      	bne.n	800a5fa <I2C_ITError+0x3a>
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	2b22      	cmp	r3, #34	@ 0x22
 800a5e8:	d107      	bne.n	800a5fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a600:	2b28      	cmp	r3, #40	@ 0x28
 800a602:	d107      	bne.n	800a614 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2228      	movs	r2, #40	@ 0x28
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a612:	e015      	b.n	800a640 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a61e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a622:	d00a      	beq.n	800a63a <I2C_ITError+0x7a>
 800a624:	7bfb      	ldrb	r3, [r7, #15]
 800a626:	2b60      	cmp	r3, #96	@ 0x60
 800a628:	d007      	beq.n	800a63a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2220      	movs	r2, #32
 800a62e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a64a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a64e:	d162      	bne.n	800a716 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a65e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a664:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d020      	beq.n	800a6b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a672:	4a6a      	ldr	r2, [pc, #424]	@ (800a81c <I2C_ITError+0x25c>)
 800a674:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7fd f9ba 	bl	80079f4 <HAL_DMA_Abort_IT>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 8089 	beq.w	800a79a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0201 	bic.w	r2, r2, #1
 800a696:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	4798      	blx	r3
 800a6ae:	e074      	b.n	800a79a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	4a59      	ldr	r2, [pc, #356]	@ (800a81c <I2C_ITError+0x25c>)
 800a6b6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fd f999 	bl	80079f4 <HAL_DMA_Abort_IT>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d068      	beq.n	800a79a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6d2:	2b40      	cmp	r3, #64	@ 0x40
 800a6d4:	d10b      	bne.n	800a6ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	691a      	ldr	r2, [r3, #16]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	b2d2      	uxtb	r2, r2
 800a6e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f022 0201 	bic.w	r2, r2, #1
 800a6fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2220      	movs	r2, #32
 800a702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a710:	4610      	mov	r0, r2
 800a712:	4798      	blx	r3
 800a714:	e041      	b.n	800a79a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b60      	cmp	r3, #96	@ 0x60
 800a720:	d125      	bne.n	800a76e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a73a:	2b40      	cmp	r3, #64	@ 0x40
 800a73c:	d10b      	bne.n	800a756 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a748:	b2d2      	uxtb	r2, r2
 800a74a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0201 	bic.w	r2, r2, #1
 800a764:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f7fe fed2 	bl	8009510 <HAL_I2C_AbortCpltCallback>
 800a76c:	e015      	b.n	800a79a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a778:	2b40      	cmp	r3, #64	@ 0x40
 800a77a:	d10b      	bne.n	800a794 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7fe feb1 	bl	80094fc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10e      	bne.n	800a7c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d109      	bne.n	800a7c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d104      	bne.n	800a7c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d007      	beq.n	800a7d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a7d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	d113      	bne.n	800a814 <I2C_ITError+0x254>
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	2b28      	cmp	r3, #40	@ 0x28
 800a7f0:	d110      	bne.n	800a814 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a820 <I2C_ITError+0x260>)
 800a7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fe fe56 	bl	80094c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a814:	bf00      	nop
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	0800aac5 	.word	0x0800aac5
 800a820:	ffff0000 	.word	0xffff0000

0800a824 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af02      	add	r7, sp, #8
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	607a      	str	r2, [r7, #4]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	460b      	mov	r3, r1
 800a832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a838:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b08      	cmp	r3, #8
 800a83e:	d006      	beq.n	800a84e <I2C_MasterRequestWrite+0x2a>
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d003      	beq.n	800a84e <I2C_MasterRequestWrite+0x2a>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a84c:	d108      	bne.n	800a860 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	e00b      	b.n	800a878 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a864:	2b12      	cmp	r3, #18
 800a866:	d107      	bne.n	800a878 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a876:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 f9c5 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00d      	beq.n	800a8ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a89a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a89e:	d103      	bne.n	800a8a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e035      	b.n	800a918 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8b4:	d108      	bne.n	800a8c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8b6:	897b      	ldrh	r3, [r7, #10]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a8c4:	611a      	str	r2, [r3, #16]
 800a8c6:	e01b      	b.n	800a900 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a8c8:	897b      	ldrh	r3, [r7, #10]
 800a8ca:	11db      	asrs	r3, r3, #7
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	f003 0306 	and.w	r3, r3, #6
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	f063 030f 	orn	r3, r3, #15
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	490e      	ldr	r1, [pc, #56]	@ (800a920 <I2C_MasterRequestWrite+0xfc>)
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f000 fa0e 	bl	800ad08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e010      	b.n	800a918 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a8f6:	897b      	ldrh	r3, [r7, #10]
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	4907      	ldr	r1, [pc, #28]	@ (800a924 <I2C_MasterRequestWrite+0x100>)
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 f9fe 	bl	800ad08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	00010008 	.word	0x00010008
 800a924:	00010002 	.word	0x00010002

0800a928 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af02      	add	r7, sp, #8
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	607a      	str	r2, [r7, #4]
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	460b      	mov	r3, r1
 800a936:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a94c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b08      	cmp	r3, #8
 800a952:	d006      	beq.n	800a962 <I2C_MasterRequestRead+0x3a>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d003      	beq.n	800a962 <I2C_MasterRequestRead+0x3a>
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a960:	d108      	bne.n	800a974 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a970:	601a      	str	r2, [r3, #0]
 800a972:	e00b      	b.n	800a98c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a978:	2b11      	cmp	r3, #17
 800a97a:	d107      	bne.n	800a98c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a98a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f93b 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00d      	beq.n	800a9c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9b2:	d103      	bne.n	800a9bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e079      	b.n	800aab4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9c8:	d108      	bne.n	800a9dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9ca:	897b      	ldrh	r3, [r7, #10]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	611a      	str	r2, [r3, #16]
 800a9da:	e05f      	b.n	800aa9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a9dc:	897b      	ldrh	r3, [r7, #10]
 800a9de:	11db      	asrs	r3, r3, #7
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	f003 0306 	and.w	r3, r3, #6
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	f063 030f 	orn	r3, r3, #15
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4930      	ldr	r1, [pc, #192]	@ (800aabc <I2C_MasterRequestRead+0x194>)
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 f984 	bl	800ad08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e054      	b.n	800aab4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800aa0a:	897b      	ldrh	r3, [r7, #10]
 800aa0c:	b2da      	uxtb	r2, r3
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	4929      	ldr	r1, [pc, #164]	@ (800aac0 <I2C_MasterRequestRead+0x198>)
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f000 f974 	bl	800ad08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e044      	b.n	800aab4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	613b      	str	r3, [r7, #16]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	613b      	str	r3, [r7, #16]
 800aa3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 f8d9 	bl	800ac14 <I2C_WaitOnFlagUntilTimeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00d      	beq.n	800aa84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa76:	d103      	bne.n	800aa80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa7e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800aa80:	2303      	movs	r3, #3
 800aa82:	e017      	b.n	800aab4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800aa84:	897b      	ldrh	r3, [r7, #10]
 800aa86:	11db      	asrs	r3, r3, #7
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	f003 0306 	and.w	r3, r3, #6
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f063 030e 	orn	r3, r3, #14
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	4907      	ldr	r1, [pc, #28]	@ (800aac0 <I2C_MasterRequestRead+0x198>)
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 f930 	bl	800ad08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	e000      	b.n	800aab4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	00010008 	.word	0x00010008
 800aac0:	00010002 	.word	0x00010002

0800aac4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aacc:	2300      	movs	r3, #0
 800aace:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aadc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800aade:	4b4b      	ldr	r3, [pc, #300]	@ (800ac0c <I2C_DMAAbort+0x148>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	08db      	lsrs	r3, r3, #3
 800aae4:	4a4a      	ldr	r2, [pc, #296]	@ (800ac10 <I2C_DMAAbort+0x14c>)
 800aae6:	fba2 2303 	umull	r2, r3, r2, r3
 800aaea:	0a1a      	lsrs	r2, r3, #8
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	00da      	lsls	r2, r3, #3
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab02:	f043 0220 	orr.w	r2, r3, #32
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800ab0a:	e00a      	b.n	800ab22 <I2C_DMAAbort+0x5e>
    }
    count--;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab20:	d0ea      	beq.n	800aaf8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab2e:	2200      	movs	r2, #0
 800ab30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab3e:	2200      	movs	r2, #0
 800ab40:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2200      	movs	r2, #0
 800ab56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab64:	2200      	movs	r2, #0
 800ab66:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab74:	2200      	movs	r2, #0
 800ab76:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0201 	bic.w	r2, r2, #1
 800ab86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b60      	cmp	r3, #96	@ 0x60
 800ab92:	d10e      	bne.n	800abb2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2200      	movs	r2, #0
 800aba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800abaa:	6978      	ldr	r0, [r7, #20]
 800abac:	f7fe fcb0 	bl	8009510 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800abb0:	e027      	b.n	800ac02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800abb2:	7cfb      	ldrb	r3, [r7, #19]
 800abb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800abb8:	2b28      	cmp	r3, #40	@ 0x28
 800abba:	d117      	bne.n	800abec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800abda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	2200      	movs	r2, #0
 800abe0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2228      	movs	r2, #40	@ 0x28
 800abe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800abea:	e007      	b.n	800abfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2220      	movs	r2, #32
 800abf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800abfc:	6978      	ldr	r0, [r7, #20]
 800abfe:	f7fe fc7d 	bl	80094fc <HAL_I2C_ErrorCallback>
}
 800ac02:	bf00      	nop
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	20000550 	.word	0x20000550
 800ac10:	14f8b589 	.word	0x14f8b589

0800ac14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	603b      	str	r3, [r7, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac24:	e048      	b.n	800acb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac2c:	d044      	beq.n	800acb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac2e:	f7fc fce1 	bl	80075f4 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d302      	bcc.n	800ac44 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d139      	bne.n	800acb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	0c1b      	lsrs	r3, r3, #16
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d10d      	bne.n	800ac6a <I2C_WaitOnFlagUntilTimeout+0x56>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	43da      	mvns	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bf0c      	ite	eq
 800ac60:	2301      	moveq	r3, #1
 800ac62:	2300      	movne	r3, #0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	461a      	mov	r2, r3
 800ac68:	e00c      	b.n	800ac84 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	43da      	mvns	r2, r3
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4013      	ands	r3, r2
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2301      	moveq	r3, #1
 800ac7e:	2300      	movne	r3, #0
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	461a      	mov	r2, r3
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d116      	bne.n	800acb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca4:	f043 0220 	orr.w	r2, r3, #32
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e023      	b.n	800ad00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d10d      	bne.n	800acde <I2C_WaitOnFlagUntilTimeout+0xca>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	43da      	mvns	r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4013      	ands	r3, r2
 800acce:	b29b      	uxth	r3, r3
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	bf0c      	ite	eq
 800acd4:	2301      	moveq	r3, #1
 800acd6:	2300      	movne	r3, #0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	e00c      	b.n	800acf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	43da      	mvns	r2, r3
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	4013      	ands	r3, r2
 800acea:	b29b      	uxth	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	bf0c      	ite	eq
 800acf0:	2301      	moveq	r3, #1
 800acf2:	2300      	movne	r3, #0
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	79fb      	ldrb	r3, [r7, #7]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d093      	beq.n	800ac26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad16:	e071      	b.n	800adfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad26:	d123      	bne.n	800ad70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5c:	f043 0204 	orr.w	r2, r3, #4
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e067      	b.n	800ae40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad76:	d041      	beq.n	800adfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad78:	f7fc fc3c 	bl	80075f4 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d302      	bcc.n	800ad8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d136      	bne.n	800adfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	0c1b      	lsrs	r3, r3, #16
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d10c      	bne.n	800adb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	43da      	mvns	r2, r3
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4013      	ands	r3, r2
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bf14      	ite	ne
 800adaa:	2301      	movne	r3, #1
 800adac:	2300      	moveq	r3, #0
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	e00b      	b.n	800adca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	43da      	mvns	r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4013      	ands	r3, r2
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bf14      	ite	ne
 800adc4:	2301      	movne	r3, #1
 800adc6:	2300      	moveq	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d016      	beq.n	800adfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2220      	movs	r2, #32
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade8:	f043 0220 	orr.w	r2, r3, #32
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e021      	b.n	800ae40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	0c1b      	lsrs	r3, r3, #16
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d10c      	bne.n	800ae20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	695b      	ldr	r3, [r3, #20]
 800ae0c:	43da      	mvns	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	4013      	ands	r3, r2
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bf14      	ite	ne
 800ae18:	2301      	movne	r3, #1
 800ae1a:	2300      	moveq	r3, #0
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	e00b      	b.n	800ae38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699b      	ldr	r3, [r3, #24]
 800ae26:	43da      	mvns	r2, r3
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bf14      	ite	ne
 800ae32:	2301      	movne	r3, #1
 800ae34:	2300      	moveq	r3, #0
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f47f af6d 	bne.w	800ad18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae54:	e034      	b.n	800aec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 f915 	bl	800b086 <I2C_IsAcknowledgeFailed>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e034      	b.n	800aed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae6c:	d028      	beq.n	800aec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae6e:	f7fc fbc1 	bl	80075f4 <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d302      	bcc.n	800ae84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d11d      	bne.n	800aec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae8e:	2b80      	cmp	r3, #128	@ 0x80
 800ae90:	d016      	beq.n	800aec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeac:	f043 0220 	orr.w	r2, r3, #32
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e007      	b.n	800aed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeca:	2b80      	cmp	r3, #128	@ 0x80
 800aecc:	d1c3      	bne.n	800ae56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aee4:	e034      	b.n	800af50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f000 f8cd 	bl	800b086 <I2C_IsAcknowledgeFailed>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	e034      	b.n	800af60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aefc:	d028      	beq.n	800af50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aefe:	f7fc fb79 	bl	80075f4 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11d      	bne.n	800af50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	f003 0304 	and.w	r3, r3, #4
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d016      	beq.n	800af50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2220      	movs	r2, #32
 800af2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3c:	f043 0220 	orr.w	r2, r3, #32
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e007      	b.n	800af60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	f003 0304 	and.w	r3, r3, #4
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d1c3      	bne.n	800aee6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800af74:	4b13      	ldr	r3, [pc, #76]	@ (800afc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	08db      	lsrs	r3, r3, #3
 800af7a:	4a13      	ldr	r2, [pc, #76]	@ (800afc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800af7c:	fba2 2303 	umull	r2, r3, r2, r3
 800af80:	0a1a      	lsrs	r2, r3, #8
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3b01      	subs	r3, #1
 800af8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d107      	bne.n	800afa6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af9a:	f043 0220 	orr.w	r2, r3, #32
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e008      	b.n	800afb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afb4:	d0e9      	beq.n	800af8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	20000550 	.word	0x20000550
 800afc8:	14f8b589 	.word	0x14f8b589

0800afcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800afd8:	e049      	b.n	800b06e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	f003 0310 	and.w	r3, r3, #16
 800afe4:	2b10      	cmp	r3, #16
 800afe6:	d119      	bne.n	800b01c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f06f 0210 	mvn.w	r2, #16
 800aff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2220      	movs	r2, #32
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	e030      	b.n	800b07e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b01c:	f7fc faea 	bl	80075f4 <HAL_GetTick>
 800b020:	4602      	mov	r2, r0
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d302      	bcc.n	800b032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d11d      	bne.n	800b06e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b03c:	2b40      	cmp	r3, #64	@ 0x40
 800b03e:	d016      	beq.n	800b06e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2220      	movs	r2, #32
 800b04a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05a:	f043 0220 	orr.w	r2, r3, #32
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e007      	b.n	800b07e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b078:	2b40      	cmp	r3, #64	@ 0x40
 800b07a:	d1ae      	bne.n	800afda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b086:	b480      	push	{r7}
 800b088:	b083      	sub	sp, #12
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09c:	d11b      	bne.n	800b0d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b0a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c2:	f043 0204 	orr.w	r2, r3, #4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b0f4:	d103      	bne.n	800b0fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b0fc:	e007      	b.n	800b10e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b106:	d102      	bne.n	800b10e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2208      	movs	r2, #8
 800b10c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b10e:	bf00      	nop
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
	...

0800b11c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e267      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	d075      	beq.n	800b226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b13a:	4b88      	ldr	r3, [pc, #544]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f003 030c 	and.w	r3, r3, #12
 800b142:	2b04      	cmp	r3, #4
 800b144:	d00c      	beq.n	800b160 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b146:	4b85      	ldr	r3, [pc, #532]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800b14e:	2b08      	cmp	r3, #8
 800b150:	d112      	bne.n	800b178 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b152:	4b82      	ldr	r3, [pc, #520]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b15a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b15e:	d10b      	bne.n	800b178 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b160:	4b7e      	ldr	r3, [pc, #504]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d05b      	beq.n	800b224 <HAL_RCC_OscConfig+0x108>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d157      	bne.n	800b224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e242      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b180:	d106      	bne.n	800b190 <HAL_RCC_OscConfig+0x74>
 800b182:	4b76      	ldr	r3, [pc, #472]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a75      	ldr	r2, [pc, #468]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e01d      	b.n	800b1cc <HAL_RCC_OscConfig+0xb0>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b198:	d10c      	bne.n	800b1b4 <HAL_RCC_OscConfig+0x98>
 800b19a:	4b70      	ldr	r3, [pc, #448]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a6f      	ldr	r2, [pc, #444]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	4b6d      	ldr	r3, [pc, #436]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a6c      	ldr	r2, [pc, #432]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	e00b      	b.n	800b1cc <HAL_RCC_OscConfig+0xb0>
 800b1b4:	4b69      	ldr	r3, [pc, #420]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a68      	ldr	r2, [pc, #416]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	4b66      	ldr	r3, [pc, #408]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a65      	ldr	r2, [pc, #404]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b1ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d013      	beq.n	800b1fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1d4:	f7fc fa0e 	bl	80075f4 <HAL_GetTick>
 800b1d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1da:	e008      	b.n	800b1ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1dc:	f7fc fa0a 	bl	80075f4 <HAL_GetTick>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	2b64      	cmp	r3, #100	@ 0x64
 800b1e8:	d901      	bls.n	800b1ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e207      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ee:	4b5b      	ldr	r3, [pc, #364]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0f0      	beq.n	800b1dc <HAL_RCC_OscConfig+0xc0>
 800b1fa:	e014      	b.n	800b226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1fc:	f7fc f9fa 	bl	80075f4 <HAL_GetTick>
 800b200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b202:	e008      	b.n	800b216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b204:	f7fc f9f6 	bl	80075f4 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	2b64      	cmp	r3, #100	@ 0x64
 800b210:	d901      	bls.n	800b216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	e1f3      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b216:	4b51      	ldr	r3, [pc, #324]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1f0      	bne.n	800b204 <HAL_RCC_OscConfig+0xe8>
 800b222:	e000      	b.n	800b226 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0302 	and.w	r3, r3, #2
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d063      	beq.n	800b2fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b232:	4b4a      	ldr	r3, [pc, #296]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f003 030c 	and.w	r3, r3, #12
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00b      	beq.n	800b256 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b23e:	4b47      	ldr	r3, [pc, #284]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800b246:	2b08      	cmp	r3, #8
 800b248:	d11c      	bne.n	800b284 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b24a:	4b44      	ldr	r3, [pc, #272]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d116      	bne.n	800b284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b256:	4b41      	ldr	r3, [pc, #260]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <HAL_RCC_OscConfig+0x152>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d001      	beq.n	800b26e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e1c7      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b26e:	4b3b      	ldr	r3, [pc, #236]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	00db      	lsls	r3, r3, #3
 800b27c:	4937      	ldr	r1, [pc, #220]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b282:	e03a      	b.n	800b2fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d020      	beq.n	800b2ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b28c:	4b34      	ldr	r3, [pc, #208]	@ (800b360 <HAL_RCC_OscConfig+0x244>)
 800b28e:	2201      	movs	r2, #1
 800b290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b292:	f7fc f9af 	bl	80075f4 <HAL_GetTick>
 800b296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b298:	e008      	b.n	800b2ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b29a:	f7fc f9ab 	bl	80075f4 <HAL_GetTick>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d901      	bls.n	800b2ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e1a8      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0f0      	beq.n	800b29a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b8:	4b28      	ldr	r3, [pc, #160]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	4925      	ldr	r1, [pc, #148]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	600b      	str	r3, [r1, #0]
 800b2cc:	e015      	b.n	800b2fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2ce:	4b24      	ldr	r3, [pc, #144]	@ (800b360 <HAL_RCC_OscConfig+0x244>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d4:	f7fc f98e 	bl	80075f4 <HAL_GetTick>
 800b2d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2da:	e008      	b.n	800b2ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2dc:	f7fc f98a 	bl	80075f4 <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	2b02      	cmp	r3, #2
 800b2e8:	d901      	bls.n	800b2ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e187      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1f0      	bne.n	800b2dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0308 	and.w	r3, r3, #8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d036      	beq.n	800b374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695b      	ldr	r3, [r3, #20]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d016      	beq.n	800b33c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b30e:	4b15      	ldr	r3, [pc, #84]	@ (800b364 <HAL_RCC_OscConfig+0x248>)
 800b310:	2201      	movs	r2, #1
 800b312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b314:	f7fc f96e 	bl	80075f4 <HAL_GetTick>
 800b318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b31a:	e008      	b.n	800b32e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b31c:	f7fc f96a 	bl	80075f4 <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	2b02      	cmp	r3, #2
 800b328:	d901      	bls.n	800b32e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e167      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b32e:	4b0b      	ldr	r3, [pc, #44]	@ (800b35c <HAL_RCC_OscConfig+0x240>)
 800b330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d0f0      	beq.n	800b31c <HAL_RCC_OscConfig+0x200>
 800b33a:	e01b      	b.n	800b374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b33c:	4b09      	ldr	r3, [pc, #36]	@ (800b364 <HAL_RCC_OscConfig+0x248>)
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b342:	f7fc f957 	bl	80075f4 <HAL_GetTick>
 800b346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b348:	e00e      	b.n	800b368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b34a:	f7fc f953 	bl	80075f4 <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	2b02      	cmp	r3, #2
 800b356:	d907      	bls.n	800b368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	e150      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
 800b35c:	40023800 	.word	0x40023800
 800b360:	42470000 	.word	0x42470000
 800b364:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b368:	4b88      	ldr	r3, [pc, #544]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b36a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b36c:	f003 0302 	and.w	r3, r3, #2
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1ea      	bne.n	800b34a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	f000 8097 	beq.w	800b4b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b386:	4b81      	ldr	r3, [pc, #516]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10f      	bne.n	800b3b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b392:	2300      	movs	r3, #0
 800b394:	60bb      	str	r3, [r7, #8]
 800b396:	4b7d      	ldr	r3, [pc, #500]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b39a:	4a7c      	ldr	r2, [pc, #496]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b39c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3a0:	6413      	str	r3, [r2, #64]	@ 0x40
 800b3a2:	4b7a      	ldr	r3, [pc, #488]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3aa:	60bb      	str	r3, [r7, #8]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3b2:	4b77      	ldr	r3, [pc, #476]	@ (800b590 <HAL_RCC_OscConfig+0x474>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d118      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b3be:	4b74      	ldr	r3, [pc, #464]	@ (800b590 <HAL_RCC_OscConfig+0x474>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a73      	ldr	r2, [pc, #460]	@ (800b590 <HAL_RCC_OscConfig+0x474>)
 800b3c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b3ca:	f7fc f913 	bl	80075f4 <HAL_GetTick>
 800b3ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3d0:	e008      	b.n	800b3e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3d2:	f7fc f90f 	bl	80075f4 <HAL_GetTick>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	d901      	bls.n	800b3e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e10c      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3e4:	4b6a      	ldr	r3, [pc, #424]	@ (800b590 <HAL_RCC_OscConfig+0x474>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0f0      	beq.n	800b3d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d106      	bne.n	800b406 <HAL_RCC_OscConfig+0x2ea>
 800b3f8:	4b64      	ldr	r3, [pc, #400]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3fc:	4a63      	ldr	r2, [pc, #396]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b3fe:	f043 0301 	orr.w	r3, r3, #1
 800b402:	6713      	str	r3, [r2, #112]	@ 0x70
 800b404:	e01c      	b.n	800b440 <HAL_RCC_OscConfig+0x324>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	2b05      	cmp	r3, #5
 800b40c:	d10c      	bne.n	800b428 <HAL_RCC_OscConfig+0x30c>
 800b40e:	4b5f      	ldr	r3, [pc, #380]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b412:	4a5e      	ldr	r2, [pc, #376]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b414:	f043 0304 	orr.w	r3, r3, #4
 800b418:	6713      	str	r3, [r2, #112]	@ 0x70
 800b41a:	4b5c      	ldr	r3, [pc, #368]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b41c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b41e:	4a5b      	ldr	r2, [pc, #364]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	6713      	str	r3, [r2, #112]	@ 0x70
 800b426:	e00b      	b.n	800b440 <HAL_RCC_OscConfig+0x324>
 800b428:	4b58      	ldr	r3, [pc, #352]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b42a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b42c:	4a57      	ldr	r2, [pc, #348]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b42e:	f023 0301 	bic.w	r3, r3, #1
 800b432:	6713      	str	r3, [r2, #112]	@ 0x70
 800b434:	4b55      	ldr	r3, [pc, #340]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b438:	4a54      	ldr	r2, [pc, #336]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b43a:	f023 0304 	bic.w	r3, r3, #4
 800b43e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d015      	beq.n	800b474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b448:	f7fc f8d4 	bl	80075f4 <HAL_GetTick>
 800b44c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b44e:	e00a      	b.n	800b466 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b450:	f7fc f8d0 	bl	80075f4 <HAL_GetTick>
 800b454:	4602      	mov	r2, r0
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b45e:	4293      	cmp	r3, r2
 800b460:	d901      	bls.n	800b466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e0cb      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b466:	4b49      	ldr	r3, [pc, #292]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b46a:	f003 0302 	and.w	r3, r3, #2
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d0ee      	beq.n	800b450 <HAL_RCC_OscConfig+0x334>
 800b472:	e014      	b.n	800b49e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b474:	f7fc f8be 	bl	80075f4 <HAL_GetTick>
 800b478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b47a:	e00a      	b.n	800b492 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b47c:	f7fc f8ba 	bl	80075f4 <HAL_GetTick>
 800b480:	4602      	mov	r2, r0
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d901      	bls.n	800b492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e0b5      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b492:	4b3e      	ldr	r3, [pc, #248]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1ee      	bne.n	800b47c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d105      	bne.n	800b4b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b4a4:	4b39      	ldr	r3, [pc, #228]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a8:	4a38      	ldr	r2, [pc, #224]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b4aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 80a1 	beq.w	800b5fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b4ba:	4b34      	ldr	r3, [pc, #208]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	f003 030c 	and.w	r3, r3, #12
 800b4c2:	2b08      	cmp	r3, #8
 800b4c4:	d05c      	beq.n	800b580 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d141      	bne.n	800b552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ce:	4b31      	ldr	r3, [pc, #196]	@ (800b594 <HAL_RCC_OscConfig+0x478>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4d4:	f7fc f88e 	bl	80075f4 <HAL_GetTick>
 800b4d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4da:	e008      	b.n	800b4ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4dc:	f7fc f88a 	bl	80075f4 <HAL_GetTick>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d901      	bls.n	800b4ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	e087      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4ee:	4b27      	ldr	r3, [pc, #156]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1f0      	bne.n	800b4dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69da      	ldr	r2, [r3, #28]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b508:	019b      	lsls	r3, r3, #6
 800b50a:	431a      	orrs	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b510:	085b      	lsrs	r3, r3, #1
 800b512:	3b01      	subs	r3, #1
 800b514:	041b      	lsls	r3, r3, #16
 800b516:	431a      	orrs	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51c:	061b      	lsls	r3, r3, #24
 800b51e:	491b      	ldr	r1, [pc, #108]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b520:	4313      	orrs	r3, r2
 800b522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b524:	4b1b      	ldr	r3, [pc, #108]	@ (800b594 <HAL_RCC_OscConfig+0x478>)
 800b526:	2201      	movs	r2, #1
 800b528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b52a:	f7fc f863 	bl	80075f4 <HAL_GetTick>
 800b52e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b530:	e008      	b.n	800b544 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b532:	f7fc f85f 	bl	80075f4 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d901      	bls.n	800b544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e05c      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b544:	4b11      	ldr	r3, [pc, #68]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0f0      	beq.n	800b532 <HAL_RCC_OscConfig+0x416>
 800b550:	e054      	b.n	800b5fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b552:	4b10      	ldr	r3, [pc, #64]	@ (800b594 <HAL_RCC_OscConfig+0x478>)
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b558:	f7fc f84c 	bl	80075f4 <HAL_GetTick>
 800b55c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b55e:	e008      	b.n	800b572 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b560:	f7fc f848 	bl	80075f4 <HAL_GetTick>
 800b564:	4602      	mov	r2, r0
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d901      	bls.n	800b572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b56e:	2303      	movs	r3, #3
 800b570:	e045      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b572:	4b06      	ldr	r3, [pc, #24]	@ (800b58c <HAL_RCC_OscConfig+0x470>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1f0      	bne.n	800b560 <HAL_RCC_OscConfig+0x444>
 800b57e:	e03d      	b.n	800b5fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d107      	bne.n	800b598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e038      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
 800b58c:	40023800 	.word	0x40023800
 800b590:	40007000 	.word	0x40007000
 800b594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b598:	4b1b      	ldr	r3, [pc, #108]	@ (800b608 <HAL_RCC_OscConfig+0x4ec>)
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d028      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d121      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d11a      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b5ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d111      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5de:	085b      	lsrs	r3, r3, #1
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d107      	bne.n	800b5f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d001      	beq.n	800b5fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e000      	b.n	800b5fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	40023800 	.word	0x40023800

0800b60c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e0cc      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b620:	4b68      	ldr	r3, [pc, #416]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0307 	and.w	r3, r3, #7
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d90c      	bls.n	800b648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b62e:	4b65      	ldr	r3, [pc, #404]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b636:	4b63      	ldr	r3, [pc, #396]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f003 0307 	and.w	r3, r3, #7
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	429a      	cmp	r2, r3
 800b642:	d001      	beq.n	800b648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e0b8      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d020      	beq.n	800b696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0304 	and.w	r3, r3, #4
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d005      	beq.n	800b66c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b660:	4b59      	ldr	r3, [pc, #356]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	4a58      	ldr	r2, [pc, #352]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b66a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0308 	and.w	r3, r3, #8
 800b674:	2b00      	cmp	r3, #0
 800b676:	d005      	beq.n	800b684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b678:	4b53      	ldr	r3, [pc, #332]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	4a52      	ldr	r2, [pc, #328]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b67e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b684:	4b50      	ldr	r3, [pc, #320]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	494d      	ldr	r1, [pc, #308]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b692:	4313      	orrs	r3, r2
 800b694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d044      	beq.n	800b72c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d107      	bne.n	800b6ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6aa:	4b47      	ldr	r3, [pc, #284]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d119      	bne.n	800b6ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e07f      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d003      	beq.n	800b6ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d107      	bne.n	800b6da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e06f      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6da:	4b3b      	ldr	r3, [pc, #236]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e067      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b6ea:	4b37      	ldr	r3, [pc, #220]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f023 0203 	bic.w	r2, r3, #3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	4934      	ldr	r1, [pc, #208]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b6fc:	f7fb ff7a 	bl	80075f4 <HAL_GetTick>
 800b700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b702:	e00a      	b.n	800b71a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b704:	f7fb ff76 	bl	80075f4 <HAL_GetTick>
 800b708:	4602      	mov	r2, r0
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b712:	4293      	cmp	r3, r2
 800b714:	d901      	bls.n	800b71a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e04f      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b71a:	4b2b      	ldr	r3, [pc, #172]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f003 020c 	and.w	r2, r3, #12
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	429a      	cmp	r2, r3
 800b72a:	d1eb      	bne.n	800b704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b72c:	4b25      	ldr	r3, [pc, #148]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0307 	and.w	r3, r3, #7
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	429a      	cmp	r2, r3
 800b738:	d20c      	bcs.n	800b754 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b73a:	4b22      	ldr	r3, [pc, #136]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b742:	4b20      	ldr	r3, [pc, #128]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1b8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0307 	and.w	r3, r3, #7
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d001      	beq.n	800b754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e032      	b.n	800b7ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d008      	beq.n	800b772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b760:	4b19      	ldr	r3, [pc, #100]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	4916      	ldr	r1, [pc, #88]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d009      	beq.n	800b792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b77e:	4b12      	ldr	r3, [pc, #72]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	490e      	ldr	r1, [pc, #56]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b78e:	4313      	orrs	r3, r2
 800b790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b792:	f000 f821 	bl	800b7d8 <HAL_RCC_GetSysClockFreq>
 800b796:	4602      	mov	r2, r0
 800b798:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1bc>)
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	091b      	lsrs	r3, r3, #4
 800b79e:	f003 030f 	and.w	r3, r3, #15
 800b7a2:	490a      	ldr	r1, [pc, #40]	@ (800b7cc <HAL_RCC_ClockConfig+0x1c0>)
 800b7a4:	5ccb      	ldrb	r3, [r1, r3]
 800b7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7aa:	4a09      	ldr	r2, [pc, #36]	@ (800b7d0 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b7ae:	4b09      	ldr	r3, [pc, #36]	@ (800b7d4 <HAL_RCC_ClockConfig+0x1c8>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fb feda 	bl	800756c <HAL_InitTick>

  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	40023c00 	.word	0x40023c00
 800b7c8:	40023800 	.word	0x40023800
 800b7cc:	0800f030 	.word	0x0800f030
 800b7d0:	20000550 	.word	0x20000550
 800b7d4:	20000554 	.word	0x20000554

0800b7d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7dc:	b094      	sub	sp, #80	@ 0x50
 800b7de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7f0:	4b79      	ldr	r3, [pc, #484]	@ (800b9d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f003 030c 	and.w	r3, r3, #12
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d00d      	beq.n	800b818 <HAL_RCC_GetSysClockFreq+0x40>
 800b7fc:	2b08      	cmp	r3, #8
 800b7fe:	f200 80e1 	bhi.w	800b9c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <HAL_RCC_GetSysClockFreq+0x34>
 800b806:	2b04      	cmp	r3, #4
 800b808:	d003      	beq.n	800b812 <HAL_RCC_GetSysClockFreq+0x3a>
 800b80a:	e0db      	b.n	800b9c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b80c:	4b73      	ldr	r3, [pc, #460]	@ (800b9dc <HAL_RCC_GetSysClockFreq+0x204>)
 800b80e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b810:	e0db      	b.n	800b9ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b812:	4b73      	ldr	r3, [pc, #460]	@ (800b9e0 <HAL_RCC_GetSysClockFreq+0x208>)
 800b814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b816:	e0d8      	b.n	800b9ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b818:	4b6f      	ldr	r3, [pc, #444]	@ (800b9d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b820:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b822:	4b6d      	ldr	r3, [pc, #436]	@ (800b9d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d063      	beq.n	800b8f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b82e:	4b6a      	ldr	r3, [pc, #424]	@ (800b9d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	099b      	lsrs	r3, r3, #6
 800b834:	2200      	movs	r2, #0
 800b836:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b838:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b840:	633b      	str	r3, [r7, #48]	@ 0x30
 800b842:	2300      	movs	r3, #0
 800b844:	637b      	str	r3, [r7, #52]	@ 0x34
 800b846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b84a:	4622      	mov	r2, r4
 800b84c:	462b      	mov	r3, r5
 800b84e:	f04f 0000 	mov.w	r0, #0
 800b852:	f04f 0100 	mov.w	r1, #0
 800b856:	0159      	lsls	r1, r3, #5
 800b858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b85c:	0150      	lsls	r0, r2, #5
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4621      	mov	r1, r4
 800b864:	1a51      	subs	r1, r2, r1
 800b866:	6139      	str	r1, [r7, #16]
 800b868:	4629      	mov	r1, r5
 800b86a:	eb63 0301 	sbc.w	r3, r3, r1
 800b86e:	617b      	str	r3, [r7, #20]
 800b870:	f04f 0200 	mov.w	r2, #0
 800b874:	f04f 0300 	mov.w	r3, #0
 800b878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b87c:	4659      	mov	r1, fp
 800b87e:	018b      	lsls	r3, r1, #6
 800b880:	4651      	mov	r1, sl
 800b882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b886:	4651      	mov	r1, sl
 800b888:	018a      	lsls	r2, r1, #6
 800b88a:	4651      	mov	r1, sl
 800b88c:	ebb2 0801 	subs.w	r8, r2, r1
 800b890:	4659      	mov	r1, fp
 800b892:	eb63 0901 	sbc.w	r9, r3, r1
 800b896:	f04f 0200 	mov.w	r2, #0
 800b89a:	f04f 0300 	mov.w	r3, #0
 800b89e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8aa:	4690      	mov	r8, r2
 800b8ac:	4699      	mov	r9, r3
 800b8ae:	4623      	mov	r3, r4
 800b8b0:	eb18 0303 	adds.w	r3, r8, r3
 800b8b4:	60bb      	str	r3, [r7, #8]
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	eb49 0303 	adc.w	r3, r9, r3
 800b8bc:	60fb      	str	r3, [r7, #12]
 800b8be:	f04f 0200 	mov.w	r2, #0
 800b8c2:	f04f 0300 	mov.w	r3, #0
 800b8c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	024b      	lsls	r3, r1, #9
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	024a      	lsls	r2, r1, #9
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8de:	2200      	movs	r2, #0
 800b8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b8e8:	f7f4 fcca 	bl	8000280 <__aeabi_uldivmod>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8f4:	e058      	b.n	800b9a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8f6:	4b38      	ldr	r3, [pc, #224]	@ (800b9d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	099b      	lsrs	r3, r3, #6
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4618      	mov	r0, r3
 800b900:	4611      	mov	r1, r2
 800b902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b906:	623b      	str	r3, [r7, #32]
 800b908:	2300      	movs	r3, #0
 800b90a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b90c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b910:	4642      	mov	r2, r8
 800b912:	464b      	mov	r3, r9
 800b914:	f04f 0000 	mov.w	r0, #0
 800b918:	f04f 0100 	mov.w	r1, #0
 800b91c:	0159      	lsls	r1, r3, #5
 800b91e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b922:	0150      	lsls	r0, r2, #5
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4641      	mov	r1, r8
 800b92a:	ebb2 0a01 	subs.w	sl, r2, r1
 800b92e:	4649      	mov	r1, r9
 800b930:	eb63 0b01 	sbc.w	fp, r3, r1
 800b934:	f04f 0200 	mov.w	r2, #0
 800b938:	f04f 0300 	mov.w	r3, #0
 800b93c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b948:	ebb2 040a 	subs.w	r4, r2, sl
 800b94c:	eb63 050b 	sbc.w	r5, r3, fp
 800b950:	f04f 0200 	mov.w	r2, #0
 800b954:	f04f 0300 	mov.w	r3, #0
 800b958:	00eb      	lsls	r3, r5, #3
 800b95a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b95e:	00e2      	lsls	r2, r4, #3
 800b960:	4614      	mov	r4, r2
 800b962:	461d      	mov	r5, r3
 800b964:	4643      	mov	r3, r8
 800b966:	18e3      	adds	r3, r4, r3
 800b968:	603b      	str	r3, [r7, #0]
 800b96a:	464b      	mov	r3, r9
 800b96c:	eb45 0303 	adc.w	r3, r5, r3
 800b970:	607b      	str	r3, [r7, #4]
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b97e:	4629      	mov	r1, r5
 800b980:	028b      	lsls	r3, r1, #10
 800b982:	4621      	mov	r1, r4
 800b984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b988:	4621      	mov	r1, r4
 800b98a:	028a      	lsls	r2, r1, #10
 800b98c:	4610      	mov	r0, r2
 800b98e:	4619      	mov	r1, r3
 800b990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b992:	2200      	movs	r2, #0
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	61fa      	str	r2, [r7, #28]
 800b998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b99c:	f7f4 fc70 	bl	8000280 <__aeabi_uldivmod>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b9a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	0c1b      	lsrs	r3, r3, #16
 800b9ae:	f003 0303 	and.w	r3, r3, #3
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b9b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b9c2:	e002      	b.n	800b9ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b9c4:	4b05      	ldr	r3, [pc, #20]	@ (800b9dc <HAL_RCC_GetSysClockFreq+0x204>)
 800b9c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b9c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3750      	adds	r7, #80	@ 0x50
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9d6:	bf00      	nop
 800b9d8:	40023800 	.word	0x40023800
 800b9dc:	00f42400 	.word	0x00f42400
 800b9e0:	007a1200 	.word	0x007a1200

0800b9e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b9e8:	4b03      	ldr	r3, [pc, #12]	@ (800b9f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	20000550 	.word	0x20000550

0800b9fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba00:	f7ff fff0 	bl	800b9e4 <HAL_RCC_GetHCLKFreq>
 800ba04:	4602      	mov	r2, r0
 800ba06:	4b05      	ldr	r3, [pc, #20]	@ (800ba1c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	0a9b      	lsrs	r3, r3, #10
 800ba0c:	f003 0307 	and.w	r3, r3, #7
 800ba10:	4903      	ldr	r1, [pc, #12]	@ (800ba20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba12:	5ccb      	ldrb	r3, [r1, r3]
 800ba14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	40023800 	.word	0x40023800
 800ba20:	0800f040 	.word	0x0800f040

0800ba24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ba28:	f7ff ffdc 	bl	800b9e4 <HAL_RCC_GetHCLKFreq>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	4b05      	ldr	r3, [pc, #20]	@ (800ba44 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	0b5b      	lsrs	r3, r3, #13
 800ba34:	f003 0307 	and.w	r3, r3, #7
 800ba38:	4903      	ldr	r1, [pc, #12]	@ (800ba48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ba3a:	5ccb      	ldrb	r3, [r1, r3]
 800ba3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	40023800 	.word	0x40023800
 800ba48:	0800f040 	.word	0x0800f040

0800ba4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e041      	b.n	800bae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7fa fe68 	bl	8006748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	f000 fa70 	bl	800bf70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2201      	movs	r2, #1
 800bacc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d001      	beq.n	800bb04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e044      	b.n	800bb8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2202      	movs	r2, #2
 800bb08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f042 0201 	orr.w	r2, r2, #1
 800bb1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a1e      	ldr	r2, [pc, #120]	@ (800bb9c <HAL_TIM_Base_Start_IT+0xb0>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d018      	beq.n	800bb58 <HAL_TIM_Base_Start_IT+0x6c>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb2e:	d013      	beq.n	800bb58 <HAL_TIM_Base_Start_IT+0x6c>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a1a      	ldr	r2, [pc, #104]	@ (800bba0 <HAL_TIM_Base_Start_IT+0xb4>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d00e      	beq.n	800bb58 <HAL_TIM_Base_Start_IT+0x6c>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a19      	ldr	r2, [pc, #100]	@ (800bba4 <HAL_TIM_Base_Start_IT+0xb8>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d009      	beq.n	800bb58 <HAL_TIM_Base_Start_IT+0x6c>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a17      	ldr	r2, [pc, #92]	@ (800bba8 <HAL_TIM_Base_Start_IT+0xbc>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d004      	beq.n	800bb58 <HAL_TIM_Base_Start_IT+0x6c>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a16      	ldr	r2, [pc, #88]	@ (800bbac <HAL_TIM_Base_Start_IT+0xc0>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d111      	bne.n	800bb7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f003 0307 	and.w	r3, r3, #7
 800bb62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b06      	cmp	r3, #6
 800bb68:	d010      	beq.n	800bb8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f042 0201 	orr.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb7a:	e007      	b.n	800bb8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f042 0201 	orr.w	r2, r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	40010000 	.word	0x40010000
 800bba0:	40000400 	.word	0x40000400
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40000c00 	.word	0x40000c00
 800bbac:	40014000 	.word	0x40014000

0800bbb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68db      	ldr	r3, [r3, #12]
 800bbbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d020      	beq.n	800bc14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f003 0302 	and.w	r3, r3, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01b      	beq.n	800bc14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f06f 0202 	mvn.w	r2, #2
 800bbe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	699b      	ldr	r3, [r3, #24]
 800bbf2:	f003 0303 	and.w	r3, r3, #3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f999 	bl	800bf32 <HAL_TIM_IC_CaptureCallback>
 800bc00:	e005      	b.n	800bc0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f98b 	bl	800bf1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f99c 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f003 0304 	and.w	r3, r3, #4
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d020      	beq.n	800bc60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01b      	beq.n	800bc60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f06f 0204 	mvn.w	r2, #4
 800bc30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2202      	movs	r2, #2
 800bc36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	699b      	ldr	r3, [r3, #24]
 800bc3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f973 	bl	800bf32 <HAL_TIM_IC_CaptureCallback>
 800bc4c:	e005      	b.n	800bc5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f965 	bl	800bf1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 f976 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	f003 0308 	and.w	r3, r3, #8
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d020      	beq.n	800bcac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f003 0308 	and.w	r3, r3, #8
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d01b      	beq.n	800bcac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f06f 0208 	mvn.w	r2, #8
 800bc7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2204      	movs	r2, #4
 800bc82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f94d 	bl	800bf32 <HAL_TIM_IC_CaptureCallback>
 800bc98:	e005      	b.n	800bca6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f93f 	bl	800bf1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f950 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f003 0310 	and.w	r3, r3, #16
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d020      	beq.n	800bcf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f003 0310 	and.w	r3, r3, #16
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01b      	beq.n	800bcf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f06f 0210 	mvn.w	r2, #16
 800bcc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2208      	movs	r2, #8
 800bcce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	69db      	ldr	r3, [r3, #28]
 800bcd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f927 	bl	800bf32 <HAL_TIM_IC_CaptureCallback>
 800bce4:	e005      	b.n	800bcf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f919 	bl	800bf1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f92a 	bl	800bf46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00c      	beq.n	800bd1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f003 0301 	and.w	r3, r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d007      	beq.n	800bd1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f06f 0201 	mvn.w	r2, #1
 800bd14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7f8 fad4 	bl	80042c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00c      	beq.n	800bd40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d007      	beq.n	800bd40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bd38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f000 fab0 	bl	800c2a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00c      	beq.n	800bd64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d007      	beq.n	800bd64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f8fb 	bl	800bf5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00c      	beq.n	800bd88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d007      	beq.n	800bd88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f06f 0220 	mvn.w	r2, #32
 800bd80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa82 	bl	800c28c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d101      	bne.n	800bdac <HAL_TIM_ConfigClockSource+0x1c>
 800bda8:	2302      	movs	r3, #2
 800bdaa:	e0b4      	b.n	800bf16 <HAL_TIM_ConfigClockSource+0x186>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bdca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68ba      	ldr	r2, [r7, #8]
 800bdda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bde4:	d03e      	beq.n	800be64 <HAL_TIM_ConfigClockSource+0xd4>
 800bde6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdea:	f200 8087 	bhi.w	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800bdee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdf2:	f000 8086 	beq.w	800bf02 <HAL_TIM_ConfigClockSource+0x172>
 800bdf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bdfa:	d87f      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800bdfc:	2b70      	cmp	r3, #112	@ 0x70
 800bdfe:	d01a      	beq.n	800be36 <HAL_TIM_ConfigClockSource+0xa6>
 800be00:	2b70      	cmp	r3, #112	@ 0x70
 800be02:	d87b      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800be04:	2b60      	cmp	r3, #96	@ 0x60
 800be06:	d050      	beq.n	800beaa <HAL_TIM_ConfigClockSource+0x11a>
 800be08:	2b60      	cmp	r3, #96	@ 0x60
 800be0a:	d877      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800be0c:	2b50      	cmp	r3, #80	@ 0x50
 800be0e:	d03c      	beq.n	800be8a <HAL_TIM_ConfigClockSource+0xfa>
 800be10:	2b50      	cmp	r3, #80	@ 0x50
 800be12:	d873      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800be14:	2b40      	cmp	r3, #64	@ 0x40
 800be16:	d058      	beq.n	800beca <HAL_TIM_ConfigClockSource+0x13a>
 800be18:	2b40      	cmp	r3, #64	@ 0x40
 800be1a:	d86f      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800be1c:	2b30      	cmp	r3, #48	@ 0x30
 800be1e:	d064      	beq.n	800beea <HAL_TIM_ConfigClockSource+0x15a>
 800be20:	2b30      	cmp	r3, #48	@ 0x30
 800be22:	d86b      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800be24:	2b20      	cmp	r3, #32
 800be26:	d060      	beq.n	800beea <HAL_TIM_ConfigClockSource+0x15a>
 800be28:	2b20      	cmp	r3, #32
 800be2a:	d867      	bhi.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d05c      	beq.n	800beea <HAL_TIM_ConfigClockSource+0x15a>
 800be30:	2b10      	cmp	r3, #16
 800be32:	d05a      	beq.n	800beea <HAL_TIM_ConfigClockSource+0x15a>
 800be34:	e062      	b.n	800befc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be46:	f000 f993 	bl	800c170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	609a      	str	r2, [r3, #8]
      break;
 800be62:	e04f      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be74:	f000 f97c 	bl	800c170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689a      	ldr	r2, [r3, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be86:	609a      	str	r2, [r3, #8]
      break;
 800be88:	e03c      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be96:	461a      	mov	r2, r3
 800be98:	f000 f8f0 	bl	800c07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2150      	movs	r1, #80	@ 0x50
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f949 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bea8:	e02c      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800beb6:	461a      	mov	r2, r3
 800beb8:	f000 f90f 	bl	800c0da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2160      	movs	r1, #96	@ 0x60
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 f939 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bec8:	e01c      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bed6:	461a      	mov	r2, r3
 800bed8:	f000 f8d0 	bl	800c07c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2140      	movs	r1, #64	@ 0x40
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 f929 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800bee8:	e00c      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f000 f920 	bl	800c13a <TIM_ITRx_SetConfig>
      break;
 800befa:	e003      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	73fb      	strb	r3, [r7, #15]
      break;
 800bf00:	e000      	b.n	800bf04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bf02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf26:	bf00      	nop
 800bf28:	370c      	adds	r7, #12
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf4e:	bf00      	nop
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a37      	ldr	r2, [pc, #220]	@ (800c060 <TIM_Base_SetConfig+0xf0>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d00f      	beq.n	800bfa8 <TIM_Base_SetConfig+0x38>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8e:	d00b      	beq.n	800bfa8 <TIM_Base_SetConfig+0x38>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a34      	ldr	r2, [pc, #208]	@ (800c064 <TIM_Base_SetConfig+0xf4>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d007      	beq.n	800bfa8 <TIM_Base_SetConfig+0x38>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a33      	ldr	r2, [pc, #204]	@ (800c068 <TIM_Base_SetConfig+0xf8>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d003      	beq.n	800bfa8 <TIM_Base_SetConfig+0x38>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a32      	ldr	r2, [pc, #200]	@ (800c06c <TIM_Base_SetConfig+0xfc>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d108      	bne.n	800bfba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a28      	ldr	r2, [pc, #160]	@ (800c060 <TIM_Base_SetConfig+0xf0>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d01b      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfc8:	d017      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a25      	ldr	r2, [pc, #148]	@ (800c064 <TIM_Base_SetConfig+0xf4>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d013      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a24      	ldr	r2, [pc, #144]	@ (800c068 <TIM_Base_SetConfig+0xf8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d00f      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a23      	ldr	r2, [pc, #140]	@ (800c06c <TIM_Base_SetConfig+0xfc>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d00b      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a22      	ldr	r2, [pc, #136]	@ (800c070 <TIM_Base_SetConfig+0x100>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d007      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a21      	ldr	r2, [pc, #132]	@ (800c074 <TIM_Base_SetConfig+0x104>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d003      	beq.n	800bffa <TIM_Base_SetConfig+0x8a>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a20      	ldr	r2, [pc, #128]	@ (800c078 <TIM_Base_SetConfig+0x108>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d108      	bne.n	800c00c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4313      	orrs	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	689a      	ldr	r2, [r3, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a0c      	ldr	r2, [pc, #48]	@ (800c060 <TIM_Base_SetConfig+0xf0>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d103      	bne.n	800c03a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	691a      	ldr	r2, [r3, #16]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f043 0204 	orr.w	r2, r3, #4
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2201      	movs	r2, #1
 800c04a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	601a      	str	r2, [r3, #0]
}
 800c052:	bf00      	nop
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	40010000 	.word	0x40010000
 800c064:	40000400 	.word	0x40000400
 800c068:	40000800 	.word	0x40000800
 800c06c:	40000c00 	.word	0x40000c00
 800c070:	40014000 	.word	0x40014000
 800c074:	40014400 	.word	0x40014400
 800c078:	40014800 	.word	0x40014800

0800c07c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b087      	sub	sp, #28
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	f023 0201 	bic.w	r2, r3, #1
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c0a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f023 030a 	bic.w	r3, r3, #10
 800c0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	621a      	str	r2, [r3, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	371c      	adds	r7, #28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b087      	sub	sp, #28
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	f023 0210 	bic.w	r2, r3, #16
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	699b      	ldr	r3, [r3, #24]
 800c0fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	031b      	lsls	r3, r3, #12
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	011b      	lsls	r3, r3, #4
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	4313      	orrs	r3, r2
 800c120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	693a      	ldr	r2, [r7, #16]
 800c126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	621a      	str	r2, [r3, #32]
}
 800c12e:	bf00      	nop
 800c130:	371c      	adds	r7, #28
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b085      	sub	sp, #20
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	f043 0307 	orr.w	r3, r3, #7
 800c15c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	609a      	str	r2, [r3, #8]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c18a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	021a      	lsls	r2, r3, #8
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	431a      	orrs	r2, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	4313      	orrs	r3, r2
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	609a      	str	r2, [r3, #8]
}
 800c1a4:	bf00      	nop
 800c1a6:	371c      	adds	r7, #28
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr

0800c1b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d101      	bne.n	800c1c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	e050      	b.n	800c26a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a1c      	ldr	r2, [pc, #112]	@ (800c278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d018      	beq.n	800c23e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c214:	d013      	beq.n	800c23e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a18      	ldr	r2, [pc, #96]	@ (800c27c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d00e      	beq.n	800c23e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a16      	ldr	r2, [pc, #88]	@ (800c280 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d009      	beq.n	800c23e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a15      	ldr	r2, [pc, #84]	@ (800c284 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d004      	beq.n	800c23e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4a13      	ldr	r2, [pc, #76]	@ (800c288 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d10c      	bne.n	800c258 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	68ba      	ldr	r2, [r7, #8]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	40010000 	.word	0x40010000
 800c27c:	40000400 	.word	0x40000400
 800c280:	40000800 	.word	0x40000800
 800c284:	40000c00 	.word	0x40000c00
 800c288:	40014000 	.word	0x40014000

0800c28c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e042      	b.n	800c34c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f7fa fa5a 	bl	8006794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2224      	movs	r2, #36	@ 0x24
 800c2e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68da      	ldr	r2, [r3, #12]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c2f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fe15 	bl	800cf28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	691a      	ldr	r2, [r3, #16]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c30c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	695a      	ldr	r2, [r3, #20]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c31c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68da      	ldr	r2, [r3, #12]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c32c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2220      	movs	r2, #32
 800c338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2220      	movs	r2, #32
 800c340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08a      	sub	sp, #40	@ 0x28
 800c358:	af02      	add	r7, sp, #8
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	603b      	str	r3, [r7, #0]
 800c360:	4613      	mov	r3, r2
 800c362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b20      	cmp	r3, #32
 800c372:	d175      	bne.n	800c460 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <HAL_UART_Transmit+0x2c>
 800c37a:	88fb      	ldrh	r3, [r7, #6]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e06e      	b.n	800c462 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2221      	movs	r2, #33	@ 0x21
 800c38e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c392:	f7fb f92f 	bl	80075f4 <HAL_GetTick>
 800c396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	88fa      	ldrh	r2, [r7, #6]
 800c39c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	88fa      	ldrh	r2, [r7, #6]
 800c3a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3ac:	d108      	bne.n	800c3c0 <HAL_UART_Transmit+0x6c>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	691b      	ldr	r3, [r3, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d104      	bne.n	800c3c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	61bb      	str	r3, [r7, #24]
 800c3be:	e003      	b.n	800c3c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c3c8:	e02e      	b.n	800c428 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2180      	movs	r1, #128	@ 0x80
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 fbb3 	bl	800cb40 <UART_WaitOnFlagUntilTimeout>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d005      	beq.n	800c3ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2220      	movs	r2, #32
 800c3e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e03a      	b.n	800c462 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d10b      	bne.n	800c40a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	3302      	adds	r3, #2
 800c406:	61bb      	str	r3, [r7, #24]
 800c408:	e007      	b.n	800c41a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	781a      	ldrb	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	3301      	adds	r3, #1
 800c418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c41e:	b29b      	uxth	r3, r3
 800c420:	3b01      	subs	r3, #1
 800c422:	b29a      	uxth	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1cb      	bne.n	800c3ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	9300      	str	r3, [sp, #0]
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2200      	movs	r2, #0
 800c43a:	2140      	movs	r1, #64	@ 0x40
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 fb7f 	bl	800cb40 <UART_WaitOnFlagUntilTimeout>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	e006      	b.n	800c462 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2220      	movs	r2, #32
 800c458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e000      	b.n	800c462 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c460:	2302      	movs	r3, #2
  }
}
 800c462:	4618      	mov	r0, r3
 800c464:	3720      	adds	r7, #32
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b08a      	sub	sp, #40	@ 0x28
 800c46e:	af02      	add	r7, sp, #8
 800c470:	60f8      	str	r0, [r7, #12]
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	603b      	str	r3, [r7, #0]
 800c476:	4613      	mov	r3, r2
 800c478:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b20      	cmp	r3, #32
 800c488:	f040 8081 	bne.w	800c58e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d002      	beq.n	800c498 <HAL_UART_Receive+0x2e>
 800c492:	88fb      	ldrh	r3, [r7, #6]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	e079      	b.n	800c590 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2222      	movs	r2, #34	@ 0x22
 800c4a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c4b0:	f7fb f8a0 	bl	80075f4 <HAL_GetTick>
 800c4b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	88fa      	ldrh	r2, [r7, #6]
 800c4ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	88fa      	ldrh	r2, [r7, #6]
 800c4c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4ca:	d108      	bne.n	800c4de <HAL_UART_Receive+0x74>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d104      	bne.n	800c4de <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	61bb      	str	r3, [r7, #24]
 800c4dc:	e003      	b.n	800c4e6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c4e6:	e047      	b.n	800c578 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2120      	movs	r1, #32
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fb24 	bl	800cb40 <UART_WaitOnFlagUntilTimeout>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2220      	movs	r2, #32
 800c502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e042      	b.n	800c590 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10c      	bne.n	800c52a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	b29b      	uxth	r3, r3
 800c518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	3302      	adds	r3, #2
 800c526:	61bb      	str	r3, [r7, #24]
 800c528:	e01f      	b.n	800c56a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c532:	d007      	beq.n	800c544 <HAL_UART_Receive+0xda>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <HAL_UART_Receive+0xe8>
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d106      	bne.n	800c552 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	e008      	b.n	800c564 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	3301      	adds	r3, #1
 800c568:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c56e:	b29b      	uxth	r3, r3
 800c570:	3b01      	subs	r3, #1
 800c572:	b29a      	uxth	r2, r3
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1b2      	bne.n	800c4e8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2220      	movs	r2, #32
 800c586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	e000      	b.n	800c590 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c58e:	2302      	movs	r3, #2
  }
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b0ba      	sub	sp, #232	@ 0xe8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ce:	f003 030f 	and.w	r3, r3, #15
 800c5d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c5d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10f      	bne.n	800c5fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5e2:	f003 0320 	and.w	r3, r3, #32
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d009      	beq.n	800c5fe <HAL_UART_IRQHandler+0x66>
 800c5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5ee:	f003 0320 	and.w	r3, r3, #32
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fbd7 	bl	800cdaa <UART_Receive_IT>
      return;
 800c5fc:	e273      	b.n	800cae6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c5fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 80de 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x22c>
 800c608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b00      	cmp	r3, #0
 800c612:	d106      	bne.n	800c622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c618:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 80d1 	beq.w	800c7c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00b      	beq.n	800c646 <HAL_UART_IRQHandler+0xae>
 800c62e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c63e:	f043 0201 	orr.w	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <HAL_UART_IRQHandler+0xd2>
 800c652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d005      	beq.n	800c66a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c662:	f043 0202 	orr.w	r2, r3, #2
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c66e:	f003 0302 	and.w	r3, r3, #2
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00b      	beq.n	800c68e <HAL_UART_IRQHandler+0xf6>
 800c676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c686:	f043 0204 	orr.w	r2, r3, #4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c692:	f003 0308 	and.w	r3, r3, #8
 800c696:	2b00      	cmp	r3, #0
 800c698:	d011      	beq.n	800c6be <HAL_UART_IRQHandler+0x126>
 800c69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c69e:	f003 0320 	and.w	r3, r3, #32
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d105      	bne.n	800c6b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c6a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d005      	beq.n	800c6be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6b6:	f043 0208 	orr.w	r2, r3, #8
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f000 820a 	beq.w	800cadc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6cc:	f003 0320 	and.w	r3, r3, #32
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d008      	beq.n	800c6e6 <HAL_UART_IRQHandler+0x14e>
 800c6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6d8:	f003 0320 	and.w	r3, r3, #32
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fb62 	bl	800cdaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f0:	2b40      	cmp	r3, #64	@ 0x40
 800c6f2:	bf0c      	ite	eq
 800c6f4:	2301      	moveq	r3, #1
 800c6f6:	2300      	movne	r3, #0
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b00      	cmp	r3, #0
 800c708:	d103      	bne.n	800c712 <HAL_UART_IRQHandler+0x17a>
 800c70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d04f      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fa6d 	bl	800cbf2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c722:	2b40      	cmp	r3, #64	@ 0x40
 800c724:	d141      	bne.n	800c7aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3314      	adds	r3, #20
 800c72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3314      	adds	r3, #20
 800c74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1d9      	bne.n	800c726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d013      	beq.n	800c7a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c77e:	4a8a      	ldr	r2, [pc, #552]	@ (800c9a8 <HAL_UART_IRQHandler+0x410>)
 800c780:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c786:	4618      	mov	r0, r3
 800c788:	f7fb f934 	bl	80079f4 <HAL_DMA_Abort_IT>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d016      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7a0:	e00e      	b.n	800c7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f9b6 	bl	800cb14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7a8:	e00a      	b.n	800c7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 f9b2 	bl	800cb14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b0:	e006      	b.n	800c7c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f9ae 	bl	800cb14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c7be:	e18d      	b.n	800cadc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c0:	bf00      	nop
    return;
 800c7c2:	e18b      	b.n	800cadc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	f040 8167 	bne.w	800ca9c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f000 8160 	beq.w	800ca9c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800c7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7e0:	f003 0310 	and.w	r3, r3, #16
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8159 	beq.w	800ca9c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60bb      	str	r3, [r7, #8]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60bb      	str	r3, [r7, #8]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	60bb      	str	r3, [r7, #8]
 800c7fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c80a:	2b40      	cmp	r3, #64	@ 0x40
 800c80c:	f040 80ce 	bne.w	800c9ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c81c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 80a9 	beq.w	800c978 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c82a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c82e:	429a      	cmp	r2, r3
 800c830:	f080 80a2 	bcs.w	800c978 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c83a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c846:	f000 8088 	beq.w	800c95a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	330c      	adds	r3, #12
 800c850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c854:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c858:	e853 3f00 	ldrex	r3, [r3]
 800c85c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c860:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	330c      	adds	r3, #12
 800c872:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c876:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c87a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c882:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c886:	e841 2300 	strex	r3, r2, [r1]
 800c88a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c88e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1d9      	bne.n	800c84a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3314      	adds	r3, #20
 800c89c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c8a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8a8:	f023 0301 	bic.w	r3, r3, #1
 800c8ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3314      	adds	r3, #20
 800c8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c8be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e1      	bne.n	800c896 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3314      	adds	r3, #20
 800c8d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	3314      	adds	r3, #20
 800c8f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c8f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8fe:	e841 2300 	strex	r3, r2, [r1]
 800c902:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1e3      	bne.n	800c8d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	330c      	adds	r3, #12
 800c91e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c922:	e853 3f00 	ldrex	r3, [r3]
 800c926:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c92a:	f023 0310 	bic.w	r3, r3, #16
 800c92e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	330c      	adds	r3, #12
 800c938:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c93c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c93e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c940:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c942:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c944:	e841 2300 	strex	r3, r2, [r1]
 800c948:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c94a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e3      	bne.n	800c918 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c954:	4618      	mov	r0, r3
 800c956:	f7fa ffdd 	bl	8007914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2202      	movs	r2, #2
 800c95e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c968:	b29b      	uxth	r3, r3
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f8d9 	bl	800cb28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c976:	e0b3      	b.n	800cae0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c97c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c980:	429a      	cmp	r2, r3
 800c982:	f040 80ad 	bne.w	800cae0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c98a:	69db      	ldr	r3, [r3, #28]
 800c98c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c990:	f040 80a6 	bne.w	800cae0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2202      	movs	r2, #2
 800c998:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f8c1 	bl	800cb28 <HAL_UARTEx_RxEventCallback>
      return;
 800c9a6:	e09b      	b.n	800cae0 <HAL_UART_IRQHandler+0x548>
 800c9a8:	0800ccb9 	.word	0x0800ccb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f000 808e 	beq.w	800cae4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800c9c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 8089 	beq.w	800cae4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	330c      	adds	r3, #12
 800c9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9dc:	e853 3f00 	ldrex	r3, [r3]
 800c9e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	330c      	adds	r3, #12
 800c9f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c9f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9fe:	e841 2300 	strex	r3, r2, [r1]
 800ca02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e3      	bne.n	800c9d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3314      	adds	r3, #20
 800ca10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca14:	e853 3f00 	ldrex	r3, [r3]
 800ca18:	623b      	str	r3, [r7, #32]
   return(result);
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	f023 0301 	bic.w	r3, r3, #1
 800ca20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3314      	adds	r3, #20
 800ca2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca2e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca36:	e841 2300 	strex	r3, r2, [r1]
 800ca3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e3      	bne.n	800ca0a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2220      	movs	r2, #32
 800ca46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	330c      	adds	r3, #12
 800ca56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	e853 3f00 	ldrex	r3, [r3]
 800ca5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f023 0310 	bic.w	r3, r3, #16
 800ca66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	330c      	adds	r3, #12
 800ca70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ca74:	61fa      	str	r2, [r7, #28]
 800ca76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca78:	69b9      	ldr	r1, [r7, #24]
 800ca7a:	69fa      	ldr	r2, [r7, #28]
 800ca7c:	e841 2300 	strex	r3, r2, [r1]
 800ca80:	617b      	str	r3, [r7, #20]
   return(result);
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1e3      	bne.n	800ca50 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f847 	bl	800cb28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca9a:	e023      	b.n	800cae4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d009      	beq.n	800cabc <HAL_UART_IRQHandler+0x524>
 800caa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d003      	beq.n	800cabc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 f910 	bl	800ccda <UART_Transmit_IT>
    return;
 800caba:	e014      	b.n	800cae6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00e      	beq.n	800cae6 <HAL_UART_IRQHandler+0x54e>
 800cac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d008      	beq.n	800cae6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f950 	bl	800cd7a <UART_EndTransmit_IT>
    return;
 800cada:	e004      	b.n	800cae6 <HAL_UART_IRQHandler+0x54e>
    return;
 800cadc:	bf00      	nop
 800cade:	e002      	b.n	800cae6 <HAL_UART_IRQHandler+0x54e>
      return;
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <HAL_UART_IRQHandler+0x54e>
      return;
 800cae4:	bf00      	nop
  }
}
 800cae6:	37e8      	adds	r7, #232	@ 0xe8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800caf4:	bf00      	nop
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cb08:	bf00      	nop
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	460b      	mov	r3, r1
 800cb32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	603b      	str	r3, [r7, #0]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb50:	e03b      	b.n	800cbca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb58:	d037      	beq.n	800cbca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb5a:	f7fa fd4b 	bl	80075f4 <HAL_GetTick>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	6a3a      	ldr	r2, [r7, #32]
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d302      	bcc.n	800cb70 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb6a:	6a3b      	ldr	r3, [r7, #32]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e03a      	b.n	800cbea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	f003 0304 	and.w	r3, r3, #4
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d023      	beq.n	800cbca <UART_WaitOnFlagUntilTimeout+0x8a>
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	2b80      	cmp	r3, #128	@ 0x80
 800cb86:	d020      	beq.n	800cbca <UART_WaitOnFlagUntilTimeout+0x8a>
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b40      	cmp	r3, #64	@ 0x40
 800cb8c:	d01d      	beq.n	800cbca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f003 0308 	and.w	r3, r3, #8
 800cb98:	2b08      	cmp	r3, #8
 800cb9a:	d116      	bne.n	800cbca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	617b      	str	r3, [r7, #20]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	617b      	str	r3, [r7, #20]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	617b      	str	r3, [r7, #20]
 800cbb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 f81d 	bl	800cbf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2208      	movs	r2, #8
 800cbbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e00f      	b.n	800cbea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	4013      	ands	r3, r2
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	bf0c      	ite	eq
 800cbda:	2301      	moveq	r3, #1
 800cbdc:	2300      	movne	r3, #0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	79fb      	ldrb	r3, [r7, #7]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d0b4      	beq.n	800cb52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3718      	adds	r7, #24
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b095      	sub	sp, #84	@ 0x54
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	330c      	adds	r3, #12
 800cc00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc04:	e853 3f00 	ldrex	r3, [r3]
 800cc08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	330c      	adds	r3, #12
 800cc18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc1a:	643a      	str	r2, [r7, #64]	@ 0x40
 800cc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc22:	e841 2300 	strex	r3, r2, [r1]
 800cc26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1e5      	bne.n	800cbfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	3314      	adds	r3, #20
 800cc34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	e853 3f00 	ldrex	r3, [r3]
 800cc3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	f023 0301 	bic.w	r3, r3, #1
 800cc44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	3314      	adds	r3, #20
 800cc4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc56:	e841 2300 	strex	r3, r2, [r1]
 800cc5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d1e5      	bne.n	800cc2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d119      	bne.n	800cc9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	330c      	adds	r3, #12
 800cc70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	f023 0310 	bic.w	r3, r3, #16
 800cc80:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	330c      	adds	r3, #12
 800cc88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc8a:	61ba      	str	r2, [r7, #24]
 800cc8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	6979      	ldr	r1, [r7, #20]
 800cc90:	69ba      	ldr	r2, [r7, #24]
 800cc92:	e841 2300 	strex	r3, r2, [r1]
 800cc96:	613b      	str	r3, [r7, #16]
   return(result);
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e5      	bne.n	800cc6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2220      	movs	r2, #32
 800cca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ccac:	bf00      	nop
 800ccae:	3754      	adds	r7, #84	@ 0x54
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff ff21 	bl	800cb14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccd2:	bf00      	nop
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	b085      	sub	sp, #20
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b21      	cmp	r3, #33	@ 0x21
 800ccec:	d13e      	bne.n	800cd6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	689b      	ldr	r3, [r3, #8]
 800ccf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ccf6:	d114      	bne.n	800cd22 <UART_Transmit_IT+0x48>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d110      	bne.n	800cd22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a1b      	ldr	r3, [r3, #32]
 800cd1a:	1c9a      	adds	r2, r3, #2
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	621a      	str	r2, [r3, #32]
 800cd20:	e008      	b.n	800cd34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a1b      	ldr	r3, [r3, #32]
 800cd26:	1c59      	adds	r1, r3, #1
 800cd28:	687a      	ldr	r2, [r7, #4]
 800cd2a:	6211      	str	r1, [r2, #32]
 800cd2c:	781a      	ldrb	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	4619      	mov	r1, r3
 800cd42:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10f      	bne.n	800cd68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68da      	ldr	r2, [r3, #12]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e000      	b.n	800cd6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd6c:	2302      	movs	r3, #2
  }
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68da      	ldr	r2, [r3, #12]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cd90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2220      	movs	r2, #32
 800cd96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f7ff fea6 	bl	800caec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b08c      	sub	sp, #48	@ 0x30
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b22      	cmp	r3, #34	@ 0x22
 800cdc4:	f040 80aa 	bne.w	800cf1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdd0:	d115      	bne.n	800cdfe <UART_Receive_IT+0x54>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d111      	bne.n	800cdfe <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdde:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdf6:	1c9a      	adds	r2, r3, #2
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	629a      	str	r2, [r3, #40]	@ 0x28
 800cdfc:	e024      	b.n	800ce48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce0c:	d007      	beq.n	800ce1e <UART_Receive_IT+0x74>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10a      	bne.n	800ce2c <UART_Receive_IT+0x82>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	b2da      	uxtb	r2, r3
 800ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	e008      	b.n	800ce3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	4619      	mov	r1, r3
 800ce56:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d15d      	bne.n	800cf18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68da      	ldr	r2, [r3, #12]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f022 0220 	bic.w	r2, r2, #32
 800ce6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	695a      	ldr	r2, [r3, #20]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f022 0201 	bic.w	r2, r2, #1
 800ce8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2220      	movs	r2, #32
 800ce90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d135      	bne.n	800cf0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	330c      	adds	r3, #12
 800ceae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	e853 3f00 	ldrex	r3, [r3]
 800ceb6:	613b      	str	r3, [r7, #16]
   return(result);
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	f023 0310 	bic.w	r3, r3, #16
 800cebe:	627b      	str	r3, [r7, #36]	@ 0x24
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	330c      	adds	r3, #12
 800cec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec8:	623a      	str	r2, [r7, #32]
 800ceca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cecc:	69f9      	ldr	r1, [r7, #28]
 800cece:	6a3a      	ldr	r2, [r7, #32]
 800ced0:	e841 2300 	strex	r3, r2, [r1]
 800ced4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1e5      	bne.n	800cea8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0310 	and.w	r3, r3, #16
 800cee6:	2b10      	cmp	r3, #16
 800cee8:	d10a      	bne.n	800cf00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	60fb      	str	r3, [r7, #12]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff fe0e 	bl	800cb28 <HAL_UARTEx_RxEventCallback>
 800cf0c:	e002      	b.n	800cf14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff fdf6 	bl	800cb00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	e002      	b.n	800cf1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e000      	b.n	800cf1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cf1c:	2302      	movs	r3, #2
  }
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3730      	adds	r7, #48	@ 0x30
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf2c:	b0c0      	sub	sp, #256	@ 0x100
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf44:	68d9      	ldr	r1, [r3, #12]
 800cf46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	ea40 0301 	orr.w	r3, r0, r1
 800cf50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf56:	689a      	ldr	r2, [r3, #8]
 800cf58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	431a      	orrs	r2, r3
 800cf60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	431a      	orrs	r2, r3
 800cf68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cf80:	f021 010c 	bic.w	r1, r1, #12
 800cf84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf8e:	430b      	orrs	r3, r1
 800cf90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cf9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfa2:	6999      	ldr	r1, [r3, #24]
 800cfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	ea40 0301 	orr.w	r3, r0, r1
 800cfae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	4b8f      	ldr	r3, [pc, #572]	@ (800d1f4 <UART_SetConfig+0x2cc>)
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d005      	beq.n	800cfc8 <UART_SetConfig+0xa0>
 800cfbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4b8d      	ldr	r3, [pc, #564]	@ (800d1f8 <UART_SetConfig+0x2d0>)
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d104      	bne.n	800cfd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfc8:	f7fe fd2c 	bl	800ba24 <HAL_RCC_GetPCLK2Freq>
 800cfcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cfd0:	e003      	b.n	800cfda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cfd2:	f7fe fd13 	bl	800b9fc <HAL_RCC_GetPCLK1Freq>
 800cfd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfde:	69db      	ldr	r3, [r3, #28]
 800cfe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfe4:	f040 810c 	bne.w	800d200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cfec:	2200      	movs	r2, #0
 800cfee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cff2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cffa:	4622      	mov	r2, r4
 800cffc:	462b      	mov	r3, r5
 800cffe:	1891      	adds	r1, r2, r2
 800d000:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d002:	415b      	adcs	r3, r3
 800d004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d00a:	4621      	mov	r1, r4
 800d00c:	eb12 0801 	adds.w	r8, r2, r1
 800d010:	4629      	mov	r1, r5
 800d012:	eb43 0901 	adc.w	r9, r3, r1
 800d016:	f04f 0200 	mov.w	r2, #0
 800d01a:	f04f 0300 	mov.w	r3, #0
 800d01e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d02a:	4690      	mov	r8, r2
 800d02c:	4699      	mov	r9, r3
 800d02e:	4623      	mov	r3, r4
 800d030:	eb18 0303 	adds.w	r3, r8, r3
 800d034:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d038:	462b      	mov	r3, r5
 800d03a:	eb49 0303 	adc.w	r3, r9, r3
 800d03e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d04e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d056:	460b      	mov	r3, r1
 800d058:	18db      	adds	r3, r3, r3
 800d05a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d05c:	4613      	mov	r3, r2
 800d05e:	eb42 0303 	adc.w	r3, r2, r3
 800d062:	657b      	str	r3, [r7, #84]	@ 0x54
 800d064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d06c:	f7f3 f908 	bl	8000280 <__aeabi_uldivmod>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4b61      	ldr	r3, [pc, #388]	@ (800d1fc <UART_SetConfig+0x2d4>)
 800d076:	fba3 2302 	umull	r2, r3, r3, r2
 800d07a:	095b      	lsrs	r3, r3, #5
 800d07c:	011c      	lsls	r4, r3, #4
 800d07e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d082:	2200      	movs	r2, #0
 800d084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d088:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d08c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d090:	4642      	mov	r2, r8
 800d092:	464b      	mov	r3, r9
 800d094:	1891      	adds	r1, r2, r2
 800d096:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d098:	415b      	adcs	r3, r3
 800d09a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d09c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d0a0:	4641      	mov	r1, r8
 800d0a2:	eb12 0a01 	adds.w	sl, r2, r1
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	eb43 0b01 	adc.w	fp, r3, r1
 800d0ac:	f04f 0200 	mov.w	r2, #0
 800d0b0:	f04f 0300 	mov.w	r3, #0
 800d0b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d0b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d0bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d0c0:	4692      	mov	sl, r2
 800d0c2:	469b      	mov	fp, r3
 800d0c4:	4643      	mov	r3, r8
 800d0c6:	eb1a 0303 	adds.w	r3, sl, r3
 800d0ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d0ce:	464b      	mov	r3, r9
 800d0d0:	eb4b 0303 	adc.w	r3, fp, r3
 800d0d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d0e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	18db      	adds	r3, r3, r3
 800d0f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	eb42 0303 	adc.w	r3, r2, r3
 800d0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d0fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d102:	f7f3 f8bd 	bl	8000280 <__aeabi_uldivmod>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4611      	mov	r1, r2
 800d10c:	4b3b      	ldr	r3, [pc, #236]	@ (800d1fc <UART_SetConfig+0x2d4>)
 800d10e:	fba3 2301 	umull	r2, r3, r3, r1
 800d112:	095b      	lsrs	r3, r3, #5
 800d114:	2264      	movs	r2, #100	@ 0x64
 800d116:	fb02 f303 	mul.w	r3, r2, r3
 800d11a:	1acb      	subs	r3, r1, r3
 800d11c:	00db      	lsls	r3, r3, #3
 800d11e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d122:	4b36      	ldr	r3, [pc, #216]	@ (800d1fc <UART_SetConfig+0x2d4>)
 800d124:	fba3 2302 	umull	r2, r3, r3, r2
 800d128:	095b      	lsrs	r3, r3, #5
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d130:	441c      	add	r4, r3
 800d132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d136:	2200      	movs	r2, #0
 800d138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d13c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d144:	4642      	mov	r2, r8
 800d146:	464b      	mov	r3, r9
 800d148:	1891      	adds	r1, r2, r2
 800d14a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d14c:	415b      	adcs	r3, r3
 800d14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d154:	4641      	mov	r1, r8
 800d156:	1851      	adds	r1, r2, r1
 800d158:	6339      	str	r1, [r7, #48]	@ 0x30
 800d15a:	4649      	mov	r1, r9
 800d15c:	414b      	adcs	r3, r1
 800d15e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d160:	f04f 0200 	mov.w	r2, #0
 800d164:	f04f 0300 	mov.w	r3, #0
 800d168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d16c:	4659      	mov	r1, fp
 800d16e:	00cb      	lsls	r3, r1, #3
 800d170:	4651      	mov	r1, sl
 800d172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d176:	4651      	mov	r1, sl
 800d178:	00ca      	lsls	r2, r1, #3
 800d17a:	4610      	mov	r0, r2
 800d17c:	4619      	mov	r1, r3
 800d17e:	4603      	mov	r3, r0
 800d180:	4642      	mov	r2, r8
 800d182:	189b      	adds	r3, r3, r2
 800d184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d188:	464b      	mov	r3, r9
 800d18a:	460a      	mov	r2, r1
 800d18c:	eb42 0303 	adc.w	r3, r2, r3
 800d190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d1a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d1a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	18db      	adds	r3, r3, r3
 800d1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	eb42 0303 	adc.w	r3, r2, r3
 800d1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d1ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d1be:	f7f3 f85f 	bl	8000280 <__aeabi_uldivmod>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1fc <UART_SetConfig+0x2d4>)
 800d1c8:	fba3 1302 	umull	r1, r3, r3, r2
 800d1cc:	095b      	lsrs	r3, r3, #5
 800d1ce:	2164      	movs	r1, #100	@ 0x64
 800d1d0:	fb01 f303 	mul.w	r3, r1, r3
 800d1d4:	1ad3      	subs	r3, r2, r3
 800d1d6:	00db      	lsls	r3, r3, #3
 800d1d8:	3332      	adds	r3, #50	@ 0x32
 800d1da:	4a08      	ldr	r2, [pc, #32]	@ (800d1fc <UART_SetConfig+0x2d4>)
 800d1dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e0:	095b      	lsrs	r3, r3, #5
 800d1e2:	f003 0207 	and.w	r2, r3, #7
 800d1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4422      	add	r2, r4
 800d1ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d1f0:	e106      	b.n	800d400 <UART_SetConfig+0x4d8>
 800d1f2:	bf00      	nop
 800d1f4:	40011000 	.word	0x40011000
 800d1f8:	40011400 	.word	0x40011400
 800d1fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d204:	2200      	movs	r2, #0
 800d206:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d20a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d20e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d212:	4642      	mov	r2, r8
 800d214:	464b      	mov	r3, r9
 800d216:	1891      	adds	r1, r2, r2
 800d218:	6239      	str	r1, [r7, #32]
 800d21a:	415b      	adcs	r3, r3
 800d21c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d21e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d222:	4641      	mov	r1, r8
 800d224:	1854      	adds	r4, r2, r1
 800d226:	4649      	mov	r1, r9
 800d228:	eb43 0501 	adc.w	r5, r3, r1
 800d22c:	f04f 0200 	mov.w	r2, #0
 800d230:	f04f 0300 	mov.w	r3, #0
 800d234:	00eb      	lsls	r3, r5, #3
 800d236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d23a:	00e2      	lsls	r2, r4, #3
 800d23c:	4614      	mov	r4, r2
 800d23e:	461d      	mov	r5, r3
 800d240:	4643      	mov	r3, r8
 800d242:	18e3      	adds	r3, r4, r3
 800d244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d248:	464b      	mov	r3, r9
 800d24a:	eb45 0303 	adc.w	r3, r5, r3
 800d24e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2200      	movs	r2, #0
 800d25a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d25e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d262:	f04f 0200 	mov.w	r2, #0
 800d266:	f04f 0300 	mov.w	r3, #0
 800d26a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d26e:	4629      	mov	r1, r5
 800d270:	008b      	lsls	r3, r1, #2
 800d272:	4621      	mov	r1, r4
 800d274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d278:	4621      	mov	r1, r4
 800d27a:	008a      	lsls	r2, r1, #2
 800d27c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d280:	f7f2 fffe 	bl	8000280 <__aeabi_uldivmod>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4b60      	ldr	r3, [pc, #384]	@ (800d40c <UART_SetConfig+0x4e4>)
 800d28a:	fba3 2302 	umull	r2, r3, r3, r2
 800d28e:	095b      	lsrs	r3, r3, #5
 800d290:	011c      	lsls	r4, r3, #4
 800d292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d296:	2200      	movs	r2, #0
 800d298:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d29c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d2a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d2a4:	4642      	mov	r2, r8
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	1891      	adds	r1, r2, r2
 800d2aa:	61b9      	str	r1, [r7, #24]
 800d2ac:	415b      	adcs	r3, r3
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2b4:	4641      	mov	r1, r8
 800d2b6:	1851      	adds	r1, r2, r1
 800d2b8:	6139      	str	r1, [r7, #16]
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	414b      	adcs	r3, r1
 800d2be:	617b      	str	r3, [r7, #20]
 800d2c0:	f04f 0200 	mov.w	r2, #0
 800d2c4:	f04f 0300 	mov.w	r3, #0
 800d2c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d2cc:	4659      	mov	r1, fp
 800d2ce:	00cb      	lsls	r3, r1, #3
 800d2d0:	4651      	mov	r1, sl
 800d2d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d2d6:	4651      	mov	r1, sl
 800d2d8:	00ca      	lsls	r2, r1, #3
 800d2da:	4610      	mov	r0, r2
 800d2dc:	4619      	mov	r1, r3
 800d2de:	4603      	mov	r3, r0
 800d2e0:	4642      	mov	r2, r8
 800d2e2:	189b      	adds	r3, r3, r2
 800d2e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d2e8:	464b      	mov	r3, r9
 800d2ea:	460a      	mov	r2, r1
 800d2ec:	eb42 0303 	adc.w	r3, r2, r3
 800d2f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d2fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d300:	f04f 0200 	mov.w	r2, #0
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d30c:	4649      	mov	r1, r9
 800d30e:	008b      	lsls	r3, r1, #2
 800d310:	4641      	mov	r1, r8
 800d312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d316:	4641      	mov	r1, r8
 800d318:	008a      	lsls	r2, r1, #2
 800d31a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d31e:	f7f2 ffaf 	bl	8000280 <__aeabi_uldivmod>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4611      	mov	r1, r2
 800d328:	4b38      	ldr	r3, [pc, #224]	@ (800d40c <UART_SetConfig+0x4e4>)
 800d32a:	fba3 2301 	umull	r2, r3, r3, r1
 800d32e:	095b      	lsrs	r3, r3, #5
 800d330:	2264      	movs	r2, #100	@ 0x64
 800d332:	fb02 f303 	mul.w	r3, r2, r3
 800d336:	1acb      	subs	r3, r1, r3
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	3332      	adds	r3, #50	@ 0x32
 800d33c:	4a33      	ldr	r2, [pc, #204]	@ (800d40c <UART_SetConfig+0x4e4>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	095b      	lsrs	r3, r3, #5
 800d344:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d348:	441c      	add	r4, r3
 800d34a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d34e:	2200      	movs	r2, #0
 800d350:	673b      	str	r3, [r7, #112]	@ 0x70
 800d352:	677a      	str	r2, [r7, #116]	@ 0x74
 800d354:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d358:	4642      	mov	r2, r8
 800d35a:	464b      	mov	r3, r9
 800d35c:	1891      	adds	r1, r2, r2
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	415b      	adcs	r3, r3
 800d362:	60fb      	str	r3, [r7, #12]
 800d364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d368:	4641      	mov	r1, r8
 800d36a:	1851      	adds	r1, r2, r1
 800d36c:	6039      	str	r1, [r7, #0]
 800d36e:	4649      	mov	r1, r9
 800d370:	414b      	adcs	r3, r1
 800d372:	607b      	str	r3, [r7, #4]
 800d374:	f04f 0200 	mov.w	r2, #0
 800d378:	f04f 0300 	mov.w	r3, #0
 800d37c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d380:	4659      	mov	r1, fp
 800d382:	00cb      	lsls	r3, r1, #3
 800d384:	4651      	mov	r1, sl
 800d386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d38a:	4651      	mov	r1, sl
 800d38c:	00ca      	lsls	r2, r1, #3
 800d38e:	4610      	mov	r0, r2
 800d390:	4619      	mov	r1, r3
 800d392:	4603      	mov	r3, r0
 800d394:	4642      	mov	r2, r8
 800d396:	189b      	adds	r3, r3, r2
 800d398:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d39a:	464b      	mov	r3, r9
 800d39c:	460a      	mov	r2, r1
 800d39e:	eb42 0303 	adc.w	r3, r2, r3
 800d3a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800d3ae:	667a      	str	r2, [r7, #100]	@ 0x64
 800d3b0:	f04f 0200 	mov.w	r2, #0
 800d3b4:	f04f 0300 	mov.w	r3, #0
 800d3b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d3bc:	4649      	mov	r1, r9
 800d3be:	008b      	lsls	r3, r1, #2
 800d3c0:	4641      	mov	r1, r8
 800d3c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d3c6:	4641      	mov	r1, r8
 800d3c8:	008a      	lsls	r2, r1, #2
 800d3ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d3ce:	f7f2 ff57 	bl	8000280 <__aeabi_uldivmod>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d40c <UART_SetConfig+0x4e4>)
 800d3d8:	fba3 1302 	umull	r1, r3, r3, r2
 800d3dc:	095b      	lsrs	r3, r3, #5
 800d3de:	2164      	movs	r1, #100	@ 0x64
 800d3e0:	fb01 f303 	mul.w	r3, r1, r3
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	011b      	lsls	r3, r3, #4
 800d3e8:	3332      	adds	r3, #50	@ 0x32
 800d3ea:	4a08      	ldr	r2, [pc, #32]	@ (800d40c <UART_SetConfig+0x4e4>)
 800d3ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f0:	095b      	lsrs	r3, r3, #5
 800d3f2:	f003 020f 	and.w	r2, r3, #15
 800d3f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4422      	add	r2, r4
 800d3fe:	609a      	str	r2, [r3, #8]
}
 800d400:	bf00      	nop
 800d402:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d406:	46bd      	mov	sp, r7
 800d408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d40c:	51eb851f 	.word	0x51eb851f

0800d410 <calloc>:
 800d410:	4b02      	ldr	r3, [pc, #8]	@ (800d41c <calloc+0xc>)
 800d412:	460a      	mov	r2, r1
 800d414:	4601      	mov	r1, r0
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	f000 b802 	b.w	800d420 <_calloc_r>
 800d41c:	20000568 	.word	0x20000568

0800d420 <_calloc_r>:
 800d420:	b570      	push	{r4, r5, r6, lr}
 800d422:	fba1 5402 	umull	r5, r4, r1, r2
 800d426:	b93c      	cbnz	r4, 800d438 <_calloc_r+0x18>
 800d428:	4629      	mov	r1, r5
 800d42a:	f000 f837 	bl	800d49c <_malloc_r>
 800d42e:	4606      	mov	r6, r0
 800d430:	b928      	cbnz	r0, 800d43e <_calloc_r+0x1e>
 800d432:	2600      	movs	r6, #0
 800d434:	4630      	mov	r0, r6
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	220c      	movs	r2, #12
 800d43a:	6002      	str	r2, [r0, #0]
 800d43c:	e7f9      	b.n	800d432 <_calloc_r+0x12>
 800d43e:	462a      	mov	r2, r5
 800d440:	4621      	mov	r1, r4
 800d442:	f000 fa19 	bl	800d878 <memset>
 800d446:	e7f5      	b.n	800d434 <_calloc_r+0x14>

0800d448 <free>:
 800d448:	4b02      	ldr	r3, [pc, #8]	@ (800d454 <free+0xc>)
 800d44a:	4601      	mov	r1, r0
 800d44c:	6818      	ldr	r0, [r3, #0]
 800d44e:	f000 ba67 	b.w	800d920 <_free_r>
 800d452:	bf00      	nop
 800d454:	20000568 	.word	0x20000568

0800d458 <sbrk_aligned>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	4e0f      	ldr	r6, [pc, #60]	@ (800d498 <sbrk_aligned+0x40>)
 800d45c:	460c      	mov	r4, r1
 800d45e:	6831      	ldr	r1, [r6, #0]
 800d460:	4605      	mov	r5, r0
 800d462:	b911      	cbnz	r1, 800d46a <sbrk_aligned+0x12>
 800d464:	f000 fa10 	bl	800d888 <_sbrk_r>
 800d468:	6030      	str	r0, [r6, #0]
 800d46a:	4621      	mov	r1, r4
 800d46c:	4628      	mov	r0, r5
 800d46e:	f000 fa0b 	bl	800d888 <_sbrk_r>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	d103      	bne.n	800d47e <sbrk_aligned+0x26>
 800d476:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d47a:	4620      	mov	r0, r4
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
 800d47e:	1cc4      	adds	r4, r0, #3
 800d480:	f024 0403 	bic.w	r4, r4, #3
 800d484:	42a0      	cmp	r0, r4
 800d486:	d0f8      	beq.n	800d47a <sbrk_aligned+0x22>
 800d488:	1a21      	subs	r1, r4, r0
 800d48a:	4628      	mov	r0, r5
 800d48c:	f000 f9fc 	bl	800d888 <_sbrk_r>
 800d490:	3001      	adds	r0, #1
 800d492:	d1f2      	bne.n	800d47a <sbrk_aligned+0x22>
 800d494:	e7ef      	b.n	800d476 <sbrk_aligned+0x1e>
 800d496:	bf00      	nop
 800d498:	20001244 	.word	0x20001244

0800d49c <_malloc_r>:
 800d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	1ccd      	adds	r5, r1, #3
 800d4a2:	f025 0503 	bic.w	r5, r5, #3
 800d4a6:	3508      	adds	r5, #8
 800d4a8:	2d0c      	cmp	r5, #12
 800d4aa:	bf38      	it	cc
 800d4ac:	250c      	movcc	r5, #12
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	db01      	blt.n	800d4b8 <_malloc_r+0x1c>
 800d4b4:	42a9      	cmp	r1, r5
 800d4b6:	d904      	bls.n	800d4c2 <_malloc_r+0x26>
 800d4b8:	230c      	movs	r3, #12
 800d4ba:	6033      	str	r3, [r6, #0]
 800d4bc:	2000      	movs	r0, #0
 800d4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d598 <_malloc_r+0xfc>
 800d4c6:	f000 f869 	bl	800d59c <__malloc_lock>
 800d4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ce:	461c      	mov	r4, r3
 800d4d0:	bb44      	cbnz	r4, 800d524 <_malloc_r+0x88>
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff ffbf 	bl	800d458 <sbrk_aligned>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	4604      	mov	r4, r0
 800d4de:	d158      	bne.n	800d592 <_malloc_r+0xf6>
 800d4e0:	f8d8 4000 	ldr.w	r4, [r8]
 800d4e4:	4627      	mov	r7, r4
 800d4e6:	2f00      	cmp	r7, #0
 800d4e8:	d143      	bne.n	800d572 <_malloc_r+0xd6>
 800d4ea:	2c00      	cmp	r4, #0
 800d4ec:	d04b      	beq.n	800d586 <_malloc_r+0xea>
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	eb04 0903 	add.w	r9, r4, r3
 800d4f8:	f000 f9c6 	bl	800d888 <_sbrk_r>
 800d4fc:	4581      	cmp	r9, r0
 800d4fe:	d142      	bne.n	800d586 <_malloc_r+0xea>
 800d500:	6821      	ldr	r1, [r4, #0]
 800d502:	1a6d      	subs	r5, r5, r1
 800d504:	4629      	mov	r1, r5
 800d506:	4630      	mov	r0, r6
 800d508:	f7ff ffa6 	bl	800d458 <sbrk_aligned>
 800d50c:	3001      	adds	r0, #1
 800d50e:	d03a      	beq.n	800d586 <_malloc_r+0xea>
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	442b      	add	r3, r5
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	f8d8 3000 	ldr.w	r3, [r8]
 800d51a:	685a      	ldr	r2, [r3, #4]
 800d51c:	bb62      	cbnz	r2, 800d578 <_malloc_r+0xdc>
 800d51e:	f8c8 7000 	str.w	r7, [r8]
 800d522:	e00f      	b.n	800d544 <_malloc_r+0xa8>
 800d524:	6822      	ldr	r2, [r4, #0]
 800d526:	1b52      	subs	r2, r2, r5
 800d528:	d420      	bmi.n	800d56c <_malloc_r+0xd0>
 800d52a:	2a0b      	cmp	r2, #11
 800d52c:	d917      	bls.n	800d55e <_malloc_r+0xc2>
 800d52e:	1961      	adds	r1, r4, r5
 800d530:	42a3      	cmp	r3, r4
 800d532:	6025      	str	r5, [r4, #0]
 800d534:	bf18      	it	ne
 800d536:	6059      	strne	r1, [r3, #4]
 800d538:	6863      	ldr	r3, [r4, #4]
 800d53a:	bf08      	it	eq
 800d53c:	f8c8 1000 	streq.w	r1, [r8]
 800d540:	5162      	str	r2, [r4, r5]
 800d542:	604b      	str	r3, [r1, #4]
 800d544:	4630      	mov	r0, r6
 800d546:	f000 f82f 	bl	800d5a8 <__malloc_unlock>
 800d54a:	f104 000b 	add.w	r0, r4, #11
 800d54e:	1d23      	adds	r3, r4, #4
 800d550:	f020 0007 	bic.w	r0, r0, #7
 800d554:	1ac2      	subs	r2, r0, r3
 800d556:	bf1c      	itt	ne
 800d558:	1a1b      	subne	r3, r3, r0
 800d55a:	50a3      	strne	r3, [r4, r2]
 800d55c:	e7af      	b.n	800d4be <_malloc_r+0x22>
 800d55e:	6862      	ldr	r2, [r4, #4]
 800d560:	42a3      	cmp	r3, r4
 800d562:	bf0c      	ite	eq
 800d564:	f8c8 2000 	streq.w	r2, [r8]
 800d568:	605a      	strne	r2, [r3, #4]
 800d56a:	e7eb      	b.n	800d544 <_malloc_r+0xa8>
 800d56c:	4623      	mov	r3, r4
 800d56e:	6864      	ldr	r4, [r4, #4]
 800d570:	e7ae      	b.n	800d4d0 <_malloc_r+0x34>
 800d572:	463c      	mov	r4, r7
 800d574:	687f      	ldr	r7, [r7, #4]
 800d576:	e7b6      	b.n	800d4e6 <_malloc_r+0x4a>
 800d578:	461a      	mov	r2, r3
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	42a3      	cmp	r3, r4
 800d57e:	d1fb      	bne.n	800d578 <_malloc_r+0xdc>
 800d580:	2300      	movs	r3, #0
 800d582:	6053      	str	r3, [r2, #4]
 800d584:	e7de      	b.n	800d544 <_malloc_r+0xa8>
 800d586:	230c      	movs	r3, #12
 800d588:	6033      	str	r3, [r6, #0]
 800d58a:	4630      	mov	r0, r6
 800d58c:	f000 f80c 	bl	800d5a8 <__malloc_unlock>
 800d590:	e794      	b.n	800d4bc <_malloc_r+0x20>
 800d592:	6005      	str	r5, [r0, #0]
 800d594:	e7d6      	b.n	800d544 <_malloc_r+0xa8>
 800d596:	bf00      	nop
 800d598:	20001248 	.word	0x20001248

0800d59c <__malloc_lock>:
 800d59c:	4801      	ldr	r0, [pc, #4]	@ (800d5a4 <__malloc_lock+0x8>)
 800d59e:	f000 b9ae 	b.w	800d8fe <__retarget_lock_acquire_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	20001388 	.word	0x20001388

0800d5a8 <__malloc_unlock>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	@ (800d5b0 <__malloc_unlock+0x8>)
 800d5aa:	f000 b9a9 	b.w	800d900 <__retarget_lock_release_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	20001388 	.word	0x20001388

0800d5b4 <siprintf>:
 800d5b4:	b40e      	push	{r1, r2, r3}
 800d5b6:	b500      	push	{lr}
 800d5b8:	b09c      	sub	sp, #112	@ 0x70
 800d5ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800d5bc:	9002      	str	r0, [sp, #8]
 800d5be:	9006      	str	r0, [sp, #24]
 800d5c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d5c4:	4809      	ldr	r0, [pc, #36]	@ (800d5ec <siprintf+0x38>)
 800d5c6:	9107      	str	r1, [sp, #28]
 800d5c8:	9104      	str	r1, [sp, #16]
 800d5ca:	4909      	ldr	r1, [pc, #36]	@ (800d5f0 <siprintf+0x3c>)
 800d5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d0:	9105      	str	r1, [sp, #20]
 800d5d2:	6800      	ldr	r0, [r0, #0]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	a902      	add	r1, sp, #8
 800d5d8:	f000 fa48 	bl	800da6c <_svfiprintf_r>
 800d5dc:	9b02      	ldr	r3, [sp, #8]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	b01c      	add	sp, #112	@ 0x70
 800d5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5e8:	b003      	add	sp, #12
 800d5ea:	4770      	bx	lr
 800d5ec:	20000568 	.word	0x20000568
 800d5f0:	ffff0208 	.word	0xffff0208

0800d5f4 <std>:
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	b510      	push	{r4, lr}
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d5fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d602:	6083      	str	r3, [r0, #8]
 800d604:	8181      	strh	r1, [r0, #12]
 800d606:	6643      	str	r3, [r0, #100]	@ 0x64
 800d608:	81c2      	strh	r2, [r0, #14]
 800d60a:	6183      	str	r3, [r0, #24]
 800d60c:	4619      	mov	r1, r3
 800d60e:	2208      	movs	r2, #8
 800d610:	305c      	adds	r0, #92	@ 0x5c
 800d612:	f000 f931 	bl	800d878 <memset>
 800d616:	4b0d      	ldr	r3, [pc, #52]	@ (800d64c <std+0x58>)
 800d618:	6263      	str	r3, [r4, #36]	@ 0x24
 800d61a:	4b0d      	ldr	r3, [pc, #52]	@ (800d650 <std+0x5c>)
 800d61c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d61e:	4b0d      	ldr	r3, [pc, #52]	@ (800d654 <std+0x60>)
 800d620:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d622:	4b0d      	ldr	r3, [pc, #52]	@ (800d658 <std+0x64>)
 800d624:	6323      	str	r3, [r4, #48]	@ 0x30
 800d626:	4b0d      	ldr	r3, [pc, #52]	@ (800d65c <std+0x68>)
 800d628:	6224      	str	r4, [r4, #32]
 800d62a:	429c      	cmp	r4, r3
 800d62c:	d006      	beq.n	800d63c <std+0x48>
 800d62e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d632:	4294      	cmp	r4, r2
 800d634:	d002      	beq.n	800d63c <std+0x48>
 800d636:	33d0      	adds	r3, #208	@ 0xd0
 800d638:	429c      	cmp	r4, r3
 800d63a:	d105      	bne.n	800d648 <std+0x54>
 800d63c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d644:	f000 b95a 	b.w	800d8fc <__retarget_lock_init_recursive>
 800d648:	bd10      	pop	{r4, pc}
 800d64a:	bf00      	nop
 800d64c:	0800e35d 	.word	0x0800e35d
 800d650:	0800e37f 	.word	0x0800e37f
 800d654:	0800e3b7 	.word	0x0800e3b7
 800d658:	0800e3db 	.word	0x0800e3db
 800d65c:	2000124c 	.word	0x2000124c

0800d660 <stdio_exit_handler>:
 800d660:	4a02      	ldr	r2, [pc, #8]	@ (800d66c <stdio_exit_handler+0xc>)
 800d662:	4903      	ldr	r1, [pc, #12]	@ (800d670 <stdio_exit_handler+0x10>)
 800d664:	4803      	ldr	r0, [pc, #12]	@ (800d674 <stdio_exit_handler+0x14>)
 800d666:	f000 b869 	b.w	800d73c <_fwalk_sglue>
 800d66a:	bf00      	nop
 800d66c:	2000055c 	.word	0x2000055c
 800d670:	0800e30d 	.word	0x0800e30d
 800d674:	2000056c 	.word	0x2000056c

0800d678 <cleanup_stdio>:
 800d678:	6841      	ldr	r1, [r0, #4]
 800d67a:	4b0c      	ldr	r3, [pc, #48]	@ (800d6ac <cleanup_stdio+0x34>)
 800d67c:	4299      	cmp	r1, r3
 800d67e:	b510      	push	{r4, lr}
 800d680:	4604      	mov	r4, r0
 800d682:	d001      	beq.n	800d688 <cleanup_stdio+0x10>
 800d684:	f000 fe42 	bl	800e30c <_fflush_r>
 800d688:	68a1      	ldr	r1, [r4, #8]
 800d68a:	4b09      	ldr	r3, [pc, #36]	@ (800d6b0 <cleanup_stdio+0x38>)
 800d68c:	4299      	cmp	r1, r3
 800d68e:	d002      	beq.n	800d696 <cleanup_stdio+0x1e>
 800d690:	4620      	mov	r0, r4
 800d692:	f000 fe3b 	bl	800e30c <_fflush_r>
 800d696:	68e1      	ldr	r1, [r4, #12]
 800d698:	4b06      	ldr	r3, [pc, #24]	@ (800d6b4 <cleanup_stdio+0x3c>)
 800d69a:	4299      	cmp	r1, r3
 800d69c:	d004      	beq.n	800d6a8 <cleanup_stdio+0x30>
 800d69e:	4620      	mov	r0, r4
 800d6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6a4:	f000 be32 	b.w	800e30c <_fflush_r>
 800d6a8:	bd10      	pop	{r4, pc}
 800d6aa:	bf00      	nop
 800d6ac:	2000124c 	.word	0x2000124c
 800d6b0:	200012b4 	.word	0x200012b4
 800d6b4:	2000131c 	.word	0x2000131c

0800d6b8 <global_stdio_init.part.0>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e8 <global_stdio_init.part.0+0x30>)
 800d6bc:	4c0b      	ldr	r4, [pc, #44]	@ (800d6ec <global_stdio_init.part.0+0x34>)
 800d6be:	4a0c      	ldr	r2, [pc, #48]	@ (800d6f0 <global_stdio_init.part.0+0x38>)
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2104      	movs	r1, #4
 800d6c8:	f7ff ff94 	bl	800d5f4 <std>
 800d6cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	2109      	movs	r1, #9
 800d6d4:	f7ff ff8e 	bl	800d5f4 <std>
 800d6d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6dc:	2202      	movs	r2, #2
 800d6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e2:	2112      	movs	r1, #18
 800d6e4:	f7ff bf86 	b.w	800d5f4 <std>
 800d6e8:	20001384 	.word	0x20001384
 800d6ec:	2000124c 	.word	0x2000124c
 800d6f0:	0800d661 	.word	0x0800d661

0800d6f4 <__sfp_lock_acquire>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	@ (800d6fc <__sfp_lock_acquire+0x8>)
 800d6f6:	f000 b902 	b.w	800d8fe <__retarget_lock_acquire_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	20001389 	.word	0x20001389

0800d700 <__sfp_lock_release>:
 800d700:	4801      	ldr	r0, [pc, #4]	@ (800d708 <__sfp_lock_release+0x8>)
 800d702:	f000 b8fd 	b.w	800d900 <__retarget_lock_release_recursive>
 800d706:	bf00      	nop
 800d708:	20001389 	.word	0x20001389

0800d70c <__sinit>:
 800d70c:	b510      	push	{r4, lr}
 800d70e:	4604      	mov	r4, r0
 800d710:	f7ff fff0 	bl	800d6f4 <__sfp_lock_acquire>
 800d714:	6a23      	ldr	r3, [r4, #32]
 800d716:	b11b      	cbz	r3, 800d720 <__sinit+0x14>
 800d718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d71c:	f7ff bff0 	b.w	800d700 <__sfp_lock_release>
 800d720:	4b04      	ldr	r3, [pc, #16]	@ (800d734 <__sinit+0x28>)
 800d722:	6223      	str	r3, [r4, #32]
 800d724:	4b04      	ldr	r3, [pc, #16]	@ (800d738 <__sinit+0x2c>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1f5      	bne.n	800d718 <__sinit+0xc>
 800d72c:	f7ff ffc4 	bl	800d6b8 <global_stdio_init.part.0>
 800d730:	e7f2      	b.n	800d718 <__sinit+0xc>
 800d732:	bf00      	nop
 800d734:	0800d679 	.word	0x0800d679
 800d738:	20001384 	.word	0x20001384

0800d73c <_fwalk_sglue>:
 800d73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d740:	4607      	mov	r7, r0
 800d742:	4688      	mov	r8, r1
 800d744:	4614      	mov	r4, r2
 800d746:	2600      	movs	r6, #0
 800d748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d74c:	f1b9 0901 	subs.w	r9, r9, #1
 800d750:	d505      	bpl.n	800d75e <_fwalk_sglue+0x22>
 800d752:	6824      	ldr	r4, [r4, #0]
 800d754:	2c00      	cmp	r4, #0
 800d756:	d1f7      	bne.n	800d748 <_fwalk_sglue+0xc>
 800d758:	4630      	mov	r0, r6
 800d75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d907      	bls.n	800d774 <_fwalk_sglue+0x38>
 800d764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d768:	3301      	adds	r3, #1
 800d76a:	d003      	beq.n	800d774 <_fwalk_sglue+0x38>
 800d76c:	4629      	mov	r1, r5
 800d76e:	4638      	mov	r0, r7
 800d770:	47c0      	blx	r8
 800d772:	4306      	orrs	r6, r0
 800d774:	3568      	adds	r5, #104	@ 0x68
 800d776:	e7e9      	b.n	800d74c <_fwalk_sglue+0x10>

0800d778 <iprintf>:
 800d778:	b40f      	push	{r0, r1, r2, r3}
 800d77a:	b507      	push	{r0, r1, r2, lr}
 800d77c:	4906      	ldr	r1, [pc, #24]	@ (800d798 <iprintf+0x20>)
 800d77e:	ab04      	add	r3, sp, #16
 800d780:	6808      	ldr	r0, [r1, #0]
 800d782:	f853 2b04 	ldr.w	r2, [r3], #4
 800d786:	6881      	ldr	r1, [r0, #8]
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	f000 fa95 	bl	800dcb8 <_vfiprintf_r>
 800d78e:	b003      	add	sp, #12
 800d790:	f85d eb04 	ldr.w	lr, [sp], #4
 800d794:	b004      	add	sp, #16
 800d796:	4770      	bx	lr
 800d798:	20000568 	.word	0x20000568

0800d79c <_puts_r>:
 800d79c:	6a03      	ldr	r3, [r0, #32]
 800d79e:	b570      	push	{r4, r5, r6, lr}
 800d7a0:	6884      	ldr	r4, [r0, #8]
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	460e      	mov	r6, r1
 800d7a6:	b90b      	cbnz	r3, 800d7ac <_puts_r+0x10>
 800d7a8:	f7ff ffb0 	bl	800d70c <__sinit>
 800d7ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7ae:	07db      	lsls	r3, r3, #31
 800d7b0:	d405      	bmi.n	800d7be <_puts_r+0x22>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	0598      	lsls	r0, r3, #22
 800d7b6:	d402      	bmi.n	800d7be <_puts_r+0x22>
 800d7b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ba:	f000 f8a0 	bl	800d8fe <__retarget_lock_acquire_recursive>
 800d7be:	89a3      	ldrh	r3, [r4, #12]
 800d7c0:	0719      	lsls	r1, r3, #28
 800d7c2:	d502      	bpl.n	800d7ca <_puts_r+0x2e>
 800d7c4:	6923      	ldr	r3, [r4, #16]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d135      	bne.n	800d836 <_puts_r+0x9a>
 800d7ca:	4621      	mov	r1, r4
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f000 fe75 	bl	800e4bc <__swsetup_r>
 800d7d2:	b380      	cbz	r0, 800d836 <_puts_r+0x9a>
 800d7d4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d7d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7da:	07da      	lsls	r2, r3, #31
 800d7dc:	d405      	bmi.n	800d7ea <_puts_r+0x4e>
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	059b      	lsls	r3, r3, #22
 800d7e2:	d402      	bmi.n	800d7ea <_puts_r+0x4e>
 800d7e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7e6:	f000 f88b 	bl	800d900 <__retarget_lock_release_recursive>
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	da04      	bge.n	800d7fc <_puts_r+0x60>
 800d7f2:	69a2      	ldr	r2, [r4, #24]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	dc17      	bgt.n	800d828 <_puts_r+0x8c>
 800d7f8:	290a      	cmp	r1, #10
 800d7fa:	d015      	beq.n	800d828 <_puts_r+0x8c>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	1c5a      	adds	r2, r3, #1
 800d800:	6022      	str	r2, [r4, #0]
 800d802:	7019      	strb	r1, [r3, #0]
 800d804:	68a3      	ldr	r3, [r4, #8]
 800d806:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d80a:	3b01      	subs	r3, #1
 800d80c:	60a3      	str	r3, [r4, #8]
 800d80e:	2900      	cmp	r1, #0
 800d810:	d1ed      	bne.n	800d7ee <_puts_r+0x52>
 800d812:	2b00      	cmp	r3, #0
 800d814:	da11      	bge.n	800d83a <_puts_r+0x9e>
 800d816:	4622      	mov	r2, r4
 800d818:	210a      	movs	r1, #10
 800d81a:	4628      	mov	r0, r5
 800d81c:	f000 fe0f 	bl	800e43e <__swbuf_r>
 800d820:	3001      	adds	r0, #1
 800d822:	d0d7      	beq.n	800d7d4 <_puts_r+0x38>
 800d824:	250a      	movs	r5, #10
 800d826:	e7d7      	b.n	800d7d8 <_puts_r+0x3c>
 800d828:	4622      	mov	r2, r4
 800d82a:	4628      	mov	r0, r5
 800d82c:	f000 fe07 	bl	800e43e <__swbuf_r>
 800d830:	3001      	adds	r0, #1
 800d832:	d1e7      	bne.n	800d804 <_puts_r+0x68>
 800d834:	e7ce      	b.n	800d7d4 <_puts_r+0x38>
 800d836:	3e01      	subs	r6, #1
 800d838:	e7e4      	b.n	800d804 <_puts_r+0x68>
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	6022      	str	r2, [r4, #0]
 800d840:	220a      	movs	r2, #10
 800d842:	701a      	strb	r2, [r3, #0]
 800d844:	e7ee      	b.n	800d824 <_puts_r+0x88>
	...

0800d848 <puts>:
 800d848:	4b02      	ldr	r3, [pc, #8]	@ (800d854 <puts+0xc>)
 800d84a:	4601      	mov	r1, r0
 800d84c:	6818      	ldr	r0, [r3, #0]
 800d84e:	f7ff bfa5 	b.w	800d79c <_puts_r>
 800d852:	bf00      	nop
 800d854:	20000568 	.word	0x20000568

0800d858 <memcmp>:
 800d858:	b510      	push	{r4, lr}
 800d85a:	3901      	subs	r1, #1
 800d85c:	4402      	add	r2, r0
 800d85e:	4290      	cmp	r0, r2
 800d860:	d101      	bne.n	800d866 <memcmp+0xe>
 800d862:	2000      	movs	r0, #0
 800d864:	e005      	b.n	800d872 <memcmp+0x1a>
 800d866:	7803      	ldrb	r3, [r0, #0]
 800d868:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d86c:	42a3      	cmp	r3, r4
 800d86e:	d001      	beq.n	800d874 <memcmp+0x1c>
 800d870:	1b18      	subs	r0, r3, r4
 800d872:	bd10      	pop	{r4, pc}
 800d874:	3001      	adds	r0, #1
 800d876:	e7f2      	b.n	800d85e <memcmp+0x6>

0800d878 <memset>:
 800d878:	4402      	add	r2, r0
 800d87a:	4603      	mov	r3, r0
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d100      	bne.n	800d882 <memset+0xa>
 800d880:	4770      	bx	lr
 800d882:	f803 1b01 	strb.w	r1, [r3], #1
 800d886:	e7f9      	b.n	800d87c <memset+0x4>

0800d888 <_sbrk_r>:
 800d888:	b538      	push	{r3, r4, r5, lr}
 800d88a:	4d06      	ldr	r5, [pc, #24]	@ (800d8a4 <_sbrk_r+0x1c>)
 800d88c:	2300      	movs	r3, #0
 800d88e:	4604      	mov	r4, r0
 800d890:	4608      	mov	r0, r1
 800d892:	602b      	str	r3, [r5, #0]
 800d894:	f7f9 f89c 	bl	80069d0 <_sbrk>
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	d102      	bne.n	800d8a2 <_sbrk_r+0x1a>
 800d89c:	682b      	ldr	r3, [r5, #0]
 800d89e:	b103      	cbz	r3, 800d8a2 <_sbrk_r+0x1a>
 800d8a0:	6023      	str	r3, [r4, #0]
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	2000138c 	.word	0x2000138c

0800d8a8 <__errno>:
 800d8a8:	4b01      	ldr	r3, [pc, #4]	@ (800d8b0 <__errno+0x8>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	20000568 	.word	0x20000568

0800d8b4 <__libc_init_array>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	4d0d      	ldr	r5, [pc, #52]	@ (800d8ec <__libc_init_array+0x38>)
 800d8b8:	4c0d      	ldr	r4, [pc, #52]	@ (800d8f0 <__libc_init_array+0x3c>)
 800d8ba:	1b64      	subs	r4, r4, r5
 800d8bc:	10a4      	asrs	r4, r4, #2
 800d8be:	2600      	movs	r6, #0
 800d8c0:	42a6      	cmp	r6, r4
 800d8c2:	d109      	bne.n	800d8d8 <__libc_init_array+0x24>
 800d8c4:	4d0b      	ldr	r5, [pc, #44]	@ (800d8f4 <__libc_init_array+0x40>)
 800d8c6:	4c0c      	ldr	r4, [pc, #48]	@ (800d8f8 <__libc_init_array+0x44>)
 800d8c8:	f000 ff3a 	bl	800e740 <_init>
 800d8cc:	1b64      	subs	r4, r4, r5
 800d8ce:	10a4      	asrs	r4, r4, #2
 800d8d0:	2600      	movs	r6, #0
 800d8d2:	42a6      	cmp	r6, r4
 800d8d4:	d105      	bne.n	800d8e2 <__libc_init_array+0x2e>
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8dc:	4798      	blx	r3
 800d8de:	3601      	adds	r6, #1
 800d8e0:	e7ee      	b.n	800d8c0 <__libc_init_array+0xc>
 800d8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8e6:	4798      	blx	r3
 800d8e8:	3601      	adds	r6, #1
 800d8ea:	e7f2      	b.n	800d8d2 <__libc_init_array+0x1e>
 800d8ec:	0800f084 	.word	0x0800f084
 800d8f0:	0800f084 	.word	0x0800f084
 800d8f4:	0800f084 	.word	0x0800f084
 800d8f8:	0800f088 	.word	0x0800f088

0800d8fc <__retarget_lock_init_recursive>:
 800d8fc:	4770      	bx	lr

0800d8fe <__retarget_lock_acquire_recursive>:
 800d8fe:	4770      	bx	lr

0800d900 <__retarget_lock_release_recursive>:
 800d900:	4770      	bx	lr

0800d902 <memcpy>:
 800d902:	440a      	add	r2, r1
 800d904:	4291      	cmp	r1, r2
 800d906:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d90a:	d100      	bne.n	800d90e <memcpy+0xc>
 800d90c:	4770      	bx	lr
 800d90e:	b510      	push	{r4, lr}
 800d910:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d914:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d918:	4291      	cmp	r1, r2
 800d91a:	d1f9      	bne.n	800d910 <memcpy+0xe>
 800d91c:	bd10      	pop	{r4, pc}
	...

0800d920 <_free_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	4605      	mov	r5, r0
 800d924:	2900      	cmp	r1, #0
 800d926:	d041      	beq.n	800d9ac <_free_r+0x8c>
 800d928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d92c:	1f0c      	subs	r4, r1, #4
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bfb8      	it	lt
 800d932:	18e4      	addlt	r4, r4, r3
 800d934:	f7ff fe32 	bl	800d59c <__malloc_lock>
 800d938:	4a1d      	ldr	r2, [pc, #116]	@ (800d9b0 <_free_r+0x90>)
 800d93a:	6813      	ldr	r3, [r2, #0]
 800d93c:	b933      	cbnz	r3, 800d94c <_free_r+0x2c>
 800d93e:	6063      	str	r3, [r4, #4]
 800d940:	6014      	str	r4, [r2, #0]
 800d942:	4628      	mov	r0, r5
 800d944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d948:	f7ff be2e 	b.w	800d5a8 <__malloc_unlock>
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	d908      	bls.n	800d962 <_free_r+0x42>
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	1821      	adds	r1, r4, r0
 800d954:	428b      	cmp	r3, r1
 800d956:	bf01      	itttt	eq
 800d958:	6819      	ldreq	r1, [r3, #0]
 800d95a:	685b      	ldreq	r3, [r3, #4]
 800d95c:	1809      	addeq	r1, r1, r0
 800d95e:	6021      	streq	r1, [r4, #0]
 800d960:	e7ed      	b.n	800d93e <_free_r+0x1e>
 800d962:	461a      	mov	r2, r3
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	b10b      	cbz	r3, 800d96c <_free_r+0x4c>
 800d968:	42a3      	cmp	r3, r4
 800d96a:	d9fa      	bls.n	800d962 <_free_r+0x42>
 800d96c:	6811      	ldr	r1, [r2, #0]
 800d96e:	1850      	adds	r0, r2, r1
 800d970:	42a0      	cmp	r0, r4
 800d972:	d10b      	bne.n	800d98c <_free_r+0x6c>
 800d974:	6820      	ldr	r0, [r4, #0]
 800d976:	4401      	add	r1, r0
 800d978:	1850      	adds	r0, r2, r1
 800d97a:	4283      	cmp	r3, r0
 800d97c:	6011      	str	r1, [r2, #0]
 800d97e:	d1e0      	bne.n	800d942 <_free_r+0x22>
 800d980:	6818      	ldr	r0, [r3, #0]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	6053      	str	r3, [r2, #4]
 800d986:	4408      	add	r0, r1
 800d988:	6010      	str	r0, [r2, #0]
 800d98a:	e7da      	b.n	800d942 <_free_r+0x22>
 800d98c:	d902      	bls.n	800d994 <_free_r+0x74>
 800d98e:	230c      	movs	r3, #12
 800d990:	602b      	str	r3, [r5, #0]
 800d992:	e7d6      	b.n	800d942 <_free_r+0x22>
 800d994:	6820      	ldr	r0, [r4, #0]
 800d996:	1821      	adds	r1, r4, r0
 800d998:	428b      	cmp	r3, r1
 800d99a:	bf04      	itt	eq
 800d99c:	6819      	ldreq	r1, [r3, #0]
 800d99e:	685b      	ldreq	r3, [r3, #4]
 800d9a0:	6063      	str	r3, [r4, #4]
 800d9a2:	bf04      	itt	eq
 800d9a4:	1809      	addeq	r1, r1, r0
 800d9a6:	6021      	streq	r1, [r4, #0]
 800d9a8:	6054      	str	r4, [r2, #4]
 800d9aa:	e7ca      	b.n	800d942 <_free_r+0x22>
 800d9ac:	bd38      	pop	{r3, r4, r5, pc}
 800d9ae:	bf00      	nop
 800d9b0:	20001248 	.word	0x20001248

0800d9b4 <__ssputs_r>:
 800d9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b8:	688e      	ldr	r6, [r1, #8]
 800d9ba:	461f      	mov	r7, r3
 800d9bc:	42be      	cmp	r6, r7
 800d9be:	680b      	ldr	r3, [r1, #0]
 800d9c0:	4682      	mov	sl, r0
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	4690      	mov	r8, r2
 800d9c6:	d82d      	bhi.n	800da24 <__ssputs_r+0x70>
 800d9c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9d0:	d026      	beq.n	800da20 <__ssputs_r+0x6c>
 800d9d2:	6965      	ldr	r5, [r4, #20]
 800d9d4:	6909      	ldr	r1, [r1, #16]
 800d9d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9da:	eba3 0901 	sub.w	r9, r3, r1
 800d9de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9e2:	1c7b      	adds	r3, r7, #1
 800d9e4:	444b      	add	r3, r9
 800d9e6:	106d      	asrs	r5, r5, #1
 800d9e8:	429d      	cmp	r5, r3
 800d9ea:	bf38      	it	cc
 800d9ec:	461d      	movcc	r5, r3
 800d9ee:	0553      	lsls	r3, r2, #21
 800d9f0:	d527      	bpl.n	800da42 <__ssputs_r+0x8e>
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f7ff fd52 	bl	800d49c <_malloc_r>
 800d9f8:	4606      	mov	r6, r0
 800d9fa:	b360      	cbz	r0, 800da56 <__ssputs_r+0xa2>
 800d9fc:	6921      	ldr	r1, [r4, #16]
 800d9fe:	464a      	mov	r2, r9
 800da00:	f7ff ff7f 	bl	800d902 <memcpy>
 800da04:	89a3      	ldrh	r3, [r4, #12]
 800da06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da0e:	81a3      	strh	r3, [r4, #12]
 800da10:	6126      	str	r6, [r4, #16]
 800da12:	6165      	str	r5, [r4, #20]
 800da14:	444e      	add	r6, r9
 800da16:	eba5 0509 	sub.w	r5, r5, r9
 800da1a:	6026      	str	r6, [r4, #0]
 800da1c:	60a5      	str	r5, [r4, #8]
 800da1e:	463e      	mov	r6, r7
 800da20:	42be      	cmp	r6, r7
 800da22:	d900      	bls.n	800da26 <__ssputs_r+0x72>
 800da24:	463e      	mov	r6, r7
 800da26:	6820      	ldr	r0, [r4, #0]
 800da28:	4632      	mov	r2, r6
 800da2a:	4641      	mov	r1, r8
 800da2c:	f000 fdfe 	bl	800e62c <memmove>
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	1b9b      	subs	r3, r3, r6
 800da34:	60a3      	str	r3, [r4, #8]
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	4433      	add	r3, r6
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	2000      	movs	r0, #0
 800da3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da42:	462a      	mov	r2, r5
 800da44:	f000 fccd 	bl	800e3e2 <_realloc_r>
 800da48:	4606      	mov	r6, r0
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d1e0      	bne.n	800da10 <__ssputs_r+0x5c>
 800da4e:	6921      	ldr	r1, [r4, #16]
 800da50:	4650      	mov	r0, sl
 800da52:	f7ff ff65 	bl	800d920 <_free_r>
 800da56:	230c      	movs	r3, #12
 800da58:	f8ca 3000 	str.w	r3, [sl]
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da68:	e7e9      	b.n	800da3e <__ssputs_r+0x8a>
	...

0800da6c <_svfiprintf_r>:
 800da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da70:	4698      	mov	r8, r3
 800da72:	898b      	ldrh	r3, [r1, #12]
 800da74:	061b      	lsls	r3, r3, #24
 800da76:	b09d      	sub	sp, #116	@ 0x74
 800da78:	4607      	mov	r7, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	4614      	mov	r4, r2
 800da7e:	d510      	bpl.n	800daa2 <_svfiprintf_r+0x36>
 800da80:	690b      	ldr	r3, [r1, #16]
 800da82:	b973      	cbnz	r3, 800daa2 <_svfiprintf_r+0x36>
 800da84:	2140      	movs	r1, #64	@ 0x40
 800da86:	f7ff fd09 	bl	800d49c <_malloc_r>
 800da8a:	6028      	str	r0, [r5, #0]
 800da8c:	6128      	str	r0, [r5, #16]
 800da8e:	b930      	cbnz	r0, 800da9e <_svfiprintf_r+0x32>
 800da90:	230c      	movs	r3, #12
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da98:	b01d      	add	sp, #116	@ 0x74
 800da9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9e:	2340      	movs	r3, #64	@ 0x40
 800daa0:	616b      	str	r3, [r5, #20]
 800daa2:	2300      	movs	r3, #0
 800daa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800daa6:	2320      	movs	r3, #32
 800daa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800daac:	f8cd 800c 	str.w	r8, [sp, #12]
 800dab0:	2330      	movs	r3, #48	@ 0x30
 800dab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dc50 <_svfiprintf_r+0x1e4>
 800dab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800daba:	f04f 0901 	mov.w	r9, #1
 800dabe:	4623      	mov	r3, r4
 800dac0:	469a      	mov	sl, r3
 800dac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dac6:	b10a      	cbz	r2, 800dacc <_svfiprintf_r+0x60>
 800dac8:	2a25      	cmp	r2, #37	@ 0x25
 800daca:	d1f9      	bne.n	800dac0 <_svfiprintf_r+0x54>
 800dacc:	ebba 0b04 	subs.w	fp, sl, r4
 800dad0:	d00b      	beq.n	800daea <_svfiprintf_r+0x7e>
 800dad2:	465b      	mov	r3, fp
 800dad4:	4622      	mov	r2, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	4638      	mov	r0, r7
 800dada:	f7ff ff6b 	bl	800d9b4 <__ssputs_r>
 800dade:	3001      	adds	r0, #1
 800dae0:	f000 80a7 	beq.w	800dc32 <_svfiprintf_r+0x1c6>
 800dae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dae6:	445a      	add	r2, fp
 800dae8:	9209      	str	r2, [sp, #36]	@ 0x24
 800daea:	f89a 3000 	ldrb.w	r3, [sl]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 809f 	beq.w	800dc32 <_svfiprintf_r+0x1c6>
 800daf4:	2300      	movs	r3, #0
 800daf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dafe:	f10a 0a01 	add.w	sl, sl, #1
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	9307      	str	r3, [sp, #28]
 800db06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800db0c:	4654      	mov	r4, sl
 800db0e:	2205      	movs	r2, #5
 800db10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db14:	484e      	ldr	r0, [pc, #312]	@ (800dc50 <_svfiprintf_r+0x1e4>)
 800db16:	f7f2 fb63 	bl	80001e0 <memchr>
 800db1a:	9a04      	ldr	r2, [sp, #16]
 800db1c:	b9d8      	cbnz	r0, 800db56 <_svfiprintf_r+0xea>
 800db1e:	06d0      	lsls	r0, r2, #27
 800db20:	bf44      	itt	mi
 800db22:	2320      	movmi	r3, #32
 800db24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db28:	0711      	lsls	r1, r2, #28
 800db2a:	bf44      	itt	mi
 800db2c:	232b      	movmi	r3, #43	@ 0x2b
 800db2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db32:	f89a 3000 	ldrb.w	r3, [sl]
 800db36:	2b2a      	cmp	r3, #42	@ 0x2a
 800db38:	d015      	beq.n	800db66 <_svfiprintf_r+0xfa>
 800db3a:	9a07      	ldr	r2, [sp, #28]
 800db3c:	4654      	mov	r4, sl
 800db3e:	2000      	movs	r0, #0
 800db40:	f04f 0c0a 	mov.w	ip, #10
 800db44:	4621      	mov	r1, r4
 800db46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db4a:	3b30      	subs	r3, #48	@ 0x30
 800db4c:	2b09      	cmp	r3, #9
 800db4e:	d94b      	bls.n	800dbe8 <_svfiprintf_r+0x17c>
 800db50:	b1b0      	cbz	r0, 800db80 <_svfiprintf_r+0x114>
 800db52:	9207      	str	r2, [sp, #28]
 800db54:	e014      	b.n	800db80 <_svfiprintf_r+0x114>
 800db56:	eba0 0308 	sub.w	r3, r0, r8
 800db5a:	fa09 f303 	lsl.w	r3, r9, r3
 800db5e:	4313      	orrs	r3, r2
 800db60:	9304      	str	r3, [sp, #16]
 800db62:	46a2      	mov	sl, r4
 800db64:	e7d2      	b.n	800db0c <_svfiprintf_r+0xa0>
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	1d19      	adds	r1, r3, #4
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	9103      	str	r1, [sp, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	bfbb      	ittet	lt
 800db72:	425b      	neglt	r3, r3
 800db74:	f042 0202 	orrlt.w	r2, r2, #2
 800db78:	9307      	strge	r3, [sp, #28]
 800db7a:	9307      	strlt	r3, [sp, #28]
 800db7c:	bfb8      	it	lt
 800db7e:	9204      	strlt	r2, [sp, #16]
 800db80:	7823      	ldrb	r3, [r4, #0]
 800db82:	2b2e      	cmp	r3, #46	@ 0x2e
 800db84:	d10a      	bne.n	800db9c <_svfiprintf_r+0x130>
 800db86:	7863      	ldrb	r3, [r4, #1]
 800db88:	2b2a      	cmp	r3, #42	@ 0x2a
 800db8a:	d132      	bne.n	800dbf2 <_svfiprintf_r+0x186>
 800db8c:	9b03      	ldr	r3, [sp, #12]
 800db8e:	1d1a      	adds	r2, r3, #4
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	9203      	str	r2, [sp, #12]
 800db94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db98:	3402      	adds	r4, #2
 800db9a:	9305      	str	r3, [sp, #20]
 800db9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dc60 <_svfiprintf_r+0x1f4>
 800dba0:	7821      	ldrb	r1, [r4, #0]
 800dba2:	2203      	movs	r2, #3
 800dba4:	4650      	mov	r0, sl
 800dba6:	f7f2 fb1b 	bl	80001e0 <memchr>
 800dbaa:	b138      	cbz	r0, 800dbbc <_svfiprintf_r+0x150>
 800dbac:	9b04      	ldr	r3, [sp, #16]
 800dbae:	eba0 000a 	sub.w	r0, r0, sl
 800dbb2:	2240      	movs	r2, #64	@ 0x40
 800dbb4:	4082      	lsls	r2, r0
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	3401      	adds	r4, #1
 800dbba:	9304      	str	r3, [sp, #16]
 800dbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc0:	4824      	ldr	r0, [pc, #144]	@ (800dc54 <_svfiprintf_r+0x1e8>)
 800dbc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbc6:	2206      	movs	r2, #6
 800dbc8:	f7f2 fb0a 	bl	80001e0 <memchr>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d036      	beq.n	800dc3e <_svfiprintf_r+0x1d2>
 800dbd0:	4b21      	ldr	r3, [pc, #132]	@ (800dc58 <_svfiprintf_r+0x1ec>)
 800dbd2:	bb1b      	cbnz	r3, 800dc1c <_svfiprintf_r+0x1b0>
 800dbd4:	9b03      	ldr	r3, [sp, #12]
 800dbd6:	3307      	adds	r3, #7
 800dbd8:	f023 0307 	bic.w	r3, r3, #7
 800dbdc:	3308      	adds	r3, #8
 800dbde:	9303      	str	r3, [sp, #12]
 800dbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe2:	4433      	add	r3, r6
 800dbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbe6:	e76a      	b.n	800dabe <_svfiprintf_r+0x52>
 800dbe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbec:	460c      	mov	r4, r1
 800dbee:	2001      	movs	r0, #1
 800dbf0:	e7a8      	b.n	800db44 <_svfiprintf_r+0xd8>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	3401      	adds	r4, #1
 800dbf6:	9305      	str	r3, [sp, #20]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	f04f 0c0a 	mov.w	ip, #10
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc04:	3a30      	subs	r2, #48	@ 0x30
 800dc06:	2a09      	cmp	r2, #9
 800dc08:	d903      	bls.n	800dc12 <_svfiprintf_r+0x1a6>
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d0c6      	beq.n	800db9c <_svfiprintf_r+0x130>
 800dc0e:	9105      	str	r1, [sp, #20]
 800dc10:	e7c4      	b.n	800db9c <_svfiprintf_r+0x130>
 800dc12:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc16:	4604      	mov	r4, r0
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e7f0      	b.n	800dbfe <_svfiprintf_r+0x192>
 800dc1c:	ab03      	add	r3, sp, #12
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	462a      	mov	r2, r5
 800dc22:	4b0e      	ldr	r3, [pc, #56]	@ (800dc5c <_svfiprintf_r+0x1f0>)
 800dc24:	a904      	add	r1, sp, #16
 800dc26:	4638      	mov	r0, r7
 800dc28:	f3af 8000 	nop.w
 800dc2c:	1c42      	adds	r2, r0, #1
 800dc2e:	4606      	mov	r6, r0
 800dc30:	d1d6      	bne.n	800dbe0 <_svfiprintf_r+0x174>
 800dc32:	89ab      	ldrh	r3, [r5, #12]
 800dc34:	065b      	lsls	r3, r3, #25
 800dc36:	f53f af2d 	bmi.w	800da94 <_svfiprintf_r+0x28>
 800dc3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc3c:	e72c      	b.n	800da98 <_svfiprintf_r+0x2c>
 800dc3e:	ab03      	add	r3, sp, #12
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	462a      	mov	r2, r5
 800dc44:	4b05      	ldr	r3, [pc, #20]	@ (800dc5c <_svfiprintf_r+0x1f0>)
 800dc46:	a904      	add	r1, sp, #16
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f000 f9bb 	bl	800dfc4 <_printf_i>
 800dc4e:	e7ed      	b.n	800dc2c <_svfiprintf_r+0x1c0>
 800dc50:	0800f048 	.word	0x0800f048
 800dc54:	0800f052 	.word	0x0800f052
 800dc58:	00000000 	.word	0x00000000
 800dc5c:	0800d9b5 	.word	0x0800d9b5
 800dc60:	0800f04e 	.word	0x0800f04e

0800dc64 <__sfputc_r>:
 800dc64:	6893      	ldr	r3, [r2, #8]
 800dc66:	3b01      	subs	r3, #1
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	b410      	push	{r4}
 800dc6c:	6093      	str	r3, [r2, #8]
 800dc6e:	da08      	bge.n	800dc82 <__sfputc_r+0x1e>
 800dc70:	6994      	ldr	r4, [r2, #24]
 800dc72:	42a3      	cmp	r3, r4
 800dc74:	db01      	blt.n	800dc7a <__sfputc_r+0x16>
 800dc76:	290a      	cmp	r1, #10
 800dc78:	d103      	bne.n	800dc82 <__sfputc_r+0x1e>
 800dc7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc7e:	f000 bbde 	b.w	800e43e <__swbuf_r>
 800dc82:	6813      	ldr	r3, [r2, #0]
 800dc84:	1c58      	adds	r0, r3, #1
 800dc86:	6010      	str	r0, [r2, #0]
 800dc88:	7019      	strb	r1, [r3, #0]
 800dc8a:	4608      	mov	r0, r1
 800dc8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <__sfputs_r>:
 800dc92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc94:	4606      	mov	r6, r0
 800dc96:	460f      	mov	r7, r1
 800dc98:	4614      	mov	r4, r2
 800dc9a:	18d5      	adds	r5, r2, r3
 800dc9c:	42ac      	cmp	r4, r5
 800dc9e:	d101      	bne.n	800dca4 <__sfputs_r+0x12>
 800dca0:	2000      	movs	r0, #0
 800dca2:	e007      	b.n	800dcb4 <__sfputs_r+0x22>
 800dca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dca8:	463a      	mov	r2, r7
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7ff ffda 	bl	800dc64 <__sfputc_r>
 800dcb0:	1c43      	adds	r3, r0, #1
 800dcb2:	d1f3      	bne.n	800dc9c <__sfputs_r+0xa>
 800dcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dcb8 <_vfiprintf_r>:
 800dcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcbc:	460d      	mov	r5, r1
 800dcbe:	b09d      	sub	sp, #116	@ 0x74
 800dcc0:	4614      	mov	r4, r2
 800dcc2:	4698      	mov	r8, r3
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	b118      	cbz	r0, 800dcd0 <_vfiprintf_r+0x18>
 800dcc8:	6a03      	ldr	r3, [r0, #32]
 800dcca:	b90b      	cbnz	r3, 800dcd0 <_vfiprintf_r+0x18>
 800dccc:	f7ff fd1e 	bl	800d70c <__sinit>
 800dcd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcd2:	07d9      	lsls	r1, r3, #31
 800dcd4:	d405      	bmi.n	800dce2 <_vfiprintf_r+0x2a>
 800dcd6:	89ab      	ldrh	r3, [r5, #12]
 800dcd8:	059a      	lsls	r2, r3, #22
 800dcda:	d402      	bmi.n	800dce2 <_vfiprintf_r+0x2a>
 800dcdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dcde:	f7ff fe0e 	bl	800d8fe <__retarget_lock_acquire_recursive>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	071b      	lsls	r3, r3, #28
 800dce6:	d501      	bpl.n	800dcec <_vfiprintf_r+0x34>
 800dce8:	692b      	ldr	r3, [r5, #16]
 800dcea:	b99b      	cbnz	r3, 800dd14 <_vfiprintf_r+0x5c>
 800dcec:	4629      	mov	r1, r5
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f000 fbe4 	bl	800e4bc <__swsetup_r>
 800dcf4:	b170      	cbz	r0, 800dd14 <_vfiprintf_r+0x5c>
 800dcf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dcf8:	07dc      	lsls	r4, r3, #31
 800dcfa:	d504      	bpl.n	800dd06 <_vfiprintf_r+0x4e>
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd00:	b01d      	add	sp, #116	@ 0x74
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd06:	89ab      	ldrh	r3, [r5, #12]
 800dd08:	0598      	lsls	r0, r3, #22
 800dd0a:	d4f7      	bmi.n	800dcfc <_vfiprintf_r+0x44>
 800dd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd0e:	f7ff fdf7 	bl	800d900 <__retarget_lock_release_recursive>
 800dd12:	e7f3      	b.n	800dcfc <_vfiprintf_r+0x44>
 800dd14:	2300      	movs	r3, #0
 800dd16:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd18:	2320      	movs	r3, #32
 800dd1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd22:	2330      	movs	r3, #48	@ 0x30
 800dd24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ded4 <_vfiprintf_r+0x21c>
 800dd28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd2c:	f04f 0901 	mov.w	r9, #1
 800dd30:	4623      	mov	r3, r4
 800dd32:	469a      	mov	sl, r3
 800dd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd38:	b10a      	cbz	r2, 800dd3e <_vfiprintf_r+0x86>
 800dd3a:	2a25      	cmp	r2, #37	@ 0x25
 800dd3c:	d1f9      	bne.n	800dd32 <_vfiprintf_r+0x7a>
 800dd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800dd42:	d00b      	beq.n	800dd5c <_vfiprintf_r+0xa4>
 800dd44:	465b      	mov	r3, fp
 800dd46:	4622      	mov	r2, r4
 800dd48:	4629      	mov	r1, r5
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7ff ffa1 	bl	800dc92 <__sfputs_r>
 800dd50:	3001      	adds	r0, #1
 800dd52:	f000 80a7 	beq.w	800dea4 <_vfiprintf_r+0x1ec>
 800dd56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd58:	445a      	add	r2, fp
 800dd5a:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f000 809f 	beq.w	800dea4 <_vfiprintf_r+0x1ec>
 800dd66:	2300      	movs	r3, #0
 800dd68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd70:	f10a 0a01 	add.w	sl, sl, #1
 800dd74:	9304      	str	r3, [sp, #16]
 800dd76:	9307      	str	r3, [sp, #28]
 800dd78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd7e:	4654      	mov	r4, sl
 800dd80:	2205      	movs	r2, #5
 800dd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd86:	4853      	ldr	r0, [pc, #332]	@ (800ded4 <_vfiprintf_r+0x21c>)
 800dd88:	f7f2 fa2a 	bl	80001e0 <memchr>
 800dd8c:	9a04      	ldr	r2, [sp, #16]
 800dd8e:	b9d8      	cbnz	r0, 800ddc8 <_vfiprintf_r+0x110>
 800dd90:	06d1      	lsls	r1, r2, #27
 800dd92:	bf44      	itt	mi
 800dd94:	2320      	movmi	r3, #32
 800dd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd9a:	0713      	lsls	r3, r2, #28
 800dd9c:	bf44      	itt	mi
 800dd9e:	232b      	movmi	r3, #43	@ 0x2b
 800dda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dda4:	f89a 3000 	ldrb.w	r3, [sl]
 800dda8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddaa:	d015      	beq.n	800ddd8 <_vfiprintf_r+0x120>
 800ddac:	9a07      	ldr	r2, [sp, #28]
 800ddae:	4654      	mov	r4, sl
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	f04f 0c0a 	mov.w	ip, #10
 800ddb6:	4621      	mov	r1, r4
 800ddb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddbc:	3b30      	subs	r3, #48	@ 0x30
 800ddbe:	2b09      	cmp	r3, #9
 800ddc0:	d94b      	bls.n	800de5a <_vfiprintf_r+0x1a2>
 800ddc2:	b1b0      	cbz	r0, 800ddf2 <_vfiprintf_r+0x13a>
 800ddc4:	9207      	str	r2, [sp, #28]
 800ddc6:	e014      	b.n	800ddf2 <_vfiprintf_r+0x13a>
 800ddc8:	eba0 0308 	sub.w	r3, r0, r8
 800ddcc:	fa09 f303 	lsl.w	r3, r9, r3
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	9304      	str	r3, [sp, #16]
 800ddd4:	46a2      	mov	sl, r4
 800ddd6:	e7d2      	b.n	800dd7e <_vfiprintf_r+0xc6>
 800ddd8:	9b03      	ldr	r3, [sp, #12]
 800ddda:	1d19      	adds	r1, r3, #4
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	9103      	str	r1, [sp, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bfbb      	ittet	lt
 800dde4:	425b      	neglt	r3, r3
 800dde6:	f042 0202 	orrlt.w	r2, r2, #2
 800ddea:	9307      	strge	r3, [sp, #28]
 800ddec:	9307      	strlt	r3, [sp, #28]
 800ddee:	bfb8      	it	lt
 800ddf0:	9204      	strlt	r2, [sp, #16]
 800ddf2:	7823      	ldrb	r3, [r4, #0]
 800ddf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddf6:	d10a      	bne.n	800de0e <_vfiprintf_r+0x156>
 800ddf8:	7863      	ldrb	r3, [r4, #1]
 800ddfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddfc:	d132      	bne.n	800de64 <_vfiprintf_r+0x1ac>
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	1d1a      	adds	r2, r3, #4
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	9203      	str	r2, [sp, #12]
 800de06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de0a:	3402      	adds	r4, #2
 800de0c:	9305      	str	r3, [sp, #20]
 800de0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dee4 <_vfiprintf_r+0x22c>
 800de12:	7821      	ldrb	r1, [r4, #0]
 800de14:	2203      	movs	r2, #3
 800de16:	4650      	mov	r0, sl
 800de18:	f7f2 f9e2 	bl	80001e0 <memchr>
 800de1c:	b138      	cbz	r0, 800de2e <_vfiprintf_r+0x176>
 800de1e:	9b04      	ldr	r3, [sp, #16]
 800de20:	eba0 000a 	sub.w	r0, r0, sl
 800de24:	2240      	movs	r2, #64	@ 0x40
 800de26:	4082      	lsls	r2, r0
 800de28:	4313      	orrs	r3, r2
 800de2a:	3401      	adds	r4, #1
 800de2c:	9304      	str	r3, [sp, #16]
 800de2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de32:	4829      	ldr	r0, [pc, #164]	@ (800ded8 <_vfiprintf_r+0x220>)
 800de34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de38:	2206      	movs	r2, #6
 800de3a:	f7f2 f9d1 	bl	80001e0 <memchr>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d03f      	beq.n	800dec2 <_vfiprintf_r+0x20a>
 800de42:	4b26      	ldr	r3, [pc, #152]	@ (800dedc <_vfiprintf_r+0x224>)
 800de44:	bb1b      	cbnz	r3, 800de8e <_vfiprintf_r+0x1d6>
 800de46:	9b03      	ldr	r3, [sp, #12]
 800de48:	3307      	adds	r3, #7
 800de4a:	f023 0307 	bic.w	r3, r3, #7
 800de4e:	3308      	adds	r3, #8
 800de50:	9303      	str	r3, [sp, #12]
 800de52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de54:	443b      	add	r3, r7
 800de56:	9309      	str	r3, [sp, #36]	@ 0x24
 800de58:	e76a      	b.n	800dd30 <_vfiprintf_r+0x78>
 800de5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800de5e:	460c      	mov	r4, r1
 800de60:	2001      	movs	r0, #1
 800de62:	e7a8      	b.n	800ddb6 <_vfiprintf_r+0xfe>
 800de64:	2300      	movs	r3, #0
 800de66:	3401      	adds	r4, #1
 800de68:	9305      	str	r3, [sp, #20]
 800de6a:	4619      	mov	r1, r3
 800de6c:	f04f 0c0a 	mov.w	ip, #10
 800de70:	4620      	mov	r0, r4
 800de72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de76:	3a30      	subs	r2, #48	@ 0x30
 800de78:	2a09      	cmp	r2, #9
 800de7a:	d903      	bls.n	800de84 <_vfiprintf_r+0x1cc>
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d0c6      	beq.n	800de0e <_vfiprintf_r+0x156>
 800de80:	9105      	str	r1, [sp, #20]
 800de82:	e7c4      	b.n	800de0e <_vfiprintf_r+0x156>
 800de84:	fb0c 2101 	mla	r1, ip, r1, r2
 800de88:	4604      	mov	r4, r0
 800de8a:	2301      	movs	r3, #1
 800de8c:	e7f0      	b.n	800de70 <_vfiprintf_r+0x1b8>
 800de8e:	ab03      	add	r3, sp, #12
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	462a      	mov	r2, r5
 800de94:	4b12      	ldr	r3, [pc, #72]	@ (800dee0 <_vfiprintf_r+0x228>)
 800de96:	a904      	add	r1, sp, #16
 800de98:	4630      	mov	r0, r6
 800de9a:	f3af 8000 	nop.w
 800de9e:	4607      	mov	r7, r0
 800dea0:	1c78      	adds	r0, r7, #1
 800dea2:	d1d6      	bne.n	800de52 <_vfiprintf_r+0x19a>
 800dea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dea6:	07d9      	lsls	r1, r3, #31
 800dea8:	d405      	bmi.n	800deb6 <_vfiprintf_r+0x1fe>
 800deaa:	89ab      	ldrh	r3, [r5, #12]
 800deac:	059a      	lsls	r2, r3, #22
 800deae:	d402      	bmi.n	800deb6 <_vfiprintf_r+0x1fe>
 800deb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800deb2:	f7ff fd25 	bl	800d900 <__retarget_lock_release_recursive>
 800deb6:	89ab      	ldrh	r3, [r5, #12]
 800deb8:	065b      	lsls	r3, r3, #25
 800deba:	f53f af1f 	bmi.w	800dcfc <_vfiprintf_r+0x44>
 800debe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dec0:	e71e      	b.n	800dd00 <_vfiprintf_r+0x48>
 800dec2:	ab03      	add	r3, sp, #12
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	462a      	mov	r2, r5
 800dec8:	4b05      	ldr	r3, [pc, #20]	@ (800dee0 <_vfiprintf_r+0x228>)
 800deca:	a904      	add	r1, sp, #16
 800decc:	4630      	mov	r0, r6
 800dece:	f000 f879 	bl	800dfc4 <_printf_i>
 800ded2:	e7e4      	b.n	800de9e <_vfiprintf_r+0x1e6>
 800ded4:	0800f048 	.word	0x0800f048
 800ded8:	0800f052 	.word	0x0800f052
 800dedc:	00000000 	.word	0x00000000
 800dee0:	0800dc93 	.word	0x0800dc93
 800dee4:	0800f04e 	.word	0x0800f04e

0800dee8 <_printf_common>:
 800dee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deec:	4616      	mov	r6, r2
 800deee:	4698      	mov	r8, r3
 800def0:	688a      	ldr	r2, [r1, #8]
 800def2:	690b      	ldr	r3, [r1, #16]
 800def4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800def8:	4293      	cmp	r3, r2
 800defa:	bfb8      	it	lt
 800defc:	4613      	movlt	r3, r2
 800defe:	6033      	str	r3, [r6, #0]
 800df00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df04:	4607      	mov	r7, r0
 800df06:	460c      	mov	r4, r1
 800df08:	b10a      	cbz	r2, 800df0e <_printf_common+0x26>
 800df0a:	3301      	adds	r3, #1
 800df0c:	6033      	str	r3, [r6, #0]
 800df0e:	6823      	ldr	r3, [r4, #0]
 800df10:	0699      	lsls	r1, r3, #26
 800df12:	bf42      	ittt	mi
 800df14:	6833      	ldrmi	r3, [r6, #0]
 800df16:	3302      	addmi	r3, #2
 800df18:	6033      	strmi	r3, [r6, #0]
 800df1a:	6825      	ldr	r5, [r4, #0]
 800df1c:	f015 0506 	ands.w	r5, r5, #6
 800df20:	d106      	bne.n	800df30 <_printf_common+0x48>
 800df22:	f104 0a19 	add.w	sl, r4, #25
 800df26:	68e3      	ldr	r3, [r4, #12]
 800df28:	6832      	ldr	r2, [r6, #0]
 800df2a:	1a9b      	subs	r3, r3, r2
 800df2c:	42ab      	cmp	r3, r5
 800df2e:	dc26      	bgt.n	800df7e <_printf_common+0x96>
 800df30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df34:	6822      	ldr	r2, [r4, #0]
 800df36:	3b00      	subs	r3, #0
 800df38:	bf18      	it	ne
 800df3a:	2301      	movne	r3, #1
 800df3c:	0692      	lsls	r2, r2, #26
 800df3e:	d42b      	bmi.n	800df98 <_printf_common+0xb0>
 800df40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df44:	4641      	mov	r1, r8
 800df46:	4638      	mov	r0, r7
 800df48:	47c8      	blx	r9
 800df4a:	3001      	adds	r0, #1
 800df4c:	d01e      	beq.n	800df8c <_printf_common+0xa4>
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	6922      	ldr	r2, [r4, #16]
 800df52:	f003 0306 	and.w	r3, r3, #6
 800df56:	2b04      	cmp	r3, #4
 800df58:	bf02      	ittt	eq
 800df5a:	68e5      	ldreq	r5, [r4, #12]
 800df5c:	6833      	ldreq	r3, [r6, #0]
 800df5e:	1aed      	subeq	r5, r5, r3
 800df60:	68a3      	ldr	r3, [r4, #8]
 800df62:	bf0c      	ite	eq
 800df64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df68:	2500      	movne	r5, #0
 800df6a:	4293      	cmp	r3, r2
 800df6c:	bfc4      	itt	gt
 800df6e:	1a9b      	subgt	r3, r3, r2
 800df70:	18ed      	addgt	r5, r5, r3
 800df72:	2600      	movs	r6, #0
 800df74:	341a      	adds	r4, #26
 800df76:	42b5      	cmp	r5, r6
 800df78:	d11a      	bne.n	800dfb0 <_printf_common+0xc8>
 800df7a:	2000      	movs	r0, #0
 800df7c:	e008      	b.n	800df90 <_printf_common+0xa8>
 800df7e:	2301      	movs	r3, #1
 800df80:	4652      	mov	r2, sl
 800df82:	4641      	mov	r1, r8
 800df84:	4638      	mov	r0, r7
 800df86:	47c8      	blx	r9
 800df88:	3001      	adds	r0, #1
 800df8a:	d103      	bne.n	800df94 <_printf_common+0xac>
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df94:	3501      	adds	r5, #1
 800df96:	e7c6      	b.n	800df26 <_printf_common+0x3e>
 800df98:	18e1      	adds	r1, r4, r3
 800df9a:	1c5a      	adds	r2, r3, #1
 800df9c:	2030      	movs	r0, #48	@ 0x30
 800df9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfa2:	4422      	add	r2, r4
 800dfa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfac:	3302      	adds	r3, #2
 800dfae:	e7c7      	b.n	800df40 <_printf_common+0x58>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	4622      	mov	r2, r4
 800dfb4:	4641      	mov	r1, r8
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	47c8      	blx	r9
 800dfba:	3001      	adds	r0, #1
 800dfbc:	d0e6      	beq.n	800df8c <_printf_common+0xa4>
 800dfbe:	3601      	adds	r6, #1
 800dfc0:	e7d9      	b.n	800df76 <_printf_common+0x8e>
	...

0800dfc4 <_printf_i>:
 800dfc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc8:	7e0f      	ldrb	r7, [r1, #24]
 800dfca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfcc:	2f78      	cmp	r7, #120	@ 0x78
 800dfce:	4691      	mov	r9, r2
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	469a      	mov	sl, r3
 800dfd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfda:	d807      	bhi.n	800dfec <_printf_i+0x28>
 800dfdc:	2f62      	cmp	r7, #98	@ 0x62
 800dfde:	d80a      	bhi.n	800dff6 <_printf_i+0x32>
 800dfe0:	2f00      	cmp	r7, #0
 800dfe2:	f000 80d2 	beq.w	800e18a <_printf_i+0x1c6>
 800dfe6:	2f58      	cmp	r7, #88	@ 0x58
 800dfe8:	f000 80b9 	beq.w	800e15e <_printf_i+0x19a>
 800dfec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dff4:	e03a      	b.n	800e06c <_printf_i+0xa8>
 800dff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dffa:	2b15      	cmp	r3, #21
 800dffc:	d8f6      	bhi.n	800dfec <_printf_i+0x28>
 800dffe:	a101      	add	r1, pc, #4	@ (adr r1, 800e004 <_printf_i+0x40>)
 800e000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e004:	0800e05d 	.word	0x0800e05d
 800e008:	0800e071 	.word	0x0800e071
 800e00c:	0800dfed 	.word	0x0800dfed
 800e010:	0800dfed 	.word	0x0800dfed
 800e014:	0800dfed 	.word	0x0800dfed
 800e018:	0800dfed 	.word	0x0800dfed
 800e01c:	0800e071 	.word	0x0800e071
 800e020:	0800dfed 	.word	0x0800dfed
 800e024:	0800dfed 	.word	0x0800dfed
 800e028:	0800dfed 	.word	0x0800dfed
 800e02c:	0800dfed 	.word	0x0800dfed
 800e030:	0800e171 	.word	0x0800e171
 800e034:	0800e09b 	.word	0x0800e09b
 800e038:	0800e12b 	.word	0x0800e12b
 800e03c:	0800dfed 	.word	0x0800dfed
 800e040:	0800dfed 	.word	0x0800dfed
 800e044:	0800e193 	.word	0x0800e193
 800e048:	0800dfed 	.word	0x0800dfed
 800e04c:	0800e09b 	.word	0x0800e09b
 800e050:	0800dfed 	.word	0x0800dfed
 800e054:	0800dfed 	.word	0x0800dfed
 800e058:	0800e133 	.word	0x0800e133
 800e05c:	6833      	ldr	r3, [r6, #0]
 800e05e:	1d1a      	adds	r2, r3, #4
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6032      	str	r2, [r6, #0]
 800e064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e06c:	2301      	movs	r3, #1
 800e06e:	e09d      	b.n	800e1ac <_printf_i+0x1e8>
 800e070:	6833      	ldr	r3, [r6, #0]
 800e072:	6820      	ldr	r0, [r4, #0]
 800e074:	1d19      	adds	r1, r3, #4
 800e076:	6031      	str	r1, [r6, #0]
 800e078:	0606      	lsls	r6, r0, #24
 800e07a:	d501      	bpl.n	800e080 <_printf_i+0xbc>
 800e07c:	681d      	ldr	r5, [r3, #0]
 800e07e:	e003      	b.n	800e088 <_printf_i+0xc4>
 800e080:	0645      	lsls	r5, r0, #25
 800e082:	d5fb      	bpl.n	800e07c <_printf_i+0xb8>
 800e084:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e088:	2d00      	cmp	r5, #0
 800e08a:	da03      	bge.n	800e094 <_printf_i+0xd0>
 800e08c:	232d      	movs	r3, #45	@ 0x2d
 800e08e:	426d      	negs	r5, r5
 800e090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e094:	4859      	ldr	r0, [pc, #356]	@ (800e1fc <_printf_i+0x238>)
 800e096:	230a      	movs	r3, #10
 800e098:	e011      	b.n	800e0be <_printf_i+0xfa>
 800e09a:	6821      	ldr	r1, [r4, #0]
 800e09c:	6833      	ldr	r3, [r6, #0]
 800e09e:	0608      	lsls	r0, r1, #24
 800e0a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0a4:	d402      	bmi.n	800e0ac <_printf_i+0xe8>
 800e0a6:	0649      	lsls	r1, r1, #25
 800e0a8:	bf48      	it	mi
 800e0aa:	b2ad      	uxthmi	r5, r5
 800e0ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0ae:	4853      	ldr	r0, [pc, #332]	@ (800e1fc <_printf_i+0x238>)
 800e0b0:	6033      	str	r3, [r6, #0]
 800e0b2:	bf14      	ite	ne
 800e0b4:	230a      	movne	r3, #10
 800e0b6:	2308      	moveq	r3, #8
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0be:	6866      	ldr	r6, [r4, #4]
 800e0c0:	60a6      	str	r6, [r4, #8]
 800e0c2:	2e00      	cmp	r6, #0
 800e0c4:	bfa2      	ittt	ge
 800e0c6:	6821      	ldrge	r1, [r4, #0]
 800e0c8:	f021 0104 	bicge.w	r1, r1, #4
 800e0cc:	6021      	strge	r1, [r4, #0]
 800e0ce:	b90d      	cbnz	r5, 800e0d4 <_printf_i+0x110>
 800e0d0:	2e00      	cmp	r6, #0
 800e0d2:	d04b      	beq.n	800e16c <_printf_i+0x1a8>
 800e0d4:	4616      	mov	r6, r2
 800e0d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0da:	fb03 5711 	mls	r7, r3, r1, r5
 800e0de:	5dc7      	ldrb	r7, [r0, r7]
 800e0e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0e4:	462f      	mov	r7, r5
 800e0e6:	42bb      	cmp	r3, r7
 800e0e8:	460d      	mov	r5, r1
 800e0ea:	d9f4      	bls.n	800e0d6 <_printf_i+0x112>
 800e0ec:	2b08      	cmp	r3, #8
 800e0ee:	d10b      	bne.n	800e108 <_printf_i+0x144>
 800e0f0:	6823      	ldr	r3, [r4, #0]
 800e0f2:	07df      	lsls	r7, r3, #31
 800e0f4:	d508      	bpl.n	800e108 <_printf_i+0x144>
 800e0f6:	6923      	ldr	r3, [r4, #16]
 800e0f8:	6861      	ldr	r1, [r4, #4]
 800e0fa:	4299      	cmp	r1, r3
 800e0fc:	bfde      	ittt	le
 800e0fe:	2330      	movle	r3, #48	@ 0x30
 800e100:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e104:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e108:	1b92      	subs	r2, r2, r6
 800e10a:	6122      	str	r2, [r4, #16]
 800e10c:	f8cd a000 	str.w	sl, [sp]
 800e110:	464b      	mov	r3, r9
 800e112:	aa03      	add	r2, sp, #12
 800e114:	4621      	mov	r1, r4
 800e116:	4640      	mov	r0, r8
 800e118:	f7ff fee6 	bl	800dee8 <_printf_common>
 800e11c:	3001      	adds	r0, #1
 800e11e:	d14a      	bne.n	800e1b6 <_printf_i+0x1f2>
 800e120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e124:	b004      	add	sp, #16
 800e126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e12a:	6823      	ldr	r3, [r4, #0]
 800e12c:	f043 0320 	orr.w	r3, r3, #32
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	4833      	ldr	r0, [pc, #204]	@ (800e200 <_printf_i+0x23c>)
 800e134:	2778      	movs	r7, #120	@ 0x78
 800e136:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	6831      	ldr	r1, [r6, #0]
 800e13e:	061f      	lsls	r7, r3, #24
 800e140:	f851 5b04 	ldr.w	r5, [r1], #4
 800e144:	d402      	bmi.n	800e14c <_printf_i+0x188>
 800e146:	065f      	lsls	r7, r3, #25
 800e148:	bf48      	it	mi
 800e14a:	b2ad      	uxthmi	r5, r5
 800e14c:	6031      	str	r1, [r6, #0]
 800e14e:	07d9      	lsls	r1, r3, #31
 800e150:	bf44      	itt	mi
 800e152:	f043 0320 	orrmi.w	r3, r3, #32
 800e156:	6023      	strmi	r3, [r4, #0]
 800e158:	b11d      	cbz	r5, 800e162 <_printf_i+0x19e>
 800e15a:	2310      	movs	r3, #16
 800e15c:	e7ac      	b.n	800e0b8 <_printf_i+0xf4>
 800e15e:	4827      	ldr	r0, [pc, #156]	@ (800e1fc <_printf_i+0x238>)
 800e160:	e7e9      	b.n	800e136 <_printf_i+0x172>
 800e162:	6823      	ldr	r3, [r4, #0]
 800e164:	f023 0320 	bic.w	r3, r3, #32
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	e7f6      	b.n	800e15a <_printf_i+0x196>
 800e16c:	4616      	mov	r6, r2
 800e16e:	e7bd      	b.n	800e0ec <_printf_i+0x128>
 800e170:	6833      	ldr	r3, [r6, #0]
 800e172:	6825      	ldr	r5, [r4, #0]
 800e174:	6961      	ldr	r1, [r4, #20]
 800e176:	1d18      	adds	r0, r3, #4
 800e178:	6030      	str	r0, [r6, #0]
 800e17a:	062e      	lsls	r6, r5, #24
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	d501      	bpl.n	800e184 <_printf_i+0x1c0>
 800e180:	6019      	str	r1, [r3, #0]
 800e182:	e002      	b.n	800e18a <_printf_i+0x1c6>
 800e184:	0668      	lsls	r0, r5, #25
 800e186:	d5fb      	bpl.n	800e180 <_printf_i+0x1bc>
 800e188:	8019      	strh	r1, [r3, #0]
 800e18a:	2300      	movs	r3, #0
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	4616      	mov	r6, r2
 800e190:	e7bc      	b.n	800e10c <_printf_i+0x148>
 800e192:	6833      	ldr	r3, [r6, #0]
 800e194:	1d1a      	adds	r2, r3, #4
 800e196:	6032      	str	r2, [r6, #0]
 800e198:	681e      	ldr	r6, [r3, #0]
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	2100      	movs	r1, #0
 800e19e:	4630      	mov	r0, r6
 800e1a0:	f7f2 f81e 	bl	80001e0 <memchr>
 800e1a4:	b108      	cbz	r0, 800e1aa <_printf_i+0x1e6>
 800e1a6:	1b80      	subs	r0, r0, r6
 800e1a8:	6060      	str	r0, [r4, #4]
 800e1aa:	6863      	ldr	r3, [r4, #4]
 800e1ac:	6123      	str	r3, [r4, #16]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1b4:	e7aa      	b.n	800e10c <_printf_i+0x148>
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	4632      	mov	r2, r6
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	4640      	mov	r0, r8
 800e1be:	47d0      	blx	sl
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d0ad      	beq.n	800e120 <_printf_i+0x15c>
 800e1c4:	6823      	ldr	r3, [r4, #0]
 800e1c6:	079b      	lsls	r3, r3, #30
 800e1c8:	d413      	bmi.n	800e1f2 <_printf_i+0x22e>
 800e1ca:	68e0      	ldr	r0, [r4, #12]
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	4298      	cmp	r0, r3
 800e1d0:	bfb8      	it	lt
 800e1d2:	4618      	movlt	r0, r3
 800e1d4:	e7a6      	b.n	800e124 <_printf_i+0x160>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	4632      	mov	r2, r6
 800e1da:	4649      	mov	r1, r9
 800e1dc:	4640      	mov	r0, r8
 800e1de:	47d0      	blx	sl
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d09d      	beq.n	800e120 <_printf_i+0x15c>
 800e1e4:	3501      	adds	r5, #1
 800e1e6:	68e3      	ldr	r3, [r4, #12]
 800e1e8:	9903      	ldr	r1, [sp, #12]
 800e1ea:	1a5b      	subs	r3, r3, r1
 800e1ec:	42ab      	cmp	r3, r5
 800e1ee:	dcf2      	bgt.n	800e1d6 <_printf_i+0x212>
 800e1f0:	e7eb      	b.n	800e1ca <_printf_i+0x206>
 800e1f2:	2500      	movs	r5, #0
 800e1f4:	f104 0619 	add.w	r6, r4, #25
 800e1f8:	e7f5      	b.n	800e1e6 <_printf_i+0x222>
 800e1fa:	bf00      	nop
 800e1fc:	0800f059 	.word	0x0800f059
 800e200:	0800f06a 	.word	0x0800f06a

0800e204 <__sflush_r>:
 800e204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e20c:	0716      	lsls	r6, r2, #28
 800e20e:	4605      	mov	r5, r0
 800e210:	460c      	mov	r4, r1
 800e212:	d454      	bmi.n	800e2be <__sflush_r+0xba>
 800e214:	684b      	ldr	r3, [r1, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	dc02      	bgt.n	800e220 <__sflush_r+0x1c>
 800e21a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	dd48      	ble.n	800e2b2 <__sflush_r+0xae>
 800e220:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e222:	2e00      	cmp	r6, #0
 800e224:	d045      	beq.n	800e2b2 <__sflush_r+0xae>
 800e226:	2300      	movs	r3, #0
 800e228:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e22c:	682f      	ldr	r7, [r5, #0]
 800e22e:	6a21      	ldr	r1, [r4, #32]
 800e230:	602b      	str	r3, [r5, #0]
 800e232:	d030      	beq.n	800e296 <__sflush_r+0x92>
 800e234:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	0759      	lsls	r1, r3, #29
 800e23a:	d505      	bpl.n	800e248 <__sflush_r+0x44>
 800e23c:	6863      	ldr	r3, [r4, #4]
 800e23e:	1ad2      	subs	r2, r2, r3
 800e240:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e242:	b10b      	cbz	r3, 800e248 <__sflush_r+0x44>
 800e244:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e246:	1ad2      	subs	r2, r2, r3
 800e248:	2300      	movs	r3, #0
 800e24a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e24c:	6a21      	ldr	r1, [r4, #32]
 800e24e:	4628      	mov	r0, r5
 800e250:	47b0      	blx	r6
 800e252:	1c43      	adds	r3, r0, #1
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	d106      	bne.n	800e266 <__sflush_r+0x62>
 800e258:	6829      	ldr	r1, [r5, #0]
 800e25a:	291d      	cmp	r1, #29
 800e25c:	d82b      	bhi.n	800e2b6 <__sflush_r+0xb2>
 800e25e:	4a2a      	ldr	r2, [pc, #168]	@ (800e308 <__sflush_r+0x104>)
 800e260:	410a      	asrs	r2, r1
 800e262:	07d6      	lsls	r6, r2, #31
 800e264:	d427      	bmi.n	800e2b6 <__sflush_r+0xb2>
 800e266:	2200      	movs	r2, #0
 800e268:	6062      	str	r2, [r4, #4]
 800e26a:	04d9      	lsls	r1, r3, #19
 800e26c:	6922      	ldr	r2, [r4, #16]
 800e26e:	6022      	str	r2, [r4, #0]
 800e270:	d504      	bpl.n	800e27c <__sflush_r+0x78>
 800e272:	1c42      	adds	r2, r0, #1
 800e274:	d101      	bne.n	800e27a <__sflush_r+0x76>
 800e276:	682b      	ldr	r3, [r5, #0]
 800e278:	b903      	cbnz	r3, 800e27c <__sflush_r+0x78>
 800e27a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e27c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e27e:	602f      	str	r7, [r5, #0]
 800e280:	b1b9      	cbz	r1, 800e2b2 <__sflush_r+0xae>
 800e282:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e286:	4299      	cmp	r1, r3
 800e288:	d002      	beq.n	800e290 <__sflush_r+0x8c>
 800e28a:	4628      	mov	r0, r5
 800e28c:	f7ff fb48 	bl	800d920 <_free_r>
 800e290:	2300      	movs	r3, #0
 800e292:	6363      	str	r3, [r4, #52]	@ 0x34
 800e294:	e00d      	b.n	800e2b2 <__sflush_r+0xae>
 800e296:	2301      	movs	r3, #1
 800e298:	4628      	mov	r0, r5
 800e29a:	47b0      	blx	r6
 800e29c:	4602      	mov	r2, r0
 800e29e:	1c50      	adds	r0, r2, #1
 800e2a0:	d1c9      	bne.n	800e236 <__sflush_r+0x32>
 800e2a2:	682b      	ldr	r3, [r5, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0c6      	beq.n	800e236 <__sflush_r+0x32>
 800e2a8:	2b1d      	cmp	r3, #29
 800e2aa:	d001      	beq.n	800e2b0 <__sflush_r+0xac>
 800e2ac:	2b16      	cmp	r3, #22
 800e2ae:	d11e      	bne.n	800e2ee <__sflush_r+0xea>
 800e2b0:	602f      	str	r7, [r5, #0]
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	e022      	b.n	800e2fc <__sflush_r+0xf8>
 800e2b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ba:	b21b      	sxth	r3, r3
 800e2bc:	e01b      	b.n	800e2f6 <__sflush_r+0xf2>
 800e2be:	690f      	ldr	r7, [r1, #16]
 800e2c0:	2f00      	cmp	r7, #0
 800e2c2:	d0f6      	beq.n	800e2b2 <__sflush_r+0xae>
 800e2c4:	0793      	lsls	r3, r2, #30
 800e2c6:	680e      	ldr	r6, [r1, #0]
 800e2c8:	bf08      	it	eq
 800e2ca:	694b      	ldreq	r3, [r1, #20]
 800e2cc:	600f      	str	r7, [r1, #0]
 800e2ce:	bf18      	it	ne
 800e2d0:	2300      	movne	r3, #0
 800e2d2:	eba6 0807 	sub.w	r8, r6, r7
 800e2d6:	608b      	str	r3, [r1, #8]
 800e2d8:	f1b8 0f00 	cmp.w	r8, #0
 800e2dc:	dde9      	ble.n	800e2b2 <__sflush_r+0xae>
 800e2de:	6a21      	ldr	r1, [r4, #32]
 800e2e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e2e2:	4643      	mov	r3, r8
 800e2e4:	463a      	mov	r2, r7
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	47b0      	blx	r6
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	dc08      	bgt.n	800e300 <__sflush_r+0xfc>
 800e2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2f6:	81a3      	strh	r3, [r4, #12]
 800e2f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e300:	4407      	add	r7, r0
 800e302:	eba8 0800 	sub.w	r8, r8, r0
 800e306:	e7e7      	b.n	800e2d8 <__sflush_r+0xd4>
 800e308:	dfbffffe 	.word	0xdfbffffe

0800e30c <_fflush_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	690b      	ldr	r3, [r1, #16]
 800e310:	4605      	mov	r5, r0
 800e312:	460c      	mov	r4, r1
 800e314:	b913      	cbnz	r3, 800e31c <_fflush_r+0x10>
 800e316:	2500      	movs	r5, #0
 800e318:	4628      	mov	r0, r5
 800e31a:	bd38      	pop	{r3, r4, r5, pc}
 800e31c:	b118      	cbz	r0, 800e326 <_fflush_r+0x1a>
 800e31e:	6a03      	ldr	r3, [r0, #32]
 800e320:	b90b      	cbnz	r3, 800e326 <_fflush_r+0x1a>
 800e322:	f7ff f9f3 	bl	800d70c <__sinit>
 800e326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d0f3      	beq.n	800e316 <_fflush_r+0xa>
 800e32e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e330:	07d0      	lsls	r0, r2, #31
 800e332:	d404      	bmi.n	800e33e <_fflush_r+0x32>
 800e334:	0599      	lsls	r1, r3, #22
 800e336:	d402      	bmi.n	800e33e <_fflush_r+0x32>
 800e338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e33a:	f7ff fae0 	bl	800d8fe <__retarget_lock_acquire_recursive>
 800e33e:	4628      	mov	r0, r5
 800e340:	4621      	mov	r1, r4
 800e342:	f7ff ff5f 	bl	800e204 <__sflush_r>
 800e346:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e348:	07da      	lsls	r2, r3, #31
 800e34a:	4605      	mov	r5, r0
 800e34c:	d4e4      	bmi.n	800e318 <_fflush_r+0xc>
 800e34e:	89a3      	ldrh	r3, [r4, #12]
 800e350:	059b      	lsls	r3, r3, #22
 800e352:	d4e1      	bmi.n	800e318 <_fflush_r+0xc>
 800e354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e356:	f7ff fad3 	bl	800d900 <__retarget_lock_release_recursive>
 800e35a:	e7dd      	b.n	800e318 <_fflush_r+0xc>

0800e35c <__sread>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	460c      	mov	r4, r1
 800e360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e364:	f000 f9c0 	bl	800e6e8 <_read_r>
 800e368:	2800      	cmp	r0, #0
 800e36a:	bfab      	itete	ge
 800e36c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e36e:	89a3      	ldrhlt	r3, [r4, #12]
 800e370:	181b      	addge	r3, r3, r0
 800e372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e376:	bfac      	ite	ge
 800e378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e37a:	81a3      	strhlt	r3, [r4, #12]
 800e37c:	bd10      	pop	{r4, pc}

0800e37e <__swrite>:
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	461f      	mov	r7, r3
 800e384:	898b      	ldrh	r3, [r1, #12]
 800e386:	05db      	lsls	r3, r3, #23
 800e388:	4605      	mov	r5, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	4616      	mov	r6, r2
 800e38e:	d505      	bpl.n	800e39c <__swrite+0x1e>
 800e390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e394:	2302      	movs	r3, #2
 800e396:	2200      	movs	r2, #0
 800e398:	f000 f994 	bl	800e6c4 <_lseek_r>
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3a6:	81a3      	strh	r3, [r4, #12]
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b2:	f000 b9ab 	b.w	800e70c <_write_r>

0800e3b6 <__sseek>:
 800e3b6:	b510      	push	{r4, lr}
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3be:	f000 f981 	bl	800e6c4 <_lseek_r>
 800e3c2:	1c43      	adds	r3, r0, #1
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	bf15      	itete	ne
 800e3c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e3ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e3ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e3d2:	81a3      	strheq	r3, [r4, #12]
 800e3d4:	bf18      	it	ne
 800e3d6:	81a3      	strhne	r3, [r4, #12]
 800e3d8:	bd10      	pop	{r4, pc}

0800e3da <__sclose>:
 800e3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3de:	f000 b93f 	b.w	800e660 <_close_r>

0800e3e2 <_realloc_r>:
 800e3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e6:	4680      	mov	r8, r0
 800e3e8:	4615      	mov	r5, r2
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	b921      	cbnz	r1, 800e3f8 <_realloc_r+0x16>
 800e3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	f7ff b852 	b.w	800d49c <_malloc_r>
 800e3f8:	b92a      	cbnz	r2, 800e406 <_realloc_r+0x24>
 800e3fa:	f7ff fa91 	bl	800d920 <_free_r>
 800e3fe:	2400      	movs	r4, #0
 800e400:	4620      	mov	r0, r4
 800e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e406:	f000 f993 	bl	800e730 <_malloc_usable_size_r>
 800e40a:	4285      	cmp	r5, r0
 800e40c:	4606      	mov	r6, r0
 800e40e:	d802      	bhi.n	800e416 <_realloc_r+0x34>
 800e410:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e414:	d8f4      	bhi.n	800e400 <_realloc_r+0x1e>
 800e416:	4629      	mov	r1, r5
 800e418:	4640      	mov	r0, r8
 800e41a:	f7ff f83f 	bl	800d49c <_malloc_r>
 800e41e:	4607      	mov	r7, r0
 800e420:	2800      	cmp	r0, #0
 800e422:	d0ec      	beq.n	800e3fe <_realloc_r+0x1c>
 800e424:	42b5      	cmp	r5, r6
 800e426:	462a      	mov	r2, r5
 800e428:	4621      	mov	r1, r4
 800e42a:	bf28      	it	cs
 800e42c:	4632      	movcs	r2, r6
 800e42e:	f7ff fa68 	bl	800d902 <memcpy>
 800e432:	4621      	mov	r1, r4
 800e434:	4640      	mov	r0, r8
 800e436:	f7ff fa73 	bl	800d920 <_free_r>
 800e43a:	463c      	mov	r4, r7
 800e43c:	e7e0      	b.n	800e400 <_realloc_r+0x1e>

0800e43e <__swbuf_r>:
 800e43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e440:	460e      	mov	r6, r1
 800e442:	4614      	mov	r4, r2
 800e444:	4605      	mov	r5, r0
 800e446:	b118      	cbz	r0, 800e450 <__swbuf_r+0x12>
 800e448:	6a03      	ldr	r3, [r0, #32]
 800e44a:	b90b      	cbnz	r3, 800e450 <__swbuf_r+0x12>
 800e44c:	f7ff f95e 	bl	800d70c <__sinit>
 800e450:	69a3      	ldr	r3, [r4, #24]
 800e452:	60a3      	str	r3, [r4, #8]
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	071a      	lsls	r2, r3, #28
 800e458:	d501      	bpl.n	800e45e <__swbuf_r+0x20>
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	b943      	cbnz	r3, 800e470 <__swbuf_r+0x32>
 800e45e:	4621      	mov	r1, r4
 800e460:	4628      	mov	r0, r5
 800e462:	f000 f82b 	bl	800e4bc <__swsetup_r>
 800e466:	b118      	cbz	r0, 800e470 <__swbuf_r+0x32>
 800e468:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e46c:	4638      	mov	r0, r7
 800e46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e470:	6823      	ldr	r3, [r4, #0]
 800e472:	6922      	ldr	r2, [r4, #16]
 800e474:	1a98      	subs	r0, r3, r2
 800e476:	6963      	ldr	r3, [r4, #20]
 800e478:	b2f6      	uxtb	r6, r6
 800e47a:	4283      	cmp	r3, r0
 800e47c:	4637      	mov	r7, r6
 800e47e:	dc05      	bgt.n	800e48c <__swbuf_r+0x4e>
 800e480:	4621      	mov	r1, r4
 800e482:	4628      	mov	r0, r5
 800e484:	f7ff ff42 	bl	800e30c <_fflush_r>
 800e488:	2800      	cmp	r0, #0
 800e48a:	d1ed      	bne.n	800e468 <__swbuf_r+0x2a>
 800e48c:	68a3      	ldr	r3, [r4, #8]
 800e48e:	3b01      	subs	r3, #1
 800e490:	60a3      	str	r3, [r4, #8]
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	1c5a      	adds	r2, r3, #1
 800e496:	6022      	str	r2, [r4, #0]
 800e498:	701e      	strb	r6, [r3, #0]
 800e49a:	6962      	ldr	r2, [r4, #20]
 800e49c:	1c43      	adds	r3, r0, #1
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d004      	beq.n	800e4ac <__swbuf_r+0x6e>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	07db      	lsls	r3, r3, #31
 800e4a6:	d5e1      	bpl.n	800e46c <__swbuf_r+0x2e>
 800e4a8:	2e0a      	cmp	r6, #10
 800e4aa:	d1df      	bne.n	800e46c <__swbuf_r+0x2e>
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7ff ff2c 	bl	800e30c <_fflush_r>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d0d9      	beq.n	800e46c <__swbuf_r+0x2e>
 800e4b8:	e7d6      	b.n	800e468 <__swbuf_r+0x2a>
	...

0800e4bc <__swsetup_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4b29      	ldr	r3, [pc, #164]	@ (800e564 <__swsetup_r+0xa8>)
 800e4c0:	4605      	mov	r5, r0
 800e4c2:	6818      	ldr	r0, [r3, #0]
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	b118      	cbz	r0, 800e4d0 <__swsetup_r+0x14>
 800e4c8:	6a03      	ldr	r3, [r0, #32]
 800e4ca:	b90b      	cbnz	r3, 800e4d0 <__swsetup_r+0x14>
 800e4cc:	f7ff f91e 	bl	800d70c <__sinit>
 800e4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d4:	0719      	lsls	r1, r3, #28
 800e4d6:	d422      	bmi.n	800e51e <__swsetup_r+0x62>
 800e4d8:	06da      	lsls	r2, r3, #27
 800e4da:	d407      	bmi.n	800e4ec <__swsetup_r+0x30>
 800e4dc:	2209      	movs	r2, #9
 800e4de:	602a      	str	r2, [r5, #0]
 800e4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4e4:	81a3      	strh	r3, [r4, #12]
 800e4e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4ea:	e033      	b.n	800e554 <__swsetup_r+0x98>
 800e4ec:	0758      	lsls	r0, r3, #29
 800e4ee:	d512      	bpl.n	800e516 <__swsetup_r+0x5a>
 800e4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4f2:	b141      	cbz	r1, 800e506 <__swsetup_r+0x4a>
 800e4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4f8:	4299      	cmp	r1, r3
 800e4fa:	d002      	beq.n	800e502 <__swsetup_r+0x46>
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	f7ff fa0f 	bl	800d920 <_free_r>
 800e502:	2300      	movs	r3, #0
 800e504:	6363      	str	r3, [r4, #52]	@ 0x34
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e50c:	81a3      	strh	r3, [r4, #12]
 800e50e:	2300      	movs	r3, #0
 800e510:	6063      	str	r3, [r4, #4]
 800e512:	6923      	ldr	r3, [r4, #16]
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	f043 0308 	orr.w	r3, r3, #8
 800e51c:	81a3      	strh	r3, [r4, #12]
 800e51e:	6923      	ldr	r3, [r4, #16]
 800e520:	b94b      	cbnz	r3, 800e536 <__swsetup_r+0x7a>
 800e522:	89a3      	ldrh	r3, [r4, #12]
 800e524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e52c:	d003      	beq.n	800e536 <__swsetup_r+0x7a>
 800e52e:	4621      	mov	r1, r4
 800e530:	4628      	mov	r0, r5
 800e532:	f000 f83f 	bl	800e5b4 <__smakebuf_r>
 800e536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e53a:	f013 0201 	ands.w	r2, r3, #1
 800e53e:	d00a      	beq.n	800e556 <__swsetup_r+0x9a>
 800e540:	2200      	movs	r2, #0
 800e542:	60a2      	str	r2, [r4, #8]
 800e544:	6962      	ldr	r2, [r4, #20]
 800e546:	4252      	negs	r2, r2
 800e548:	61a2      	str	r2, [r4, #24]
 800e54a:	6922      	ldr	r2, [r4, #16]
 800e54c:	b942      	cbnz	r2, 800e560 <__swsetup_r+0xa4>
 800e54e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e552:	d1c5      	bne.n	800e4e0 <__swsetup_r+0x24>
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	0799      	lsls	r1, r3, #30
 800e558:	bf58      	it	pl
 800e55a:	6962      	ldrpl	r2, [r4, #20]
 800e55c:	60a2      	str	r2, [r4, #8]
 800e55e:	e7f4      	b.n	800e54a <__swsetup_r+0x8e>
 800e560:	2000      	movs	r0, #0
 800e562:	e7f7      	b.n	800e554 <__swsetup_r+0x98>
 800e564:	20000568 	.word	0x20000568

0800e568 <__swhatbuf_r>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	460c      	mov	r4, r1
 800e56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e570:	2900      	cmp	r1, #0
 800e572:	b096      	sub	sp, #88	@ 0x58
 800e574:	4615      	mov	r5, r2
 800e576:	461e      	mov	r6, r3
 800e578:	da0d      	bge.n	800e596 <__swhatbuf_r+0x2e>
 800e57a:	89a3      	ldrh	r3, [r4, #12]
 800e57c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e580:	f04f 0100 	mov.w	r1, #0
 800e584:	bf14      	ite	ne
 800e586:	2340      	movne	r3, #64	@ 0x40
 800e588:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e58c:	2000      	movs	r0, #0
 800e58e:	6031      	str	r1, [r6, #0]
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	b016      	add	sp, #88	@ 0x58
 800e594:	bd70      	pop	{r4, r5, r6, pc}
 800e596:	466a      	mov	r2, sp
 800e598:	f000 f872 	bl	800e680 <_fstat_r>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	dbec      	blt.n	800e57a <__swhatbuf_r+0x12>
 800e5a0:	9901      	ldr	r1, [sp, #4]
 800e5a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5aa:	4259      	negs	r1, r3
 800e5ac:	4159      	adcs	r1, r3
 800e5ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5b2:	e7eb      	b.n	800e58c <__swhatbuf_r+0x24>

0800e5b4 <__smakebuf_r>:
 800e5b4:	898b      	ldrh	r3, [r1, #12]
 800e5b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5b8:	079d      	lsls	r5, r3, #30
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	460c      	mov	r4, r1
 800e5be:	d507      	bpl.n	800e5d0 <__smakebuf_r+0x1c>
 800e5c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	6123      	str	r3, [r4, #16]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	6163      	str	r3, [r4, #20]
 800e5cc:	b003      	add	sp, #12
 800e5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5d0:	ab01      	add	r3, sp, #4
 800e5d2:	466a      	mov	r2, sp
 800e5d4:	f7ff ffc8 	bl	800e568 <__swhatbuf_r>
 800e5d8:	9f00      	ldr	r7, [sp, #0]
 800e5da:	4605      	mov	r5, r0
 800e5dc:	4639      	mov	r1, r7
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7fe ff5c 	bl	800d49c <_malloc_r>
 800e5e4:	b948      	cbnz	r0, 800e5fa <__smakebuf_r+0x46>
 800e5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ea:	059a      	lsls	r2, r3, #22
 800e5ec:	d4ee      	bmi.n	800e5cc <__smakebuf_r+0x18>
 800e5ee:	f023 0303 	bic.w	r3, r3, #3
 800e5f2:	f043 0302 	orr.w	r3, r3, #2
 800e5f6:	81a3      	strh	r3, [r4, #12]
 800e5f8:	e7e2      	b.n	800e5c0 <__smakebuf_r+0xc>
 800e5fa:	89a3      	ldrh	r3, [r4, #12]
 800e5fc:	6020      	str	r0, [r4, #0]
 800e5fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e602:	81a3      	strh	r3, [r4, #12]
 800e604:	9b01      	ldr	r3, [sp, #4]
 800e606:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e60a:	b15b      	cbz	r3, 800e624 <__smakebuf_r+0x70>
 800e60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e610:	4630      	mov	r0, r6
 800e612:	f000 f847 	bl	800e6a4 <_isatty_r>
 800e616:	b128      	cbz	r0, 800e624 <__smakebuf_r+0x70>
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	f023 0303 	bic.w	r3, r3, #3
 800e61e:	f043 0301 	orr.w	r3, r3, #1
 800e622:	81a3      	strh	r3, [r4, #12]
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	431d      	orrs	r5, r3
 800e628:	81a5      	strh	r5, [r4, #12]
 800e62a:	e7cf      	b.n	800e5cc <__smakebuf_r+0x18>

0800e62c <memmove>:
 800e62c:	4288      	cmp	r0, r1
 800e62e:	b510      	push	{r4, lr}
 800e630:	eb01 0402 	add.w	r4, r1, r2
 800e634:	d902      	bls.n	800e63c <memmove+0x10>
 800e636:	4284      	cmp	r4, r0
 800e638:	4623      	mov	r3, r4
 800e63a:	d807      	bhi.n	800e64c <memmove+0x20>
 800e63c:	1e43      	subs	r3, r0, #1
 800e63e:	42a1      	cmp	r1, r4
 800e640:	d008      	beq.n	800e654 <memmove+0x28>
 800e642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e64a:	e7f8      	b.n	800e63e <memmove+0x12>
 800e64c:	4402      	add	r2, r0
 800e64e:	4601      	mov	r1, r0
 800e650:	428a      	cmp	r2, r1
 800e652:	d100      	bne.n	800e656 <memmove+0x2a>
 800e654:	bd10      	pop	{r4, pc}
 800e656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e65e:	e7f7      	b.n	800e650 <memmove+0x24>

0800e660 <_close_r>:
 800e660:	b538      	push	{r3, r4, r5, lr}
 800e662:	4d06      	ldr	r5, [pc, #24]	@ (800e67c <_close_r+0x1c>)
 800e664:	2300      	movs	r3, #0
 800e666:	4604      	mov	r4, r0
 800e668:	4608      	mov	r0, r1
 800e66a:	602b      	str	r3, [r5, #0]
 800e66c:	f7f8 f97b 	bl	8006966 <_close>
 800e670:	1c43      	adds	r3, r0, #1
 800e672:	d102      	bne.n	800e67a <_close_r+0x1a>
 800e674:	682b      	ldr	r3, [r5, #0]
 800e676:	b103      	cbz	r3, 800e67a <_close_r+0x1a>
 800e678:	6023      	str	r3, [r4, #0]
 800e67a:	bd38      	pop	{r3, r4, r5, pc}
 800e67c:	2000138c 	.word	0x2000138c

0800e680 <_fstat_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4d07      	ldr	r5, [pc, #28]	@ (800e6a0 <_fstat_r+0x20>)
 800e684:	2300      	movs	r3, #0
 800e686:	4604      	mov	r4, r0
 800e688:	4608      	mov	r0, r1
 800e68a:	4611      	mov	r1, r2
 800e68c:	602b      	str	r3, [r5, #0]
 800e68e:	f7f8 f976 	bl	800697e <_fstat>
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	d102      	bne.n	800e69c <_fstat_r+0x1c>
 800e696:	682b      	ldr	r3, [r5, #0]
 800e698:	b103      	cbz	r3, 800e69c <_fstat_r+0x1c>
 800e69a:	6023      	str	r3, [r4, #0]
 800e69c:	bd38      	pop	{r3, r4, r5, pc}
 800e69e:	bf00      	nop
 800e6a0:	2000138c 	.word	0x2000138c

0800e6a4 <_isatty_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4d06      	ldr	r5, [pc, #24]	@ (800e6c0 <_isatty_r+0x1c>)
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	602b      	str	r3, [r5, #0]
 800e6b0:	f7f8 f975 	bl	800699e <_isatty>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_isatty_r+0x1a>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_isatty_r+0x1a>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	2000138c 	.word	0x2000138c

0800e6c4 <_lseek_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4d07      	ldr	r5, [pc, #28]	@ (800e6e4 <_lseek_r+0x20>)
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	4608      	mov	r0, r1
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	602a      	str	r2, [r5, #0]
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	f7f8 f96e 	bl	80069b4 <_lseek>
 800e6d8:	1c43      	adds	r3, r0, #1
 800e6da:	d102      	bne.n	800e6e2 <_lseek_r+0x1e>
 800e6dc:	682b      	ldr	r3, [r5, #0]
 800e6de:	b103      	cbz	r3, 800e6e2 <_lseek_r+0x1e>
 800e6e0:	6023      	str	r3, [r4, #0]
 800e6e2:	bd38      	pop	{r3, r4, r5, pc}
 800e6e4:	2000138c 	.word	0x2000138c

0800e6e8 <_read_r>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	4d07      	ldr	r5, [pc, #28]	@ (800e708 <_read_r+0x20>)
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	4608      	mov	r0, r1
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	602a      	str	r2, [r5, #0]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	f7f8 f8fc 	bl	80068f4 <_read>
 800e6fc:	1c43      	adds	r3, r0, #1
 800e6fe:	d102      	bne.n	800e706 <_read_r+0x1e>
 800e700:	682b      	ldr	r3, [r5, #0]
 800e702:	b103      	cbz	r3, 800e706 <_read_r+0x1e>
 800e704:	6023      	str	r3, [r4, #0]
 800e706:	bd38      	pop	{r3, r4, r5, pc}
 800e708:	2000138c 	.word	0x2000138c

0800e70c <_write_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	4d07      	ldr	r5, [pc, #28]	@ (800e72c <_write_r+0x20>)
 800e710:	4604      	mov	r4, r0
 800e712:	4608      	mov	r0, r1
 800e714:	4611      	mov	r1, r2
 800e716:	2200      	movs	r2, #0
 800e718:	602a      	str	r2, [r5, #0]
 800e71a:	461a      	mov	r2, r3
 800e71c:	f7f8 f907 	bl	800692e <_write>
 800e720:	1c43      	adds	r3, r0, #1
 800e722:	d102      	bne.n	800e72a <_write_r+0x1e>
 800e724:	682b      	ldr	r3, [r5, #0]
 800e726:	b103      	cbz	r3, 800e72a <_write_r+0x1e>
 800e728:	6023      	str	r3, [r4, #0]
 800e72a:	bd38      	pop	{r3, r4, r5, pc}
 800e72c:	2000138c 	.word	0x2000138c

0800e730 <_malloc_usable_size_r>:
 800e730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e734:	1f18      	subs	r0, r3, #4
 800e736:	2b00      	cmp	r3, #0
 800e738:	bfbc      	itt	lt
 800e73a:	580b      	ldrlt	r3, [r1, r0]
 800e73c:	18c0      	addlt	r0, r0, r3
 800e73e:	4770      	bx	lr

0800e740 <_init>:
 800e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e742:	bf00      	nop
 800e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e746:	bc08      	pop	{r3}
 800e748:	469e      	mov	lr, r3
 800e74a:	4770      	bx	lr

0800e74c <_fini>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr
