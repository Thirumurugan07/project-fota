
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800cc60  0800cc60  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ceec  0800ceec  0000e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ceec  0800ceec  0000deec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cef4  0800cef4  0000e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cef4  0800cef4  0000def4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cef8  0800cef8  0000def8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005d8  20000000  0800cefc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200005d8  0800d4d4  0000e5d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f38  0800d4d4  0000ef38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e5d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c13a  00000000  00000000  0000e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467f  00000000  00000000  0002a742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127b  00000000  00000000  000305e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c07  00000000  00000000  0003185b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d06  00000000  00000000  0004b462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b8b8  00000000  00000000  0006c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107a20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac0  00000000  00000000  00107a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010e524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005d8 	.word	0x200005d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc48 	.word	0x0800cc48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005dc 	.word	0x200005dc
 80001dc:	0800cc48 	.word	0x0800cc48

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <optiga_util_callback>:
/**
 * Callback when optiga_util_xxxx operation is completed asynchronously
 */
static volatile optiga_lib_status_t optiga_lib_status;
// lint --e{818} suppress "argument "context" is not used in the sample provided"
static void optiga_util_callback(void *context, optiga_lib_status_t return_status) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <optiga_util_callback+0x20>)
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	8013      	strh	r3, [r2, #0]
    if (NULL != context) {
        // callback to upper layer here
    }
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200005f4 	.word	0x200005f4

08000594 <example_optiga_util_write_data>:
 *
 * Example for #optiga_util_write_data and #optiga_util_write_metadata
 *
 */
void example_optiga_util_write_data(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af02      	add	r7, sp, #8
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 800059a:	f240 3302 	movw	r3, #770	@ 0x302
 800059e:	81fb      	strh	r3, [r7, #14]
    optiga_util_t *me = NULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
    uint16_t optiga_oid = 0xE0E8;
 80005a4:	f24e 03e8 	movw	r3, #57576	@ 0xe0e8
 80005a8:	80fb      	strh	r3, [r7, #6]
    uint16_t offset = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	80bb      	strh	r3, [r7, #4]

    printf("Creating OPTIGA Util instance...\r\n");
 80005ae:	4824      	ldr	r0, [pc, #144]	@ (8000640 <example_optiga_util_write_data+0xac>)
 80005b0:	f00b fd76 	bl	800c0a0 <puts>
    me = optiga_util_create(0, optiga_util_callback, NULL);
 80005b4:	2200      	movs	r2, #0
 80005b6:	4923      	ldr	r1, [pc, #140]	@ (8000644 <example_optiga_util_write_data+0xb0>)
 80005b8:	2000      	movs	r0, #0
 80005ba:	f005 f9db 	bl	8005974 <optiga_util_create>
 80005be:	60b8      	str	r0, [r7, #8]
    if (me == NULL)
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <example_optiga_util_write_data+0x3a>
    {
        printf("Failed to create OPTIGA Util instance.\r\n");
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <example_optiga_util_write_data+0xb4>)
 80005c8:	f00b fd6a 	bl	800c0a0 <puts>
        return;
 80005cc:	e034      	b.n	8000638 <example_optiga_util_write_data+0xa4>
    }

    OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_NO_PROTECTION);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	68b8      	ldr	r0, [r7, #8]
 80005d4:	f005 f9b0 	bl	8005938 <optiga_util_set_comms_params>

    // Write trust anchor
    optiga_lib_status = OPTIGA_LIB_BUSY;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <example_optiga_util_write_data+0xb8>)
 80005da:	2201      	movs	r2, #1
 80005dc:	801a      	strh	r2, [r3, #0]
    printf("Writing trust anchor to 0xE0E8...\r\n");
 80005de:	481c      	ldr	r0, [pc, #112]	@ (8000650 <example_optiga_util_write_data+0xbc>)
 80005e0:	f00b fd5e 	bl	800c0a0 <puts>
    return_status = optiga_util_write_data(
 80005e4:	88bb      	ldrh	r3, [r7, #4]
 80005e6:	88f9      	ldrh	r1, [r7, #6]
 80005e8:	2220      	movs	r2, #32
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	4a19      	ldr	r2, [pc, #100]	@ (8000654 <example_optiga_util_write_data+0xc0>)
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	2240      	movs	r2, #64	@ 0x40
 80005f2:	68b8      	ldr	r0, [r7, #8]
 80005f4:	f005 fa7c 	bl	8005af0 <optiga_util_write_data>
 80005f8:	4603      	mov	r3, r0
 80005fa:	81fb      	strh	r3, [r7, #14]
        offset,
		bootloader_hash,
        sizeof(bootloader_hash)
    );

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80005fc:	e001      	b.n	8000602 <example_optiga_util_write_data+0x6e>
    {
        pal_os_event_trigger_registered_callback();
 80005fe:	f005 fd8d 	bl	800611c <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <example_optiga_util_write_data+0xb8>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	2b01      	cmp	r3, #1
 800060a:	d0f8      	beq.n	80005fe <example_optiga_util_write_data+0x6a>
    }

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <example_optiga_util_write_data+0xb8>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <example_optiga_util_write_data+0x92>
    {
        printf("Writing trust anchor failed: 0x%04X\r\n", optiga_lib_status);
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <example_optiga_util_write_data+0xb8>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	480e      	ldr	r0, [pc, #56]	@ (8000658 <example_optiga_util_write_data+0xc4>)
 8000620:	f00b fcd6 	bl	800bfd0 <iprintf>
 8000624:	e002      	b.n	800062c <example_optiga_util_write_data+0x98>
    }
    else
    {
        printf("Trust anchor written successfully.\r\n");
 8000626:	480d      	ldr	r0, [pc, #52]	@ (800065c <example_optiga_util_write_data+0xc8>)
 8000628:	f00b fd3a 	bl	800c0a0 <puts>
//    {
//        printf("Metadata written successfully.\r\n");
//    }

    // Clean up
    if (me)
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <example_optiga_util_write_data+0xa4>
    {
        optiga_util_destroy(me);
 8000632:	68b8      	ldr	r0, [r7, #8]
 8000634:	f005 f9e0 	bl	80059f8 <optiga_util_destroy>
    }
}
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	0800cc60 	.word	0x0800cc60
 8000644:	08000571 	.word	0x08000571
 8000648:	0800cc84 	.word	0x0800cc84
 800064c:	200005f4 	.word	0x200005f4
 8000650:	0800ccac 	.word	0x0800ccac
 8000654:	20000000 	.word	0x20000000
 8000658:	0800ccd0 	.word	0x0800ccd0
 800065c:	0800ccf8 	.word	0x0800ccf8

08000660 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000668:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800066c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000674:	2b03      	cmp	r3, #3
 8000676:	d027      	beq.n	80006c8 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000690:	2b02      	cmp	r3, #2
 8000692:	d818      	bhi.n	80006c6 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	22b1      	movs	r2, #177	@ 0xb1
 8000698:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f8f5 	bl	800089c <ifx_i2c_init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d105      	bne.n	80006c8 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2203      	movs	r2, #3
 80006c0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80006c4:	e000      	b.n	80006c8 <ifx_i2c_open+0x68>
                break;
 80006c6:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 80006c8:	89fb      	ldrh	r3, [r7, #14]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b088      	sub	sp, #32
 80006d6:	af02      	add	r7, sp, #8
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80006e2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80006e6:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d122      	bne.n	8000738 <ifx_i2c_transceive+0x66>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d01d      	beq.n	8000738 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6a3a      	ldr	r2, [r7, #32]
 8000708:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 800070c:	88fa      	ldrh	r2, [r7, #6]
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	68b9      	ldr	r1, [r7, #8]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f001 fb00 	bl	8001d1c <ifx_i2c_prl_transceive>
 800071c:	4603      	mov	r3, r0
 800071e:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000720:	8afb      	ldrh	r3, [r7, #22]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d108      	bne.n	8000738 <ifx_i2c_transceive+0x66>
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 800072c:	2b00      	cmp	r3, #0
 800072e:	d103      	bne.n	8000738 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2203      	movs	r2, #3
 8000734:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000738:	8afb      	ldrh	r3, [r7, #22]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800074c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000750:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000758:	2b03      	cmp	r3, #3
 800075a:	d02a      	beq.n	80007b2 <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 800075c:	2300      	movs	r3, #0
 800075e:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000766:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000772:	4912      	ldr	r1, [pc, #72]	@ (80007bc <ifx_i2c_close+0x78>)
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f001 fa8f 	bl	8001c98 <ifx_i2c_prl_close>
 800077a:	4603      	mov	r3, r0
 800077c:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 800077e:	89fb      	ldrh	r3, [r7, #14]
 8000780:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000784:	d115      	bne.n	80007b2 <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800078c:	4618      	mov	r0, r3
 800078e:	f005 fac0 	bl	8005d12 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000798:	4618      	mov	r0, r3
 800079a:	f005 fa5b 	bl	8005c54 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 fa55 	bl	8005c54 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2204      	movs	r2, #4
 80007ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 80007b2:	89fb      	ldrh	r3, [r7, #14]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	08000829 	.word	0x08000829

080007c0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	461a      	mov	r2, r3
 80007cc:	460b      	mov	r3, r1
 80007ce:	817b      	strh	r3, [r7, #10]
 80007d0:	4613      	mov	r3, r2
 80007d2:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 80007ea:	8979      	ldrh	r1, [r7, #10]
 80007ec:	4610      	mov	r0, r2
 80007ee:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	897a      	ldrh	r2, [r7, #10]
 80007f4:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2204      	movs	r2, #4
 80007fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000806:	2b01      	cmp	r3, #1
 8000808:	d107      	bne.n	800081a <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 800080a:	897b      	ldrh	r3, [r7, #10]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d106      	bne.n	800081e <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2202      	movs	r2, #2
 8000814:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000818:	e001      	b.n	800081e <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 800081a:	bf00      	nop
 800081c:	e000      	b.n	8000820 <ifx_i2c_tl_event_handler+0x60>
            break;
 800081e:	bf00      	nop
    }
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	461a      	mov	r2, r3
 8000834:	460b      	mov	r3, r1
 8000836:	817b      	strh	r3, [r7, #10]
 8000838:	4613      	mov	r3, r2
 800083a:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2204      	movs	r2, #4
 8000840:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 800084a:	2b01      	cmp	r3, #1
 800084c:	d112      	bne.n	8000874 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fa5c 	bl	8005d12 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000860:	4618      	mov	r0, r3
 8000862:	f005 f9f7 	bl	8005c54 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 800086c:	4618      	mov	r0, r3
 800086e:	f005 f9f1 	bl	8005c54 <pal_gpio_set_low>
            break;
 8000872:	e000      	b.n	8000876 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000874:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 800087c:	2b00      	cmp	r3, #0
 800087e:	d008      	beq.n	8000892 <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 800088c:	8979      	ldrh	r1, [r7, #10]
 800088e:	4610      	mov	r0, r2
 8000890:	4798      	blx	r3
    }
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 80008a4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80008a8:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d004      	beq.n	80008be <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d156      	bne.n	800096c <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80008c4:	2bb3      	cmp	r3, #179	@ 0xb3
 80008c6:	d048      	beq.n	800095a <ifx_i2c_init+0xbe>
 80008c8:	2bb3      	cmp	r3, #179	@ 0xb3
 80008ca:	dc4d      	bgt.n	8000968 <ifx_i2c_init+0xcc>
 80008cc:	2bb1      	cmp	r3, #177	@ 0xb1
 80008ce:	d002      	beq.n	80008d6 <ifx_i2c_init+0x3a>
 80008d0:	2bb2      	cmp	r3, #178	@ 0xb2
 80008d2:	d021      	beq.n	8000918 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 80008d4:	e048      	b.n	8000968 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d105      	bne.n	80008ec <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80008e6:	4618      	mov	r0, r3
 80008e8:	f005 f9b4 	bl	8005c54 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 f9ae 	bl	8005c54 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	22b2      	movs	r2, #178	@ 0xb2
 80008fc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000906:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4923      	ldr	r1, [pc, #140]	@ (800099c <ifx_i2c_init+0x100>)
 800090e:	f005 fbd9 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000912:	2300      	movs	r3, #0
 8000914:	81fb      	strh	r3, [r7, #14]
                break;
 8000916:	e028      	b.n	800096a <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000928:	4618      	mov	r0, r3
 800092a:	f005 f983 	bl	8005c34 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000934:	4618      	mov	r0, r3
 8000936:	f005 f97d 	bl	8005c34 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	22b3      	movs	r2, #179	@ 0xb3
 800093e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000948:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4913      	ldr	r1, [pc, #76]	@ (800099c <ifx_i2c_init+0x100>)
 8000950:	f005 fbb8 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000954:	2300      	movs	r3, #0
 8000956:	81fb      	strh	r3, [r7, #14]
                break;
 8000958:	e007      	b.n	800096a <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800095a:	4911      	ldr	r1, [pc, #68]	@ (80009a0 <ifx_i2c_init+0x104>)
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f001 f953 	bl	8001c08 <ifx_i2c_prl_init>
 8000962:	4603      	mov	r3, r0
 8000964:	81fb      	strh	r3, [r7, #14]
                break;
 8000966:	e000      	b.n	800096a <ifx_i2c_init+0xce>
                break;
 8000968:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 800096a:	e009      	b.n	8000980 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2201      	movs	r2, #1
 8000970:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000974:	490a      	ldr	r1, [pc, #40]	@ (80009a0 <ifx_i2c_init+0x104>)
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f001 f946 	bl	8001c08 <ifx_i2c_prl_init>
 800097c:	4603      	mov	r3, r0
 800097e:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d005      	beq.n	8000992 <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000986:	89f9      	ldrh	r1, [r7, #14]
 8000988:	2300      	movs	r3, #0
 800098a:	2200      	movs	r2, #0
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff17 	bl	80007c0 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000992:	89fb      	ldrh	r3, [r7, #14]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	0800089d 	.word	0x0800089d
 80009a0:	080007c1 	.word	0x080007c1

080009a4 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 80009b6:	4919      	ldr	r1, [pc, #100]	@ (8000a1c <ifx_i2c_dl_init+0x78>)
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 fc37 	bl	800122c <ifx_i2c_pl_init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 80009c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80009c8:	e024      	b.n	8000a14 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2203      	movs	r2, #3
 80009de:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2203      	movs	r2, #3
 80009e6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000a12:	2300      	movs	r3, #0
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	08000dc1 	.word	0x08000dc1

08000a20 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <ifx_i2c_dl_send_frame+0x1c>
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000a3c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a40:	e01a      	b.n	8000a78 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2202      	movs	r2, #2
 8000a46:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	220a      	movs	r2, #10
 8000a66:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000a6a:	8879      	ldrh	r1, [r7, #2]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2200      	movs	r2, #0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f88a 	bl	8000b8a <ifx_i2c_dl_send_frame_internal>
 8000a76:	4603      	mov	r3, r0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d002      	beq.n	8000a98 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000a92:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a96:	e019      	b.n	8000acc <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000ab0:	f005 fbbd 	bl	800622e <pal_os_timer_get_time_in_milliseconds>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <ifx_i2c_dl_receive_frame+0x54>)
 8000ac0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 fc2a 	bl	800131e <ifx_i2c_pl_receive_frame>
 8000aca:	4603      	mov	r3, r0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	0002bf20 	.word	0x0002bf20

08000ad8 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	460a      	mov	r2, r1
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8000ae8:	797b      	ldrb	r3, [r7, #5]
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	f003 030f 	and.w	r3, r3, #15
 8000afc:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000afe:	89bb      	ldrh	r3, [r7, #12]
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	89fb      	ldrh	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000b0a:	897b      	ldrh	r3, [r7, #10]
 8000b0c:	091b      	lsrs	r3, r3, #4
 8000b0e:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000b10:	897b      	ldrh	r3, [r7, #10]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	893b      	ldrh	r3, [r7, #8]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	89bb      	ldrh	r3, [r7, #12]
 8000b22:	4053      	eors	r3, r2
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	893b      	ldrh	r3, [r7, #8]
 8000b2c:	4053      	eors	r3, r2
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4053      	eors	r3, r2
 8000b38:	b29b      	uxth	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	81fb      	strh	r3, [r7, #14]
 8000b5a:	e00d      	b.n	8000b78 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	89bb      	ldrh	r3, [r7, #12]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ffb5 	bl	8000ad8 <ifx_i2c_dl_calc_crc_byte>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000b72:	89fb      	ldrh	r3, [r7, #14]
 8000b74:	3301      	adds	r3, #1
 8000b76:	81fb      	strh	r3, [r7, #14]
 8000b78:	89fa      	ldrh	r2, [r7, #14]
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d3ed      	bcc.n	8000b5c <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000b80:	89bb      	ldrh	r3, [r7, #12]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	4608      	mov	r0, r1
 8000b94:	4611      	mov	r1, r2
 8000b96:	461a      	mov	r2, r3
 8000b98:	4603      	mov	r3, r0
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	707b      	strb	r3, [r7, #1]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000baa:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d107      	bne.n	8000bc2 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000bc8:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000bca:	787b      	ldrb	r3, [r7, #1]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d105      	bne.n	8000bdc <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000bda:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000bdc:	787b      	ldrb	r3, [r7, #1]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d108      	bne.n	8000bf4 <ifx_i2c_dl_send_frame_internal+0x6a>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	d103      	bne.n	8000bf4 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000bf2:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	015b      	lsls	r3, r3, #5
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d022      	beq.n	8000c5a <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8000c14:	783b      	ldrb	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <ifx_i2c_dl_send_frame_internal+0x9a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00a      	beq.n	8000c3a <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8000c58:	e006      	b.n	8000c68 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	0a1b      	lsrs	r3, r3, #8
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	887a      	ldrh	r2, [r7, #2]
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8000c80:	887b      	ldrh	r3, [r7, #2]
 8000c82:	3303      	adds	r3, #3
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	6938      	ldr	r0, [r7, #16]
 8000c8a:	f7ff ff5c 	bl	8000b46 <ifx_i2c_dl_calc_crc>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	3303      	adds	r3, #3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	440b      	add	r3, r1
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	461a      	mov	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4413      	add	r3, r2
 8000cb0:	89fa      	ldrh	r2, [r7, #14]
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	3305      	adds	r3, #5
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	6939      	ldr	r1, [r7, #16]
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 fb03 	bl	80012cc <ifx_i2c_pl_send_frame>
 8000cc6:	4603      	mov	r3, r0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2203      	movs	r2, #3
 8000cdc:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2205      	movs	r2, #5
 8000cf4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff43 	bl	8000b8a <ifx_i2c_dl_send_frame_internal>
 8000d04:	4603      	mov	r3, r0
 8000d06:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8000d08:	89fb      	ldrh	r3, [r7, #14]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8000d20:	f005 fa85 	bl	800622e <pal_os_timer_get_time_in_milliseconds>
 8000d24:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d205      	bcs.n	8000d4a <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <ifx_i2c_dl_resend_frame+0xa8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d82c      	bhi.n	8000dac <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d109      	bne.n	8000d70 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ffb3 	bl	8000cd0 <ifx_i2c_dl_resync>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	82fb      	strh	r3, [r7, #22]
 8000d6e:	e015      	b.n	8000d9c <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2202      	movs	r2, #2
 8000d84:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	2301      	movs	r3, #1
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fef9 	bl	8000b8a <ifx_i2c_dl_send_frame_internal>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8000d9c:	8afb      	ldrh	r3, [r7, #22]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d008      	beq.n	8000db4 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2206      	movs	r2, #6
 8000da6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8000daa:	e003      	b.n	8000db4 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2208      	movs	r2, #8
 8000db0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0002bf1f 	.word	0x0002bf1f

08000dc0 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	460b      	mov	r3, r1
 8000dce:	817b      	strh	r3, [r7, #10]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000dfe:	d108      	bne.n	8000e12 <ifx_i2c_pl_event_handler+0x52>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d003      	beq.n	8000e12 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2208      	movs	r2, #8
 8000e0e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2b0a      	cmp	r3, #10
 8000e1c:	f200 81ed 	bhi.w	80011fa <ifx_i2c_pl_event_handler+0x43a>
 8000e20:	a201      	add	r2, pc, #4	@ (adr r2, 8000e28 <ifx_i2c_pl_event_handler+0x68>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e55 	.word	0x08000e55
 8000e2c:	08000e7b 	.word	0x08000e7b
 8000e30:	08000ebd 	.word	0x08000ebd
 8000e34:	0800110f 	.word	0x0800110f
 8000e38:	08001191 	.word	0x08001191
 8000e3c:	08001177 	.word	0x08001177
 8000e40:	080011fb 	.word	0x080011fb
 8000e44:	080011a9 	.word	0x080011a9
 8000e48:	080010fb 	.word	0x080010fb
 8000e4c:	08000f69 	.word	0x08000f69
 8000e50:	08001039 	.word	0x08001039
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8000e54:	897b      	ldrh	r3, [r7, #10]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <ifx_i2c_pl_event_handler+0x9e>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e000      	b.n	8000e60 <ifx_i2c_pl_event_handler+0xa0>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000e6c:	7cfb      	ldrb	r3, [r7, #19]
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	2200      	movs	r2, #0
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	47a0      	blx	r4
            }
            break;
 8000e78:	e1cf      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8000e7a:	897b      	ldrh	r3, [r7, #10]
 8000e7c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000e80:	d104      	bne.n	8000e8c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2205      	movs	r2, #5
 8000e86:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000e8a:	e1c6      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000e8c:	f005 f9cf 	bl	800622e <pal_os_timer_get_time_in_milliseconds>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f000 fa3c 	bl	800131e <ifx_i2c_pl_receive_frame>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2206      	movs	r2, #6
 8000eb0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8000eb4:	e1b1      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	773b      	strb	r3, [r7, #28]
            break;
 8000eba:	e1ae      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8000ebc:	897b      	ldrh	r3, [r7, #10]
 8000ebe:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000ec2:	d104      	bne.n	8000ece <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2205      	movs	r2, #5
 8000ec8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000ecc:	e1a5      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d804      	bhi.n	8000ede <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2206      	movs	r2, #6
 8000ed8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000edc:	e19d      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8000ee4:	7d7b      	ldrb	r3, [r7, #21]
 8000ee6:	09db      	lsrs	r3, r3, #7
 8000ee8:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8000eea:	7d7b      	ldrb	r3, [r7, #21]
 8000eec:	115b      	asrs	r3, r3, #5
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8000ef6:	7d7b      	ldrb	r3, [r7, #21]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8000efe:	7d7b      	ldrb	r3, [r7, #21]
 8000f00:	109b      	asrs	r3, r3, #2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3302      	adds	r3, #2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8000f22:	893b      	ldrh	r3, [r7, #8]
 8000f24:	3b02      	subs	r3, #2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	893b      	ldrh	r3, [r7, #8]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	440b      	add	r3, r1
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8000f42:	893b      	ldrh	r3, [r7, #8]
 8000f44:	3b02      	subs	r3, #2
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fdfb 	bl	8000b46 <ifx_i2c_dl_calc_crc>
 8000f50:	4603      	mov	r3, r0
 8000f52:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8000f54:	7d3b      	ldrb	r3, [r7, #20]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <ifx_i2c_pl_event_handler+0x19e>
 8000f5a:	220b      	movs	r2, #11
 8000f5c:	e000      	b.n	8000f60 <ifx_i2c_pl_event_handler+0x1a0>
 8000f5e:	220a      	movs	r2, #10
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8000f66:	e158      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000f68:	8b3a      	ldrh	r2, [r7, #24]
 8000f6a:	8afb      	ldrh	r3, [r7, #22]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d10d      	bne.n	8000f8c <ifx_i2c_pl_event_handler+0x1cc>
 8000f70:	8b7b      	ldrh	r3, [r7, #26]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00a      	beq.n	8000f8c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000f76:	893a      	ldrh	r2, [r7, #8]
 8000f78:	8b7b      	ldrh	r3, [r7, #26]
 8000f7a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d105      	bne.n	8000f8c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000f80:	7f7b      	ldrb	r3, [r7, #29]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d002      	beq.n	8000f8c <ifx_i2c_pl_event_handler+0x1cc>
 8000f86:	7f7b      	ldrb	r3, [r7, #29]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d104      	bne.n	8000f96 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2206      	movs	r2, #6
 8000f90:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f94:	e141      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8000f96:	7ffa      	ldrb	r2, [r7, #31]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d00c      	beq.n	8000fc2 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2209      	movs	r2, #9
 8000fac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff fde5 	bl	8000b8a <ifx_i2c_dl_send_frame_internal>
                    break;
 8000fc0:	e12b      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000fc8:	7fba      	ldrb	r2, [r7, #30]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d004      	beq.n	8000fd8 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2209      	movs	r2, #9
 8000fd2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000fd6:	e120      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8000fd8:	7f7b      	ldrb	r3, [r7, #29]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d104      	bne.n	8000fe8 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000fe6:	e118      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001004:	893a      	ldrh	r2, [r7, #8]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f00b f8a6 	bl	800c15a <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	893a      	ldrh	r2, [r7, #8]
 8001012:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2204      	movs	r2, #4
 8001022:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800102a:	2300      	movs	r3, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fdaa 	bl	8000b8a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001036:	e0f0      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800103e:	461a      	mov	r2, r3
 8001040:	7f7b      	ldrb	r3, [r7, #29]
 8001042:	2b02      	cmp	r3, #2
 8001044:	bf0c      	ite	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	2300      	movne	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	429a      	cmp	r2, r3
 800104e:	d004      	beq.n	800105a <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2209      	movs	r2, #9
 8001054:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001058:	e0df      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 800105a:	8b3a      	ldrh	r2, [r7, #24]
 800105c:	8afb      	ldrh	r3, [r7, #22]
 800105e:	429a      	cmp	r2, r3
 8001060:	d004      	beq.n	800106c <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2205      	movs	r2, #5
 8001066:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800106a:	e0d6      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800106c:	893b      	ldrh	r3, [r7, #8]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d802      	bhi.n	8001078 <ifx_i2c_pl_event_handler+0x2b8>
 8001072:	8b7b      	ldrh	r3, [r7, #26]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2209      	movs	r2, #9
 800107c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001080:	e0cb      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8001082:	7f7b      	ldrb	r3, [r7, #29]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d110      	bne.n	80010aa <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2209      	movs	r2, #9
 800108c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2203      	movs	r2, #3
 800109c:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2203      	movs	r2, #3
 80010a4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 80010a8:	e0b7      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d108      	bne.n	80010c2 <ifx_i2c_pl_event_handler+0x302>
 80010b0:	7f7b      	ldrb	r3, [r7, #29]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d005      	beq.n	80010c2 <ifx_i2c_pl_event_handler+0x302>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80010bc:	7fba      	ldrb	r2, [r7, #30]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d004      	beq.n	80010cc <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2209      	movs	r2, #9
 80010c6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80010ca:	e0a6      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80010cc:	7f7b      	ldrb	r3, [r7, #29]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d104      	bne.n	80010dc <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80010da:	e09e      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	2102      	movs	r1, #2
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	47a0      	blx	r4
            }
            break;
 80010f8:	e08f      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2203      	movs	r2, #3
 80010fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001102:	2300      	movs	r3, #0
 8001104:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f909 	bl	800131e <ifx_i2c_pl_receive_frame>
            }
            break;
 800110c:	e085      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800110e:	897b      	ldrh	r3, [r7, #10]
 8001110:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001114:	d104      	bne.n	8001120 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2205      	movs	r2, #5
 800111a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800111e:	e07c      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001128:	2300      	movs	r3, #0
 800112a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00f      	beq.n	8001156 <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001142:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800114a:	3b05      	subs	r3, #5
 800114c:	b29b      	uxth	r3, r3
 800114e:	2104      	movs	r1, #4
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001154:	e061      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001162:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800116a:	3b05      	subs	r3, #5
 800116c:	b29b      	uxth	r3, r3
 800116e:	2106      	movs	r1, #6
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	47a0      	blx	r4
            break;
 8001174:	e051      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2202      	movs	r2, #2
 800117a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800117e:	2300      	movs	r3, #0
 8001180:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001182:	2300      	movs	r3, #0
 8001184:	2201      	movs	r2, #1
 8001186:	2100      	movs	r1, #0
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f7ff fcfe 	bl	8000b8a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800118e:	e044      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8001190:	2100      	movs	r1, #0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff fdbe 	bl	8000d14 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d03a      	beq.n	8001218 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 80011a6:	e037      	b.n	8001218 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80011d2:	2300      	movs	r3, #0
 80011d4:	2200      	movs	r2, #0
 80011d6:	2101      	movs	r1, #1
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	47a0      	blx	r4
 80011dc:	e00a      	b.n	80011f4 <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f7ff fd76 	bl	8000cd0 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2208      	movs	r2, #8
 80011e8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	773b      	strb	r3, [r7, #28]
            }
            break;
 80011f8:	e00f      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001208:	2300      	movs	r3, #0
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	47a0      	blx	r4
                continue_state_machine = FALSE;
 8001212:	2300      	movs	r3, #0
 8001214:	773b      	strb	r3, [r7, #28]
                break;
 8001216:	e000      	b.n	800121a <ifx_i2c_pl_event_handler+0x45a>
            break;
 8001218:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 800121a:	7f3b      	ldrb	r3, [r7, #28]
 800121c:	2b01      	cmp	r3, #1
 800121e:	f43f adeb 	beq.w	8000df8 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3724      	adds	r7, #36	@ 0x24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}

0800122c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	22bb      	movs	r2, #187	@ 0xbb
 800124a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800125a:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001262:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <ifx_i2c_pl_init+0x9c>)
 8001264:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	22c8      	movs	r2, #200	@ 0xc8
 800126a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fd3c 	bl	8005cfc <pal_i2c_init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800128a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800128e:	e016      	b.n	80012be <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2299      	movs	r2, #153	@ 0x99
 800129e:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2205      	movs	r2, #5
 80012a6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80012aa:	e003      	b.n	80012b4 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fa84 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08001aad 	.word	0x08001aad

080012cc <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d007      	beq.n	80012f4 <ifx_i2c_pl_send_frame+0x28>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d002      	beq.n	80012f4 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80012ee:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80012f2:	e010      	b.n	8001316 <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800130c:	2100      	movs	r1, #0
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f000 fa58 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800132c:	2b01      	cmp	r3, #1
 800132e:	d007      	beq.n	8001340 <ifx_i2c_pl_receive_frame+0x22>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001336:	2b02      	cmp	r3, #2
 8001338:	d002      	beq.n	8001340 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800133a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800133e:	e008      	b.n	8001352 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001348:	2100      	movs	r1, #0
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fa3a 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	70fb      	strb	r3, [r7, #3]
 8001366:	4613      	mov	r3, r2
 8001368:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	883a      	ldrh	r2, [r7, #0]
 800137e:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	22c8      	movs	r2, #200	@ 0xc8
 800138e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80013ac:	461a      	mov	r2, r3
 80013ae:	f004 fcbb 	bl	8005d28 <pal_i2c_write>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	72fb      	strb	r3, [r7, #11]
 80013c8:	4613      	mov	r3, r2
 80013ca:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	7afa      	ldrb	r2, [r7, #11]
 80013d0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80013da:	3301      	adds	r3, #1
 80013dc:	893a      	ldrh	r2, [r7, #8]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00a feba 	bl	800c15a <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80013e6:	893b      	ldrh	r3, [r7, #8]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2202      	movs	r2, #2
 80013f6:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	22c8      	movs	r2, #200	@ 0xc8
 80013fe:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800141c:	461a      	mov	r2, r3
 800141e:	f004 fc83 	bl	8005d28 <pal_i2c_write>
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001432:	2204      	movs	r2, #4
 8001434:	2182      	movs	r1, #130	@ 0x82
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff8f 	bl	800135a <ifx_i2c_pl_read_register>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fcd6 	bl	8005e20 <pal_i2c_set_bitrate>
 8001474:	4603      	mov	r3, r0
 8001476:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d019      	beq.n	80014bc <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	b291      	uxth	r1, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001498:	2b00      	cmp	r3, #0
 800149a:	d00b      	beq.n	80014b4 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80014a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4908      	ldr	r1, [pc, #32]	@ (80014cc <ifx_i2c_pl_set_bit_rate+0x88>)
 80014aa:	f004 fe0b 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 80014ae:	2301      	movs	r3, #1
 80014b0:	81fb      	strh	r3, [r7, #14]
 80014b2:	e005      	b.n	80014c0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 80014b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80014b8:	81fb      	strh	r3, [r7, #14]
 80014ba:	e001      	b.n	80014c0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 80014bc:	2300      	movs	r3, #0
 80014be:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 80014c0:	89fb      	ldrh	r3, [r7, #14]

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	080014d1 	.word	0x080014d1

080014d0 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b08b      	sub	sp, #44	@ 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80014d8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80014dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	733b      	strb	r3, [r7, #12]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800150e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001510:	d031      	beq.n	8001576 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001512:	2bbb      	cmp	r3, #187	@ 0xbb
 8001514:	f300 8145 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001518:	2baa      	cmp	r3, #170	@ 0xaa
 800151a:	f000 812d 	beq.w	8001778 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 800151e:	2baa      	cmp	r3, #170	@ 0xaa
 8001520:	f300 813f 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001524:	2b88      	cmp	r3, #136	@ 0x88
 8001526:	f000 8103 	beq.w	8001730 <ifx_i2c_pl_negotiation_event_handler+0x260>
 800152a:	2b88      	cmp	r3, #136	@ 0x88
 800152c:	f300 8139 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001530:	2b77      	cmp	r3, #119	@ 0x77
 8001532:	f000 80c6 	beq.w	80016c2 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001536:	2b77      	cmp	r3, #119	@ 0x77
 8001538:	f300 8133 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800153c:	2b66      	cmp	r3, #102	@ 0x66
 800153e:	f000 809d 	beq.w	800167c <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001542:	2b66      	cmp	r3, #102	@ 0x66
 8001544:	f300 812d 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001548:	2b55      	cmp	r3, #85	@ 0x55
 800154a:	f000 808d 	beq.w	8001668 <ifx_i2c_pl_negotiation_event_handler+0x198>
 800154e:	2b55      	cmp	r3, #85	@ 0x55
 8001550:	f300 8127 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001554:	2b44      	cmp	r3, #68	@ 0x44
 8001556:	d040      	beq.n	80015da <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001558:	2b44      	cmp	r3, #68	@ 0x44
 800155a:	f300 8122 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800155e:	2b33      	cmp	r3, #51	@ 0x33
 8001560:	d031      	beq.n	80015c6 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001562:	2b33      	cmp	r3, #51	@ 0x33
 8001564:	f300 811d 	bgt.w	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001568:	2b11      	cmp	r3, #17
 800156a:	f000 80cb 	beq.w	8001704 <ifx_i2c_pl_negotiation_event_handler+0x234>
 800156e:	2b22      	cmp	r3, #34	@ 0x22
 8001570:	f000 80d4 	beq.w	800171c <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001574:	e115      	b.n	80017a2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001576:	2164      	movs	r1, #100	@ 0x64
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff63 	bl	8001444 <ifx_i2c_pl_set_bit_rate>
 800157e:	4603      	mov	r3, r0
 8001580:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001582:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001584:	2b00      	cmp	r3, #0
 8001586:	d107      	bne.n	8001598 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2233      	movs	r2, #51	@ 0x33
 800158c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001596:	e106      	b.n	80017a6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001598:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800159a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800159e:	f040 8102 	bne.w	80017a6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	22aa      	movs	r2, #170	@ 0xaa
 80015a6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80015b8:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4980      	ldr	r1, [pc, #512]	@ (80017c0 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 80015c0:	f004 fd80 	bl	80060c4 <pal_os_event_register_callback_oneshot>
            break;
 80015c4:	e0ef      	b.n	80017a6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2244      	movs	r2, #68	@ 0x44
 80015ca:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80015ce:	2204      	movs	r2, #4
 80015d0:	2184      	movs	r1, #132	@ 0x84
 80015d2:	69b8      	ldr	r0, [r7, #24]
 80015d4:	f7ff fec1 	bl	800135a <ifx_i2c_pl_read_register>
            break;
 80015d8:	e0e8      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80015fc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001600:	d911      	bls.n	8001626 <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001602:	8abb      	ldrh	r3, [r7, #20]
 8001604:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001608:	d80d      	bhi.n	8001626 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 800160a:	2304      	movs	r3, #4
 800160c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2255      	movs	r2, #85	@ 0x55
 8001612:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2202      	movs	r2, #2
 800161c:	2189      	movs	r1, #137	@ 0x89
 800161e:	69b8      	ldr	r0, [r7, #24]
 8001620:	f7ff fecb 	bl	80013ba <ifx_i2c_pl_write_register>
 8001624:	e01f      	b.n	8001666 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 800162c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001630:	d811      	bhi.n	8001656 <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001632:	8abb      	ldrh	r3, [r7, #20]
 8001634:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001638:	d90d      	bls.n	8001656 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 800163a:	2303      	movs	r3, #3
 800163c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2255      	movs	r2, #85	@ 0x55
 8001642:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	2202      	movs	r2, #2
 800164c:	2189      	movs	r1, #137	@ 0x89
 800164e:	69b8      	ldr	r0, [r7, #24]
 8001650:	f7ff feb3 	bl	80013ba <ifx_i2c_pl_write_register>
 8001654:	e007      	b.n	8001666 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2266      	movs	r2, #102	@ 0x66
 800165a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001664:	e0a2      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001666:	e0a1      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2266      	movs	r2, #102	@ 0x66
 800166c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001670:	2204      	movs	r2, #4
 8001672:	2184      	movs	r1, #132	@ 0x84
 8001674:	69b8      	ldr	r0, [r7, #24]
 8001676:	f7ff fe70 	bl	800135a <ifx_i2c_pl_read_register>
            break;
 800167a:	e097      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800168c:	b21b      	sxth	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b21b      	sxth	r3, r3
 8001692:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 800169a:	8aba      	ldrh	r2, [r7, #20]
 800169c:	429a      	cmp	r2, r3
 800169e:	d208      	bcs.n	80016b2 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	22aa      	movs	r2, #170	@ 0xaa
 80016ac:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80016b0:	e003      	b.n	80016ba <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2277      	movs	r2, #119	@ 0x77
 80016b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80016c0:	e074      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff feba 	bl	8001444 <ifx_i2c_pl_set_bit_rate>
 80016d0:	4603      	mov	r3, r0
 80016d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 80016d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d107      	bne.n	80016ea <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2211      	movs	r2, #17
 80016de:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80016e8:	e05f      	b.n	80017aa <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 80016ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016ec:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80016f0:	d15b      	bne.n	80017aa <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	22aa      	movs	r2, #170	@ 0xaa
 80016f6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001702:	e052      	b.n	80017aa <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2222      	movs	r2, #34	@ 0x22
 8001708:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2202      	movs	r2, #2
 8001712:	2181      	movs	r1, #129	@ 0x81
 8001714:	69b8      	ldr	r0, [r7, #24]
 8001716:	f7ff fe50 	bl	80013ba <ifx_i2c_pl_write_register>
            break;
 800171a:	e047      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2288      	movs	r2, #136	@ 0x88
 8001720:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001724:	2202      	movs	r2, #2
 8001726:	2181      	movs	r1, #129	@ 0x81
 8001728:	69b8      	ldr	r0, [r7, #24]
 800172a:	f7ff fe16 	bl	800135a <ifx_i2c_pl_read_register>
            break;
 800172e:	e03d      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	22aa      	movs	r2, #170	@ 0xaa
 8001734:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	b21a      	sxth	r2, r3
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21b      	sxth	r3, r3
 800174e:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001756:	8afa      	ldrh	r2, [r7, #22]
 8001758:	429a      	cmp	r2, r3
 800175a:	d805      	bhi.n	8001768 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	8afa      	ldrh	r2, [r7, #22]
 8001760:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001764:	2300      	movs	r3, #0
 8001766:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001770:	2301      	movs	r3, #1
 8001772:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001776:	e019      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001778:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800177a:	2b00      	cmp	r3, #0
 800177c:	d104      	bne.n	8001788 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001786:	e003      	b.n	8001790 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001796:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001798:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	69b8      	ldr	r0, [r7, #24]
 800179e:	47a0      	blx	r4
            break;
 80017a0:	e004      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 80017a2:	bf00      	nop
 80017a4:	e002      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 80017a6:	bf00      	nop
 80017a8:	e000      	b.n	80017ac <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 80017aa:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 80017ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f47f aea6 	bne.w	8001502 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 80017b6:	bf00      	nop
 80017b8:	bf00      	nop
 80017ba:	372c      	adds	r7, #44	@ 0x2c
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	080014d1 	.word	0x080014d1

080017c4 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80017e4:	8879      	ldrh	r1, [r7, #2]
 80017e6:	2300      	movs	r3, #0
 80017e8:	2200      	movs	r2, #0
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80017ee:	e0f0      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80017f6:	3b01      	subs	r3, #1
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	f200 80dc 	bhi.w	80019b6 <ifx_i2c_pl_frame_event_handler+0x1f2>
 80017fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001804 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001821 	.word	0x08001821
 8001808:	08001829 	.word	0x08001829
 800180c:	08001847 	.word	0x08001847
 8001810:	08001995 	.word	0x08001995
 8001814:	08001819 	.word	0x08001819
                ifx_i2c_pl_soft_reset(p_ctx);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f983 	bl	8001b24 <ifx_i2c_pl_soft_reset>
            break;
 800181e:	e0d8      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fe55 	bl	80014d0 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001826:	e0d4      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001836:	2b02      	cmp	r3, #2
 8001838:	d105      	bne.n	8001846 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800183a:	2204      	movs	r2, #4
 800183c:	2182      	movs	r1, #130	@ 0x82
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fd8b 	bl	800135a <ifx_i2c_pl_read_register>
                    break;
 8001844:	e0c5      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800184c:	2b02      	cmp	r3, #2
 800184e:	d159      	bne.n	8001904 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	d052      	beq.n	8001904 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21a      	sxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21b      	sxth	r3, r3
 8001874:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001876:	8a7b      	ldrh	r3, [r7, #18]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <ifx_i2c_pl_frame_event_handler+0xda>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001882:	8a7a      	ldrh	r2, [r7, #18]
 8001884:	429a      	cmp	r2, r3
 8001886:	d80a      	bhi.n	800189e <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2204      	movs	r2, #4
 800188c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001890:	8a7b      	ldrh	r3, [r7, #18]
 8001892:	461a      	mov	r2, r3
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fd5f 	bl	800135a <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800189c:	e079      	b.n	8001992 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 800189e:	f004 fcc6 	bl	800622e <pal_os_timer_get_time_in_milliseconds>
 80018a2:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d205      	bcs.n	80018c8 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d209      	bcs.n	80018e8 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80018da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	493e      	ldr	r1, [pc, #248]	@ (80019dc <ifx_i2c_pl_frame_event_handler+0x218>)
 80018e2:	f004 fbef 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80018e6:	e054      	b.n	8001992 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80018f6:	2300      	movs	r3, #0
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001902:	e046      	b.n	8001992 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800190a:	2b01      	cmp	r3, #1
 800190c:	d10e      	bne.n	800192c <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001922:	2180      	movs	r1, #128	@ 0x80
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fd48 	bl	80013ba <ifx_i2c_pl_write_register>
            break;
 800192a:	e052      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 800192c:	f004 fc7f 	bl	800622e <pal_os_timer_get_time_in_milliseconds>
 8001930:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	429a      	cmp	r2, r3
 8001948:	d205      	bcs.n	8001956 <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	429a      	cmp	r2, r3
 8001960:	d209      	bcs.n	8001976 <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001968:	f241 3388 	movw	r3, #5000	@ 0x1388
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	491b      	ldr	r1, [pc, #108]	@ (80019dc <ifx_i2c_pl_frame_event_handler+0x218>)
 8001970:	f004 fba8 	bl	80060c4 <pal_os_event_register_callback_oneshot>
            break;
 8001974:	e02d      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001984:	2300      	movs	r3, #0
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	47a0      	blx	r4
            break;
 8001990:	e01f      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
 8001992:	e01e      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80019ae:	2100      	movs	r1, #0
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	47a0      	blx	r4
            break;
 80019b4:	e00d      	b.n	80019d2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80019c4:	2300      	movs	r3, #0
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	47a0      	blx	r4
            break;
 80019d0:	bf00      	nop
}
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	0800142b 	.word	0x0800142b

080019e0 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10c      	bne.n	8001a10 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f004 f98d 	bl	8005d28 <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8001a0e:	e010      	b.n	8001a32 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d10b      	bne.n	8001a32 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f004 f9b9 	bl	8005da4 <pal_i2c_read>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d11f      	bne.n	8001a90 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d110      	bne.n	8001a7c <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001a74:	461a      	mov	r2, r3
 8001a76:	f004 f995 	bl	8005da4 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8001a7a:	e012      	b.n	8001aa2 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d10d      	bne.n	8001aa2 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001a86:	2100      	movs	r1, #0
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fe9b 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
}
 8001a8e:	e008      	b.n	8001aa2 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d103      	bne.n	8001aa2 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7ff fe91 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60fb      	str	r3, [r7, #12]
    switch (event)
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01e      	beq.n	8001b00 <ifx_i2c_pl_pal_event_handler+0x54>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db25      	blt.n	8001b12 <ifx_i2c_pl_pal_event_handler+0x66>
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d822      	bhi.n	8001b12 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001ad2:	1e5a      	subs	r2, r3, #1
 8001ad4:	b291      	uxth	r1, r2
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	490b      	ldr	r1, [pc, #44]	@ (8001b1c <ifx_i2c_pl_pal_event_handler+0x70>)
 8001aee:	f004 fae9 	bl	80060c4 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001af2:	e00f      	b.n	8001b14 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001af4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fe63 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001afe:	e009      	b.n	8001b14 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001b06:	2332      	movs	r3, #50	@ 0x32
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4905      	ldr	r1, [pc, #20]	@ (8001b20 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001b0c:	f004 fada 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001b10:	e000      	b.n	8001b14 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001b12:	bf00      	nop
    }
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	080019e1 	.word	0x080019e1
 8001b20:	08001a3b 	.word	0x08001a3b

08001b24 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001b36:	3b99      	subs	r3, #153	@ 0x99
 8001b38:	2b0a      	cmp	r3, #10
 8001b3a:	d85e      	bhi.n	8001bfa <ifx_i2c_pl_soft_reset+0xd6>
 8001b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b44 <ifx_i2c_pl_soft_reset+0x20>)
 8001b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b42:	bf00      	nop
 8001b44:	08001b71 	.word	0x08001b71
 8001b48:	08001bfb 	.word	0x08001bfb
 8001b4c:	08001bfb 	.word	0x08001bfb
 8001b50:	08001bfb 	.word	0x08001bfb
 8001b54:	08001bfb 	.word	0x08001bfb
 8001b58:	08001bfb 	.word	0x08001bfb
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001be9 	.word	0x08001be9
 8001b68:	08001b85 	.word	0x08001b85
 8001b6c:	08001bcd 	.word	0x08001bcd
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	22a2      	movs	r2, #162	@ 0xa2
 8001b74:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001b78:	2204      	movs	r2, #4
 8001b7a:	2182      	movs	r1, #130	@ 0x82
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fbec 	bl	800135a <ifx_i2c_pl_read_register>
            break;
 8001b82:	e03b      	b.n	8001bfc <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d10b      	bne.n	8001bb8 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	22a3      	movs	r2, #163	@ 0xa3
 8001ba4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2202      	movs	r2, #2
 8001bae:	2188      	movs	r1, #136	@ 0x88
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff fc02 	bl	80013ba <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001bb6:	e021      	b.n	8001bfc <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001bc0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff fdfd 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001bca:	e017      	b.n	8001bfc <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	22a1      	movs	r2, #161	@ 0xa1
 8001bd0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001bda:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <ifx_i2c_pl_soft_reset+0xe0>)
 8001be2:	f004 fa6f 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001be6:	e009      	b.n	8001bfc <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff fde6 	bl	80017c4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001bf8:	e000      	b.n	8001bfc <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8001bfa:	bf00      	nop
    }
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	08001b25 	.word	0x08001b25

08001c08 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001c12:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001c16:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8001c20:	491c      	ldr	r1, [pc, #112]	@ (8001c94 <ifx_i2c_prl_init+0x8c>)
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 faa0 	bl	8003168 <ifx_i2c_tl_init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12b      	bne.n	8001c86 <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001c3a:	2b11      	cmp	r3, #17
 8001c3c:	d104      	bne.n	8001c48 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001c46:	e003      	b.n	8001c50 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2211      	movs	r2, #17
 8001c74:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2211      	movs	r2, #17
 8001c7c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8001c80:	2300      	movs	r3, #0
 8001c82:	81fb      	strh	r3, [r7, #14]
 8001c84:	e000      	b.n	8001c88 <ifx_i2c_prl_init+0x80>
            break;
 8001c86:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8001c88:	89fb      	ldrh	r3, [r7, #14]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	08002811 	.word	0x08002811

08001c98 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001ca2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ca6:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d12e      	bne.n	8001d10 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001cbe:	2b33      	cmp	r3, #51	@ 0x33
 8001cc0:	d109      	bne.n	8001cd6 <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	81fb      	strh	r3, [r7, #14]
            break;
 8001cd4:	e01d      	b.n	8001d12 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d118      	bne.n	8001d12 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001ce6:	2b22      	cmp	r3, #34	@ 0x22
 8001ce8:	d113      	bne.n	8001d12 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001d00:	2301      	movs	r3, #1
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fd83 	bl	8002810 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	81fb      	strh	r3, [r7, #14]
            break;
 8001d0e:	e000      	b.n	8001d12 <ifx_i2c_prl_close+0x7a>
            break;
 8001d10:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8001d12:	89fb      	ldrh	r3, [r7, #14]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}

08001d1c <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001d2c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001d30:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05a      	beq.n	8001dee <ifx_i2c_prl_transceive+0xd2>
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d057      	beq.n	8001dee <ifx_i2c_prl_transceive+0xd2>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d152      	bne.n	8001dee <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001d4e:	2b11      	cmp	r3, #17
 8001d50:	d10d      	bne.n	8001d6e <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d108      	bne.n	8001d6e <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2208      	movs	r2, #8
 8001d60:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8001d6c:	e003      	b.n	8001d76 <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	88fa      	ldrh	r2, [r7, #6]
 8001d80:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d006      	beq.n	8001da0 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001d98:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d103      	bne.n	8001da8 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001da6:	e003      	b.n	8001db0 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6a3a      	ldr	r2, [r7, #32]
 8001db4:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2211      	movs	r2, #17
 8001dda:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	2100      	movs	r1, #0
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 fd13 	bl	8002810 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8001dea:	2300      	movs	r3, #0
 8001dec:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 8001dee:	8afb      	ldrh	r3, [r7, #22]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b09e      	sub	sp, #120	@ 0x78
 8001dfc:	af06      	add	r7, sp, #24
 8001dfe:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001e00:	f240 1307 	movw	r3, #263	@ 0x107
 8001e04:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <ifx_i2c_prl_prf+0xa4>)
 8001e0a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001e0e:	461d      	mov	r5, r3
 8001e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f107 020a 	add.w	r2, r7, #10
 8001e24:	f107 010c 	add.w	r1, r7, #12
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 f885 	bl	8005f38 <pal_os_datastore_read>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8001e34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001e3c:	f240 1307 	movw	r3, #263	@ 0x107
 8001e40:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8001e44:	e024      	b.n	8001e90 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001e46:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001e50:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001e54:	f107 010c 	add.w	r1, r7, #12
 8001e58:	2528      	movs	r5, #40	@ 0x28
 8001e5a:	9504      	str	r5, [sp, #16]
 8001e5c:	9203      	str	r2, [sp, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	9202      	str	r2, [sp, #8]
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2310      	movs	r3, #16
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4623      	mov	r3, r4
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f003 fe79 	bl	8005b64 <pal_crypt_tls_prf_sha256>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001e78:	f240 1307 	movw	r3, #263	@ 0x107
 8001e7c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00a f920 	bl	800c0d0 <memset>

    } while (FALSE);
    return (return_status);
 8001e90:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3760      	adds	r7, #96	@ 0x60
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9c:	0800cd1c 	.word	0x0800cd1c

08001ea0 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	460b      	mov	r3, r1
 8001eae:	817b      	strh	r3, [r7, #10]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	7a7a      	ldrb	r2, [r7, #9]
 8001eb8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	33a1      	adds	r3, #161	@ 0xa1
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fc57 	bl	8005776 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	33a6      	adds	r3, #166	@ 0xa6
 8001ed8:	897a      	ldrh	r2, [r7, #10]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f003 fc33 	bl	8005748 <optiga_common_set_uint16>
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08e      	sub	sp, #56	@ 0x38
 8001eee:	af06      	add	r7, sp, #24
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	603b      	str	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001efa:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001efe:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8001f00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f04:	88f9      	ldrh	r1, [r7, #6]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff ffc9 	bl	8001ea0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3378      	adds	r3, #120	@ 0x78
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fc29 	bl	8005776 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8001f2e:	88f9      	ldrh	r1, [r7, #6]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	9205      	str	r2, [sp, #20]
 8001f34:	2208      	movs	r2, #8
 8001f36:	9204      	str	r2, [sp, #16]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	9203      	str	r2, [sp, #12]
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	2308      	movs	r3, #8
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f003 fe2e 	bl	8005bb0 <pal_crypt_encrypt_aes128_ccm>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	83fb      	strh	r3, [r7, #30]
 8001f5e:	e000      	b.n	8001f62 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8001f60:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001f62:	8bfb      	ldrh	r3, [r7, #30]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af06      	add	r7, sp, #24
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001f7c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001f80:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8001f82:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f86:	88f9      	ldrh	r1, [r7, #6]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff ff88 	bl	8001ea0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8001f90:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f94:	3358      	adds	r3, #88	@ 0x58
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	6839      	ldr	r1, [r7, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fbe5 	bl	8005776 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 8001fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001fb6:	3358      	adds	r3, #88	@ 0x58
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fc2:	9205      	str	r2, [sp, #20]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	9204      	str	r2, [sp, #16]
 8001fc8:	2208      	movs	r2, #8
 8001fca:	9203      	str	r2, [sp, #12]
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2308      	movs	r3, #8
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460a      	mov	r2, r1
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f003 fe07 	bl	8005bf2 <pal_crypt_decrypt_aes128_ccm>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001fea:	2300      	movs	r3, #0
 8001fec:	83fb      	strh	r3, [r7, #30]
 8001fee:	e000      	b.n	8001ff2 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8001ff0:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001ff2:	8bfb      	ldrh	r3, [r7, #30]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8002004:	2300      	movs	r3, #0
 8002006:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002016:	2b04      	cmp	r3, #4
 8002018:	d134      	bne.n	8002084 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002020:	3301      	adds	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002044:	b2da      	uxtb	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3354      	adds	r3, #84	@ 0x54
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	2201      	movs	r2, #1
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f001 f8a9 	bl	80031c4 <ifx_i2c_tl_transceive>
 8002072:	4603      	mov	r3, r0
 8002074:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e00d      	b.n	80020a0 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800208a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	22ff      	movs	r2, #255	@ 0xff
 800209a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 800209e:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 80020a0:	89fb      	ldrh	r3, [r7, #14]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b08a      	sub	sp, #40	@ 0x28
 80020ae:	af04      	add	r7, sp, #16
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80020b4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80020b8:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80020c4:	2b55      	cmp	r3, #85	@ 0x55
 80020c6:	f000 8178 	beq.w	80023ba <ifx_i2c_prl_do_handshake+0x310>
 80020ca:	2b55      	cmp	r3, #85	@ 0x55
 80020cc:	f300 817f 	bgt.w	80023ce <ifx_i2c_prl_do_handshake+0x324>
 80020d0:	2b44      	cmp	r3, #68	@ 0x44
 80020d2:	f000 8100 	beq.w	80022d6 <ifx_i2c_prl_do_handshake+0x22c>
 80020d6:	2b44      	cmp	r3, #68	@ 0x44
 80020d8:	f300 8179 	bgt.w	80023ce <ifx_i2c_prl_do_handshake+0x324>
 80020dc:	2b33      	cmp	r3, #51	@ 0x33
 80020de:	f000 8095 	beq.w	800220c <ifx_i2c_prl_do_handshake+0x162>
 80020e2:	2b33      	cmp	r3, #51	@ 0x33
 80020e4:	f300 8173 	bgt.w	80023ce <ifx_i2c_prl_do_handshake+0x324>
 80020e8:	2b11      	cmp	r3, #17
 80020ea:	d002      	beq.n	80020f2 <ifx_i2c_prl_do_handshake+0x48>
 80020ec:	2b22      	cmp	r3, #34	@ 0x22
 80020ee:	d034      	beq.n	800215a <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 80020f0:	e16d      	b.n	80023ce <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2226      	movs	r2, #38	@ 0x26
 8002116:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3354      	adds	r3, #84	@ 0x54
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4613      	mov	r3, r2
 800212e:	2202      	movs	r2, #2
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f001 f847 	bl	80031c4 <ifx_i2c_tl_transceive>
 8002136:	4603      	mov	r3, r0
 8002138:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800213a:	8afb      	ldrh	r3, [r7, #22]
 800213c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002140:	d106      	bne.n	8002150 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2255      	movs	r2, #85	@ 0x55
 8002146:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800214a:	2301      	movs	r3, #1
 800214c:	613b      	str	r3, [r7, #16]
                    break;
 800214e:	e13f      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2222      	movs	r2, #34	@ 0x22
 8002154:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002158:	e13a      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800215a:	2301      	movs	r3, #1
 800215c:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00e      	beq.n	8002194 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800217c:	2b01      	cmp	r3, #1
 800217e:	d109      	bne.n	8002194 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002180:	f240 1307 	movw	r3, #263	@ 0x107
 8002184:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	22ff      	movs	r2, #255	@ 0xff
 800218a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
                    break;
 8002192:	e11d      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800219a:	2b26      	cmp	r3, #38	@ 0x26
 800219c:	d108      	bne.n	80021b0 <ifx_i2c_prl_do_handshake+0x106>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d104      	bne.n	80021b0 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d004      	beq.n	80021ba <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2255      	movs	r2, #85	@ 0x55
 80021b4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80021b8:	e10a      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3322      	adds	r3, #34	@ 0x22
 80021be:	4618      	mov	r0, r3
 80021c0:	f003 fafa 	bl	80057b8 <optiga_common_get_uint32>
 80021c4:	4602      	mov	r2, r0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3302      	adds	r3, #2
 80021dc:	2220      	movs	r2, #32
 80021de:	4619      	mov	r1, r3
 80021e0:	f009 ffbb 	bl	800c15a <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fe07 	bl	8001df8 <ifx_i2c_prl_prf>
 80021ea:	4603      	mov	r3, r0
 80021ec:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80021ee:	8afb      	ldrh	r3, [r7, #22]
 80021f0:	f240 1207 	movw	r2, #263	@ 0x107
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d104      	bne.n	8002202 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2255      	movs	r2, #85	@ 0x55
 80021fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002200:	e0e6      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2233      	movs	r2, #51	@ 0x33
 8002206:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800220a:	e0e1      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2208      	movs	r2, #8
 8002210:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3380      	adds	r3, #128	@ 0x80
 8002222:	2220      	movs	r2, #32
 8002224:	4619      	mov	r1, r3
 8002226:	f009 ff98 	bl	800c15a <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f003 fa9d 	bl	8005776 <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	2224      	movs	r2, #36	@ 0x24
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fe49 	bl	8001eea <ifx_i2c_prl_encrypt_msg>
 8002258:	4603      	mov	r3, r0
 800225a:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800225c:	8afb      	ldrh	r3, [r7, #22]
 800225e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002262:	d106      	bne.n	8002272 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2255      	movs	r2, #85	@ 0x55
 8002268:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
                    break;
 8002270:	e0ae      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f003 fa73 	bl	8005776 <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2231      	movs	r2, #49	@ 0x31
 8002294:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3354      	adds	r3, #84	@ 0x54
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	2231      	movs	r2, #49	@ 0x31
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 ff88 	bl	80031c4 <ifx_i2c_tl_transceive>
 80022b4:	4603      	mov	r3, r0
 80022b6:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80022b8:	8afb      	ldrh	r3, [r7, #22]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2255      	movs	r2, #85	@ 0x55
 80022c2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	613b      	str	r3, [r7, #16]
                    break;
 80022ca:	e081      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2244      	movs	r2, #68	@ 0x44
 80022d0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80022d4:	e07c      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d104      	bne.n	80022e8 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80022e4:	2b31      	cmp	r3, #49	@ 0x31
 80022e6:	d006      	beq.n	80022f6 <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2255      	movs	r2, #85	@ 0x55
 80022ec:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
                    break;
 80022f4:	e06c      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fa5c 	bl	80057b8 <optiga_common_get_uint32>
 8002300:	4602      	mov	r2, r0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	1d59      	adds	r1, r3, #5
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002318:	9203      	str	r2, [sp, #12]
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	9202      	str	r2, [sp, #8]
 800231e:	2210      	movs	r2, #16
 8002320:	9201      	str	r2, [sp, #4]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4603      	mov	r3, r0
 8002326:	2224      	movs	r2, #36	@ 0x24
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fe1f 	bl	8001f6c <ifx_i2c_prl_decrypt_msg>
 800232e:	4603      	mov	r3, r0
 8002330:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002332:	8afb      	ldrh	r3, [r7, #22]
 8002334:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002338:	d106      	bne.n	8002348 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2255      	movs	r2, #85	@ 0x55
 800233e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002342:	2301      	movs	r3, #1
 8002344:	613b      	str	r3, [r7, #16]
                    break;
 8002346:	e043      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fa0f 	bl	8005776 <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	33a8      	adds	r3, #168	@ 0xa8
 8002362:	2220      	movs	r2, #32
 8002364:	4619      	mov	r1, r3
 8002366:	f009 fea3 	bl	800c0b0 <memcmp>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002370:	f240 1307 	movw	r3, #263	@ 0x107
 8002374:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2255      	movs	r2, #85	@ 0x55
 800237a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800237e:	2301      	movs	r3, #1
 8002380:	613b      	str	r3, [r7, #16]
                    break;
 8002382:	e025      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	2204      	movs	r2, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f009 fe8d 	bl	800c0b0 <memcmp>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 800239c:	f240 1307 	movw	r3, #263	@ 0x107
 80023a0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2255      	movs	r2, #85	@ 0x55
 80023a6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80023aa:	2301      	movs	r3, #1
 80023ac:	613b      	str	r3, [r7, #16]
                    break;
 80023ae:	e00f      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80023b8:	e00a      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80023ba:	f240 1307 	movw	r3, #263	@ 0x107
 80023be:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	22ff      	movs	r2, #255	@ 0xff
 80023c4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
            break;
 80023cc:	e000      	b.n	80023d0 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80023ce:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	f43f ae73 	beq.w	80020be <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80023d8:	8afb      	ldrh	r3, [r7, #22]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b094      	sub	sp, #80	@ 0x50
 80023e6:	af02      	add	r7, sp, #8
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80023f2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80023f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002400:	2b01      	cmp	r3, #1
 8002402:	d003      	beq.n	800240c <ifx_i2c_prl_do_manage_context+0x2a>
 8002404:	2b02      	cmp	r3, #2
 8002406:	f000 80eb 	beq.w	80025e0 <ifx_i2c_prl_do_manage_context+0x1fe>
 800240a:	e1df      	b.n	80027cc <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002412:	b25b      	sxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	da07      	bge.n	8002428 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002420:	2300      	movs	r3, #0
 8002422:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002426:	e1ed      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800242e:	2b22      	cmp	r3, #34	@ 0x22
 8002430:	d10c      	bne.n	800244c <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2260      	movs	r2, #96	@ 0x60
 8002436:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800244a:	e0a6      	b.n	800259a <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002452:	2b11      	cmp	r3, #17
 8002454:	f040 8093 	bne.w	800257e <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800245e:	885b      	ldrh	r3, [r3, #2]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d033      	beq.n	80024cc <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2234      	movs	r2, #52	@ 0x34
 8002468:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002472:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002474:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3354      	adds	r3, #84	@ 0x54
 800247a:	461a      	mov	r2, r3
 800247c:	f003 fd5c 	bl	8005f38 <pal_os_datastore_read>
 8002480:	4603      	mov	r3, r0
 8002482:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002486:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800248a:	2b01      	cmp	r3, #1
 800248c:	f000 81b7 	beq.w	80027fe <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d130      	bne.n	8002508 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80024ca:	e19b      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d112      	bne.n	80024fc <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80024fa:	e183      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2268      	movs	r2, #104	@ 0x68
 800250c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f003 f92a 	bl	8005776 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2205      	movs	r2, #5
 8002526:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2205      	movs	r2, #5
 8002534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002546:	885b      	ldrh	r3, [r3, #2]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d026      	beq.n	800259a <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	2234      	movs	r2, #52	@ 0x34
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f009 fdbb 	bl	800c0d0 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002560:	885b      	ldrh	r3, [r3, #2]
 8002562:	f107 0110 	add.w	r1, r7, #16
 8002566:	2234      	movs	r2, #52	@ 0x34
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fc67 	bl	8005e3c <pal_os_datastore_write>
 800256e:	4603      	mov	r3, r0
 8002570:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002574:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002578:	2b01      	cmp	r3, #1
 800257a:	d10e      	bne.n	800259a <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 800257c:	e142      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	22ff      	movs	r2, #255	@ 0xff
 8002582:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2207      	movs	r2, #7
 800258a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002594:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002598:	e134      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3354      	adds	r3, #84	@ 0x54
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4603      	mov	r3, r0
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fe05 	bl	80031c4 <ifx_i2c_tl_transceive>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80025c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f040 811c 	bne.w	8002802 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
        }
        break;
 80025de:	e111      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 80025f2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80025f6:	2b6c      	cmp	r3, #108	@ 0x6c
 80025f8:	d133      	bne.n	8002662 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002600:	2b11      	cmp	r3, #17
 8002602:	d12e      	bne.n	8002662 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b05      	cmp	r3, #5
 8002608:	d12b      	bne.n	8002662 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3308      	adds	r3, #8
 8002614:	2228      	movs	r2, #40	@ 0x28
 8002616:	4619      	mov	r1, r3
 8002618:	f009 fd9f 	bl	800c15a <memcpy>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2204      	movs	r2, #4
 800265c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002660:	e0ac      	b.n	80027bc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002662:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002666:	2b64      	cmp	r3, #100	@ 0x64
 8002668:	f040 808b 	bne.w	8002782 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002672:	2b22      	cmp	r3, #34	@ 0x22
 8002674:	f040 8085 	bne.w	8002782 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 8081 	bne.w	8002782 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f103 0008 	add.w	r0, r3, #8
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3358      	adds	r3, #88	@ 0x58
 8002692:	2228      	movs	r2, #40	@ 0x28
 8002694:	4619      	mov	r1, r3
 8002696:	f009 fd60 	bl	800c15a <memcpy>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026d4:	885b      	ldrh	r3, [r3, #2]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d02e      	beq.n	8002738 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2234      	movs	r2, #52	@ 0x34
 80026de:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026e8:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80026ea:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80026f2:	461a      	mov	r2, r3
 80026f4:	f003 fba2 	bl	8005e3c <pal_os_datastore_write>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 80026fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002702:	2b00      	cmp	r3, #0
 8002704:	d018      	beq.n	8002738 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	@ 0xff
 800270a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2207      	movs	r2, #7
 8002712:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002724:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
                        break;
 8002736:	e065      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3358      	adds	r3, #88	@ 0x58
 800273c:	2228      	movs	r2, #40	@ 0x28
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f009 fcc5 	bl	800c0d0 <memset>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	645a      	str	r2, [r3, #68]	@ 0x44
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	649a      	str	r2, [r3, #72]	@ 0x48
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002780:	e01c      	b.n	80027bc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2234      	movs	r2, #52	@ 0x34
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f009 fca1 	bl	800c0d0 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002794:	885b      	ldrh	r3, [r3, #2]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80027a0:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80027a2:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80027a4:	2234      	movs	r2, #52	@ 0x34
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fb48 	bl	8005e3c <pal_os_datastore_write>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 80027b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80027b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 80027ba:	e023      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 80027ca:	e01b      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	22ff      	movs	r2, #255	@ 0xff
 80027d0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2207      	movs	r2, #7
 80027d8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80027ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
        }
        break;
 80027fc:	e002      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 80027fe:	bf00      	nop
 8002800:	e000      	b.n	8002804 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002802:	bf00      	nop
    }
  return (return_status);
 8002804:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002808:	4618      	mov	r0, r3
 800280a:	3748      	adds	r7, #72	@ 0x48
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b097      	sub	sp, #92	@ 0x5c
 8002814:	af04      	add	r7, sp, #16
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	461a      	mov	r2, r3
 800281c:	460b      	mov	r3, r1
 800281e:	817b      	strh	r3, [r7, #10]
 8002820:	4613      	mov	r3, r2
 8002822:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800282a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800282e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <ifx_i2c_prl_event_handler+0x36>
 800283c:	897b      	ldrh	r3, [r7, #10]
 800283e:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002842:	2b00      	cmp	r3, #0
 8002844:	d029      	beq.n	800289a <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	22ff      	movs	r2, #255	@ 0xff
 800284a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002854:	2b05      	cmp	r3, #5
 8002856:	d105      	bne.n	8002864 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f240 1207 	movw	r2, #263	@ 0x107
 800285e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002862:	e016      	b.n	8002892 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10d      	bne.n	800288a <ifx_i2c_prl_event_handler+0x7a>
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002874:	d009      	beq.n	800288a <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800287c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002888:	e003      	b.n	8002892 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	897a      	ldrh	r2, [r7, #10]
 800288e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2207      	movs	r2, #7
 8002896:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80028a0:	3b01      	subs	r3, #1
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	f200 8445 	bhi.w	8003132 <ifx_i2c_prl_event_handler+0x922>
 80028a8:	a201      	add	r2, pc, #4	@ (adr r2, 80028b0 <ifx_i2c_prl_event_handler+0xa0>)
 80028aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ae:	bf00      	nop
 80028b0:	080028d1 	.word	0x080028d1
 80028b4:	0800293f 	.word	0x0800293f
 80028b8:	08002d51 	.word	0x08002d51
 80028bc:	08002a7f 	.word	0x08002a7f
 80028c0:	08002983 	.word	0x08002983
 80028c4:	08002fe9 	.word	0x08002fe9
 80028c8:	08003103 	.word	0x08003103
 80028cc:	080028ed 	.word	0x080028ed
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 80028da:	2300      	movs	r3, #0
 80028dc:	2200      	movs	r2, #0
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	47a0      	blx	r4
                exit_machine = FALSE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80028e8:	f000 bc34 	b.w	8003154 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 80028ec:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 80028f0:	893a      	ldrh	r2, [r7, #8]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fd74 	bl	80023e2 <ifx_i2c_prl_do_manage_context>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002900:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8424 	beq.w	8003152 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	22ff      	movs	r2, #255	@ 0xff
 800290e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2207      	movs	r2, #7
 8002916:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002928:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 800293a:	f000 bc0a 	b.w	8003152 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002944:	b25b      	sxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	db09      	blt.n	800295e <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002950:	2b00      	cmp	r3, #0
 8002952:	d011      	beq.n	8002978 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2205      	movs	r2, #5
 8002962:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2211      	movs	r2, #17
 800296a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002976:	e3ed      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2204      	movs	r2, #4
 800297c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002980:	e3e8      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3308      	adds	r3, #8
 8002986:	2228      	movs	r2, #40	@ 0x28
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f009 fba0 	bl	800c0d0 <memset>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	2234      	movs	r2, #52	@ 0x34
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f009 fb83 	bl	800c0d0 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80029d0:	885b      	ldrh	r3, [r3, #2]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02e      	beq.n	8002a34 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80029dc:	885b      	ldrh	r3, [r3, #2]
 80029de:	f107 0110 	add.w	r1, r7, #16
 80029e2:	2234      	movs	r2, #52	@ 0x34
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fa29 	bl	8005e3c <pal_os_datastore_write>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 80029f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01d      	beq.n	8002a34 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	22ff      	movs	r2, #255	@ 0xff
 80029fc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2207      	movs	r2, #7
 8002a04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002a16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f240 1207 	movw	r2, #263	@ 0x107
 8002a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002a32:	e38f      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff fb37 	bl	80020aa <ifx_i2c_prl_do_handshake>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002a42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a46:	f240 1207 	movw	r2, #263	@ 0x107
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d109      	bne.n	8002a62 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002a54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002a60:	e378      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d104      	bne.n	8002a76 <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002a74:	e36e      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002a7c:	e36a      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	f043 0320 	orr.w	r3, r3, #32
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d006      	beq.n	8002ab6 <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002aae:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d122      	bne.n	8002afc <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	3301      	adds	r3, #1
 8002abc:	f113 0f10 	cmn.w	r3, #16
 8002ac0:	d914      	bls.n	8002aec <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2205      	movs	r2, #5
 8002ad8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002adc:	2301      	movs	r3, #1
 8002ade:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2211      	movs	r2, #17
 8002ae6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002aea:	e333      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	881a      	ldrh	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	320d      	adds	r2, #13
 8002af8:	b292      	uxth	r2, r2
 8002afa:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d007      	beq.n	8002b26 <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002b1c:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	f040 80c2 	bne.w	8002caa <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f113 0f10 	cmn.w	r3, #16
 8002b30:	d914      	bls.n	8002b5c <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10f      	bne.n	8002b5c <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2205      	movs	r2, #5
 8002b48:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2211      	movs	r2, #17
 8002b56:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002b5a:	e2fb      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d13f      	bne.n	8002be6 <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6a:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002b7a:	3305      	adds	r3, #5
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002b82:	9203      	str	r2, [sp, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	9202      	str	r2, [sp, #8]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	9201      	str	r2, [sp, #4]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4623      	mov	r3, r4
 8002b90:	4602      	mov	r2, r0
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff f9ea 	bl	8001f6c <ifx_i2c_prl_decrypt_msg>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002b9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002ba2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002ba6:	d118      	bne.n	8002bda <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	22ff      	movs	r2, #255	@ 0xff
 8002bac:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002bc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002bd8:	e2bc      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002be4:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	4619      	mov	r1, r3
 8002c04:	4610      	mov	r0, r2
 8002c06:	f002 fdb6 	bl	8005776 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002c0e:	1d59      	adds	r1, r3, #5
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4603      	mov	r3, r0
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff f960 	bl	8001eea <ifx_i2c_prl_encrypt_msg>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002c30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c34:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002c38:	d118      	bne.n	8002c6c <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	22ff      	movs	r2, #255	@ 0xff
 8002c3e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2207      	movs	r2, #7
 8002c46:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002c6a:	e273      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002c76:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8002c88:	4413      	add	r3, r2
 8002c8a:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa91 	bl	80031c4 <ifx_i2c_tl_transceive>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002ca8:	e021      	b.n	8002cee <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002cbe:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002cc4:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa6e 	bl	80031c4 <ifx_i2c_tl_transceive>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8002cee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cf2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002cf6:	d11d      	bne.n	8002d34 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	22ff      	movs	r2, #255	@ 0xff
 8002cfc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2207      	movs	r2, #7
 8002d04:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002d2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8002d32:	e20f      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2203      	movs	r2, #3
 8002d44:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002d4e:	e201      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	3301      	adds	r3, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 fd2e 	bl	80057b8 <optiga_common_get_uint32>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8002d62:	893b      	ldrh	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d118      	bne.n	8002d9a <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	22ff      	movs	r2, #255	@ 0xff
 8002d6c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2207      	movs	r2, #7
 8002d74:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002d98:	e1dc      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d040      	beq.n	8002e28 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d003      	beq.n	8002db6 <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002db2:	2b44      	cmp	r3, #68	@ 0x44
 8002db4:	d10c      	bne.n	8002dd0 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002db6:	893b      	ldrh	r3, [r7, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d004      	beq.n	8002dc6 <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d004      	beq.n	8002dd0 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d109      	bne.n	8002de4 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002dd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002de2:	e018      	b.n	8002e16 <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10e      	bne.n	8002e0c <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002df4:	2b11      	cmp	r3, #17
 8002df6:	d109      	bne.n	8002e0c <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e0a:	e004      	b.n	8002e16 <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002e12:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2206      	movs	r2, #6
 8002e1a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	22ff      	movs	r2, #255	@ 0xff
 8002e22:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8002e26:	e195      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	781a      	ldrb	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d018      	beq.n	8002e68 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	22ff      	movs	r2, #255	@ 0xff
 8002e3a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2207      	movs	r2, #7
 8002e42:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002e66:	e175      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d006      	beq.n	8002e82 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	f040 8082 	bne.w	8002f86 <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8002e82:	893b      	ldrh	r3, [r7, #8]
 8002e84:	2b0d      	cmp	r3, #13
 8002e86:	d818      	bhi.n	8002eba <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	22ff      	movs	r2, #255	@ 0xff
 8002e8c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2207      	movs	r2, #7
 8002e94:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002eb8:	e14c      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	3303      	adds	r3, #3
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d805      	bhi.n	8002ed4 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d818      	bhi.n	8002f06 <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	22ff      	movs	r2, #255	@ 0xff
 8002ed8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2207      	movs	r2, #7
 8002ee0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ef2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002f04:	e126      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	3a0d      	subs	r2, #13
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f28:	8818      	ldrh	r0, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f32:	3305      	adds	r3, #5
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002f3a:	9203      	str	r2, [sp, #12]
 8002f3c:	2224      	movs	r2, #36	@ 0x24
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	2210      	movs	r2, #16
 8002f42:	9201      	str	r2, [sp, #4]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	4623      	mov	r3, r4
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff f80e 	bl	8001f6c <ifx_i2c_prl_decrypt_msg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002f56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f5a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002f5e:	d108      	bne.n	8002f72 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2206      	movs	r2, #6
 8002f64:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8002f70:	e0f0      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002f82:	bf00      	nop
            break;
 8002f84:	e0e6      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 8002f86:	893b      	ldrh	r3, [r7, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d81c      	bhi.n	8002fc6 <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2207      	movs	r2, #7
 8002f90:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	22ff      	movs	r2, #255	@ 0xff
 8002f98:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002fac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 8002fb0:	e0d0      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002fc4:	e0c6      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	881a      	ldrh	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	3a01      	subs	r2, #1
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002fe6:	e0b5      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b44      	cmp	r3, #68	@ 0x44
 8002fee:	d166      	bne.n	80030be <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d104      	bne.n	8003000 <ifx_i2c_prl_event_handler+0x7f0>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d918      	bls.n	8003032 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	22ff      	movs	r2, #255	@ 0xff
 8003004:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2207      	movs	r2, #7
 800300c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800301e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800302a:	2301      	movs	r3, #1
 800302c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003030:	e090      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d004      	beq.n	8003046 <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003042:	2b03      	cmp	r3, #3
 8003044:	d136      	bne.n	80030b4 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 800304c:	3301      	adds	r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003064:	2b03      	cmp	r3, #3
 8003066:	d91c      	bls.n	80030a2 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	@ 0xff
 800306c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2207      	movs	r2, #7
 8003074:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003086:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003092:	2301      	movs	r3, #1
 8003094:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 80030a0:	e058      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2204      	movs	r2, #4
 80030a6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2204      	movs	r2, #4
 80030ae:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 80030b2:	e04f      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2207      	movs	r2, #7
 80030b8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80030bc:	e04a      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d117      	bne.n	80030f8 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	22ff      	movs	r2, #255	@ 0xff
 80030cc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2207      	movs	r2, #7
 80030d4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80030e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2207      	movs	r2, #7
 80030fc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003100:	e028      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003108:	2bff      	cmp	r3, #255	@ 0xff
 800310a:	d00d      	beq.n	8003128 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7fe ff75 	bl	8001ffc <ifx_i2c_prl_send_alert>
 8003112:	4603      	mov	r3, r0
 8003114:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	22ff      	movs	r2, #255	@ 0xff
 800311c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003126:	e015      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003130:	e010      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800313e:	2300      	movs	r3, #0
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	47a0      	blx	r4
                exit_machine = FALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003150:	e000      	b.n	8003154 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003152:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003154:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003158:	2b01      	cmp	r3, #1
 800315a:	f43f ab9e 	beq.w	800289a <ifx_i2c_prl_event_handler+0x8a>
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	374c      	adds	r7, #76	@ 0x4c
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800317a:	4911      	ldr	r1, [pc, #68]	@ (80031c0 <ifx_i2c_tl_init+0x58>)
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fd fc11 	bl	80009a4 <ifx_i2c_dl_init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003188:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800318c:	e014      	b.n	80031b8 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80031ac:	3b06      	subs	r3, #6
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	080034a9 	.word	0x080034a9

080031c4 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80031d4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80031d8:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d041      	beq.n	8003264 <ifx_i2c_tl_transceive+0xa0>
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d03e      	beq.n	8003264 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d138      	bne.n	8003262 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 80031f8:	f003 f819 	bl	800622e <pal_os_timer_get_time_in_milliseconds>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a3a      	ldr	r2, [r7, #32]
 8003228:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003252:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f866 	bl	8003328 <ifx_i2c_tl_send_next_fragment>
 800325c:	4603      	mov	r3, r0
 800325e:	82fb      	strh	r3, [r7, #22]
 8003260:	e000      	b.n	8003264 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003262:	bf00      	nop
    } while (FALSE);
    return (status);
 8003264:	8afb      	ldrh	r3, [r7, #22]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800327c:	2b01      	cmp	r3, #1
 800327e:	d002      	beq.n	8003286 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003280:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003284:	e00f      	b.n	80032a6 <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f842 	bl	8003328 <ifx_i2c_tl_send_next_fragment>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80032bc:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <ifx_i2c_tl_calculate_pctr+0x38>
 80032d8:	897a      	ldrh	r2, [r7, #10]
 80032da:	89bb      	ldrh	r3, [r7, #12]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d802      	bhi.n	80032e6 <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e019      	b.n	800331a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <ifx_i2c_tl_calculate_pctr+0x50>
 80032f0:	897a      	ldrh	r2, [r7, #10]
 80032f2:	89bb      	ldrh	r3, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d902      	bls.n	80032fe <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
 80032fc:	e00d      	b.n	800331a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <ifx_i2c_tl_calculate_pctr+0x68>
 8003308:	897a      	ldrh	r2, [r7, #10]
 800330a:	89bb      	ldrh	r3, [r7, #12]
 800330c:	429a      	cmp	r2, r3
 800330e:	d902      	bls.n	8003316 <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003310:	2302      	movs	r3, #2
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e001      	b.n	800331a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8003316:	2304      	movs	r3, #4
 8003318:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003336:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff ffb8 	bl	80032ae <ifx_i2c_tl_calculate_pctr>
 800333e:	4603      	mov	r3, r0
 8003340:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003350:	1ad2      	subs	r2, r2, r3
 8003352:	89fb      	ldrh	r3, [r7, #14]
 8003354:	429a      	cmp	r2, r3
 8003356:	da07      	bge.n	8003368 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003368:	7b7b      	ldrb	r3, [r7, #13]
 800336a:	f043 0308 	orr.w	r3, r3, #8
 800336e:	b2da      	uxtb	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 800337c:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800338a:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800338c:	89fa      	ldrh	r2, [r7, #14]
 800338e:	4619      	mov	r1, r3
 8003390:	f008 fee3 	bl	800c15a <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	4413      	add	r3, r2
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	3301      	adds	r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fb36 	bl	8000a20 <ifx_i2c_dl_send_frame>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2207      	movs	r2, #7
 80033ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80033da:	89fb      	ldrh	r3, [r7, #14]
 80033dc:	4619      	mov	r1, r3
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fb1e 	bl	8000a20 <ifx_i2c_dl_send_frame>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	460a      	mov	r2, r1
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	4613      	mov	r3, r2
 80033fe:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003400:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003404:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b07      	cmp	r3, #7
 800340a:	d00b      	beq.n	8003424 <ifx_i2c_tl_check_chaining_error+0x34>
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <ifx_i2c_tl_check_chaining_error+0x34>
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d005      	beq.n	8003424 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d002      	beq.n	8003424 <ifx_i2c_tl_check_chaining_error+0x34>
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d110      	bne.n	8003446 <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	4a0b      	ldr	r2, [pc, #44]	@ (8003454 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003428:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800342c:	79ba      	ldrb	r2, [r7, #6]
 800342e:	429a      	cmp	r2, r3
 8003430:	d007      	beq.n	8003442 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	4a07      	ldr	r2, [pc, #28]	@ (8003454 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800343c:	79ba      	ldrb	r2, [r7, #6]
 800343e:	429a      	cmp	r2, r3
 8003440:	d101      	bne.n	8003446 <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003442:	2300      	movs	r3, #0
 8003444:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003446:	89fb      	ldrh	r3, [r7, #14]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	0800ce80 	.word	0x0800ce80

08003458 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003464:	2300      	movs	r3, #0
 8003466:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f023 0307 	bic.w	r3, r3, #7
 800346e:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <presence_bit_check+0x42>
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	2b00      	cmp	r3, #0
 8003482:	d004      	beq.n	800348e <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800348e:	7b7b      	ldrb	r3, [r7, #13]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d002      	beq.n	800349a <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 8003494:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003498:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 800349a:	89fb      	ldrh	r3, [r7, #14]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	461a      	mov	r2, r3
 80034b4:	460b      	mov	r3, r1
 80034b6:	817b      	strh	r3, [r7, #10]
 80034b8:	4613      	mov	r3, r2
 80034ba:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80034dc:	897b      	ldrh	r3, [r7, #10]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2206      	movs	r2, #6
 80034ea:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80034f4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 80034f8:	893b      	ldrh	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	4619      	mov	r1, r3
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff ffa8 	bl	8003458 <presence_bit_check>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2206      	movs	r2, #6
 8003512:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800351c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800352e:	3b01      	subs	r3, #1
 8003530:	2b07      	cmp	r3, #7
 8003532:	f200 81d0 	bhi.w	80038d6 <ifx_i2c_dl_event_handler+0x42e>
 8003536:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <ifx_i2c_dl_event_handler+0x94>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800355d 	.word	0x0800355d
 8003540:	08003573 	.word	0x08003573
 8003544:	080038d7 	.word	0x080038d7
 8003548:	08003609 	.word	0x08003609
 800354c:	0800374f 	.word	0x0800374f
 8003550:	080038a5 	.word	0x080038a5
 8003554:	08003863 	.word	0x08003863
 8003558:	08003807 	.word	0x08003807
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003566:	2300      	movs	r3, #0
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	47a0      	blx	r4
            }
            break;
 8003570:	e1c3      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d040      	beq.n	80035fe <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003588:	429a      	cmp	r2, r3
 800358a:	d215      	bcs.n	80035b8 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800358c:	7dbb      	ldrb	r3, [r7, #22]
 800358e:	2b07      	cmp	r3, #7
 8003590:	d104      	bne.n	800359c <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2208      	movs	r2, #8
 8003596:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 800359a:	e1ae      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2206      	movs	r2, #6
 80035a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80035aa:	e1a6      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff feb9 	bl	8003328 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 80035b6:	e19f      	b.n	80038f8 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2204      	movs	r2, #4
 80035bc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80035d8:	897b      	ldrh	r3, [r7, #10]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 818a 	bne.w	80038f8 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7fd fa4b 	bl	8000a80 <ifx_i2c_dl_receive_frame>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2206      	movs	r2, #6
 80035f4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 80035f8:	2300      	movs	r3, #0
 80035fa:	757b      	strb	r3, [r7, #21]
            break;
 80035fc:	e17c      	b.n	80038f8 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2206      	movs	r2, #6
 8003602:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003606:	e178      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003608:	897b      	ldrh	r3, [r7, #10]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8098 	beq.w	8003744 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003614:	893b      	ldrh	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2206      	movs	r2, #6
 800361e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003622:	e16a      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 800362a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800362e:	d114      	bne.n	800365a <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003630:	7dbb      	ldrb	r3, [r7, #22]
 8003632:	2b04      	cmp	r3, #4
 8003634:	d005      	beq.n	8003642 <ifx_i2c_dl_event_handler+0x19a>
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7fd fa22 	bl	8000a80 <ifx_i2c_dl_receive_frame>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2206      	movs	r2, #6
 8003646:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 800364a:	e156      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2204      	movs	r2, #4
 8003650:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003654:	2300      	movs	r3, #0
 8003656:	757b      	strb	r3, [r7, #21]
                        break;
 8003658:	e14f      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003660:	7dbb      	ldrb	r3, [r7, #22]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fec3 	bl	80033f0 <ifx_i2c_tl_check_chaining_error>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d004      	beq.n	800367a <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2208      	movs	r2, #8
 8003674:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003678:	e13f      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 800367a:	7dbb      	ldrb	r3, [r7, #22]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	b2da      	uxtb	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2206      	movs	r2, #6
 8003692:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003696:	e130      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003698:	7dbb      	ldrb	r3, [r7, #22]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <ifx_i2c_dl_event_handler+0x1fc>
 800369e:	7dbb      	ldrb	r3, [r7, #22]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d14a      	bne.n	800373a <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80036aa:	461a      	mov	r2, r3
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	4413      	add	r3, r2
 80036b0:	3b01      	subs	r3, #1
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 80036b8:	8812      	ldrh	r2, [r2, #0]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	dd09      	ble.n	80036d2 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036c4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2206      	movs	r2, #6
 80036cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80036d0:	e113      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80036e2:	1898      	adds	r0, r3, r2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	461a      	mov	r2, r3
 80036ee:	f008 fd34 	bl	800c15a <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 80036f8:	893b      	ldrh	r3, [r7, #8]
 80036fa:	4413      	add	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 800371c:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	2100      	movs	r1, #0
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003738:	e0df      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2205      	movs	r2, #5
 800373e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003742:	e0da      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2206      	movs	r2, #6
 8003748:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800374c:	e0d5      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 800374e:	893a      	ldrh	r2, [r7, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003756:	3301      	adds	r3, #1
 8003758:	429a      	cmp	r2, r3
 800375a:	d004      	beq.n	8003766 <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2207      	movs	r2, #7
 8003760:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003764:	e0c9      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800376c:	461a      	mov	r2, r3
 800376e:	893b      	ldrh	r3, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	3b01      	subs	r3, #1
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	4293      	cmp	r3, r2
 800377e:	dd09      	ble.n	8003794 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003786:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2204      	movs	r2, #4
 800378e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003792:	e0b2      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2206      	movs	r2, #6
 800379e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80037a2:	e0aa      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80037b0:	1898      	adds	r0, r3, r2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1c59      	adds	r1, r3, #1
 80037b6:	893b      	ldrh	r3, [r7, #8]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	461a      	mov	r2, r3
 80037bc:	f008 fccd 	bl	800c15a <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2204      	movs	r2, #4
 80037e8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7fd f947 	bl	8000a80 <ifx_i2c_dl_receive_frame>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2206      	movs	r2, #6
 80037fc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003800:	2300      	movs	r3, #0
 8003802:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003804:	e079      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003806:	893b      	ldrh	r3, [r7, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d909      	bls.n	8003820 <ifx_i2c_dl_event_handler+0x378>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003812:	2b01      	cmp	r3, #1
 8003814:	d104      	bne.n	8003820 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2207      	movs	r2, #7
 800381a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800381e:	e06c      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	b2d1      	uxtb	r1, r2
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7ff fd16 	bl	800326e <ifx_i2c_tl_resend_packets>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2206      	movs	r2, #6
 800384c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003850:	e053      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	757b      	strb	r3, [r7, #21]
            break;
 8003856:	e050      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2206      	movs	r2, #6
 800385c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003860:	e04b      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	b2d1      	uxtb	r1, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff fd9d 	bl	80033be <ifx_i2c_tl_send_chaining_error>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2206      	movs	r2, #6
 800388e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003892:	e032      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003894:	2300      	movs	r3, #0
 8003896:	757b      	strb	r3, [r7, #21]
            break;
 8003898:	e02f      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2206      	movs	r2, #6
 800389e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 80038a2:	e02a      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d102      	bne.n	80038b8 <ifx_i2c_dl_event_handler+0x410>
 80038b2:	893b      	ldrh	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80038cc:	2300      	movs	r3, #0
 80038ce:	2200      	movs	r2, #0
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	47a0      	blx	r4
            }
            break;
 80038d4:	e011      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80038ee:	2300      	movs	r3, #0
 80038f0:	2200      	movs	r2, #0
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	47a0      	blx	r4
            }
            break;
 80038f6:	e000      	b.n	80038fa <ifx_i2c_dl_event_handler+0x452>
            break;
 80038f8:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 80038fa:	7d7b      	ldrb	r3, [r7, #21]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	f43f ade3 	beq.w	80034c8 <ifx_i2c_dl_event_handler+0x20>
}
 8003902:	bf00      	nop
 8003904:	bf00      	nop
 8003906:	371c      	adds	r7, #28
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}

0800390c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003914:	1d39      	adds	r1, r7, #4
 8003916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800391a:	2201      	movs	r2, #1
 800391c:	4803      	ldr	r0, [pc, #12]	@ (800392c <__io_putchar+0x20>)
 800391e:	f007 f9fb 	bl	800ad18 <HAL_UART_Transmit>
    return ch;
 8003922:	687b      	ldr	r3, [r7, #4]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000694 	.word	0x20000694

08003930 <optiga_util_callback>:
extern pal_i2c_t optiga_pal_i2c_context_0;
static volatile optiga_lib_status_t optiga_lib_status = OPTIGA_LIB_SUCCESS;

// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 800393c:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <optiga_util_callback+0x20>)
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	8013      	strh	r3, [r2, #0]
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	200006dc 	.word	0x200006dc

08003954 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003964:	d101      	bne.n	800396a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8003966:	f002 fbfb 	bl	8006160 <pal_os_event_timer_tick>
    }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <optiga_main_logic>:
void optiga_main_logic(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 800397e:	f240 3302 	movw	r3, #770	@ 0x302
 8003982:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003984:	2200      	movs	r2, #0
 8003986:	4925      	ldr	r1, [pc, #148]	@ (8003a1c <optiga_main_logic+0xa8>)
 8003988:	2000      	movs	r0, #0
 800398a:	f001 fff3 	bl	8005974 <optiga_util_create>
 800398e:	6078      	str	r0, [r7, #4]
    if (!me_util)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 8003996:	4822      	ldr	r0, [pc, #136]	@ (8003a20 <optiga_main_logic+0xac>)
 8003998:	f008 fb82 	bl	800c0a0 <puts>
        return;
 800399c:	e03a      	b.n	8003a14 <optiga_main_logic+0xa0>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800399e:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <optiga_main_logic+0xb0>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 80039a4:	2100      	movs	r1, #0
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f002 f848 	bl	8005a3c <optiga_util_open_application>
 80039ac:	4603      	mov	r3, r0
 80039ae:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 80039b6:	481c      	ldr	r0, [pc, #112]	@ (8003a28 <optiga_main_logic+0xb4>)
 80039b8:	f008 fb72 	bl	800c0a0 <puts>
            continue;
 80039bc:	e029      	b.n	8003a12 <optiga_main_logic+0x9e>
        }
        HAL_Delay(100);
 80039be:	2064      	movs	r0, #100	@ 0x64
 80039c0:	f002 fee8 	bl	8006794 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80039c4:	e001      	b.n	80039ca <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 80039c6:	f002 fba9 	bl	800611c <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80039ca:	4b16      	ldr	r3, [pc, #88]	@ (8003a24 <optiga_main_logic+0xb0>)
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d0f8      	beq.n	80039c6 <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	f002 fedd 	bl	8006794 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <optiga_main_logic+0xb0>)
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <optiga_main_logic+0x88>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 80039e4:	4811      	ldr	r0, [pc, #68]	@ (8003a2c <optiga_main_logic+0xb8>)
 80039e6:	f008 fb5b 	bl	800c0a0 <puts>
            break;
 80039ea:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Turn ON LED if you want
 80039ec:	2201      	movs	r2, #1
 80039ee:	2120      	movs	r1, #32
 80039f0:	480f      	ldr	r0, [pc, #60]	@ (8003a30 <optiga_main_logic+0xbc>)
 80039f2:	f003 fa29 	bl	8006e48 <HAL_GPIO_WritePin>

    example_optiga_util_write_data();
 80039f6:	f7fc fdcd 	bl	8000594 <example_optiga_util_write_data>
 80039fa:	e00b      	b.n	8003a14 <optiga_main_logic+0xa0>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <optiga_main_logic+0xb0>)
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	480b      	ldr	r0, [pc, #44]	@ (8003a34 <optiga_main_logic+0xc0>)
 8003a06:	f008 fae3 	bl	800bfd0 <iprintf>
            HAL_Delay(2000);
 8003a0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a0e:	f002 fec1 	bl	8006794 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 8003a12:	e7c4      	b.n	800399e <optiga_main_logic+0x2a>
//    {
//        pal_os_event_trigger_registered_callback();
//    }
//
//    optiga_util_destroy(me_util);
}
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08003931 	.word	0x08003931
 8003a20:	0800cd30 	.word	0x0800cd30
 8003a24:	200006dc 	.word	0x200006dc
 8003a28:	0800cd58 	.word	0x0800cd58
 8003a2c:	0800cd98 	.word	0x0800cd98
 8003a30:	40020000 	.word	0x40020000
 8003a34:	0800cdc4 	.word	0x0800cdc4

08003a38 <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8003a40:	4811      	ldr	r0, [pc, #68]	@ (8003a88 <I2C_Scan+0x50>)
 8003a42:	f008 fb2d 	bl	800c0a0 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	e013      	b.n	8003a74 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	b299      	uxth	r1, r3
 8003a54:	230a      	movs	r3, #10
 8003a56:	2201      	movs	r2, #1
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f003 febd 	bl	80077d8 <HAL_I2C_IsDeviceReady>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d104      	bne.n	8003a6e <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	4619      	mov	r1, r3
 8003a68:	4808      	ldr	r0, [pc, #32]	@ (8003a8c <I2C_Scan+0x54>)
 8003a6a:	f008 fab1 	bl	800bfd0 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	3301      	adds	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dae7      	bge.n	8003a4c <I2C_Scan+0x14>
        }
    }
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	0800cdf4 	.word	0x0800cdf4
 8003a8c:	0800ce08 	.word	0x0800ce08

08003a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a94:	f002 fe0c 	bl	80066b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a98:	f000 f84c 	bl	8003b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a9c:	f000 f966 	bl	8003d6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003aa0:	f000 f93a 	bl	8003d18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003aa4:	f000 f8be 	bl	8003c24 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003aa8:	f000 f8ea 	bl	8003c80 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003aac:	f000 f8ae 	bl	8003c0c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003ab0:	4819      	ldr	r0, [pc, #100]	@ (8003b18 <main+0x88>)
 8003ab2:	f006 fcfd 	bl	800a4b0 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2100      	movs	r1, #0
 8003aba:	201c      	movs	r0, #28
 8003abc:	f002 ff69 	bl	8006992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ac0:	201c      	movs	r0, #28
 8003ac2:	f002 ff82 	bl	80069ca <HAL_NVIC_EnableIRQ>

  HAL_Delay(1000);
 8003ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003aca:	f002 fe63 	bl	8006794 <HAL_Delay>
      printf("Powering ON OPTIGA Trust M...\r\n");
 8003ace:	4813      	ldr	r0, [pc, #76]	@ (8003b1c <main+0x8c>)
 8003ad0:	f008 fae6 	bl	800c0a0 <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 8003ad4:	4812      	ldr	r0, [pc, #72]	@ (8003b20 <main+0x90>)
 8003ad6:	f002 f8ad 	bl	8005c34 <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 8003ada:	4812      	ldr	r0, [pc, #72]	@ (8003b24 <main+0x94>)
 8003adc:	f008 fae0 	bl	800c0a0 <puts>
      pal_gpio_set_low(&optiga_reset_0);
 8003ae0:	4811      	ldr	r0, [pc, #68]	@ (8003b28 <main+0x98>)
 8003ae2:	f002 f8b7 	bl	8005c54 <pal_gpio_set_low>
      HAL_Delay(10);
 8003ae6:	200a      	movs	r0, #10
 8003ae8:	f002 fe54 	bl	8006794 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 8003aec:	480e      	ldr	r0, [pc, #56]	@ (8003b28 <main+0x98>)
 8003aee:	f002 f8a1 	bl	8005c34 <pal_gpio_set_high>
      HAL_Delay(10);
 8003af2:	200a      	movs	r0, #10
 8003af4:	f002 fe4e 	bl	8006794 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 8003af8:	480c      	ldr	r0, [pc, #48]	@ (8003b2c <main+0x9c>)
 8003afa:	f7ff ff9d 	bl	8003a38 <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 8003afe:	480c      	ldr	r0, [pc, #48]	@ (8003b30 <main+0xa0>)
 8003b00:	f008 face 	bl	800c0a0 <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 8003b04:	2064      	movs	r0, #100	@ 0x64
 8003b06:	f002 fe45 	bl	8006794 <HAL_Delay>
      optiga_main_logic();
 8003b0a:	f7ff ff33 	bl	8003974 <optiga_main_logic>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8003b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003b12:	f002 fe3f 	bl	8006794 <HAL_Delay>
 8003b16:	e7fa      	b.n	8003b0e <main+0x7e>
 8003b18:	2000064c 	.word	0x2000064c
 8003b1c:	0800ce24 	.word	0x0800ce24
 8003b20:	2000051c 	.word	0x2000051c
 8003b24:	0800ce44 	.word	0x0800ce44
 8003b28:	20000524 	.word	0x20000524
 8003b2c:	200005f8 	.word	0x200005f8
 8003b30:	0800ce5c 	.word	0x0800ce5c

08003b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b094      	sub	sp, #80	@ 0x50
 8003b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b3a:	f107 0320 	add.w	r3, r7, #32
 8003b3e:	2230      	movs	r2, #48	@ 0x30
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f008 fac4 	bl	800c0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	4b29      	ldr	r3, [pc, #164]	@ (8003c04 <SystemClock_Config+0xd0>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	4a28      	ldr	r2, [pc, #160]	@ (8003c04 <SystemClock_Config+0xd0>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b68:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <SystemClock_Config+0xd0>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b74:	2300      	movs	r3, #0
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	4b23      	ldr	r3, [pc, #140]	@ (8003c08 <SystemClock_Config+0xd4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003b80:	4a21      	ldr	r2, [pc, #132]	@ (8003c08 <SystemClock_Config+0xd4>)
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <SystemClock_Config+0xd4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b94:	2302      	movs	r3, #2
 8003b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003ba8:	2310      	movs	r3, #16
 8003baa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003bac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bba:	f107 0320 	add.w	r3, r7, #32
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f005 ff8e 	bl	8009ae0 <HAL_RCC_OscConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003bca:	f000 f947 	bl	8003e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bce:	230f      	movs	r3, #15
 8003bd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f006 f9f0 	bl	8009fd0 <HAL_RCC_ClockConfig>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003bf6:	f000 f931 	bl	8003e5c <Error_Handler>
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3750      	adds	r7, #80	@ 0x50
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000

08003c0c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	201f      	movs	r0, #31
 8003c16:	f002 febc 	bl	8006992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c1a:	201f      	movs	r0, #31
 8003c1c:	f002 fed5 	bl	80069ca <HAL_NVIC_EnableIRQ>
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c28:	4b12      	ldr	r3, [pc, #72]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c2a:	4a13      	ldr	r2, [pc, #76]	@ (8003c78 <MX_I2C1_Init+0x54>)
 8003c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c30:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <MX_I2C1_Init+0x58>)
 8003c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c60:	4804      	ldr	r0, [pc, #16]	@ (8003c74 <MX_I2C1_Init+0x50>)
 8003c62:	f003 f92f 	bl	8006ec4 <HAL_I2C_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c6c:	f000 f8f6 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	200005f8 	.word	0x200005f8
 8003c78:	40005400 	.word	0x40005400
 8003c7c:	00061a80 	.word	0x00061a80

08003c80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c94:	463b      	mov	r3, r7
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003c9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ca2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003ca6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cac:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8003cb2:	4b18      	ldr	r3, [pc, #96]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003cb4:	2209      	movs	r2, #9
 8003cb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb8:	4b16      	ldr	r3, [pc, #88]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003cc4:	4813      	ldr	r0, [pc, #76]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003cc6:	f006 fba3 	bl	800a410 <HAL_TIM_Base_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003cd0:	f000 f8c4 	bl	8003e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cda:	f107 0308 	add.w	r3, r7, #8
 8003cde:	4619      	mov	r1, r3
 8003ce0:	480c      	ldr	r0, [pc, #48]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003ce2:	f006 fd37 	bl	800a754 <HAL_TIM_ConfigClockSource>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003cec:	f000 f8b6 	bl	8003e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4805      	ldr	r0, [pc, #20]	@ (8003d14 <MX_TIM2_Init+0x94>)
 8003cfe:	f006 ff39 	bl	800ab74 <HAL_TIMEx_MasterConfigSynchronization>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003d08:	f000 f8a8 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003d0c:	bf00      	nop
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	2000064c 	.word	0x2000064c

08003d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d1e:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <MX_USART2_UART_Init+0x50>)
 8003d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d30:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d3e:	220c      	movs	r2, #12
 8003d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d42:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d4e:	4805      	ldr	r0, [pc, #20]	@ (8003d64 <MX_USART2_UART_Init+0x4c>)
 8003d50:	f006 ff92 	bl	800ac78 <HAL_UART_Init>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d5a:	f000 f87f 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000694 	.word	0x20000694
 8003d68:	40004400 	.word	0x40004400

08003d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d72:	f107 0314 	add.w	r3, r7, #20
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	4b32      	ldr	r3, [pc, #200]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	4a31      	ldr	r2, [pc, #196]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d92:	4b2f      	ldr	r3, [pc, #188]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dae:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	4a23      	ldr	r2, [pc, #140]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dca:	4b21      	ldr	r3, [pc, #132]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <MX_GPIO_Init+0xe4>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8003df8:	4816      	ldr	r0, [pc, #88]	@ (8003e54 <MX_GPIO_Init+0xe8>)
 8003dfa:	f003 f825 	bl	8006e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4619      	mov	r1, r3
 8003e14:	4810      	ldr	r0, [pc, #64]	@ (8003e58 <MX_GPIO_Init+0xec>)
 8003e16:	f002 fe93 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 8003e1a:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8003e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e20:	2301      	movs	r3, #1
 8003e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4619      	mov	r1, r3
 8003e32:	4808      	ldr	r0, [pc, #32]	@ (8003e54 <MX_GPIO_Init+0xe8>)
 8003e34:	f002 fe84 	bl	8006b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	2028      	movs	r0, #40	@ 0x28
 8003e3e:	f002 fda8 	bl	8006992 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e42:	2028      	movs	r0, #40	@ 0x28
 8003e44:	f002 fdc1 	bl	80069ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e48:	bf00      	nop
 8003e4a:	3728      	adds	r7, #40	@ 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40020800 	.word	0x40020800

08003e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
}
 8003e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <Error_Handler+0x8>

08003e68 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8003e78:	78bb      	ldrb	r3, [r7, #2]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d00e      	beq.n	8003e9c <optiga_cmd_set_shielded_connection_option+0x34>
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	dc10      	bgt.n	8003ea4 <optiga_cmd_set_shielded_connection_option+0x3c>
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <optiga_cmd_set_shielded_connection_option+0x24>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d004      	beq.n	8003e94 <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 8003e8a:	e00b      	b.n	8003ea4 <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	769a      	strb	r2, [r3, #26]
        break;
 8003e92:	e008      	b.n	8003ea6 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	76da      	strb	r2, [r3, #27]
        break;
 8003e9a:	e004      	b.n	8003ea6 <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	771a      	strb	r2, [r3, #28]
        break;
 8003ea2:	e000      	b.n	8003ea6 <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 8003ea4:	bf00      	nop
    }
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4603      	mov	r3, r0
 8003ebc:	71fb      	strb	r3, [r7, #7]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	71bb      	strb	r3, [r7, #6]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	79fa      	ldrb	r2, [r7, #7]
 8003eca:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	79ba      	ldrb	r2, [r7, #6]
 8003ed2:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8003ed4:	88bb      	ldrh	r3, [r7, #4]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	3302      	adds	r3, #2
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	3303      	adds	r3, #3
 8003ee6:	88ba      	ldrh	r2, [r7, #4]
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <optiga_cmd_event_trigger_execute>:
    *position = start_position;
}


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8003f00:	2100      	movs	r1, #0
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 ff6e 	bl	8004de4 <optiga_cmd_execute_handler>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	72fb      	strb	r3, [r7, #11]
 8003f20:	4613      	mov	r3, r2
 8003f22:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	7aba      	ldrb	r2, [r7, #10]
 8003f2e:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	7e3a      	ldrb	r2, [r7, #24]
 8003f34:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	7afa      	ldrb	r2, [r7, #11]
 8003f46:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8c3a      	ldrh	r2, [r7, #32]
 8003f4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8003f4e:	2100      	movs	r1, #0
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 ff47 	bl	8004de4 <optiga_cmd_execute_handler>
}
 8003f56:	bf00      	nop
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b084      	sub	sp, #16
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fc24 	bl	80057b8 <optiga_common_get_uint32>
 8003f70:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 8003f78:	d201      	bcs.n	8003f7e <optiga_cmd_session_available+0x20>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <optiga_cmd_session_available+0x22>
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8a9b      	ldrh	r3, [r3, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11d      	bne.n	8003fdc <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e017      	b.n	8003fd6 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4413      	add	r3, r2
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d00e      	beq.n	8003fd0 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	b21a      	sxth	r2, r3
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <optiga_cmd_session_assign+0x60>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	b21b      	sxth	r3, r3
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	2210      	movs	r2, #16
 8003fca:	701a      	strb	r2, [r3, #0]
                break;
 8003fcc:	bf00      	nop
            }
        }
    }
}
 8003fce:	e005      	b.n	8003fdc <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9e4      	bls.n	8003fa6 <optiga_cmd_session_assign+0x1e>
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	ffffe100 	.word	0xffffe100

08003fec <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8a9b      	ldrh	r3, [r3, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8a9b      	ldrh	r3, [r3, #20]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
    }
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
 8004038:	4613      	mov	r3, r2
 800403a:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
 8004048:	e027      	b.n	800409a <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 800404a:	78fb      	ldrb	r3, [r7, #3]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d002      	beq.n	8004056 <optiga_cmd_queue_get_count_of+0x2a>
 8004050:	2b09      	cmp	r3, #9
 8004052:	d00c      	beq.n	800406e <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 8004054:	e017      	b.n	8004086 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	737b      	strb	r3, [r7, #13]
            break;
 800406c:	e00b      	b.n	8004086 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	737b      	strb	r3, [r7, #13]
            break;
 8004084:	bf00      	nop
        }
        if (state_to_check == slot_value)
 8004086:	78ba      	ldrb	r2, [r7, #2]
 8004088:	7b7b      	ldrb	r3, [r7, #13]
 800408a:	429a      	cmp	r2, r3
 800408c:	d102      	bne.n	8004094 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 800408e:	7bbb      	ldrb	r3, [r7, #14]
 8004090:	3301      	adds	r3, #1
 8004092:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	3301      	adds	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	2b05      	cmp	r3, #5
 800409e:	d9d4      	bls.n	800404a <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	e01f      	b.n	80040fe <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10f      	bne.n	80040f8 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
           break;
 80040f6:	e006      	b.n	8004106 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	3301      	adds	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d9dc      	bls.n	80040be <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7f9b      	ldrb	r3, [r3, #30]
 8004122:	4619      	mov	r1, r3
 8004124:	460b      	mov	r3, r1
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	440b      	add	r3, r1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	7f9b      	ldrb	r3, [r3, #30]
 800413e:	4619      	mov	r1, r3
 8004140:	460b      	mov	r3, r1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	440b      	add	r3, r1
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	779a      	strb	r2, [r3, #30]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004170:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 8004172:	23ff      	movs	r3, #255	@ 0xff
 8004174:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004184:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004186:	2202      	movs	r2, #2
 8004188:	2109      	movs	r1, #9
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff ff4e 	bl	800402c <optiga_cmd_queue_get_count_of>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004196:	2208      	movs	r2, #8
 8004198:	2109      	movs	r1, #9
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	f7ff ff46 	bl	800402c <optiga_cmd_queue_get_count_of>
 80041a0:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00f      	beq.n	80041c6 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80041a6:	2204      	movs	r2, #4
 80041a8:	2109      	movs	r1, #9
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f7ff ff3e 	bl	800402c <optiga_cmd_queue_get_count_of>
 80041b0:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10f      	bne.n	80041d6 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 80041b6:	2223      	movs	r2, #35	@ 0x23
 80041b8:	2108      	movs	r1, #8
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff36 	bl	800402c <optiga_cmd_queue_get_count_of>
 80041c0:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80041c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	496d      	ldr	r1, [pc, #436]	@ (8004384 <optiga_cmd_queue_scheduler+0x220>)
 80041ce:	6938      	ldr	r0, [r7, #16]
 80041d0:	f001 ff78 	bl	80060c4 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 80041d4:	e0d2      	b.n	800437c <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 80041d6:	6938      	ldr	r0, [r7, #16]
 80041d8:	f001 ff4e 	bl	8006078 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 80041dc:	7e7b      	ldrb	r3, [r7, #25]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d105      	bne.n	80041ee <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	76fb      	strb	r3, [r7, #27]
 80041f2:	e05b      	b.n	80042ac <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 80041f4:	7efa      	ldrb	r2, [r7, #27]
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004208:	2208      	movs	r2, #8
 800420a:	2109      	movs	r1, #9
 800420c:	6978      	ldr	r0, [r7, #20]
 800420e:	f7ff ff0d 	bl	800402c <optiga_cmd_queue_get_count_of>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d10d      	bne.n	8004234 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	7a5b      	ldrb	r3, [r3, #9]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d142      	bne.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004224:	2b23      	cmp	r3, #35	@ 0x23
 8004226:	d13e      	bne.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 800422e:	7efb      	ldrb	r3, [r7, #27]
 8004230:	76bb      	strb	r3, [r7, #26]
 8004232:	e038      	b.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	7a5b      	ldrb	r3, [r3, #9]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d134      	bne.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004246:	429a      	cmp	r2, r3
 8004248:	d201      	bcs.n	800424e <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	429a      	cmp	r2, r3
 8004256:	d326      	bcc.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004262:	429a      	cmp	r2, r3
 8004264:	d31f      	bcc.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 800426a:	2b22      	cmp	r3, #34	@ 0x22
 800426c:	d105      	bne.n	800427a <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff fe75 	bl	8003f5e <optiga_cmd_session_available>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d010      	beq.n	800429c <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800427e:	2b22      	cmp	r3, #34	@ 0x22
 8004280:	d104      	bne.n	800428c <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	8a9b      	ldrh	r3, [r3, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d107      	bne.n	800429c <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004290:	2b21      	cmp	r3, #33	@ 0x21
 8004292:	d003      	beq.n	800429c <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004298:	2b23      	cmp	r3, #35	@ 0x23
 800429a:	d104      	bne.n	80042a6 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 80042a2:	7efb      	ldrb	r3, [r7, #27]
 80042a4:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80042a6:	7efb      	ldrb	r3, [r7, #27]
 80042a8:	3301      	adds	r3, #1
 80042aa:	76fb      	strb	r3, [r7, #27]
 80042ac:	7efb      	ldrb	r3, [r7, #27]
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d9a0      	bls.n	80041f4 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 80042b2:	7ebb      	ldrb	r3, [r7, #26]
 80042b4:	2bff      	cmp	r3, #255	@ 0xff
 80042b6:	d102      	bne.n	80042be <optiga_cmd_queue_scheduler+0x15a>
 80042b8:	7e7b      	ldrb	r3, [r7, #25]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d08e      	beq.n	80041dc <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 80042be:	7ebb      	ldrb	r3, [r7, #26]
 80042c0:	2bff      	cmp	r3, #255	@ 0xff
 80042c2:	d054      	beq.n	800436e <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 80042c4:	7eba      	ldrb	r2, [r7, #26]
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4413      	add	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80042d8:	7eba      	ldrb	r2, [r7, #26]
 80042da:	6979      	ldr	r1, [r7, #20]
 80042dc:	4613      	mov	r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b22      	cmp	r3, #34	@ 0x22
 80042ee:	d111      	bne.n	8004314 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10c      	bne.n	8004314 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 80042fa:	7eba      	ldrb	r2, [r7, #26]
 80042fc:	6979      	ldr	r1, [r7, #20]
 80042fe:	4613      	mov	r3, r2
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe3a 	bl	8003f88 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8004314:	7eba      	ldrb	r2, [r7, #26]
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800432e:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8004330:	7eba      	ldrb	r2, [r7, #26]
 8004332:	6979      	ldr	r1, [r7, #20]
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2332      	movs	r3, #50	@ 0x32
 8004346:	4910      	ldr	r1, [pc, #64]	@ (8004388 <optiga_cmd_queue_scheduler+0x224>)
 8004348:	6938      	ldr	r0, [r7, #16]
 800434a:	f001 febb 	bl	80060c4 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 800434e:	7eba      	ldrb	r2, [r7, #26]
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	4613      	mov	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004360:	2204      	movs	r2, #4
 8004362:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 800436c:	e006      	b.n	800437c <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 800436e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4903      	ldr	r1, [pc, #12]	@ (8004384 <optiga_cmd_queue_scheduler+0x220>)
 8004376:	6938      	ldr	r0, [r7, #16]
 8004378:	f001 fea4 	bl	80060c4 <pal_os_event_register_callback_oneshot>
}
 800437c:	bf00      	nop
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08004165 	.word	0x08004165
 8004388:	08003ef9 	.word	0x08003ef9

0800438c <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 800438c:	b5b0      	push	{r4, r5, r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7f9b      	ldrb	r3, [r3, #30]
 80043a0:	4619      	mov	r1, r3
 80043a2:	460b      	mov	r3, r1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	440b      	add	r3, r1
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b23      	cmp	r3, #35	@ 0x23
 80043b4:	d111      	bne.n	80043da <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	7f9b      	ldrb	r3, [r3, #30]
 80043be:	4619      	mov	r1, r3
 80043c0:	460b      	mov	r3, r1
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	440b      	add	r3, r1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80043ce:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80043d0:	2b23      	cmp	r3, #35	@ 0x23
 80043d2:	d112      	bne.n	80043fa <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	2b23      	cmp	r3, #35	@ 0x23
 80043d8:	d00f      	beq.n	80043fa <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681c      	ldr	r4, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7f9b      	ldrb	r3, [r3, #30]
 80043e2:	461d      	mov	r5, r3
 80043e4:	f001 ff2a 	bl	800623c <pal_os_timer_get_time_in_microseconds>
 80043e8:	4602      	mov	r2, r0
 80043ea:	462b      	mov	r3, r5
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	442b      	add	r3, r5
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4423      	add	r3, r4
 80043f4:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80043f8:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7f9b      	ldrb	r3, [r3, #30]
 8004402:	4619      	mov	r1, r3
 8004404:	460b      	mov	r3, r1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7f9b      	ldrb	r3, [r3, #30]
 800441e:	4619      	mov	r1, r3
 8004420:	460b      	mov	r3, r1
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	440b      	add	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b23      	cmp	r3, #35	@ 0x23
 8004432:	d111      	bne.n	8004458 <optiga_cmd_queue_update_slot+0xcc>
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	2b23      	cmp	r3, #35	@ 0x23
 8004438:	d10e      	bne.n	8004458 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7f9b      	ldrb	r3, [r3, #30]
 8004442:	4619      	mov	r1, r3
 8004444:	460b      	mov	r3, r1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	440b      	add	r3, r1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004452:	2208      	movs	r2, #8
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e00d      	b.n	8004474 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7f9b      	ldrb	r3, [r3, #30]
 8004460:	4619      	mov	r1, r3
 8004462:	460b      	mov	r3, r1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	440b      	add	r3, r1
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004470:	2202      	movs	r2, #2
 8004472:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	7f9b      	ldrb	r3, [r3, #30]
 800447c:	4619      	mov	r1, r3
 800447e:	460b      	mov	r3, r1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	440b      	add	r3, r1
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	701a      	strb	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bdb0      	pop	{r4, r5, r7, pc}

08004498 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7f9b      	ldrb	r3, [r3, #30]
 80044a8:	4619      	mov	r1, r3
 80044aa:	460b      	mov	r3, r1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	440b      	add	r3, r1
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044bc:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7f9b      	ldrb	r3, [r3, #30]
 80044c6:	4619      	mov	r1, r3
 80044c8:	460b      	mov	r3, r1
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	440b      	add	r3, r1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7f9b      	ldrb	r3, [r3, #30]
 80044e2:	4619      	mov	r1, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	440b      	add	r3, r1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80044f2:	2200      	movs	r2, #0
 80044f4:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	7f9b      	ldrb	r3, [r3, #30]
 80044fe:	4619      	mov	r1, r3
 8004500:	460b      	mov	r3, r1
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	440b      	add	r3, r1
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	4903      	ldr	r1, [pc, #12]	@ (8004530 <optiga_cmd_queue_reset_slot+0x98>)
 8004522:	f001 fd91 	bl	8006048 <pal_os_event_start>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	08004165 	.word	0x08004165

08004534 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	7f9b      	ldrb	r3, [r3, #30]
 8004544:	4619      	mov	r1, r3
 8004546:	460b      	mov	r3, r1
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	440b      	add	r3, r1
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7f9b      	ldrb	r3, [r3, #30]
 8004560:	4619      	mov	r1, r3
 8004562:	460b      	mov	r3, r1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	440b      	add	r3, r1
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004588:	2122      	movs	r1, #34	@ 0x22
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff fefe 	bl	800438c <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fd22 	bl	8003fec <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fee2 	bl	800438c <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ff5c 	bl	8004498 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80045f2:	f240 2302 	movw	r3, #514	@ 0x202
 80045f6:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d011      	beq.n	8004624 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8004600:	2308      	movs	r3, #8
 8004602:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004610:	f107 020c 	add.w	r2, r7, #12
 8004614:	4619      	mov	r1, r3
 8004616:	f001 fc8f 	bl	8005f38 <pal_os_datastore_read>
 800461a:	4603      	mov	r3, r0
 800461c:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11a      	bne.n	800465a <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f8c3 	bl	80057b8 <optiga_common_get_uint32>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10d      	bne.n	8004654 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004640:	4618      	mov	r0, r3
 8004642:	f001 f8b9 	bl	80057b8 <optiga_common_get_uint32>
 8004646:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 800464c:	f240 2302 	movw	r3, #514	@ 0x202
 8004650:	81fb      	strh	r3, [r7, #14]
            break;
 8004652:	e003      	b.n	800465c <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8004654:	2300      	movs	r3, #0
 8004656:	81fb      	strh	r3, [r7, #14]
 8004658:	e000      	b.n	800465c <optiga_cmd_restore_context+0x72>
                break;
 800465a:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 800465c:	89fb      	ldrh	r3, [r7, #14]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	7e5b      	ldrb	r3, [r3, #25]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d029      	beq.n	80046ce <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 800467e:	2b22      	cmp	r3, #34	@ 0x22
 8004680:	d125      	bne.n	80046ce <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 800468a:	2208      	movs	r2, #8
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fdbc 	bl	800620c <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004698:	2b33      	cmp	r3, #51	@ 0x33
 800469a:	d118      	bne.n	80046ce <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d014      	beq.n	80046ce <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80046b0:	2208      	movs	r2, #8
 80046b2:	4619      	mov	r1, r3
 80046b4:	f001 fbc2 	bl	8005e3c <pal_os_datastore_write>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8c1b      	ldrh	r3, [r3, #32]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2204      	movs	r2, #4
 80046cc:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7ddb      	ldrb	r3, [r3, #23]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d05f      	beq.n	80047b0 <optiga_cmd_execute_comms_open+0xd8>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	dc6d      	bgt.n	80047d0 <optiga_cmd_execute_comms_open+0xf8>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <optiga_cmd_execute_comms_open+0x26>
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d01b      	beq.n	8004734 <optiga_cmd_execute_comms_open+0x5c>
 80046fc:	e068      	b.n	80047d0 <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80046fe:	2121      	movs	r1, #33	@ 0x21
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff56 	bl	80045b2 <optiga_cmd_request_lock>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8c1b      	ldrh	r3, [r3, #32]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2204      	movs	r2, #4
 800471a:	759a      	strb	r2, [r3, #22]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f240 2202 	movw	r2, #514	@ 0x202
 8004722:	841a      	strh	r2, [r3, #32]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
                    break;
 800472a:	e05c      	b.n	80047e6 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	75da      	strb	r2, [r3, #23]
                break;
 8004732:	e058      	b.n	80047e6 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	7e92      	ldrb	r2, [r2, #26]
 800473e:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	7ed2      	ldrb	r2, [r2, #27]
 800474a:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	7f12      	ldrb	r2, [r2, #28]
 8004756:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004766:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fefa 	bl	800556a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 ff03 	bl	8005588 <optiga_comms_open>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8c1b      	ldrh	r3, [r3, #32]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2204      	movs	r2, #4
 8004796:	759a      	strb	r2, [r3, #22]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f240 2202 	movw	r2, #514	@ 0x202
 800479e:	841a      	strh	r2, [r3, #32]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	701a      	strb	r2, [r3, #0]
                    break;
 80047a6:	e01e      	b.n	80047e6 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	75da      	strb	r2, [r3, #23]
                break;
 80047ae:	e01a      	b.n	80047e6 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80047b8:	2332      	movs	r3, #50	@ 0x32
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4910      	ldr	r1, [pc, #64]	@ (8004800 <optiga_cmd_execute_comms_open+0x128>)
 80047be:	f001 fc81 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2209      	movs	r2, #9
 80047cc:	75da      	strb	r2, [r3, #23]
                break;
 80047ce:	e00a      	b.n	80047e6 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2204      	movs	r2, #4
 80047d4:	759a      	strb	r2, [r3, #22]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f240 2202 	movw	r2, #514	@ 0x202
 80047dc:	841a      	strh	r2, [r3, #32]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
            break;
 80047e4:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <optiga_cmd_execute_comms_open+0x120>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7d9b      	ldrb	r3, [r3, #22]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f43f af75 	beq.w	80046e2 <optiga_cmd_execute_comms_open+0xa>
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08003ef9 	.word	0x08003ef9

08004804 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2201      	movs	r2, #1
 8004812:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7ddb      	ldrb	r3, [r3, #23]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d002      	beq.n	8004822 <optiga_cmd_execute_comms_close+0x1e>
 800481c:	2b04      	cmp	r3, #4
 800481e:	d068      	beq.n	80048f2 <optiga_cmd_execute_comms_close+0xee>
 8004820:	e07a      	b.n	8004918 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7f1b      	ldrb	r3, [r3, #28]
 8004826:	2b22      	cmp	r3, #34	@ 0x22
 8004828:	d002      	beq.n	8004830 <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2204      	movs	r2, #4
 800482e:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	7e92      	ldrb	r2, [r2, #26]
 800483a:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	7ed2      	ldrb	r2, [r2, #27]
 8004846:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8004850:	2b00      	cmp	r3, #0
 8004852:	d006      	beq.n	8004862 <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	7f12      	ldrb	r2, [r2, #28]
 800485e:	751a      	strb	r2, [r3, #20]
 8004860:	e004      	b.n	800486c <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2233      	movs	r2, #51	@ 0x33
 800486a:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2204      	movs	r2, #4
 800487a:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 800488a:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fe68 	bl	800556a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 feef 	bl	8005684 <optiga_comms_close>
 80048a6:	4603      	mov	r3, r0
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8c1b      	ldrh	r3, [r3, #32]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	759a      	strb	r2, [r3, #22]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f240 2202 	movw	r2, #514	@ 0x202
 80048c2:	841a      	strh	r2, [r3, #32]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
                    break;
 80048ca:	e031      	b.n	8004930 <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	7f1b      	ldrb	r3, [r3, #28]
 80048d0:	2b22      	cmp	r3, #34	@ 0x22
 80048d2:	d106      	bne.n	80048e2 <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2204      	movs	r2, #4
 80048d8:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 80048e0:	e026      	b.n	8004930 <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff fe75 	bl	80045d2 <optiga_cmd_release_lock>
 80048e8:	4603      	mov	r3, r0
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	841a      	strh	r2, [r3, #32]
                break;
 80048f0:	e01e      	b.n	8004930 <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68d2      	ldr	r2, [r2, #12]
 80048fa:	2100      	movs	r1, #0
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7f1b      	ldrb	r3, [r3, #28]
 8004904:	2b22      	cmp	r3, #34	@ 0x22
 8004906:	d112      	bne.n	800492e <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff fe62 	bl	80045d2 <optiga_cmd_release_lock>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004916:	e00a      	b.n	800492e <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2204      	movs	r2, #4
 800491c:	759a      	strb	r2, [r3, #22]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f240 2202 	movw	r2, #514	@ 0x202
 8004924:	841a      	strh	r2, [r3, #32]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
            break;
 800492c:	e000      	b.n	8004930 <optiga_cmd_execute_comms_close+0x12c>
                break;
 800492e:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <optiga_cmd_execute_comms_close+0x13e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7d9b      	ldrb	r3, [r3, #22]
 800493c:	2b01      	cmp	r3, #1
 800493e:	f43f af66 	beq.w	800480e <optiga_cmd_execute_comms_close+0xa>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b087      	sub	sp, #28
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7ddb      	ldrb	r3, [r3, #23]
 8004960:	3b05      	subs	r3, #5
 8004962:	2b04      	cmp	r3, #4
 8004964:	f200 80d6 	bhi.w	8004b14 <optiga_cmd_execute_prepare_command+0x1c8>
 8004968:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <optiga_cmd_execute_prepare_command+0x24>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	08004985 	.word	0x08004985
 8004974:	08004985 	.word	0x08004985
 8004978:	080049d9 	.word	0x080049d9
 800497c:	080049ed 	.word	0x080049ed
 8004980:	08004a29 	.word	0x08004a29
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7ddb      	ldrb	r3, [r3, #23]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d107      	bne.n	80049a2 <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fdf4 	bl	8004580 <optiga_cmd_request_session>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	841a      	strh	r2, [r3, #32]
 80049a0:	e007      	b.n	80049b2 <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80049a2:	2121      	movs	r1, #33	@ 0x21
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fe04 	bl	80045b2 <optiga_cmd_request_lock>
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8c1b      	ldrh	r3, [r3, #32]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	759a      	strb	r2, [r3, #22]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f240 2202 	movw	r2, #514	@ 0x202
 80049c6:	841a      	strh	r2, [r3, #32]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
                    break;
 80049ce:	e0ac      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2209      	movs	r2, #9
 80049d4:	75da      	strb	r2, [r3, #23]
                break;
 80049d6:	e0a8      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fdab 	bl	8004534 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2208      	movs	r2, #8
 80049e2:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
                break;
 80049ea:	e09e      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 80049ec:	2123      	movs	r1, #35	@ 0x23
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fddf 	bl	80045b2 <optiga_cmd_request_lock>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8c1b      	ldrh	r3, [r3, #32]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2204      	movs	r2, #4
 8004a08:	759a      	strb	r2, [r3, #22]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f240 2202 	movw	r2, #514	@ 0x202
 8004a10:	841a      	strh	r2, [r3, #32]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
                    break;
 8004a18:	e087      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2209      	movs	r2, #9
 8004a1e:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
                break;
 8004a26:	e080      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8c1b      	ldrh	r3, [r3, #32]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d006      	beq.n	8004a52 <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2204      	movs	r2, #4
 8004a48:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
                    break;
 8004a50:	e06b      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f240 6222 	movw	r2, #1570	@ 0x622
 8004a5a:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	7e92      	ldrb	r2, [r2, #26]
 8004a66:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	7ed2      	ldrb	r2, [r2, #27]
 8004a72:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7e9a      	ldrb	r2, [r3, #26]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fd68 	bl	800556a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004aac:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004aba:	3306      	adds	r3, #6
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	4623      	mov	r3, r4
 8004ac0:	f000 fd9a 	bl	80055f8 <optiga_comms_transceive>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8c1b      	ldrh	r3, [r3, #32]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	759a      	strb	r2, [r3, #22]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f240 2202 	movw	r2, #514	@ 0x202
 8004ae0:	841a      	strh	r2, [r3, #32]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
                    break;
 8004ae8:	e01f      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2203      	movs	r2, #3
 8004aee:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	220a      	movs	r2, #10
 8004af4:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	7f5b      	ldrb	r3, [r3, #29]
 8004afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	775a      	strb	r2, [r3, #29]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7f5b      	ldrb	r3, [r3, #29]
 8004b08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	775a      	strb	r2, [r3, #29]
                break;
 8004b12:	e00a      	b.n	8004b2a <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2204      	movs	r2, #4
 8004b18:	759a      	strb	r2, [r3, #22]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f240 2202 	movw	r2, #514	@ 0x202
 8004b20:	841a      	strh	r2, [r3, #32]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
            break;
 8004b28:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <optiga_cmd_execute_prepare_command+0x1f0>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7d9b      	ldrb	r3, [r3, #22]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	f43f af10 	beq.w	800495c <optiga_cmd_execute_prepare_command+0x10>
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd90      	pop	{r4, r7, pc}

08004b44 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa69 	bl	800502c <optiga_cmd_get_error_code_handler>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8c1b      	ldrh	r3, [r3, #32]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d004      	beq.n	8004b74 <optiga_cmd_execute_get_device_error+0x30>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8c1b      	ldrh	r3, [r3, #32]
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da0a      	bge.n	8004b8a <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b7c:	d10c      	bne.n	8004b98 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7f5b      	ldrb	r3, [r3, #29]
 8004b82:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d106      	bne.n	8004b98 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
            break;
 8004b96:	bf00      	nop
        }
    } while (FALSE);
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7f5b      	ldrb	r3, [r3, #29]
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	da0b      	bge.n	8004bd8 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8c1b      	ldrh	r3, [r3, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d14e      	bne.n	8004c74 <optiga_cmd_execute_process_optiga_response+0xd4>
 8004bd6:	e006      	b.n	8004be6 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
            break;
 8004be4:	e06f      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2bf1      	cmp	r3, #241	@ 0xf1
 8004bee:	d113      	bne.n	8004c18 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4934      	ldr	r1, [pc, #208]	@ (8004cd0 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004c00:	f001 fa60 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2201      	movs	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2203      	movs	r2, #3
 8004c14:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8004c16:	e056      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7e1b      	ldrb	r3, [r3, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10e      	bne.n	8004c3e <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7ddb      	ldrb	r3, [r3, #23]
 8004c24:	2b0e      	cmp	r3, #14
 8004c26:	d006      	beq.n	8004c36 <optiga_cmd_execute_process_optiga_response+0x96>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	7ddb      	ldrb	r3, [r3, #23]
 8004c2c:	2b0d      	cmp	r3, #13
 8004c2e:	d002      	beq.n	8004c36 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	220c      	movs	r2, #12
 8004c34:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
                    break;
 8004c3c:	e043      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	4920      	ldr	r1, [pc, #128]	@ (8004cd0 <optiga_cmd_execute_process_optiga_response+0x130>)
 8004c4e:	f001 fa39 	bl	80060c4 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	7e9b      	ldrb	r3, [r3, #26]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2209      	movs	r2, #9
 8004c70:	75da      	strb	r2, [r3, #23]
}
 8004c72:	e028      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8c1b      	ldrh	r3, [r3, #32]
 8004c78:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8004c7c:	d106      	bne.n	8004c8c <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	220c      	movs	r2, #12
 8004c82:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
                break;
 8004c8a:	e01c      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7ddb      	ldrb	r3, [r3, #23]
 8004c90:	2b0d      	cmp	r3, #13
 8004c92:	d103      	bne.n	8004c9c <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
}
 8004c9a:	e014      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	220b      	movs	r2, #11
 8004ca0:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	7f5b      	ldrb	r3, [r3, #29]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	775a      	strb	r2, [r3, #29]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7f5b      	ldrb	r3, [r3, #29]
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
}
 8004cc4:	e7ff      	b.n	8004cc6 <optiga_cmd_execute_process_optiga_response+0x126>
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	08003ef9 	.word	0x08003ef9

08004cd4 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7ddb      	ldrb	r3, [r3, #23]
 8004ce2:	3b0a      	subs	r3, #10
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d84d      	bhi.n	8004d84 <optiga_cmd_execute_process_response+0xb0>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <optiga_cmd_execute_process_response+0x1c>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d05 	.word	0x08004d05
 8004cf4:	08004d0f 	.word	0x08004d0f
 8004cf8:	08004d59 	.word	0x08004d59
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	08004d6d 	.word	0x08004d6d
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff ff4a 	bl	8004ba0 <optiga_cmd_execute_process_optiga_response>
                break;
 8004d0c:	e045      	b.n	8004d9a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff17 	bl	8004b44 <optiga_cmd_execute_get_device_error>
                break;
 8004d16:	e040      	b.n	8004d9a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fc3e 	bl	800459a <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8c1b      	ldrh	r3, [r3, #32]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d103      	bne.n	8004d2e <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	220c      	movs	r2, #12
 8004d2a:	75da      	strb	r2, [r3, #23]
 8004d2c:	e010      	b.n	8004d50 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	220b      	movs	r2, #11
 8004d32:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	7f5b      	ldrb	r3, [r3, #29]
 8004d38:	f023 0303 	bic.w	r3, r3, #3
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	775a      	strb	r2, [r3, #29]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7f5b      	ldrb	r3, [r3, #29]
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
                break;
 8004d56:	e020      	b.n	8004d9a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fc3a 	bl	80045d2 <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	220e      	movs	r2, #14
 8004d62:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
                break;
 8004d6a:	e016      	b.n	8004d9a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	68d0      	ldr	r0, [r2, #12]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	8c12      	ldrh	r2, [r2, #32]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4798      	blx	r3
                *exit_loop = TRUE;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
                break;
 8004d82:	e00a      	b.n	8004d9a <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2204      	movs	r2, #4
 8004d88:	759a      	strb	r2, [r3, #22]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f240 2202 	movw	r2, #514	@ 0x202
 8004d90:	841a      	strh	r2, [r3, #32]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
            break;
 8004d98:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <optiga_cmd_execute_process_response+0xd6>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7d9b      	ldrb	r3, [r3, #22]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d099      	beq.n	8004cde <optiga_cmd_execute_process_response+0xa>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop

08004db4 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fc07 	bl	80045d2 <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68d0      	ldr	r0, [r2, #12]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	8c12      	ldrh	r2, [r2, #32]
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4798      	blx	r3
        *exit_loop = TRUE;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 8004df0:	2301      	movs	r3, #1
 8004df2:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8004df8:	887b      	ldrh	r3, [r7, #2]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fc31 	bl	8004666 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2204      	movs	r2, #4
 8004e08:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	7d9b      	ldrb	r3, [r3, #22]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d830      	bhi.n	8004e7a <optiga_cmd_execute_handler+0x96>
 8004e18:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <optiga_cmd_execute_handler+0x3c>)
 8004e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1e:	bf00      	nop
 8004e20:	08004e35 	.word	0x08004e35
 8004e24:	08004e43 	.word	0x08004e43
 8004e28:	08004e51 	.word	0x08004e51
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e6d 	.word	0x08004e6d
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8004e34:	f107 030b 	add.w	r3, r7, #11
 8004e38:	4619      	mov	r1, r3
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fc4c 	bl	80046d8 <optiga_cmd_execute_comms_open>
                break;
 8004e40:	e01c      	b.n	8004e7c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8004e42:	f107 030b 	add.w	r3, r7, #11
 8004e46:	4619      	mov	r1, r3
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff fcdb 	bl	8004804 <optiga_cmd_execute_comms_close>
                break;
 8004e4e:	e015      	b.n	8004e7c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8004e50:	f107 030b 	add.w	r3, r7, #11
 8004e54:	4619      	mov	r1, r3
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7ff fd78 	bl	800494c <optiga_cmd_execute_prepare_command>
                break;
 8004e5c:	e00e      	b.n	8004e7c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8004e5e:	f107 030b 	add.w	r3, r7, #11
 8004e62:	4619      	mov	r1, r3
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff ff35 	bl	8004cd4 <optiga_cmd_execute_process_response>
                break;
 8004e6a:	e007      	b.n	8004e7c <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8004e6c:	f107 030b 	add.w	r3, r7, #11
 8004e70:	4619      	mov	r1, r3
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff ff9e 	bl	8004db4 <optiga_cmd_execute_error_handler>
                break;
 8004e78:	e000      	b.n	8004e7c <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 8004e7a:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0c6      	beq.n	8004e10 <optiga_cmd_execute_handler+0x2c>
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8004e9e:	f001 f97f 	bl	80061a0 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d15b      	bne.n	8004f60 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	4a33      	ldr	r2, [pc, #204]	@ (8004f78 <optiga_cmd_create+0xec>)
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2109      	movs	r1, #9
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f8b9 	bl	800402c <optiga_cmd_queue_get_count_of>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d051      	beq.n	8004f64 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 8004ec0:	2128      	movs	r1, #40	@ 0x28
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f001 f97a 	bl	80061bc <pal_os_calloc>
 8004ec8:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d04b      	beq.n	8004f68 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	4a26      	ldr	r2, [pc, #152]	@ (8004f78 <optiga_cmd_create+0xec>)
 8004ee0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	4a24      	ldr	r2, [pc, #144]	@ (8004f7c <optiga_cmd_create+0xf0>)
 8004eec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	7b1b      	ldrb	r3, [r3, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d129      	bne.n	8004f52 <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681c      	ldr	r4, [r3, #0]
 8004f06:	4611      	mov	r1, r2
 8004f08:	481d      	ldr	r0, [pc, #116]	@ (8004f80 <optiga_cmd_create+0xf4>)
 8004f0a:	f001 f8c3 	bl	8006094 <pal_os_event_create>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681c      	ldr	r4, [r3, #0]
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	481a      	ldr	r0, [pc, #104]	@ (8004f84 <optiga_cmd_create+0xf8>)
 8004f1c:	f000 fae8 	bl	80054f0 <optiga_comms_create>
 8004f20:	4603      	mov	r3, r0
 8004f22:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f001 f952 	bl	80061d8 <pal_os_free>
                me = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
                break;
 8004f38:	e017      	b.n	8004f6a <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004f50:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	331e      	adds	r3, #30
 8004f56:	4619      	mov	r1, r3
 8004f58:	6978      	ldr	r0, [r7, #20]
 8004f5a:	f7ff f8a8 	bl	80040ae <optiga_cmd_queue_assign_slot>
 8004f5e:	e004      	b.n	8004f6a <optiga_cmd_create+0xde>
            break;
 8004f60:	bf00      	nop
 8004f62:	e002      	b.n	8004f6a <optiga_cmd_create+0xde>
            break;
 8004f64:	bf00      	nop
 8004f66:	e000      	b.n	8004f6a <optiga_cmd_create+0xde>
            break;
 8004f68:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8004f6a:	f001 f920 	bl	80061ae <pal_os_lock_exit_critical_section>
    return (me);
 8004f6e:	697b      	ldr	r3, [r7, #20]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd90      	pop	{r4, r7, pc}
 8004f78:	200004ec 	.word	0x200004ec
 8004f7c:	200004f0 	.word	0x200004f0
 8004f80:	08004165 	.word	0x08004165
 8004f84:	08004de5 	.word	0x08004de5

08004f88 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8004f90:	f240 2302 	movw	r3, #514	@ 0x202
 8004f94:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 8004f96:	f001 f903 	bl	80061a0 <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03c      	beq.n	800501a <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fafa 	bl	800459a <optiga_cmd_release_session>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff f8b1 	bl	8004112 <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 8004fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005028 <optiga_cmd_destroy+0xa0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2109      	movs	r1, #9
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff f837 	bl	800402c <optiga_cmd_queue_get_count_of>
 8004fbe:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 8004fc0:	2b06      	cmp	r3, #6
 8004fc2:	d125      	bne.n	8005010 <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	7b1b      	ldrb	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d120      	bne.n	8005010 <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 f84e 	bl	8006078 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 faa1 	bl	800553c <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800500a:	4618      	mov	r0, r3
 800500c:	f001 f8be 	bl	800618c <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 f8e1 	bl	80061d8 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 8005016:	2300      	movs	r3, #0
 8005018:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 800501a:	f001 f8c8 	bl	80061ae <pal_os_lock_exit_critical_section>

    return (return_status);
 800501e:	89fb      	ldrh	r3, [r7, #14]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	200004ec 	.word	0x200004ec

0800502c <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b087      	sub	sp, #28
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8005034:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005038:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800503a:	2309      	movs	r3, #9
 800503c:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7f5b      	ldrb	r3, [r3, #29]
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	2b03      	cmp	r3, #3
 800504e:	f000 8099 	beq.w	8005184 <optiga_cmd_get_error_code_handler+0x158>
 8005052:	2b03      	cmp	r3, #3
 8005054:	f300 80b6 	bgt.w	80051c4 <optiga_cmd_get_error_code_handler+0x198>
 8005058:	2b01      	cmp	r3, #1
 800505a:	d002      	beq.n	8005062 <optiga_cmd_get_error_code_handler+0x36>
 800505c:	2b02      	cmp	r3, #2
 800505e:	d052      	beq.n	8005106 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 8005060:	e0b0      	b.n	80051c4 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f103 020d 	add.w	r2, r3, #13
 800506a:	89bb      	ldrh	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fb68 	bl	8005748 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005078:	89bb      	ldrh	r3, [r7, #12]
 800507a:	3302      	adds	r3, #2
 800507c:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f103 020d 	add.w	r2, r3, #13
 8005086:	89bb      	ldrh	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fb5b 	bl	8005748 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005092:	89bb      	ldrh	r3, [r7, #12]
 8005094:	3302      	adds	r3, #2
 8005096:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f103 020d 	add.w	r2, r3, #13
 80050a0:	89bb      	ldrh	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	2101      	movs	r1, #1
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fb4e 	bl	8005748 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80050ac:	89bb      	ldrh	r3, [r7, #12]
 80050ae:	3302      	adds	r3, #2
 80050b0:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80050b2:	89bb      	ldrh	r3, [r7, #12]
 80050b4:	3b09      	subs	r3, #9
 80050b6:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 80050be:	3305      	adds	r3, #5
 80050c0:	2100      	movs	r1, #0
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7fe fef5 	bl	8003eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	89ba      	ldrh	r2, [r7, #12]
 80050ce:	3a05      	subs	r2, #5
 80050d0:	b292      	uxth	r2, r2
 80050d2:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7f5b      	ldrb	r3, [r3, #29]
 80050d8:	f023 0303 	bic.w	r3, r3, #3
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	775a      	strb	r2, [r3, #29]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	7f5b      	ldrb	r3, [r3, #29]
 80050e6:	f043 0302 	orr.w	r3, r3, #2
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80050f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4935      	ldr	r1, [pc, #212]	@ (80051d4 <optiga_cmd_get_error_code_handler+0x1a8>)
 8005100:	f000 ffe0 	bl	80060c4 <pal_os_event_register_callback_oneshot>
        break;
 8005104:	e061      	b.n	80051ca <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f240 6222 	movw	r2, #1570	@ 0x622
 800510e:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	7e92      	ldrb	r2, [r2, #26]
 800511a:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	7ed2      	ldrb	r2, [r2, #27]
 8005126:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fa1b 	bl	800556a <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	3306      	adds	r3, #6
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	4623      	mov	r3, r4
 8005150:	f000 fa52 	bl	80055f8 <optiga_comms_transceive>
 8005154:	4603      	mov	r3, r0
 8005156:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8005158:	89fb      	ldrh	r3, [r7, #14]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 800515e:	f240 2302 	movw	r3, #514	@ 0x202
 8005162:	81fb      	strh	r3, [r7, #14]
                break;
 8005164:	e031      	b.n	80051ca <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7f5b      	ldrb	r3, [r3, #29]
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	b2da      	uxtb	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	775a      	strb	r2, [r3, #29]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7f5b      	ldrb	r3, [r3, #29]
 8005178:	f043 0303 	orr.w	r3, r3, #3
 800517c:	b2da      	uxtb	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	775a      	strb	r2, [r3, #29]
        break;
 8005182:	e022      	b.n	80051ca <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	7c9b      	ldrb	r3, [r3, #18]
 800518a:	2bff      	cmp	r3, #255	@ 0xff
 800518c:	d01c      	beq.n	80051c8 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	7d9b      	ldrb	r3, [r3, #22]
 8005194:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005196:	89fb      	ldrh	r3, [r7, #14]
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	220a      	movs	r2, #10
 80051ac:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80051b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4905      	ldr	r1, [pc, #20]	@ (80051d4 <optiga_cmd_get_error_code_handler+0x1a8>)
 80051be:	f000 ff81 	bl	80060c4 <pal_os_event_register_callback_oneshot>
        break;
 80051c2:	e002      	b.n	80051ca <optiga_cmd_get_error_code_handler+0x19e>
            break;
 80051c4:	bf00      	nop
 80051c6:	e000      	b.n	80051ca <optiga_cmd_get_error_code_handler+0x19e>
                break;
 80051c8:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 80051ca:	89fb      	ldrh	r3, [r7, #14]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd90      	pop	{r4, r7, pc}
 80051d4:	08003ef9 	.word	0x08003ef9

080051d8 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80051e0:	f240 2302 	movw	r3, #514	@ 0x202
 80051e4:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7d9b      	ldrb	r3, [r3, #22]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d002      	beq.n	80051f4 <optiga_cmd_open_application_handler+0x1c>
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d075      	beq.n	80052de <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 80051f2:	e08e      	b.n	8005312 <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 80051f4:	2314      	movs	r3, #20
 80051f6:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	7e5b      	ldrb	r3, [r3, #25]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <optiga_cmd_open_application_handler+0x2c>
 8005200:	2200      	movs	r2, #0
 8005202:	e000      	b.n	8005206 <optiga_cmd_open_application_handler+0x2e>
 8005204:	2208      	movs	r2, #8
 8005206:	89bb      	ldrh	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800520c:	89bb      	ldrh	r3, [r7, #12]
 800520e:	f240 6215 	movw	r2, #1557	@ 0x615
 8005212:	4293      	cmp	r3, r2
 8005214:	d903      	bls.n	800521e <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005216:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800521a:	81fb      	strh	r3, [r7, #14]
                break;
 800521c:	e079      	b.n	8005312 <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7e5b      	ldrb	r3, [r3, #25]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff f9df 	bl	80045ea <optiga_cmd_restore_context>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d16e      	bne.n	8005310 <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <optiga_cmd_open_application_handler+0x6a>
 800523e:	2210      	movs	r2, #16
 8005240:	e000      	b.n	8005244 <optiga_cmd_open_application_handler+0x6c>
 8005242:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800524a:	3305      	adds	r3, #5
 800524c:	20f0      	movs	r0, #240	@ 0xf0
 800524e:	f7fe fe30 	bl	8003eb2 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330d      	adds	r3, #13
 8005258:	3309      	adds	r3, #9
 800525a:	2210      	movs	r2, #16
 800525c:	492f      	ldr	r1, [pc, #188]	@ (800531c <optiga_cmd_open_application_handler+0x144>)
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ffc5 	bl	80061ee <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	7e5b      	ldrb	r3, [r3, #25]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 800527c:	2208      	movs	r2, #8
 800527e:	4619      	mov	r1, r3
 8005280:	f000 ffb5 	bl	80061ee <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <optiga_cmd_open_application_handler+0xb8>
 800528c:	2214      	movs	r2, #20
 800528e:	e000      	b.n	8005292 <optiga_cmd_open_application_handler+0xba>
 8005290:	221c      	movs	r2, #28
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80052a0:	2208      	movs	r2, #8
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 ffb1 	bl	800620c <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d012      	beq.n	80052d8 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80052be:	2208      	movs	r2, #8
 80052c0:	4619      	mov	r1, r3
 80052c2:	f000 fdbb 	bl	8005e3c <pal_os_datastore_write>
 80052c6:	4603      	mov	r3, r0
 80052c8:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 80052ca:	89fb      	ldrh	r3, [r7, #14]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 80052d0:	f240 2302 	movw	r3, #514	@ 0x202
 80052d4:	81fb      	strh	r3, [r7, #14]
                    break;
 80052d6:	e01c      	b.n	8005312 <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 80052d8:	2300      	movs	r3, #0
 80052da:	81fb      	strh	r3, [r7, #14]
        break;
 80052dc:	e019      	b.n	8005312 <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	7c9b      	ldrb	r3, [r3, #18]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7f5b      	ldrb	r3, [r3, #29]
 80052ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	775a      	strb	r2, [r3, #29]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7f5a      	ldrb	r2, [r3, #29]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	775a      	strb	r2, [r3, #29]
                break;
 80052fe:	e008      	b.n	8005312 <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2233      	movs	r2, #51	@ 0x33
 8005308:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 800530a:	2300      	movs	r3, #0
 800530c:	81fb      	strh	r3, [r7, #14]
        break;
 800530e:	e000      	b.n	8005312 <optiga_cmd_open_application_handler+0x13a>
                    break;
 8005310:	bf00      	nop
    }

    return (return_status);
 8005312:	89fb      	ldrh	r3, [r7, #14]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	0800ce90 	.word	0x0800ce90

08005320 <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af04      	add	r7, sp, #16
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	460b      	mov	r3, r1
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800532e:	7af9      	ldrb	r1, [r7, #11]
 8005330:	23f0      	movs	r3, #240	@ 0xf0
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	2300      	movs	r3, #0
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	2300      	movs	r3, #0
 800533e:	4a04      	ldr	r2, [pc, #16]	@ (8005350 <optiga_cmd_open_application+0x30>)
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7fe fde5 	bl	8003f10 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	080051d9 	.word	0x080051d9

08005354 <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005362:	f240 2302 	movw	r3, #514	@ 0x202
 8005366:	82fb      	strh	r3, [r7, #22]
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005368:	2309      	movs	r3, #9
 800536a:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	7d9b      	ldrb	r3, [r3, #22]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d003      	beq.n	800537c <optiga_cmd_set_data_object_handler+0x28>
 8005374:	2b03      	cmp	r3, #3
 8005376:	f000 8087 	beq.w	8005488 <optiga_cmd_set_data_object_handler+0x134>
            OPTIGA_CMD_LOG_MESSAGE("Response of set data command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 800537a:	e099      	b.n	80054b0 <optiga_cmd_set_data_object_handler+0x15c>
            me->chaining_ongoing = FALSE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	761a      	strb	r2, [r3, #24]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	89fb      	ldrh	r3, [r7, #14]
 8005388:	3308      	adds	r3, #8
 800538a:	4413      	add	r3, r2
 800538c:	1d5a      	adds	r2, r3, #5
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	889b      	ldrh	r3, [r3, #4]
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f000 f9d7 	bl	8005748 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	3302      	adds	r3, #2
 800539e:	81fb      	strh	r3, [r7, #14]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	89fb      	ldrh	r3, [r7, #14]
 80053a6:	3308      	adds	r3, #8
 80053a8:	4413      	add	r3, r2
 80053aa:	1d58      	adds	r0, r3, #5
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	88da      	ldrh	r2, [r3, #6]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	895b      	ldrh	r3, [r3, #10]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80053b4:	4413      	add	r3, r2
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4619      	mov	r1, r3
 80053ba:	f000 f9c5 	bl	8005748 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	3302      	adds	r3, #2
 80053c2:	81fb      	strh	r3, [r7, #14]
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	891b      	ldrh	r3, [r3, #8]
 80053c8:	461a      	mov	r2, r3
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	895b      	ldrh	r3, [r3, #10]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	f5c3 63c3 	rsb	r3, r3, #1560	@ 0x618
 80053d6:	3302      	adds	r3, #2
 80053d8:	4293      	cmp	r3, r2
 80053da:	bfa8      	it	ge
 80053dc:	4613      	movge	r3, r2
 80053de:	81bb      	strh	r3, [r7, #12]
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80053e0:	89bb      	ldrh	r3, [r7, #12]
 80053e2:	3308      	adds	r3, #8
 80053e4:	817b      	strh	r3, [r7, #10]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80053e6:	897b      	ldrh	r3, [r7, #10]
 80053e8:	f240 6215 	movw	r2, #1557	@ 0x615
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d903      	bls.n	80053f8 <optiga_cmd_set_data_object_handler+0xa4>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80053f0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80053f4:	82fb      	strh	r3, [r7, #22]
                break;
 80053f6:	e05b      	b.n	80054b0 <optiga_cmd_set_data_object_handler+0x15c>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	7e59      	ldrb	r1, [r3, #25]
 80053fc:	89bb      	ldrh	r3, [r7, #12]
 80053fe:	3304      	adds	r3, #4
 8005400:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 8005408:	3305      	adds	r3, #5
 800540a:	2082      	movs	r0, #130	@ 0x82
 800540c:	f7fe fd51 	bl	8003eb2 <optiga_cmd_prepare_apdu_header>
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	7e5b      	ldrb	r3, [r3, #25]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d109      	bne.n	800542c <optiga_cmd_set_data_object_handler+0xd8>
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f103 020d 	add.w	r2, r3, #13
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	4413      	add	r3, r2
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	7b92      	ldrb	r2, [r2, #14]
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	e00e      	b.n	800544a <optiga_cmd_set_data_object_handler+0xf6>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f103 020d 	add.w	r2, r3, #13
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	18d0      	adds	r0, r2, r3
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	8952      	ldrh	r2, [r2, #10]
 8005440:	4413      	add	r3, r2
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005442:	89ba      	ldrh	r2, [r7, #12]
 8005444:	4619      	mov	r1, r3
 8005446:	f000 fed2 	bl	80061ee <pal_os_memcpy>
            p_optiga_write_data->written_size += size_to_send;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	895a      	ldrh	r2, [r3, #10]
 800544e:	89bb      	ldrh	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	b29a      	uxth	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	815a      	strh	r2, [r3, #10]
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 8005458:	89fa      	ldrh	r2, [r7, #14]
 800545a:	89bb      	ldrh	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3a05      	subs	r2, #5
 8005466:	b292      	uxth	r2, r2
 8005468:	809a      	strh	r2, [r3, #4]
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	895a      	ldrh	r2, [r3, #10]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	891b      	ldrh	r3, [r3, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d005      	beq.n	8005482 <optiga_cmd_set_data_object_handler+0x12e>
                me->chaining_ongoing = TRUE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	761a      	strb	r2, [r3, #24]
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	765a      	strb	r2, [r3, #25]
            return_status = OPTIGA_LIB_SUCCESS;
 8005482:	2300      	movs	r3, #0
 8005484:	82fb      	strh	r3, [r7, #22]
        break;
 8005486:	e013      	b.n	80054b0 <optiga_cmd_set_data_object_handler+0x15c>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	7c9b      	ldrb	r3, [r3, #18]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <optiga_cmd_set_data_object_handler+0x156>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	7f5b      	ldrb	r3, [r3, #29]
 8005496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549a:	b2da      	uxtb	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	775a      	strb	r2, [r3, #29]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7f5a      	ldrb	r2, [r3, #29]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	775a      	strb	r2, [r3, #29]
                break;
 80054a8:	e002      	b.n	80054b0 <optiga_cmd_set_data_object_handler+0x15c>
            return_status = OPTIGA_LIB_SUCCESS;
 80054aa:	2300      	movs	r3, #0
 80054ac:	82fb      	strh	r3, [r7, #22]
        break;
 80054ae:	bf00      	nop
    }
    return (return_status);
 80054b0:	8afb      	ldrh	r3, [r7, #22]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <optiga_cmd_set_data_object>:


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af04      	add	r7, sp, #16
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	460b      	mov	r3, r1
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 80054ca:	7af9      	ldrb	r1, [r7, #11]
 80054cc:	2382      	movs	r3, #130	@ 0x82
 80054ce:	9302      	str	r3, [sp, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	2306      	movs	r3, #6
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	2302      	movs	r3, #2
 80054da:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <optiga_cmd_set_data_object+0x30>)
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7fe fd17 	bl	8003f10 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	08005355 	.word	0x08005355

080054f0 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <optiga_comms_create+0x48>)
 8005500:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	7c1b      	ldrb	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d110      	bne.n	800552c <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 800550a:	f000 fb1b 	bl	8005b44 <pal_init>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
                break;
 8005518:	e008      	b.n	800552c <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200004f4 	.word	0x200004f4

0800553c <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	7c1b      	ldrb	r3, [r3, #16]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10a      	bne.n	8005562 <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 800555e:	f000 faf9 	bl	8005b54 <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	609a      	str	r2, [r3, #8]
    return (0);
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005590:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005594:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8a6 	bl	80056e8 <check_optiga_comms_state>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d122      	bne.n	80055e8 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a10      	ldr	r2, [pc, #64]	@ (80055f4 <optiga_comms_open+0x6c>)
 80055b2:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	7d12      	ldrb	r2, [r2, #20]
 80055be:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fb f844 	bl	8000660 <ifx_i2c_open>
 80055d8:	4603      	mov	r3, r0
 80055da:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80055dc:	89fb      	ldrh	r3, [r7, #14]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80055e8:	89fb      	ldrh	r3, [r7, #14]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	0800571d 	.word	0x0800571d

080055f8 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005608:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800560c:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f86a 	bl	80056e8 <check_optiga_comms_state>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d12c      	bne.n	8005674 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a15      	ldr	r2, [pc, #84]	@ (8005680 <optiga_comms_transceive+0x88>)
 800562a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	7c92      	ldrb	r2, [r2, #18]
 8005636:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	7cd2      	ldrb	r2, [r2, #19]
 8005642:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	7d12      	ldrb	r2, [r2, #20]
 800564e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6858      	ldr	r0, [r3, #4]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	f7fb f837 	bl	80006d2 <ifx_i2c_transceive>
 8005664:	4603      	mov	r3, r0
 8005666:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005674:	8afb      	ldrh	r3, [r7, #22]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	0800571d 	.word	0x0800571d

08005684 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 800568c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005690:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f828 	bl	80056e8 <check_optiga_comms_state>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11c      	bne.n	80056d8 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a0d      	ldr	r2, [pc, #52]	@ (80056e4 <optiga_comms_close+0x60>)
 80056ae:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	7d12      	ldrb	r2, [r2, #20]
 80056ba:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fb f83e 	bl	8000744 <ifx_i2c_close>
 80056c8:	4603      	mov	r3, r0
 80056ca:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80056cc:	89fb      	ldrh	r3, [r7, #14]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80056d8:	89fb      	ldrh	r3, [r7, #14]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	0800571d 	.word	0x0800571d

080056e8 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80056f0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80056f4:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <check_optiga_comms_state+0x26>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	7c5b      	ldrb	r3, [r3, #17]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d004      	beq.n	800570e <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 800570a:	2300      	movs	r3, #0
 800570c:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 800570e:	89fb      	ldrh	r3, [r7, #14]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	4611      	mov	r1, r2
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	745a      	strb	r2, [r3, #17]
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	b29b      	uxth	r3, r3
 800575a:	b2da      	uxtb	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3301      	adds	r3, #1
 8005764:	887a      	ldrh	r2, [r7, #2]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	0e1b      	lsrs	r3, r3, #24
 8005784:	b2da      	uxtb	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	0c1a      	lsrs	r2, r3, #16
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3301      	adds	r3, #1
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	0a1a      	lsrs	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3302      	adds	r3, #2
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3303      	adds	r3, #3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	061a      	lsls	r2, r3, #24
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3301      	adds	r3, #1
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3302      	adds	r3, #2
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80057d6:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	3103      	adds	r1, #3
 80057dc:	7809      	ldrb	r1, [r1, #0]
 80057de:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	460b      	mov	r3, r1
 80057fc:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	6992      	ldr	r2, [r2, #24]
 8005810:	8879      	ldrh	r1, [r7, #2]
 8005812:	4610      	mov	r0, r2
 8005814:	4798      	blx	r3
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d004      	beq.n	8005836 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 800582c:	2200      	movs	r2, #0
 800582e:	2101      	movs	r1, #1
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f881 	bl	8005938 <optiga_util_set_comms_params>
    }
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <optiga_util_write_data_wrapper>:
                                                             uint16_t optiga_oid,
                                                             uint8_t write_type,
                                                             uint16_t offset,
                                                             const uint8_t * p_buffer,
                                                             uint16_t length)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	4608      	mov	r0, r1
 8005848:	4611      	mov	r1, r2
 800584a:	461a      	mov	r2, r3
 800584c:	4603      	mov	r3, r0
 800584e:	817b      	strh	r3, [r7, #10]
 8005850:	460b      	mov	r3, r1
 8005852:	727b      	strb	r3, [r7, #9]
 8005854:	4613      	mov	r3, r2
 8005856:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005858:	f240 3302 	movw	r3, #770	@ 0x302
 800585c:	82fb      	strh	r3, [r7, #22]
    optiga_set_data_object_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_buffer))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d006      	beq.n	8005872 <optiga_util_write_data_wrapper+0x34>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <optiga_util_write_data_wrapper+0x34>
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <optiga_util_write_data_wrapper+0x3c>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005872:	f240 3303 	movw	r3, #771	@ 0x303
 8005876:	82fb      	strh	r3, [r7, #22]
            break;
 8005878:	e056      	b.n	8005928 <optiga_util_write_data_wrapper+0xea>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8c1b      	ldrh	r3, [r3, #32]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d103      	bne.n	800588a <optiga_util_write_data_wrapper+0x4c>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005882:	f240 3305 	movw	r3, #773	@ 0x305
 8005886:	82fb      	strh	r3, [r7, #22]
            break;
 8005888:	e04e      	b.n	8005928 <optiga_util_write_data_wrapper+0xea>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2214      	movs	r2, #20
 8005898:	2100      	movs	r1, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fcb6 	bl	800620c <pal_os_memset>

        if (OPTIGA_UTIL_COUNT_DATA_OBJECT == write_type)
 80058a0:	7a7b      	ldrb	r3, [r7, #9]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d107      	bne.n	80058b6 <optiga_util_write_data_wrapper+0x78>
        {
            p_params->count = p_buffer[0];
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	739a      	strb	r2, [r3, #14]
            p_params->buffer = NULL;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e005      	b.n	80058c2 <optiga_util_write_data_wrapper+0x84>
        }
        else
        {
            p_params->count = 0;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2200      	movs	r2, #0
 80058ba:	739a      	strb	r2, [r3, #14]
            p_params->buffer = p_buffer;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	601a      	str	r2, [r3, #0]
        }
        p_params->oid = optiga_oid;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	897a      	ldrh	r2, [r7, #10]
 80058c6:	809a      	strh	r2, [r3, #4]
        p_params->offset = offset;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	80da      	strh	r2, [r3, #6]
        p_params->data_or_metadata = 0;//for Data
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2200      	movs	r2, #0
 80058d2:	731a      	strb	r2, [r3, #12]
        p_params->size = length;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80058d8:	811a      	strh	r2, [r3, #8]
        p_params->written_size = 0;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2200      	movs	r2, #0
 80058de:	815a      	strh	r2, [r3, #10]
        p_params->write_type = write_type;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	7a7a      	ldrb	r2, [r7, #9]
 80058e4:	735a      	strb	r2, [r3, #13]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6958      	ldr	r0, [r3, #20]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80058f0:	2200      	movs	r2, #0
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7fe fab8 	bl	8003e68 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6958      	ldr	r0, [r3, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005902:	2201      	movs	r2, #1
 8005904:	4619      	mov	r1, r3
 8005906:	f7fe faaf 	bl	8003e68 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_set_data_object(me->my_cmd, write_type, (optiga_set_data_object_params_t *)p_params);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	7a79      	ldrb	r1, [r7, #9]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fdd2 	bl	80054bc <optiga_cmd_set_data_object>
 8005918:	4603      	mov	r3, r0
 800591a:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 800591c:	8afb      	ldrh	r3, [r7, #22]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <optiga_util_write_data_wrapper+0xea>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	841a      	strh	r2, [r3, #32]
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ff78 	bl	800581e <optiga_util_reset_protection_level>

    return (return_value);
 800592e:	8afb      	ldrh	r3, [r7, #22]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
 8005944:	4613      	mov	r3, r2
 8005946:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d002      	beq.n	8005954 <optiga_util_set_comms_params+0x1c>
 800594e:	2b02      	cmp	r3, #2
 8005950:	d005      	beq.n	800595e <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005952:	e009      	b.n	8005968 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	78ba      	ldrb	r2, [r7, #2]
 8005958:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 800595c:	e004      	b.n	8005968 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	78ba      	ldrb	r2, [r7, #2]
 8005962:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 8005966:	bf00      	nop
        }
    }
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02b      	beq.n	80059e4 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 800598c:	2124      	movs	r1, #36	@ 0x24
 800598e:	2001      	movs	r0, #1
 8005990:	f000 fc14 	bl	80061bc <pal_os_calloc>
 8005994:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d025      	beq.n	80059e8 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2200      	movs	r2, #0
 80059ac:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	490c      	ldr	r1, [pc, #48]	@ (80059f4 <optiga_util_create+0x80>)
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fa61 	bl	8004e8c <optiga_cmd_create>
 80059ca:	4602      	mov	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <optiga_util_create+0x76>
        {
            pal_os_free(me);
 80059d8:	6978      	ldr	r0, [r7, #20]
 80059da:	f000 fbfd 	bl	80061d8 <pal_os_free>
            me = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e002      	b.n	80059ea <optiga_util_create+0x76>
            break;
 80059e4:	bf00      	nop
 80059e6:	e000      	b.n	80059ea <optiga_util_create+0x76>
            break;
 80059e8:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 80059ea:	697b      	ldr	r3, [r7, #20]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	080057f3 	.word	0x080057f3

080059f8 <optiga_util_destroy>:

optiga_lib_status_t optiga_util_destroy(optiga_util_t * me)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <optiga_util_destroy+0x16>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005a06:	f240 3303 	movw	r3, #771	@ 0x303
 8005a0a:	81fb      	strh	r3, [r7, #14]
            break;
 8005a0c:	e011      	b.n	8005a32 <optiga_util_destroy+0x3a>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8c1b      	ldrh	r3, [r3, #32]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d103      	bne.n	8005a1e <optiga_util_destroy+0x26>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005a16:	f240 3305 	movw	r3, #773	@ 0x305
 8005a1a:	81fb      	strh	r3, [r7, #14]
            break;
 8005a1c:	e009      	b.n	8005a32 <optiga_util_destroy+0x3a>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fab0 	bl	8004f88 <optiga_cmd_destroy>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fbd3 	bl	80061d8 <pal_os_free>
    } while (FALSE);
    return (return_value);
 8005a32:	89fb      	ldrh	r3, [r7, #14]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <optiga_util_open_application>:

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8005a48:	f240 3302 	movw	r3, #770	@ 0x302
 8005a4c:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <optiga_util_open_application+0x20>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005a5c:	f240 3303 	movw	r3, #771	@ 0x303
 8005a60:	81fb      	strh	r3, [r7, #14]
            break;
 8005a62:	e03d      	b.n	8005ae0 <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8c1b      	ldrh	r3, [r3, #32]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d103      	bne.n	8005a74 <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8005a6c:	f240 3305 	movw	r3, #773	@ 0x305
 8005a70:	81fb      	strh	r3, [r7, #14]
            break;
 8005a72:	e035      	b.n	8005ae0 <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6958      	ldr	r0, [r3, #20]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005a84:	2200      	movs	r2, #0
 8005a86:	4619      	mov	r1, r3
 8005a88:	f7fe f9ee 	bl	8003e68 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6958      	ldr	r0, [r3, #20]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005a96:	2201      	movs	r2, #1
 8005a98:	4619      	mov	r1, r3
 8005a9a:	f7fe f9e5 	bl	8003e68 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	2133      	movs	r1, #51	@ 0x33
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe f9db 	bl	8003e68 <optiga_cmd_set_shielded_connection_option>
 8005ab2:	e006      	b.n	8005ac2 <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	2111      	movs	r1, #17
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe f9d3 	bl	8003e68 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	78f9      	ldrb	r1, [r7, #3]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fc28 	bl	8005320 <optiga_cmd_open_application>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fe9c 	bl	800581e <optiga_util_reset_protection_level>

    return (return_value);
 8005ae6:	89fb      	ldrh	r3, [r7, #14]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <optiga_util_write_data>:
                                           uint16_t optiga_oid,
                                           uint8_t write_type,
                                           uint16_t offset,
                                           const uint8_t * buffer,
                                           uint16_t length)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	4608      	mov	r0, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	817b      	strh	r3, [r7, #10]
 8005b02:	460b      	mov	r3, r1
 8005b04:	727b      	strb	r3, [r7, #9]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8005b0a:	f240 3303 	movw	r3, #771	@ 0x303
 8005b0e:	82fb      	strh	r3, [r7, #22]
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((OPTIGA_UTIL_WRITE_ONLY != write_type) && (OPTIGA_UTIL_ERASE_AND_WRITE != write_type))
 8005b10:	7a7b      	ldrb	r3, [r7, #9]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <optiga_util_write_data+0x2c>
 8005b16:	7a7b      	ldrb	r3, [r7, #9]
 8005b18:	2b40      	cmp	r3, #64	@ 0x40
 8005b1a:	d10d      	bne.n	8005b38 <optiga_util_write_data+0x48>
        {
            break;
        }
        return_value =  optiga_util_write_data_wrapper(me,
 8005b1c:	88f8      	ldrh	r0, [r7, #6]
 8005b1e:	7a7a      	ldrb	r2, [r7, #9]
 8005b20:	8979      	ldrh	r1, [r7, #10]
 8005b22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fe86 	bl	800583e <optiga_util_write_data_wrapper>
 8005b32:	4603      	mov	r3, r0
 8005b34:	82fb      	strh	r3, [r7, #22]
 8005b36:	e000      	b.n	8005b3a <optiga_util_write_data+0x4a>
            break;
 8005b38:	bf00      	nop
                                                       write_type,
                                                       offset,
                                                       buffer,
                                                       length);
    } while (FALSE);
    return (return_value);
 8005b3a:	8afb      	ldrh	r3, [r7, #22]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <pal_deinit>:


pal_status_t pal_deinit(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	460b      	mov	r3, r1
 8005b72:	817b      	strh	r3, [r7, #10]
 8005b74:	4613      	mov	r3, r2
 8005b76:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d012      	beq.n	8005ba4 <pal_crypt_tls_prf_sha256+0x40>
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00f      	beq.n	8005ba4 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	82fb      	strh	r3, [r7, #22]
 8005b88:	e007      	b.n	8005b9a <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 8005b8a:	8afb      	ldrh	r3, [r7, #22]
 8005b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b8e:	4413      	add	r3, r2
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8005b94:	8afb      	ldrh	r3, [r7, #22]
 8005b96:	3301      	adds	r3, #1
 8005b98:	82fb      	strh	r3, [r7, #22]
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	8afa      	ldrh	r2, [r7, #22]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d3f2      	bcc.n	8005b8a <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	82fb      	strh	r3, [r7, #22]
 8005bc4:	e00a      	b.n	8005bdc <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 8005bc6:	8afb      	ldrh	r3, [r7, #22]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	441a      	add	r2, r3
 8005bcc:	8afb      	ldrh	r3, [r7, #22]
 8005bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd0:	440b      	add	r3, r1
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8005bd6:	8afb      	ldrh	r3, [r7, #22]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	82fb      	strh	r3, [r7, #22]
 8005bdc:	8afa      	ldrh	r2, [r7, #22]
 8005bde:	8c3b      	ldrh	r3, [r7, #32]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3f0      	bcc.n	8005bc6 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b087      	sub	sp, #28
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	603b      	str	r3, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	82fb      	strh	r3, [r7, #22]
 8005c06:	e00a      	b.n	8005c1e <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 8005c08:	8afb      	ldrh	r3, [r7, #22]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	441a      	add	r2, r3
 8005c0e:	8afb      	ldrh	r3, [r7, #22]
 8005c10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c12:	440b      	add	r3, r1
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 8005c18:	8afb      	ldrh	r3, [r7, #22]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	82fb      	strh	r3, [r7, #22]
 8005c1e:	8afa      	ldrh	r2, [r7, #22]
 8005c20:	8c3b      	ldrh	r3, [r7, #32]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d3f0      	bcc.n	8005c08 <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005c44:	2201      	movs	r2, #1
 8005c46:	4619      	mov	r1, r3
 8005c48:	f001 f8fe 	bl	8006e48 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8005c64:	2200      	movs	r2, #0
 8005c66:	4619      	mov	r1, r3
 8005c68:	f001 f8ee 	bl	8006e48 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8005c7c:	4b08      	ldr	r3, [pc, #32]	@ (8005ca0 <pal_i2c_acquire+0x2c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8005c84:	4b06      	ldr	r3, [pc, #24]	@ (8005ca0 <pal_i2c_acquire+0x2c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ca0 <pal_i2c_acquire+0x2c>)
 8005c8c:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e000      	b.n	8005c94 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000d6c 	.word	0x20000d6c

08005ca4 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <pal_i2c_release+0x1c>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000d6c 	.word	0x20000d6c

08005cc4 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8005ce2:	887a      	ldrh	r2, [r7, #2]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ffd8 	bl	8005ca4 <pal_i2c_release>
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}

08005cfc <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8005d36:	2301      	movs	r3, #1
 8005d38:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff ff9a 	bl	8005c74 <pal_i2c_acquire>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d120      	bne.n	8005d88 <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8005d46:	4a16      	ldr	r2, [pc, #88]	@ (8005da0 <pal_i2c_write+0x78>)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	b299      	uxth	r1, r3
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d5e:	9200      	str	r2, [sp, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	f001 fa09 	bl	8007178 <HAL_I2C_Master_Transmit>
 8005d66:	4603      	mov	r3, r0
 8005d68:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8005d6a:	7d7b      	ldrb	r3, [r7, #21]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8005d70:	2100      	movs	r1, #0
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f7ff ffa6 	bl	8005cc4 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	82fb      	strh	r3, [r7, #22]
 8005d7c:	e00a      	b.n	8005d94 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8005d7e:	2101      	movs	r1, #1
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff ff9f 	bl	8005cc4 <invoke_upper_layer_callback>
 8005d86:	e005      	b.n	8005d94 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff ff98 	bl	8005cc4 <invoke_upper_layer_callback>
    }

    return status;
 8005d94:	8afb      	ldrh	r3, [r7, #22]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000d70 	.word	0x20000d70

08005da4 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff ff5c 	bl	8005c74 <pal_i2c_acquire>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d120      	bne.n	8005e04 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8005dc2:	4a16      	ldr	r2, [pc, #88]	@ (8005e1c <pal_i2c_read+0x78>)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	b299      	uxth	r1, r3
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005dda:	9200      	str	r2, [sp, #0]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	f001 fac9 	bl	8007374 <HAL_I2C_Master_Receive>
 8005de2:	4603      	mov	r3, r0
 8005de4:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8005de6:	7d7b      	ldrb	r3, [r7, #21]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d106      	bne.n	8005dfa <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8005dec:	2100      	movs	r1, #0
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff ff68 	bl	8005cc4 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8005df4:	2300      	movs	r3, #0
 8005df6:	82fb      	strh	r3, [r7, #22]
 8005df8:	e00a      	b.n	8005e10 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff ff61 	bl	8005cc4 <invoke_upper_layer_callback>
 8005e02:	e005      	b.n	8005e10 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8005e08:	2102      	movs	r1, #2
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff ff5a 	bl	8005cc4 <invoke_upper_layer_callback>
    }

    return status;
 8005e10:	8afb      	ldrh	r3, [r7, #22]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000d70 	.word	0x20000d70

08005e20 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	80fb      	strh	r3, [r7, #6]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b33      	cmp	r3, #51	@ 0x33
 8005e58:	d043      	beq.n	8005ee2 <pal_os_datastore_write+0xa6>
 8005e5a:	2b33      	cmp	r3, #51	@ 0x33
 8005e5c:	dc5e      	bgt.n	8005f1c <pal_os_datastore_write+0xe0>
 8005e5e:	2b11      	cmp	r3, #17
 8005e60:	d002      	beq.n	8005e68 <pal_os_datastore_write+0x2c>
 8005e62:	2b22      	cmp	r3, #34	@ 0x22
 8005e64:	d020      	beq.n	8005ea8 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8005e66:	e059      	b.n	8005f1c <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005e68:	88bb      	ldrh	r3, [r7, #4]
 8005e6a:	2b40      	cmp	r3, #64	@ 0x40
 8005e6c:	d858      	bhi.n	8005f20 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8005e6e:	88bb      	ldrh	r3, [r7, #4]
 8005e70:	0a1b      	lsrs	r3, r3, #8
 8005e72:	b299      	uxth	r1, r3
 8005e74:	7b7b      	ldrb	r3, [r7, #13]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	737a      	strb	r2, [r7, #13]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	b2c9      	uxtb	r1, r1
 8005e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8005f2c <pal_os_datastore_write+0xf0>)
 8005e80:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8005e82:	7b7b      	ldrb	r3, [r7, #13]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	737a      	strb	r2, [r7, #13]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	88bb      	ldrh	r3, [r7, #4]
 8005e8c:	b2d9      	uxtb	r1, r3
 8005e8e:	4b27      	ldr	r3, [pc, #156]	@ (8005f2c <pal_os_datastore_write+0xf0>)
 8005e90:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8005e92:	7b7b      	ldrb	r3, [r7, #13]
 8005e94:	4a25      	ldr	r2, [pc, #148]	@ (8005f2c <pal_os_datastore_write+0xf0>)
 8005e96:	4413      	add	r3, r2
 8005e98:	88ba      	ldrh	r2, [r7, #4]
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f006 f95c 	bl	800c15a <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	81fb      	strh	r3, [r7, #14]
            break;
 8005ea6:	e03b      	b.n	8005f20 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8005ea8:	88bb      	ldrh	r3, [r7, #4]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	b299      	uxth	r1, r3
 8005eae:	7b7b      	ldrb	r3, [r7, #13]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	737a      	strb	r2, [r7, #13]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	b2c9      	uxtb	r1, r1
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f30 <pal_os_datastore_write+0xf4>)
 8005eba:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8005ebc:	7b7b      	ldrb	r3, [r7, #13]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	737a      	strb	r2, [r7, #13]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	88bb      	ldrh	r3, [r7, #4]
 8005ec6:	b2d9      	uxtb	r1, r3
 8005ec8:	4b19      	ldr	r3, [pc, #100]	@ (8005f30 <pal_os_datastore_write+0xf4>)
 8005eca:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8005ecc:	7b7b      	ldrb	r3, [r7, #13]
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <pal_os_datastore_write+0xf4>)
 8005ed0:	4413      	add	r3, r2
 8005ed2:	88ba      	ldrh	r2, [r7, #4]
 8005ed4:	6839      	ldr	r1, [r7, #0]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f006 f93f 	bl	800c15a <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8005edc:	2300      	movs	r3, #0
 8005ede:	81fb      	strh	r3, [r7, #14]
            break;
 8005ee0:	e01f      	b.n	8005f22 <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8005ee2:	88bb      	ldrh	r3, [r7, #4]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	7b7b      	ldrb	r3, [r7, #13]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	737a      	strb	r2, [r7, #13]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	b2c9      	uxtb	r1, r1
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <pal_os_datastore_write+0xf8>)
 8005ef4:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8005ef6:	7b7b      	ldrb	r3, [r7, #13]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	737a      	strb	r2, [r7, #13]
 8005efc:	461a      	mov	r2, r3
 8005efe:	88bb      	ldrh	r3, [r7, #4]
 8005f00:	b2d9      	uxtb	r1, r3
 8005f02:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <pal_os_datastore_write+0xf8>)
 8005f04:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	4a0a      	ldr	r2, [pc, #40]	@ (8005f34 <pal_os_datastore_write+0xf8>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	88ba      	ldrh	r2, [r7, #4]
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f006 f922 	bl	800c15a <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8005f16:	2300      	movs	r3, #0
 8005f18:	81fb      	strh	r3, [r7, #14]
            break;
 8005f1a:	e002      	b.n	8005f22 <pal_os_datastore_write+0xe6>
            break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <pal_os_datastore_write+0xe6>
            break;
 8005f20:	bf00      	nop
        }
    }
    return return_status;
 8005f22:	89fb      	ldrh	r3, [r7, #14]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	2000052c 	.word	0x2000052c
 8005f30:	20000d74 	.word	0x20000d74
 8005f34:	20000db8 	.word	0x20000db8

08005f38 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8005f4e:	89fb      	ldrh	r3, [r7, #14]
 8005f50:	2b33      	cmp	r3, #51	@ 0x33
 8005f52:	d049      	beq.n	8005fe8 <pal_os_datastore_read+0xb0>
 8005f54:	2b33      	cmp	r3, #51	@ 0x33
 8005f56:	dc67      	bgt.n	8006028 <pal_os_datastore_read+0xf0>
 8005f58:	2b11      	cmp	r3, #17
 8005f5a:	d002      	beq.n	8005f62 <pal_os_datastore_read+0x2a>
 8005f5c:	2b22      	cmp	r3, #34	@ 0x22
 8005f5e:	d023      	beq.n	8005fa8 <pal_os_datastore_read+0x70>
 8005f60:	e062      	b.n	8006028 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8005f62:	7d7b      	ldrb	r3, [r7, #21]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	757a      	strb	r2, [r7, #21]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4b34      	ldr	r3, [pc, #208]	@ (800603c <pal_os_datastore_read+0x104>)
 8005f6c:	5c9b      	ldrb	r3, [r3, r2]
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8005f72:	7d7b      	ldrb	r3, [r7, #21]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	757a      	strb	r2, [r7, #21]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4b30      	ldr	r3, [pc, #192]	@ (800603c <pal_os_datastore_read+0x104>)
 8005f7c:	5c9b      	ldrb	r3, [r3, r2]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	8a7b      	ldrh	r3, [r7, #18]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005f86:	8a7b      	ldrh	r3, [r7, #18]
 8005f88:	2b40      	cmp	r3, #64	@ 0x40
 8005f8a:	d851      	bhi.n	8006030 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8005f8c:	7d7b      	ldrb	r3, [r7, #21]
 8005f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800603c <pal_os_datastore_read+0x104>)
 8005f90:	4413      	add	r3, r2
 8005f92:	8a7a      	ldrh	r2, [r7, #18]
 8005f94:	4619      	mov	r1, r3
 8005f96:	68b8      	ldr	r0, [r7, #8]
 8005f98:	f006 f8df 	bl	800c15a <memcpy>
                *p_buffer_length = data_length;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8a7a      	ldrh	r2, [r7, #18]
 8005fa0:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8005fa6:	e043      	b.n	8006030 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8005fa8:	7d7b      	ldrb	r3, [r7, #21]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	757a      	strb	r2, [r7, #21]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	4b23      	ldr	r3, [pc, #140]	@ (8006040 <pal_os_datastore_read+0x108>)
 8005fb2:	5c9b      	ldrb	r3, [r3, r2]
 8005fb4:	021b      	lsls	r3, r3, #8
 8005fb6:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8005fb8:	7d7b      	ldrb	r3, [r7, #21]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	757a      	strb	r2, [r7, #21]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8006040 <pal_os_datastore_read+0x108>)
 8005fc2:	5c9b      	ldrb	r3, [r3, r2]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	8a7b      	ldrh	r3, [r7, #18]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8005fcc:	7d7b      	ldrb	r3, [r7, #21]
 8005fce:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <pal_os_datastore_read+0x108>)
 8005fd0:	4413      	add	r3, r2
 8005fd2:	8a7a      	ldrh	r2, [r7, #18]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	68b8      	ldr	r0, [r7, #8]
 8005fd8:	f006 f8bf 	bl	800c15a <memcpy>
            *p_buffer_length = data_length;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	8a7a      	ldrh	r2, [r7, #18]
 8005fe0:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	82fb      	strh	r3, [r7, #22]
            break;
 8005fe6:	e024      	b.n	8006032 <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8005fe8:	7d7b      	ldrb	r3, [r7, #21]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	757a      	strb	r2, [r7, #21]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <pal_os_datastore_read+0x10c>)
 8005ff2:	5c9b      	ldrb	r3, [r3, r2]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8005ff8:	7d7b      	ldrb	r3, [r7, #21]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	757a      	strb	r2, [r7, #21]
 8005ffe:	461a      	mov	r2, r3
 8006000:	4b10      	ldr	r3, [pc, #64]	@ (8006044 <pal_os_datastore_read+0x10c>)
 8006002:	5c9b      	ldrb	r3, [r3, r2]
 8006004:	461a      	mov	r2, r3
 8006006:	8a7b      	ldrh	r3, [r7, #18]
 8006008:	4313      	orrs	r3, r2
 800600a:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 800600c:	7d7b      	ldrb	r3, [r7, #21]
 800600e:	4a0d      	ldr	r2, [pc, #52]	@ (8006044 <pal_os_datastore_read+0x10c>)
 8006010:	4413      	add	r3, r2
 8006012:	8a7a      	ldrh	r2, [r7, #18]
 8006014:	4619      	mov	r1, r3
 8006016:	68b8      	ldr	r0, [r7, #8]
 8006018:	f006 f89f 	bl	800c15a <memcpy>
            *p_buffer_length = data_length;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8a7a      	ldrh	r2, [r7, #18]
 8006020:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006022:	2300      	movs	r3, #0
 8006024:	82fb      	strh	r3, [r7, #22]
            break;
 8006026:	e004      	b.n	8006032 <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	801a      	strh	r2, [r3, #0]
            break;
 800602e:	e000      	b.n	8006032 <pal_os_datastore_read+0xfa>
            break;
 8006030:	bf00      	nop
        }
    }

    return return_status;
 8006032:	8afb      	ldrh	r3, [r7, #22]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2000052c 	.word	0x2000052c
 8006040:	20000d74 	.word	0x20000d74
 8006044:	20000db8 	.word	0x20000db8

08006048 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	7a1b      	ldrb	r3, [r3, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2201      	movs	r2, #1
 8006060:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8006062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f82a 	bl	80060c4 <pal_os_event_register_callback_oneshot>
    }
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	721a      	strb	r2, [r3, #8]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <pal_os_event_create+0x20>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4804      	ldr	r0, [pc, #16]	@ (80060c0 <pal_os_event_create+0x2c>)
 80060b0:	f7ff ffca 	bl	8006048 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 80060b4:	4b02      	ldr	r3, [pc, #8]	@ (80060c0 <pal_os_event_create+0x2c>)
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000dc4 	.word	0x20000dc4

080060c4 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	4a0d      	ldr	r2, [pc, #52]	@ (800610c <pal_os_event_register_callback_oneshot+0x48>)
 80060d6:	fba2 2303 	umull	r2, r3, r2, r3
 80060da:	099b      	lsrs	r3, r3, #6
 80060dc:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 80060ea:	f000 fb47 	bl	800677c <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	4413      	add	r3, r2
 80060f4:	4a06      	ldr	r2, [pc, #24]	@ (8006110 <pal_os_event_register_callback_oneshot+0x4c>)
 80060f6:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 80060f8:	4b06      	ldr	r3, [pc, #24]	@ (8006114 <pal_os_event_register_callback_oneshot+0x50>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 80060fe:	4806      	ldr	r0, [pc, #24]	@ (8006118 <pal_os_event_register_callback_oneshot+0x54>)
 8006100:	f004 f9d6 	bl	800a4b0 <HAL_TIM_Base_Start_IT>
}
 8006104:	bf00      	nop
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	10624dd3 	.word	0x10624dd3
 8006110:	20000ddc 	.word	0x20000ddc
 8006114:	20000de0 	.word	0x20000de0
 8006118:	2000064c 	.word	0x2000064c

0800611c <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <pal_os_event_trigger_registered_callback+0x3c>)
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d011      	beq.n	800614e <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 800612a:	4b0b      	ldr	r3, [pc, #44]	@ (8006158 <pal_os_event_trigger_registered_callback+0x3c>)
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <pal_os_event_trigger_registered_callback+0x3c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8006136:	4b08      	ldr	r3, [pc, #32]	@ (8006158 <pal_os_event_trigger_registered_callback+0x3c>)
 8006138:	2200      	movs	r2, #0
 800613a:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 800613c:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <pal_os_event_trigger_registered_callback+0x3c>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 8006142:	4b06      	ldr	r3, [pc, #24]	@ (800615c <pal_os_event_trigger_registered_callback+0x40>)
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6838      	ldr	r0, [r7, #0]
 800614c:	4798      	blx	r3
    }
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000dc4 	.word	0x20000dc4
 800615c:	20000de0 	.word	0x20000de0

08006160 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006164:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <pal_os_event_timer_tick+0x24>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <pal_os_event_timer_tick+0x1e>
 800616c:	f000 fb06 	bl	800677c <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <pal_os_event_timer_tick+0x28>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d301      	bcc.n	800617e <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 800617a:	f7ff ffcf 	bl	800611c <pal_os_event_trigger_registered_callback>
    }
}
 800617e:	bf00      	nop
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000de0 	.word	0x20000de0
 8006188:	20000ddc 	.word	0x20000ddc

0800618c <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 80061ae:	b480      	push	{r7}
 80061b0:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 80061b2:	bf00      	nop
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f005 fd6d 	bl	800bca8 <calloc>
 80061ce:	4603      	mov	r3, r0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <pal_os_free>:

void pal_os_free(void * block)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
    free(block);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f005 fd7d 	bl	800bce0 <free>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f005 ffab 	bl	800c15a <memcpy>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	b2db      	uxtb	r3, r3
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f005 ff55 	bl	800c0d0 <memset>
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 8006232:	f000 faa3 	bl	800677c <HAL_GetTick>
 8006236:	4603      	mov	r3, r0
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}

0800623c <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8006240:	f000 fa9c 	bl	800677c <HAL_GetTick>
 8006244:	4603      	mov	r3, r0
 8006246:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800624a:	fb02 f303 	mul.w	r3, r2, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800625a:	2300      	movs	r3, #0
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	4b10      	ldr	r3, [pc, #64]	@ (80062a0 <HAL_MspInit+0x4c>)
 8006260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006262:	4a0f      	ldr	r2, [pc, #60]	@ (80062a0 <HAL_MspInit+0x4c>)
 8006264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006268:	6453      	str	r3, [r2, #68]	@ 0x44
 800626a:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <HAL_MspInit+0x4c>)
 800626c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006276:	2300      	movs	r3, #0
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	4b09      	ldr	r3, [pc, #36]	@ (80062a0 <HAL_MspInit+0x4c>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	4a08      	ldr	r2, [pc, #32]	@ (80062a0 <HAL_MspInit+0x4c>)
 8006280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006284:	6413      	str	r3, [r2, #64]	@ 0x40
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <HAL_MspInit+0x4c>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40023800 	.word	0x40023800

080062a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	@ 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	609a      	str	r2, [r3, #8]
 80062b8:	60da      	str	r2, [r3, #12]
 80062ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <HAL_I2C_MspInit+0x94>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d134      	bne.n	8006330 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	4b1c      	ldr	r3, [pc, #112]	@ (800633c <HAL_I2C_MspInit+0x98>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ce:	4a1b      	ldr	r2, [pc, #108]	@ (800633c <HAL_I2C_MspInit+0x98>)
 80062d0:	f043 0302 	orr.w	r3, r3, #2
 80062d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80062d6:	4b19      	ldr	r3, [pc, #100]	@ (800633c <HAL_I2C_MspInit+0x98>)
 80062d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	613b      	str	r3, [r7, #16]
 80062e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80062e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80062e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80062e8:	2312      	movs	r3, #18
 80062ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f0:	2303      	movs	r3, #3
 80062f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80062f4:	2304      	movs	r3, #4
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062f8:	f107 0314 	add.w	r3, r7, #20
 80062fc:	4619      	mov	r1, r3
 80062fe:	4810      	ldr	r0, [pc, #64]	@ (8006340 <HAL_I2C_MspInit+0x9c>)
 8006300:	f000 fc1e 	bl	8006b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <HAL_I2C_MspInit+0x98>)
 800630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630c:	4a0b      	ldr	r2, [pc, #44]	@ (800633c <HAL_I2C_MspInit+0x98>)
 800630e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006312:	6413      	str	r3, [r2, #64]	@ 0x40
 8006314:	4b09      	ldr	r3, [pc, #36]	@ (800633c <HAL_I2C_MspInit+0x98>)
 8006316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006320:	2200      	movs	r2, #0
 8006322:	2100      	movs	r1, #0
 8006324:	2020      	movs	r0, #32
 8006326:	f000 fb34 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800632a:	2020      	movs	r0, #32
 800632c:	f000 fb4d 	bl	80069ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006330:	bf00      	nop
 8006332:	3728      	adds	r7, #40	@ 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40005400 	.word	0x40005400
 800633c:	40023800 	.word	0x40023800
 8006340:	40020400 	.word	0x40020400

08006344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006354:	d115      	bne.n	8006382 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <HAL_TIM_Base_MspInit+0x48>)
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	4a0b      	ldr	r2, [pc, #44]	@ (800638c <HAL_TIM_Base_MspInit+0x48>)
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	6413      	str	r3, [r2, #64]	@ 0x40
 8006366:	4b09      	ldr	r3, [pc, #36]	@ (800638c <HAL_TIM_Base_MspInit+0x48>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006372:	2200      	movs	r2, #0
 8006374:	2100      	movs	r1, #0
 8006376:	201c      	movs	r0, #28
 8006378:	f000 fb0b 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800637c:	201c      	movs	r0, #28
 800637e:	f000 fb24 	bl	80069ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800

08006390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	@ 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 0314 	add.w	r3, r7, #20
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006424 <HAL_UART_MspInit+0x94>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d133      	bne.n	800641a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006428 <HAL_UART_MspInit+0x98>)
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006428 <HAL_UART_MspInit+0x98>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80063c2:	4b19      	ldr	r3, [pc, #100]	@ (8006428 <HAL_UART_MspInit+0x98>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	4b15      	ldr	r3, [pc, #84]	@ (8006428 <HAL_UART_MspInit+0x98>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <HAL_UART_MspInit+0x98>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80063de:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <HAL_UART_MspInit+0x98>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80063ea:	230c      	movs	r3, #12
 80063ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ee:	2302      	movs	r3, #2
 80063f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f6:	2300      	movs	r3, #0
 80063f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063fa:	2307      	movs	r3, #7
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063fe:	f107 0314 	add.w	r3, r7, #20
 8006402:	4619      	mov	r1, r3
 8006404:	4809      	ldr	r0, [pc, #36]	@ (800642c <HAL_UART_MspInit+0x9c>)
 8006406:	f000 fb9b 	bl	8006b40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800640a:	2200      	movs	r2, #0
 800640c:	2100      	movs	r1, #0
 800640e:	2026      	movs	r0, #38	@ 0x26
 8006410:	f000 fabf 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006414:	2026      	movs	r0, #38	@ 0x26
 8006416:	f000 fad8 	bl	80069ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800641a:	bf00      	nop
 800641c:	3728      	adds	r7, #40	@ 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40004400 	.word	0x40004400
 8006428:	40023800 	.word	0x40023800
 800642c:	40020000 	.word	0x40020000

08006430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <NMI_Handler+0x4>

08006438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <HardFault_Handler+0x4>

08006440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006444:	bf00      	nop
 8006446:	e7fd      	b.n	8006444 <MemManage_Handler+0x4>

08006448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <BusFault_Handler+0x4>

08006450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <UsageFault_Handler+0x4>

08006458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006466:	b480      	push	{r7}
 8006468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800646a:	bf00      	nop
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006486:	f000 f965 	bl	8006754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800648a:	bf00      	nop
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006494:	4802      	ldr	r0, [pc, #8]	@ (80064a0 <TIM2_IRQHandler+0x10>)
 8006496:	f004 f86d 	bl	800a574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2000064c 	.word	0x2000064c

080064a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80064a8:	4802      	ldr	r0, [pc, #8]	@ (80064b4 <I2C1_EV_IRQHandler+0x10>)
 80064aa:	f001 fac3 	bl	8007a34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200005f8 	.word	0x200005f8

080064b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80064bc:	4802      	ldr	r0, [pc, #8]	@ (80064c8 <I2C1_ER_IRQHandler+0x10>)
 80064be:	f001 fc0c 	bl	8007cda <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200005f8 	.word	0x200005f8

080064cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80064d0:	4802      	ldr	r0, [pc, #8]	@ (80064dc <USART2_IRQHandler+0x10>)
 80064d2:	f004 fcad 	bl	800ae30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000694 	.word	0x20000694

080064e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80064e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80064e8:	f000 fcc8 	bl	8006e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e00a      	b.n	8006518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006502:	f3af 8000 	nop.w
 8006506:	4601      	mov	r1, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	60ba      	str	r2, [r7, #8]
 800650e:	b2ca      	uxtb	r2, r1
 8006510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	3301      	adds	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	dbf0      	blt.n	8006502 <_read+0x12>
  }

  return len;
 8006520:	687b      	ldr	r3, [r7, #4]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b086      	sub	sp, #24
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e009      	b.n	8006550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	60ba      	str	r2, [r7, #8]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd f9e1 	bl	800390c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	3301      	adds	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	429a      	cmp	r2, r3
 8006556:	dbf1      	blt.n	800653c <_write+0x12>
  }
  return len;
 8006558:	687b      	ldr	r3, [r7, #4]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_close>:

int _close(int file)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800656a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800658a:	605a      	str	r2, [r3, #4]
  return 0;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <_isatty>:

int _isatty(int file)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80065a2:	2301      	movs	r3, #1
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065d4:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <_sbrk+0x5c>)
 80065d6:	4b15      	ldr	r3, [pc, #84]	@ (800662c <_sbrk+0x60>)
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065e0:	4b13      	ldr	r3, [pc, #76]	@ (8006630 <_sbrk+0x64>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d102      	bne.n	80065ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065e8:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <_sbrk+0x64>)
 80065ea:	4a12      	ldr	r2, [pc, #72]	@ (8006634 <_sbrk+0x68>)
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065ee:	4b10      	ldr	r3, [pc, #64]	@ (8006630 <_sbrk+0x64>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d207      	bcs.n	800660c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065fc:	f005 fd80 	bl	800c100 <__errno>
 8006600:	4603      	mov	r3, r0
 8006602:	220c      	movs	r2, #12
 8006604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800660a:	e009      	b.n	8006620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800660c:	4b08      	ldr	r3, [pc, #32]	@ (8006630 <_sbrk+0x64>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006612:	4b07      	ldr	r3, [pc, #28]	@ (8006630 <_sbrk+0x64>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4413      	add	r3, r2
 800661a:	4a05      	ldr	r2, [pc, #20]	@ (8006630 <_sbrk+0x64>)
 800661c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800661e:	68fb      	ldr	r3, [r7, #12]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20018000 	.word	0x20018000
 800662c:	00000400 	.word	0x00000400
 8006630:	20000de4 	.word	0x20000de4
 8006634:	20000f38 	.word	0x20000f38

08006638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800663c:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <SystemInit+0x20>)
 800663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006642:	4a05      	ldr	r2, [pc, #20]	@ (8006658 <SystemInit+0x20>)
 8006644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800664c:	bf00      	nop
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	e000ed00 	.word	0xe000ed00

0800665c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800665c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006694 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006660:	f7ff ffea 	bl	8006638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006664:	480c      	ldr	r0, [pc, #48]	@ (8006698 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006666:	490d      	ldr	r1, [pc, #52]	@ (800669c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006668:	4a0d      	ldr	r2, [pc, #52]	@ (80066a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800666a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800666c:	e002      	b.n	8006674 <LoopCopyDataInit>

0800666e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800666e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006672:	3304      	adds	r3, #4

08006674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006678:	d3f9      	bcc.n	800666e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800667a:	4a0a      	ldr	r2, [pc, #40]	@ (80066a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800667c:	4c0a      	ldr	r4, [pc, #40]	@ (80066a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800667e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006680:	e001      	b.n	8006686 <LoopFillZerobss>

08006682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006684:	3204      	adds	r2, #4

08006686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006688:	d3fb      	bcc.n	8006682 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800668a:	f005 fd3f 	bl	800c10c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800668e:	f7fd f9ff 	bl	8003a90 <main>
  bx  lr    
 8006692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800669c:	200005d8 	.word	0x200005d8
  ldr r2, =_sidata
 80066a0:	0800cefc 	.word	0x0800cefc
  ldr r2, =_sbss
 80066a4:	200005d8 	.word	0x200005d8
  ldr r4, =_ebss
 80066a8:	20000f38 	.word	0x20000f38

080066ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066ac:	e7fe      	b.n	80066ac <ADC_IRQHandler>
	...

080066b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80066b4:	4b0e      	ldr	r3, [pc, #56]	@ (80066f0 <HAL_Init+0x40>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a0d      	ldr	r2, [pc, #52]	@ (80066f0 <HAL_Init+0x40>)
 80066ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <HAL_Init+0x40>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a0a      	ldr	r2, [pc, #40]	@ (80066f0 <HAL_Init+0x40>)
 80066c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80066cc:	4b08      	ldr	r3, [pc, #32]	@ (80066f0 <HAL_Init+0x40>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a07      	ldr	r2, [pc, #28]	@ (80066f0 <HAL_Init+0x40>)
 80066d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066d8:	2003      	movs	r0, #3
 80066da:	f000 f94f 	bl	800697c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80066de:	2000      	movs	r0, #0
 80066e0:	f000 f808 	bl	80066f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80066e4:	f7ff fdb6 	bl	8006254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40023c00 	.word	0x40023c00

080066f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <HAL_InitTick+0x54>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b12      	ldr	r3, [pc, #72]	@ (800674c <HAL_InitTick+0x58>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800670a:	fbb3 f3f1 	udiv	r3, r3, r1
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f967 	bl	80069e6 <HAL_SYSTICK_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e00e      	b.n	8006740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b0f      	cmp	r3, #15
 8006726:	d80a      	bhi.n	800673e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006728:	2200      	movs	r2, #0
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006730:	f000 f92f 	bl	8006992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006734:	4a06      	ldr	r2, [pc, #24]	@ (8006750 <HAL_InitTick+0x5c>)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	e000      	b.n	8006740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000570 	.word	0x20000570
 800674c:	20000578 	.word	0x20000578
 8006750:	20000574 	.word	0x20000574

08006754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006758:	4b06      	ldr	r3, [pc, #24]	@ (8006774 <HAL_IncTick+0x20>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	4b06      	ldr	r3, [pc, #24]	@ (8006778 <HAL_IncTick+0x24>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4413      	add	r3, r2
 8006764:	4a04      	ldr	r2, [pc, #16]	@ (8006778 <HAL_IncTick+0x24>)
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	bf00      	nop
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000578 	.word	0x20000578
 8006778:	20000de8 	.word	0x20000de8

0800677c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return uwTick;
 8006780:	4b03      	ldr	r3, [pc, #12]	@ (8006790 <HAL_GetTick+0x14>)
 8006782:	681b      	ldr	r3, [r3, #0]
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000de8 	.word	0x20000de8

08006794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800679c:	f7ff ffee 	bl	800677c <HAL_GetTick>
 80067a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ac:	d005      	beq.n	80067ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067ae:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <HAL_Delay+0x44>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80067ba:	bf00      	nop
 80067bc:	f7ff ffde 	bl	800677c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d8f7      	bhi.n	80067bc <HAL_Delay+0x28>
  {
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000578 	.word	0x20000578

080067dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800680c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680e:	4a04      	ldr	r2, [pc, #16]	@ (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	60d3      	str	r3, [r2, #12]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	e000ed00 	.word	0xe000ed00

08006824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006828:	4b04      	ldr	r3, [pc, #16]	@ (800683c <__NVIC_GetPriorityGrouping+0x18>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	f003 0307 	and.w	r3, r3, #7
}
 8006832:	4618      	mov	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed00 	.word	0xe000ed00

08006840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800684a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db0b      	blt.n	800686a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	f003 021f 	and.w	r2, r3, #31
 8006858:	4907      	ldr	r1, [pc, #28]	@ (8006878 <__NVIC_EnableIRQ+0x38>)
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	2001      	movs	r0, #1
 8006862:	fa00 f202 	lsl.w	r2, r0, r2
 8006866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	e000e100 	.word	0xe000e100

0800687c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db0a      	blt.n	80068a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	490c      	ldr	r1, [pc, #48]	@ (80068c8 <__NVIC_SetPriority+0x4c>)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	0112      	lsls	r2, r2, #4
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	440b      	add	r3, r1
 80068a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068a4:	e00a      	b.n	80068bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4908      	ldr	r1, [pc, #32]	@ (80068cc <__NVIC_SetPriority+0x50>)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3b04      	subs	r3, #4
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	440b      	add	r3, r1
 80068ba:	761a      	strb	r2, [r3, #24]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000e100 	.word	0xe000e100
 80068cc:	e000ed00 	.word	0xe000ed00

080068d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b089      	sub	sp, #36	@ 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f1c3 0307 	rsb	r3, r3, #7
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf28      	it	cs
 80068ee:	2304      	movcs	r3, #4
 80068f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d902      	bls.n	8006900 <NVIC_EncodePriority+0x30>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3b03      	subs	r3, #3
 80068fe:	e000      	b.n	8006902 <NVIC_EncodePriority+0x32>
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43da      	mvns	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	401a      	ands	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006918:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	43d9      	mvns	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006928:	4313      	orrs	r3, r2
         );
}
 800692a:	4618      	mov	r0, r3
 800692c:	3724      	adds	r7, #36	@ 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3b01      	subs	r3, #1
 8006944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006948:	d301      	bcc.n	800694e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800694a:	2301      	movs	r3, #1
 800694c:	e00f      	b.n	800696e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800694e:	4a0a      	ldr	r2, [pc, #40]	@ (8006978 <SysTick_Config+0x40>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006956:	210f      	movs	r1, #15
 8006958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800695c:	f7ff ff8e 	bl	800687c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006960:	4b05      	ldr	r3, [pc, #20]	@ (8006978 <SysTick_Config+0x40>)
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006966:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <SysTick_Config+0x40>)
 8006968:	2207      	movs	r2, #7
 800696a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	e000e010 	.word	0xe000e010

0800697c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff29 	bl	80067dc <__NVIC_SetPriorityGrouping>
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006992:	b580      	push	{r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	4603      	mov	r3, r0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069a4:	f7ff ff3e 	bl	8006824 <__NVIC_GetPriorityGrouping>
 80069a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	6978      	ldr	r0, [r7, #20]
 80069b0:	f7ff ff8e 	bl	80068d0 <NVIC_EncodePriority>
 80069b4:	4602      	mov	r2, r0
 80069b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff5d 	bl	800687c <__NVIC_SetPriority>
}
 80069c2:	bf00      	nop
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	4603      	mov	r3, r0
 80069d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff31 	bl	8006840 <__NVIC_EnableIRQ>
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff ffa2 	bl	8006938 <SysTick_Config>
 80069f4:	4603      	mov	r3, r0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a0c:	f7ff feb6 	bl	800677c <HAL_GetTick>
 8006a10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d008      	beq.n	8006a30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2280      	movs	r2, #128	@ 0x80
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e052      	b.n	8006ad6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0216 	bic.w	r2, r2, #22
 8006a3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d103      	bne.n	8006a60 <HAL_DMA_Abort+0x62>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d007      	beq.n	8006a70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0208 	bic.w	r2, r2, #8
 8006a6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a80:	e013      	b.n	8006aaa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a82:	f7ff fe7b 	bl	800677c <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b05      	cmp	r3, #5
 8006a8e:	d90c      	bls.n	8006aaa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e015      	b.n	8006ad6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e4      	bne.n	8006a82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abc:	223f      	movs	r2, #63	@ 0x3f
 8006abe:	409a      	lsls	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d004      	beq.n	8006afc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2280      	movs	r2, #128	@ 0x80
 8006af6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e00c      	b.n	8006b16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2205      	movs	r2, #5
 8006b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0201 	bic.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b30:	b2db      	uxtb	r3, r3
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	@ 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	e159      	b.n	8006e10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	f040 8148 	bne.w	8006e0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d005      	beq.n	8006b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d130      	bne.n	8006bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	2203      	movs	r2, #3
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bc8:	2201      	movs	r2, #1
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	f003 0201 	and.w	r2, r3, #1
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f003 0303 	and.w	r3, r3, #3
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d017      	beq.n	8006c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	43db      	mvns	r3, r3
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	4013      	ands	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689a      	ldr	r2, [r3, #8]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	69ba      	ldr	r2, [r7, #24]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f003 0303 	and.w	r3, r3, #3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d123      	bne.n	8006c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	08da      	lsrs	r2, r3, #3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3208      	adds	r2, #8
 8006c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	f003 0307 	and.w	r3, r3, #7
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	220f      	movs	r2, #15
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	08da      	lsrs	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3208      	adds	r2, #8
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	2203      	movs	r2, #3
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f003 0203 	and.w	r2, r3, #3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80a2 	beq.w	8006e0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	4b57      	ldr	r3, [pc, #348]	@ (8006e28 <HAL_GPIO_Init+0x2e8>)
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	4a56      	ldr	r2, [pc, #344]	@ (8006e28 <HAL_GPIO_Init+0x2e8>)
 8006cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cd6:	4b54      	ldr	r3, [pc, #336]	@ (8006e28 <HAL_GPIO_Init+0x2e8>)
 8006cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ce2:	4a52      	ldr	r2, [pc, #328]	@ (8006e2c <HAL_GPIO_Init+0x2ec>)
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	3302      	adds	r3, #2
 8006cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	220f      	movs	r2, #15
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4013      	ands	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a49      	ldr	r2, [pc, #292]	@ (8006e30 <HAL_GPIO_Init+0x2f0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d019      	beq.n	8006d42 <HAL_GPIO_Init+0x202>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a48      	ldr	r2, [pc, #288]	@ (8006e34 <HAL_GPIO_Init+0x2f4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d013      	beq.n	8006d3e <HAL_GPIO_Init+0x1fe>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a47      	ldr	r2, [pc, #284]	@ (8006e38 <HAL_GPIO_Init+0x2f8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00d      	beq.n	8006d3a <HAL_GPIO_Init+0x1fa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a46      	ldr	r2, [pc, #280]	@ (8006e3c <HAL_GPIO_Init+0x2fc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d007      	beq.n	8006d36 <HAL_GPIO_Init+0x1f6>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a45      	ldr	r2, [pc, #276]	@ (8006e40 <HAL_GPIO_Init+0x300>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d101      	bne.n	8006d32 <HAL_GPIO_Init+0x1f2>
 8006d2e:	2304      	movs	r3, #4
 8006d30:	e008      	b.n	8006d44 <HAL_GPIO_Init+0x204>
 8006d32:	2307      	movs	r3, #7
 8006d34:	e006      	b.n	8006d44 <HAL_GPIO_Init+0x204>
 8006d36:	2303      	movs	r3, #3
 8006d38:	e004      	b.n	8006d44 <HAL_GPIO_Init+0x204>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e002      	b.n	8006d44 <HAL_GPIO_Init+0x204>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <HAL_GPIO_Init+0x204>
 8006d42:	2300      	movs	r3, #0
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	f002 0203 	and.w	r2, r2, #3
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	4093      	lsls	r3, r2
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d54:	4935      	ldr	r1, [pc, #212]	@ (8006e2c <HAL_GPIO_Init+0x2ec>)
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	089b      	lsrs	r3, r3, #2
 8006d5a:	3302      	adds	r3, #2
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d62:	4b38      	ldr	r3, [pc, #224]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	43db      	mvns	r3, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006d7e:	69ba      	ldr	r2, [r7, #24]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d86:	4a2f      	ldr	r2, [pc, #188]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006db0:	4a24      	ldr	r2, [pc, #144]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006db6:	4b23      	ldr	r3, [pc, #140]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	43db      	mvns	r3, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006dda:	4a1a      	ldr	r2, [pc, #104]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006de0:	4b18      	ldr	r3, [pc, #96]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	43db      	mvns	r3, r3
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	4013      	ands	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e04:	4a0f      	ldr	r2, [pc, #60]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	2b0f      	cmp	r3, #15
 8006e14:	f67f aea2 	bls.w	8006b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	3724      	adds	r7, #36	@ 0x24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	40013800 	.word	0x40013800
 8006e30:	40020000 	.word	0x40020000
 8006e34:	40020400 	.word	0x40020400
 8006e38:	40020800 	.word	0x40020800
 8006e3c:	40020c00 	.word	0x40020c00
 8006e40:	40021000 	.word	0x40021000
 8006e44:	40013c00 	.word	0x40013c00

08006e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	807b      	strh	r3, [r7, #2]
 8006e54:	4613      	mov	r3, r2
 8006e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e58:	787b      	ldrb	r3, [r7, #1]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e5e:	887a      	ldrh	r2, [r7, #2]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e64:	e003      	b.n	8006e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	041a      	lsls	r2, r3, #16
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	619a      	str	r2, [r3, #24]
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
	...

08006e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e86:	4b08      	ldr	r3, [pc, #32]	@ (8006ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	88fb      	ldrh	r3, [r7, #6]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e92:	4a05      	ldr	r2, [pc, #20]	@ (8006ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e94:	88fb      	ldrh	r3, [r7, #6]
 8006e96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 f806 	bl	8006eac <HAL_GPIO_EXTI_Callback>
  }
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40013c00 	.word	0x40013c00

08006eac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e12b      	b.n	800712e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff f9da 	bl	80062a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	@ 0x24
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f28:	f003 fa4a 	bl	800a3c0 <HAL_RCC_GetPCLK1Freq>
 8006f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4a81      	ldr	r2, [pc, #516]	@ (8007138 <HAL_I2C_Init+0x274>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d807      	bhi.n	8006f48 <HAL_I2C_Init+0x84>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a80      	ldr	r2, [pc, #512]	@ (800713c <HAL_I2C_Init+0x278>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	bf94      	ite	ls
 8006f40:	2301      	movls	r3, #1
 8006f42:	2300      	movhi	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e006      	b.n	8006f56 <HAL_I2C_Init+0x92>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8007140 <HAL_I2C_Init+0x27c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	bf94      	ite	ls
 8006f50:	2301      	movls	r3, #1
 8006f52:	2300      	movhi	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e0e7      	b.n	800712e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4a78      	ldr	r2, [pc, #480]	@ (8007144 <HAL_I2C_Init+0x280>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0c9b      	lsrs	r3, r3, #18
 8006f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8007138 <HAL_I2C_Init+0x274>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d802      	bhi.n	8006f98 <HAL_I2C_Init+0xd4>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	3301      	adds	r3, #1
 8006f96:	e009      	b.n	8006fac <HAL_I2C_Init+0xe8>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006f9e:	fb02 f303 	mul.w	r3, r2, r3
 8006fa2:	4a69      	ldr	r2, [pc, #420]	@ (8007148 <HAL_I2C_Init+0x284>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	099b      	lsrs	r3, r3, #6
 8006faa:	3301      	adds	r3, #1
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006fbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	495c      	ldr	r1, [pc, #368]	@ (8007138 <HAL_I2C_Init+0x274>)
 8006fc8:	428b      	cmp	r3, r1
 8006fca:	d819      	bhi.n	8007000 <HAL_I2C_Init+0x13c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	1e59      	subs	r1, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_I2C_Init+0x138>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1e59      	subs	r1, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ffa:	e051      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	e04f      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d111      	bne.n	800702c <HAL_I2C_Init+0x168>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	1e58      	subs	r0, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	440b      	add	r3, r1
 8007016:	fbb0 f3f3 	udiv	r3, r0, r3
 800701a:	3301      	adds	r3, #1
 800701c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007020:	2b00      	cmp	r3, #0
 8007022:	bf0c      	ite	eq
 8007024:	2301      	moveq	r3, #1
 8007026:	2300      	movne	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e012      	b.n	8007052 <HAL_I2C_Init+0x18e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	1e58      	subs	r0, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	0099      	lsls	r1, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007042:	3301      	adds	r3, #1
 8007044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007048:	2b00      	cmp	r3, #0
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_I2C_Init+0x196>
 8007056:	2301      	movs	r3, #1
 8007058:	e022      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10e      	bne.n	8007080 <HAL_I2C_Init+0x1bc>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1e58      	subs	r0, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6859      	ldr	r1, [r3, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	440b      	add	r3, r1
 8007070:	fbb0 f3f3 	udiv	r3, r0, r3
 8007074:	3301      	adds	r3, #1
 8007076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800707e:	e00f      	b.n	80070a0 <HAL_I2C_Init+0x1dc>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	1e58      	subs	r0, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6859      	ldr	r1, [r3, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	0099      	lsls	r1, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	fbb0 f3f3 	udiv	r3, r0, r3
 8007096:	3301      	adds	r3, #1
 8007098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800709c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070a0:	6879      	ldr	r1, [r7, #4]
 80070a2:	6809      	ldr	r1, [r1, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	69da      	ldr	r2, [r3, #28]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80070ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	6911      	ldr	r1, [r2, #16]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	68d2      	ldr	r2, [r2, #12]
 80070da:	4311      	orrs	r1, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	430b      	orrs	r3, r1
 80070e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	000186a0 	.word	0x000186a0
 800713c:	001e847f 	.word	0x001e847f
 8007140:	003d08ff 	.word	0x003d08ff
 8007144:	431bde83 	.word	0x431bde83
 8007148:	10624dd3 	.word	0x10624dd3

0800714c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715e:	2b80      	cmp	r3, #128	@ 0x80
 8007160:	d103      	bne.n	800716a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2200      	movs	r2, #0
 8007168:	611a      	str	r2, [r3, #16]
  }
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	461a      	mov	r2, r3
 8007184:	460b      	mov	r3, r1
 8007186:	817b      	strh	r3, [r7, #10]
 8007188:	4613      	mov	r3, r2
 800718a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800718c:	f7ff faf6 	bl	800677c <HAL_GetTick>
 8007190:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b20      	cmp	r3, #32
 800719c:	f040 80e0 	bne.w	8007360 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2319      	movs	r3, #25
 80071a6:	2201      	movs	r2, #1
 80071a8:	4970      	ldr	r1, [pc, #448]	@ (800736c <HAL_I2C_Master_Transmit+0x1f4>)
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f002 fa14 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d001      	beq.n	80071ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
 80071b8:	e0d3      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_I2C_Master_Transmit+0x50>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e0cc      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ea>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d007      	beq.n	80071ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 0201 	orr.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2221      	movs	r2, #33	@ 0x21
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2210      	movs	r2, #16
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	893a      	ldrh	r2, [r7, #8]
 800721e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4a50      	ldr	r2, [pc, #320]	@ (8007370 <HAL_I2C_Master_Transmit+0x1f8>)
 800722e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007230:	8979      	ldrh	r1, [r7, #10]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f001 ffd6 	bl	80091e8 <I2C_MasterRequestWrite>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e08d      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800725c:	e066      	b.n	800732c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	6a39      	ldr	r1, [r7, #32]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f002 fad2 	bl	800980c <I2C_WaitOnTXEFlagUntilTimeout>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00d      	beq.n	800728a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007272:	2b04      	cmp	r3, #4
 8007274:	d107      	bne.n	8007286 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e06b      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d11b      	bne.n	8007300 <HAL_I2C_Master_Transmit+0x188>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d017      	beq.n	8007300 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	6a39      	ldr	r1, [r7, #32]
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f002 fac9 	bl	800989c <I2C_WaitOnBTFFlagUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007314:	2b04      	cmp	r3, #4
 8007316:	d107      	bne.n	8007328 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007326:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e01a      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	d194      	bne.n	800725e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	e000      	b.n	8007362 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	00100002 	.word	0x00100002
 8007370:	ffff0000 	.word	0xffff0000

08007374 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b08c      	sub	sp, #48	@ 0x30
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	461a      	mov	r2, r3
 8007380:	460b      	mov	r3, r1
 8007382:	817b      	strh	r3, [r7, #10]
 8007384:	4613      	mov	r3, r2
 8007386:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007388:	f7ff f9f8 	bl	800677c <HAL_GetTick>
 800738c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b20      	cmp	r3, #32
 8007398:	f040 8217 	bne.w	80077ca <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	2319      	movs	r3, #25
 80073a2:	2201      	movs	r2, #1
 80073a4:	497c      	ldr	r1, [pc, #496]	@ (8007598 <HAL_I2C_Master_Receive+0x224>)
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f002 f916 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80073b2:	2302      	movs	r3, #2
 80073b4:	e20a      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_I2C_Master_Receive+0x50>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e203      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d007      	beq.n	80073ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0201 	orr.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2222      	movs	r2, #34	@ 0x22
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2210      	movs	r2, #16
 8007406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	893a      	ldrh	r2, [r7, #8]
 800741a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a5c      	ldr	r2, [pc, #368]	@ (800759c <HAL_I2C_Master_Receive+0x228>)
 800742a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800742c:	8979      	ldrh	r1, [r7, #10]
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f001 ff5a 	bl	80092ec <I2C_MasterRequestRead>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e1c4      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d113      	bne.n	8007472 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744a:	2300      	movs	r3, #0
 800744c:	623b      	str	r3, [r7, #32]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	e198      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007476:	2b01      	cmp	r3, #1
 8007478:	d11b      	bne.n	80074b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	61fb      	str	r3, [r7, #28]
 800749e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e178      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d11b      	bne.n	80074f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	e158      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007518:	e144      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800751e:	2b03      	cmp	r3, #3
 8007520:	f200 80f1 	bhi.w	8007706 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007528:	2b01      	cmp	r3, #1
 800752a:	d123      	bne.n	8007574 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f002 fa2d 	bl	8009990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e145      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007572:	e117      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007578:	2b02      	cmp	r3, #2
 800757a:	d14e      	bne.n	800761a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	2200      	movs	r2, #0
 8007584:	4906      	ldr	r1, [pc, #24]	@ (80075a0 <HAL_I2C_Master_Receive+0x22c>)
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f002 f826 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e11a      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
 8007596:	bf00      	nop
 8007598:	00100002 	.word	0x00100002
 800759c:	ffff0000 	.word	0xffff0000
 80075a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d0:	3b01      	subs	r3, #1
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007618:	e0c4      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007620:	2200      	movs	r2, #0
 8007622:	496c      	ldr	r1, [pc, #432]	@ (80077d4 <HAL_I2C_Master_Receive+0x460>)
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f001 ffd7 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0cb      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	2200      	movs	r2, #0
 800767e:	4955      	ldr	r1, [pc, #340]	@ (80077d4 <HAL_I2C_Master_Receive+0x460>)
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f001 ffa9 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e09d      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800769e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076dc:	b2d2      	uxtb	r2, r2
 80076de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ee:	3b01      	subs	r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007704:	e04e      	b.n	80077a4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007708:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f002 f940 	bl	8009990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e058      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007736:	3b01      	subs	r3, #1
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d124      	bne.n	80077a4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800775e:	2b03      	cmp	r3, #3
 8007760:	d107      	bne.n	8007772 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007770:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f47f aeb6 	bne.w	800751a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e000      	b.n	80077cc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3728      	adds	r7, #40	@ 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	00010004 	.word	0x00010004

080077d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	@ 0x28
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	460b      	mov	r3, r1
 80077e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80077e8:	f7fe ffc8 	bl	800677c <HAL_GetTick>
 80077ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	f040 8111 	bne.w	8007a22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2319      	movs	r3, #25
 8007806:	2201      	movs	r2, #1
 8007808:	4988      	ldr	r1, [pc, #544]	@ (8007a2c <HAL_I2C_IsDeviceReady+0x254>)
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f001 fee4 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007816:	2302      	movs	r3, #2
 8007818:	e104      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_I2C_IsDeviceReady+0x50>
 8007824:	2302      	movs	r3, #2
 8007826:	e0fd      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d007      	beq.n	800784e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f042 0201 	orr.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800785c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2224      	movs	r2, #36	@ 0x24
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a70      	ldr	r2, [pc, #448]	@ (8007a30 <HAL_I2C_IsDeviceReady+0x258>)
 8007870:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007880:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2200      	movs	r2, #0
 800788a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f001 fea2 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a8:	d103      	bne.n	80078b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078b0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e0b6      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078b6:	897b      	ldrh	r3, [r7, #10]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80078c6:	f7fe ff59 	bl	800677c <HAL_GetTick>
 80078ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	bf0c      	ite	eq
 80078da:	2301      	moveq	r3, #1
 80078dc:	2300      	movne	r3, #0
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078f0:	bf0c      	ite	eq
 80078f2:	2301      	moveq	r3, #1
 80078f4:	2300      	movne	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80078fa:	e025      	b.n	8007948 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078fc:	f7fe ff3e 	bl	800677c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <HAL_I2C_IsDeviceReady+0x13a>
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	22a0      	movs	r2, #160	@ 0xa0
 8007916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b02      	cmp	r3, #2
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800793a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800793e:	bf0c      	ite	eq
 8007940:	2301      	moveq	r3, #1
 8007942:	2300      	movne	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2ba0      	cmp	r3, #160	@ 0xa0
 8007952:	d005      	beq.n	8007960 <HAL_I2C_IsDeviceReady+0x188>
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <HAL_I2C_IsDeviceReady+0x188>
 800795a:	7dbb      	ldrb	r3, [r7, #22]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0cd      	beq.n	80078fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b02      	cmp	r3, #2
 8007974:	d129      	bne.n	80079ca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007984:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	2319      	movs	r3, #25
 80079a2:	2201      	movs	r2, #1
 80079a4:	4921      	ldr	r1, [pc, #132]	@ (8007a2c <HAL_I2C_IsDeviceReady+0x254>)
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f001 fe16 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e036      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e02c      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079d8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80079e2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	2319      	movs	r3, #25
 80079ea:	2201      	movs	r2, #1
 80079ec:	490f      	ldr	r1, [pc, #60]	@ (8007a2c <HAL_I2C_IsDeviceReady+0x254>)
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f001 fdf2 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e012      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	3301      	adds	r3, #1
 8007a02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	f4ff af32 	bcc.w	8007872 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8007a22:	2302      	movs	r3, #2
  }
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3720      	adds	r7, #32
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	00100002 	.word	0x00100002
 8007a30:	ffff0000 	.word	0xffff0000

08007a34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b10      	cmp	r3, #16
 8007a62:	d003      	beq.n	8007a6c <HAL_I2C_EV_IRQHandler+0x38>
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	2b40      	cmp	r3, #64	@ 0x40
 8007a68:	f040 80b1 	bne.w	8007bce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10d      	bne.n	8007aa2 <HAL_I2C_EV_IRQHandler+0x6e>
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007a8c:	d003      	beq.n	8007a96 <HAL_I2C_EV_IRQHandler+0x62>
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007a94:	d101      	bne.n	8007a9a <HAL_I2C_EV_IRQHandler+0x66>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <HAL_I2C_EV_IRQHandler+0x68>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	f000 8114 	beq.w	8007cca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <HAL_I2C_EV_IRQHandler+0x90>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d006      	beq.n	8007ac4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fff6 	bl	8009aa8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fd76 	bl	80085ae <I2C_Master_SB>
 8007ac2:	e083      	b.n	8007bcc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f003 0308 	and.w	r3, r3, #8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <HAL_I2C_EV_IRQHandler+0xac>
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fdee 	bl	80086ba <I2C_Master_ADD10>
 8007ade:	e075      	b.n	8007bcc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d008      	beq.n	8007afc <HAL_I2C_EV_IRQHandler+0xc8>
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fe0a 	bl	800870e <I2C_Master_ADDR>
 8007afa:	e067      	b.n	8007bcc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d036      	beq.n	8007b74 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b14:	f000 80db 	beq.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00d      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0x10a>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0x10a>
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d103      	bne.n	8007b3e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f9d6 	bl	8007ee8 <I2C_MasterTransmit_TXE>
 8007b3c:	e046      	b.n	8007bcc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80c2 	beq.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80bc 	beq.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b21      	cmp	r3, #33	@ 0x21
 8007b5a:	d103      	bne.n	8007b64 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa5f 	bl	8008020 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b62:	e0b4      	b.n	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b40      	cmp	r3, #64	@ 0x40
 8007b68:	f040 80b1 	bne.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 facd 	bl	800810c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b72:	e0ac      	b.n	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b82:	f000 80a4 	beq.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00d      	beq.n	8007bac <HAL_I2C_EV_IRQHandler+0x178>
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_I2C_EV_IRQHandler+0x178>
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fb49 	bl	800823c <I2C_MasterReceive_RXNE>
 8007baa:	e00f      	b.n	8007bcc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 808b 	beq.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 8085 	beq.w	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fc01 	bl	80083cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bca:	e080      	b.n	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
 8007bcc:	e07f      	b.n	8007cce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	e007      	b.n	8007bf0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d011      	beq.n	8007c1e <HAL_I2C_EV_IRQHandler+0x1ea>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 ffc8 	bl	8008bac <I2C_Slave_ADDR>
 8007c1c:	e05a      	b.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_I2C_EV_IRQHandler+0x206>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 f802 	bl	8008c3c <I2C_Slave_STOPF>
 8007c38:	e04c      	b.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b21      	cmp	r3, #33	@ 0x21
 8007c3e:	d002      	beq.n	8007c46 <HAL_I2C_EV_IRQHandler+0x212>
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	2b29      	cmp	r3, #41	@ 0x29
 8007c44:	d120      	bne.n	8007c88 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <HAL_I2C_EV_IRQHandler+0x238>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d008      	beq.n	8007c6c <HAL_I2C_EV_IRQHandler+0x238>
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fee3 	bl	8008a30 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c6a:	e032      	b.n	8007cd2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d02d      	beq.n	8007cd2 <HAL_I2C_EV_IRQHandler+0x29e>
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d028      	beq.n	8007cd2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 ff12 	bl	8008aaa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c86:	e024      	b.n	8007cd2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00d      	beq.n	8007cae <HAL_I2C_EV_IRQHandler+0x27a>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_I2C_EV_IRQHandler+0x27a>
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 ff20 	bl	8008aec <I2C_SlaveReceive_RXNE>
 8007cac:	e012      	b.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d008      	beq.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 ff50 	bl	8008b68 <I2C_SlaveReceive_BTF>
 8007cc8:	e004      	b.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007cca:	bf00      	nop
 8007ccc:	e002      	b.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cce:	bf00      	nop
 8007cd0:	e000      	b.n	8007cd4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007cd2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08a      	sub	sp, #40	@ 0x28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cfc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00d      	beq.n	8007d24 <HAL_I2C_ER_IRQHandler+0x4a>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	f043 0301 	orr.w	r3, r3, #1
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d22:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00d      	beq.n	8007d4a <HAL_I2C_ER_IRQHandler+0x70>
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	f043 0302 	orr.w	r3, r3, #2
 8007d3e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007d48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d03e      	beq.n	8007dd2 <HAL_I2C_ER_IRQHandler+0xf8>
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d039      	beq.n	8007dd2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007d5e:	7efb      	ldrb	r3, [r7, #27]
 8007d60:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d70:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d76:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007d78:	7ebb      	ldrb	r3, [r7, #26]
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d112      	bne.n	8007da4 <HAL_I2C_ER_IRQHandler+0xca>
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10f      	bne.n	8007da4 <HAL_I2C_ER_IRQHandler+0xca>
 8007d84:	7cfb      	ldrb	r3, [r7, #19]
 8007d86:	2b21      	cmp	r3, #33	@ 0x21
 8007d88:	d008      	beq.n	8007d9c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007d8a:	7cfb      	ldrb	r3, [r7, #19]
 8007d8c:	2b29      	cmp	r3, #41	@ 0x29
 8007d8e:	d005      	beq.n	8007d9c <HAL_I2C_ER_IRQHandler+0xc2>
 8007d90:	7cfb      	ldrb	r3, [r7, #19]
 8007d92:	2b28      	cmp	r3, #40	@ 0x28
 8007d94:	d106      	bne.n	8007da4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b21      	cmp	r3, #33	@ 0x21
 8007d9a:	d103      	bne.n	8007da4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 f87d 	bl	8008e9c <I2C_Slave_AF>
 8007da2:	e016      	b.n	8007dd2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007dac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	f043 0304 	orr.w	r3, r3, #4
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007db6:	7efb      	ldrb	r3, [r7, #27]
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d002      	beq.n	8007dc2 <HAL_I2C_ER_IRQHandler+0xe8>
 8007dbc:	7efb      	ldrb	r3, [r7, #27]
 8007dbe:	2b40      	cmp	r3, #64	@ 0x40
 8007dc0:	d107      	bne.n	8007dd2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dd0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00d      	beq.n	8007df8 <HAL_I2C_ER_IRQHandler+0x11e>
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	f043 0308 	orr.w	r3, r3, #8
 8007dec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007df6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 f8ba 	bl	8008f84 <I2C_ITError>
  }
}
 8007e10:	bf00      	nop
 8007e12:	3728      	adds	r7, #40	@ 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70fb      	strb	r3, [r7, #3]
 8007e74:	4613      	mov	r3, r2
 8007e76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007efe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d150      	bne.n	8007fb0 <I2C_MasterTransmit_TXE+0xc8>
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b21      	cmp	r3, #33	@ 0x21
 8007f12:	d14d      	bne.n	8007fb0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d01d      	beq.n	8007f56 <I2C_MasterTransmit_TXE+0x6e>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d01a      	beq.n	8007f56 <I2C_MasterTransmit_TXE+0x6e>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f26:	d016      	beq.n	8007f56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2211      	movs	r2, #17
 8007f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff ff62 	bl	8007e18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f54:	e060      	b.n	8008018 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b40      	cmp	r3, #64	@ 0x40
 8007f8e:	d107      	bne.n	8007fa0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff7d 	bl	8007e98 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f9e:	e03b      	b.n	8008018 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ff35 	bl	8007e18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007fae:	e033      	b.n	8008018 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b21      	cmp	r3, #33	@ 0x21
 8007fb4:	d005      	beq.n	8007fc2 <I2C_MasterTransmit_TXE+0xda>
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d12d      	bne.n	8008018 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b22      	cmp	r3, #34	@ 0x22
 8007fc0:	d12a      	bne.n	8008018 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d108      	bne.n	8007fde <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007fdc:	e01c      	b.n	8008018 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b40      	cmp	r3, #64	@ 0x40
 8007fe8:	d103      	bne.n	8007ff2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f88e 	bl	800810c <I2C_MemoryTransmit_TXE_BTF>
}
 8007ff0:	e012      	b.n	8008018 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800800c:	b29b      	uxth	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008016:	e7ff      	b.n	8008018 <I2C_MasterTransmit_TXE+0x130>
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800802c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b21      	cmp	r3, #33	@ 0x21
 8008038:	d164      	bne.n	8008104 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d012      	beq.n	800806a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008048:	781a      	ldrb	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008068:	e04c      	b.n	8008104 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b08      	cmp	r3, #8
 800806e:	d01d      	beq.n	80080ac <I2C_MasterTransmit_BTF+0x8c>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b20      	cmp	r3, #32
 8008074:	d01a      	beq.n	80080ac <I2C_MasterTransmit_BTF+0x8c>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800807c:	d016      	beq.n	80080ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800808c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2211      	movs	r2, #17
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff feb7 	bl	8007e18 <HAL_I2C_MasterTxCpltCallback>
}
 80080aa:	e02b      	b.n	8008104 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80080ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b40      	cmp	r3, #64	@ 0x40
 80080e4:	d107      	bne.n	80080f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7ff fed2 	bl	8007e98 <HAL_I2C_MemTxCpltCallback>
}
 80080f4:	e006      	b.n	8008104 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff fe8a 	bl	8007e18 <HAL_I2C_MasterTxCpltCallback>
}
 8008104:	bf00      	nop
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800811a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11d      	bne.n	8008160 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d10b      	bne.n	8008144 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008130:	b2da      	uxtb	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8008142:	e077      	b.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008148:	b29b      	uxth	r3, r3
 800814a:	121b      	asrs	r3, r3, #8
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800815e:	e069      	b.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008164:	2b01      	cmp	r3, #1
 8008166:	d10b      	bne.n	8008180 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800816c:	b2da      	uxtb	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800817e:	e059      	b.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008184:	2b02      	cmp	r3, #2
 8008186:	d152      	bne.n	800822e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	2b22      	cmp	r3, #34	@ 0x22
 800818c:	d10d      	bne.n	80081aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800819c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80081a8:	e044      	b.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d015      	beq.n	80081e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	2b21      	cmp	r3, #33	@ 0x21
 80081b8:	d112      	bne.n	80081e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80081de:	e029      	b.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d124      	bne.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b21      	cmp	r3, #33	@ 0x21
 80081ee:	d121      	bne.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800820e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fe36 	bl	8007e98 <HAL_I2C_MemTxCpltCallback>
}
 800822c:	e002      	b.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fe ff8c 	bl	800714c <I2C_Flush_DR>
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b22      	cmp	r3, #34	@ 0x22
 800824e:	f040 80b9 	bne.w	80083c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008256:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800825c:	b29b      	uxth	r3, r3
 800825e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d921      	bls.n	80082aa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	1c5a      	adds	r2, r3, #1
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008282:	b29b      	uxth	r3, r3
 8008284:	3b01      	subs	r3, #1
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b03      	cmp	r3, #3
 8008294:	f040 8096 	bne.w	80083c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80082a8:	e08c      	b.n	80083c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d07f      	beq.n	80083b2 <I2C_MasterReceive_RXNE+0x176>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d002      	beq.n	80082be <I2C_MasterReceive_RXNE+0x82>
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d179      	bne.n	80083b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fb34 	bl	800992c <I2C_WaitOnSTOPRequestThroughIT>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d14c      	bne.n	8008364 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80082e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691a      	ldr	r2, [r3, #16]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2220      	movs	r2, #32
 8008314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b40      	cmp	r3, #64	@ 0x40
 8008322:	d10a      	bne.n	800833a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff fdba 	bl	8007eac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008338:	e044      	b.n	80083c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b08      	cmp	r3, #8
 8008346:	d002      	beq.n	800834e <I2C_MasterReceive_RXNE+0x112>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b20      	cmp	r3, #32
 800834c:	d103      	bne.n	8008356 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	631a      	str	r2, [r3, #48]	@ 0x30
 8008354:	e002      	b.n	800835c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2212      	movs	r2, #18
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fd65 	bl	8007e2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008362:	e02f      	b.n	80083c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008372:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fd88 	bl	8007ec0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80083b0:	e008      	b.n	80083c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083c0:	605a      	str	r2, [r3, #4]
}
 80083c2:	e7ff      	b.n	80083c4 <I2C_MasterReceive_RXNE+0x188>
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d11b      	bne.n	800841c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691a      	ldr	r2, [r3, #16]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800841a:	e0c4      	b.n	80085a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b03      	cmp	r3, #3
 8008424:	d129      	bne.n	800847a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008434:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b04      	cmp	r3, #4
 800843a:	d00a      	beq.n	8008452 <I2C_MasterReceive_BTF+0x86>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d007      	beq.n	8008452 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008450:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691a      	ldr	r2, [r3, #16]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800845c:	b2d2      	uxtb	r2, r2
 800845e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008478:	e095      	b.n	80085a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d17d      	bne.n	8008580 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d002      	beq.n	8008490 <I2C_MasterReceive_BTF+0xc4>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b10      	cmp	r3, #16
 800848e:	d108      	bne.n	80084a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e016      	b.n	80084d0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d002      	beq.n	80084ae <I2C_MasterReceive_BTF+0xe2>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d108      	bne.n	80084c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e007      	b.n	80084d0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691a      	ldr	r2, [r3, #16]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800852a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b40      	cmp	r3, #64	@ 0x40
 800853e:	d10a      	bne.n	8008556 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fcac 	bl	8007eac <HAL_I2C_MemRxCpltCallback>
}
 8008554:	e027      	b.n	80085a6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d002      	beq.n	800856a <I2C_MasterReceive_BTF+0x19e>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b20      	cmp	r3, #32
 8008568:	d103      	bne.n	8008572 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008570:	e002      	b.n	8008578 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2212      	movs	r2, #18
 8008576:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff fc57 	bl	8007e2c <HAL_I2C_MasterRxCpltCallback>
}
 800857e:	e012      	b.n	80085a6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	b2d2      	uxtb	r2, r2
 800858c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800859c:	b29b      	uxth	r3, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80085a6:	bf00      	nop
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b40      	cmp	r3, #64	@ 0x40
 80085c0:	d117      	bne.n	80085f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d109      	bne.n	80085de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80085da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80085dc:	e067      	b.n	80086ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f043 0301 	orr.w	r3, r3, #1
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	611a      	str	r2, [r3, #16]
}
 80085f0:	e05d      	b.n	80086ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085fa:	d133      	bne.n	8008664 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b21      	cmp	r3, #33	@ 0x21
 8008606:	d109      	bne.n	800861c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860c:	b2db      	uxtb	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008618:	611a      	str	r2, [r3, #16]
 800861a:	e008      	b.n	800862e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <I2C_Master_SB+0x92>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d108      	bne.n	8008652 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	d032      	beq.n	80086ae <I2C_Master_SB+0x100>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d02d      	beq.n	80086ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008660:	605a      	str	r2, [r3, #4]
}
 8008662:	e024      	b.n	80086ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10e      	bne.n	800868a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008670:	b29b      	uxth	r3, r3
 8008672:	11db      	asrs	r3, r3, #7
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 0306 	and.w	r3, r3, #6
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f063 030f 	orn	r3, r3, #15
 8008680:	b2da      	uxtb	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	611a      	str	r2, [r3, #16]
}
 8008688:	e011      	b.n	80086ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868e:	2b01      	cmp	r3, #1
 8008690:	d10d      	bne.n	80086ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008696:	b29b      	uxth	r3, r3
 8008698:	11db      	asrs	r3, r3, #7
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 0306 	and.w	r3, r3, #6
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	f063 030e 	orn	r3, r3, #14
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	611a      	str	r2, [r3, #16]
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <I2C_Master_ADD10+0x26>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d108      	bne.n	80086f2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00c      	beq.n	8008702 <I2C_Master_ADD10+0x48>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008700:	605a      	str	r2, [r3, #4]
  }
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800870e:	b480      	push	{r7}
 8008710:	b091      	sub	sp, #68	@ 0x44
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800871c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008724:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008732:	b2db      	uxtb	r3, r3
 8008734:	2b22      	cmp	r3, #34	@ 0x22
 8008736:	f040 8169 	bne.w	8008a0c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10f      	bne.n	8008762 <I2C_Master_ADDR+0x54>
 8008742:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008746:	2b40      	cmp	r3, #64	@ 0x40
 8008748:	d10b      	bne.n	8008762 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800874a:	2300      	movs	r3, #0
 800874c:	633b      	str	r3, [r7, #48]	@ 0x30
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	633b      	str	r3, [r7, #48]	@ 0x30
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	e160      	b.n	8008a24 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008766:	2b00      	cmp	r3, #0
 8008768:	d11d      	bne.n	80087a6 <I2C_Master_ADDR+0x98>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008772:	d118      	bne.n	80087a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008774:	2300      	movs	r3, #0
 8008776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008798:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80087a4:	e13e      	b.n	8008a24 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d113      	bne.n	80087d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087b0:	2300      	movs	r3, #0
 80087b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	e115      	b.n	8008a04 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b01      	cmp	r3, #1
 80087e0:	f040 808a 	bne.w	80088f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80087e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087ea:	d137      	bne.n	800885c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800880a:	d113      	bne.n	8008834 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800881a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800881c:	2300      	movs	r3, #0
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	627b      	str	r3, [r7, #36]	@ 0x24
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008832:	e0e7      	b.n	8008a04 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008834:	2300      	movs	r3, #0
 8008836:	623b      	str	r3, [r7, #32]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	623b      	str	r3, [r7, #32]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	623b      	str	r3, [r7, #32]
 8008848:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e0d3      	b.n	8008a04 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800885c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885e:	2b08      	cmp	r3, #8
 8008860:	d02e      	beq.n	80088c0 <I2C_Master_ADDR+0x1b2>
 8008862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008864:	2b20      	cmp	r3, #32
 8008866:	d02b      	beq.n	80088c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886a:	2b12      	cmp	r3, #18
 800886c:	d102      	bne.n	8008874 <I2C_Master_ADDR+0x166>
 800886e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008870:	2b01      	cmp	r3, #1
 8008872:	d125      	bne.n	80088c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008876:	2b04      	cmp	r3, #4
 8008878:	d00e      	beq.n	8008898 <I2C_Master_ADDR+0x18a>
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	2b02      	cmp	r3, #2
 800887e:	d00b      	beq.n	8008898 <I2C_Master_ADDR+0x18a>
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	2b10      	cmp	r3, #16
 8008884:	d008      	beq.n	8008898 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	e007      	b.n	80088a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	e0a1      	b.n	8008a04 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	61bb      	str	r3, [r7, #24]
 80088e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	e085      	b.n	8008a04 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d14d      	bne.n	800899e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008904:	2b04      	cmp	r3, #4
 8008906:	d016      	beq.n	8008936 <I2C_Master_ADDR+0x228>
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b02      	cmp	r3, #2
 800890c:	d013      	beq.n	8008936 <I2C_Master_ADDR+0x228>
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	2b10      	cmp	r3, #16
 8008912:	d010      	beq.n	8008936 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008922:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e007      	b.n	8008946 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008944:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008954:	d117      	bne.n	8008986 <I2C_Master_ADDR+0x278>
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800895c:	d00b      	beq.n	8008976 <I2C_Master_ADDR+0x268>
 800895e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008960:	2b01      	cmp	r3, #1
 8008962:	d008      	beq.n	8008976 <I2C_Master_ADDR+0x268>
 8008964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008966:	2b08      	cmp	r3, #8
 8008968:	d005      	beq.n	8008976 <I2C_Master_ADDR+0x268>
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	2b10      	cmp	r3, #16
 800896e:	d002      	beq.n	8008976 <I2C_Master_ADDR+0x268>
 8008970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008972:	2b20      	cmp	r3, #32
 8008974:	d107      	bne.n	8008986 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008984:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008986:	2300      	movs	r3, #0
 8008988:	617b      	str	r3, [r7, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	617b      	str	r3, [r7, #20]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	e032      	b.n	8008a04 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80089ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089bc:	d117      	bne.n	80089ee <I2C_Master_ADDR+0x2e0>
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80089c4:	d00b      	beq.n	80089de <I2C_Master_ADDR+0x2d0>
 80089c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d008      	beq.n	80089de <I2C_Master_ADDR+0x2d0>
 80089cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d005      	beq.n	80089de <I2C_Master_ADDR+0x2d0>
 80089d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	d002      	beq.n	80089de <I2C_Master_ADDR+0x2d0>
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	2b20      	cmp	r3, #32
 80089dc:	d107      	bne.n	80089ee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80089ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ee:	2300      	movs	r3, #0
 80089f0:	613b      	str	r3, [r7, #16]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	613b      	str	r3, [r7, #16]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	613b      	str	r3, [r7, #16]
 8008a02:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008a0a:	e00b      	b.n	8008a24 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699b      	ldr	r3, [r3, #24]
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
}
 8008a22:	e7ff      	b.n	8008a24 <I2C_Master_ADDR+0x316>
 8008a24:	bf00      	nop
 8008a26:	3744      	adds	r7, #68	@ 0x44
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d02b      	beq.n	8008aa2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5a:	1c5a      	adds	r2, r3, #1
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	3b01      	subs	r3, #1
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d114      	bne.n	8008aa2 <I2C_SlaveTransmit_TXE+0x72>
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b29      	cmp	r3, #41	@ 0x29
 8008a7c:	d111      	bne.n	8008aa2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685a      	ldr	r2, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2221      	movs	r2, #33	@ 0x21
 8008a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2228      	movs	r2, #40	@ 0x28
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff f9cf 	bl	8007e40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d011      	beq.n	8008ae0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	781a      	ldrb	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008afa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d02c      	beq.n	8008b60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d114      	bne.n	8008b60 <I2C_SlaveReceive_RXNE+0x74>
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3a:	d111      	bne.n	8008b60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2222      	movs	r2, #34	@ 0x22
 8008b50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2228      	movs	r2, #40	@ 0x28
 8008b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f7ff f97a 	bl	8007e54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d012      	beq.n	8008ba0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008bc6:	2b28      	cmp	r3, #40	@ 0x28
 8008bc8:	d125      	bne.n	8008c16 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bd8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008be4:	2301      	movs	r3, #1
 8008be6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	81bb      	strh	r3, [r7, #12]
 8008bf8:	e002      	b.n	8008c00 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008c08:	89ba      	ldrh	r2, [r7, #12]
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff f92a 	bl	8007e68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008c14:	e00e      	b.n	8008c34 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c16:	2300      	movs	r3, #0
 8008c18:	60bb      	str	r3, [r7, #8]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	60bb      	str	r3, [r7, #8]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	60bb      	str	r3, [r7, #8]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60bb      	str	r3, [r7, #8]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	60bb      	str	r3, [r7, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0201 	orr.w	r2, r2, #1
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c98:	d172      	bne.n	8008d80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b22      	cmp	r3, #34	@ 0x22
 8008c9e:	d002      	beq.n	8008ca6 <I2C_Slave_STOPF+0x6a>
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca4:	d135      	bne.n	8008d12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc2:	f043 0204 	orr.w	r2, r3, #4
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd ff1f 	bl	8006b22 <HAL_DMA_GetState>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d049      	beq.n	8008d7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cee:	4a69      	ldr	r2, [pc, #420]	@ (8008e94 <I2C_Slave_STOPF+0x258>)
 8008cf0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fd fef1 	bl	8006ade <HAL_DMA_Abort_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d03d      	beq.n	8008d7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d10:	e035      	b.n	8008d7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d005      	beq.n	8008d36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2e:	f043 0204 	orr.w	r2, r3, #4
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fd fee9 	bl	8006b22 <HAL_DMA_GetState>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d014      	beq.n	8008d80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8008e94 <I2C_Slave_STOPF+0x258>)
 8008d5c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fd febb 	bl	8006ade <HAL_DMA_Abort_IT>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d008      	beq.n	8008d80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	e000      	b.n	8008d80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d03e      	beq.n	8008e08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d112      	bne.n	8008dbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da2:	b2d2      	uxtb	r2, r2
 8008da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc8:	2b40      	cmp	r3, #64	@ 0x40
 8008dca:	d112      	bne.n	8008df2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d005      	beq.n	8008e08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e00:	f043 0204 	orr.w	r2, r3, #4
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f8b7 	bl	8008f84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008e16:	e039      	b.n	8008e8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008e18:	7bfb      	ldrb	r3, [r7, #15]
 8008e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e1c:	d109      	bne.n	8008e32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2228      	movs	r2, #40	@ 0x28
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff f811 	bl	8007e54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b28      	cmp	r3, #40	@ 0x28
 8008e3c:	d111      	bne.n	8008e62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a15      	ldr	r2, [pc, #84]	@ (8008e98 <I2C_Slave_STOPF+0x25c>)
 8008e42:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff f812 	bl	8007e84 <HAL_I2C_ListenCpltCallback>
}
 8008e60:	e014      	b.n	8008e8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e66:	2b22      	cmp	r3, #34	@ 0x22
 8008e68:	d002      	beq.n	8008e70 <I2C_Slave_STOPF+0x234>
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b22      	cmp	r3, #34	@ 0x22
 8008e6e:	d10d      	bne.n	8008e8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe ffe4 	bl	8007e54 <HAL_I2C_SlaveRxCpltCallback>
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	08009489 	.word	0x08009489
 8008e98:	ffff0000 	.word	0xffff0000

08008e9c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	d002      	beq.n	8008ebe <I2C_Slave_AF+0x22>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d129      	bne.n	8008f12 <I2C_Slave_AF+0x76>
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b28      	cmp	r3, #40	@ 0x28
 8008ec2:	d126      	bne.n	8008f12 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8008f80 <I2C_Slave_AF+0xe4>)
 8008ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ed8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008ee2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ef2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7fe ffba 	bl	8007e84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008f10:	e031      	b.n	8008f76 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	2b21      	cmp	r3, #33	@ 0x21
 8008f16:	d129      	bne.n	8008f6c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a19      	ldr	r2, [pc, #100]	@ (8008f80 <I2C_Slave_AF+0xe4>)
 8008f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2221      	movs	r2, #33	@ 0x21
 8008f22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2220      	movs	r2, #32
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008f42:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f4c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f5c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fe f8f4 	bl	800714c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fe ff6b 	bl	8007e40 <HAL_I2C_SlaveTxCpltCallback>
}
 8008f6a:	e004      	b.n	8008f76 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008f74:	615a      	str	r2, [r3, #20]
}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	ffff0000 	.word	0xffff0000

08008f84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d002      	beq.n	8008fa8 <I2C_ITError+0x24>
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d10a      	bne.n	8008fbe <I2C_ITError+0x3a>
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	2b22      	cmp	r3, #34	@ 0x22
 8008fac:	d107      	bne.n	8008fbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008fbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008fc4:	2b28      	cmp	r3, #40	@ 0x28
 8008fc6:	d107      	bne.n	8008fd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2228      	movs	r2, #40	@ 0x28
 8008fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008fd6:	e015      	b.n	8009004 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fe6:	d00a      	beq.n	8008ffe <I2C_ITError+0x7a>
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	2b60      	cmp	r3, #96	@ 0x60
 8008fec:	d007      	beq.n	8008ffe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800900e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009012:	d162      	bne.n	80090da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009022:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b01      	cmp	r3, #1
 8009030:	d020      	beq.n	8009074 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009036:	4a6a      	ldr	r2, [pc, #424]	@ (80091e0 <I2C_ITError+0x25c>)
 8009038:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903e:	4618      	mov	r0, r3
 8009040:	f7fd fd4d 	bl	8006ade <HAL_DMA_Abort_IT>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8089 	beq.w	800915e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
 8009072:	e074      	b.n	800915e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009078:	4a59      	ldr	r2, [pc, #356]	@ (80091e0 <I2C_ITError+0x25c>)
 800907a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009080:	4618      	mov	r0, r3
 8009082:	f7fd fd2c 	bl	8006ade <HAL_DMA_Abort_IT>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d068      	beq.n	800915e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009096:	2b40      	cmp	r3, #64	@ 0x40
 8009098:	d10b      	bne.n	80090b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	b2d2      	uxtb	r2, r2
 80090a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0201 	bic.w	r2, r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	e041      	b.n	800915e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b60      	cmp	r3, #96	@ 0x60
 80090e4:	d125      	bne.n	8009132 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fe:	2b40      	cmp	r3, #64	@ 0x40
 8009100:	d10b      	bne.n	800911a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0201 	bic.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f7fe fed2 	bl	8007ed4 <HAL_I2C_AbortCpltCallback>
 8009130:	e015      	b.n	800915e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800913c:	2b40      	cmp	r3, #64	@ 0x40
 800913e:	d10b      	bne.n	8009158 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691a      	ldr	r2, [r3, #16]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7fe feb1 	bl	8007ec0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009162:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10e      	bne.n	800918c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009188:	2b00      	cmp	r3, #0
 800918a:	d007      	beq.n	800919c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800919a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d113      	bne.n	80091d8 <I2C_ITError+0x254>
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b28      	cmp	r3, #40	@ 0x28
 80091b4:	d110      	bne.n	80091d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a0a      	ldr	r2, [pc, #40]	@ (80091e4 <I2C_ITError+0x260>)
 80091ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7fe fe56 	bl	8007e84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	08009489 	.word	0x08009489
 80091e4:	ffff0000 	.word	0xffff0000

080091e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	607a      	str	r2, [r7, #4]
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	460b      	mov	r3, r1
 80091f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b08      	cmp	r3, #8
 8009202:	d006      	beq.n	8009212 <I2C_MasterRequestWrite+0x2a>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d003      	beq.n	8009212 <I2C_MasterRequestWrite+0x2a>
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009210:	d108      	bne.n	8009224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	e00b      	b.n	800923c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009228:	2b12      	cmp	r3, #18
 800922a:	d107      	bne.n	800923c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800923a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 f9c5 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00d      	beq.n	8009270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009262:	d103      	bne.n	800926c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800926a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e035      	b.n	80092dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009278:	d108      	bne.n	800928c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800927a:	897b      	ldrh	r3, [r7, #10]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	461a      	mov	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009288:	611a      	str	r2, [r3, #16]
 800928a:	e01b      	b.n	80092c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800928c:	897b      	ldrh	r3, [r7, #10]
 800928e:	11db      	asrs	r3, r3, #7
 8009290:	b2db      	uxtb	r3, r3
 8009292:	f003 0306 	and.w	r3, r3, #6
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f063 030f 	orn	r3, r3, #15
 800929c:	b2da      	uxtb	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	490e      	ldr	r1, [pc, #56]	@ (80092e4 <I2C_MasterRequestWrite+0xfc>)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fa0e 	bl	80096cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e010      	b.n	80092dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80092ba:	897b      	ldrh	r3, [r7, #10]
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4907      	ldr	r1, [pc, #28]	@ (80092e8 <I2C_MasterRequestWrite+0x100>)
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f000 f9fe 	bl	80096cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	00010008 	.word	0x00010008
 80092e8:	00010002 	.word	0x00010002

080092ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	460b      	mov	r3, r1
 80092fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009310:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b08      	cmp	r3, #8
 8009316:	d006      	beq.n	8009326 <I2C_MasterRequestRead+0x3a>
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d003      	beq.n	8009326 <I2C_MasterRequestRead+0x3a>
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009324:	d108      	bne.n	8009338 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	e00b      	b.n	8009350 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933c:	2b11      	cmp	r3, #17
 800933e:	d107      	bne.n	8009350 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800934e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f93b 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00d      	beq.n	8009384 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009376:	d103      	bne.n	8009380 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800937e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e079      	b.n	8009478 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800938c:	d108      	bne.n	80093a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800938e:	897b      	ldrh	r3, [r7, #10]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	611a      	str	r2, [r3, #16]
 800939e:	e05f      	b.n	8009460 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80093a0:	897b      	ldrh	r3, [r7, #10]
 80093a2:	11db      	asrs	r3, r3, #7
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f003 0306 	and.w	r3, r3, #6
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f063 030f 	orn	r3, r3, #15
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	4930      	ldr	r1, [pc, #192]	@ (8009480 <I2C_MasterRequestRead+0x194>)
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f984 	bl	80096cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e054      	b.n	8009478 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80093ce:	897b      	ldrh	r3, [r7, #10]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4929      	ldr	r1, [pc, #164]	@ (8009484 <I2C_MasterRequestRead+0x198>)
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f974 	bl	80096cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e044      	b.n	8009478 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093ee:	2300      	movs	r3, #0
 80093f0:	613b      	str	r3, [r7, #16]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	613b      	str	r3, [r7, #16]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009412:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 f8d9 	bl	80095d8 <I2C_WaitOnFlagUntilTimeout>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00d      	beq.n	8009448 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800943a:	d103      	bne.n	8009444 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009442:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009444:	2303      	movs	r3, #3
 8009446:	e017      	b.n	8009478 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009448:	897b      	ldrh	r3, [r7, #10]
 800944a:	11db      	asrs	r3, r3, #7
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 0306 	and.w	r3, r3, #6
 8009452:	b2db      	uxtb	r3, r3
 8009454:	f063 030e 	orn	r3, r3, #14
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	4907      	ldr	r1, [pc, #28]	@ (8009484 <I2C_MasterRequestRead+0x198>)
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 f930 	bl	80096cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e000      	b.n	8009478 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	00010008 	.word	0x00010008
 8009484:	00010002 	.word	0x00010002

08009488 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009498:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80094a2:	4b4b      	ldr	r3, [pc, #300]	@ (80095d0 <I2C_DMAAbort+0x148>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	08db      	lsrs	r3, r3, #3
 80094a8:	4a4a      	ldr	r2, [pc, #296]	@ (80095d4 <I2C_DMAAbort+0x14c>)
 80094aa:	fba2 2303 	umull	r2, r3, r2, r3
 80094ae:	0a1a      	lsrs	r2, r3, #8
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	00da      	lsls	r2, r3, #3
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c6:	f043 0220 	orr.w	r2, r3, #32
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80094ce:	e00a      	b.n	80094e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094e4:	d0ea      	beq.n	80094bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f2:	2200      	movs	r2, #0
 80094f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	2200      	movs	r2, #0
 8009504:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009514:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2200      	movs	r2, #0
 800951a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009528:	2200      	movs	r2, #0
 800952a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	2200      	movs	r2, #0
 800953a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b60      	cmp	r3, #96	@ 0x60
 8009556:	d10e      	bne.n	8009576 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2220      	movs	r2, #32
 800955c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	2200      	movs	r2, #0
 800956c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800956e:	6978      	ldr	r0, [r7, #20]
 8009570:	f7fe fcb0 	bl	8007ed4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009574:	e027      	b.n	80095c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009576:	7cfb      	ldrb	r3, [r7, #19]
 8009578:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800957c:	2b28      	cmp	r3, #40	@ 0x28
 800957e:	d117      	bne.n	80095b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0201 	orr.w	r2, r2, #1
 800958e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800959e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2228      	movs	r2, #40	@ 0x28
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80095ae:	e007      	b.n	80095c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80095c0:	6978      	ldr	r0, [r7, #20]
 80095c2:	f7fe fc7d 	bl	8007ec0 <HAL_I2C_ErrorCallback>
}
 80095c6:	bf00      	nop
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20000570 	.word	0x20000570
 80095d4:	14f8b589 	.word	0x14f8b589

080095d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	4613      	mov	r3, r2
 80095e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095e8:	e048      	b.n	800967c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f0:	d044      	beq.n	800967c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f2:	f7fd f8c3 	bl	800677c <HAL_GetTick>
 80095f6:	4602      	mov	r2, r0
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d139      	bne.n	800967c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	0c1b      	lsrs	r3, r3, #16
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b01      	cmp	r3, #1
 8009610:	d10d      	bne.n	800962e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	43da      	mvns	r2, r3
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	4013      	ands	r3, r2
 800961e:	b29b      	uxth	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	bf0c      	ite	eq
 8009624:	2301      	moveq	r3, #1
 8009626:	2300      	movne	r3, #0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	461a      	mov	r2, r3
 800962c:	e00c      	b.n	8009648 <I2C_WaitOnFlagUntilTimeout+0x70>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	43da      	mvns	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4013      	ands	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	bf0c      	ite	eq
 8009640:	2301      	moveq	r3, #1
 8009642:	2300      	movne	r3, #0
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	429a      	cmp	r2, r3
 800964c:	d116      	bne.n	800967c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2220      	movs	r2, #32
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009668:	f043 0220 	orr.w	r2, r3, #32
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e023      	b.n	80096c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	0c1b      	lsrs	r3, r3, #16
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b01      	cmp	r3, #1
 8009684:	d10d      	bne.n	80096a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	43da      	mvns	r2, r3
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	4013      	ands	r3, r2
 8009692:	b29b      	uxth	r3, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	e00c      	b.n	80096bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	43da      	mvns	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	4013      	ands	r3, r2
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	bf0c      	ite	eq
 80096b4:	2301      	moveq	r3, #1
 80096b6:	2300      	movne	r3, #0
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	461a      	mov	r2, r3
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d093      	beq.n	80095ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096da:	e071      	b.n	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ea:	d123      	bne.n	8009734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80096fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2220      	movs	r2, #32
 8009710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009720:	f043 0204 	orr.w	r2, r3, #4
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e067      	b.n	8009804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800973a:	d041      	beq.n	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973c:	f7fd f81e 	bl	800677c <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	d302      	bcc.n	8009752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d136      	bne.n	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	0c1b      	lsrs	r3, r3, #16
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	d10c      	bne.n	8009776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	43da      	mvns	r2, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	4013      	ands	r3, r2
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	bf14      	ite	ne
 800976e:	2301      	movne	r3, #1
 8009770:	2300      	moveq	r3, #0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	e00b      	b.n	800978e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	43da      	mvns	r2, r3
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4013      	ands	r3, r2
 8009782:	b29b      	uxth	r3, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	bf14      	ite	ne
 8009788:	2301      	movne	r3, #1
 800978a:	2300      	moveq	r3, #0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d016      	beq.n	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ac:	f043 0220 	orr.w	r2, r3, #32
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e021      	b.n	8009804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	0c1b      	lsrs	r3, r3, #16
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d10c      	bne.n	80097e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	43da      	mvns	r2, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4013      	ands	r3, r2
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	bf14      	ite	ne
 80097dc:	2301      	movne	r3, #1
 80097de:	2300      	moveq	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	e00b      	b.n	80097fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	43da      	mvns	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4013      	ands	r3, r2
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bf14      	ite	ne
 80097f6:	2301      	movne	r3, #1
 80097f8:	2300      	moveq	r3, #0
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f af6d 	bne.w	80096dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009818:	e034      	b.n	8009884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f915 	bl	8009a4a <I2C_IsAcknowledgeFailed>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009826:	2301      	movs	r3, #1
 8009828:	e034      	b.n	8009894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009830:	d028      	beq.n	8009884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009832:	f7fc ffa3 	bl	800677c <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	d302      	bcc.n	8009848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d11d      	bne.n	8009884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009852:	2b80      	cmp	r3, #128	@ 0x80
 8009854:	d016      	beq.n	8009884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2220      	movs	r2, #32
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009870:	f043 0220 	orr.w	r2, r3, #32
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e007      	b.n	8009894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800988e:	2b80      	cmp	r3, #128	@ 0x80
 8009890:	d1c3      	bne.n	800981a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098a8:	e034      	b.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f8cd 	bl	8009a4a <I2C_IsAcknowledgeFailed>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e034      	b.n	8009924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098c0:	d028      	beq.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c2:	f7fc ff5b 	bl	800677c <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d302      	bcc.n	80098d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11d      	bne.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	f003 0304 	and.w	r3, r3, #4
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d016      	beq.n	8009914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009900:	f043 0220 	orr.w	r2, r3, #32
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e007      	b.n	8009924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b04      	cmp	r3, #4
 8009920:	d1c3      	bne.n	80098aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800992c:	b480      	push	{r7}
 800992e:	b085      	sub	sp, #20
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009938:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	08db      	lsrs	r3, r3, #3
 800993e:	4a13      	ldr	r2, [pc, #76]	@ (800998c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009940:	fba2 2303 	umull	r2, r3, r2, r3
 8009944:	0a1a      	lsrs	r2, r3, #8
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b01      	subs	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d107      	bne.n	800996a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995e:	f043 0220 	orr.w	r2, r3, #32
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e008      	b.n	800997c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009978:	d0e9      	beq.n	800994e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	20000570 	.word	0x20000570
 800998c:	14f8b589 	.word	0x14f8b589

08009990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800999c:	e049      	b.n	8009a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b10      	cmp	r3, #16
 80099aa:	d119      	bne.n	80099e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f06f 0210 	mvn.w	r2, #16
 80099b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2220      	movs	r2, #32
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e030      	b.n	8009a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099e0:	f7fc fecc 	bl	800677c <HAL_GetTick>
 80099e4:	4602      	mov	r2, r0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d11d      	bne.n	8009a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a00:	2b40      	cmp	r3, #64	@ 0x40
 8009a02:	d016      	beq.n	8009a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a1e:	f043 0220 	orr.w	r2, r3, #32
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e007      	b.n	8009a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3c:	2b40      	cmp	r3, #64	@ 0x40
 8009a3e:	d1ae      	bne.n	800999e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a60:	d11b      	bne.n	8009a9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a86:	f043 0204 	orr.w	r2, r3, #4
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e000      	b.n	8009a9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009ab8:	d103      	bne.n	8009ac2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009ac0:	e007      	b.n	8009ad2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009aca:	d102      	bne.n	8009ad2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2208      	movs	r2, #8
 8009ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
	...

08009ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e267      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d075      	beq.n	8009bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009afe:	4b88      	ldr	r3, [pc, #544]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f003 030c 	and.w	r3, r3, #12
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d00c      	beq.n	8009b24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b0a:	4b85      	ldr	r3, [pc, #532]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d112      	bne.n	8009b3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b16:	4b82      	ldr	r3, [pc, #520]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b22:	d10b      	bne.n	8009b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b24:	4b7e      	ldr	r3, [pc, #504]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d05b      	beq.n	8009be8 <HAL_RCC_OscConfig+0x108>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d157      	bne.n	8009be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e242      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b44:	d106      	bne.n	8009b54 <HAL_RCC_OscConfig+0x74>
 8009b46:	4b76      	ldr	r3, [pc, #472]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a75      	ldr	r2, [pc, #468]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e01d      	b.n	8009b90 <HAL_RCC_OscConfig+0xb0>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b5c:	d10c      	bne.n	8009b78 <HAL_RCC_OscConfig+0x98>
 8009b5e:	4b70      	ldr	r3, [pc, #448]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a6f      	ldr	r2, [pc, #444]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a6c      	ldr	r2, [pc, #432]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e00b      	b.n	8009b90 <HAL_RCC_OscConfig+0xb0>
 8009b78:	4b69      	ldr	r3, [pc, #420]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a68      	ldr	r2, [pc, #416]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	4b66      	ldr	r3, [pc, #408]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a65      	ldr	r2, [pc, #404]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d013      	beq.n	8009bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b98:	f7fc fdf0 	bl	800677c <HAL_GetTick>
 8009b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ba0:	f7fc fdec 	bl	800677c <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b64      	cmp	r3, #100	@ 0x64
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e207      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0f0      	beq.n	8009ba0 <HAL_RCC_OscConfig+0xc0>
 8009bbe:	e014      	b.n	8009bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc0:	f7fc fddc 	bl	800677c <HAL_GetTick>
 8009bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bc8:	f7fc fdd8 	bl	800677c <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b64      	cmp	r3, #100	@ 0x64
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e1f3      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bda:	4b51      	ldr	r3, [pc, #324]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0xe8>
 8009be6:	e000      	b.n	8009bea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d063      	beq.n	8009cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 030c 	and.w	r3, r3, #12
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c02:	4b47      	ldr	r3, [pc, #284]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009c0a:	2b08      	cmp	r3, #8
 8009c0c:	d11c      	bne.n	8009c48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c0e:	4b44      	ldr	r3, [pc, #272]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d116      	bne.n	8009c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c1a:	4b41      	ldr	r3, [pc, #260]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d005      	beq.n	8009c32 <HAL_RCC_OscConfig+0x152>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d001      	beq.n	8009c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e1c7      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c32:	4b3b      	ldr	r3, [pc, #236]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	4937      	ldr	r1, [pc, #220]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c46:	e03a      	b.n	8009cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d020      	beq.n	8009c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c50:	4b34      	ldr	r3, [pc, #208]	@ (8009d24 <HAL_RCC_OscConfig+0x244>)
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7fc fd91 	bl	800677c <HAL_GetTick>
 8009c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c5c:	e008      	b.n	8009c70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c5e:	f7fc fd8d 	bl	800677c <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d901      	bls.n	8009c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e1a8      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c70:	4b2b      	ldr	r3, [pc, #172]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c7c:	4b28      	ldr	r3, [pc, #160]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	00db      	lsls	r3, r3, #3
 8009c8a:	4925      	ldr	r1, [pc, #148]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	600b      	str	r3, [r1, #0]
 8009c90:	e015      	b.n	8009cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c92:	4b24      	ldr	r3, [pc, #144]	@ (8009d24 <HAL_RCC_OscConfig+0x244>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c98:	f7fc fd70 	bl	800677c <HAL_GetTick>
 8009c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ca0:	f7fc fd6c 	bl	800677c <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e187      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f0      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d036      	beq.n	8009d38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d016      	beq.n	8009d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cd2:	4b15      	ldr	r3, [pc, #84]	@ (8009d28 <HAL_RCC_OscConfig+0x248>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd8:	f7fc fd50 	bl	800677c <HAL_GetTick>
 8009cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cde:	e008      	b.n	8009cf2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ce0:	f7fc fd4c 	bl	800677c <HAL_GetTick>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d901      	bls.n	8009cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e167      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d20 <HAL_RCC_OscConfig+0x240>)
 8009cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d0f0      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x200>
 8009cfe:	e01b      	b.n	8009d38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d00:	4b09      	ldr	r3, [pc, #36]	@ (8009d28 <HAL_RCC_OscConfig+0x248>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d06:	f7fc fd39 	bl	800677c <HAL_GetTick>
 8009d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d0c:	e00e      	b.n	8009d2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d0e:	f7fc fd35 	bl	800677c <HAL_GetTick>
 8009d12:	4602      	mov	r2, r0
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d907      	bls.n	8009d2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e150      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
 8009d20:	40023800 	.word	0x40023800
 8009d24:	42470000 	.word	0x42470000
 8009d28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d2c:	4b88      	ldr	r3, [pc, #544]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d30:	f003 0302 	and.w	r3, r3, #2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1ea      	bne.n	8009d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8097 	beq.w	8009e74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d46:	2300      	movs	r3, #0
 8009d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d4a:	4b81      	ldr	r3, [pc, #516]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10f      	bne.n	8009d76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d56:	2300      	movs	r3, #0
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5e:	4a7c      	ldr	r2, [pc, #496]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d66:	4b7a      	ldr	r3, [pc, #488]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d6e:	60bb      	str	r3, [r7, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d72:	2301      	movs	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d76:	4b77      	ldr	r3, [pc, #476]	@ (8009f54 <HAL_RCC_OscConfig+0x474>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d118      	bne.n	8009db4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d82:	4b74      	ldr	r3, [pc, #464]	@ (8009f54 <HAL_RCC_OscConfig+0x474>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a73      	ldr	r2, [pc, #460]	@ (8009f54 <HAL_RCC_OscConfig+0x474>)
 8009d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d8e:	f7fc fcf5 	bl	800677c <HAL_GetTick>
 8009d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d94:	e008      	b.n	8009da8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d96:	f7fc fcf1 	bl	800677c <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d901      	bls.n	8009da8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e10c      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009da8:	4b6a      	ldr	r3, [pc, #424]	@ (8009f54 <HAL_RCC_OscConfig+0x474>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0f0      	beq.n	8009d96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d106      	bne.n	8009dca <HAL_RCC_OscConfig+0x2ea>
 8009dbc:	4b64      	ldr	r3, [pc, #400]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dc0:	4a63      	ldr	r2, [pc, #396]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dc8:	e01c      	b.n	8009e04 <HAL_RCC_OscConfig+0x324>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	d10c      	bne.n	8009dec <HAL_RCC_OscConfig+0x30c>
 8009dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dd8:	f043 0304 	orr.w	r3, r3, #4
 8009ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dde:	4b5c      	ldr	r3, [pc, #368]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009de2:	4a5b      	ldr	r2, [pc, #364]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009de4:	f043 0301 	orr.w	r3, r3, #1
 8009de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009dea:	e00b      	b.n	8009e04 <HAL_RCC_OscConfig+0x324>
 8009dec:	4b58      	ldr	r3, [pc, #352]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009df0:	4a57      	ldr	r2, [pc, #348]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009df2:	f023 0301 	bic.w	r3, r3, #1
 8009df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009df8:	4b55      	ldr	r3, [pc, #340]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009dfc:	4a54      	ldr	r2, [pc, #336]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009dfe:	f023 0304 	bic.w	r3, r3, #4
 8009e02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d015      	beq.n	8009e38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e0c:	f7fc fcb6 	bl	800677c <HAL_GetTick>
 8009e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e12:	e00a      	b.n	8009e2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e14:	f7fc fcb2 	bl	800677c <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e0cb      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e2a:	4b49      	ldr	r3, [pc, #292]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ee      	beq.n	8009e14 <HAL_RCC_OscConfig+0x334>
 8009e36:	e014      	b.n	8009e62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e38:	f7fc fca0 	bl	800677c <HAL_GetTick>
 8009e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e3e:	e00a      	b.n	8009e56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e40:	f7fc fc9c 	bl	800677c <HAL_GetTick>
 8009e44:	4602      	mov	r2, r0
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e0b5      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e56:	4b3e      	ldr	r3, [pc, #248]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e5a:	f003 0302 	and.w	r3, r3, #2
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1ee      	bne.n	8009e40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d105      	bne.n	8009e74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e68:	4b39      	ldr	r3, [pc, #228]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6c:	4a38      	ldr	r2, [pc, #224]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80a1 	beq.w	8009fc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e7e:	4b34      	ldr	r3, [pc, #208]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 030c 	and.w	r3, r3, #12
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d05c      	beq.n	8009f44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d141      	bne.n	8009f16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e92:	4b31      	ldr	r3, [pc, #196]	@ (8009f58 <HAL_RCC_OscConfig+0x478>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e98:	f7fc fc70 	bl	800677c <HAL_GetTick>
 8009e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ea0:	f7fc fc6c 	bl	800677c <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e087      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eb2:	4b27      	ldr	r3, [pc, #156]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1f0      	bne.n	8009ea0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69da      	ldr	r2, [r3, #28]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	019b      	lsls	r3, r3, #6
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed4:	085b      	lsrs	r3, r3, #1
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	041b      	lsls	r3, r3, #16
 8009eda:	431a      	orrs	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	061b      	lsls	r3, r3, #24
 8009ee2:	491b      	ldr	r1, [pc, #108]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f58 <HAL_RCC_OscConfig+0x478>)
 8009eea:	2201      	movs	r2, #1
 8009eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eee:	f7fc fc45 	bl	800677c <HAL_GetTick>
 8009ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ef4:	e008      	b.n	8009f08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ef6:	f7fc fc41 	bl	800677c <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d901      	bls.n	8009f08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e05c      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f08:	4b11      	ldr	r3, [pc, #68]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0f0      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x416>
 8009f14:	e054      	b.n	8009fc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f16:	4b10      	ldr	r3, [pc, #64]	@ (8009f58 <HAL_RCC_OscConfig+0x478>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f1c:	f7fc fc2e 	bl	800677c <HAL_GetTick>
 8009f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f22:	e008      	b.n	8009f36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f24:	f7fc fc2a 	bl	800677c <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e045      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f36:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <HAL_RCC_OscConfig+0x470>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f0      	bne.n	8009f24 <HAL_RCC_OscConfig+0x444>
 8009f42:	e03d      	b.n	8009fc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d107      	bne.n	8009f5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e038      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
 8009f50:	40023800 	.word	0x40023800
 8009f54:	40007000 	.word	0x40007000
 8009f58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8009fcc <HAL_RCC_OscConfig+0x4ec>)
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d028      	beq.n	8009fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d121      	bne.n	8009fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d11a      	bne.n	8009fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009f92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d111      	bne.n	8009fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa2:	085b      	lsrs	r3, r3, #1
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d107      	bne.n	8009fbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d001      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	40023800 	.word	0x40023800

08009fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e0cc      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fe4:	4b68      	ldr	r3, [pc, #416]	@ (800a188 <HAL_RCC_ClockConfig+0x1b8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d90c      	bls.n	800a00c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff2:	4b65      	ldr	r3, [pc, #404]	@ (800a188 <HAL_RCC_ClockConfig+0x1b8>)
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	b2d2      	uxtb	r2, r2
 8009ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ffa:	4b63      	ldr	r3, [pc, #396]	@ (800a188 <HAL_RCC_ClockConfig+0x1b8>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d001      	beq.n	800a00c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e0b8      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d020      	beq.n	800a05a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a024:	4b59      	ldr	r3, [pc, #356]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	4a58      	ldr	r2, [pc, #352]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a02a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a02e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d005      	beq.n	800a048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a03c:	4b53      	ldr	r3, [pc, #332]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	4a52      	ldr	r2, [pc, #328]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a048:	4b50      	ldr	r3, [pc, #320]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	494d      	ldr	r1, [pc, #308]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a056:	4313      	orrs	r3, r2
 800a058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d044      	beq.n	800a0f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d107      	bne.n	800a07e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a06e:	4b47      	ldr	r3, [pc, #284]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d119      	bne.n	800a0ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e07f      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d003      	beq.n	800a08e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d107      	bne.n	800a09e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a08e:	4b3f      	ldr	r3, [pc, #252]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d109      	bne.n	800a0ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e06f      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a09e:	4b3b      	ldr	r3, [pc, #236]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e067      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a0ae:	4b37      	ldr	r3, [pc, #220]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f023 0203 	bic.w	r2, r3, #3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	4934      	ldr	r1, [pc, #208]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0c0:	f7fc fb5c 	bl	800677c <HAL_GetTick>
 800a0c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0c6:	e00a      	b.n	800a0de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0c8:	f7fc fb58 	bl	800677c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d901      	bls.n	800a0de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e04f      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0de:	4b2b      	ldr	r3, [pc, #172]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f003 020c 	and.w	r2, r3, #12
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d1eb      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0f0:	4b25      	ldr	r3, [pc, #148]	@ (800a188 <HAL_RCC_ClockConfig+0x1b8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0307 	and.w	r3, r3, #7
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d20c      	bcs.n	800a118 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0fe:	4b22      	ldr	r3, [pc, #136]	@ (800a188 <HAL_RCC_ClockConfig+0x1b8>)
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a106:	4b20      	ldr	r3, [pc, #128]	@ (800a188 <HAL_RCC_ClockConfig+0x1b8>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d001      	beq.n	800a118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e032      	b.n	800a17e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0304 	and.w	r3, r3, #4
 800a120:	2b00      	cmp	r3, #0
 800a122:	d008      	beq.n	800a136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a124:	4b19      	ldr	r3, [pc, #100]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	4916      	ldr	r1, [pc, #88]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a132:	4313      	orrs	r3, r2
 800a134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 0308 	and.w	r3, r3, #8
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d009      	beq.n	800a156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a142:	4b12      	ldr	r3, [pc, #72]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	490e      	ldr	r1, [pc, #56]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a152:	4313      	orrs	r3, r2
 800a154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a156:	f000 f821 	bl	800a19c <HAL_RCC_GetSysClockFreq>
 800a15a:	4602      	mov	r2, r0
 800a15c:	4b0b      	ldr	r3, [pc, #44]	@ (800a18c <HAL_RCC_ClockConfig+0x1bc>)
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	091b      	lsrs	r3, r3, #4
 800a162:	f003 030f 	and.w	r3, r3, #15
 800a166:	490a      	ldr	r1, [pc, #40]	@ (800a190 <HAL_RCC_ClockConfig+0x1c0>)
 800a168:	5ccb      	ldrb	r3, [r1, r3]
 800a16a:	fa22 f303 	lsr.w	r3, r2, r3
 800a16e:	4a09      	ldr	r2, [pc, #36]	@ (800a194 <HAL_RCC_ClockConfig+0x1c4>)
 800a170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a172:	4b09      	ldr	r3, [pc, #36]	@ (800a198 <HAL_RCC_ClockConfig+0x1c8>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f7fc fabc 	bl	80066f4 <HAL_InitTick>

  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	40023c00 	.word	0x40023c00
 800a18c:	40023800 	.word	0x40023800
 800a190:	0800cea0 	.word	0x0800cea0
 800a194:	20000570 	.word	0x20000570
 800a198:	20000574 	.word	0x20000574

0800a19c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1a0:	b094      	sub	sp, #80	@ 0x50
 800a1a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a1b4:	4b79      	ldr	r3, [pc, #484]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x200>)
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f003 030c 	and.w	r3, r3, #12
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d00d      	beq.n	800a1dc <HAL_RCC_GetSysClockFreq+0x40>
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	f200 80e1 	bhi.w	800a388 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d002      	beq.n	800a1d0 <HAL_RCC_GetSysClockFreq+0x34>
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d003      	beq.n	800a1d6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a1ce:	e0db      	b.n	800a388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1d0:	4b73      	ldr	r3, [pc, #460]	@ (800a3a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a1d4:	e0db      	b.n	800a38e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1d6:	4b73      	ldr	r3, [pc, #460]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0x208>)
 800a1d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a1da:	e0d8      	b.n	800a38e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1dc:	4b6f      	ldr	r3, [pc, #444]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x200>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1e6:	4b6d      	ldr	r3, [pc, #436]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x200>)
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d063      	beq.n	800a2ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1f2:	4b6a      	ldr	r3, [pc, #424]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x200>)
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a204:	633b      	str	r3, [r7, #48]	@ 0x30
 800a206:	2300      	movs	r3, #0
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
 800a20a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a20e:	4622      	mov	r2, r4
 800a210:	462b      	mov	r3, r5
 800a212:	f04f 0000 	mov.w	r0, #0
 800a216:	f04f 0100 	mov.w	r1, #0
 800a21a:	0159      	lsls	r1, r3, #5
 800a21c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a220:	0150      	lsls	r0, r2, #5
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4621      	mov	r1, r4
 800a228:	1a51      	subs	r1, r2, r1
 800a22a:	6139      	str	r1, [r7, #16]
 800a22c:	4629      	mov	r1, r5
 800a22e:	eb63 0301 	sbc.w	r3, r3, r1
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	f04f 0200 	mov.w	r2, #0
 800a238:	f04f 0300 	mov.w	r3, #0
 800a23c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a240:	4659      	mov	r1, fp
 800a242:	018b      	lsls	r3, r1, #6
 800a244:	4651      	mov	r1, sl
 800a246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a24a:	4651      	mov	r1, sl
 800a24c:	018a      	lsls	r2, r1, #6
 800a24e:	4651      	mov	r1, sl
 800a250:	ebb2 0801 	subs.w	r8, r2, r1
 800a254:	4659      	mov	r1, fp
 800a256:	eb63 0901 	sbc.w	r9, r3, r1
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a26a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a26e:	4690      	mov	r8, r2
 800a270:	4699      	mov	r9, r3
 800a272:	4623      	mov	r3, r4
 800a274:	eb18 0303 	adds.w	r3, r8, r3
 800a278:	60bb      	str	r3, [r7, #8]
 800a27a:	462b      	mov	r3, r5
 800a27c:	eb49 0303 	adc.w	r3, r9, r3
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	f04f 0200 	mov.w	r2, #0
 800a286:	f04f 0300 	mov.w	r3, #0
 800a28a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a28e:	4629      	mov	r1, r5
 800a290:	024b      	lsls	r3, r1, #9
 800a292:	4621      	mov	r1, r4
 800a294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a298:	4621      	mov	r1, r4
 800a29a:	024a      	lsls	r2, r1, #9
 800a29c:	4610      	mov	r0, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a2ac:	f7f5 ffe8 	bl	8000280 <__aeabi_uldivmod>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2b8:	e058      	b.n	800a36c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a2ba:	4b38      	ldr	r3, [pc, #224]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x200>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	099b      	lsrs	r3, r3, #6
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a2ca:	623b      	str	r3, [r7, #32]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	464b      	mov	r3, r9
 800a2d8:	f04f 0000 	mov.w	r0, #0
 800a2dc:	f04f 0100 	mov.w	r1, #0
 800a2e0:	0159      	lsls	r1, r3, #5
 800a2e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a2e6:	0150      	lsls	r0, r2, #5
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	ebb2 0a01 	subs.w	sl, r2, r1
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	eb63 0b01 	sbc.w	fp, r3, r1
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a30c:	ebb2 040a 	subs.w	r4, r2, sl
 800a310:	eb63 050b 	sbc.w	r5, r3, fp
 800a314:	f04f 0200 	mov.w	r2, #0
 800a318:	f04f 0300 	mov.w	r3, #0
 800a31c:	00eb      	lsls	r3, r5, #3
 800a31e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a322:	00e2      	lsls	r2, r4, #3
 800a324:	4614      	mov	r4, r2
 800a326:	461d      	mov	r5, r3
 800a328:	4643      	mov	r3, r8
 800a32a:	18e3      	adds	r3, r4, r3
 800a32c:	603b      	str	r3, [r7, #0]
 800a32e:	464b      	mov	r3, r9
 800a330:	eb45 0303 	adc.w	r3, r5, r3
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	f04f 0200 	mov.w	r2, #0
 800a33a:	f04f 0300 	mov.w	r3, #0
 800a33e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a342:	4629      	mov	r1, r5
 800a344:	028b      	lsls	r3, r1, #10
 800a346:	4621      	mov	r1, r4
 800a348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a34c:	4621      	mov	r1, r4
 800a34e:	028a      	lsls	r2, r1, #10
 800a350:	4610      	mov	r0, r2
 800a352:	4619      	mov	r1, r3
 800a354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a356:	2200      	movs	r2, #0
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	61fa      	str	r2, [r7, #28]
 800a35c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a360:	f7f5 ff8e 	bl	8000280 <__aeabi_uldivmod>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4613      	mov	r3, r2
 800a36a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a36c:	4b0b      	ldr	r3, [pc, #44]	@ (800a39c <HAL_RCC_GetSysClockFreq+0x200>)
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	0c1b      	lsrs	r3, r3, #16
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	3301      	adds	r3, #1
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a37c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a380:	fbb2 f3f3 	udiv	r3, r2, r3
 800a384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a386:	e002      	b.n	800a38e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a388:	4b05      	ldr	r3, [pc, #20]	@ (800a3a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a38a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a38c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a38e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a390:	4618      	mov	r0, r3
 800a392:	3750      	adds	r7, #80	@ 0x50
 800a394:	46bd      	mov	sp, r7
 800a396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a39a:	bf00      	nop
 800a39c:	40023800 	.word	0x40023800
 800a3a0:	00f42400 	.word	0x00f42400
 800a3a4:	007a1200 	.word	0x007a1200

0800a3a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3ac:	4b03      	ldr	r3, [pc, #12]	@ (800a3bc <HAL_RCC_GetHCLKFreq+0x14>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	20000570 	.word	0x20000570

0800a3c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a3c4:	f7ff fff0 	bl	800a3a8 <HAL_RCC_GetHCLKFreq>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	4b05      	ldr	r3, [pc, #20]	@ (800a3e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	0a9b      	lsrs	r3, r3, #10
 800a3d0:	f003 0307 	and.w	r3, r3, #7
 800a3d4:	4903      	ldr	r1, [pc, #12]	@ (800a3e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3d6:	5ccb      	ldrb	r3, [r1, r3]
 800a3d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	0800ceb0 	.word	0x0800ceb0

0800a3e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a3ec:	f7ff ffdc 	bl	800a3a8 <HAL_RCC_GetHCLKFreq>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	4b05      	ldr	r3, [pc, #20]	@ (800a408 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	0b5b      	lsrs	r3, r3, #13
 800a3f8:	f003 0307 	and.w	r3, r3, #7
 800a3fc:	4903      	ldr	r1, [pc, #12]	@ (800a40c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a3fe:	5ccb      	ldrb	r3, [r1, r3]
 800a400:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a404:	4618      	mov	r0, r3
 800a406:	bd80      	pop	{r7, pc}
 800a408:	40023800 	.word	0x40023800
 800a40c:	0800ceb0 	.word	0x0800ceb0

0800a410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e041      	b.n	800a4a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7fb ff84 	bl	8006344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2202      	movs	r2, #2
 800a440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3304      	adds	r3, #4
 800a44c:	4619      	mov	r1, r3
 800a44e:	4610      	mov	r0, r2
 800a450:	f000 fa70 	bl	800a934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d001      	beq.n	800a4c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e044      	b.n	800a552 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2202      	movs	r2, #2
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f042 0201 	orr.w	r2, r2, #1
 800a4de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a1e      	ldr	r2, [pc, #120]	@ (800a560 <HAL_TIM_Base_Start_IT+0xb0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d018      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x6c>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f2:	d013      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x6c>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a1a      	ldr	r2, [pc, #104]	@ (800a564 <HAL_TIM_Base_Start_IT+0xb4>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d00e      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x6c>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a19      	ldr	r2, [pc, #100]	@ (800a568 <HAL_TIM_Base_Start_IT+0xb8>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d009      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x6c>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a17      	ldr	r2, [pc, #92]	@ (800a56c <HAL_TIM_Base_Start_IT+0xbc>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d004      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x6c>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <HAL_TIM_Base_Start_IT+0xc0>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d111      	bne.n	800a540 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f003 0307 	and.w	r3, r3, #7
 800a526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b06      	cmp	r3, #6
 800a52c:	d010      	beq.n	800a550 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f042 0201 	orr.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a53e:	e007      	b.n	800a550 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0201 	orr.w	r2, r2, #1
 800a54e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40010000 	.word	0x40010000
 800a564:	40000400 	.word	0x40000400
 800a568:	40000800 	.word	0x40000800
 800a56c:	40000c00 	.word	0x40000c00
 800a570:	40014000 	.word	0x40014000

0800a574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d020      	beq.n	800a5d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f003 0302 	and.w	r3, r3, #2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01b      	beq.n	800a5d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f06f 0202 	mvn.w	r2, #2
 800a5a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	f003 0303 	and.w	r3, r3, #3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f999 	bl	800a8f6 <HAL_TIM_IC_CaptureCallback>
 800a5c4:	e005      	b.n	800a5d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f98b 	bl	800a8e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f99c 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f003 0304 	and.w	r3, r3, #4
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d020      	beq.n	800a624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01b      	beq.n	800a624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f06f 0204 	mvn.w	r2, #4
 800a5f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f973 	bl	800a8f6 <HAL_TIM_IC_CaptureCallback>
 800a610:	e005      	b.n	800a61e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f965 	bl	800a8e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f976 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f003 0308 	and.w	r3, r3, #8
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d020      	beq.n	800a670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01b      	beq.n	800a670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f06f 0208 	mvn.w	r2, #8
 800a640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2204      	movs	r2, #4
 800a646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	f003 0303 	and.w	r3, r3, #3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f94d 	bl	800a8f6 <HAL_TIM_IC_CaptureCallback>
 800a65c:	e005      	b.n	800a66a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f93f 	bl	800a8e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f950 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f003 0310 	and.w	r3, r3, #16
 800a676:	2b00      	cmp	r3, #0
 800a678:	d020      	beq.n	800a6bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f003 0310 	and.w	r3, r3, #16
 800a680:	2b00      	cmp	r3, #0
 800a682:	d01b      	beq.n	800a6bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f06f 0210 	mvn.w	r2, #16
 800a68c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2208      	movs	r2, #8
 800a692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d003      	beq.n	800a6aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f927 	bl	800a8f6 <HAL_TIM_IC_CaptureCallback>
 800a6a8:	e005      	b.n	800a6b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f919 	bl	800a8e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f92a 	bl	800a90a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00c      	beq.n	800a6e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d007      	beq.n	800a6e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f06f 0201 	mvn.w	r2, #1
 800a6d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7f9 f93a 	bl	8003954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00c      	beq.n	800a704 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fab0 	bl	800ac64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00c      	beq.n	800a728 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a714:	2b00      	cmp	r3, #0
 800a716:	d007      	beq.n	800a728 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f8fb 	bl	800a91e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f003 0320 	and.w	r3, r3, #32
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00c      	beq.n	800a74c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f003 0320 	and.w	r3, r3, #32
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d007      	beq.n	800a74c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f06f 0220 	mvn.w	r2, #32
 800a744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 fa82 	bl	800ac50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a74c:	bf00      	nop
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d101      	bne.n	800a770 <HAL_TIM_ConfigClockSource+0x1c>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e0b4      	b.n	800a8da <HAL_TIM_ConfigClockSource+0x186>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2202      	movs	r2, #2
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a78e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7a8:	d03e      	beq.n	800a828 <HAL_TIM_ConfigClockSource+0xd4>
 800a7aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7ae:	f200 8087 	bhi.w	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7b6:	f000 8086 	beq.w	800a8c6 <HAL_TIM_ConfigClockSource+0x172>
 800a7ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7be:	d87f      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c0:	2b70      	cmp	r3, #112	@ 0x70
 800a7c2:	d01a      	beq.n	800a7fa <HAL_TIM_ConfigClockSource+0xa6>
 800a7c4:	2b70      	cmp	r3, #112	@ 0x70
 800a7c6:	d87b      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7c8:	2b60      	cmp	r3, #96	@ 0x60
 800a7ca:	d050      	beq.n	800a86e <HAL_TIM_ConfigClockSource+0x11a>
 800a7cc:	2b60      	cmp	r3, #96	@ 0x60
 800a7ce:	d877      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7d0:	2b50      	cmp	r3, #80	@ 0x50
 800a7d2:	d03c      	beq.n	800a84e <HAL_TIM_ConfigClockSource+0xfa>
 800a7d4:	2b50      	cmp	r3, #80	@ 0x50
 800a7d6:	d873      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7d8:	2b40      	cmp	r3, #64	@ 0x40
 800a7da:	d058      	beq.n	800a88e <HAL_TIM_ConfigClockSource+0x13a>
 800a7dc:	2b40      	cmp	r3, #64	@ 0x40
 800a7de:	d86f      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7e0:	2b30      	cmp	r3, #48	@ 0x30
 800a7e2:	d064      	beq.n	800a8ae <HAL_TIM_ConfigClockSource+0x15a>
 800a7e4:	2b30      	cmp	r3, #48	@ 0x30
 800a7e6:	d86b      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7e8:	2b20      	cmp	r3, #32
 800a7ea:	d060      	beq.n	800a8ae <HAL_TIM_ConfigClockSource+0x15a>
 800a7ec:	2b20      	cmp	r3, #32
 800a7ee:	d867      	bhi.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d05c      	beq.n	800a8ae <HAL_TIM_ConfigClockSource+0x15a>
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	d05a      	beq.n	800a8ae <HAL_TIM_ConfigClockSource+0x15a>
 800a7f8:	e062      	b.n	800a8c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a80a:	f000 f993 	bl	800ab34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a81c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	609a      	str	r2, [r3, #8]
      break;
 800a826:	e04f      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a838:	f000 f97c 	bl	800ab34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689a      	ldr	r2, [r3, #8]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a84a:	609a      	str	r2, [r3, #8]
      break;
 800a84c:	e03c      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a85a:	461a      	mov	r2, r3
 800a85c:	f000 f8f0 	bl	800aa40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2150      	movs	r1, #80	@ 0x50
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f949 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a86c:	e02c      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a87a:	461a      	mov	r2, r3
 800a87c:	f000 f90f 	bl	800aa9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2160      	movs	r1, #96	@ 0x60
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f939 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a88c:	e01c      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a89a:	461a      	mov	r2, r3
 800a89c:	f000 f8d0 	bl	800aa40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2140      	movs	r1, #64	@ 0x40
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f929 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a8ac:	e00c      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f000 f920 	bl	800aafe <TIM_ITRx_SetConfig>
      break;
 800a8be:	e003      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c4:	e000      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a8c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8ea:	bf00      	nop
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8fe:	bf00      	nop
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
	...

0800a934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a37      	ldr	r2, [pc, #220]	@ (800aa24 <TIM_Base_SetConfig+0xf0>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00f      	beq.n	800a96c <TIM_Base_SetConfig+0x38>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a952:	d00b      	beq.n	800a96c <TIM_Base_SetConfig+0x38>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a34      	ldr	r2, [pc, #208]	@ (800aa28 <TIM_Base_SetConfig+0xf4>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d007      	beq.n	800a96c <TIM_Base_SetConfig+0x38>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a33      	ldr	r2, [pc, #204]	@ (800aa2c <TIM_Base_SetConfig+0xf8>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d003      	beq.n	800a96c <TIM_Base_SetConfig+0x38>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a32      	ldr	r2, [pc, #200]	@ (800aa30 <TIM_Base_SetConfig+0xfc>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d108      	bne.n	800a97e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a28      	ldr	r2, [pc, #160]	@ (800aa24 <TIM_Base_SetConfig+0xf0>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d01b      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a98c:	d017      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a25      	ldr	r2, [pc, #148]	@ (800aa28 <TIM_Base_SetConfig+0xf4>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d013      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a24      	ldr	r2, [pc, #144]	@ (800aa2c <TIM_Base_SetConfig+0xf8>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d00f      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4a23      	ldr	r2, [pc, #140]	@ (800aa30 <TIM_Base_SetConfig+0xfc>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d00b      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a22      	ldr	r2, [pc, #136]	@ (800aa34 <TIM_Base_SetConfig+0x100>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d007      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a21      	ldr	r2, [pc, #132]	@ (800aa38 <TIM_Base_SetConfig+0x104>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d003      	beq.n	800a9be <TIM_Base_SetConfig+0x8a>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a20      	ldr	r2, [pc, #128]	@ (800aa3c <TIM_Base_SetConfig+0x108>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d108      	bne.n	800a9d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a0c      	ldr	r2, [pc, #48]	@ (800aa24 <TIM_Base_SetConfig+0xf0>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d103      	bne.n	800a9fe <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	691a      	ldr	r2, [r3, #16]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f043 0204 	orr.w	r2, r3, #4
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	601a      	str	r2, [r3, #0]
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	40010000 	.word	0x40010000
 800aa28:	40000400 	.word	0x40000400
 800aa2c:	40000800 	.word	0x40000800
 800aa30:	40000c00 	.word	0x40000c00
 800aa34:	40014000 	.word	0x40014000
 800aa38:	40014400 	.word	0x40014400
 800aa3c:	40014800 	.word	0x40014800

0800aa40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b087      	sub	sp, #28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	f023 0201 	bic.w	r2, r3, #1
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	699b      	ldr	r3, [r3, #24]
 800aa62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f023 030a 	bic.w	r3, r3, #10
 800aa7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	693a      	ldr	r2, [r7, #16]
 800aa8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6a1b      	ldr	r3, [r3, #32]
 800aab4:	f023 0210 	bic.w	r2, r3, #16
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	699b      	ldr	r3, [r3, #24]
 800aac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	031b      	lsls	r3, r3, #12
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aada:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	621a      	str	r2, [r3, #32]
}
 800aaf2:	bf00      	nop
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	f043 0307 	orr.w	r3, r3, #7
 800ab20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	609a      	str	r2, [r3, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b087      	sub	sp, #28
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	021a      	lsls	r2, r3, #8
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	609a      	str	r2, [r3, #8]
}
 800ab68:	bf00      	nop
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d101      	bne.n	800ab8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e050      	b.n	800ac2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2202      	movs	r2, #2
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4313      	orrs	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a1c      	ldr	r2, [pc, #112]	@ (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d018      	beq.n	800ac02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abd8:	d013      	beq.n	800ac02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a18      	ldr	r2, [pc, #96]	@ (800ac40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d00e      	beq.n	800ac02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a16      	ldr	r2, [pc, #88]	@ (800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d009      	beq.n	800ac02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a15      	ldr	r2, [pc, #84]	@ (800ac48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d004      	beq.n	800ac02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a13      	ldr	r2, [pc, #76]	@ (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d10c      	bne.n	800ac1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40010000 	.word	0x40010000
 800ac40:	40000400 	.word	0x40000400
 800ac44:	40000800 	.word	0x40000800
 800ac48:	40000c00 	.word	0x40000c00
 800ac4c:	40014000 	.word	0x40014000

0800ac50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac6c:	bf00      	nop
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e042      	b.n	800ad10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7fb fb76 	bl	8006390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2224      	movs	r2, #36	@ 0x24
 800aca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800acba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fd7f 	bl	800b7c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	691a      	ldr	r2, [r3, #16]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800acd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ace0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800acf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08a      	sub	sp, #40	@ 0x28
 800ad1c:	af02      	add	r7, sp, #8
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	4613      	mov	r3, r2
 800ad26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b20      	cmp	r3, #32
 800ad36:	d175      	bne.n	800ae24 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d002      	beq.n	800ad44 <HAL_UART_Transmit+0x2c>
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e06e      	b.n	800ae26 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2221      	movs	r2, #33	@ 0x21
 800ad52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad56:	f7fb fd11 	bl	800677c <HAL_GetTick>
 800ad5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	88fa      	ldrh	r2, [r7, #6]
 800ad60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	88fa      	ldrh	r2, [r7, #6]
 800ad66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad70:	d108      	bne.n	800ad84 <HAL_UART_Transmit+0x6c>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d104      	bne.n	800ad84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	61bb      	str	r3, [r7, #24]
 800ad82:	e003      	b.n	800ad8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad8c:	e02e      	b.n	800adec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2200      	movs	r2, #0
 800ad96:	2180      	movs	r1, #128	@ 0x80
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 fb1d 	bl	800b3d8 <UART_WaitOnFlagUntilTimeout>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e03a      	b.n	800ae26 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10b      	bne.n	800adce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	3302      	adds	r3, #2
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	e007      	b.n	800adde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	3301      	adds	r3, #1
 800addc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	3b01      	subs	r3, #1
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1cb      	bne.n	800ad8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2200      	movs	r2, #0
 800adfe:	2140      	movs	r1, #64	@ 0x40
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 fae9 	bl	800b3d8 <UART_WaitOnFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e006      	b.n	800ae26 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2220      	movs	r2, #32
 800ae1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e000      	b.n	800ae26 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ae24:	2302      	movs	r3, #2
  }
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b0ba      	sub	sp, #232	@ 0xe8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ae6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10f      	bne.n	800ae96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d009      	beq.n	800ae96 <HAL_UART_IRQHandler+0x66>
 800ae82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae86:	f003 0320 	and.w	r3, r3, #32
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fbd7 	bl	800b642 <UART_Receive_IT>
      return;
 800ae94:	e273      	b.n	800b37e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 80de 	beq.w	800b05c <HAL_UART_IRQHandler+0x22c>
 800aea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d106      	bne.n	800aeba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aeac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80d1 	beq.w	800b05c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aeba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00b      	beq.n	800aede <HAL_UART_IRQHandler+0xae>
 800aec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d005      	beq.n	800aede <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aed6:	f043 0201 	orr.w	r2, r3, #1
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee2:	f003 0304 	and.w	r3, r3, #4
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <HAL_UART_IRQHandler+0xd2>
 800aeea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d005      	beq.n	800af02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aefa:	f043 0202 	orr.w	r2, r3, #2
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af06:	f003 0302 	and.w	r3, r3, #2
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <HAL_UART_IRQHandler+0xf6>
 800af0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d005      	beq.n	800af26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af1e:	f043 0204 	orr.w	r2, r3, #4
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2a:	f003 0308 	and.w	r3, r3, #8
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d011      	beq.n	800af56 <HAL_UART_IRQHandler+0x126>
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d105      	bne.n	800af4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af4e:	f043 0208 	orr.w	r2, r3, #8
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 820a 	beq.w	800b374 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af64:	f003 0320 	and.w	r3, r3, #32
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d008      	beq.n	800af7e <HAL_UART_IRQHandler+0x14e>
 800af6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fb62 	bl	800b642 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af88:	2b40      	cmp	r3, #64	@ 0x40
 800af8a:	bf0c      	ite	eq
 800af8c:	2301      	moveq	r3, #1
 800af8e:	2300      	movne	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af9a:	f003 0308 	and.w	r3, r3, #8
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d103      	bne.n	800afaa <HAL_UART_IRQHandler+0x17a>
 800afa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d04f      	beq.n	800b04a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa6d 	bl	800b48a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afba:	2b40      	cmp	r3, #64	@ 0x40
 800afbc:	d141      	bne.n	800b042 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3314      	adds	r3, #20
 800afc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800afcc:	e853 3f00 	ldrex	r3, [r3]
 800afd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800afd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800afd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3314      	adds	r3, #20
 800afe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800afea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1d9      	bne.n	800afbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d013      	beq.n	800b03a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b016:	4a8a      	ldr	r2, [pc, #552]	@ (800b240 <HAL_UART_IRQHandler+0x410>)
 800b018:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fb fd5d 	bl	8006ade <HAL_DMA_Abort_IT>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d016      	beq.n	800b058 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b034:	4610      	mov	r0, r2
 800b036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b038:	e00e      	b.n	800b058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f9b6 	bl	800b3ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b040:	e00a      	b.n	800b058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f9b2 	bl	800b3ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b048:	e006      	b.n	800b058 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9ae 	bl	800b3ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800b056:	e18d      	b.n	800b374 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b058:	bf00      	nop
    return;
 800b05a:	e18b      	b.n	800b374 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b060:	2b01      	cmp	r3, #1
 800b062:	f040 8167 	bne.w	800b334 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b06a:	f003 0310 	and.w	r3, r3, #16
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 8160 	beq.w	800b334 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800b074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b078:	f003 0310 	and.w	r3, r3, #16
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8159 	beq.w	800b334 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b082:	2300      	movs	r3, #0
 800b084:	60bb      	str	r3, [r7, #8]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60bb      	str	r3, [r7, #8]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	60bb      	str	r3, [r7, #8]
 800b096:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a2:	2b40      	cmp	r3, #64	@ 0x40
 800b0a4:	f040 80ce 	bne.w	800b244 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b0b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 80a9 	beq.w	800b210 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b0c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	f080 80a2 	bcs.w	800b210 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b0d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0de:	f000 8088 	beq.w	800b1f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	330c      	adds	r3, #12
 800b0e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b0f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b0fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b100:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b10e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b116:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b11a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1d9      	bne.n	800b0e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3314      	adds	r3, #20
 800b134:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b140:	f023 0301 	bic.w	r3, r3, #1
 800b144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	3314      	adds	r3, #20
 800b14e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b152:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b156:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b158:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b15a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e1      	bne.n	800b12e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3314      	adds	r3, #20
 800b170:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b174:	e853 3f00 	ldrex	r3, [r3]
 800b178:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b17a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b17c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3314      	adds	r3, #20
 800b18a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b18e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b190:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b192:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b194:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b19c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e3      	bne.n	800b16a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1c2:	f023 0310 	bic.w	r3, r3, #16
 800b1c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	330c      	adds	r3, #12
 800b1d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b1d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e3      	bne.n	800b1b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fb fc06 	bl	80069fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b200:	b29b      	uxth	r3, r3
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	b29b      	uxth	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f8d9 	bl	800b3c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b20e:	e0b3      	b.n	800b378 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b218:	429a      	cmp	r2, r3
 800b21a:	f040 80ad 	bne.w	800b378 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b222:	69db      	ldr	r3, [r3, #28]
 800b224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b228:	f040 80a6 	bne.w	800b378 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f8c1 	bl	800b3c0 <HAL_UARTEx_RxEventCallback>
      return;
 800b23e:	e09b      	b.n	800b378 <HAL_UART_IRQHandler+0x548>
 800b240:	0800b551 	.word	0x0800b551
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	1ad3      	subs	r3, r2, r3
 800b250:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b258:	b29b      	uxth	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 808e 	beq.w	800b37c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 8089 	beq.w	800b37c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	330c      	adds	r3, #12
 800b270:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b274:	e853 3f00 	ldrex	r3, [r3]
 800b278:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b280:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	330c      	adds	r3, #12
 800b28a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b28e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b290:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b296:	e841 2300 	strex	r3, r2, [r1]
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e3      	bne.n	800b26a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3314      	adds	r3, #20
 800b2a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f023 0301 	bic.w	r3, r3, #1
 800b2b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	3314      	adds	r3, #20
 800b2c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b2c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e3      	bne.n	800b2a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2220      	movs	r2, #32
 800b2de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	e853 3f00 	ldrex	r3, [r3]
 800b2f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0310 	bic.w	r3, r3, #16
 800b2fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	330c      	adds	r3, #12
 800b308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b30c:	61fa      	str	r2, [r7, #28]
 800b30e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	69b9      	ldr	r1, [r7, #24]
 800b312:	69fa      	ldr	r2, [r7, #28]
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	617b      	str	r3, [r7, #20]
   return(result);
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e3      	bne.n	800b2e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2202      	movs	r2, #2
 800b324:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b326:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f847 	bl	800b3c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b332:	e023      	b.n	800b37c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d009      	beq.n	800b354 <HAL_UART_IRQHandler+0x524>
 800b340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f910 	bl	800b572 <UART_Transmit_IT>
    return;
 800b352:	e014      	b.n	800b37e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00e      	beq.n	800b37e <HAL_UART_IRQHandler+0x54e>
 800b360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d008      	beq.n	800b37e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f950 	bl	800b612 <UART_EndTransmit_IT>
    return;
 800b372:	e004      	b.n	800b37e <HAL_UART_IRQHandler+0x54e>
    return;
 800b374:	bf00      	nop
 800b376:	e002      	b.n	800b37e <HAL_UART_IRQHandler+0x54e>
      return;
 800b378:	bf00      	nop
 800b37a:	e000      	b.n	800b37e <HAL_UART_IRQHandler+0x54e>
      return;
 800b37c:	bf00      	nop
  }
}
 800b37e:	37e8      	adds	r7, #232	@ 0xe8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3e8:	e03b      	b.n	800b462 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3f0:	d037      	beq.n	800b462 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3f2:	f7fb f9c3 	bl	800677c <HAL_GetTick>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	6a3a      	ldr	r2, [r7, #32]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d302      	bcc.n	800b408 <UART_WaitOnFlagUntilTimeout+0x30>
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e03a      	b.n	800b482 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	d023      	beq.n	800b462 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b80      	cmp	r3, #128	@ 0x80
 800b41e:	d020      	beq.n	800b462 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b40      	cmp	r3, #64	@ 0x40
 800b424:	d01d      	beq.n	800b462 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0308 	and.w	r3, r3, #8
 800b430:	2b08      	cmp	r3, #8
 800b432:	d116      	bne.n	800b462 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b434:	2300      	movs	r3, #0
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	617b      	str	r3, [r7, #20]
 800b448:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f000 f81d 	bl	800b48a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2208      	movs	r2, #8
 800b454:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e00f      	b.n	800b482 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4013      	ands	r3, r2
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	bf0c      	ite	eq
 800b472:	2301      	moveq	r3, #1
 800b474:	2300      	movne	r3, #0
 800b476:	b2db      	uxtb	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d0b4      	beq.n	800b3ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b095      	sub	sp, #84	@ 0x54
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	330c      	adds	r3, #12
 800b498:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	330c      	adds	r3, #12
 800b4b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4b2:	643a      	str	r2, [r7, #64]	@ 0x40
 800b4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e5      	bne.n	800b492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3314      	adds	r3, #20
 800b4cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ce:	6a3b      	ldr	r3, [r7, #32]
 800b4d0:	e853 3f00 	ldrex	r3, [r3]
 800b4d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	f023 0301 	bic.w	r3, r3, #1
 800b4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3314      	adds	r3, #20
 800b4e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4ee:	e841 2300 	strex	r3, r2, [r1]
 800b4f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d1e5      	bne.n	800b4c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d119      	bne.n	800b536 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	330c      	adds	r3, #12
 800b508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	60bb      	str	r3, [r7, #8]
   return(result);
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f023 0310 	bic.w	r3, r3, #16
 800b518:	647b      	str	r3, [r7, #68]	@ 0x44
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	330c      	adds	r3, #12
 800b520:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b522:	61ba      	str	r2, [r7, #24]
 800b524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	6979      	ldr	r1, [r7, #20]
 800b528:	69ba      	ldr	r2, [r7, #24]
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	613b      	str	r3, [r7, #16]
   return(result);
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e5      	bne.n	800b502 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2220      	movs	r2, #32
 800b53a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b544:	bf00      	nop
 800b546:	3754      	adds	r7, #84	@ 0x54
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b55c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f7ff ff21 	bl	800b3ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b56a:	bf00      	nop
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b572:	b480      	push	{r7}
 800b574:	b085      	sub	sp, #20
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b21      	cmp	r3, #33	@ 0x21
 800b584:	d13e      	bne.n	800b604 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b58e:	d114      	bne.n	800b5ba <UART_Transmit_IT+0x48>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d110      	bne.n	800b5ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a1b      	ldr	r3, [r3, #32]
 800b59c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	1c9a      	adds	r2, r3, #2
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	621a      	str	r2, [r3, #32]
 800b5b8:	e008      	b.n	800b5cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	1c59      	adds	r1, r3, #1
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	6211      	str	r1, [r2, #32]
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	4619      	mov	r1, r3
 800b5da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10f      	bne.n	800b600 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b5ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68da      	ldr	r2, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b5fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	e000      	b.n	800b606 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b082      	sub	sp, #8
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68da      	ldr	r2, [r3, #12]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b628:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fea6 	bl	800b384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b08c      	sub	sp, #48	@ 0x30
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b22      	cmp	r3, #34	@ 0x22
 800b65c:	f040 80aa 	bne.w	800b7b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b668:	d115      	bne.n	800b696 <UART_Receive_IT+0x54>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d111      	bne.n	800b696 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b676:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	b29b      	uxth	r3, r3
 800b680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b684:	b29a      	uxth	r2, r3
 800b686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68e:	1c9a      	adds	r2, r3, #2
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	629a      	str	r2, [r3, #40]	@ 0x28
 800b694:	e024      	b.n	800b6e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6a4:	d007      	beq.n	800b6b6 <UART_Receive_IT+0x74>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10a      	bne.n	800b6c4 <UART_Receive_IT+0x82>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d106      	bne.n	800b6c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	b2da      	uxtb	r2, r3
 800b6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e008      	b.n	800b6d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d15d      	bne.n	800b7b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68da      	ldr	r2, [r3, #12]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f022 0220 	bic.w	r2, r2, #32
 800b702:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	695a      	ldr	r2, [r3, #20]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f022 0201 	bic.w	r2, r2, #1
 800b722:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b736:	2b01      	cmp	r3, #1
 800b738:	d135      	bne.n	800b7a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	330c      	adds	r3, #12
 800b746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	e853 3f00 	ldrex	r3, [r3]
 800b74e:	613b      	str	r3, [r7, #16]
   return(result);
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f023 0310 	bic.w	r3, r3, #16
 800b756:	627b      	str	r3, [r7, #36]	@ 0x24
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	330c      	adds	r3, #12
 800b75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b760:	623a      	str	r2, [r7, #32]
 800b762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b764:	69f9      	ldr	r1, [r7, #28]
 800b766:	6a3a      	ldr	r2, [r7, #32]
 800b768:	e841 2300 	strex	r3, r2, [r1]
 800b76c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e5      	bne.n	800b740 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0310 	and.w	r3, r3, #16
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d10a      	bne.n	800b798 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b782:	2300      	movs	r3, #0
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	60fb      	str	r3, [r7, #12]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fe0e 	bl	800b3c0 <HAL_UARTEx_RxEventCallback>
 800b7a4:	e002      	b.n	800b7ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff fdf6 	bl	800b398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e002      	b.n	800b7b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e000      	b.n	800b7b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b7b4:	2302      	movs	r3, #2
  }
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3730      	adds	r7, #48	@ 0x30
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7c4:	b0c0      	sub	sp, #256	@ 0x100
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7dc:	68d9      	ldr	r1, [r3, #12]
 800b7de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	ea40 0301 	orr.w	r3, r0, r1
 800b7e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7ee:	689a      	ldr	r2, [r3, #8]
 800b7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	431a      	orrs	r2, r3
 800b800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	4313      	orrs	r3, r2
 800b808:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b818:	f021 010c 	bic.w	r1, r1, #12
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b826:	430b      	orrs	r3, r1
 800b828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	695b      	ldr	r3, [r3, #20]
 800b832:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b83a:	6999      	ldr	r1, [r3, #24]
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	ea40 0301 	orr.w	r3, r0, r1
 800b846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	4b8f      	ldr	r3, [pc, #572]	@ (800ba8c <UART_SetConfig+0x2cc>)
 800b850:	429a      	cmp	r2, r3
 800b852:	d005      	beq.n	800b860 <UART_SetConfig+0xa0>
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b8d      	ldr	r3, [pc, #564]	@ (800ba90 <UART_SetConfig+0x2d0>)
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d104      	bne.n	800b86a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b860:	f7fe fdc2 	bl	800a3e8 <HAL_RCC_GetPCLK2Freq>
 800b864:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b868:	e003      	b.n	800b872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b86a:	f7fe fda9 	bl	800a3c0 <HAL_RCC_GetPCLK1Freq>
 800b86e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b87c:	f040 810c 	bne.w	800ba98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b884:	2200      	movs	r2, #0
 800b886:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b88a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b88e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b892:	4622      	mov	r2, r4
 800b894:	462b      	mov	r3, r5
 800b896:	1891      	adds	r1, r2, r2
 800b898:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b89a:	415b      	adcs	r3, r3
 800b89c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b89e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	eb12 0801 	adds.w	r8, r2, r1
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	eb43 0901 	adc.w	r9, r3, r1
 800b8ae:	f04f 0200 	mov.w	r2, #0
 800b8b2:	f04f 0300 	mov.w	r3, #0
 800b8b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8c2:	4690      	mov	r8, r2
 800b8c4:	4699      	mov	r9, r3
 800b8c6:	4623      	mov	r3, r4
 800b8c8:	eb18 0303 	adds.w	r3, r8, r3
 800b8cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8d0:	462b      	mov	r3, r5
 800b8d2:	eb49 0303 	adc.w	r3, r9, r3
 800b8d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b8ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	18db      	adds	r3, r3, r3
 800b8f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	eb42 0303 	adc.w	r3, r2, r3
 800b8fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b904:	f7f4 fcbc 	bl	8000280 <__aeabi_uldivmod>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4b61      	ldr	r3, [pc, #388]	@ (800ba94 <UART_SetConfig+0x2d4>)
 800b90e:	fba3 2302 	umull	r2, r3, r3, r2
 800b912:	095b      	lsrs	r3, r3, #5
 800b914:	011c      	lsls	r4, r3, #4
 800b916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b920:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b928:	4642      	mov	r2, r8
 800b92a:	464b      	mov	r3, r9
 800b92c:	1891      	adds	r1, r2, r2
 800b92e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b930:	415b      	adcs	r3, r3
 800b932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b938:	4641      	mov	r1, r8
 800b93a:	eb12 0a01 	adds.w	sl, r2, r1
 800b93e:	4649      	mov	r1, r9
 800b940:	eb43 0b01 	adc.w	fp, r3, r1
 800b944:	f04f 0200 	mov.w	r2, #0
 800b948:	f04f 0300 	mov.w	r3, #0
 800b94c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b958:	4692      	mov	sl, r2
 800b95a:	469b      	mov	fp, r3
 800b95c:	4643      	mov	r3, r8
 800b95e:	eb1a 0303 	adds.w	r3, sl, r3
 800b962:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b966:	464b      	mov	r3, r9
 800b968:	eb4b 0303 	adc.w	r3, fp, r3
 800b96c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b97c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b984:	460b      	mov	r3, r1
 800b986:	18db      	adds	r3, r3, r3
 800b988:	643b      	str	r3, [r7, #64]	@ 0x40
 800b98a:	4613      	mov	r3, r2
 800b98c:	eb42 0303 	adc.w	r3, r2, r3
 800b990:	647b      	str	r3, [r7, #68]	@ 0x44
 800b992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b99a:	f7f4 fc71 	bl	8000280 <__aeabi_uldivmod>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	4b3b      	ldr	r3, [pc, #236]	@ (800ba94 <UART_SetConfig+0x2d4>)
 800b9a6:	fba3 2301 	umull	r2, r3, r3, r1
 800b9aa:	095b      	lsrs	r3, r3, #5
 800b9ac:	2264      	movs	r2, #100	@ 0x64
 800b9ae:	fb02 f303 	mul.w	r3, r2, r3
 800b9b2:	1acb      	subs	r3, r1, r3
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b9ba:	4b36      	ldr	r3, [pc, #216]	@ (800ba94 <UART_SetConfig+0x2d4>)
 800b9bc:	fba3 2302 	umull	r2, r3, r3, r2
 800b9c0:	095b      	lsrs	r3, r3, #5
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b9c8:	441c      	add	r4, r3
 800b9ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b9d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b9d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b9dc:	4642      	mov	r2, r8
 800b9de:	464b      	mov	r3, r9
 800b9e0:	1891      	adds	r1, r2, r2
 800b9e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b9e4:	415b      	adcs	r3, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b9ec:	4641      	mov	r1, r8
 800b9ee:	1851      	adds	r1, r2, r1
 800b9f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800b9f2:	4649      	mov	r1, r9
 800b9f4:	414b      	adcs	r3, r1
 800b9f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f8:	f04f 0200 	mov.w	r2, #0
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ba04:	4659      	mov	r1, fp
 800ba06:	00cb      	lsls	r3, r1, #3
 800ba08:	4651      	mov	r1, sl
 800ba0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba0e:	4651      	mov	r1, sl
 800ba10:	00ca      	lsls	r2, r1, #3
 800ba12:	4610      	mov	r0, r2
 800ba14:	4619      	mov	r1, r3
 800ba16:	4603      	mov	r3, r0
 800ba18:	4642      	mov	r2, r8
 800ba1a:	189b      	adds	r3, r3, r2
 800ba1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba20:	464b      	mov	r3, r9
 800ba22:	460a      	mov	r2, r1
 800ba24:	eb42 0303 	adc.w	r3, r2, r3
 800ba28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba40:	460b      	mov	r3, r1
 800ba42:	18db      	adds	r3, r3, r3
 800ba44:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba46:	4613      	mov	r3, r2
 800ba48:	eb42 0303 	adc.w	r3, r2, r3
 800ba4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ba56:	f7f4 fc13 	bl	8000280 <__aeabi_uldivmod>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba94 <UART_SetConfig+0x2d4>)
 800ba60:	fba3 1302 	umull	r1, r3, r3, r2
 800ba64:	095b      	lsrs	r3, r3, #5
 800ba66:	2164      	movs	r1, #100	@ 0x64
 800ba68:	fb01 f303 	mul.w	r3, r1, r3
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	00db      	lsls	r3, r3, #3
 800ba70:	3332      	adds	r3, #50	@ 0x32
 800ba72:	4a08      	ldr	r2, [pc, #32]	@ (800ba94 <UART_SetConfig+0x2d4>)
 800ba74:	fba2 2303 	umull	r2, r3, r2, r3
 800ba78:	095b      	lsrs	r3, r3, #5
 800ba7a:	f003 0207 	and.w	r2, r3, #7
 800ba7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4422      	add	r2, r4
 800ba86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba88:	e106      	b.n	800bc98 <UART_SetConfig+0x4d8>
 800ba8a:	bf00      	nop
 800ba8c:	40011000 	.word	0x40011000
 800ba90:	40011400 	.word	0x40011400
 800ba94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800baa2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800baa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800baaa:	4642      	mov	r2, r8
 800baac:	464b      	mov	r3, r9
 800baae:	1891      	adds	r1, r2, r2
 800bab0:	6239      	str	r1, [r7, #32]
 800bab2:	415b      	adcs	r3, r3
 800bab4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800baba:	4641      	mov	r1, r8
 800babc:	1854      	adds	r4, r2, r1
 800babe:	4649      	mov	r1, r9
 800bac0:	eb43 0501 	adc.w	r5, r3, r1
 800bac4:	f04f 0200 	mov.w	r2, #0
 800bac8:	f04f 0300 	mov.w	r3, #0
 800bacc:	00eb      	lsls	r3, r5, #3
 800bace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bad2:	00e2      	lsls	r2, r4, #3
 800bad4:	4614      	mov	r4, r2
 800bad6:	461d      	mov	r5, r3
 800bad8:	4643      	mov	r3, r8
 800bada:	18e3      	adds	r3, r4, r3
 800badc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bae0:	464b      	mov	r3, r9
 800bae2:	eb45 0303 	adc.w	r3, r5, r3
 800bae6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800baea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800baf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bafa:	f04f 0200 	mov.w	r2, #0
 800bafe:	f04f 0300 	mov.w	r3, #0
 800bb02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bb06:	4629      	mov	r1, r5
 800bb08:	008b      	lsls	r3, r1, #2
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb10:	4621      	mov	r1, r4
 800bb12:	008a      	lsls	r2, r1, #2
 800bb14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bb18:	f7f4 fbb2 	bl	8000280 <__aeabi_uldivmod>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4b60      	ldr	r3, [pc, #384]	@ (800bca4 <UART_SetConfig+0x4e4>)
 800bb22:	fba3 2302 	umull	r2, r3, r3, r2
 800bb26:	095b      	lsrs	r3, r3, #5
 800bb28:	011c      	lsls	r4, r3, #4
 800bb2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bb38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	464b      	mov	r3, r9
 800bb40:	1891      	adds	r1, r2, r2
 800bb42:	61b9      	str	r1, [r7, #24]
 800bb44:	415b      	adcs	r3, r3
 800bb46:	61fb      	str	r3, [r7, #28]
 800bb48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	1851      	adds	r1, r2, r1
 800bb50:	6139      	str	r1, [r7, #16]
 800bb52:	4649      	mov	r1, r9
 800bb54:	414b      	adcs	r3, r1
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	f04f 0200 	mov.w	r2, #0
 800bb5c:	f04f 0300 	mov.w	r3, #0
 800bb60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb64:	4659      	mov	r1, fp
 800bb66:	00cb      	lsls	r3, r1, #3
 800bb68:	4651      	mov	r1, sl
 800bb6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb6e:	4651      	mov	r1, sl
 800bb70:	00ca      	lsls	r2, r1, #3
 800bb72:	4610      	mov	r0, r2
 800bb74:	4619      	mov	r1, r3
 800bb76:	4603      	mov	r3, r0
 800bb78:	4642      	mov	r2, r8
 800bb7a:	189b      	adds	r3, r3, r2
 800bb7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb80:	464b      	mov	r3, r9
 800bb82:	460a      	mov	r2, r1
 800bb84:	eb42 0303 	adc.w	r3, r2, r3
 800bb88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bb98:	f04f 0200 	mov.w	r2, #0
 800bb9c:	f04f 0300 	mov.w	r3, #0
 800bba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bba4:	4649      	mov	r1, r9
 800bba6:	008b      	lsls	r3, r1, #2
 800bba8:	4641      	mov	r1, r8
 800bbaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbae:	4641      	mov	r1, r8
 800bbb0:	008a      	lsls	r2, r1, #2
 800bbb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bbb6:	f7f4 fb63 	bl	8000280 <__aeabi_uldivmod>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	4b38      	ldr	r3, [pc, #224]	@ (800bca4 <UART_SetConfig+0x4e4>)
 800bbc2:	fba3 2301 	umull	r2, r3, r3, r1
 800bbc6:	095b      	lsrs	r3, r3, #5
 800bbc8:	2264      	movs	r2, #100	@ 0x64
 800bbca:	fb02 f303 	mul.w	r3, r2, r3
 800bbce:	1acb      	subs	r3, r1, r3
 800bbd0:	011b      	lsls	r3, r3, #4
 800bbd2:	3332      	adds	r3, #50	@ 0x32
 800bbd4:	4a33      	ldr	r2, [pc, #204]	@ (800bca4 <UART_SetConfig+0x4e4>)
 800bbd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbda:	095b      	lsrs	r3, r3, #5
 800bbdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bbe0:	441c      	add	r4, r3
 800bbe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bbea:	677a      	str	r2, [r7, #116]	@ 0x74
 800bbec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	1891      	adds	r1, r2, r2
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	415b      	adcs	r3, r3
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc00:	4641      	mov	r1, r8
 800bc02:	1851      	adds	r1, r2, r1
 800bc04:	6039      	str	r1, [r7, #0]
 800bc06:	4649      	mov	r1, r9
 800bc08:	414b      	adcs	r3, r1
 800bc0a:	607b      	str	r3, [r7, #4]
 800bc0c:	f04f 0200 	mov.w	r2, #0
 800bc10:	f04f 0300 	mov.w	r3, #0
 800bc14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc18:	4659      	mov	r1, fp
 800bc1a:	00cb      	lsls	r3, r1, #3
 800bc1c:	4651      	mov	r1, sl
 800bc1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc22:	4651      	mov	r1, sl
 800bc24:	00ca      	lsls	r2, r1, #3
 800bc26:	4610      	mov	r0, r2
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4642      	mov	r2, r8
 800bc2e:	189b      	adds	r3, r3, r2
 800bc30:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc32:	464b      	mov	r3, r9
 800bc34:	460a      	mov	r2, r1
 800bc36:	eb42 0303 	adc.w	r3, r2, r3
 800bc3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc46:	667a      	str	r2, [r7, #100]	@ 0x64
 800bc48:	f04f 0200 	mov.w	r2, #0
 800bc4c:	f04f 0300 	mov.w	r3, #0
 800bc50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bc54:	4649      	mov	r1, r9
 800bc56:	008b      	lsls	r3, r1, #2
 800bc58:	4641      	mov	r1, r8
 800bc5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc5e:	4641      	mov	r1, r8
 800bc60:	008a      	lsls	r2, r1, #2
 800bc62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bc66:	f7f4 fb0b 	bl	8000280 <__aeabi_uldivmod>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bca4 <UART_SetConfig+0x4e4>)
 800bc70:	fba3 1302 	umull	r1, r3, r3, r2
 800bc74:	095b      	lsrs	r3, r3, #5
 800bc76:	2164      	movs	r1, #100	@ 0x64
 800bc78:	fb01 f303 	mul.w	r3, r1, r3
 800bc7c:	1ad3      	subs	r3, r2, r3
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	3332      	adds	r3, #50	@ 0x32
 800bc82:	4a08      	ldr	r2, [pc, #32]	@ (800bca4 <UART_SetConfig+0x4e4>)
 800bc84:	fba2 2303 	umull	r2, r3, r2, r3
 800bc88:	095b      	lsrs	r3, r3, #5
 800bc8a:	f003 020f 	and.w	r2, r3, #15
 800bc8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4422      	add	r2, r4
 800bc96:	609a      	str	r2, [r3, #8]
}
 800bc98:	bf00      	nop
 800bc9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bca4:	51eb851f 	.word	0x51eb851f

0800bca8 <calloc>:
 800bca8:	4b02      	ldr	r3, [pc, #8]	@ (800bcb4 <calloc+0xc>)
 800bcaa:	460a      	mov	r2, r1
 800bcac:	4601      	mov	r1, r0
 800bcae:	6818      	ldr	r0, [r3, #0]
 800bcb0:	f000 b802 	b.w	800bcb8 <_calloc_r>
 800bcb4:	20000588 	.word	0x20000588

0800bcb8 <_calloc_r>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	fba1 5402 	umull	r5, r4, r1, r2
 800bcbe:	b93c      	cbnz	r4, 800bcd0 <_calloc_r+0x18>
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	f000 f837 	bl	800bd34 <_malloc_r>
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	b928      	cbnz	r0, 800bcd6 <_calloc_r+0x1e>
 800bcca:	2600      	movs	r6, #0
 800bccc:	4630      	mov	r0, r6
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	220c      	movs	r2, #12
 800bcd2:	6002      	str	r2, [r0, #0]
 800bcd4:	e7f9      	b.n	800bcca <_calloc_r+0x12>
 800bcd6:	462a      	mov	r2, r5
 800bcd8:	4621      	mov	r1, r4
 800bcda:	f000 f9f9 	bl	800c0d0 <memset>
 800bcde:	e7f5      	b.n	800bccc <_calloc_r+0x14>

0800bce0 <free>:
 800bce0:	4b02      	ldr	r3, [pc, #8]	@ (800bcec <free+0xc>)
 800bce2:	4601      	mov	r1, r0
 800bce4:	6818      	ldr	r0, [r3, #0]
 800bce6:	f000 ba47 	b.w	800c178 <_free_r>
 800bcea:	bf00      	nop
 800bcec:	20000588 	.word	0x20000588

0800bcf0 <sbrk_aligned>:
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	4e0f      	ldr	r6, [pc, #60]	@ (800bd30 <sbrk_aligned+0x40>)
 800bcf4:	460c      	mov	r4, r1
 800bcf6:	6831      	ldr	r1, [r6, #0]
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	b911      	cbnz	r1, 800bd02 <sbrk_aligned+0x12>
 800bcfc:	f000 f9f0 	bl	800c0e0 <_sbrk_r>
 800bd00:	6030      	str	r0, [r6, #0]
 800bd02:	4621      	mov	r1, r4
 800bd04:	4628      	mov	r0, r5
 800bd06:	f000 f9eb 	bl	800c0e0 <_sbrk_r>
 800bd0a:	1c43      	adds	r3, r0, #1
 800bd0c:	d103      	bne.n	800bd16 <sbrk_aligned+0x26>
 800bd0e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bd12:	4620      	mov	r0, r4
 800bd14:	bd70      	pop	{r4, r5, r6, pc}
 800bd16:	1cc4      	adds	r4, r0, #3
 800bd18:	f024 0403 	bic.w	r4, r4, #3
 800bd1c:	42a0      	cmp	r0, r4
 800bd1e:	d0f8      	beq.n	800bd12 <sbrk_aligned+0x22>
 800bd20:	1a21      	subs	r1, r4, r0
 800bd22:	4628      	mov	r0, r5
 800bd24:	f000 f9dc 	bl	800c0e0 <_sbrk_r>
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d1f2      	bne.n	800bd12 <sbrk_aligned+0x22>
 800bd2c:	e7ef      	b.n	800bd0e <sbrk_aligned+0x1e>
 800bd2e:	bf00      	nop
 800bd30:	20000dec 	.word	0x20000dec

0800bd34 <_malloc_r>:
 800bd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd38:	1ccd      	adds	r5, r1, #3
 800bd3a:	f025 0503 	bic.w	r5, r5, #3
 800bd3e:	3508      	adds	r5, #8
 800bd40:	2d0c      	cmp	r5, #12
 800bd42:	bf38      	it	cc
 800bd44:	250c      	movcc	r5, #12
 800bd46:	2d00      	cmp	r5, #0
 800bd48:	4606      	mov	r6, r0
 800bd4a:	db01      	blt.n	800bd50 <_malloc_r+0x1c>
 800bd4c:	42a9      	cmp	r1, r5
 800bd4e:	d904      	bls.n	800bd5a <_malloc_r+0x26>
 800bd50:	230c      	movs	r3, #12
 800bd52:	6033      	str	r3, [r6, #0]
 800bd54:	2000      	movs	r0, #0
 800bd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be30 <_malloc_r+0xfc>
 800bd5e:	f000 f869 	bl	800be34 <__malloc_lock>
 800bd62:	f8d8 3000 	ldr.w	r3, [r8]
 800bd66:	461c      	mov	r4, r3
 800bd68:	bb44      	cbnz	r4, 800bdbc <_malloc_r+0x88>
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f7ff ffbf 	bl	800bcf0 <sbrk_aligned>
 800bd72:	1c43      	adds	r3, r0, #1
 800bd74:	4604      	mov	r4, r0
 800bd76:	d158      	bne.n	800be2a <_malloc_r+0xf6>
 800bd78:	f8d8 4000 	ldr.w	r4, [r8]
 800bd7c:	4627      	mov	r7, r4
 800bd7e:	2f00      	cmp	r7, #0
 800bd80:	d143      	bne.n	800be0a <_malloc_r+0xd6>
 800bd82:	2c00      	cmp	r4, #0
 800bd84:	d04b      	beq.n	800be1e <_malloc_r+0xea>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	4639      	mov	r1, r7
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	eb04 0903 	add.w	r9, r4, r3
 800bd90:	f000 f9a6 	bl	800c0e0 <_sbrk_r>
 800bd94:	4581      	cmp	r9, r0
 800bd96:	d142      	bne.n	800be1e <_malloc_r+0xea>
 800bd98:	6821      	ldr	r1, [r4, #0]
 800bd9a:	1a6d      	subs	r5, r5, r1
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7ff ffa6 	bl	800bcf0 <sbrk_aligned>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d03a      	beq.n	800be1e <_malloc_r+0xea>
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	442b      	add	r3, r5
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	f8d8 3000 	ldr.w	r3, [r8]
 800bdb2:	685a      	ldr	r2, [r3, #4]
 800bdb4:	bb62      	cbnz	r2, 800be10 <_malloc_r+0xdc>
 800bdb6:	f8c8 7000 	str.w	r7, [r8]
 800bdba:	e00f      	b.n	800bddc <_malloc_r+0xa8>
 800bdbc:	6822      	ldr	r2, [r4, #0]
 800bdbe:	1b52      	subs	r2, r2, r5
 800bdc0:	d420      	bmi.n	800be04 <_malloc_r+0xd0>
 800bdc2:	2a0b      	cmp	r2, #11
 800bdc4:	d917      	bls.n	800bdf6 <_malloc_r+0xc2>
 800bdc6:	1961      	adds	r1, r4, r5
 800bdc8:	42a3      	cmp	r3, r4
 800bdca:	6025      	str	r5, [r4, #0]
 800bdcc:	bf18      	it	ne
 800bdce:	6059      	strne	r1, [r3, #4]
 800bdd0:	6863      	ldr	r3, [r4, #4]
 800bdd2:	bf08      	it	eq
 800bdd4:	f8c8 1000 	streq.w	r1, [r8]
 800bdd8:	5162      	str	r2, [r4, r5]
 800bdda:	604b      	str	r3, [r1, #4]
 800bddc:	4630      	mov	r0, r6
 800bdde:	f000 f82f 	bl	800be40 <__malloc_unlock>
 800bde2:	f104 000b 	add.w	r0, r4, #11
 800bde6:	1d23      	adds	r3, r4, #4
 800bde8:	f020 0007 	bic.w	r0, r0, #7
 800bdec:	1ac2      	subs	r2, r0, r3
 800bdee:	bf1c      	itt	ne
 800bdf0:	1a1b      	subne	r3, r3, r0
 800bdf2:	50a3      	strne	r3, [r4, r2]
 800bdf4:	e7af      	b.n	800bd56 <_malloc_r+0x22>
 800bdf6:	6862      	ldr	r2, [r4, #4]
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	bf0c      	ite	eq
 800bdfc:	f8c8 2000 	streq.w	r2, [r8]
 800be00:	605a      	strne	r2, [r3, #4]
 800be02:	e7eb      	b.n	800bddc <_malloc_r+0xa8>
 800be04:	4623      	mov	r3, r4
 800be06:	6864      	ldr	r4, [r4, #4]
 800be08:	e7ae      	b.n	800bd68 <_malloc_r+0x34>
 800be0a:	463c      	mov	r4, r7
 800be0c:	687f      	ldr	r7, [r7, #4]
 800be0e:	e7b6      	b.n	800bd7e <_malloc_r+0x4a>
 800be10:	461a      	mov	r2, r3
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	42a3      	cmp	r3, r4
 800be16:	d1fb      	bne.n	800be10 <_malloc_r+0xdc>
 800be18:	2300      	movs	r3, #0
 800be1a:	6053      	str	r3, [r2, #4]
 800be1c:	e7de      	b.n	800bddc <_malloc_r+0xa8>
 800be1e:	230c      	movs	r3, #12
 800be20:	6033      	str	r3, [r6, #0]
 800be22:	4630      	mov	r0, r6
 800be24:	f000 f80c 	bl	800be40 <__malloc_unlock>
 800be28:	e794      	b.n	800bd54 <_malloc_r+0x20>
 800be2a:	6005      	str	r5, [r0, #0]
 800be2c:	e7d6      	b.n	800bddc <_malloc_r+0xa8>
 800be2e:	bf00      	nop
 800be30:	20000df0 	.word	0x20000df0

0800be34 <__malloc_lock>:
 800be34:	4801      	ldr	r0, [pc, #4]	@ (800be3c <__malloc_lock+0x8>)
 800be36:	f000 b98e 	b.w	800c156 <__retarget_lock_acquire_recursive>
 800be3a:	bf00      	nop
 800be3c:	20000f30 	.word	0x20000f30

0800be40 <__malloc_unlock>:
 800be40:	4801      	ldr	r0, [pc, #4]	@ (800be48 <__malloc_unlock+0x8>)
 800be42:	f000 b989 	b.w	800c158 <__retarget_lock_release_recursive>
 800be46:	bf00      	nop
 800be48:	20000f30 	.word	0x20000f30

0800be4c <std>:
 800be4c:	2300      	movs	r3, #0
 800be4e:	b510      	push	{r4, lr}
 800be50:	4604      	mov	r4, r0
 800be52:	e9c0 3300 	strd	r3, r3, [r0]
 800be56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be5a:	6083      	str	r3, [r0, #8]
 800be5c:	8181      	strh	r1, [r0, #12]
 800be5e:	6643      	str	r3, [r0, #100]	@ 0x64
 800be60:	81c2      	strh	r2, [r0, #14]
 800be62:	6183      	str	r3, [r0, #24]
 800be64:	4619      	mov	r1, r3
 800be66:	2208      	movs	r2, #8
 800be68:	305c      	adds	r0, #92	@ 0x5c
 800be6a:	f000 f931 	bl	800c0d0 <memset>
 800be6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bea4 <std+0x58>)
 800be70:	6263      	str	r3, [r4, #36]	@ 0x24
 800be72:	4b0d      	ldr	r3, [pc, #52]	@ (800bea8 <std+0x5c>)
 800be74:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be76:	4b0d      	ldr	r3, [pc, #52]	@ (800beac <std+0x60>)
 800be78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be7a:	4b0d      	ldr	r3, [pc, #52]	@ (800beb0 <std+0x64>)
 800be7c:	6323      	str	r3, [r4, #48]	@ 0x30
 800be7e:	4b0d      	ldr	r3, [pc, #52]	@ (800beb4 <std+0x68>)
 800be80:	6224      	str	r4, [r4, #32]
 800be82:	429c      	cmp	r4, r3
 800be84:	d006      	beq.n	800be94 <std+0x48>
 800be86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be8a:	4294      	cmp	r4, r2
 800be8c:	d002      	beq.n	800be94 <std+0x48>
 800be8e:	33d0      	adds	r3, #208	@ 0xd0
 800be90:	429c      	cmp	r4, r3
 800be92:	d105      	bne.n	800bea0 <std+0x54>
 800be94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be9c:	f000 b95a 	b.w	800c154 <__retarget_lock_init_recursive>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	bf00      	nop
 800bea4:	0800c905 	.word	0x0800c905
 800bea8:	0800c927 	.word	0x0800c927
 800beac:	0800c95f 	.word	0x0800c95f
 800beb0:	0800c983 	.word	0x0800c983
 800beb4:	20000df4 	.word	0x20000df4

0800beb8 <stdio_exit_handler>:
 800beb8:	4a02      	ldr	r2, [pc, #8]	@ (800bec4 <stdio_exit_handler+0xc>)
 800beba:	4903      	ldr	r1, [pc, #12]	@ (800bec8 <stdio_exit_handler+0x10>)
 800bebc:	4803      	ldr	r0, [pc, #12]	@ (800becc <stdio_exit_handler+0x14>)
 800bebe:	f000 b869 	b.w	800bf94 <_fwalk_sglue>
 800bec2:	bf00      	nop
 800bec4:	2000057c 	.word	0x2000057c
 800bec8:	0800c8b5 	.word	0x0800c8b5
 800becc:	2000058c 	.word	0x2000058c

0800bed0 <cleanup_stdio>:
 800bed0:	6841      	ldr	r1, [r0, #4]
 800bed2:	4b0c      	ldr	r3, [pc, #48]	@ (800bf04 <cleanup_stdio+0x34>)
 800bed4:	4299      	cmp	r1, r3
 800bed6:	b510      	push	{r4, lr}
 800bed8:	4604      	mov	r4, r0
 800beda:	d001      	beq.n	800bee0 <cleanup_stdio+0x10>
 800bedc:	f000 fcea 	bl	800c8b4 <_fflush_r>
 800bee0:	68a1      	ldr	r1, [r4, #8]
 800bee2:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <cleanup_stdio+0x38>)
 800bee4:	4299      	cmp	r1, r3
 800bee6:	d002      	beq.n	800beee <cleanup_stdio+0x1e>
 800bee8:	4620      	mov	r0, r4
 800beea:	f000 fce3 	bl	800c8b4 <_fflush_r>
 800beee:	68e1      	ldr	r1, [r4, #12]
 800bef0:	4b06      	ldr	r3, [pc, #24]	@ (800bf0c <cleanup_stdio+0x3c>)
 800bef2:	4299      	cmp	r1, r3
 800bef4:	d004      	beq.n	800bf00 <cleanup_stdio+0x30>
 800bef6:	4620      	mov	r0, r4
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f000 bcda 	b.w	800c8b4 <_fflush_r>
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	20000df4 	.word	0x20000df4
 800bf08:	20000e5c 	.word	0x20000e5c
 800bf0c:	20000ec4 	.word	0x20000ec4

0800bf10 <global_stdio_init.part.0>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4b0b      	ldr	r3, [pc, #44]	@ (800bf40 <global_stdio_init.part.0+0x30>)
 800bf14:	4c0b      	ldr	r4, [pc, #44]	@ (800bf44 <global_stdio_init.part.0+0x34>)
 800bf16:	4a0c      	ldr	r2, [pc, #48]	@ (800bf48 <global_stdio_init.part.0+0x38>)
 800bf18:	601a      	str	r2, [r3, #0]
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2104      	movs	r1, #4
 800bf20:	f7ff ff94 	bl	800be4c <std>
 800bf24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf28:	2201      	movs	r2, #1
 800bf2a:	2109      	movs	r1, #9
 800bf2c:	f7ff ff8e 	bl	800be4c <std>
 800bf30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf34:	2202      	movs	r2, #2
 800bf36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3a:	2112      	movs	r1, #18
 800bf3c:	f7ff bf86 	b.w	800be4c <std>
 800bf40:	20000f2c 	.word	0x20000f2c
 800bf44:	20000df4 	.word	0x20000df4
 800bf48:	0800beb9 	.word	0x0800beb9

0800bf4c <__sfp_lock_acquire>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	@ (800bf54 <__sfp_lock_acquire+0x8>)
 800bf4e:	f000 b902 	b.w	800c156 <__retarget_lock_acquire_recursive>
 800bf52:	bf00      	nop
 800bf54:	20000f31 	.word	0x20000f31

0800bf58 <__sfp_lock_release>:
 800bf58:	4801      	ldr	r0, [pc, #4]	@ (800bf60 <__sfp_lock_release+0x8>)
 800bf5a:	f000 b8fd 	b.w	800c158 <__retarget_lock_release_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20000f31 	.word	0x20000f31

0800bf64 <__sinit>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	4604      	mov	r4, r0
 800bf68:	f7ff fff0 	bl	800bf4c <__sfp_lock_acquire>
 800bf6c:	6a23      	ldr	r3, [r4, #32]
 800bf6e:	b11b      	cbz	r3, 800bf78 <__sinit+0x14>
 800bf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf74:	f7ff bff0 	b.w	800bf58 <__sfp_lock_release>
 800bf78:	4b04      	ldr	r3, [pc, #16]	@ (800bf8c <__sinit+0x28>)
 800bf7a:	6223      	str	r3, [r4, #32]
 800bf7c:	4b04      	ldr	r3, [pc, #16]	@ (800bf90 <__sinit+0x2c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f5      	bne.n	800bf70 <__sinit+0xc>
 800bf84:	f7ff ffc4 	bl	800bf10 <global_stdio_init.part.0>
 800bf88:	e7f2      	b.n	800bf70 <__sinit+0xc>
 800bf8a:	bf00      	nop
 800bf8c:	0800bed1 	.word	0x0800bed1
 800bf90:	20000f2c 	.word	0x20000f2c

0800bf94 <_fwalk_sglue>:
 800bf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf98:	4607      	mov	r7, r0
 800bf9a:	4688      	mov	r8, r1
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	2600      	movs	r6, #0
 800bfa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfa4:	f1b9 0901 	subs.w	r9, r9, #1
 800bfa8:	d505      	bpl.n	800bfb6 <_fwalk_sglue+0x22>
 800bfaa:	6824      	ldr	r4, [r4, #0]
 800bfac:	2c00      	cmp	r4, #0
 800bfae:	d1f7      	bne.n	800bfa0 <_fwalk_sglue+0xc>
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d907      	bls.n	800bfcc <_fwalk_sglue+0x38>
 800bfbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	d003      	beq.n	800bfcc <_fwalk_sglue+0x38>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	47c0      	blx	r8
 800bfca:	4306      	orrs	r6, r0
 800bfcc:	3568      	adds	r5, #104	@ 0x68
 800bfce:	e7e9      	b.n	800bfa4 <_fwalk_sglue+0x10>

0800bfd0 <iprintf>:
 800bfd0:	b40f      	push	{r0, r1, r2, r3}
 800bfd2:	b507      	push	{r0, r1, r2, lr}
 800bfd4:	4906      	ldr	r1, [pc, #24]	@ (800bff0 <iprintf+0x20>)
 800bfd6:	ab04      	add	r3, sp, #16
 800bfd8:	6808      	ldr	r0, [r1, #0]
 800bfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfde:	6881      	ldr	r1, [r0, #8]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f000 f93d 	bl	800c260 <_vfiprintf_r>
 800bfe6:	b003      	add	sp, #12
 800bfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfec:	b004      	add	sp, #16
 800bfee:	4770      	bx	lr
 800bff0:	20000588 	.word	0x20000588

0800bff4 <_puts_r>:
 800bff4:	6a03      	ldr	r3, [r0, #32]
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	6884      	ldr	r4, [r0, #8]
 800bffa:	4605      	mov	r5, r0
 800bffc:	460e      	mov	r6, r1
 800bffe:	b90b      	cbnz	r3, 800c004 <_puts_r+0x10>
 800c000:	f7ff ffb0 	bl	800bf64 <__sinit>
 800c004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c006:	07db      	lsls	r3, r3, #31
 800c008:	d405      	bmi.n	800c016 <_puts_r+0x22>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	0598      	lsls	r0, r3, #22
 800c00e:	d402      	bmi.n	800c016 <_puts_r+0x22>
 800c010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c012:	f000 f8a0 	bl	800c156 <__retarget_lock_acquire_recursive>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	0719      	lsls	r1, r3, #28
 800c01a:	d502      	bpl.n	800c022 <_puts_r+0x2e>
 800c01c:	6923      	ldr	r3, [r4, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d135      	bne.n	800c08e <_puts_r+0x9a>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 fcef 	bl	800ca08 <__swsetup_r>
 800c02a:	b380      	cbz	r0, 800c08e <_puts_r+0x9a>
 800c02c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c032:	07da      	lsls	r2, r3, #31
 800c034:	d405      	bmi.n	800c042 <_puts_r+0x4e>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	059b      	lsls	r3, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_puts_r+0x4e>
 800c03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c03e:	f000 f88b 	bl	800c158 <__retarget_lock_release_recursive>
 800c042:	4628      	mov	r0, r5
 800c044:	bd70      	pop	{r4, r5, r6, pc}
 800c046:	2b00      	cmp	r3, #0
 800c048:	da04      	bge.n	800c054 <_puts_r+0x60>
 800c04a:	69a2      	ldr	r2, [r4, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	dc17      	bgt.n	800c080 <_puts_r+0x8c>
 800c050:	290a      	cmp	r1, #10
 800c052:	d015      	beq.n	800c080 <_puts_r+0x8c>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	6022      	str	r2, [r4, #0]
 800c05a:	7019      	strb	r1, [r3, #0]
 800c05c:	68a3      	ldr	r3, [r4, #8]
 800c05e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c062:	3b01      	subs	r3, #1
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	2900      	cmp	r1, #0
 800c068:	d1ed      	bne.n	800c046 <_puts_r+0x52>
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da11      	bge.n	800c092 <_puts_r+0x9e>
 800c06e:	4622      	mov	r2, r4
 800c070:	210a      	movs	r1, #10
 800c072:	4628      	mov	r0, r5
 800c074:	f000 fc89 	bl	800c98a <__swbuf_r>
 800c078:	3001      	adds	r0, #1
 800c07a:	d0d7      	beq.n	800c02c <_puts_r+0x38>
 800c07c:	250a      	movs	r5, #10
 800c07e:	e7d7      	b.n	800c030 <_puts_r+0x3c>
 800c080:	4622      	mov	r2, r4
 800c082:	4628      	mov	r0, r5
 800c084:	f000 fc81 	bl	800c98a <__swbuf_r>
 800c088:	3001      	adds	r0, #1
 800c08a:	d1e7      	bne.n	800c05c <_puts_r+0x68>
 800c08c:	e7ce      	b.n	800c02c <_puts_r+0x38>
 800c08e:	3e01      	subs	r6, #1
 800c090:	e7e4      	b.n	800c05c <_puts_r+0x68>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	6022      	str	r2, [r4, #0]
 800c098:	220a      	movs	r2, #10
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	e7ee      	b.n	800c07c <_puts_r+0x88>
	...

0800c0a0 <puts>:
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <puts+0xc>)
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	f7ff bfa5 	b.w	800bff4 <_puts_r>
 800c0aa:	bf00      	nop
 800c0ac:	20000588 	.word	0x20000588

0800c0b0 <memcmp>:
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	3901      	subs	r1, #1
 800c0b4:	4402      	add	r2, r0
 800c0b6:	4290      	cmp	r0, r2
 800c0b8:	d101      	bne.n	800c0be <memcmp+0xe>
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	e005      	b.n	800c0ca <memcmp+0x1a>
 800c0be:	7803      	ldrb	r3, [r0, #0]
 800c0c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0c4:	42a3      	cmp	r3, r4
 800c0c6:	d001      	beq.n	800c0cc <memcmp+0x1c>
 800c0c8:	1b18      	subs	r0, r3, r4
 800c0ca:	bd10      	pop	{r4, pc}
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	e7f2      	b.n	800c0b6 <memcmp+0x6>

0800c0d0 <memset>:
 800c0d0:	4402      	add	r2, r0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d100      	bne.n	800c0da <memset+0xa>
 800c0d8:	4770      	bx	lr
 800c0da:	f803 1b01 	strb.w	r1, [r3], #1
 800c0de:	e7f9      	b.n	800c0d4 <memset+0x4>

0800c0e0 <_sbrk_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d06      	ldr	r5, [pc, #24]	@ (800c0fc <_sbrk_r+0x1c>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	602b      	str	r3, [r5, #0]
 800c0ec:	f7fa fa6e 	bl	80065cc <_sbrk>
 800c0f0:	1c43      	adds	r3, r0, #1
 800c0f2:	d102      	bne.n	800c0fa <_sbrk_r+0x1a>
 800c0f4:	682b      	ldr	r3, [r5, #0]
 800c0f6:	b103      	cbz	r3, 800c0fa <_sbrk_r+0x1a>
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	bd38      	pop	{r3, r4, r5, pc}
 800c0fc:	20000f34 	.word	0x20000f34

0800c100 <__errno>:
 800c100:	4b01      	ldr	r3, [pc, #4]	@ (800c108 <__errno+0x8>)
 800c102:	6818      	ldr	r0, [r3, #0]
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	20000588 	.word	0x20000588

0800c10c <__libc_init_array>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	4d0d      	ldr	r5, [pc, #52]	@ (800c144 <__libc_init_array+0x38>)
 800c110:	4c0d      	ldr	r4, [pc, #52]	@ (800c148 <__libc_init_array+0x3c>)
 800c112:	1b64      	subs	r4, r4, r5
 800c114:	10a4      	asrs	r4, r4, #2
 800c116:	2600      	movs	r6, #0
 800c118:	42a6      	cmp	r6, r4
 800c11a:	d109      	bne.n	800c130 <__libc_init_array+0x24>
 800c11c:	4d0b      	ldr	r5, [pc, #44]	@ (800c14c <__libc_init_array+0x40>)
 800c11e:	4c0c      	ldr	r4, [pc, #48]	@ (800c150 <__libc_init_array+0x44>)
 800c120:	f000 fd92 	bl	800cc48 <_init>
 800c124:	1b64      	subs	r4, r4, r5
 800c126:	10a4      	asrs	r4, r4, #2
 800c128:	2600      	movs	r6, #0
 800c12a:	42a6      	cmp	r6, r4
 800c12c:	d105      	bne.n	800c13a <__libc_init_array+0x2e>
 800c12e:	bd70      	pop	{r4, r5, r6, pc}
 800c130:	f855 3b04 	ldr.w	r3, [r5], #4
 800c134:	4798      	blx	r3
 800c136:	3601      	adds	r6, #1
 800c138:	e7ee      	b.n	800c118 <__libc_init_array+0xc>
 800c13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c13e:	4798      	blx	r3
 800c140:	3601      	adds	r6, #1
 800c142:	e7f2      	b.n	800c12a <__libc_init_array+0x1e>
 800c144:	0800cef4 	.word	0x0800cef4
 800c148:	0800cef4 	.word	0x0800cef4
 800c14c:	0800cef4 	.word	0x0800cef4
 800c150:	0800cef8 	.word	0x0800cef8

0800c154 <__retarget_lock_init_recursive>:
 800c154:	4770      	bx	lr

0800c156 <__retarget_lock_acquire_recursive>:
 800c156:	4770      	bx	lr

0800c158 <__retarget_lock_release_recursive>:
 800c158:	4770      	bx	lr

0800c15a <memcpy>:
 800c15a:	440a      	add	r2, r1
 800c15c:	4291      	cmp	r1, r2
 800c15e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c162:	d100      	bne.n	800c166 <memcpy+0xc>
 800c164:	4770      	bx	lr
 800c166:	b510      	push	{r4, lr}
 800c168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c16c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c170:	4291      	cmp	r1, r2
 800c172:	d1f9      	bne.n	800c168 <memcpy+0xe>
 800c174:	bd10      	pop	{r4, pc}
	...

0800c178 <_free_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4605      	mov	r5, r0
 800c17c:	2900      	cmp	r1, #0
 800c17e:	d041      	beq.n	800c204 <_free_r+0x8c>
 800c180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c184:	1f0c      	subs	r4, r1, #4
 800c186:	2b00      	cmp	r3, #0
 800c188:	bfb8      	it	lt
 800c18a:	18e4      	addlt	r4, r4, r3
 800c18c:	f7ff fe52 	bl	800be34 <__malloc_lock>
 800c190:	4a1d      	ldr	r2, [pc, #116]	@ (800c208 <_free_r+0x90>)
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	b933      	cbnz	r3, 800c1a4 <_free_r+0x2c>
 800c196:	6063      	str	r3, [r4, #4]
 800c198:	6014      	str	r4, [r2, #0]
 800c19a:	4628      	mov	r0, r5
 800c19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1a0:	f7ff be4e 	b.w	800be40 <__malloc_unlock>
 800c1a4:	42a3      	cmp	r3, r4
 800c1a6:	d908      	bls.n	800c1ba <_free_r+0x42>
 800c1a8:	6820      	ldr	r0, [r4, #0]
 800c1aa:	1821      	adds	r1, r4, r0
 800c1ac:	428b      	cmp	r3, r1
 800c1ae:	bf01      	itttt	eq
 800c1b0:	6819      	ldreq	r1, [r3, #0]
 800c1b2:	685b      	ldreq	r3, [r3, #4]
 800c1b4:	1809      	addeq	r1, r1, r0
 800c1b6:	6021      	streq	r1, [r4, #0]
 800c1b8:	e7ed      	b.n	800c196 <_free_r+0x1e>
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	b10b      	cbz	r3, 800c1c4 <_free_r+0x4c>
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	d9fa      	bls.n	800c1ba <_free_r+0x42>
 800c1c4:	6811      	ldr	r1, [r2, #0]
 800c1c6:	1850      	adds	r0, r2, r1
 800c1c8:	42a0      	cmp	r0, r4
 800c1ca:	d10b      	bne.n	800c1e4 <_free_r+0x6c>
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	4401      	add	r1, r0
 800c1d0:	1850      	adds	r0, r2, r1
 800c1d2:	4283      	cmp	r3, r0
 800c1d4:	6011      	str	r1, [r2, #0]
 800c1d6:	d1e0      	bne.n	800c19a <_free_r+0x22>
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	6053      	str	r3, [r2, #4]
 800c1de:	4408      	add	r0, r1
 800c1e0:	6010      	str	r0, [r2, #0]
 800c1e2:	e7da      	b.n	800c19a <_free_r+0x22>
 800c1e4:	d902      	bls.n	800c1ec <_free_r+0x74>
 800c1e6:	230c      	movs	r3, #12
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	e7d6      	b.n	800c19a <_free_r+0x22>
 800c1ec:	6820      	ldr	r0, [r4, #0]
 800c1ee:	1821      	adds	r1, r4, r0
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	bf04      	itt	eq
 800c1f4:	6819      	ldreq	r1, [r3, #0]
 800c1f6:	685b      	ldreq	r3, [r3, #4]
 800c1f8:	6063      	str	r3, [r4, #4]
 800c1fa:	bf04      	itt	eq
 800c1fc:	1809      	addeq	r1, r1, r0
 800c1fe:	6021      	streq	r1, [r4, #0]
 800c200:	6054      	str	r4, [r2, #4]
 800c202:	e7ca      	b.n	800c19a <_free_r+0x22>
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	20000df0 	.word	0x20000df0

0800c20c <__sfputc_r>:
 800c20c:	6893      	ldr	r3, [r2, #8]
 800c20e:	3b01      	subs	r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	b410      	push	{r4}
 800c214:	6093      	str	r3, [r2, #8]
 800c216:	da08      	bge.n	800c22a <__sfputc_r+0x1e>
 800c218:	6994      	ldr	r4, [r2, #24]
 800c21a:	42a3      	cmp	r3, r4
 800c21c:	db01      	blt.n	800c222 <__sfputc_r+0x16>
 800c21e:	290a      	cmp	r1, #10
 800c220:	d103      	bne.n	800c22a <__sfputc_r+0x1e>
 800c222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c226:	f000 bbb0 	b.w	800c98a <__swbuf_r>
 800c22a:	6813      	ldr	r3, [r2, #0]
 800c22c:	1c58      	adds	r0, r3, #1
 800c22e:	6010      	str	r0, [r2, #0]
 800c230:	7019      	strb	r1, [r3, #0]
 800c232:	4608      	mov	r0, r1
 800c234:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c238:	4770      	bx	lr

0800c23a <__sfputs_r>:
 800c23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	4614      	mov	r4, r2
 800c242:	18d5      	adds	r5, r2, r3
 800c244:	42ac      	cmp	r4, r5
 800c246:	d101      	bne.n	800c24c <__sfputs_r+0x12>
 800c248:	2000      	movs	r0, #0
 800c24a:	e007      	b.n	800c25c <__sfputs_r+0x22>
 800c24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c250:	463a      	mov	r2, r7
 800c252:	4630      	mov	r0, r6
 800c254:	f7ff ffda 	bl	800c20c <__sfputc_r>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d1f3      	bne.n	800c244 <__sfputs_r+0xa>
 800c25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c260 <_vfiprintf_r>:
 800c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c264:	460d      	mov	r5, r1
 800c266:	b09d      	sub	sp, #116	@ 0x74
 800c268:	4614      	mov	r4, r2
 800c26a:	4698      	mov	r8, r3
 800c26c:	4606      	mov	r6, r0
 800c26e:	b118      	cbz	r0, 800c278 <_vfiprintf_r+0x18>
 800c270:	6a03      	ldr	r3, [r0, #32]
 800c272:	b90b      	cbnz	r3, 800c278 <_vfiprintf_r+0x18>
 800c274:	f7ff fe76 	bl	800bf64 <__sinit>
 800c278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c27a:	07d9      	lsls	r1, r3, #31
 800c27c:	d405      	bmi.n	800c28a <_vfiprintf_r+0x2a>
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	059a      	lsls	r2, r3, #22
 800c282:	d402      	bmi.n	800c28a <_vfiprintf_r+0x2a>
 800c284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c286:	f7ff ff66 	bl	800c156 <__retarget_lock_acquire_recursive>
 800c28a:	89ab      	ldrh	r3, [r5, #12]
 800c28c:	071b      	lsls	r3, r3, #28
 800c28e:	d501      	bpl.n	800c294 <_vfiprintf_r+0x34>
 800c290:	692b      	ldr	r3, [r5, #16]
 800c292:	b99b      	cbnz	r3, 800c2bc <_vfiprintf_r+0x5c>
 800c294:	4629      	mov	r1, r5
 800c296:	4630      	mov	r0, r6
 800c298:	f000 fbb6 	bl	800ca08 <__swsetup_r>
 800c29c:	b170      	cbz	r0, 800c2bc <_vfiprintf_r+0x5c>
 800c29e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2a0:	07dc      	lsls	r4, r3, #31
 800c2a2:	d504      	bpl.n	800c2ae <_vfiprintf_r+0x4e>
 800c2a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2a8:	b01d      	add	sp, #116	@ 0x74
 800c2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	0598      	lsls	r0, r3, #22
 800c2b2:	d4f7      	bmi.n	800c2a4 <_vfiprintf_r+0x44>
 800c2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2b6:	f7ff ff4f 	bl	800c158 <__retarget_lock_release_recursive>
 800c2ba:	e7f3      	b.n	800c2a4 <_vfiprintf_r+0x44>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2c0:	2320      	movs	r3, #32
 800c2c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ca:	2330      	movs	r3, #48	@ 0x30
 800c2cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c47c <_vfiprintf_r+0x21c>
 800c2d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2d4:	f04f 0901 	mov.w	r9, #1
 800c2d8:	4623      	mov	r3, r4
 800c2da:	469a      	mov	sl, r3
 800c2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e0:	b10a      	cbz	r2, 800c2e6 <_vfiprintf_r+0x86>
 800c2e2:	2a25      	cmp	r2, #37	@ 0x25
 800c2e4:	d1f9      	bne.n	800c2da <_vfiprintf_r+0x7a>
 800c2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ea:	d00b      	beq.n	800c304 <_vfiprintf_r+0xa4>
 800c2ec:	465b      	mov	r3, fp
 800c2ee:	4622      	mov	r2, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f7ff ffa1 	bl	800c23a <__sfputs_r>
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	f000 80a7 	beq.w	800c44c <_vfiprintf_r+0x1ec>
 800c2fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c300:	445a      	add	r2, fp
 800c302:	9209      	str	r2, [sp, #36]	@ 0x24
 800c304:	f89a 3000 	ldrb.w	r3, [sl]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 809f 	beq.w	800c44c <_vfiprintf_r+0x1ec>
 800c30e:	2300      	movs	r3, #0
 800c310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c318:	f10a 0a01 	add.w	sl, sl, #1
 800c31c:	9304      	str	r3, [sp, #16]
 800c31e:	9307      	str	r3, [sp, #28]
 800c320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c324:	931a      	str	r3, [sp, #104]	@ 0x68
 800c326:	4654      	mov	r4, sl
 800c328:	2205      	movs	r2, #5
 800c32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c32e:	4853      	ldr	r0, [pc, #332]	@ (800c47c <_vfiprintf_r+0x21c>)
 800c330:	f7f3 ff56 	bl	80001e0 <memchr>
 800c334:	9a04      	ldr	r2, [sp, #16]
 800c336:	b9d8      	cbnz	r0, 800c370 <_vfiprintf_r+0x110>
 800c338:	06d1      	lsls	r1, r2, #27
 800c33a:	bf44      	itt	mi
 800c33c:	2320      	movmi	r3, #32
 800c33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c342:	0713      	lsls	r3, r2, #28
 800c344:	bf44      	itt	mi
 800c346:	232b      	movmi	r3, #43	@ 0x2b
 800c348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c34c:	f89a 3000 	ldrb.w	r3, [sl]
 800c350:	2b2a      	cmp	r3, #42	@ 0x2a
 800c352:	d015      	beq.n	800c380 <_vfiprintf_r+0x120>
 800c354:	9a07      	ldr	r2, [sp, #28]
 800c356:	4654      	mov	r4, sl
 800c358:	2000      	movs	r0, #0
 800c35a:	f04f 0c0a 	mov.w	ip, #10
 800c35e:	4621      	mov	r1, r4
 800c360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c364:	3b30      	subs	r3, #48	@ 0x30
 800c366:	2b09      	cmp	r3, #9
 800c368:	d94b      	bls.n	800c402 <_vfiprintf_r+0x1a2>
 800c36a:	b1b0      	cbz	r0, 800c39a <_vfiprintf_r+0x13a>
 800c36c:	9207      	str	r2, [sp, #28]
 800c36e:	e014      	b.n	800c39a <_vfiprintf_r+0x13a>
 800c370:	eba0 0308 	sub.w	r3, r0, r8
 800c374:	fa09 f303 	lsl.w	r3, r9, r3
 800c378:	4313      	orrs	r3, r2
 800c37a:	9304      	str	r3, [sp, #16]
 800c37c:	46a2      	mov	sl, r4
 800c37e:	e7d2      	b.n	800c326 <_vfiprintf_r+0xc6>
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	1d19      	adds	r1, r3, #4
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	9103      	str	r1, [sp, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	bfbb      	ittet	lt
 800c38c:	425b      	neglt	r3, r3
 800c38e:	f042 0202 	orrlt.w	r2, r2, #2
 800c392:	9307      	strge	r3, [sp, #28]
 800c394:	9307      	strlt	r3, [sp, #28]
 800c396:	bfb8      	it	lt
 800c398:	9204      	strlt	r2, [sp, #16]
 800c39a:	7823      	ldrb	r3, [r4, #0]
 800c39c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c39e:	d10a      	bne.n	800c3b6 <_vfiprintf_r+0x156>
 800c3a0:	7863      	ldrb	r3, [r4, #1]
 800c3a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a4:	d132      	bne.n	800c40c <_vfiprintf_r+0x1ac>
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	1d1a      	adds	r2, r3, #4
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	9203      	str	r2, [sp, #12]
 800c3ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3b2:	3402      	adds	r4, #2
 800c3b4:	9305      	str	r3, [sp, #20]
 800c3b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c48c <_vfiprintf_r+0x22c>
 800c3ba:	7821      	ldrb	r1, [r4, #0]
 800c3bc:	2203      	movs	r2, #3
 800c3be:	4650      	mov	r0, sl
 800c3c0:	f7f3 ff0e 	bl	80001e0 <memchr>
 800c3c4:	b138      	cbz	r0, 800c3d6 <_vfiprintf_r+0x176>
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	eba0 000a 	sub.w	r0, r0, sl
 800c3cc:	2240      	movs	r2, #64	@ 0x40
 800c3ce:	4082      	lsls	r2, r0
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	9304      	str	r3, [sp, #16]
 800c3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3da:	4829      	ldr	r0, [pc, #164]	@ (800c480 <_vfiprintf_r+0x220>)
 800c3dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3e0:	2206      	movs	r2, #6
 800c3e2:	f7f3 fefd 	bl	80001e0 <memchr>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d03f      	beq.n	800c46a <_vfiprintf_r+0x20a>
 800c3ea:	4b26      	ldr	r3, [pc, #152]	@ (800c484 <_vfiprintf_r+0x224>)
 800c3ec:	bb1b      	cbnz	r3, 800c436 <_vfiprintf_r+0x1d6>
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	3307      	adds	r3, #7
 800c3f2:	f023 0307 	bic.w	r3, r3, #7
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	9303      	str	r3, [sp, #12]
 800c3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3fc:	443b      	add	r3, r7
 800c3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c400:	e76a      	b.n	800c2d8 <_vfiprintf_r+0x78>
 800c402:	fb0c 3202 	mla	r2, ip, r2, r3
 800c406:	460c      	mov	r4, r1
 800c408:	2001      	movs	r0, #1
 800c40a:	e7a8      	b.n	800c35e <_vfiprintf_r+0xfe>
 800c40c:	2300      	movs	r3, #0
 800c40e:	3401      	adds	r4, #1
 800c410:	9305      	str	r3, [sp, #20]
 800c412:	4619      	mov	r1, r3
 800c414:	f04f 0c0a 	mov.w	ip, #10
 800c418:	4620      	mov	r0, r4
 800c41a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c41e:	3a30      	subs	r2, #48	@ 0x30
 800c420:	2a09      	cmp	r2, #9
 800c422:	d903      	bls.n	800c42c <_vfiprintf_r+0x1cc>
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0c6      	beq.n	800c3b6 <_vfiprintf_r+0x156>
 800c428:	9105      	str	r1, [sp, #20]
 800c42a:	e7c4      	b.n	800c3b6 <_vfiprintf_r+0x156>
 800c42c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c430:	4604      	mov	r4, r0
 800c432:	2301      	movs	r3, #1
 800c434:	e7f0      	b.n	800c418 <_vfiprintf_r+0x1b8>
 800c436:	ab03      	add	r3, sp, #12
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	462a      	mov	r2, r5
 800c43c:	4b12      	ldr	r3, [pc, #72]	@ (800c488 <_vfiprintf_r+0x228>)
 800c43e:	a904      	add	r1, sp, #16
 800c440:	4630      	mov	r0, r6
 800c442:	f3af 8000 	nop.w
 800c446:	4607      	mov	r7, r0
 800c448:	1c78      	adds	r0, r7, #1
 800c44a:	d1d6      	bne.n	800c3fa <_vfiprintf_r+0x19a>
 800c44c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c44e:	07d9      	lsls	r1, r3, #31
 800c450:	d405      	bmi.n	800c45e <_vfiprintf_r+0x1fe>
 800c452:	89ab      	ldrh	r3, [r5, #12]
 800c454:	059a      	lsls	r2, r3, #22
 800c456:	d402      	bmi.n	800c45e <_vfiprintf_r+0x1fe>
 800c458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c45a:	f7ff fe7d 	bl	800c158 <__retarget_lock_release_recursive>
 800c45e:	89ab      	ldrh	r3, [r5, #12]
 800c460:	065b      	lsls	r3, r3, #25
 800c462:	f53f af1f 	bmi.w	800c2a4 <_vfiprintf_r+0x44>
 800c466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c468:	e71e      	b.n	800c2a8 <_vfiprintf_r+0x48>
 800c46a:	ab03      	add	r3, sp, #12
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	462a      	mov	r2, r5
 800c470:	4b05      	ldr	r3, [pc, #20]	@ (800c488 <_vfiprintf_r+0x228>)
 800c472:	a904      	add	r1, sp, #16
 800c474:	4630      	mov	r0, r6
 800c476:	f000 f879 	bl	800c56c <_printf_i>
 800c47a:	e7e4      	b.n	800c446 <_vfiprintf_r+0x1e6>
 800c47c:	0800ceb8 	.word	0x0800ceb8
 800c480:	0800cec2 	.word	0x0800cec2
 800c484:	00000000 	.word	0x00000000
 800c488:	0800c23b 	.word	0x0800c23b
 800c48c:	0800cebe 	.word	0x0800cebe

0800c490 <_printf_common>:
 800c490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c494:	4616      	mov	r6, r2
 800c496:	4698      	mov	r8, r3
 800c498:	688a      	ldr	r2, [r1, #8]
 800c49a:	690b      	ldr	r3, [r1, #16]
 800c49c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	bfb8      	it	lt
 800c4a4:	4613      	movlt	r3, r2
 800c4a6:	6033      	str	r3, [r6, #0]
 800c4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4ac:	4607      	mov	r7, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	b10a      	cbz	r2, 800c4b6 <_printf_common+0x26>
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	6033      	str	r3, [r6, #0]
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	0699      	lsls	r1, r3, #26
 800c4ba:	bf42      	ittt	mi
 800c4bc:	6833      	ldrmi	r3, [r6, #0]
 800c4be:	3302      	addmi	r3, #2
 800c4c0:	6033      	strmi	r3, [r6, #0]
 800c4c2:	6825      	ldr	r5, [r4, #0]
 800c4c4:	f015 0506 	ands.w	r5, r5, #6
 800c4c8:	d106      	bne.n	800c4d8 <_printf_common+0x48>
 800c4ca:	f104 0a19 	add.w	sl, r4, #25
 800c4ce:	68e3      	ldr	r3, [r4, #12]
 800c4d0:	6832      	ldr	r2, [r6, #0]
 800c4d2:	1a9b      	subs	r3, r3, r2
 800c4d4:	42ab      	cmp	r3, r5
 800c4d6:	dc26      	bgt.n	800c526 <_printf_common+0x96>
 800c4d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4dc:	6822      	ldr	r2, [r4, #0]
 800c4de:	3b00      	subs	r3, #0
 800c4e0:	bf18      	it	ne
 800c4e2:	2301      	movne	r3, #1
 800c4e4:	0692      	lsls	r2, r2, #26
 800c4e6:	d42b      	bmi.n	800c540 <_printf_common+0xb0>
 800c4e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4ec:	4641      	mov	r1, r8
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	47c8      	blx	r9
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	d01e      	beq.n	800c534 <_printf_common+0xa4>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	6922      	ldr	r2, [r4, #16]
 800c4fa:	f003 0306 	and.w	r3, r3, #6
 800c4fe:	2b04      	cmp	r3, #4
 800c500:	bf02      	ittt	eq
 800c502:	68e5      	ldreq	r5, [r4, #12]
 800c504:	6833      	ldreq	r3, [r6, #0]
 800c506:	1aed      	subeq	r5, r5, r3
 800c508:	68a3      	ldr	r3, [r4, #8]
 800c50a:	bf0c      	ite	eq
 800c50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c510:	2500      	movne	r5, #0
 800c512:	4293      	cmp	r3, r2
 800c514:	bfc4      	itt	gt
 800c516:	1a9b      	subgt	r3, r3, r2
 800c518:	18ed      	addgt	r5, r5, r3
 800c51a:	2600      	movs	r6, #0
 800c51c:	341a      	adds	r4, #26
 800c51e:	42b5      	cmp	r5, r6
 800c520:	d11a      	bne.n	800c558 <_printf_common+0xc8>
 800c522:	2000      	movs	r0, #0
 800c524:	e008      	b.n	800c538 <_printf_common+0xa8>
 800c526:	2301      	movs	r3, #1
 800c528:	4652      	mov	r2, sl
 800c52a:	4641      	mov	r1, r8
 800c52c:	4638      	mov	r0, r7
 800c52e:	47c8      	blx	r9
 800c530:	3001      	adds	r0, #1
 800c532:	d103      	bne.n	800c53c <_printf_common+0xac>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53c:	3501      	adds	r5, #1
 800c53e:	e7c6      	b.n	800c4ce <_printf_common+0x3e>
 800c540:	18e1      	adds	r1, r4, r3
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	2030      	movs	r0, #48	@ 0x30
 800c546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c54a:	4422      	add	r2, r4
 800c54c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c550:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c554:	3302      	adds	r3, #2
 800c556:	e7c7      	b.n	800c4e8 <_printf_common+0x58>
 800c558:	2301      	movs	r3, #1
 800c55a:	4622      	mov	r2, r4
 800c55c:	4641      	mov	r1, r8
 800c55e:	4638      	mov	r0, r7
 800c560:	47c8      	blx	r9
 800c562:	3001      	adds	r0, #1
 800c564:	d0e6      	beq.n	800c534 <_printf_common+0xa4>
 800c566:	3601      	adds	r6, #1
 800c568:	e7d9      	b.n	800c51e <_printf_common+0x8e>
	...

0800c56c <_printf_i>:
 800c56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	7e0f      	ldrb	r7, [r1, #24]
 800c572:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c574:	2f78      	cmp	r7, #120	@ 0x78
 800c576:	4691      	mov	r9, r2
 800c578:	4680      	mov	r8, r0
 800c57a:	460c      	mov	r4, r1
 800c57c:	469a      	mov	sl, r3
 800c57e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c582:	d807      	bhi.n	800c594 <_printf_i+0x28>
 800c584:	2f62      	cmp	r7, #98	@ 0x62
 800c586:	d80a      	bhi.n	800c59e <_printf_i+0x32>
 800c588:	2f00      	cmp	r7, #0
 800c58a:	f000 80d2 	beq.w	800c732 <_printf_i+0x1c6>
 800c58e:	2f58      	cmp	r7, #88	@ 0x58
 800c590:	f000 80b9 	beq.w	800c706 <_printf_i+0x19a>
 800c594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c59c:	e03a      	b.n	800c614 <_printf_i+0xa8>
 800c59e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5a2:	2b15      	cmp	r3, #21
 800c5a4:	d8f6      	bhi.n	800c594 <_printf_i+0x28>
 800c5a6:	a101      	add	r1, pc, #4	@ (adr r1, 800c5ac <_printf_i+0x40>)
 800c5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5ac:	0800c605 	.word	0x0800c605
 800c5b0:	0800c619 	.word	0x0800c619
 800c5b4:	0800c595 	.word	0x0800c595
 800c5b8:	0800c595 	.word	0x0800c595
 800c5bc:	0800c595 	.word	0x0800c595
 800c5c0:	0800c595 	.word	0x0800c595
 800c5c4:	0800c619 	.word	0x0800c619
 800c5c8:	0800c595 	.word	0x0800c595
 800c5cc:	0800c595 	.word	0x0800c595
 800c5d0:	0800c595 	.word	0x0800c595
 800c5d4:	0800c595 	.word	0x0800c595
 800c5d8:	0800c719 	.word	0x0800c719
 800c5dc:	0800c643 	.word	0x0800c643
 800c5e0:	0800c6d3 	.word	0x0800c6d3
 800c5e4:	0800c595 	.word	0x0800c595
 800c5e8:	0800c595 	.word	0x0800c595
 800c5ec:	0800c73b 	.word	0x0800c73b
 800c5f0:	0800c595 	.word	0x0800c595
 800c5f4:	0800c643 	.word	0x0800c643
 800c5f8:	0800c595 	.word	0x0800c595
 800c5fc:	0800c595 	.word	0x0800c595
 800c600:	0800c6db 	.word	0x0800c6db
 800c604:	6833      	ldr	r3, [r6, #0]
 800c606:	1d1a      	adds	r2, r3, #4
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	6032      	str	r2, [r6, #0]
 800c60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c614:	2301      	movs	r3, #1
 800c616:	e09d      	b.n	800c754 <_printf_i+0x1e8>
 800c618:	6833      	ldr	r3, [r6, #0]
 800c61a:	6820      	ldr	r0, [r4, #0]
 800c61c:	1d19      	adds	r1, r3, #4
 800c61e:	6031      	str	r1, [r6, #0]
 800c620:	0606      	lsls	r6, r0, #24
 800c622:	d501      	bpl.n	800c628 <_printf_i+0xbc>
 800c624:	681d      	ldr	r5, [r3, #0]
 800c626:	e003      	b.n	800c630 <_printf_i+0xc4>
 800c628:	0645      	lsls	r5, r0, #25
 800c62a:	d5fb      	bpl.n	800c624 <_printf_i+0xb8>
 800c62c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c630:	2d00      	cmp	r5, #0
 800c632:	da03      	bge.n	800c63c <_printf_i+0xd0>
 800c634:	232d      	movs	r3, #45	@ 0x2d
 800c636:	426d      	negs	r5, r5
 800c638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c63c:	4859      	ldr	r0, [pc, #356]	@ (800c7a4 <_printf_i+0x238>)
 800c63e:	230a      	movs	r3, #10
 800c640:	e011      	b.n	800c666 <_printf_i+0xfa>
 800c642:	6821      	ldr	r1, [r4, #0]
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	0608      	lsls	r0, r1, #24
 800c648:	f853 5b04 	ldr.w	r5, [r3], #4
 800c64c:	d402      	bmi.n	800c654 <_printf_i+0xe8>
 800c64e:	0649      	lsls	r1, r1, #25
 800c650:	bf48      	it	mi
 800c652:	b2ad      	uxthmi	r5, r5
 800c654:	2f6f      	cmp	r7, #111	@ 0x6f
 800c656:	4853      	ldr	r0, [pc, #332]	@ (800c7a4 <_printf_i+0x238>)
 800c658:	6033      	str	r3, [r6, #0]
 800c65a:	bf14      	ite	ne
 800c65c:	230a      	movne	r3, #10
 800c65e:	2308      	moveq	r3, #8
 800c660:	2100      	movs	r1, #0
 800c662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c666:	6866      	ldr	r6, [r4, #4]
 800c668:	60a6      	str	r6, [r4, #8]
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	bfa2      	ittt	ge
 800c66e:	6821      	ldrge	r1, [r4, #0]
 800c670:	f021 0104 	bicge.w	r1, r1, #4
 800c674:	6021      	strge	r1, [r4, #0]
 800c676:	b90d      	cbnz	r5, 800c67c <_printf_i+0x110>
 800c678:	2e00      	cmp	r6, #0
 800c67a:	d04b      	beq.n	800c714 <_printf_i+0x1a8>
 800c67c:	4616      	mov	r6, r2
 800c67e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c682:	fb03 5711 	mls	r7, r3, r1, r5
 800c686:	5dc7      	ldrb	r7, [r0, r7]
 800c688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c68c:	462f      	mov	r7, r5
 800c68e:	42bb      	cmp	r3, r7
 800c690:	460d      	mov	r5, r1
 800c692:	d9f4      	bls.n	800c67e <_printf_i+0x112>
 800c694:	2b08      	cmp	r3, #8
 800c696:	d10b      	bne.n	800c6b0 <_printf_i+0x144>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	07df      	lsls	r7, r3, #31
 800c69c:	d508      	bpl.n	800c6b0 <_printf_i+0x144>
 800c69e:	6923      	ldr	r3, [r4, #16]
 800c6a0:	6861      	ldr	r1, [r4, #4]
 800c6a2:	4299      	cmp	r1, r3
 800c6a4:	bfde      	ittt	le
 800c6a6:	2330      	movle	r3, #48	@ 0x30
 800c6a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c6b0:	1b92      	subs	r2, r2, r6
 800c6b2:	6122      	str	r2, [r4, #16]
 800c6b4:	f8cd a000 	str.w	sl, [sp]
 800c6b8:	464b      	mov	r3, r9
 800c6ba:	aa03      	add	r2, sp, #12
 800c6bc:	4621      	mov	r1, r4
 800c6be:	4640      	mov	r0, r8
 800c6c0:	f7ff fee6 	bl	800c490 <_printf_common>
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d14a      	bne.n	800c75e <_printf_i+0x1f2>
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6cc:	b004      	add	sp, #16
 800c6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	f043 0320 	orr.w	r3, r3, #32
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	4833      	ldr	r0, [pc, #204]	@ (800c7a8 <_printf_i+0x23c>)
 800c6dc:	2778      	movs	r7, #120	@ 0x78
 800c6de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	6831      	ldr	r1, [r6, #0]
 800c6e6:	061f      	lsls	r7, r3, #24
 800c6e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6ec:	d402      	bmi.n	800c6f4 <_printf_i+0x188>
 800c6ee:	065f      	lsls	r7, r3, #25
 800c6f0:	bf48      	it	mi
 800c6f2:	b2ad      	uxthmi	r5, r5
 800c6f4:	6031      	str	r1, [r6, #0]
 800c6f6:	07d9      	lsls	r1, r3, #31
 800c6f8:	bf44      	itt	mi
 800c6fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c6fe:	6023      	strmi	r3, [r4, #0]
 800c700:	b11d      	cbz	r5, 800c70a <_printf_i+0x19e>
 800c702:	2310      	movs	r3, #16
 800c704:	e7ac      	b.n	800c660 <_printf_i+0xf4>
 800c706:	4827      	ldr	r0, [pc, #156]	@ (800c7a4 <_printf_i+0x238>)
 800c708:	e7e9      	b.n	800c6de <_printf_i+0x172>
 800c70a:	6823      	ldr	r3, [r4, #0]
 800c70c:	f023 0320 	bic.w	r3, r3, #32
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	e7f6      	b.n	800c702 <_printf_i+0x196>
 800c714:	4616      	mov	r6, r2
 800c716:	e7bd      	b.n	800c694 <_printf_i+0x128>
 800c718:	6833      	ldr	r3, [r6, #0]
 800c71a:	6825      	ldr	r5, [r4, #0]
 800c71c:	6961      	ldr	r1, [r4, #20]
 800c71e:	1d18      	adds	r0, r3, #4
 800c720:	6030      	str	r0, [r6, #0]
 800c722:	062e      	lsls	r6, r5, #24
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	d501      	bpl.n	800c72c <_printf_i+0x1c0>
 800c728:	6019      	str	r1, [r3, #0]
 800c72a:	e002      	b.n	800c732 <_printf_i+0x1c6>
 800c72c:	0668      	lsls	r0, r5, #25
 800c72e:	d5fb      	bpl.n	800c728 <_printf_i+0x1bc>
 800c730:	8019      	strh	r1, [r3, #0]
 800c732:	2300      	movs	r3, #0
 800c734:	6123      	str	r3, [r4, #16]
 800c736:	4616      	mov	r6, r2
 800c738:	e7bc      	b.n	800c6b4 <_printf_i+0x148>
 800c73a:	6833      	ldr	r3, [r6, #0]
 800c73c:	1d1a      	adds	r2, r3, #4
 800c73e:	6032      	str	r2, [r6, #0]
 800c740:	681e      	ldr	r6, [r3, #0]
 800c742:	6862      	ldr	r2, [r4, #4]
 800c744:	2100      	movs	r1, #0
 800c746:	4630      	mov	r0, r6
 800c748:	f7f3 fd4a 	bl	80001e0 <memchr>
 800c74c:	b108      	cbz	r0, 800c752 <_printf_i+0x1e6>
 800c74e:	1b80      	subs	r0, r0, r6
 800c750:	6060      	str	r0, [r4, #4]
 800c752:	6863      	ldr	r3, [r4, #4]
 800c754:	6123      	str	r3, [r4, #16]
 800c756:	2300      	movs	r3, #0
 800c758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75c:	e7aa      	b.n	800c6b4 <_printf_i+0x148>
 800c75e:	6923      	ldr	r3, [r4, #16]
 800c760:	4632      	mov	r2, r6
 800c762:	4649      	mov	r1, r9
 800c764:	4640      	mov	r0, r8
 800c766:	47d0      	blx	sl
 800c768:	3001      	adds	r0, #1
 800c76a:	d0ad      	beq.n	800c6c8 <_printf_i+0x15c>
 800c76c:	6823      	ldr	r3, [r4, #0]
 800c76e:	079b      	lsls	r3, r3, #30
 800c770:	d413      	bmi.n	800c79a <_printf_i+0x22e>
 800c772:	68e0      	ldr	r0, [r4, #12]
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	4298      	cmp	r0, r3
 800c778:	bfb8      	it	lt
 800c77a:	4618      	movlt	r0, r3
 800c77c:	e7a6      	b.n	800c6cc <_printf_i+0x160>
 800c77e:	2301      	movs	r3, #1
 800c780:	4632      	mov	r2, r6
 800c782:	4649      	mov	r1, r9
 800c784:	4640      	mov	r0, r8
 800c786:	47d0      	blx	sl
 800c788:	3001      	adds	r0, #1
 800c78a:	d09d      	beq.n	800c6c8 <_printf_i+0x15c>
 800c78c:	3501      	adds	r5, #1
 800c78e:	68e3      	ldr	r3, [r4, #12]
 800c790:	9903      	ldr	r1, [sp, #12]
 800c792:	1a5b      	subs	r3, r3, r1
 800c794:	42ab      	cmp	r3, r5
 800c796:	dcf2      	bgt.n	800c77e <_printf_i+0x212>
 800c798:	e7eb      	b.n	800c772 <_printf_i+0x206>
 800c79a:	2500      	movs	r5, #0
 800c79c:	f104 0619 	add.w	r6, r4, #25
 800c7a0:	e7f5      	b.n	800c78e <_printf_i+0x222>
 800c7a2:	bf00      	nop
 800c7a4:	0800cec9 	.word	0x0800cec9
 800c7a8:	0800ceda 	.word	0x0800ceda

0800c7ac <__sflush_r>:
 800c7ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b4:	0716      	lsls	r6, r2, #28
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	460c      	mov	r4, r1
 800c7ba:	d454      	bmi.n	800c866 <__sflush_r+0xba>
 800c7bc:	684b      	ldr	r3, [r1, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	dc02      	bgt.n	800c7c8 <__sflush_r+0x1c>
 800c7c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dd48      	ble.n	800c85a <__sflush_r+0xae>
 800c7c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7ca:	2e00      	cmp	r6, #0
 800c7cc:	d045      	beq.n	800c85a <__sflush_r+0xae>
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c7d4:	682f      	ldr	r7, [r5, #0]
 800c7d6:	6a21      	ldr	r1, [r4, #32]
 800c7d8:	602b      	str	r3, [r5, #0]
 800c7da:	d030      	beq.n	800c83e <__sflush_r+0x92>
 800c7dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c7de:	89a3      	ldrh	r3, [r4, #12]
 800c7e0:	0759      	lsls	r1, r3, #29
 800c7e2:	d505      	bpl.n	800c7f0 <__sflush_r+0x44>
 800c7e4:	6863      	ldr	r3, [r4, #4]
 800c7e6:	1ad2      	subs	r2, r2, r3
 800c7e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c7ea:	b10b      	cbz	r3, 800c7f0 <__sflush_r+0x44>
 800c7ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7f4:	6a21      	ldr	r1, [r4, #32]
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	47b0      	blx	r6
 800c7fa:	1c43      	adds	r3, r0, #1
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	d106      	bne.n	800c80e <__sflush_r+0x62>
 800c800:	6829      	ldr	r1, [r5, #0]
 800c802:	291d      	cmp	r1, #29
 800c804:	d82b      	bhi.n	800c85e <__sflush_r+0xb2>
 800c806:	4a2a      	ldr	r2, [pc, #168]	@ (800c8b0 <__sflush_r+0x104>)
 800c808:	410a      	asrs	r2, r1
 800c80a:	07d6      	lsls	r6, r2, #31
 800c80c:	d427      	bmi.n	800c85e <__sflush_r+0xb2>
 800c80e:	2200      	movs	r2, #0
 800c810:	6062      	str	r2, [r4, #4]
 800c812:	04d9      	lsls	r1, r3, #19
 800c814:	6922      	ldr	r2, [r4, #16]
 800c816:	6022      	str	r2, [r4, #0]
 800c818:	d504      	bpl.n	800c824 <__sflush_r+0x78>
 800c81a:	1c42      	adds	r2, r0, #1
 800c81c:	d101      	bne.n	800c822 <__sflush_r+0x76>
 800c81e:	682b      	ldr	r3, [r5, #0]
 800c820:	b903      	cbnz	r3, 800c824 <__sflush_r+0x78>
 800c822:	6560      	str	r0, [r4, #84]	@ 0x54
 800c824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c826:	602f      	str	r7, [r5, #0]
 800c828:	b1b9      	cbz	r1, 800c85a <__sflush_r+0xae>
 800c82a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c82e:	4299      	cmp	r1, r3
 800c830:	d002      	beq.n	800c838 <__sflush_r+0x8c>
 800c832:	4628      	mov	r0, r5
 800c834:	f7ff fca0 	bl	800c178 <_free_r>
 800c838:	2300      	movs	r3, #0
 800c83a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c83c:	e00d      	b.n	800c85a <__sflush_r+0xae>
 800c83e:	2301      	movs	r3, #1
 800c840:	4628      	mov	r0, r5
 800c842:	47b0      	blx	r6
 800c844:	4602      	mov	r2, r0
 800c846:	1c50      	adds	r0, r2, #1
 800c848:	d1c9      	bne.n	800c7de <__sflush_r+0x32>
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d0c6      	beq.n	800c7de <__sflush_r+0x32>
 800c850:	2b1d      	cmp	r3, #29
 800c852:	d001      	beq.n	800c858 <__sflush_r+0xac>
 800c854:	2b16      	cmp	r3, #22
 800c856:	d11e      	bne.n	800c896 <__sflush_r+0xea>
 800c858:	602f      	str	r7, [r5, #0]
 800c85a:	2000      	movs	r0, #0
 800c85c:	e022      	b.n	800c8a4 <__sflush_r+0xf8>
 800c85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c862:	b21b      	sxth	r3, r3
 800c864:	e01b      	b.n	800c89e <__sflush_r+0xf2>
 800c866:	690f      	ldr	r7, [r1, #16]
 800c868:	2f00      	cmp	r7, #0
 800c86a:	d0f6      	beq.n	800c85a <__sflush_r+0xae>
 800c86c:	0793      	lsls	r3, r2, #30
 800c86e:	680e      	ldr	r6, [r1, #0]
 800c870:	bf08      	it	eq
 800c872:	694b      	ldreq	r3, [r1, #20]
 800c874:	600f      	str	r7, [r1, #0]
 800c876:	bf18      	it	ne
 800c878:	2300      	movne	r3, #0
 800c87a:	eba6 0807 	sub.w	r8, r6, r7
 800c87e:	608b      	str	r3, [r1, #8]
 800c880:	f1b8 0f00 	cmp.w	r8, #0
 800c884:	dde9      	ble.n	800c85a <__sflush_r+0xae>
 800c886:	6a21      	ldr	r1, [r4, #32]
 800c888:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c88a:	4643      	mov	r3, r8
 800c88c:	463a      	mov	r2, r7
 800c88e:	4628      	mov	r0, r5
 800c890:	47b0      	blx	r6
 800c892:	2800      	cmp	r0, #0
 800c894:	dc08      	bgt.n	800c8a8 <__sflush_r+0xfc>
 800c896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c89a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c89e:	81a3      	strh	r3, [r4, #12]
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a8:	4407      	add	r7, r0
 800c8aa:	eba8 0800 	sub.w	r8, r8, r0
 800c8ae:	e7e7      	b.n	800c880 <__sflush_r+0xd4>
 800c8b0:	dfbffffe 	.word	0xdfbffffe

0800c8b4 <_fflush_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	690b      	ldr	r3, [r1, #16]
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	460c      	mov	r4, r1
 800c8bc:	b913      	cbnz	r3, 800c8c4 <_fflush_r+0x10>
 800c8be:	2500      	movs	r5, #0
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	b118      	cbz	r0, 800c8ce <_fflush_r+0x1a>
 800c8c6:	6a03      	ldr	r3, [r0, #32]
 800c8c8:	b90b      	cbnz	r3, 800c8ce <_fflush_r+0x1a>
 800c8ca:	f7ff fb4b 	bl	800bf64 <__sinit>
 800c8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0f3      	beq.n	800c8be <_fflush_r+0xa>
 800c8d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c8d8:	07d0      	lsls	r0, r2, #31
 800c8da:	d404      	bmi.n	800c8e6 <_fflush_r+0x32>
 800c8dc:	0599      	lsls	r1, r3, #22
 800c8de:	d402      	bmi.n	800c8e6 <_fflush_r+0x32>
 800c8e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8e2:	f7ff fc38 	bl	800c156 <__retarget_lock_acquire_recursive>
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	f7ff ff5f 	bl	800c7ac <__sflush_r>
 800c8ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c8f0:	07da      	lsls	r2, r3, #31
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	d4e4      	bmi.n	800c8c0 <_fflush_r+0xc>
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	059b      	lsls	r3, r3, #22
 800c8fa:	d4e1      	bmi.n	800c8c0 <_fflush_r+0xc>
 800c8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8fe:	f7ff fc2b 	bl	800c158 <__retarget_lock_release_recursive>
 800c902:	e7dd      	b.n	800c8c0 <_fflush_r+0xc>

0800c904 <__sread>:
 800c904:	b510      	push	{r4, lr}
 800c906:	460c      	mov	r4, r1
 800c908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c90c:	f000 f978 	bl	800cc00 <_read_r>
 800c910:	2800      	cmp	r0, #0
 800c912:	bfab      	itete	ge
 800c914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c916:	89a3      	ldrhlt	r3, [r4, #12]
 800c918:	181b      	addge	r3, r3, r0
 800c91a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c91e:	bfac      	ite	ge
 800c920:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c922:	81a3      	strhlt	r3, [r4, #12]
 800c924:	bd10      	pop	{r4, pc}

0800c926 <__swrite>:
 800c926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c92a:	461f      	mov	r7, r3
 800c92c:	898b      	ldrh	r3, [r1, #12]
 800c92e:	05db      	lsls	r3, r3, #23
 800c930:	4605      	mov	r5, r0
 800c932:	460c      	mov	r4, r1
 800c934:	4616      	mov	r6, r2
 800c936:	d505      	bpl.n	800c944 <__swrite+0x1e>
 800c938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93c:	2302      	movs	r3, #2
 800c93e:	2200      	movs	r2, #0
 800c940:	f000 f94c 	bl	800cbdc <_lseek_r>
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c94a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	4632      	mov	r2, r6
 800c952:	463b      	mov	r3, r7
 800c954:	4628      	mov	r0, r5
 800c956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c95a:	f000 b963 	b.w	800cc24 <_write_r>

0800c95e <__sseek>:
 800c95e:	b510      	push	{r4, lr}
 800c960:	460c      	mov	r4, r1
 800c962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c966:	f000 f939 	bl	800cbdc <_lseek_r>
 800c96a:	1c43      	adds	r3, r0, #1
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	bf15      	itete	ne
 800c970:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c97a:	81a3      	strheq	r3, [r4, #12]
 800c97c:	bf18      	it	ne
 800c97e:	81a3      	strhne	r3, [r4, #12]
 800c980:	bd10      	pop	{r4, pc}

0800c982 <__sclose>:
 800c982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c986:	f000 b8f7 	b.w	800cb78 <_close_r>

0800c98a <__swbuf_r>:
 800c98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98c:	460e      	mov	r6, r1
 800c98e:	4614      	mov	r4, r2
 800c990:	4605      	mov	r5, r0
 800c992:	b118      	cbz	r0, 800c99c <__swbuf_r+0x12>
 800c994:	6a03      	ldr	r3, [r0, #32]
 800c996:	b90b      	cbnz	r3, 800c99c <__swbuf_r+0x12>
 800c998:	f7ff fae4 	bl	800bf64 <__sinit>
 800c99c:	69a3      	ldr	r3, [r4, #24]
 800c99e:	60a3      	str	r3, [r4, #8]
 800c9a0:	89a3      	ldrh	r3, [r4, #12]
 800c9a2:	071a      	lsls	r2, r3, #28
 800c9a4:	d501      	bpl.n	800c9aa <__swbuf_r+0x20>
 800c9a6:	6923      	ldr	r3, [r4, #16]
 800c9a8:	b943      	cbnz	r3, 800c9bc <__swbuf_r+0x32>
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 f82b 	bl	800ca08 <__swsetup_r>
 800c9b2:	b118      	cbz	r0, 800c9bc <__swbuf_r+0x32>
 800c9b4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	6922      	ldr	r2, [r4, #16]
 800c9c0:	1a98      	subs	r0, r3, r2
 800c9c2:	6963      	ldr	r3, [r4, #20]
 800c9c4:	b2f6      	uxtb	r6, r6
 800c9c6:	4283      	cmp	r3, r0
 800c9c8:	4637      	mov	r7, r6
 800c9ca:	dc05      	bgt.n	800c9d8 <__swbuf_r+0x4e>
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f7ff ff70 	bl	800c8b4 <_fflush_r>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d1ed      	bne.n	800c9b4 <__swbuf_r+0x2a>
 800c9d8:	68a3      	ldr	r3, [r4, #8]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	60a3      	str	r3, [r4, #8]
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	6022      	str	r2, [r4, #0]
 800c9e4:	701e      	strb	r6, [r3, #0]
 800c9e6:	6962      	ldr	r2, [r4, #20]
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d004      	beq.n	800c9f8 <__swbuf_r+0x6e>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	07db      	lsls	r3, r3, #31
 800c9f2:	d5e1      	bpl.n	800c9b8 <__swbuf_r+0x2e>
 800c9f4:	2e0a      	cmp	r6, #10
 800c9f6:	d1df      	bne.n	800c9b8 <__swbuf_r+0x2e>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f7ff ff5a 	bl	800c8b4 <_fflush_r>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d0d9      	beq.n	800c9b8 <__swbuf_r+0x2e>
 800ca04:	e7d6      	b.n	800c9b4 <__swbuf_r+0x2a>
	...

0800ca08 <__swsetup_r>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	4b29      	ldr	r3, [pc, #164]	@ (800cab0 <__swsetup_r+0xa8>)
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	6818      	ldr	r0, [r3, #0]
 800ca10:	460c      	mov	r4, r1
 800ca12:	b118      	cbz	r0, 800ca1c <__swsetup_r+0x14>
 800ca14:	6a03      	ldr	r3, [r0, #32]
 800ca16:	b90b      	cbnz	r3, 800ca1c <__swsetup_r+0x14>
 800ca18:	f7ff faa4 	bl	800bf64 <__sinit>
 800ca1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca20:	0719      	lsls	r1, r3, #28
 800ca22:	d422      	bmi.n	800ca6a <__swsetup_r+0x62>
 800ca24:	06da      	lsls	r2, r3, #27
 800ca26:	d407      	bmi.n	800ca38 <__swsetup_r+0x30>
 800ca28:	2209      	movs	r2, #9
 800ca2a:	602a      	str	r2, [r5, #0]
 800ca2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca30:	81a3      	strh	r3, [r4, #12]
 800ca32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca36:	e033      	b.n	800caa0 <__swsetup_r+0x98>
 800ca38:	0758      	lsls	r0, r3, #29
 800ca3a:	d512      	bpl.n	800ca62 <__swsetup_r+0x5a>
 800ca3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca3e:	b141      	cbz	r1, 800ca52 <__swsetup_r+0x4a>
 800ca40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca44:	4299      	cmp	r1, r3
 800ca46:	d002      	beq.n	800ca4e <__swsetup_r+0x46>
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f7ff fb95 	bl	800c178 <_free_r>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6063      	str	r3, [r4, #4]
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f043 0308 	orr.w	r3, r3, #8
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	b94b      	cbnz	r3, 800ca82 <__swsetup_r+0x7a>
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca78:	d003      	beq.n	800ca82 <__swsetup_r+0x7a>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	f000 f83f 	bl	800cb00 <__smakebuf_r>
 800ca82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca86:	f013 0201 	ands.w	r2, r3, #1
 800ca8a:	d00a      	beq.n	800caa2 <__swsetup_r+0x9a>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	60a2      	str	r2, [r4, #8]
 800ca90:	6962      	ldr	r2, [r4, #20]
 800ca92:	4252      	negs	r2, r2
 800ca94:	61a2      	str	r2, [r4, #24]
 800ca96:	6922      	ldr	r2, [r4, #16]
 800ca98:	b942      	cbnz	r2, 800caac <__swsetup_r+0xa4>
 800ca9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca9e:	d1c5      	bne.n	800ca2c <__swsetup_r+0x24>
 800caa0:	bd38      	pop	{r3, r4, r5, pc}
 800caa2:	0799      	lsls	r1, r3, #30
 800caa4:	bf58      	it	pl
 800caa6:	6962      	ldrpl	r2, [r4, #20]
 800caa8:	60a2      	str	r2, [r4, #8]
 800caaa:	e7f4      	b.n	800ca96 <__swsetup_r+0x8e>
 800caac:	2000      	movs	r0, #0
 800caae:	e7f7      	b.n	800caa0 <__swsetup_r+0x98>
 800cab0:	20000588 	.word	0x20000588

0800cab4 <__swhatbuf_r>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	460c      	mov	r4, r1
 800cab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cabc:	2900      	cmp	r1, #0
 800cabe:	b096      	sub	sp, #88	@ 0x58
 800cac0:	4615      	mov	r5, r2
 800cac2:	461e      	mov	r6, r3
 800cac4:	da0d      	bge.n	800cae2 <__swhatbuf_r+0x2e>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cacc:	f04f 0100 	mov.w	r1, #0
 800cad0:	bf14      	ite	ne
 800cad2:	2340      	movne	r3, #64	@ 0x40
 800cad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cad8:	2000      	movs	r0, #0
 800cada:	6031      	str	r1, [r6, #0]
 800cadc:	602b      	str	r3, [r5, #0]
 800cade:	b016      	add	sp, #88	@ 0x58
 800cae0:	bd70      	pop	{r4, r5, r6, pc}
 800cae2:	466a      	mov	r2, sp
 800cae4:	f000 f858 	bl	800cb98 <_fstat_r>
 800cae8:	2800      	cmp	r0, #0
 800caea:	dbec      	blt.n	800cac6 <__swhatbuf_r+0x12>
 800caec:	9901      	ldr	r1, [sp, #4]
 800caee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800caf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800caf6:	4259      	negs	r1, r3
 800caf8:	4159      	adcs	r1, r3
 800cafa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cafe:	e7eb      	b.n	800cad8 <__swhatbuf_r+0x24>

0800cb00 <__smakebuf_r>:
 800cb00:	898b      	ldrh	r3, [r1, #12]
 800cb02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb04:	079d      	lsls	r5, r3, #30
 800cb06:	4606      	mov	r6, r0
 800cb08:	460c      	mov	r4, r1
 800cb0a:	d507      	bpl.n	800cb1c <__smakebuf_r+0x1c>
 800cb0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	6123      	str	r3, [r4, #16]
 800cb14:	2301      	movs	r3, #1
 800cb16:	6163      	str	r3, [r4, #20]
 800cb18:	b003      	add	sp, #12
 800cb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb1c:	ab01      	add	r3, sp, #4
 800cb1e:	466a      	mov	r2, sp
 800cb20:	f7ff ffc8 	bl	800cab4 <__swhatbuf_r>
 800cb24:	9f00      	ldr	r7, [sp, #0]
 800cb26:	4605      	mov	r5, r0
 800cb28:	4639      	mov	r1, r7
 800cb2a:	4630      	mov	r0, r6
 800cb2c:	f7ff f902 	bl	800bd34 <_malloc_r>
 800cb30:	b948      	cbnz	r0, 800cb46 <__smakebuf_r+0x46>
 800cb32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb36:	059a      	lsls	r2, r3, #22
 800cb38:	d4ee      	bmi.n	800cb18 <__smakebuf_r+0x18>
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	f043 0302 	orr.w	r3, r3, #2
 800cb42:	81a3      	strh	r3, [r4, #12]
 800cb44:	e7e2      	b.n	800cb0c <__smakebuf_r+0xc>
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	6020      	str	r0, [r4, #0]
 800cb4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb4e:	81a3      	strh	r3, [r4, #12]
 800cb50:	9b01      	ldr	r3, [sp, #4]
 800cb52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb56:	b15b      	cbz	r3, 800cb70 <__smakebuf_r+0x70>
 800cb58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f000 f82d 	bl	800cbbc <_isatty_r>
 800cb62:	b128      	cbz	r0, 800cb70 <__smakebuf_r+0x70>
 800cb64:	89a3      	ldrh	r3, [r4, #12]
 800cb66:	f023 0303 	bic.w	r3, r3, #3
 800cb6a:	f043 0301 	orr.w	r3, r3, #1
 800cb6e:	81a3      	strh	r3, [r4, #12]
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	431d      	orrs	r5, r3
 800cb74:	81a5      	strh	r5, [r4, #12]
 800cb76:	e7cf      	b.n	800cb18 <__smakebuf_r+0x18>

0800cb78 <_close_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	4d06      	ldr	r5, [pc, #24]	@ (800cb94 <_close_r+0x1c>)
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	4604      	mov	r4, r0
 800cb80:	4608      	mov	r0, r1
 800cb82:	602b      	str	r3, [r5, #0]
 800cb84:	f7f9 fced 	bl	8006562 <_close>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d102      	bne.n	800cb92 <_close_r+0x1a>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	b103      	cbz	r3, 800cb92 <_close_r+0x1a>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	20000f34 	.word	0x20000f34

0800cb98 <_fstat_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4d07      	ldr	r5, [pc, #28]	@ (800cbb8 <_fstat_r+0x20>)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4608      	mov	r0, r1
 800cba2:	4611      	mov	r1, r2
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	f7f9 fce8 	bl	800657a <_fstat>
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	d102      	bne.n	800cbb4 <_fstat_r+0x1c>
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	b103      	cbz	r3, 800cbb4 <_fstat_r+0x1c>
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	bd38      	pop	{r3, r4, r5, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20000f34 	.word	0x20000f34

0800cbbc <_isatty_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d06      	ldr	r5, [pc, #24]	@ (800cbd8 <_isatty_r+0x1c>)
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	602b      	str	r3, [r5, #0]
 800cbc8:	f7f9 fce7 	bl	800659a <_isatty>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d102      	bne.n	800cbd6 <_isatty_r+0x1a>
 800cbd0:	682b      	ldr	r3, [r5, #0]
 800cbd2:	b103      	cbz	r3, 800cbd6 <_isatty_r+0x1a>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	20000f34 	.word	0x20000f34

0800cbdc <_lseek_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	@ (800cbfc <_lseek_r+0x20>)
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	602a      	str	r2, [r5, #0]
 800cbea:	461a      	mov	r2, r3
 800cbec:	f7f9 fce0 	bl	80065b0 <_lseek>
 800cbf0:	1c43      	adds	r3, r0, #1
 800cbf2:	d102      	bne.n	800cbfa <_lseek_r+0x1e>
 800cbf4:	682b      	ldr	r3, [r5, #0]
 800cbf6:	b103      	cbz	r3, 800cbfa <_lseek_r+0x1e>
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	bd38      	pop	{r3, r4, r5, pc}
 800cbfc:	20000f34 	.word	0x20000f34

0800cc00 <_read_r>:
 800cc00:	b538      	push	{r3, r4, r5, lr}
 800cc02:	4d07      	ldr	r5, [pc, #28]	@ (800cc20 <_read_r+0x20>)
 800cc04:	4604      	mov	r4, r0
 800cc06:	4608      	mov	r0, r1
 800cc08:	4611      	mov	r1, r2
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	602a      	str	r2, [r5, #0]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	f7f9 fc6e 	bl	80064f0 <_read>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_read_r+0x1e>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_read_r+0x1e>
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20000f34 	.word	0x20000f34

0800cc24 <_write_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4d07      	ldr	r5, [pc, #28]	@ (800cc44 <_write_r+0x20>)
 800cc28:	4604      	mov	r4, r0
 800cc2a:	4608      	mov	r0, r1
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	2200      	movs	r2, #0
 800cc30:	602a      	str	r2, [r5, #0]
 800cc32:	461a      	mov	r2, r3
 800cc34:	f7f9 fc79 	bl	800652a <_write>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_write_r+0x1e>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_write_r+0x1e>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20000f34 	.word	0x20000f34

0800cc48 <_init>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr

0800cc54 <_fini>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	bf00      	nop
 800cc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5a:	bc08      	pop	{r3}
 800cc5c:	469e      	mov	lr, r3
 800cc5e:	4770      	bx	lr
