
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fee0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  08010080  08010080  00011080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106b4  080106b4  000125bc  2**0
                  CONTENTS
  4 .ARM          00000008  080106b4  080106b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106bc  080106bc  000125bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106bc  080106bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106c0  080106c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005bc  20000000  080106c4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d9c  200005bc  08010c80  000125bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001358  08010c80  00013358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000125bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000210f7  00000000  00000000  000125ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b1  00000000  00000000  000336e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001586  00000000  00000000  0003a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c696  00000000  00000000  0003ba16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002507c  00000000  00000000  000580ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3a7  00000000  00000000  0007d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b4cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ac0  00000000  00000000  0011b514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00122fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005bc 	.word	0x200005bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010068 	.word	0x08010068

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c0 	.word	0x200005c0
 80001dc:	08010068 	.word	0x08010068

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 800057a:	481f      	ldr	r0, [pc, #124]	@ (80005f8 <etx_ota_download_and_flash+0x88>)
 800057c:	f00e ffa0 	bl	800f4c0 <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <etx_ota_download_and_flash+0x8c>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <etx_ota_download_and_flash+0x90>)
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 800058c:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <etx_ota_download_and_flash+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 8000592:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <etx_ota_download_and_flash+0x98>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 8000598:	f240 4209 	movw	r2, #1033	@ 0x409
 800059c:	2100      	movs	r1, #0
 800059e:	481b      	ldr	r0, [pc, #108]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005a0:	f00e ffa6 	bl	800f4f0 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 80005a4:	f240 4109 	movw	r1, #1033	@ 0x409
 80005a8:	4818      	ldr	r0, [pc, #96]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005aa:	f000 f905 	bl	80007b8 <etx_receive_chunk>
 80005ae:	4603      	mov	r3, r0
 80005b0:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 80005b2:	88bb      	ldrh	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d007      	beq.n	80005c8 <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005b8:	88bb      	ldrh	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4813      	ldr	r0, [pc, #76]	@ (800060c <etx_ota_download_and_flash+0x9c>)
 80005be:	f000 f829 	bl	8000614 <etx_process_data>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
 80005c6:	e001      	b.n	80005cc <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 80005d2:	480f      	ldr	r0, [pc, #60]	@ (8000610 <etx_ota_download_and_flash+0xa0>)
 80005d4:	f00e ff74 	bl	800f4c0 <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f9a9 	bl	8000930 <etx_ota_send_resp>
      break;
 80005de:	e006      	b.n	80005ee <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f9a5 	bl	8000930 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <etx_ota_download_and_flash+0x98>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1d4      	bne.n	8000598 <etx_ota_download_and_flash+0x28>

  return ret;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08010080 	.word	0x08010080
 80005fc:	200009e4 	.word	0x200009e4
 8000600:	200009ec 	.word	0x200009ec
 8000604:	200009e8 	.word	0x200009e8
 8000608:	200009e1 	.word	0x200009e1
 800060c:	200005d8 	.word	0x200005d8
 8000610:	080100a0 	.word	0x080100a0

08000614 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000620:	2301      	movs	r3, #1
 8000622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2b00      	cmp	r3, #0
 800062a:	f000 80ad 	beq.w	8000788 <etx_process_data+0x174>
 800062e:	887b      	ldrh	r3, [r7, #2]
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 80a9 	beq.w	8000788 <etx_process_data+0x174>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	785b      	ldrb	r3, [r3, #1]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	2b02      	cmp	r3, #2
 8000648:	f000 8095 	beq.w	8000776 <etx_process_data+0x162>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 800064c:	4b51      	ldr	r3, [pc, #324]	@ (8000794 <etx_process_data+0x180>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b04      	cmp	r3, #4
 8000652:	f200 808c 	bhi.w	800076e <etx_process_data+0x15a>
 8000656:	a201      	add	r2, pc, #4	@ (adr r2, 800065c <etx_process_data+0x48>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	08000671 	.word	0x08000671
 8000660:	0800067f 	.word	0x0800067f
 8000664:	080006a7 	.word	0x080006a7
 8000668:	080006dd 	.word	0x080006dd
 800066c:	08000747 	.word	0x08000747
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <etx_process_data+0x184>)
 8000672:	f00e ff25 	bl	800f4c0 <puts>
        ret = ETX_OTA_EX_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800067c:	e084      	b.n	8000788 <etx_process_data+0x174>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d177      	bne.n	800077a <etx_process_data+0x166>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d173      	bne.n	800077a <etx_process_data+0x166>
          {
            printf("Received OTA START Command\r\n");
 8000692:	4842      	ldr	r0, [pc, #264]	@ (800079c <etx_process_data+0x188>)
 8000694:	f00e ff14 	bl	800f4c0 <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 8000698:	4b3e      	ldr	r3, [pc, #248]	@ (8000794 <etx_process_data+0x180>)
 800069a:	2202      	movs	r2, #2
 800069c:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 80006a4:	e069      	b.n	800077a <etx_process_data+0x166>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	785b      	ldrb	r3, [r3, #1]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d165      	bne.n	800077e <etx_process_data+0x16a>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4a3a      	ldr	r2, [pc, #232]	@ (80007a0 <etx_process_data+0x18c>)
 80006b8:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	4a39      	ldr	r2, [pc, #228]	@ (80007a4 <etx_process_data+0x190>)
 80006c0:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 80006c2:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <etx_process_data+0x18c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4619      	mov	r1, r3
 80006c8:	4837      	ldr	r0, [pc, #220]	@ (80007a8 <etx_process_data+0x194>)
 80006ca:	f00e fe91 	bl	800f3f0 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 80006ce:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <etx_process_data+0x180>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
      }
      break;
 80006da:	e050      	b.n	800077e <etx_process_data+0x16a>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	789a      	ldrb	r2, [r3, #2]
 80006e4:	78db      	ldrb	r3, [r3, #3]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	4313      	orrs	r3, r2
 80006ea:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	785b      	ldrb	r3, [r3, #1]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d146      	bne.n	8000782 <etx_process_data+0x16e>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf+4, data_len, ( ota_fw_received_size == 0) );
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1d18      	adds	r0, r3, #4
 80006f8:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <etx_process_data+0x198>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf0c      	ite	eq
 8000700:	2301      	moveq	r3, #1
 8000702:	2300      	movne	r3, #0
 8000704:	b2da      	uxtb	r2, r3
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	4619      	mov	r1, r3
 800070a:	f000 f937 	bl	800097c <write_data_to_flash_app>
 800070e:	4603      	mov	r3, r0
 8000710:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000712:	7d7b      	ldrb	r3, [r7, #21]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d134      	bne.n	8000782 <etx_process_data+0x16e>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <etx_process_data+0x198>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	0a99      	lsrs	r1, r3, #10
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <etx_process_data+0x18c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	0a9b      	lsrs	r3, r3, #10
 8000724:	461a      	mov	r2, r3
 8000726:	4822      	ldr	r0, [pc, #136]	@ (80007b0 <etx_process_data+0x19c>)
 8000728:	f00e fe62 	bl	800f3f0 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 800072c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <etx_process_data+0x198>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <etx_process_data+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d302      	bcc.n	800073e <etx_process_data+0x12a>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <etx_process_data+0x180>)
 800073a:	2204      	movs	r2, #4
 800073c:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 8000744:	e01d      	b.n	8000782 <etx_process_data+0x16e>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	785b      	ldrb	r3, [r3, #1]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d119      	bne.n	8000786 <etx_process_data+0x172>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	791b      	ldrb	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d115      	bne.n	8000786 <etx_process_data+0x172>
          {
            printf("Received OTA END Command\r\n");
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <etx_process_data+0x1a0>)
 800075c:	f00e feb0 	bl	800f4c0 <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <etx_process_data+0x180>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          }
        }
      }
      break;
 800076c:	e00b      	b.n	8000786 <etx_process_data+0x172>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000774:	e008      	b.n	8000788 <etx_process_data+0x174>
        break;
 8000776:	bf00      	nop
 8000778:	e006      	b.n	8000788 <etx_process_data+0x174>
      break;
 800077a:	bf00      	nop
 800077c:	e004      	b.n	8000788 <etx_process_data+0x174>
      break;
 800077e:	bf00      	nop
 8000780:	e002      	b.n	8000788 <etx_process_data+0x174>
      break;
 8000782:	bf00      	nop
 8000784:	e000      	b.n	8000788 <etx_process_data+0x174>
      break;
 8000786:	bf00      	nop
    };
  }while( false );

  return ret;
 8000788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800078c:	4618      	mov	r0, r3
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200009e1 	.word	0x200009e1
 8000798:	080100b0 	.word	0x080100b0
 800079c:	080100c8 	.word	0x080100c8
 80007a0:	200009e4 	.word	0x200009e4
 80007a4:	200009e8 	.word	0x200009e8
 80007a8:	080100e4 	.word	0x080100e4
 80007ac:	200009ec 	.word	0x200009ec
 80007b0:	0801010c 	.word	0x0801010c
 80007b4:	08010118 	.word	0x08010118

080007b8 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 80007c4:	2300      	movs	r3, #0
 80007c6:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80007c8:	89bb      	ldrh	r3, [r7, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	18d1      	adds	r1, r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	2201      	movs	r2, #1
 80007d4:	4854      	ldr	r0, [pc, #336]	@ (8000928 <etx_receive_chunk+0x170>)
 80007d6:	f00d fca4 	bl	800e122 <HAL_UART_Receive>
 80007da:	4603      	mov	r3, r0
 80007dc:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80007de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d17f      	bne.n	80008e6 <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 80007e6:	89bb      	ldrh	r3, [r7, #12]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	81ba      	strh	r2, [r7, #12]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2baa      	cmp	r3, #170	@ 0xaa
 80007f6:	d002      	beq.n	80007fe <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	81fb      	strh	r3, [r7, #14]
      break;
 80007fc:	e07c      	b.n	80008f8 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 80007fe:	89bb      	ldrh	r3, [r7, #12]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	81ba      	strh	r2, [r7, #12]
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1899      	adds	r1, r3, r2
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080e:	2201      	movs	r2, #1
 8000810:	4845      	ldr	r0, [pc, #276]	@ (8000928 <etx_receive_chunk+0x170>)
 8000812:	f00d fc86 	bl	800e122 <HAL_UART_Receive>
 8000816:	4603      	mov	r3, r0
 8000818:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800081a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d163      	bne.n	80008ea <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart2, &buf[index], 2, HAL_MAX_DELAY );
 8000822:	89bb      	ldrh	r3, [r7, #12]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	18d1      	adds	r1, r2, r3
 8000828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800082c:	2202      	movs	r2, #2
 800082e:	483e      	ldr	r0, [pc, #248]	@ (8000928 <etx_receive_chunk+0x170>)
 8000830:	f00d fc77 	bl	800e122 <HAL_UART_Receive>
 8000834:	4603      	mov	r3, r0
 8000836:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d156      	bne.n	80008ee <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	813b      	strh	r3, [r7, #8]
    index += 2u;
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	3302      	adds	r3, #2
 800084e:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000850:	2300      	movs	r3, #0
 8000852:	817b      	strh	r3, [r7, #10]
 8000854:	e014      	b.n	8000880 <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart2, &buf[index++], 1, HAL_MAX_DELAY );
 8000856:	89bb      	ldrh	r3, [r7, #12]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	81ba      	strh	r2, [r7, #12]
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1899      	adds	r1, r3, r2
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	2201      	movs	r2, #1
 8000868:	482f      	ldr	r0, [pc, #188]	@ (8000928 <etx_receive_chunk+0x170>)
 800086a:	f00d fc5a 	bl	800e122 <HAL_UART_Receive>
 800086e:	4603      	mov	r3, r0
 8000870:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 8000872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d107      	bne.n	800088a <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 800087a:	897b      	ldrh	r3, [r7, #10]
 800087c:	3301      	adds	r3, #1
 800087e:	817b      	strh	r3, [r7, #10]
 8000880:	897a      	ldrh	r2, [r7, #10]
 8000882:	893b      	ldrh	r3, [r7, #8]
 8000884:	429a      	cmp	r2, r3
 8000886:	d3e6      	bcc.n	8000856 <etx_receive_chunk+0x9e>
 8000888:	e000      	b.n	800088c <etx_receive_chunk+0xd4>
      {
        break;
 800088a:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart2, &buf[index], 4, HAL_MAX_DELAY );
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	18d1      	adds	r1, r2, r3
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	2204      	movs	r2, #4
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <etx_receive_chunk+0x170>)
 800089a:	f00d fc42 	bl	800e122 <HAL_UART_Receive>
 800089e:	4603      	mov	r3, r0
 80008a0:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d123      	bne.n	80008f2 <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart2, &buf[index], 1, HAL_MAX_DELAY );
 80008b0:	89bb      	ldrh	r3, [r7, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	18d1      	adds	r1, r2, r3
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ba:	2201      	movs	r2, #1
 80008bc:	481a      	ldr	r0, [pc, #104]	@ (8000928 <etx_receive_chunk+0x170>)
 80008be:	f00d fc30 	bl	800e122 <HAL_UART_Receive>
 80008c2:	4603      	mov	r3, r0
 80008c4:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d113      	bne.n	80008f6 <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 80008ce:	89bb      	ldrh	r3, [r7, #12]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	81ba      	strh	r2, [r7, #12]
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2bbb      	cmp	r3, #187	@ 0xbb
 80008de:	d00b      	beq.n	80008f8 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 80008e0:	2301      	movs	r3, #1
 80008e2:	81fb      	strh	r3, [r7, #14]
      break;
 80008e4:	e008      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008e6:	bf00      	nop
 80008e8:	e006      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008ea:	bf00      	nop
 80008ec:	e004      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008ee:	bf00      	nop
 80008f0:	e002      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008f2:	bf00      	nop
 80008f4:	e000      	b.n	80008f8 <etx_receive_chunk+0x140>
      break;
 80008f6:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 80008f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 8000900:	2300      	movs	r3, #0
 8000902:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 8000904:	887a      	ldrh	r2, [r7, #2]
 8000906:	89bb      	ldrh	r3, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800090c:	887b      	ldrh	r3, [r7, #2]
 800090e:	89ba      	ldrh	r2, [r7, #12]
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <etx_receive_chunk+0x174>)
 8000914:	f00e fd6c 	bl	800f3f0 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000918:	2300      	movs	r3, #0
 800091a:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 800091c:	89bb      	ldrh	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000a94 	.word	0x20000a94
 800092c:	08010134 	.word	0x08010134

08000930 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 800093a:	23aa      	movs	r3, #170	@ 0xaa
 800093c:	733b      	strb	r3, [r7, #12]
 800093e:	2303      	movs	r3, #3
 8000940:	737b      	strb	r3, [r7, #13]
 8000942:	2301      	movs	r3, #1
 8000944:	81fb      	strh	r3, [r7, #14]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	743b      	strb	r3, [r7, #16]
 800094a:	2300      	movs	r3, #0
 800094c:	747b      	strb	r3, [r7, #17]
 800094e:	2300      	movs	r3, #0
 8000950:	74bb      	strb	r3, [r7, #18]
 8000952:	2300      	movs	r3, #0
 8000954:	74fb      	strb	r3, [r7, #19]
 8000956:	2300      	movs	r3, #0
 8000958:	753b      	strb	r3, [r7, #20]
 800095a:	23bb      	movs	r3, #187	@ 0xbb
 800095c:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart2, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 800095e:	f107 010c 	add.w	r1, r7, #12
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000966:	220a      	movs	r2, #10
 8000968:	4803      	ldr	r0, [pc, #12]	@ (8000978 <etx_ota_send_resp+0x48>)
 800096a:	f00d fb4f 	bl	800e00c <HAL_UART_Transmit>
}
 800096e:	bf00      	nop
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000a94 	.word	0x20000a94

0800097c <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	807b      	strh	r3, [r7, #2]
 8000988:	4613      	mov	r3, r2
 800098a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 800098c:	f008 ff8e 	bl	80098ac <HAL_FLASH_Unlock>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800099a:	2b00      	cmp	r3, #0
 800099c:	d157      	bne.n	8000a4e <write_data_to_flash_app+0xd2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 800099e:	787b      	ldrb	r3, [r7, #1]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d019      	beq.n	80009d8 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 80009a4:	482f      	ldr	r0, [pc, #188]	@ (8000a64 <write_data_to_flash_app+0xe8>)
 80009a6:	f00e fd8b 	bl	800f4c0 <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80009ae:	2305      	movs	r3, #5
 80009b0:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 80009ba:	f107 0208 	add.w	r2, r7, #8
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f009 f8e3 	bl	8009b90 <HAL_FLASHEx_Erase>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if( ret != HAL_OK )
 80009d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13c      	bne.n	8000a52 <write_data_to_flash_app+0xd6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	e026      	b.n	8000a2c <write_data_to_flash_app+0xb0>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <write_data_to_flash_app+0xec>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 80009e6:	f501 3100 	add.w	r1, r1, #131072	@ 0x20000
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[i]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	461c      	mov	r4, r3
 80009f8:	4615      	mov	r5, r2
 80009fa:	4622      	mov	r2, r4
 80009fc:	462b      	mov	r3, r5
 80009fe:	2000      	movs	r0, #0
 8000a00:	f008 ff02 	bl	8009808 <HAL_FLASH_Program>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                             );
      if( ret == HAL_OK )
 8000a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d105      	bne.n	8000a1e <write_data_to_flash_app+0xa2>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a12:	4b15      	ldr	r3, [pc, #84]	@ (8000a68 <write_data_to_flash_app+0xec>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a13      	ldr	r2, [pc, #76]	@ (8000a68 <write_data_to_flash_app+0xec>)
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e003      	b.n	8000a26 <write_data_to_flash_app+0xaa>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a1e:	4813      	ldr	r0, [pc, #76]	@ (8000a6c <write_data_to_flash_app+0xf0>)
 8000a20:	f00e fd4e 	bl	800f4c0 <puts>
        break;
 8000a24:	e006      	b.n	8000a34 <write_data_to_flash_app+0xb8>
    for(int i = 0; i < data_len; i++ )
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
 8000a2c:	887b      	ldrh	r3, [r7, #2]
 8000a2e:	6a3a      	ldr	r2, [r7, #32]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbd4      	blt.n	80009de <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d10c      	bne.n	8000a56 <write_data_to_flash_app+0xda>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a3c:	f008 ff58 	bl	80098f0 <HAL_FLASH_Lock>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( ret != HAL_OK )
 8000a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	e004      	b.n	8000a58 <write_data_to_flash_app+0xdc>
      break;
 8000a4e:	bf00      	nop
 8000a50:	e002      	b.n	8000a58 <write_data_to_flash_app+0xdc>
        break;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <write_data_to_flash_app+0xdc>
      break;
 8000a56:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	08010178 	.word	0x08010178
 8000a68:	200009ec 	.word	0x200009ec
 8000a6c:	08010198 	.word	0x08010198

08000a70 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000a78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000a7c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	d027      	beq.n	8000ad8 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d818      	bhi.n	8000ad6 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	22b1      	movs	r2, #177	@ 0xb1
 8000aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f8f5 	bl	8000cac <ifx_i2c_init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2203      	movs	r2, #3
 8000ad0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 8000ad4:	e000      	b.n	8000ad8 <ifx_i2c_open+0x68>
                break;
 8000ad6:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b088      	sub	sp, #32
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4613      	mov	r3, r2
 8000af0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000af2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000af6:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d122      	bne.n	8000b48 <ifx_i2c_transceive+0x66>
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d01d      	beq.n	8000b48 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a3a      	ldr	r2, [r7, #32]
 8000b18:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 8000b1c:	88fa      	ldrh	r2, [r7, #6]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f001 fb00 	bl	800212c <ifx_i2c_prl_transceive>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000b30:	8afb      	ldrh	r3, [r7, #22]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d108      	bne.n	8000b48 <ifx_i2c_transceive+0x66>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2203      	movs	r2, #3
 8000b44:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000b48:	8afb      	ldrh	r3, [r7, #22]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000b5c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000b60:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d02a      	beq.n	8000bc2 <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000b76:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000b82:	4912      	ldr	r1, [pc, #72]	@ (8000bcc <ifx_i2c_close+0x78>)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f001 fa8f 	bl	80020a8 <ifx_i2c_prl_close>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000b94:	d115      	bne.n	8000bc2 <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 ff42 	bl	8006a26 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f005 fedc 	bl	8006966 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fed6 	bl	8006966 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	08000c39 	.word	0x08000c39

08000bd0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	460b      	mov	r3, r1
 8000bde:	817b      	strh	r3, [r7, #10]
 8000be0:	4613      	mov	r3, r2
 8000be2:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d008      	beq.n	8000c00 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000bf4:	68fa      	ldr	r2, [r7, #12]
 8000bf6:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000bfa:	8979      	ldrh	r1, [r7, #10]
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	897a      	ldrh	r2, [r7, #10]
 8000c04:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d107      	bne.n	8000c2a <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8000c1a:	897b      	ldrh	r3, [r7, #10]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d106      	bne.n	8000c2e <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2202      	movs	r2, #2
 8000c24:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000c28:	e001      	b.n	8000c2e <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8000c2a:	bf00      	nop
 8000c2c:	e000      	b.n	8000c30 <ifx_i2c_tl_event_handler+0x60>
            break;
 8000c2e:	bf00      	nop
    }
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	461a      	mov	r2, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	817b      	strh	r3, [r7, #10]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d112      	bne.n	8000c84 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000c64:	4618      	mov	r0, r3
 8000c66:	f005 fede 	bl	8006a26 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000c70:	4618      	mov	r0, r3
 8000c72:	f005 fe78 	bl	8006966 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fe72 	bl	8006966 <pal_gpio_set_low>
            break;
 8000c82:	e000      	b.n	8000c86 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000c84:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 8000c9c:	8979      	ldrh	r1, [r7, #10]
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	4798      	blx	r3
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 8000cb4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000cb8:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d004      	beq.n	8000cce <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d156      	bne.n	8000d7c <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000cd4:	2bb3      	cmp	r3, #179	@ 0xb3
 8000cd6:	d048      	beq.n	8000d6a <ifx_i2c_init+0xbe>
 8000cd8:	2bb3      	cmp	r3, #179	@ 0xb3
 8000cda:	dc4d      	bgt.n	8000d78 <ifx_i2c_init+0xcc>
 8000cdc:	2bb1      	cmp	r3, #177	@ 0xb1
 8000cde:	d002      	beq.n	8000ce6 <ifx_i2c_init+0x3a>
 8000ce0:	2bb2      	cmp	r3, #178	@ 0xb2
 8000ce2:	d021      	beq.n	8000d28 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 8000ce4:	e048      	b.n	8000d78 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d105      	bne.n	8000cfc <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 fe35 	bl	8006966 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000d02:	4618      	mov	r0, r3
 8000d04:	f005 fe2f 	bl	8006966 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	22b2      	movs	r2, #178	@ 0xb2
 8000d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000d16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4923      	ldr	r1, [pc, #140]	@ (8000dac <ifx_i2c_init+0x100>)
 8000d1e:	f006 f85b 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	81fb      	strh	r3, [r7, #14]
                break;
 8000d26:	e028      	b.n	8000d7a <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fe04 	bl	8006946 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000d44:	4618      	mov	r0, r3
 8000d46:	f005 fdfe 	bl	8006946 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	22b3      	movs	r2, #179	@ 0xb3
 8000d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000d58:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4913      	ldr	r1, [pc, #76]	@ (8000dac <ifx_i2c_init+0x100>)
 8000d60:	f006 f83a 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000d64:	2300      	movs	r3, #0
 8000d66:	81fb      	strh	r3, [r7, #14]
                break;
 8000d68:	e007      	b.n	8000d7a <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000d6a:	4911      	ldr	r1, [pc, #68]	@ (8000db0 <ifx_i2c_init+0x104>)
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f001 f953 	bl	8002018 <ifx_i2c_prl_init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	81fb      	strh	r3, [r7, #14]
                break;
 8000d76:	e000      	b.n	8000d7a <ifx_i2c_init+0xce>
                break;
 8000d78:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8000d7a:	e009      	b.n	8000d90 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000d84:	490a      	ldr	r1, [pc, #40]	@ (8000db0 <ifx_i2c_init+0x104>)
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f001 f946 	bl	8002018 <ifx_i2c_prl_init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 8000d96:	89f9      	ldrh	r1, [r7, #14]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff17 	bl	8000bd0 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 8000da2:	89fb      	ldrh	r3, [r7, #14]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	08000cad 	.word	0x08000cad
 8000db0:	08000bd1 	.word	0x08000bd1

08000db4 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 8000dc6:	4919      	ldr	r1, [pc, #100]	@ (8000e2c <ifx_i2c_dl_init+0x78>)
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 fc37 	bl	800163c <ifx_i2c_pl_init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8000dd4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000dd8:	e024      	b.n	8000e24 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	080011d1 	.word	0x080011d1

08000e30 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d102      	bne.n	8000e4c <ifx_i2c_dl_send_frame+0x1c>
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8000e4c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000e50:	e01a      	b.n	8000e88 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2202      	movs	r2, #2
 8000e56:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	887a      	ldrh	r2, [r7, #2]
 8000e6e:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	220a      	movs	r2, #10
 8000e76:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 8000e7a:	8879      	ldrh	r1, [r7, #2]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 f88a 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
 8000e86:	4603      	mov	r3, r0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d002      	beq.n	8000ea8 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8000ea2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000ea6:	e019      	b.n	8000edc <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000ec0:	f006 f83f 	bl	8006f42 <pal_os_timer_get_time_in_milliseconds>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <ifx_i2c_dl_receive_frame+0x54>)
 8000ed0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fc2a 	bl	800172e <ifx_i2c_pl_receive_frame>
 8000eda:	4603      	mov	r3, r0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	0002bf20 	.word	0x0002bf20

08000ee8 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8000ef8:	797b      	ldrb	r3, [r7, #5]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4053      	eors	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	4053      	eors	r3, r2
 8000f18:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000f20:	897b      	ldrh	r3, [r7, #10]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	893b      	ldrh	r3, [r7, #8]
 8000f28:	4053      	eors	r3, r2
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	89bb      	ldrh	r3, [r7, #12]
 8000f32:	4053      	eors	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	893b      	ldrh	r3, [r7, #8]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4053      	eors	r3, r2
 8000f48:	b29b      	uxth	r3, r3
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
 8000f6a:	e00d      	b.n	8000f88 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffb5 	bl	8000ee8 <ifx_i2c_dl_calc_crc_byte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	3301      	adds	r3, #1
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	89fa      	ldrh	r2, [r7, #14]
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ed      	bcc.n	8000f6c <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000f90:	89bb      	ldrh	r3, [r7, #12]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	460b      	mov	r3, r1
 8000fae:	707b      	strb	r3, [r7, #1]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000fba:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d107      	bne.n	8000fd2 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000fd8:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000fda:	787b      	ldrb	r3, [r7, #1]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d105      	bne.n	8000fec <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000fea:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <ifx_i2c_dl_send_frame_internal+0x6a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d103      	bne.n	8001004 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001002:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8001004:	8afb      	ldrh	r3, [r7, #22]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	787b      	ldrb	r3, [r7, #1]
 8001012:	015b      	lsls	r3, r3, #5
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d022      	beq.n	800106a <ifx_i2c_dl_send_frame_internal+0xd0>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8001024:	783b      	ldrb	r3, [r7, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <ifx_i2c_dl_send_frame_internal+0x9a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00a      	beq.n	800104a <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800103a:	3301      	adds	r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	b2da      	uxtb	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b2da      	uxtb	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 8001068:	e006      	b.n	8001078 <ifx_i2c_dl_send_frame_internal+0xde>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001072:	b2da      	uxtb	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	3301      	adds	r3, #1
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	3302      	adds	r3, #2
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	3303      	adds	r3, #3
 8001094:	b29b      	uxth	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	6938      	ldr	r0, [r7, #16]
 800109a:	f7ff ff5c 	bl	8000f56 <ifx_i2c_dl_calc_crc>
 800109e:	4603      	mov	r3, r0
 80010a0:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 80010a2:	89fb      	ldrh	r3, [r7, #14]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	3303      	adds	r3, #3
 80010ac:	4619      	mov	r1, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	440b      	add	r3, r1
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	3304      	adds	r3, #4
 80010ba:	461a      	mov	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	3305      	adds	r3, #5
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	6939      	ldr	r1, [r7, #16]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fb03 	bl	80016dc <ifx_i2c_pl_send_frame>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2205      	movs	r2, #5
 8001104:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8001108:	2300      	movs	r3, #0
 800110a:	2202      	movs	r2, #2
 800110c:	2100      	movs	r1, #0
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff43 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
 8001114:	4603      	mov	r3, r0
 8001116:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8001118:	89fb      	ldrh	r3, [r7, #14]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8001130:	f005 ff07 	bl	8006f42 <pal_os_timer_get_time_in_milliseconds>
 8001134:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	429a      	cmp	r2, r3
 800114c:	d205      	bcs.n	800115a <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <ifx_i2c_dl_resend_frame+0xa8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d82c      	bhi.n	80011bc <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001168:	2b03      	cmp	r3, #3
 800116a:	d109      	bne.n	8001180 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffb3 	bl	80010e0 <ifx_i2c_dl_resync>
 800117a:	4603      	mov	r3, r0
 800117c:	82fb      	strh	r3, [r7, #22]
 800117e:	e015      	b.n	80011ac <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2202      	movs	r2, #2
 8001194:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	2301      	movs	r3, #1
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fef9 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
 80011a8:	4603      	mov	r3, r0
 80011aa:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 80011ac:	8afb      	ldrh	r3, [r7, #22]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2206      	movs	r2, #6
 80011b6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 80011ba:	e003      	b.n	80011c4 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2208      	movs	r2, #8
 80011c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0002bf1f 	.word	0x0002bf1f

080011d0 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b089      	sub	sp, #36	@ 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	461a      	mov	r2, r3
 80011dc:	460b      	mov	r3, r1
 80011de:	817b      	strh	r3, [r7, #10]
 80011e0:	4613      	mov	r3, r2
 80011e2:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 800120e:	d108      	bne.n	8001222 <ifx_i2c_pl_event_handler+0x52>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001216:	2b01      	cmp	r3, #1
 8001218:	d003      	beq.n	8001222 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2208      	movs	r2, #8
 800121e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001228:	3b01      	subs	r3, #1
 800122a:	2b0a      	cmp	r3, #10
 800122c:	f200 81ed 	bhi.w	800160a <ifx_i2c_pl_event_handler+0x43a>
 8001230:	a201      	add	r2, pc, #4	@ (adr r2, 8001238 <ifx_i2c_pl_event_handler+0x68>)
 8001232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001236:	bf00      	nop
 8001238:	08001265 	.word	0x08001265
 800123c:	0800128b 	.word	0x0800128b
 8001240:	080012cd 	.word	0x080012cd
 8001244:	0800151f 	.word	0x0800151f
 8001248:	080015a1 	.word	0x080015a1
 800124c:	08001587 	.word	0x08001587
 8001250:	0800160b 	.word	0x0800160b
 8001254:	080015b9 	.word	0x080015b9
 8001258:	0800150b 	.word	0x0800150b
 800125c:	08001379 	.word	0x08001379
 8001260:	08001449 	.word	0x08001449
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <ifx_i2c_pl_event_handler+0x9e>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <ifx_i2c_pl_event_handler+0xa0>
 800126e:	2302      	movs	r3, #2
 8001270:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8001272:	2300      	movs	r3, #0
 8001274:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	b299      	uxth	r1, r3
 8001280:	2300      	movs	r3, #0
 8001282:	2200      	movs	r2, #0
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	47a0      	blx	r4
            }
            break;
 8001288:	e1cf      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 800128a:	897b      	ldrh	r3, [r7, #10]
 800128c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001290:	d104      	bne.n	800129c <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2205      	movs	r2, #5
 8001296:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800129a:	e1c6      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 800129c:	f005 fe51 	bl	8006f42 <pal_os_timer_get_time_in_milliseconds>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2203      	movs	r2, #3
 80012ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 fa3c 	bl	800172e <ifx_i2c_pl_receive_frame>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2206      	movs	r2, #6
 80012c0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 80012c4:	e1b1      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                    continue_state_machine = FALSE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	773b      	strb	r3, [r7, #28]
            break;
 80012ca:	e1ae      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80012d2:	d104      	bne.n	80012de <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2205      	movs	r2, #5
 80012d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80012dc:	e1a5      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 80012de:	893b      	ldrh	r3, [r7, #8]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d804      	bhi.n	80012ee <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2206      	movs	r2, #6
 80012e8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80012ec:	e19d      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 80012f4:	7d7b      	ldrb	r3, [r7, #21]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	115b      	asrs	r3, r3, #5
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8001306:	7d7b      	ldrb	r3, [r7, #21]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 800130e:	7d7b      	ldrb	r3, [r7, #21]
 8001310:	109b      	asrs	r3, r3, #2
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3302      	adds	r3, #2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b21b      	sxth	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b21b      	sxth	r3, r3
 8001330:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8001332:	893b      	ldrh	r3, [r7, #8]
 8001334:	3b02      	subs	r3, #2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21a      	sxth	r2, r3
 8001340:	893b      	ldrh	r3, [r7, #8]
 8001342:	3b01      	subs	r3, #1
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	440b      	add	r3, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8001352:	893b      	ldrh	r3, [r7, #8]
 8001354:	3b02      	subs	r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fdfb 	bl	8000f56 <ifx_i2c_dl_calc_crc>
 8001360:	4603      	mov	r3, r0
 8001362:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8001364:	7d3b      	ldrb	r3, [r7, #20]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <ifx_i2c_pl_event_handler+0x19e>
 800136a:	220b      	movs	r2, #11
 800136c:	e000      	b.n	8001370 <ifx_i2c_pl_event_handler+0x1a0>
 800136e:	220a      	movs	r2, #10
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8001376:	e158      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8001378:	8b3a      	ldrh	r2, [r7, #24]
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	429a      	cmp	r2, r3
 800137e:	d10d      	bne.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
 8001380:	8b7b      	ldrh	r3, [r7, #26]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00a      	beq.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001386:	893a      	ldrh	r2, [r7, #8]
 8001388:	8b7b      	ldrh	r3, [r7, #26]
 800138a:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 800138c:	429a      	cmp	r2, r3
 800138e:	d105      	bne.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8001390:	7f7b      	ldrb	r3, [r7, #29]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d002      	beq.n	800139c <ifx_i2c_pl_event_handler+0x1cc>
 8001396:	7f7b      	ldrb	r3, [r7, #29]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d104      	bne.n	80013a6 <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2206      	movs	r2, #6
 80013a0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013a4:	e141      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 80013a6:	7ffa      	ldrb	r2, [r7, #31]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80013ae:	3301      	adds	r3, #1
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d00c      	beq.n	80013d2 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2209      	movs	r2, #9
 80013bc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 80013c4:	2300      	movs	r3, #0
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fde5 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
                    break;
 80013d0:	e12b      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80013d8:	7fba      	ldrb	r2, [r7, #30]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d004      	beq.n	80013e8 <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2209      	movs	r2, #9
 80013e2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013e6:	e120      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80013e8:	7f7b      	ldrb	r3, [r7, #29]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d104      	bne.n	80013f8 <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80013f6:	e118      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80013fe:	3301      	adds	r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	b2da      	uxtb	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001414:	893a      	ldrh	r2, [r7, #8]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	f00e f8ae 	bl	800f57a <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	893a      	ldrh	r2, [r7, #8]
 8001422:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2204      	movs	r2, #4
 8001432:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001436:	2300      	movs	r3, #0
 8001438:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f7ff fdaa 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001446:	e0f0      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 800144e:	461a      	mov	r2, r3
 8001450:	7f7b      	ldrb	r3, [r7, #29]
 8001452:	2b02      	cmp	r3, #2
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	429a      	cmp	r2, r3
 800145e:	d004      	beq.n	800146a <ifx_i2c_pl_event_handler+0x29a>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2209      	movs	r2, #9
 8001464:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001468:	e0df      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (crc_received != crc_calculated)
 800146a:	8b3a      	ldrh	r2, [r7, #24]
 800146c:	8afb      	ldrh	r3, [r7, #22]
 800146e:	429a      	cmp	r2, r3
 8001470:	d004      	beq.n	800147c <ifx_i2c_pl_event_handler+0x2ac>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2205      	movs	r2, #5
 8001476:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800147a:	e0d6      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d802      	bhi.n	8001488 <ifx_i2c_pl_event_handler+0x2b8>
 8001482:	8b7b      	ldrh	r3, [r7, #26]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <ifx_i2c_pl_event_handler+0x2c2>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2209      	movs	r2, #9
 800148c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001490:	e0cb      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8001492:	7f7b      	ldrb	r3, [r7, #29]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d110      	bne.n	80014ba <ifx_i2c_pl_event_handler+0x2ea>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2209      	movs	r2, #9
 800149c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2203      	movs	r2, #3
 80014ac:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 80014b8:	e0b7      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d108      	bne.n	80014d2 <ifx_i2c_pl_event_handler+0x302>
 80014c0:	7f7b      	ldrb	r3, [r7, #29]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d005      	beq.n	80014d2 <ifx_i2c_pl_event_handler+0x302>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80014cc:	7fba      	ldrb	r2, [r7, #30]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d004      	beq.n	80014dc <ifx_i2c_pl_event_handler+0x30c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2209      	movs	r2, #9
 80014d6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80014da:	e0a6      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 80014dc:	7f7b      	ldrb	r3, [r7, #29]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d104      	bne.n	80014ec <ifx_i2c_pl_event_handler+0x31c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2205      	movs	r2, #5
 80014e6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80014ea:	e09e      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80014fe:	2300      	movs	r3, #0
 8001500:	2200      	movs	r2, #0
 8001502:	2102      	movs	r1, #2
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	47a0      	blx	r4
            }
            break;
 8001508:	e08f      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001512:	2300      	movs	r3, #0
 8001514:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 f909 	bl	800172e <ifx_i2c_pl_receive_frame>
            }
            break;
 800151c:	e085      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 800151e:	897b      	ldrh	r3, [r7, #10]
 8001520:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001524:	d104      	bne.n	8001530 <ifx_i2c_pl_event_handler+0x360>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2205      	movs	r2, #5
 800152a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800152e:	e07c      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001538:	2300      	movs	r3, #0
 800153a:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00f      	beq.n	8001566 <ifx_i2c_pl_event_handler+0x396>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001552:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800155a:	3b05      	subs	r3, #5
 800155c:	b29b      	uxth	r3, r3
 800155e:	2104      	movs	r1, #4
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001564:	e061      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001572:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800157a:	3b05      	subs	r3, #5
 800157c:	b29b      	uxth	r3, r3
 800157e:	2106      	movs	r1, #6
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	47a0      	blx	r4
            break;
 8001584:	e051      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 800158e:	2300      	movs	r3, #0
 8001590:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001592:	2300      	movs	r3, #0
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fcfe 	bl	8000f9a <ifx_i2c_dl_send_frame_internal>
            }
            break;
 800159e:	e044      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 80015a0:	2100      	movs	r1, #0
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff fdbe 	bl	8001124 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d03a      	beq.n	8001628 <ifx_i2c_pl_event_handler+0x458>
                {
                    continue_state_machine = FALSE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 80015b6:	e037      	b.n	8001628 <ifx_i2c_pl_event_handler+0x458>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <ifx_i2c_pl_event_handler+0x3fa>
                {
                    p_ctx->dl.error = 1;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10c      	bne.n	80015ee <ifx_i2c_pl_event_handler+0x41e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80015e2:	2300      	movs	r3, #0
 80015e4:	2200      	movs	r2, #0
 80015e6:	2101      	movs	r1, #1
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	47a0      	blx	r4
 80015ec:	e00a      	b.n	8001604 <ifx_i2c_pl_event_handler+0x434>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff fd76 	bl	80010e0 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2208      	movs	r2, #8
 80015f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 8001604:	2300      	movs	r3, #0
 8001606:	773b      	strb	r3, [r7, #28]
            }
            break;
 8001608:	e00f      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001618:	2300      	movs	r3, #0
 800161a:	2200      	movs	r2, #0
 800161c:	2101      	movs	r1, #1
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	47a0      	blx	r4
                continue_state_machine = FALSE;
 8001622:	2300      	movs	r3, #0
 8001624:	773b      	strb	r3, [r7, #28]
                break;
 8001626:	e000      	b.n	800162a <ifx_i2c_pl_event_handler+0x45a>
            break;
 8001628:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 800162a:	7f3b      	ldrb	r3, [r7, #28]
 800162c:	2b01      	cmp	r3, #1
 800162e:	f43f adeb 	beq.w	8001208 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	@ 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}

0800163c <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	22bb      	movs	r2, #187	@ 0xbb
 800165a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 800166a:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001672:	4a19      	ldr	r2, [pc, #100]	@ (80016d8 <ifx_i2c_pl_init+0x9c>)
 8001674:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	22c8      	movs	r2, #200	@ 0xc8
 800167a:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10b      	bne.n	80016a0 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800168e:	4618      	mov	r0, r3
 8001690:	f005 f9be 	bl	8006a10 <pal_i2c_init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 800169a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800169e:	e016      	b.n	80016ce <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2299      	movs	r2, #153	@ 0x99
 80016ae:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80016ba:	e003      	b.n	80016c4 <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80016c4:	2100      	movs	r1, #0
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fa84 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08001ebd 	.word	0x08001ebd

080016dc <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <ifx_i2c_pl_send_frame+0x28>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d002      	beq.n	8001704 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80016fe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001702:	e010      	b.n	8001726 <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800171c:	2100      	movs	r1, #0
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fa58 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800173c:	2b01      	cmp	r3, #1
 800173e:	d007      	beq.n	8001750 <ifx_i2c_pl_receive_frame+0x22>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001746:	2b02      	cmp	r3, #2
 8001748:	d002      	beq.n	8001750 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800174a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800174e:	e008      	b.n	8001762 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fa3a 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
 8001776:	4613      	mov	r3, r2
 8001778:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	883a      	ldrh	r2, [r7, #0]
 800178e:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	22c8      	movs	r2, #200	@ 0xc8
 800179e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80017bc:	461a      	mov	r2, r3
 80017be:	f005 f93d 	bl	8006a3c <pal_i2c_write>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	72fb      	strb	r3, [r7, #11]
 80017d8:	4613      	mov	r3, r2
 80017da:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	7afa      	ldrb	r2, [r7, #11]
 80017e0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80017ea:	3301      	adds	r3, #1
 80017ec:	893a      	ldrh	r2, [r7, #8]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fec2 	bl	800f57a <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80017f6:	893b      	ldrh	r3, [r7, #8]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	22c8      	movs	r2, #200	@ 0xc8
 800180e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800182c:	461a      	mov	r2, r3
 800182e:	f005 f905 	bl	8006a3c <pal_i2c_write>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001842:	2204      	movs	r2, #4
 8001844:	2182      	movs	r1, #130	@ 0x82
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff8f 	bl	800176a <ifx_i2c_pl_read_register>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f005 f958 	bl	8006b34 <pal_i2c_set_bitrate>
 8001884:	4603      	mov	r3, r0
 8001886:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d019      	beq.n	80018cc <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	b291      	uxth	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4908      	ldr	r1, [pc, #32]	@ (80018dc <ifx_i2c_pl_set_bit_rate+0x88>)
 80018ba:	f005 fa8d 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 80018be:	2301      	movs	r3, #1
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	e005      	b.n	80018d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 80018c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018c8:	81fb      	strh	r3, [r7, #14]
 80018ca:	e001      	b.n	80018d0 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 80018cc:	2300      	movs	r3, #0
 80018ce:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 80018d0:	89fb      	ldrh	r3, [r7, #14]

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	080018e1 	.word	0x080018e1

080018e0 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08b      	sub	sp, #44	@ 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80018e8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80018ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	733b      	strb	r3, [r7, #12]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001906:	b2db      	uxtb	r3, r3
 8001908:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800191e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001920:	d031      	beq.n	8001986 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 8001922:	2bbb      	cmp	r3, #187	@ 0xbb
 8001924:	f300 8145 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001928:	2baa      	cmp	r3, #170	@ 0xaa
 800192a:	f000 812d 	beq.w	8001b88 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 800192e:	2baa      	cmp	r3, #170	@ 0xaa
 8001930:	f300 813f 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001934:	2b88      	cmp	r3, #136	@ 0x88
 8001936:	f000 8103 	beq.w	8001b40 <ifx_i2c_pl_negotiation_event_handler+0x260>
 800193a:	2b88      	cmp	r3, #136	@ 0x88
 800193c:	f300 8139 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001940:	2b77      	cmp	r3, #119	@ 0x77
 8001942:	f000 80c6 	beq.w	8001ad2 <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8001946:	2b77      	cmp	r3, #119	@ 0x77
 8001948:	f300 8133 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800194c:	2b66      	cmp	r3, #102	@ 0x66
 800194e:	f000 809d 	beq.w	8001a8c <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 8001952:	2b66      	cmp	r3, #102	@ 0x66
 8001954:	f300 812d 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001958:	2b55      	cmp	r3, #85	@ 0x55
 800195a:	f000 808d 	beq.w	8001a78 <ifx_i2c_pl_negotiation_event_handler+0x198>
 800195e:	2b55      	cmp	r3, #85	@ 0x55
 8001960:	f300 8127 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001964:	2b44      	cmp	r3, #68	@ 0x44
 8001966:	d040      	beq.n	80019ea <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001968:	2b44      	cmp	r3, #68	@ 0x44
 800196a:	f300 8122 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800196e:	2b33      	cmp	r3, #51	@ 0x33
 8001970:	d031      	beq.n	80019d6 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 8001972:	2b33      	cmp	r3, #51	@ 0x33
 8001974:	f300 811d 	bgt.w	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001978:	2b11      	cmp	r3, #17
 800197a:	f000 80cb 	beq.w	8001b14 <ifx_i2c_pl_negotiation_event_handler+0x234>
 800197e:	2b22      	cmp	r3, #34	@ 0x22
 8001980:	f000 80d4 	beq.w	8001b2c <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8001984:	e115      	b.n	8001bb2 <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8001986:	2164      	movs	r1, #100	@ 0x64
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff63 	bl	8001854 <ifx_i2c_pl_set_bit_rate>
 800198e:	4603      	mov	r3, r0
 8001990:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001992:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2233      	movs	r2, #51	@ 0x33
 800199c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80019a6:	e106      	b.n	8001bb6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 80019a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80019aa:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80019ae:	f040 8102 	bne.w	8001bb6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	22aa      	movs	r2, #170	@ 0xaa
 80019b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80019c8:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4980      	ldr	r1, [pc, #512]	@ (8001bd0 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 80019d0:	f005 fa02 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
            break;
 80019d4:	e0ef      	b.n	8001bb6 <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2244      	movs	r2, #68	@ 0x44
 80019da:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80019de:	2204      	movs	r2, #4
 80019e0:	2184      	movs	r1, #132	@ 0x84
 80019e2:	69b8      	ldr	r0, [r7, #24]
 80019e4:	f7ff fec1 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 80019e8:	e0e8      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001a0c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a10:	d911      	bls.n	8001a36 <ifx_i2c_pl_negotiation_event_handler+0x156>
 8001a12:	8abb      	ldrh	r3, [r7, #20]
 8001a14:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a18:	d80d      	bhi.n	8001a36 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2255      	movs	r2, #85	@ 0x55
 8001a22:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	2189      	movs	r1, #137	@ 0x89
 8001a2e:	69b8      	ldr	r0, [r7, #24]
 8001a30:	f7ff fecb 	bl	80017ca <ifx_i2c_pl_write_register>
 8001a34:	e01f      	b.n	8001a76 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001a3c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a40:	d811      	bhi.n	8001a66 <ifx_i2c_pl_negotiation_event_handler+0x186>
 8001a42:	8abb      	ldrh	r3, [r7, #20]
 8001a44:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001a48:	d90d      	bls.n	8001a66 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2255      	movs	r2, #85	@ 0x55
 8001a52:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	2189      	movs	r1, #137	@ 0x89
 8001a5e:	69b8      	ldr	r0, [r7, #24]
 8001a60:	f7ff feb3 	bl	80017ca <ifx_i2c_pl_write_register>
 8001a64:	e007      	b.n	8001a76 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2266      	movs	r2, #102	@ 0x66
 8001a6a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001a74:	e0a2      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 8001a76:	e0a1      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2266      	movs	r2, #102	@ 0x66
 8001a7c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001a80:	2204      	movs	r2, #4
 8001a82:	2184      	movs	r1, #132	@ 0x84
 8001a84:	69b8      	ldr	r0, [r7, #24]
 8001a86:	f7ff fe70 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 8001a8a:	e097      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001aaa:	8aba      	ldrh	r2, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d208      	bcs.n	8001ac2 <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	22aa      	movs	r2, #170	@ 0xaa
 8001abc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001ac0:	e003      	b.n	8001aca <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2277      	movs	r2, #119	@ 0x77
 8001ac6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001ad0:	e074      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff feba 	bl	8001854 <ifx_i2c_pl_set_bit_rate>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 8001ae4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d107      	bne.n	8001afa <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2211      	movs	r2, #17
 8001aee:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001af8:	e05f      	b.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 8001afa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001afc:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001b00:	d15b      	bne.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	22aa      	movs	r2, #170	@ 0xaa
 8001b06:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001b12:	e052      	b.n	8001bba <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2222      	movs	r2, #34	@ 0x22
 8001b18:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2202      	movs	r2, #2
 8001b22:	2181      	movs	r1, #129	@ 0x81
 8001b24:	69b8      	ldr	r0, [r7, #24]
 8001b26:	f7ff fe50 	bl	80017ca <ifx_i2c_pl_write_register>
            break;
 8001b2a:	e047      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2288      	movs	r2, #136	@ 0x88
 8001b30:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 8001b34:	2202      	movs	r2, #2
 8001b36:	2181      	movs	r1, #129	@ 0x81
 8001b38:	69b8      	ldr	r0, [r7, #24]
 8001b3a:	f7ff fe16 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 8001b3e:	e03d      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	22aa      	movs	r2, #170	@ 0xaa
 8001b44:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21a      	sxth	r2, r3
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21b      	sxth	r3, r3
 8001b5e:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001b66:	8afa      	ldrh	r2, [r7, #22]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d805      	bhi.n	8001b78 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	8afa      	ldrh	r2, [r7, #22]
 8001b70:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 8001b74:	2300      	movs	r3, #0
 8001b76:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001b86:	e019      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001b88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001b96:	e003      	b.n	8001ba0 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001ba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ba8:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	69b8      	ldr	r0, [r7, #24]
 8001bae:	47a0      	blx	r4
            break;
 8001bb0:	e004      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 8001bb2:	bf00      	nop
 8001bb4:	e002      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001bba:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001bbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f47f aea6 	bne.w	8001912 <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	372c      	adds	r7, #44	@ 0x2c
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	080018e1 	.word	0x080018e1

08001bd4 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001bf4:	8879      	ldrh	r1, [r7, #2]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 8001bfe:	e0f0      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001c06:	3b01      	subs	r3, #1
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	f200 80dc 	bhi.w	8001dc6 <ifx_i2c_pl_frame_event_handler+0x1f2>
 8001c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <ifx_i2c_pl_frame_event_handler+0x40>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c31 	.word	0x08001c31
 8001c18:	08001c39 	.word	0x08001c39
 8001c1c:	08001c57 	.word	0x08001c57
 8001c20:	08001da5 	.word	0x08001da5
 8001c24:	08001c29 	.word	0x08001c29
                ifx_i2c_pl_soft_reset(p_ctx);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f983 	bl	8001f34 <ifx_i2c_pl_soft_reset>
            break;
 8001c2e:	e0d8      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fe55 	bl	80018e0 <ifx_i2c_pl_negotiation_event_handler>
            break;
 8001c36:	e0d4      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d105      	bne.n	8001c56 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	2182      	movs	r1, #130	@ 0x82
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fd8b 	bl	800176a <ifx_i2c_pl_read_register>
                    break;
 8001c54:	e0c5      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d159      	bne.n	8001d14 <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d052      	beq.n	8001d14 <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001c86:	8a7b      	ldrh	r3, [r7, #18]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <ifx_i2c_pl_frame_event_handler+0xda>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8001c92:	8a7a      	ldrh	r2, [r7, #18]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d80a      	bhi.n	8001cae <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001ca0:	8a7b      	ldrh	r3, [r7, #18]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2180      	movs	r1, #128	@ 0x80
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fd5f 	bl	800176a <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001cac:	e079      	b.n	8001da2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001cae:	f005 f948 	bl	8006f42 <pal_os_timer_get_time_in_milliseconds>
 8001cb2:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d205      	bcs.n	8001cd8 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d209      	bcs.n	8001cf8 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001cea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	493e      	ldr	r1, [pc, #248]	@ (8001dec <ifx_i2c_pl_frame_event_handler+0x218>)
 8001cf2:	f005 f871 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001cf6:	e054      	b.n	8001da2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d06:	2300      	movs	r3, #0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001d12:	e046      	b.n	8001da2 <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d10e      	bne.n	8001d3c <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 8001d32:	2180      	movs	r1, #128	@ 0x80
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fd48 	bl	80017ca <ifx_i2c_pl_write_register>
            break;
 8001d3a:	e052      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001d3c:	f005 f901 	bl	8006f42 <pal_os_timer_get_time_in_milliseconds>
 8001d40:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d205      	bcs.n	8001d66 <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d209      	bcs.n	8001d86 <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001d78:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <ifx_i2c_pl_frame_event_handler+0x218>)
 8001d80:	f005 f82a 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
            break;
 8001d84:	e02d      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001d94:	2300      	movs	r3, #0
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	47a0      	blx	r4
            break;
 8001da0:	e01f      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
 8001da2:	e01e      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	47a0      	blx	r4
            break;
 8001dc4:	e00d      	b.n	8001de2 <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	47a0      	blx	r4
            break;
 8001de0:	bf00      	nop
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	0800183b 	.word	0x0800183b

08001df0 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10c      	bne.n	8001e20 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f004 fe0f 	bl	8006a3c <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 8001e1e:	e010      	b.n	8001e42 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d10b      	bne.n	8001e42 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f004 fe3b 	bl	8006ab8 <pal_i2c_read>
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d11f      	bne.n	8001ea0 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d110      	bne.n	8001e8c <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001e84:	461a      	mov	r2, r3
 8001e86:	f004 fe17 	bl	8006ab8 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8001e8a:	e012      	b.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d10d      	bne.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001e96:	2100      	movs	r1, #0
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fe9b 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
}
 8001e9e:	e008      	b.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d103      	bne.n	8001eb2 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe91 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60fb      	str	r3, [r7, #12]
    switch (event)
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01e      	beq.n	8001f10 <ifx_i2c_pl_pal_event_handler+0x54>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db25      	blt.n	8001f22 <ifx_i2c_pl_pal_event_handler+0x66>
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d822      	bhi.n	8001f22 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001ee2:	1e5a      	subs	r2, r3, #1
 8001ee4:	b291      	uxth	r1, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	490b      	ldr	r1, [pc, #44]	@ (8001f2c <ifx_i2c_pl_pal_event_handler+0x70>)
 8001efe:	f004 ff6b 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001f02:	e00f      	b.n	8001f24 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001f04:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff fe63 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001f0e:	e009      	b.n	8001f24 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001f16:	2332      	movs	r3, #50	@ 0x32
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4905      	ldr	r1, [pc, #20]	@ (8001f30 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001f1c:	f004 ff5c 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001f20:	e000      	b.n	8001f24 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001f22:	bf00      	nop
    }
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	08001df1 	.word	0x08001df1
 8001f30:	08001e4b 	.word	0x08001e4b

08001f34 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001f46:	3b99      	subs	r3, #153	@ 0x99
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d85e      	bhi.n	800200a <ifx_i2c_pl_soft_reset+0xd6>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <ifx_i2c_pl_soft_reset+0x20>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	0800200b 	.word	0x0800200b
 8001f5c:	0800200b 	.word	0x0800200b
 8001f60:	0800200b 	.word	0x0800200b
 8001f64:	0800200b 	.word	0x0800200b
 8001f68:	0800200b 	.word	0x0800200b
 8001f6c:	0800200b 	.word	0x0800200b
 8001f70:	0800200b 	.word	0x0800200b
 8001f74:	08001ff9 	.word	0x08001ff9
 8001f78:	08001f95 	.word	0x08001f95
 8001f7c:	08001fdd 	.word	0x08001fdd
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	22a2      	movs	r2, #162	@ 0xa2
 8001f84:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001f88:	2204      	movs	r2, #4
 8001f8a:	2182      	movs	r1, #130	@ 0x82
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fbec 	bl	800176a <ifx_i2c_pl_read_register>
            break;
 8001f92:	e03b      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d10b      	bne.n	8001fc8 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	22a3      	movs	r2, #163	@ 0xa3
 8001fb4:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	2188      	movs	r1, #136	@ 0x88
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fc02 	bl	80017ca <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001fc6:	e021      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001fd0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff fdfd 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
            break;
 8001fda:	e017      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	22a1      	movs	r2, #161	@ 0xa1
 8001fe0:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001fea:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4908      	ldr	r1, [pc, #32]	@ (8002014 <ifx_i2c_pl_soft_reset+0xe0>)
 8001ff2:	f004 fef1 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001ff6:	e009      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8002000:	2100      	movs	r1, #0
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fde6 	bl	8001bd4 <ifx_i2c_pl_frame_event_handler>
            break;
 8002008:	e000      	b.n	800200c <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 800200a:	bf00      	nop
    }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	08001f35 	.word	0x08001f35

08002018 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002022:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002026:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8002030:	491c      	ldr	r1, [pc, #112]	@ (80020a4 <ifx_i2c_prl_init+0x8c>)
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f001 faa0 	bl	8003578 <ifx_i2c_tl_init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d12b      	bne.n	8002096 <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800204a:	2b11      	cmp	r3, #17
 800204c:	d104      	bne.n	8002058 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8002056:	e003      	b.n	8002060 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2211      	movs	r2, #17
 8002084:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2211      	movs	r2, #17
 800208c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8002090:	2300      	movs	r3, #0
 8002092:	81fb      	strh	r3, [r7, #14]
 8002094:	e000      	b.n	8002098 <ifx_i2c_prl_init+0x80>
            break;
 8002096:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8002098:	89fb      	ldrh	r3, [r7, #14]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	08002c21 	.word	0x08002c21

080020a8 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80020b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80020b6:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d12e      	bne.n	8002120 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 80020ce:	2b33      	cmp	r3, #51	@ 0x33
 80020d0:	d109      	bne.n	80020e6 <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80020d6:	2300      	movs	r3, #0
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 80020e0:	2300      	movs	r3, #0
 80020e2:	81fb      	strh	r3, [r7, #14]
            break;
 80020e4:	e01d      	b.n	8002122 <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d118      	bne.n	8002122 <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 80020f6:	2b22      	cmp	r3, #34	@ 0x22
 80020f8:	d113      	bne.n	8002122 <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2208      	movs	r2, #8
 80020fe:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8002110:	2301      	movs	r3, #1
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fd83 	bl	8002c20 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 800211a:	2300      	movs	r3, #0
 800211c:	81fb      	strh	r3, [r7, #14]
            break;
 800211e:	e000      	b.n	8002122 <ifx_i2c_prl_close+0x7a>
            break;
 8002120:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8002122:	89fb      	ldrh	r3, [r7, #14]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bd90      	pop	{r4, r7, pc}

0800212c <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800213c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002140:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d05a      	beq.n	80021fe <ifx_i2c_prl_transceive+0xd2>
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d057      	beq.n	80021fe <ifx_i2c_prl_transceive+0xd2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002154:	2b01      	cmp	r3, #1
 8002156:	d152      	bne.n	80021fe <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800215e:	2b11      	cmp	r3, #17
 8002160:	d10d      	bne.n	800217e <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8002168:	2b00      	cmp	r3, #0
 800216a:	d108      	bne.n	800217e <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2208      	movs	r2, #8
 8002170:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 800217c:	e003      	b.n	8002186 <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	88fa      	ldrh	r2, [r7, #6]
 8002190:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d006      	beq.n	80021b0 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80021a8:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d103      	bne.n	80021b8 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80021b6:	e003      	b.n	80021c0 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	1d1a      	adds	r2, r3, #4
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a3a      	ldr	r2, [r7, #32]
 80021c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2211      	movs	r2, #17
 80021ea:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	2100      	movs	r1, #0
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fd13 	bl	8002c20 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 80021fa:	2300      	movs	r3, #0
 80021fc:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 80021fe:	8afb      	ldrh	r3, [r7, #22]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b09e      	sub	sp, #120	@ 0x78
 800220c:	af06      	add	r7, sp, #24
 800220e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002210:	f240 1307 	movw	r3, #263	@ 0x107
 8002214:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <ifx_i2c_prl_prf+0xa4>)
 800221a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 800221e:	461d      	mov	r5, r3
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	682b      	ldr	r3, [r5, #0]
 8002226:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	f107 020a 	add.w	r2, r7, #10
 8002234:	f107 010c 	add.w	r1, r7, #12
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fd07 	bl	8006c4c <pal_os_datastore_read>
 800223e:	4603      	mov	r3, r0
 8002240:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8002244:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 800224c:	f240 1307 	movw	r3, #263	@ 0x107
 8002250:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8002254:	e024      	b.n	80022a0 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002256:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8002260:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8002264:	f107 010c 	add.w	r1, r7, #12
 8002268:	2528      	movs	r5, #40	@ 0x28
 800226a:	9504      	str	r5, [sp, #16]
 800226c:	9203      	str	r2, [sp, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	9202      	str	r2, [sp, #8]
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2310      	movs	r3, #16
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4623      	mov	r3, r4
 800227a:	4602      	mov	r2, r0
 800227c:	2000      	movs	r0, #0
 800227e:	f004 fafa 	bl	8006876 <pal_crypt_tls_prf_sha256>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002288:	f240 1307 	movw	r3, #263	@ 0x107
 800228c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	461a      	mov	r2, r3
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f00d f928 	bl	800f4f0 <memset>

    } while (FALSE);
    return (return_status);
 80022a0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3760      	adds	r7, #96	@ 0x60
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}
 80022ac:	080101ac 	.word	0x080101ac

080022b0 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	460b      	mov	r3, r1
 80022be:	817b      	strh	r3, [r7, #10]
 80022c0:	4613      	mov	r3, r2
 80022c2:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	7a7a      	ldrb	r2, [r7, #9]
 80022c8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	33a1      	adds	r3, #161	@ 0xa1
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f004 f92e 	bl	8006534 <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	33a6      	adds	r3, #166	@ 0xa6
 80022e8:	897a      	ldrh	r2, [r7, #10]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 f90a 	bl	8006506 <optiga_common_set_uint16>
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b08e      	sub	sp, #56	@ 0x38
 80022fe:	af06      	add	r7, sp, #24
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800230a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800230e:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8002310:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002314:	88f9      	ldrh	r1, [r7, #6]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff ffc9 	bl	80022b0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3378      	adds	r3, #120	@ 0x78
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	3304      	adds	r3, #4
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f004 f900 	bl	8006534 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 800233e:	88f9      	ldrh	r1, [r7, #6]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	9205      	str	r2, [sp, #20]
 8002344:	2208      	movs	r2, #8
 8002346:	9204      	str	r2, [sp, #16]
 8002348:	2208      	movs	r2, #8
 800234a:	9203      	str	r2, [sp, #12]
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2308      	movs	r3, #8
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	4603      	mov	r3, r0
 800235a:	460a      	mov	r2, r1
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	2000      	movs	r0, #0
 8002360:	f004 faaf 	bl	80068c2 <pal_crypt_encrypt_aes128_ccm>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 800236a:	2300      	movs	r3, #0
 800236c:	83fb      	strh	r3, [r7, #30]
 800236e:	e000      	b.n	8002372 <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8002370:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002372:	8bfb      	ldrh	r3, [r7, #30]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af06      	add	r7, sp, #24
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800238c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002390:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8002392:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002396:	88f9      	ldrh	r1, [r7, #6]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ff88 	bl	80022b0 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 80023a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023a4:	3358      	adds	r3, #88	@ 0x58
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	3304      	adds	r3, #4
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 f8bc 	bl	8006534 <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	3308      	adds	r3, #8
 80023c0:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 80023c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023c6:	3358      	adds	r3, #88	@ 0x58
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 80023d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023d2:	9205      	str	r2, [sp, #20]
 80023d4:	2208      	movs	r2, #8
 80023d6:	9204      	str	r2, [sp, #16]
 80023d8:	2208      	movs	r2, #8
 80023da:	9203      	str	r2, [sp, #12]
 80023dc:	9302      	str	r3, [sp, #8]
 80023de:	2308      	movs	r3, #8
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4603      	mov	r3, r0
 80023ea:	460a      	mov	r2, r1
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	2000      	movs	r0, #0
 80023f0:	f004 fa88 	bl	8006904 <pal_crypt_decrypt_aes128_ccm>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 80023fa:	2300      	movs	r3, #0
 80023fc:	83fb      	strh	r3, [r7, #30]
 80023fe:	e000      	b.n	8002402 <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8002400:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002402:	8bfb      	ldrh	r3, [r7, #30]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8002414:	2300      	movs	r3, #0
 8002416:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002426:	2b04      	cmp	r3, #4
 8002428:	d134      	bne.n	8002494 <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8002430:	3301      	adds	r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002454:	b2da      	uxtb	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3354      	adds	r3, #84	@ 0x54
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	2201      	movs	r2, #1
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f001 f8a9 	bl	80035d4 <ifx_i2c_tl_transceive>
 8002482:	4603      	mov	r3, r0
 8002484:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e00d      	b.n	80024b0 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800249a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	22ff      	movs	r2, #255	@ 0xff
 80024aa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 80024ae:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 80024b0:	89fb      	ldrh	r3, [r7, #14]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b08a      	sub	sp, #40	@ 0x28
 80024be:	af04      	add	r7, sp, #16
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80024c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80024c8:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 80024d4:	2b55      	cmp	r3, #85	@ 0x55
 80024d6:	f000 8178 	beq.w	80027ca <ifx_i2c_prl_do_handshake+0x310>
 80024da:	2b55      	cmp	r3, #85	@ 0x55
 80024dc:	f300 817f 	bgt.w	80027de <ifx_i2c_prl_do_handshake+0x324>
 80024e0:	2b44      	cmp	r3, #68	@ 0x44
 80024e2:	f000 8100 	beq.w	80026e6 <ifx_i2c_prl_do_handshake+0x22c>
 80024e6:	2b44      	cmp	r3, #68	@ 0x44
 80024e8:	f300 8179 	bgt.w	80027de <ifx_i2c_prl_do_handshake+0x324>
 80024ec:	2b33      	cmp	r3, #51	@ 0x33
 80024ee:	f000 8095 	beq.w	800261c <ifx_i2c_prl_do_handshake+0x162>
 80024f2:	2b33      	cmp	r3, #51	@ 0x33
 80024f4:	f300 8173 	bgt.w	80027de <ifx_i2c_prl_do_handshake+0x324>
 80024f8:	2b11      	cmp	r3, #17
 80024fa:	d002      	beq.n	8002502 <ifx_i2c_prl_do_handshake+0x48>
 80024fc:	2b22      	cmp	r3, #34	@ 0x22
 80024fe:	d034      	beq.n	800256a <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 8002500:	e16d      	b.n	80027de <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2226      	movs	r2, #38	@ 0x26
 8002526:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3354      	adds	r3, #84	@ 0x54
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	2202      	movs	r2, #2
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f001 f847 	bl	80035d4 <ifx_i2c_tl_transceive>
 8002546:	4603      	mov	r3, r0
 8002548:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800254a:	8afb      	ldrh	r3, [r7, #22]
 800254c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002550:	d106      	bne.n	8002560 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2255      	movs	r2, #85	@ 0x55
 8002556:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800255a:	2301      	movs	r3, #1
 800255c:	613b      	str	r3, [r7, #16]
                    break;
 800255e:	e13f      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2222      	movs	r2, #34	@ 0x22
 8002564:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002568:	e13a      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 800256a:	2301      	movs	r3, #1
 800256c:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00e      	beq.n	80025a4 <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 800258c:	2b01      	cmp	r3, #1
 800258e:	d109      	bne.n	80025a4 <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002590:	f240 1307 	movw	r3, #263	@ 0x107
 8002594:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	22ff      	movs	r2, #255	@ 0xff
 800259a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
                    break;
 80025a2:	e11d      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80025aa:	2b26      	cmp	r3, #38	@ 0x26
 80025ac:	d108      	bne.n	80025c0 <ifx_i2c_prl_do_handshake+0x106>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d004      	beq.n	80025ca <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2255      	movs	r2, #85	@ 0x55
 80025c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80025c8:	e10a      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3322      	adds	r3, #34	@ 0x22
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 ffd1 	bl	8006576 <optiga_common_get_uint32>
 80025d4:	4602      	mov	r2, r0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3302      	adds	r3, #2
 80025ec:	2220      	movs	r2, #32
 80025ee:	4619      	mov	r1, r3
 80025f0:	f00c ffc3 	bl	800f57a <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fe07 	bl	8002208 <ifx_i2c_prl_prf>
 80025fa:	4603      	mov	r3, r0
 80025fc:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80025fe:	8afb      	ldrh	r3, [r7, #22]
 8002600:	f240 1207 	movw	r2, #263	@ 0x107
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2255      	movs	r2, #85	@ 0x55
 800260c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002610:	e0e6      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2233      	movs	r2, #51	@ 0x33
 8002616:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 800261a:	e0e1      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2208      	movs	r2, #8
 8002620:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3380      	adds	r3, #128	@ 0x80
 8002632:	2220      	movs	r2, #32
 8002634:	4619      	mov	r1, r3
 8002636:	f00c ffa0 	bl	800f57a <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f003 ff74 	bl	8006534 <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4613      	mov	r3, r2
 8002660:	2224      	movs	r2, #36	@ 0x24
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe49 	bl	80022fa <ifx_i2c_prl_encrypt_msg>
 8002668:	4603      	mov	r3, r0
 800266a:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800266c:	8afb      	ldrh	r3, [r7, #22]
 800266e:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002672:	d106      	bne.n	8002682 <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2255      	movs	r2, #85	@ 0x55
 8002678:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
                    break;
 8002680:	e0ae      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f003 ff4a 	bl	8006534 <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2231      	movs	r2, #49	@ 0x31
 80026a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3354      	adds	r3, #84	@ 0x54
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	4613      	mov	r3, r2
 80026bc:	2231      	movs	r2, #49	@ 0x31
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 ff88 	bl	80035d4 <ifx_i2c_tl_transceive>
 80026c4:	4603      	mov	r3, r0
 80026c6:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80026c8:	8afb      	ldrh	r3, [r7, #22]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2255      	movs	r2, #85	@ 0x55
 80026d2:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
                    break;
 80026da:	e081      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2244      	movs	r2, #68	@ 0x44
 80026e0:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80026e4:	e07c      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d104      	bne.n	80026f8 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80026f4:	2b31      	cmp	r3, #49	@ 0x31
 80026f6:	d006      	beq.n	8002706 <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2255      	movs	r2, #85	@ 0x55
 80026fc:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
                    break;
 8002704:	e06c      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	4618      	mov	r0, r3
 800270c:	f003 ff33 	bl	8006576 <optiga_common_get_uint32>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	1d59      	adds	r1, r3, #5
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002728:	9203      	str	r2, [sp, #12]
 800272a:	2224      	movs	r2, #36	@ 0x24
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	2210      	movs	r2, #16
 8002730:	9201      	str	r2, [sp, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4603      	mov	r3, r0
 8002736:	2224      	movs	r2, #36	@ 0x24
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fe1f 	bl	800237c <ifx_i2c_prl_decrypt_msg>
 800273e:	4603      	mov	r3, r0
 8002740:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002748:	d106      	bne.n	8002758 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2255      	movs	r2, #85	@ 0x55
 800274e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002752:	2301      	movs	r3, #1
 8002754:	613b      	str	r3, [r7, #16]
                    break;
 8002756:	e043      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fee6 	bl	8006534 <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	33a8      	adds	r3, #168	@ 0xa8
 8002772:	2220      	movs	r2, #32
 8002774:	4619      	mov	r1, r3
 8002776:	f00c feab 	bl	800f4d0 <memcmp>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002780:	f240 1307 	movw	r3, #263	@ 0x107
 8002784:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2255      	movs	r2, #85	@ 0x55
 800278a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800278e:	2301      	movs	r3, #1
 8002790:	613b      	str	r3, [r7, #16]
                    break;
 8002792:	e025      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2204      	movs	r2, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00c fe95 	bl	800f4d0 <memcmp>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 80027ac:	f240 1307 	movw	r3, #263	@ 0x107
 80027b0:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2255      	movs	r2, #85	@ 0x55
 80027b6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80027ba:	2301      	movs	r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
                    break;
 80027be:	e00f      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80027c8:	e00a      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 80027ca:	f240 1307 	movw	r3, #263	@ 0x107
 80027ce:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	613b      	str	r3, [r7, #16]
            break;
 80027dc:	e000      	b.n	80027e0 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80027de:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f43f ae73 	beq.w	80024ce <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80027e8:	8afb      	ldrh	r3, [r7, #22]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b094      	sub	sp, #80	@ 0x50
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002802:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002806:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 8002810:	2b01      	cmp	r3, #1
 8002812:	d003      	beq.n	800281c <ifx_i2c_prl_do_manage_context+0x2a>
 8002814:	2b02      	cmp	r3, #2
 8002816:	f000 80eb 	beq.w	80029f0 <ifx_i2c_prl_do_manage_context+0x1fe>
 800281a:	e1df      	b.n	8002bdc <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002822:	b25b      	sxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	da07      	bge.n	8002838 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 8002830:	2300      	movs	r3, #0
 8002832:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002836:	e1ed      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800283e:	2b22      	cmp	r3, #34	@ 0x22
 8002840:	d10c      	bne.n	800285c <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2260      	movs	r2, #96	@ 0x60
 8002846:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800285a:	e0a6      	b.n	80029aa <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002862:	2b11      	cmp	r3, #17
 8002864:	f040 8093 	bne.w	800298e <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800286e:	885b      	ldrh	r3, [r3, #2]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d033      	beq.n	80028dc <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2234      	movs	r2, #52	@ 0x34
 8002878:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002882:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002884:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3354      	adds	r3, #84	@ 0x54
 800288a:	461a      	mov	r2, r3
 800288c:	f004 f9de 	bl	8006c4c <pal_os_datastore_read>
 8002890:	4603      	mov	r3, r0
 8002892:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 8002896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800289a:	2b01      	cmp	r3, #1
 800289c:	f000 81b7 	beq.w	8002c0e <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d130      	bne.n	8002918 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80028da:	e19b      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d112      	bne.n	800290c <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 8002904:	2300      	movs	r3, #0
 8002906:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 800290a:	e183      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2268      	movs	r2, #104	@ 0x68
 800291c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f003 fe01 	bl	8006534 <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2205      	movs	r2, #5
 8002936:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2205      	movs	r2, #5
 8002944:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002956:	885b      	ldrh	r3, [r3, #2]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d026      	beq.n	80029aa <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 800295c:	f107 0310 	add.w	r3, r7, #16
 8002960:	2234      	movs	r2, #52	@ 0x34
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f00c fdc3 	bl	800f4f0 <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002970:	885b      	ldrh	r3, [r3, #2]
 8002972:	f107 0110 	add.w	r1, r7, #16
 8002976:	2234      	movs	r2, #52	@ 0x34
 8002978:	4618      	mov	r0, r3
 800297a:	f004 f8e9 	bl	8006b50 <pal_os_datastore_write>
 800297e:	4603      	mov	r3, r0
 8002980:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 8002984:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10e      	bne.n	80029aa <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 800298c:	e142      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	22ff      	movs	r2, #255	@ 0xff
 8002992:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2207      	movs	r2, #7
 800299a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80029a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 80029a8:	e134      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3354      	adds	r3, #84	@ 0x54
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	4603      	mov	r3, r0
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fe05 	bl	80035d4 <ifx_i2c_tl_transceive>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 80029d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 811c 	bne.w	8002c12 <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
        }
        break;
 80029ee:	e111      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002a02:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002a06:	2b6c      	cmp	r3, #108	@ 0x6c
 8002a08:	d133      	bne.n	8002a72 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 8002a10:	2b11      	cmp	r3, #17
 8002a12:	d12e      	bne.n	8002a72 <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d12b      	bne.n	8002a72 <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3308      	adds	r3, #8
 8002a24:	2228      	movs	r2, #40	@ 0x28
 8002a26:	4619      	mov	r1, r3
 8002a28:	f00c fda7 	bl	800f57a <memcpy>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002a70:	e0ac      	b.n	8002bcc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002a72:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	f040 808b 	bne.w	8002b92 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 8002a82:	2b22      	cmp	r3, #34	@ 0x22
 8002a84:	f040 8085 	bne.w	8002b92 <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f040 8081 	bne.w	8002b92 <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f103 0008 	add.w	r0, r3, #8
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3358      	adds	r3, #88	@ 0x58
 8002aa2:	2228      	movs	r2, #40	@ 0x28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f00c fd68 	bl	800f57a <memcpy>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ae4:	885b      	ldrh	r3, [r3, #2]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d02e      	beq.n	8002b48 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2234      	movs	r2, #52	@ 0x34
 8002aee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002af8:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002afa:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b02:	461a      	mov	r2, r3
 8002b04:	f004 f824 	bl	8006b50 <pal_os_datastore_write>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 8002b0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	22ff      	movs	r2, #255	@ 0xff
 8002b1a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2207      	movs	r2, #7
 8002b22:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002b34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
                        break;
 8002b46:	e065      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3358      	adds	r3, #88	@ 0x58
 8002b4c:	2228      	movs	r2, #40	@ 0x28
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00c fccd 	bl	800f4f0 <memset>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	649a      	str	r2, [r3, #72]	@ 0x48
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b90:	e01c      	b.n	8002bcc <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2234      	movs	r2, #52	@ 0x34
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f00c fca9 	bl	800f4f0 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002ba4:	885b      	ldrh	r3, [r3, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002bb0:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 8002bb2:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002bb4:	2234      	movs	r2, #52	@ 0x34
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 ffca 	bl	8006b50 <pal_os_datastore_write>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 8002bc2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002bc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002bca:	e023      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 8002bda:	e01b      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	22ff      	movs	r2, #255	@ 0xff
 8002be0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2207      	movs	r2, #7
 8002be8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]
        }
        break;
 8002c0c:	e002      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 8002c0e:	bf00      	nop
 8002c10:	e000      	b.n	8002c14 <ifx_i2c_prl_do_manage_context+0x422>
                break;
 8002c12:	bf00      	nop
    }
  return (return_status);
 8002c14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3748      	adds	r7, #72	@ 0x48
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b097      	sub	sp, #92	@ 0x5c
 8002c24:	af04      	add	r7, sp, #16
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002c3a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002c3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 8002c42:	897b      	ldrh	r3, [r7, #10]
 8002c44:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <ifx_i2c_prl_event_handler+0x36>
 8002c4c:	897b      	ldrh	r3, [r7, #10]
 8002c4e:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d029      	beq.n	8002caa <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	22ff      	movs	r2, #255	@ 0xff
 8002c5a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d105      	bne.n	8002c74 <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f240 1207 	movw	r2, #263	@ 0x107
 8002c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c72:	e016      	b.n	8002ca2 <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10d      	bne.n	8002c9a <ifx_i2c_prl_event_handler+0x7a>
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c84:	d009      	beq.n	8002c9a <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c98:	e003      	b.n	8002ca2 <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	897a      	ldrh	r2, [r7, #10]
 8002c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	f200 8445 	bhi.w	8003542 <ifx_i2c_prl_event_handler+0x922>
 8002cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <ifx_i2c_prl_event_handler+0xa0>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002ce1 	.word	0x08002ce1
 8002cc4:	08002d4f 	.word	0x08002d4f
 8002cc8:	08003161 	.word	0x08003161
 8002ccc:	08002e8f 	.word	0x08002e8f
 8002cd0:	08002d93 	.word	0x08002d93
 8002cd4:	080033f9 	.word	0x080033f9
 8002cd8:	08003513 	.word	0x08003513
 8002cdc:	08002cfd 	.word	0x08002cfd
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 8002cea:	2300      	movs	r3, #0
 8002cec:	2200      	movs	r2, #0
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	47a0      	blx	r4
                exit_machine = FALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002cf8:	f000 bc34 	b.w	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 8002cfc:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8002d00:	893a      	ldrh	r2, [r7, #8]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff fd74 	bl	80027f2 <ifx_i2c_prl_do_manage_context>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8424 	beq.w	8003562 <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22ff      	movs	r2, #255	@ 0xff
 8002d1e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2207      	movs	r2, #7
 8002d26:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002d4a:	f000 bc0a 	b.w	8003562 <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db09      	blt.n	8002d6e <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d011      	beq.n	8002d88 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10c      	bne.n	8002d88 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2205      	movs	r2, #5
 8002d72:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2211      	movs	r2, #17
 8002d7a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 8002d86:	e3ed      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002d90:	e3e8      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	3308      	adds	r3, #8
 8002d96:	2228      	movs	r2, #40	@ 0x28
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00c fba8 	bl	800f4f0 <memset>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	2234      	movs	r2, #52	@ 0x34
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c fb8b 	bl	800f4f0 <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002de0:	885b      	ldrh	r3, [r3, #2]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002dec:	885b      	ldrh	r3, [r3, #2]
 8002dee:	f107 0110 	add.w	r1, r7, #16
 8002df2:	2234      	movs	r2, #52	@ 0x34
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 feab 	bl	8006b50 <pal_os_datastore_write>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 8002e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01d      	beq.n	8002e44 <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	@ 0xff
 8002e0c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2207      	movs	r2, #7
 8002e14:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f240 1207 	movw	r2, #263	@ 0x107
 8002e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002e42:	e38f      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fb37 	bl	80024ba <ifx_i2c_prl_do_handshake>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002e52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002e56:	f240 1207 	movw	r2, #263	@ 0x107
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d109      	bne.n	8002e72 <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002e64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002e70:	e378      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d104      	bne.n	8002e86 <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002e84:	e36e      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002e8c:	e36a      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f043 0320 	orr.w	r3, r3, #32
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d006      	beq.n	8002ec6 <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002ebe:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d122      	bne.n	8002f0c <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f113 0f10 	cmn.w	r3, #16
 8002ed0:	d914      	bls.n	8002efc <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10f      	bne.n	8002efc <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2211      	movs	r2, #17
 8002ef6:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002efa:	e333      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	320d      	adds	r2, #13
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002f2c:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	f040 80c2 	bne.w	80030ba <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f113 0f10 	cmn.w	r3, #16
 8002f40:	d914      	bls.n	8002f6c <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2211      	movs	r2, #17
 8002f66:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002f6a:	e2fb      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d13f      	bne.n	8002ff6 <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f8a:	3305      	adds	r3, #5
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002f92:	9203      	str	r2, [sp, #12]
 8002f94:	2220      	movs	r2, #32
 8002f96:	9202      	str	r2, [sp, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	9201      	str	r2, [sp, #4]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff f9ea 	bl	800237c <ifx_i2c_prl_decrypt_msg>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002fae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002fb2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002fb6:	d118      	bne.n	8002fea <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	22ff      	movs	r2, #255	@ 0xff
 8002fbc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002fe8:	e2bc      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002ff4:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2205      	movs	r2, #5
 8003004:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	f003 fa8d 	bl	8006534 <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 800301e:	1d59      	adds	r1, r3, #5
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	4603      	mov	r3, r0
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff f960 	bl	80022fa <ifx_i2c_prl_encrypt_msg>
 800303a:	4603      	mov	r3, r0
 800303c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003040:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003044:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003048:	d118      	bne.n	800307c <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	@ 0xff
 800304e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2207      	movs	r2, #7
 8003056:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003068:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 800307a:	e273      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8003086:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8003098:	4413      	add	r3, r2
 800309a:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 800309c:	3308      	adds	r3, #8
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fa91 	bl	80035d4 <ifx_i2c_tl_transceive>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80030b8:	e021      	b.n	80030fe <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	3304      	adds	r3, #4
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80030ce:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80030d4:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 80030e2:	4413      	add	r3, r2
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4603      	mov	r3, r0
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa6e 	bl	80035d4 <ifx_i2c_tl_transceive>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 80030fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003102:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003106:	d11d      	bne.n	8003144 <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	22ff      	movs	r2, #255	@ 0xff
 800310c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2207      	movs	r2, #7
 8003114:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003126:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800313e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8003142:	e20f      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003148:	881a      	ldrh	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2203      	movs	r2, #3
 8003154:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 800315e:	e201      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	3301      	adds	r3, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fa05 	bl	8006576 <optiga_common_get_uint32>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8003172:	893b      	ldrh	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d118      	bne.n	80031aa <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	22ff      	movs	r2, #255	@ 0xff
 800317c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2207      	movs	r2, #7
 8003184:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003196:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80031a2:	2301      	movs	r3, #1
 80031a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 80031a8:	e1dc      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d040      	beq.n	8003238 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b40      	cmp	r3, #64	@ 0x40
 80031bc:	d003      	beq.n	80031c6 <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 80031c2:	2b44      	cmp	r3, #68	@ 0x44
 80031c4:	d10c      	bne.n	80031e0 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d004      	beq.n	80031d6 <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d004      	beq.n	80031e0 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d109      	bne.n	80031f4 <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80031e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80031f2:	e018      	b.n	8003226 <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d10e      	bne.n	800321c <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8003204:	2b11      	cmp	r3, #17
 8003206:	d109      	bne.n	800321c <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800321a:	e004      	b.n	8003226 <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003222:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2206      	movs	r2, #6
 800322a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003236:	e195      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	781a      	ldrb	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8003242:	429a      	cmp	r2, r3
 8003244:	d018      	beq.n	8003278 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	22ff      	movs	r2, #255	@ 0xff
 800324a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2207      	movs	r2, #7
 8003252:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8003276:	e175      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d006      	beq.n	8003292 <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 800328c:	2b03      	cmp	r3, #3
 800328e:	f040 8082 	bne.w	8003396 <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8003292:	893b      	ldrh	r3, [r7, #8]
 8003294:	2b0d      	cmp	r3, #13
 8003296:	d818      	bhi.n	80032ca <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	22ff      	movs	r2, #255	@ 0xff
 800329c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2207      	movs	r2, #7
 80032a4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80032b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 80032c8:	e14c      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	3303      	adds	r3, #3
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d805      	bhi.n	80032e4 <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d818      	bhi.n	8003316 <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	22ff      	movs	r2, #255	@ 0xff
 80032e8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2207      	movs	r2, #7
 80032f0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003302:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800330e:	2301      	movs	r3, #1
 8003310:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003314:	e126      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003322:	881a      	ldrh	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003328:	3a0d      	subs	r2, #13
 800332a:	b292      	uxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003332:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003338:	8818      	ldrh	r0, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8003342:	3305      	adds	r3, #5
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 800334a:	9203      	str	r2, [sp, #12]
 800334c:	2224      	movs	r2, #36	@ 0x24
 800334e:	9202      	str	r2, [sp, #8]
 8003350:	2210      	movs	r2, #16
 8003352:	9201      	str	r2, [sp, #4]
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4623      	mov	r3, r4
 8003358:	4602      	mov	r2, r0
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff f80e 	bl	800237c <ifx_i2c_prl_decrypt_msg>
 8003360:	4603      	mov	r3, r0
 8003362:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800336a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800336e:	d108      	bne.n	8003382 <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2206      	movs	r2, #6
 8003374:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2204      	movs	r2, #4
 800337c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8003380:	e0f0      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8003392:	bf00      	nop
            break;
 8003394:	e0e6      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 8003396:	893b      	ldrh	r3, [r7, #8]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d81c      	bhi.n	80033d6 <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2207      	movs	r2, #7
 80033a0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	22ff      	movs	r2, #255	@ 0xff
 80033a8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80033bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 80033c0:	e0d0      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80033c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 80033d4:	e0c6      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	3a01      	subs	r2, #1
 80033e2:	b292      	uxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80033f6:	e0b5      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b44      	cmp	r3, #68	@ 0x44
 80033fe:	d166      	bne.n	80034ce <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8003400:	893b      	ldrh	r3, [r7, #8]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d104      	bne.n	8003410 <ifx_i2c_prl_event_handler+0x7f0>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 800340c:	2b02      	cmp	r3, #2
 800340e:	d918      	bls.n	8003442 <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	@ 0xff
 8003414:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2207      	movs	r2, #7
 800341c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800342e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003440:	e090      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003448:	2b01      	cmp	r3, #1
 800344a:	d004      	beq.n	8003456 <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	d136      	bne.n	80034c4 <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003474:	2b03      	cmp	r3, #3
 8003476:	d91c      	bls.n	80034b2 <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22ff      	movs	r2, #255	@ 0xff
 800347c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2207      	movs	r2, #7
 8003484:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8003496:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 80034b0:	e058      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2204      	movs	r2, #4
 80034b6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2204      	movs	r2, #4
 80034be:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 80034c2:	e04f      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2207      	movs	r2, #7
 80034c8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80034cc:	e04a      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d117      	bne.n	8003508 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	22ff      	movs	r2, #255	@ 0xff
 80034dc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2207      	movs	r2, #7
 80034e4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80034f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2207      	movs	r2, #7
 800350c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003510:	e028      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8003518:	2bff      	cmp	r3, #255	@ 0xff
 800351a:	d00d      	beq.n	8003538 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f7fe ff75 	bl	800240c <ifx_i2c_prl_send_alert>
 8003522:	4603      	mov	r3, r0
 8003524:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	22ff      	movs	r2, #255	@ 0xff
 800352c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8003536:	e015      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003540:	e010      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800354e:	2300      	movs	r3, #0
 8003550:	2200      	movs	r2, #0
 8003552:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	47a0      	blx	r4
                exit_machine = FALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003560:	e000      	b.n	8003564 <ifx_i2c_prl_event_handler+0x944>
            break;
 8003562:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003564:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003568:	2b01      	cmp	r3, #1
 800356a:	f43f ab9e 	beq.w	8002caa <ifx_i2c_prl_event_handler+0x8a>
}
 800356e:	bf00      	nop
 8003570:	bf00      	nop
 8003572:	374c      	adds	r7, #76	@ 0x4c
 8003574:	46bd      	mov	sp, r7
 8003576:	bd90      	pop	{r4, r7, pc}

08003578 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 800358a:	4911      	ldr	r1, [pc, #68]	@ (80035d0 <ifx_i2c_tl_init+0x58>)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd fc11 	bl	8000db4 <ifx_i2c_dl_init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003598:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800359c:	e014      	b.n	80035c8 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80035bc:	3b06      	subs	r3, #6
 80035be:	b29a      	uxth	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	080038b9 	.word	0x080038b9

080035d4 <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80035e4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80035e8:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d041      	beq.n	8003674 <ifx_i2c_tl_transceive+0xa0>
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03e      	beq.n	8003674 <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d138      	bne.n	8003672 <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8003608:	f003 fc9b 	bl	8006f42 <pal_os_timer_get_time_in_milliseconds>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a3a      	ldr	r2, [r7, #32]
 8003638:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003662:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f866 	bl	8003738 <ifx_i2c_tl_send_next_fragment>
 800366c:	4603      	mov	r3, r0
 800366e:	82fb      	strh	r3, [r7, #22]
 8003670:	e000      	b.n	8003674 <ifx_i2c_tl_transceive+0xa0>
            break;
 8003672:	bf00      	nop
    } while (FALSE);
    return (status);
 8003674:	8afb      	ldrh	r3, [r7, #22]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800368c:	2b01      	cmp	r3, #1
 800368e:	d002      	beq.n	8003696 <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003690:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003694:	e00f      	b.n	80036b6 <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f842 	bl	8003738 <ifx_i2c_tl_send_next_fragment>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 80036be:	b480      	push	{r7}
 80036c0:	b085      	sub	sp, #20
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 80036cc:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <ifx_i2c_tl_calculate_pctr+0x38>
 80036e8:	897a      	ldrh	r2, [r7, #10]
 80036ea:	89bb      	ldrh	r3, [r7, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d802      	bhi.n	80036f6 <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e019      	b.n	800372a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <ifx_i2c_tl_calculate_pctr+0x50>
 8003700:	897a      	ldrh	r2, [r7, #10]
 8003702:	89bb      	ldrh	r3, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d902      	bls.n	800370e <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e00d      	b.n	800372a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <ifx_i2c_tl_calculate_pctr+0x68>
 8003718:	897a      	ldrh	r2, [r7, #10]
 800371a:	89bb      	ldrh	r3, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d902      	bls.n	8003726 <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8003720:	2302      	movs	r3, #2
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e001      	b.n	800372a <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8003726:	2304      	movs	r3, #4
 8003728:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003746:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ffb8 	bl	80036be <ifx_i2c_tl_calculate_pctr>
 800374e:	4603      	mov	r3, r0
 8003750:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003758:	461a      	mov	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	429a      	cmp	r2, r3
 8003766:	da07      	bge.n	8003778 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003778:	7b7b      	ldrb	r3, [r7, #13]
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	b2da      	uxtb	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 800378c:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 800379a:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800379c:	89fa      	ldrh	r2, [r7, #14]
 800379e:	4619      	mov	r1, r3
 80037a0:	f00b feeb 	bl	800f57a <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	4413      	add	r3, r2
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 80037b6:	89fb      	ldrh	r3, [r7, #14]
 80037b8:	3301      	adds	r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fb36 	bl	8000e30 <ifx_i2c_dl_send_frame>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2207      	movs	r2, #7
 80037de:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80037ea:	89fb      	ldrh	r3, [r7, #14]
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fb1e 	bl	8000e30 <ifx_i2c_dl_send_frame>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	460a      	mov	r2, r1
 800380a:	71fb      	strb	r3, [r7, #7]
 800380c:	4613      	mov	r3, r2
 800380e:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8003810:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003814:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2b07      	cmp	r3, #7
 800381a:	d00b      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d005      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d002      	beq.n	8003834 <ifx_i2c_tl_check_chaining_error+0x34>
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d110      	bne.n	8003856 <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003838:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800383c:	79ba      	ldrb	r2, [r7, #6]
 800383e:	429a      	cmp	r2, r3
 8003840:	d007      	beq.n	8003852 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4a07      	ldr	r2, [pc, #28]	@ (8003864 <ifx_i2c_tl_check_chaining_error+0x64>)
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 800384c:	79ba      	ldrb	r2, [r7, #6]
 800384e:	429a      	cmp	r2, r3
 8003850:	d101      	bne.n	8003856 <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8003852:	2300      	movs	r3, #0
 8003854:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8003856:	89fb      	ldrh	r3, [r7, #14]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	08010548 	.word	0x08010548

08003868 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8003874:	2300      	movs	r3, #0
 8003876:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <presence_bit_check+0x42>
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	2b00      	cmp	r3, #0
 8003892:	d004      	beq.n	800389e <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d002      	beq.n	80038aa <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 80038a4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80038a8:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 80038aa:	89fb      	ldrh	r3, [r7, #14]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	461a      	mov	r2, r3
 80038c4:	460b      	mov	r3, r1
 80038c6:	817b      	strh	r3, [r7, #10]
 80038c8:	4613      	mov	r3, r2
 80038ca:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 80038d4:	2301      	movs	r3, #1
 80038d6:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2206      	movs	r2, #6
 80038fa:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8003904:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 8003908:	893b      	ldrh	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d010      	beq.n	8003930 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 800390e:	7dfb      	ldrb	r3, [r7, #23]
 8003910:	4619      	mov	r1, r3
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff ffa8 	bl	8003868 <presence_bit_check>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2206      	movs	r2, #6
 8003922:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800392c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 800393e:	3b01      	subs	r3, #1
 8003940:	2b07      	cmp	r3, #7
 8003942:	f200 81d0 	bhi.w	8003ce6 <ifx_i2c_dl_event_handler+0x42e>
 8003946:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <ifx_i2c_dl_event_handler+0x94>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800396d 	.word	0x0800396d
 8003950:	08003983 	.word	0x08003983
 8003954:	08003ce7 	.word	0x08003ce7
 8003958:	08003a19 	.word	0x08003a19
 800395c:	08003b5f 	.word	0x08003b5f
 8003960:	08003cb5 	.word	0x08003cb5
 8003964:	08003c73 	.word	0x08003c73
 8003968:	08003c17 	.word	0x08003c17
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 800396c:	2300      	movs	r3, #0
 800396e:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003976:	2300      	movs	r3, #0
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	47a0      	blx	r4
            }
            break;
 8003980:	e1c3      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d040      	beq.n	8003a0e <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003998:	429a      	cmp	r2, r3
 800399a:	d215      	bcs.n	80039c8 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 800399c:	7dbb      	ldrb	r3, [r7, #22]
 800399e:	2b07      	cmp	r3, #7
 80039a0:	d104      	bne.n	80039ac <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80039aa:	e1ae      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 80039ac:	893b      	ldrh	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2206      	movs	r2, #6
 80039b6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80039ba:	e1a6      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff feb9 	bl	8003738 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 80039c6:	e19f      	b.n	8003d08 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2204      	movs	r2, #4
 80039cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 818a 	bne.w	8003d08 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7fd fa4b 	bl	8000e90 <ifx_i2c_dl_receive_frame>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2206      	movs	r2, #6
 8003a04:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	757b      	strb	r3, [r7, #21]
            break;
 8003a0c:	e17c      	b.n	8003d08 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2206      	movs	r2, #6
 8003a12:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003a16:	e178      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8098 	beq.w	8003b54 <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2206      	movs	r2, #6
 8003a2e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003a32:	e16a      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3e:	d114      	bne.n	8003a6a <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003a40:	7dbb      	ldrb	r3, [r7, #22]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d005      	beq.n	8003a52 <ifx_i2c_dl_event_handler+0x19a>
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7fd fa22 	bl	8000e90 <ifx_i2c_dl_receive_frame>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2206      	movs	r2, #6
 8003a56:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003a5a:	e156      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2204      	movs	r2, #4
 8003a60:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	757b      	strb	r3, [r7, #21]
                        break;
 8003a68:	e14f      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003a70:	7dbb      	ldrb	r3, [r7, #22]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fec3 	bl	8003800 <ifx_i2c_tl_check_chaining_error>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2208      	movs	r2, #8
 8003a84:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003a88:	e13f      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003a8a:	7dbb      	ldrb	r3, [r7, #22]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003aa6:	e130      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003aa8:	7dbb      	ldrb	r3, [r7, #22]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <ifx_i2c_dl_event_handler+0x1fc>
 8003aae:	7dbb      	ldrb	r3, [r7, #22]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d14a      	bne.n	8003b4a <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003aba:	461a      	mov	r2, r3
 8003abc:	893b      	ldrh	r3, [r7, #8]
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003ac8:	8812      	ldrh	r2, [r2, #0]
 8003aca:	4293      	cmp	r3, r2
 8003acc:	dd09      	ble.n	8003ae2 <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ad4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2206      	movs	r2, #6
 8003adc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003ae0:	e113      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003af2:	1898      	adds	r0, r3, r2
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1c59      	adds	r1, r3, #1
 8003af8:	893b      	ldrh	r3, [r7, #8]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	f00b fd3c 	bl	800f57a <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003b2c:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	2100      	movs	r1, #0
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003b48:	e0df      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2205      	movs	r2, #5
 8003b4e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003b52:	e0da      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2206      	movs	r2, #6
 8003b58:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003b5c:	e0d5      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003b5e:	893a      	ldrh	r2, [r7, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003b66:	3301      	adds	r3, #1
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d004      	beq.n	8003b76 <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2207      	movs	r2, #7
 8003b70:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003b74:	e0c9      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	893b      	ldrh	r3, [r7, #8]
 8003b80:	4413      	add	r3, r2
 8003b82:	3b01      	subs	r3, #1
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003b8a:	8812      	ldrh	r2, [r2, #0]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	dd09      	ble.n	8003ba4 <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b96:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003ba2:	e0b2      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2206      	movs	r2, #6
 8003bae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003bb2:	e0aa      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003bc0:	1898      	adds	r0, r3, r2
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	1c59      	adds	r1, r3, #1
 8003bc6:	893b      	ldrh	r3, [r7, #8]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f00b fcd5 	bl	800f57a <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8003bd6:	893b      	ldrh	r3, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7fd f947 	bl	8000e90 <ifx_i2c_dl_receive_frame>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2206      	movs	r2, #6
 8003c0c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	757b      	strb	r3, [r7, #21]
            }
            break;
 8003c14:	e079      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d909      	bls.n	8003c30 <ifx_i2c_dl_event_handler+0x378>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d104      	bne.n	8003c30 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2207      	movs	r2, #7
 8003c2a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003c2e:	e06c      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	b2d1      	uxtb	r1, r2
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f7ff fd16 	bl	800367e <ifx_i2c_tl_resend_packets>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2206      	movs	r2, #6
 8003c5c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003c60:	e053      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	757b      	strb	r3, [r7, #21]
            break;
 8003c66:	e050      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2206      	movs	r2, #6
 8003c6c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003c70:	e04b      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	b2d1      	uxtb	r1, r2
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fd9d 	bl	80037ce <ifx_i2c_tl_send_chaining_error>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d004      	beq.n	8003ca4 <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2206      	movs	r2, #6
 8003c9e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003ca2:	e032      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	757b      	strb	r3, [r7, #21]
            break;
 8003ca8:	e02f      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2206      	movs	r2, #6
 8003cae:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003cb2:	e02a      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003cb8:	897b      	ldrh	r3, [r7, #10]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <ifx_i2c_dl_event_handler+0x410>
 8003cc2:	893b      	ldrh	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	47a0      	blx	r4
            }
            break;
 8003ce4:	e011      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2200      	movs	r2, #0
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	47a0      	blx	r4
            }
            break;
 8003d06:	e000      	b.n	8003d0a <ifx_i2c_dl_event_handler+0x452>
            break;
 8003d08:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 8003d0a:	7d7b      	ldrb	r3, [r7, #21]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f43f ade3 	beq.w	80038d8 <ifx_i2c_dl_event_handler+0x20>
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd90      	pop	{r4, r7, pc}

08003d1c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003d24:	1d39      	adds	r1, r7, #4
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4803      	ldr	r0, [pc, #12]	@ (8003d3c <__io_putchar+0x20>)
 8003d2e:	f00a f96d 	bl	800e00c <HAL_UART_Transmit>
    return ch;
 8003d32:	687b      	ldr	r3, [r7, #4]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000a94 	.word	0x20000a94

08003d40 <optiga_util_callback>:
//
//pFunction jumpToApplication;
//uint32_t jumpAddress;
// Async callback
static void optiga_util_callback(void *context, optiga_lib_status_t return_status)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 8003d4c:	4a04      	ldr	r2, [pc, #16]	@ (8003d60 <optiga_util_callback+0x20>)
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	8013      	strh	r3, [r2, #0]
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000adc 	.word	0x20000adc

08003d64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        pal_os_event_timer_tick();
 8003d76:	f003 f87d 	bl	8006e74 <pal_os_event_timer_tick>
    }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <verify_firmware_signature>:


bool verify_firmware_signature(optiga_util_t *util)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	f5ad 5d50 	sub.w	sp, sp, #13312	@ 0x3400
 8003d8a:	b08e      	sub	sp, #56	@ 0x38
 8003d8c:	af04      	add	r7, sp, #16
 8003d8e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003d92:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8003d96:	6018      	str	r0, [r3, #0]
    uint8_t firmware_data[HASH_CALC_LEN];
    uint8_t calc_hash[32];
    uint8_t firmware_signature[SIGNATURE_SIZE];

    // Read firmware data from flash
    memcpy(firmware_data, (uint8_t *)BOOTLOADER_START_ADDR, HASH_CALC_LEN);
 8003d98:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003d9c:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8003da0:	4aa8      	ldr	r2, [pc, #672]	@ (8004044 <verify_firmware_signature+0x2c0>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	4611      	mov	r1, r2
 8003da6:	f243 23e4 	movw	r3, #13028	@ 0x32e4
 8003daa:	461a      	mov	r2, r3
 8003dac:	f00b fbe5 	bl	800f57a <memcpy>

    // Calculate SHA-256
    mbedtls_sha256_context ctx;
    mbedtls_sha256_init(&ctx);
 8003db0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003db4:	3b08      	subs	r3, #8
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 f8e8 	bl	8006f8c <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret(&ctx, 0);  // 0 = SHA-256 (not 224)
 8003dbc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003dc0:	3b08      	subs	r3, #8
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 f8ff 	bl	8006fc8 <mbedtls_sha256_starts_ret>
    mbedtls_sha256_update_ret(&ctx, firmware_data, HASH_CALC_LEN);
 8003dca:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8003dce:	3934      	subs	r1, #52	@ 0x34
 8003dd0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003dd4:	3b08      	subs	r3, #8
 8003dd6:	f243 22e4 	movw	r2, #13028	@ 0x32e4
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f004 fea8 	bl	8008b30 <mbedtls_sha256_update_ret>
    mbedtls_sha256_finish_ret(&ctx, calc_hash);
 8003de0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8003de4:	3a14      	subs	r2, #20
 8003de6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003dea:	3b08      	subs	r3, #8
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 ff13 	bl	8008c1a <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free(&ctx);
 8003df4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003df8:	3b08      	subs	r3, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f003 f8d3 	bl	8006fa6 <mbedtls_sha256_free>

    printf("\r\n🔹 Calculated SHA-256 Hash (%d bytes):\r\n", sizeof(calc_hash));
 8003e00:	2120      	movs	r1, #32
 8003e02:	4891      	ldr	r0, [pc, #580]	@ (8004048 <verify_firmware_signature+0x2c4>)
 8003e04:	f00b faf4 	bl	800f3f0 <iprintf>
    for (int i = 0; i < sizeof(calc_hash); i++)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003e0e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e019      	b.n	8003e4a <verify_firmware_signature+0xc6>
        printf("%02X", calc_hash[i]);
 8003e16:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003e1a:	f5a3 7245 	sub.w	r2, r3, #788	@ 0x314
 8003e1e:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003e22:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4887      	ldr	r0, [pc, #540]	@ (800404c <verify_firmware_signature+0x2c8>)
 8003e30:	f00b fade 	bl	800f3f0 <iprintf>
    for (int i = 0; i < sizeof(calc_hash); i++)
 8003e34:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003e38:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003e44:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003e4e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b1f      	cmp	r3, #31
 8003e56:	d9de      	bls.n	8003e16 <verify_firmware_signature+0x92>
    printf("\r\n");
 8003e58:	487d      	ldr	r0, [pc, #500]	@ (8004050 <verify_firmware_signature+0x2cc>)
 8003e5a:	f00b fb31 	bl	800f4c0 <puts>

    // Read digital signature from flash
    memcpy(firmware_signature, (uint8_t *)(BOOTLOADER_START_ADDR + SIGNATURE_OFFSET), SIGNATURE_SIZE);
 8003e5e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003e62:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003e66:	4a7b      	ldr	r2, [pc, #492]	@ (8004054 <verify_firmware_signature+0x2d0>)
 8003e68:	4618      	mov	r0, r3
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	2347      	movs	r3, #71	@ 0x47
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f00b fb83 	bl	800f57a <memcpy>

    printf("🔹 Firmware Signature (%d bytes):\r\n", SIGNATURE_SIZE);
 8003e74:	2147      	movs	r1, #71	@ 0x47
 8003e76:	4878      	ldr	r0, [pc, #480]	@ (8004058 <verify_firmware_signature+0x2d4>)
 8003e78:	f00b faba 	bl	800f3f0 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003e82:	f102 0220 	add.w	r2, r2, #32
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e019      	b.n	8003ebe <verify_firmware_signature+0x13a>
        printf("%02X", firmware_signature[i]);
 8003e8a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003e8e:	f5a3 7257 	sub.w	r2, r3, #860	@ 0x35c
 8003e92:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003e96:	f103 0320 	add.w	r3, r3, #32
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	486a      	ldr	r0, [pc, #424]	@ (800404c <verify_firmware_signature+0x2c8>)
 8003ea4:	f00b faa4 	bl	800f3f0 <iprintf>
    for (int i = 0; i < SIGNATURE_SIZE; i++)
 8003ea8:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003eac:	f103 0320 	add.w	r3, r3, #32
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003eb8:	f102 0220 	add.w	r2, r2, #32
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003ec2:	f103 0320 	add.w	r3, r3, #32
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b46      	cmp	r3, #70	@ 0x46
 8003eca:	ddde      	ble.n	8003e8a <verify_firmware_signature+0x106>
    printf("\r\n");
 8003ecc:	4860      	ldr	r0, [pc, #384]	@ (8004050 <verify_firmware_signature+0x2cc>)
 8003ece:	f00b faf7 	bl	800f4c0 <puts>

    // Allocate memory and read public key from OID
    uint8_t public_key[80];
    uint16_t public_key_len = sizeof(public_key);
 8003ed2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003ed6:	f2a3 431a 	subw	r3, r3, #1050	@ 0x41a
 8003eda:	2250      	movs	r2, #80	@ 0x50
 8003edc:	801a      	strh	r2, [r3, #0]

    optiga_lib_status = optiga_util_read_data(util, SIGNATURE_OID, 0, public_key, &public_key_len);
 8003ede:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003ee2:	3a18      	subs	r2, #24
 8003ee4:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003ee8:	f2a3 4024 	subw	r0, r3, #1060	@ 0x424
 8003eec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ef0:	3b1a      	subs	r3, #26
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003efc:	6800      	ldr	r0, [r0, #0]
 8003efe:	f002 fc37 	bl	8006770 <optiga_util_read_data>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b55      	ldr	r3, [pc, #340]	@ (800405c <verify_firmware_signature+0x2d8>)
 8003f08:	801a      	strh	r2, [r3, #0]
    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8003f0a:	4b54      	ldr	r3, [pc, #336]	@ (800405c <verify_firmware_signature+0x2d8>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d006      	beq.n	8003f22 <verify_firmware_signature+0x19e>
    {
        printf("❌ Failed to read public key from OID 0x%04X\r\n", SIGNATURE_OID);
 8003f14:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003f18:	4851      	ldr	r0, [pc, #324]	@ (8004060 <verify_firmware_signature+0x2dc>)
 8003f1a:	f00b fa69 	bl	800f3f0 <iprintf>
        return false;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e08a      	b.n	8004038 <verify_firmware_signature+0x2b4>
    }

    printf("🔹 Public Key (%d bytes) from OID 0x%04X:\r\n", public_key_len, SIGNATURE_OID);
 8003f22:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003f26:	f2a3 431a 	subw	r3, r3, #1050	@ 0x41a
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	f24e 02e8 	movw	r2, #57576	@ 0xe0e8
 8003f30:	4619      	mov	r1, r3
 8003f32:	484c      	ldr	r0, [pc, #304]	@ (8004064 <verify_firmware_signature+0x2e0>)
 8003f34:	f00b fa5c 	bl	800f3f0 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003f3e:	f102 021c 	add.w	r2, r2, #28
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e019      	b.n	8003f7a <verify_firmware_signature+0x1f6>
        printf("%02X", public_key[i]);
 8003f46:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003f4a:	f5a3 6283 	sub.w	r2, r3, #1048	@ 0x418
 8003f4e:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003f52:	f103 031c 	add.w	r3, r3, #28
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	483b      	ldr	r0, [pc, #236]	@ (800404c <verify_firmware_signature+0x2c8>)
 8003f60:	f00b fa46 	bl	800f3f0 <iprintf>
    for (int i = 0; i < public_key_len; i++)
 8003f64:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003f68:	f103 031c 	add.w	r3, r3, #28
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8003f74:	f102 021c 	add.w	r2, r2, #28
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8003f7e:	f2a3 431a 	subw	r3, r3, #1050	@ 0x41a
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003f8a:	f103 031c 	add.w	r3, r3, #28
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4293      	cmp	r3, r2
 8003f92:	dbd8      	blt.n	8003f46 <verify_firmware_signature+0x1c2>
    printf("\r\n");
 8003f94:	482e      	ldr	r0, [pc, #184]	@ (8004050 <verify_firmware_signature+0x2cc>)
 8003f96:	f00b fa93 	bl	800f4c0 <puts>

    // Verify signature
    optiga_crypt_t *me_crypt = optiga_crypt_create(0, optiga_util_callback, NULL);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4932      	ldr	r1, [pc, #200]	@ (8004068 <verify_firmware_signature+0x2e4>)
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f002 fa2c 	bl	80063fc <optiga_crypt_create>
 8003fa4:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003fa8:	f103 0318 	add.w	r3, r3, #24
 8003fac:	6018      	str	r0, [r3, #0]
    if (!me_crypt)
 8003fae:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003fb2:	f103 0318 	add.w	r3, r3, #24
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <verify_firmware_signature+0x242>
    {
        printf("❌ Failed to create OPTIGA crypt instance!\r\n");
 8003fbc:	482b      	ldr	r0, [pc, #172]	@ (800406c <verify_firmware_signature+0x2e8>)
 8003fbe:	f00b fa7f 	bl	800f4c0 <puts>
        return false;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e038      	b.n	8004038 <verify_firmware_signature+0x2b4>
    }

    optiga_lib_status = OPTIGA_LIB_BUSY;
 8003fc6:	4b25      	ldr	r3, [pc, #148]	@ (800405c <verify_firmware_signature+0x2d8>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	801a      	strh	r2, [r3, #0]
    optiga_crypt_ecdsa_verify(me_crypt,
 8003fcc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003fd0:	3b1c      	subs	r3, #28
 8003fd2:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8003fd6:	3914      	subs	r1, #20
 8003fd8:	f24e 02e8 	movw	r2, #57576	@ 0xe0e8
 8003fdc:	9202      	str	r2, [sp, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	9201      	str	r2, [sp, #4]
 8003fe2:	2247      	movs	r2, #71	@ 0x47
 8003fe4:	9200      	str	r2, [sp, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f507 5050 	add.w	r0, r7, #13312	@ 0x3400
 8003fec:	f100 0018 	add.w	r0, r0, #24
 8003ff0:	6800      	ldr	r0, [r0, #0]
 8003ff2:	f002 fa6a 	bl	80064ca <optiga_crypt_ecdsa_verify>
                               firmware_signature,
                               SIGNATURE_SIZE,
                               OPTIGA_CRYPT_OID_DATA,
                               SIGNATURE_OID);

    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003ff6:	e001      	b.n	8003ffc <verify_firmware_signature+0x278>
        pal_os_event_trigger_registered_callback();
 8003ff8:	f002 ff1a 	bl	8006e30 <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003ffc:	4b17      	ldr	r3, [pc, #92]	@ (800405c <verify_firmware_signature+0x2d8>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d0f8      	beq.n	8003ff8 <verify_firmware_signature+0x274>

    optiga_crypt_destroy(me_crypt);
 8004006:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 800400a:	f103 0318 	add.w	r3, r3, #24
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	f002 fa38 	bl	8006484 <optiga_crypt_destroy>

    if (optiga_lib_status != OPTIGA_LIB_SUCCESS)
 8004014:	4b11      	ldr	r3, [pc, #68]	@ (800405c <verify_firmware_signature+0x2d8>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <verify_firmware_signature+0x2ac>
    {
        printf("❌ Signature verification FAILED! Status: 0x%04X\r\n", optiga_lib_status);
 800401e:	4b0f      	ldr	r3, [pc, #60]	@ (800405c <verify_firmware_signature+0x2d8>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	4619      	mov	r1, r3
 8004026:	4812      	ldr	r0, [pc, #72]	@ (8004070 <verify_firmware_signature+0x2ec>)
 8004028:	f00b f9e2 	bl	800f3f0 <iprintf>
        return false;
 800402c:	2300      	movs	r3, #0
 800402e:	e003      	b.n	8004038 <verify_firmware_signature+0x2b4>
    }

    printf("✅ Firmware signature verified successfully.\r\n");
 8004030:	4810      	ldr	r0, [pc, #64]	@ (8004074 <verify_firmware_signature+0x2f0>)
 8004032:	f00b fa45 	bl	800f4c0 <puts>
    return true;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	f507 5750 	add.w	r7, r7, #13312	@ 0x3400
 800403e:	3728      	adds	r7, #40	@ 0x28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	08020000 	.word	0x08020000
 8004048:	080101c0 	.word	0x080101c0
 800404c:	080101f0 	.word	0x080101f0
 8004050:	080101f8 	.word	0x080101f8
 8004054:	080232e4 	.word	0x080232e4
 8004058:	080101fc 	.word	0x080101fc
 800405c:	20000adc 	.word	0x20000adc
 8004060:	08010224 	.word	0x08010224
 8004064:	08010254 	.word	0x08010254
 8004068:	08003d41 	.word	0x08003d41
 800406c:	08010284 	.word	0x08010284
 8004070:	080102b4 	.word	0x080102b4
 8004074:	080102e8 	.word	0x080102e8

08004078 <verify_firmware_integrity>:
/* Replace verify_bootloader_hash() with combined hash+signature check */
bool verify_firmware_integrity(optiga_util_t *util)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
    return verify_firmware_signature(util);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff fe7f 	bl	8003d84 <verify_firmware_signature>
 8004086:	4603      	mov	r3, r0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <optiga_main_logic>:
void optiga_main_logic(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
    optiga_util_t *me_util = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	607b      	str	r3, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 800409a:	f240 3302 	movw	r3, #770	@ 0x302
 800409e:	807b      	strh	r3, [r7, #2]

    me_util = optiga_util_create(0, optiga_util_callback, NULL);
 80040a0:	2200      	movs	r2, #0
 80040a2:	492b      	ldr	r1, [pc, #172]	@ (8004150 <optiga_main_logic+0xc0>)
 80040a4:	2000      	movs	r0, #0
 80040a6:	f002 fac7 	bl	8006638 <optiga_util_create>
 80040aa:	6078      	str	r0, [r7, #4]
    if (!me_util)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <optiga_main_logic+0x2a>
    {
        printf("Failed to create OPTIGA util instance.\r\n");
 80040b2:	4828      	ldr	r0, [pc, #160]	@ (8004154 <optiga_main_logic+0xc4>)
 80040b4:	f00b fa04 	bl	800f4c0 <puts>
        return;
 80040b8:	e046      	b.n	8004148 <optiga_main_logic+0xb8>
    }

    // Retry loop to initialize OPTIGA
    while (1)
    {
        optiga_lib_status = OPTIGA_LIB_BUSY;
 80040ba:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <optiga_main_logic+0xc8>)
 80040bc:	2201      	movs	r2, #1
 80040be:	801a      	strh	r2, [r3, #0]
        return_status = optiga_util_open_application(me_util, 0);
 80040c0:	2100      	movs	r1, #0
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f002 fafa 	bl	80066bc <optiga_util_open_application>
 80040c8:	4603      	mov	r3, r0
 80040ca:	807b      	strh	r3, [r7, #2]
        if (return_status != OPTIGA_LIB_SUCCESS)
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <optiga_main_logic+0x4a>
        {
            printf("optiga_util_open_application() failed immediately. Retrying...\r\n");
 80040d2:	4822      	ldr	r0, [pc, #136]	@ (800415c <optiga_main_logic+0xcc>)
 80040d4:	f00b f9f4 	bl	800f4c0 <puts>
            continue;
 80040d8:	e028      	b.n	800412c <optiga_main_logic+0x9c>
        }
        HAL_Delay(100);
 80040da:	2064      	movs	r0, #100	@ 0x64
 80040dc:	f005 f9a4 	bl	8009428 <HAL_Delay>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80040e0:	e001      	b.n	80040e6 <optiga_main_logic+0x56>
        {
            pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 80040e2:	f002 fea5 	bl	8006e30 <pal_os_event_trigger_registered_callback>
        while (optiga_lib_status == OPTIGA_LIB_BUSY)
 80040e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004158 <optiga_main_logic+0xc8>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d0f8      	beq.n	80040e2 <optiga_main_logic+0x52>
        }
        HAL_Delay(100);
 80040f0:	2064      	movs	r0, #100	@ 0x64
 80040f2:	f005 f999 	bl	8009428 <HAL_Delay>
        if (optiga_lib_status == OPTIGA_LIB_SUCCESS)
 80040f6:	4b18      	ldr	r3, [pc, #96]	@ (8004158 <optiga_main_logic+0xc8>)
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <optiga_main_logic+0x86>
        {
            printf("OPTIGA Trust M initialized successfully.\r\n");
 8004100:	4817      	ldr	r0, [pc, #92]	@ (8004160 <optiga_main_logic+0xd0>)
 8004102:	f00b f9dd 	bl	800f4c0 <puts>
            break;
 8004106:	bf00      	nop
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
            HAL_Delay(2000);
        }
    }

    if (verify_firmware_integrity(me_util)) {
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ffb5 	bl	8004078 <verify_firmware_integrity>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00f      	beq.n	8004134 <optiga_main_logic+0xa4>
 8004114:	e00b      	b.n	800412e <optiga_main_logic+0x9e>
            printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n", optiga_lib_status);
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <optiga_main_logic+0xc8>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	4619      	mov	r1, r3
 800411e:	4811      	ldr	r0, [pc, #68]	@ (8004164 <optiga_main_logic+0xd4>)
 8004120:	f00b f966 	bl	800f3f0 <iprintf>
            HAL_Delay(2000);
 8004124:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004128:	f005 f97e 	bl	8009428 <HAL_Delay>
        optiga_lib_status = OPTIGA_LIB_BUSY;
 800412c:	e7c5      	b.n	80040ba <optiga_main_logic+0x2a>
            goto_application();
 800412e:	f000 fa73 	bl	8004618 <goto_application>
 8004132:	e009      	b.n	8004148 <optiga_main_logic+0xb8>
        } else {
            while (1) {
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8004134:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004138:	480b      	ldr	r0, [pc, #44]	@ (8004168 <optiga_main_logic+0xd8>)
 800413a:	f005 fffe 	bl	800a13a <HAL_GPIO_TogglePin>
                HAL_Delay(500);
 800413e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004142:	f005 f971 	bl	8009428 <HAL_Delay>
                HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8004146:	e7f5      	b.n	8004134 <optiga_main_logic+0xa4>
            }
        }
}
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	08003d41 	.word	0x08003d41
 8004154:	08010318 	.word	0x08010318
 8004158:	20000adc 	.word	0x20000adc
 800415c:	08010340 	.word	0x08010340
 8004160:	08010380 	.word	0x08010380
 8004164:	080103ac 	.word	0x080103ac
 8004168:	40020400 	.word	0x40020400

0800416c <I2C_Scan>:


void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    printf("Scanning I2C...\r\n");
 8004174:	4811      	ldr	r0, [pc, #68]	@ (80041bc <I2C_Scan+0x50>)
 8004176:	f00b f9a3 	bl	800f4c0 <puts>
    for (uint8_t addr = 1; addr < 128; addr++) {
 800417a:	2301      	movs	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
 800417e:	e013      	b.n	80041a8 <I2C_Scan+0x3c>
        if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	b29b      	uxth	r3, r3
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	b299      	uxth	r1, r3
 8004188:	230a      	movs	r3, #10
 800418a:	2201      	movs	r2, #1
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f006 fc9d 	bl	800aacc <HAL_I2C_IsDeviceReady>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <I2C_Scan+0x36>
            printf("Device found at 0x%02X\r\n", addr);
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	4619      	mov	r1, r3
 800419c:	4808      	ldr	r0, [pc, #32]	@ (80041c0 <I2C_Scan+0x54>)
 800419e:	f00b f927 	bl	800f3f0 <iprintf>
    for (uint8_t addr = 1; addr < 128; addr++) {
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	3301      	adds	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dae7      	bge.n	8004180 <I2C_Scan+0x14>
        }
    }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	080103dc 	.word	0x080103dc
 80041c0:	080103f0 	.word	0x080103f0

080041c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041ca:	f005 f8bb 	bl	8009344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041ce:	f000 f88f 	bl	80042f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041d2:	f000 f9a9 	bl	8004528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80041d6:	f000 f97d 	bl	80044d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80041da:	f000 f901 	bl	80043e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80041de:	f000 f92d 	bl	800443c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80041e2:	f000 f8f1 	bl	80043c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80041e6:	4834      	ldr	r0, [pc, #208]	@ (80042b8 <main+0xf4>)
 80041e8:	f009 fadc 	bl	800d7a4 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	201c      	movs	r0, #28
 80041f2:	f005 fa2e 	bl	8009652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041f6:	201c      	movs	r0, #28
 80041f8:	f005 fa47 	bl	800968a <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET );    //Green LED OFF
 80041fc:	2201      	movs	r2, #1
 80041fe:	2120      	movs	r1, #32
 8004200:	482e      	ldr	r0, [pc, #184]	@ (80042bc <main+0xf8>)
 8004202:	f005 ff81 	bl	800a108 <HAL_GPIO_WritePin>

  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1] );
 8004206:	2301      	movs	r3, #1
 8004208:	2203      	movs	r2, #3
 800420a:	4619      	mov	r1, r3
 800420c:	482c      	ldr	r0, [pc, #176]	@ (80042c0 <main+0xfc>)
 800420e:	f00b f8ef 	bl	800f3f0 <iprintf>
  GPIO_PinState OTA_Pin_state;
       uint32_t end_tick = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8004212:	f005 f8fd 	bl	8009410 <HAL_GetTick>
 8004216:	4603      	mov	r3, r0
 8004218:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 800421c:	60fb      	str	r3, [r7, #12]

       printf("Press the User Button PC13 to trigger OTA update...\r\n");
 800421e:	4829      	ldr	r0, [pc, #164]	@ (80042c4 <main+0x100>)
 8004220:	f00b f94e 	bl	800f4c0 <puts>
       do
       {
         OTA_Pin_state = HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8004224:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004228:	4827      	ldr	r0, [pc, #156]	@ (80042c8 <main+0x104>)
 800422a:	f005 ff55 	bl	800a0d8 <HAL_GPIO_ReadPin>
 800422e:	4603      	mov	r3, r0
 8004230:	72fb      	strb	r3, [r7, #11]
         uint32_t current_tick = HAL_GetTick();
 8004232:	f005 f8ed 	bl	8009410 <HAL_GetTick>
 8004236:	6078      	str	r0, [r7, #4]

         /* Check the button is pressed or not for 3seconds */
         if( ( OTA_Pin_state != GPIO_PIN_SET ) || ( current_tick > end_tick ) )
 8004238:	7afb      	ldrb	r3, [r7, #11]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d104      	bne.n	8004248 <main+0x84>
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	d800      	bhi.n	8004248 <main+0x84>
       {
 8004246:	e7ed      	b.n	8004224 <main+0x60>
           break;
         }
       }while( 1 );

       /*Start the Firmware or Application update */
       if( OTA_Pin_state == GPIO_PIN_RESET )
 8004248:	7afb      	ldrb	r3, [r7, #11]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d111      	bne.n	8004272 <main+0xae>
       {
         printf("Starting Firmware Download!!!\r\n");
 800424e:	481f      	ldr	r0, [pc, #124]	@ (80042cc <main+0x108>)
 8004250:	f00b f936 	bl	800f4c0 <puts>
         /* OTA Request. Receive the data from the UART4 and flash */
         if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8004254:	f7fc f98c 	bl	8000570 <etx_ota_download_and_flash>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <main+0xa4>
         {
           /* Error. Don't process. */
           printf("OTA Update : ERROR!!! HALT!!!\r\n");
 800425e:	481c      	ldr	r0, [pc, #112]	@ (80042d0 <main+0x10c>)
 8004260:	f00b f92e 	bl	800f4c0 <puts>
           while( 1 );
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <main+0xa0>
         }
         else
         {
           /* Reset to load the new application */
           printf("Firmware update is done!!! Rebooting...\r\n");
 8004268:	481a      	ldr	r0, [pc, #104]	@ (80042d4 <main+0x110>)
 800426a:	f00b f929 	bl	800f4c0 <puts>
           HAL_NVIC_SystemReset();
 800426e:	f005 fa1a 	bl	80096a6 <HAL_NVIC_SystemReset>
       }




      printf("Powering ON OPTIGA Trust M...\r\n");
 8004272:	4819      	ldr	r0, [pc, #100]	@ (80042d8 <main+0x114>)
 8004274:	f00b f924 	bl	800f4c0 <puts>

      /* Power ON the OPTIGA Trust M chip */
      pal_gpio_set_high(&optiga_vdd_0);
 8004278:	4818      	ldr	r0, [pc, #96]	@ (80042dc <main+0x118>)
 800427a:	f002 fb64 	bl	8006946 <pal_gpio_set_high>
      printf("Resetting OPTIGA...\r\n");
 800427e:	4818      	ldr	r0, [pc, #96]	@ (80042e0 <main+0x11c>)
 8004280:	f00b f91e 	bl	800f4c0 <puts>
      pal_gpio_set_low(&optiga_reset_0);
 8004284:	4817      	ldr	r0, [pc, #92]	@ (80042e4 <main+0x120>)
 8004286:	f002 fb6e 	bl	8006966 <pal_gpio_set_low>
      HAL_Delay(10);
 800428a:	200a      	movs	r0, #10
 800428c:	f005 f8cc 	bl	8009428 <HAL_Delay>
      pal_gpio_set_high(&optiga_reset_0);
 8004290:	4814      	ldr	r0, [pc, #80]	@ (80042e4 <main+0x120>)
 8004292:	f002 fb58 	bl	8006946 <pal_gpio_set_high>
      HAL_Delay(10);
 8004296:	200a      	movs	r0, #10
 8004298:	f005 f8c6 	bl	8009428 <HAL_Delay>

      /* Optional: Scan I2C to check if device responds */
      I2C_Scan(&hi2c1);
 800429c:	4812      	ldr	r0, [pc, #72]	@ (80042e8 <main+0x124>)
 800429e:	f7ff ff65 	bl	800416c <I2C_Scan>

      printf("Starting OPTIGA Trust M logic...\r\n");
 80042a2:	4812      	ldr	r0, [pc, #72]	@ (80042ec <main+0x128>)
 80042a4:	f00b f90c 	bl	800f4c0 <puts>

      /* Execute main OPTIGA logic (write, read, LED control) */
      HAL_Delay(100);
 80042a8:	2064      	movs	r0, #100	@ 0x64
 80042aa:	f005 f8bd 	bl	8009428 <HAL_Delay>
      optiga_main_logic();
 80042ae:	f7ff feef 	bl	8004090 <optiga_main_logic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80042b2:	bf00      	nop
 80042b4:	e7fd      	b.n	80042b2 <main+0xee>
 80042b6:	bf00      	nop
 80042b8:	20000a4c 	.word	0x20000a4c
 80042bc:	40020000 	.word	0x40020000
 80042c0:	0801040c 	.word	0x0801040c
 80042c4:	0801042c 	.word	0x0801042c
 80042c8:	40020800 	.word	0x40020800
 80042cc:	08010464 	.word	0x08010464
 80042d0:	08010484 	.word	0x08010484
 80042d4:	080104a4 	.word	0x080104a4
 80042d8:	080104d0 	.word	0x080104d0
 80042dc:	200004fc 	.word	0x200004fc
 80042e0:	080104f0 	.word	0x080104f0
 80042e4:	20000504 	.word	0x20000504
 80042e8:	200009f8 	.word	0x200009f8
 80042ec:	08010508 	.word	0x08010508

080042f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b094      	sub	sp, #80	@ 0x50
 80042f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042f6:	f107 0320 	add.w	r3, r7, #32
 80042fa:	2230      	movs	r2, #48	@ 0x30
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f00b f8f6 	bl	800f4f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	4b29      	ldr	r3, [pc, #164]	@ (80043c0 <SystemClock_Config+0xd0>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	4a28      	ldr	r2, [pc, #160]	@ (80043c0 <SystemClock_Config+0xd0>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004322:	6413      	str	r3, [r2, #64]	@ 0x40
 8004324:	4b26      	ldr	r3, [pc, #152]	@ (80043c0 <SystemClock_Config+0xd0>)
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004330:	2300      	movs	r3, #0
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	4b23      	ldr	r3, [pc, #140]	@ (80043c4 <SystemClock_Config+0xd4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800433c:	4a21      	ldr	r2, [pc, #132]	@ (80043c4 <SystemClock_Config+0xd4>)
 800433e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4b1f      	ldr	r3, [pc, #124]	@ (80043c4 <SystemClock_Config+0xd4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004350:	2302      	movs	r3, #2
 8004352:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004354:	2301      	movs	r3, #1
 8004356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004358:	2310      	movs	r3, #16
 800435a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800435c:	2302      	movs	r3, #2
 800435e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004360:	2300      	movs	r3, #0
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004364:	2310      	movs	r3, #16
 8004366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004368:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800436e:	2304      	movs	r3, #4
 8004370:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004372:	2307      	movs	r3, #7
 8004374:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004376:	f107 0320 	add.w	r3, r7, #32
 800437a:	4618      	mov	r0, r3
 800437c:	f008 fd2a 	bl	800cdd4 <HAL_RCC_OscConfig>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004386:	f000 f96d 	bl	8004664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800438a:	230f      	movs	r3, #15
 800438c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800438e:	2302      	movs	r3, #2
 8004390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800439a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80043a0:	f107 030c 	add.w	r3, r7, #12
 80043a4:	2102      	movs	r1, #2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f008 ff8c 	bl	800d2c4 <HAL_RCC_ClockConfig>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80043b2:	f000 f957 	bl	8004664 <Error_Handler>
  }
}
 80043b6:	bf00      	nop
 80043b8:	3750      	adds	r7, #80	@ 0x50
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000

080043c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80043cc:	2200      	movs	r2, #0
 80043ce:	2100      	movs	r1, #0
 80043d0:	201f      	movs	r0, #31
 80043d2:	f005 f93e 	bl	8009652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80043d6:	201f      	movs	r0, #31
 80043d8:	f005 f957 	bl	800968a <HAL_NVIC_EnableIRQ>
}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}

080043e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043e4:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <MX_I2C1_Init+0x50>)
 80043e6:	4a13      	ldr	r2, [pc, #76]	@ (8004434 <MX_I2C1_Init+0x54>)
 80043e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80043ea:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <MX_I2C1_Init+0x50>)
 80043ec:	4a12      	ldr	r2, [pc, #72]	@ (8004438 <MX_I2C1_Init+0x58>)
 80043ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004430 <MX_I2C1_Init+0x50>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80043f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <MX_I2C1_Init+0x50>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <MX_I2C1_Init+0x50>)
 80043fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004402:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004404:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <MX_I2C1_Init+0x50>)
 8004406:	2200      	movs	r2, #0
 8004408:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800440a:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <MX_I2C1_Init+0x50>)
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004410:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <MX_I2C1_Init+0x50>)
 8004412:	2200      	movs	r2, #0
 8004414:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <MX_I2C1_Init+0x50>)
 8004418:	2200      	movs	r2, #0
 800441a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800441c:	4804      	ldr	r0, [pc, #16]	@ (8004430 <MX_I2C1_Init+0x50>)
 800441e:	f005 fecb 	bl	800a1b8 <HAL_I2C_Init>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004428:	f000 f91c 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200009f8 	.word	0x200009f8
 8004434:	40005400 	.word	0x40005400
 8004438:	00061a80 	.word	0x00061a80

0800443c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004450:	463b      	mov	r3, r7
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004458:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <MX_TIM2_Init+0x94>)
 800445a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800445e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8004460:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <MX_TIM2_Init+0x94>)
 8004462:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8004466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004468:	4b19      	ldr	r3, [pc, #100]	@ (80044d0 <MX_TIM2_Init+0x94>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800446e:	4b18      	ldr	r3, [pc, #96]	@ (80044d0 <MX_TIM2_Init+0x94>)
 8004470:	2209      	movs	r2, #9
 8004472:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004474:	4b16      	ldr	r3, [pc, #88]	@ (80044d0 <MX_TIM2_Init+0x94>)
 8004476:	2200      	movs	r2, #0
 8004478:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <MX_TIM2_Init+0x94>)
 800447c:	2200      	movs	r2, #0
 800447e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004480:	4813      	ldr	r0, [pc, #76]	@ (80044d0 <MX_TIM2_Init+0x94>)
 8004482:	f009 f93f 	bl	800d704 <HAL_TIM_Base_Init>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800448c:	f000 f8ea 	bl	8004664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004496:	f107 0308 	add.w	r3, r7, #8
 800449a:	4619      	mov	r1, r3
 800449c:	480c      	ldr	r0, [pc, #48]	@ (80044d0 <MX_TIM2_Init+0x94>)
 800449e:	f009 fad3 	bl	800da48 <HAL_TIM_ConfigClockSource>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80044a8:	f000 f8dc 	bl	8004664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ac:	2300      	movs	r3, #0
 80044ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044b4:	463b      	mov	r3, r7
 80044b6:	4619      	mov	r1, r3
 80044b8:	4805      	ldr	r0, [pc, #20]	@ (80044d0 <MX_TIM2_Init+0x94>)
 80044ba:	f009 fcd5 	bl	800de68 <HAL_TIMEx_MasterConfigSynchronization>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80044c4:	f000 f8ce 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000a4c 	.word	0x20000a4c

080044d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80044d8:	4b11      	ldr	r3, [pc, #68]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 80044da:	4a12      	ldr	r2, [pc, #72]	@ (8004524 <MX_USART2_UART_Init+0x50>)
 80044dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80044de:	4b10      	ldr	r3, [pc, #64]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 80044e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80044e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80044ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 80044fa:	220c      	movs	r2, #12
 80044fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044fe:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 8004500:	2200      	movs	r2, #0
 8004502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004504:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 8004506:	2200      	movs	r2, #0
 8004508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800450a:	4805      	ldr	r0, [pc, #20]	@ (8004520 <MX_USART2_UART_Init+0x4c>)
 800450c:	f009 fd2e 	bl	800df6c <HAL_UART_Init>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004516:	f000 f8a5 	bl	8004664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000a94 	.word	0x20000a94
 8004524:	40004400 	.word	0x40004400

08004528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	605a      	str	r2, [r3, #4]
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	4b32      	ldr	r3, [pc, #200]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	4a31      	ldr	r2, [pc, #196]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004548:	f043 0304 	orr.w	r3, r3, #4
 800454c:	6313      	str	r3, [r2, #48]	@ 0x30
 800454e:	4b2f      	ldr	r3, [pc, #188]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	4b2b      	ldr	r3, [pc, #172]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	4a2a      	ldr	r2, [pc, #168]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004568:	6313      	str	r3, [r2, #48]	@ 0x30
 800456a:	4b28      	ldr	r3, [pc, #160]	@ (800460c <MX_GPIO_Init+0xe4>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	4b24      	ldr	r3, [pc, #144]	@ (800460c <MX_GPIO_Init+0xe4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	4a23      	ldr	r2, [pc, #140]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6313      	str	r3, [r2, #48]	@ 0x30
 8004586:	4b21      	ldr	r3, [pc, #132]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
 8004590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	4b1d      	ldr	r3, [pc, #116]	@ (800460c <MX_GPIO_Init+0xe4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <MX_GPIO_Init+0xe4>)
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045a2:	4b1a      	ldr	r3, [pc, #104]	@ (800460c <MX_GPIO_Init+0xe4>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80045ae:	2200      	movs	r2, #0
 80045b0:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80045b4:	4816      	ldr	r0, [pc, #88]	@ (8004610 <MX_GPIO_Init+0xe8>)
 80045b6:	f005 fda7 	bl	800a108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80045ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80045c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80045c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	4619      	mov	r1, r3
 80045d0:	4810      	ldr	r0, [pc, #64]	@ (8004614 <MX_GPIO_Init+0xec>)
 80045d2:	f005 fbfd 	bl	8009dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|GPIO_PIN_8;
 80045d6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80045da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045dc:	2301      	movs	r3, #1
 80045de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e4:	2300      	movs	r3, #0
 80045e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e8:	f107 0314 	add.w	r3, r7, #20
 80045ec:	4619      	mov	r1, r3
 80045ee:	4808      	ldr	r0, [pc, #32]	@ (8004610 <MX_GPIO_Init+0xe8>)
 80045f0:	f005 fbee 	bl	8009dd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2100      	movs	r1, #0
 80045f8:	2028      	movs	r0, #40	@ 0x28
 80045fa:	f005 f82a 	bl	8009652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045fe:	2028      	movs	r0, #40	@ 0x28
 8004600:	f005 f843 	bl	800968a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004604:	bf00      	nop
 8004606:	3728      	adds	r7, #40	@ 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	40020000 	.word	0x40020000
 8004614:	40020800 	.word	0x40020800

08004618 <goto_application>:

/* USER CODE BEGIN 4 */


static void goto_application(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
    printf("Jumping to application...\r\n");
 800461e:	480c      	ldr	r0, [pc, #48]	@ (8004650 <goto_application+0x38>)
 8004620:	f00a ff4e 	bl	800f4c0 <puts>

    // Check if the value at the application's start is a valid stack pointer (RAM range)
    jumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <goto_application+0x3c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0b      	ldr	r2, [pc, #44]	@ (8004658 <goto_application+0x40>)
 800462a:	6013      	str	r3, [r2, #0]
   	      /* Jump to user application */
   	      jumpToApplication = (pFunction)jumpAddress;
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <goto_application+0x40>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <goto_application+0x44>)
 8004634:	601a      	str	r2, [r3, #0]
   	      /* Initialize user application's Stack Pointer */
   	      __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <goto_application+0x48>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f383 8808 	msr	MSP, r3
}
 8004642:	bf00      	nop
   	      jumpToApplication();
 8004644:	4b05      	ldr	r3, [pc, #20]	@ (800465c <goto_application+0x44>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4798      	blx	r3

    while (1); // should never be hit if jump is successful
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <goto_application+0x32>
 800464e:	bf00      	nop
 8004650:	0801052c 	.word	0x0801052c
 8004654:	08020004 	.word	0x08020004
 8004658:	200009f4 	.word	0x200009f4
 800465c:	200009f0 	.word	0x200009f0
 8004660:	08020000 	.word	0x08020000

08004664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004668:	b672      	cpsid	i
}
 800466a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <Error_Handler+0x8>

08004670 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
 800467c:	4613      	mov	r3, r2
 800467e:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8004680:	78bb      	ldrb	r3, [r7, #2]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d00e      	beq.n	80046a4 <optiga_cmd_set_shielded_connection_option+0x34>
 8004686:	2b02      	cmp	r3, #2
 8004688:	dc10      	bgt.n	80046ac <optiga_cmd_set_shielded_connection_option+0x3c>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <optiga_cmd_set_shielded_connection_option+0x24>
 800468e:	2b01      	cmp	r3, #1
 8004690:	d004      	beq.n	800469c <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 8004692:	e00b      	b.n	80046ac <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	769a      	strb	r2, [r3, #26]
        break;
 800469a:	e008      	b.n	80046ae <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	76da      	strb	r2, [r3, #27]
        break;
 80046a2:	e004      	b.n	80046ae <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	771a      	strb	r2, [r3, #28]
        break;
 80046aa:	e000      	b.n	80046ae <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 80046ac:	bf00      	nop
    }
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
 80046c6:	460b      	mov	r3, r1
 80046c8:	71bb      	strb	r3, [r7, #6]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	79fa      	ldrb	r2, [r7, #7]
 80046d2:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	79ba      	ldrb	r2, [r7, #6]
 80046da:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80046dc:	88bb      	ldrh	r3, [r7, #4]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3302      	adds	r3, #2
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	3303      	adds	r3, #3
 80046ee:	88ba      	ldrh	r2, [r7, #4]
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60ba      	str	r2, [r7, #8]
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	4603      	mov	r3, r0
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	460b      	mov	r3, r1
 8004710:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 8004718:	8afb      	ldrh	r3, [r7, #22]
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	82fa      	strh	r2, [r7, #22]
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4413      	add	r3, r2
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8004728:	89bb      	ldrh	r3, [r7, #12]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	b29a      	uxth	r2, r3
 800472e:	8afb      	ldrh	r3, [r7, #22]
 8004730:	1c59      	adds	r1, r3, #1
 8004732:	82f9      	strh	r1, [r7, #22]
 8004734:	4619      	mov	r1, r3
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	440b      	add	r3, r1
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 800473e:	8afb      	ldrh	r3, [r7, #22]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	82fa      	strh	r2, [r7, #22]
 8004744:	461a      	mov	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4413      	add	r3, r2
 800474a:	89ba      	ldrh	r2, [r7, #12]
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8afa      	ldrh	r2, [r7, #22]
 8004754:	801a      	strh	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 800476a:	2100      	movs	r1, #0
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 ff6f 	bl	8005650 <optiga_cmd_execute_handler>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	461a      	mov	r2, r3
 8004786:	460b      	mov	r3, r1
 8004788:	72fb      	strb	r3, [r7, #11]
 800478a:	4613      	mov	r3, r2
 800478c:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	7aba      	ldrb	r2, [r7, #10]
 8004798:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	7e3a      	ldrb	r2, [r7, #24]
 800479e:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	7afa      	ldrb	r2, [r7, #11]
 80047b0:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8c3a      	ldrh	r2, [r7, #32]
 80047b6:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80047b8:	2100      	movs	r1, #0
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 ff48 	bl	8005650 <optiga_cmd_execute_handler>
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3308      	adds	r3, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 fece 	bl	8006576 <optiga_common_get_uint32>
 80047da:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 80047e2:	d201      	bcs.n	80047e8 <optiga_cmd_session_available+0x20>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <optiga_cmd_session_available+0x22>
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3308      	adds	r3, #8
 8004802:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8a9b      	ldrh	r3, [r3, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d11d      	bne.n	8004848 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800480c:	2300      	movs	r3, #0
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e017      	b.n	8004842 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b10      	cmp	r3, #16
 800481c:	d00e      	beq.n	800483c <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	b21a      	sxth	r2, r3
 8004822:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <optiga_cmd_session_assign+0x60>)
 8004824:	4313      	orrs	r3, r2
 8004826:	b21b      	sxth	r3, r3
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	4413      	add	r3, r2
 8004834:	2210      	movs	r2, #16
 8004836:	701a      	strb	r2, [r3, #0]
                break;
 8004838:	bf00      	nop
            }
        }
    }
}
 800483a:	e005      	b.n	8004848 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	3301      	adds	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d9e4      	bls.n	8004812 <optiga_cmd_session_assign+0x1e>
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	ffffe100 	.word	0xffffe100

08004858 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3308      	adds	r3, #8
 8004866:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	8a9b      	ldrh	r3, [r3, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8a9b      	ldrh	r3, [r3, #20]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
    }
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
 80048a4:	4613      	mov	r3, r2
 80048a6:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e027      	b.n	8004906 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d002      	beq.n	80048c2 <optiga_cmd_queue_get_count_of+0x2a>
 80048bc:	2b09      	cmp	r3, #9
 80048be:	d00c      	beq.n	80048da <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 80048c0:	e017      	b.n	80048f2 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	737b      	strb	r3, [r7, #13]
            break;
 80048d8:	e00b      	b.n	80048f2 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	737b      	strb	r3, [r7, #13]
            break;
 80048f0:	bf00      	nop
        }
        if (state_to_check == slot_value)
 80048f2:	78ba      	ldrb	r2, [r7, #2]
 80048f4:	7b7b      	ldrb	r3, [r7, #13]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d102      	bne.n	8004900 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 80048fa:	7bbb      	ldrb	r3, [r7, #14]
 80048fc:	3301      	adds	r3, #1
 80048fe:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	3301      	adds	r3, #1
 8004904:	73fb      	strb	r3, [r7, #15]
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b05      	cmp	r3, #5
 800490a:	d9d4      	bls.n	80048b6 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 800490c:	7bbb      	ldrb	r3, [r7, #14]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	e01f      	b.n	800496a <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6819      	ldr	r1, [r3, #0]
 800492e:	7bfa      	ldrb	r2, [r7, #15]
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6819      	ldr	r1, [r3, #0]
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	4613      	mov	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
           break;
 8004962:	e006      	b.n	8004972 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	3301      	adds	r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d9dc      	bls.n	800492a <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7f9b      	ldrb	r3, [r3, #30]
 800498e:	4619      	mov	r1, r3
 8004990:	460b      	mov	r3, r1
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	440b      	add	r3, r1
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	7f9b      	ldrb	r3, [r3, #30]
 80049aa:	4619      	mov	r1, r3
 80049ac:	460b      	mov	r3, r1
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	440b      	add	r3, r1
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	779a      	strb	r2, [r3, #30]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049dc:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 80049de:	23ff      	movs	r3, #255	@ 0xff
 80049e0:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80049f0:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 80049f2:	2202      	movs	r2, #2
 80049f4:	2109      	movs	r1, #9
 80049f6:	6978      	ldr	r0, [r7, #20]
 80049f8:	f7ff ff4e 	bl	8004898 <optiga_cmd_queue_get_count_of>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004a02:	2208      	movs	r2, #8
 8004a04:	2109      	movs	r1, #9
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7ff ff46 	bl	8004898 <optiga_cmd_queue_get_count_of>
 8004a0c:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00f      	beq.n	8004a32 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004a12:	2204      	movs	r2, #4
 8004a14:	2109      	movs	r1, #9
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff ff3e 	bl	8004898 <optiga_cmd_queue_get_count_of>
 8004a1c:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10f      	bne.n	8004a42 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 8004a22:	2223      	movs	r2, #35	@ 0x23
 8004a24:	2108      	movs	r1, #8
 8004a26:	6978      	ldr	r0, [r7, #20]
 8004a28:	f7ff ff36 	bl	8004898 <optiga_cmd_queue_get_count_of>
 8004a2c:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 8004a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	496d      	ldr	r1, [pc, #436]	@ (8004bf0 <optiga_cmd_queue_scheduler+0x220>)
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f002 f9cc 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8004a40:	e0d2      	b.n	8004be8 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 8004a42:	6938      	ldr	r0, [r7, #16]
 8004a44:	f002 f9a2 	bl	8006d8c <pal_os_event_stop>
            if(overflow_detected == TRUE)
 8004a48:	7e7b      	ldrb	r3, [r7, #25]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d105      	bne.n	8004a5a <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	76fb      	strb	r3, [r7, #27]
 8004a5e:	e05b      	b.n	8004b18 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8004a60:	7efa      	ldrb	r2, [r7, #27]
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4413      	add	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004a74:	2208      	movs	r2, #8
 8004a76:	2109      	movs	r1, #9
 8004a78:	6978      	ldr	r0, [r7, #20]
 8004a7a:	f7ff ff0d 	bl	8004898 <optiga_cmd_queue_get_count_of>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10d      	bne.n	8004aa0 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	7a5b      	ldrb	r3, [r3, #9]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d142      	bne.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004a90:	2b23      	cmp	r3, #35	@ 0x23
 8004a92:	d13e      	bne.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8004a9a:	7efb      	ldrb	r3, [r7, #27]
 8004a9c:	76bb      	strb	r3, [r7, #26]
 8004a9e:	e038      	b.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	7a5b      	ldrb	r3, [r3, #9]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d134      	bne.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d201      	bcs.n	8004aba <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d326      	bcc.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d31f      	bcc.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8004ad6:	2b22      	cmp	r3, #34	@ 0x22
 8004ad8:	d105      	bne.n	8004ae6 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff fe74 	bl	80047c8 <optiga_cmd_session_available>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d010      	beq.n	8004b08 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8004aea:	2b22      	cmp	r3, #34	@ 0x22
 8004aec:	d104      	bne.n	8004af8 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	8a9b      	ldrh	r3, [r3, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8004afc:	2b21      	cmp	r3, #33	@ 0x21
 8004afe:	d003      	beq.n	8004b08 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004b04:	2b23      	cmp	r3, #35	@ 0x23
 8004b06:	d104      	bne.n	8004b12 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 8004b0e:	7efb      	ldrb	r3, [r7, #27]
 8004b10:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004b12:	7efb      	ldrb	r3, [r7, #27]
 8004b14:	3301      	adds	r3, #1
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	7efb      	ldrb	r3, [r7, #27]
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d9a0      	bls.n	8004a60 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 8004b1e:	7ebb      	ldrb	r3, [r7, #26]
 8004b20:	2bff      	cmp	r3, #255	@ 0xff
 8004b22:	d102      	bne.n	8004b2a <optiga_cmd_queue_scheduler+0x15a>
 8004b24:	7e7b      	ldrb	r3, [r7, #25]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d08e      	beq.n	8004a48 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 8004b2a:	7ebb      	ldrb	r3, [r7, #26]
 8004b2c:	2bff      	cmp	r3, #255	@ 0xff
 8004b2e:	d054      	beq.n	8004bda <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 8004b30:	7eba      	ldrb	r2, [r7, #26]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004b44:	7eba      	ldrb	r2, [r7, #26]
 8004b46:	6979      	ldr	r1, [r7, #20]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b22      	cmp	r3, #34	@ 0x22
 8004b5a:	d111      	bne.n	8004b80 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8004b66:	7eba      	ldrb	r2, [r7, #26]
 8004b68:	6979      	ldr	r1, [r7, #20]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fe3a 	bl	80047f4 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8004b80:	7eba      	ldrb	r2, [r7, #26]
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004b9a:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8004b9c:	7eba      	ldrb	r2, [r7, #26]
 8004b9e:	6979      	ldr	r1, [r7, #20]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	2332      	movs	r3, #50	@ 0x32
 8004bb2:	4910      	ldr	r1, [pc, #64]	@ (8004bf4 <optiga_cmd_queue_scheduler+0x224>)
 8004bb4:	6938      	ldr	r0, [r7, #16]
 8004bb6:	f002 f90f 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8004bba:	7eba      	ldrb	r2, [r7, #26]
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004bcc:	2204      	movs	r2, #4
 8004bce:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 8004bd8:	e006      	b.n	8004be8 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8004bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4903      	ldr	r1, [pc, #12]	@ (8004bf0 <optiga_cmd_queue_scheduler+0x220>)
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f002 f8f8 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
}
 8004be8:	bf00      	nop
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	080049d1 	.word	0x080049d1
 8004bf4:	08004763 	.word	0x08004763

08004bf8 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004bf8:	b5b0      	push	{r4, r5, r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	7f9b      	ldrb	r3, [r3, #30]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	460b      	mov	r3, r1
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	440b      	add	r3, r1
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b23      	cmp	r3, #35	@ 0x23
 8004c20:	d111      	bne.n	8004c46 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7f9b      	ldrb	r3, [r3, #30]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	440b      	add	r3, r1
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004c3a:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004c3c:	2b23      	cmp	r3, #35	@ 0x23
 8004c3e:	d112      	bne.n	8004c66 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	2b23      	cmp	r3, #35	@ 0x23
 8004c44:	d00f      	beq.n	8004c66 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681c      	ldr	r4, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7f9b      	ldrb	r3, [r3, #30]
 8004c4e:	461d      	mov	r5, r3
 8004c50:	f002 f97e 	bl	8006f50 <pal_os_timer_get_time_in_microseconds>
 8004c54:	4602      	mov	r2, r0
 8004c56:	462b      	mov	r3, r5
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	442b      	add	r3, r5
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4423      	add	r3, r4
 8004c60:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004c64:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	7f9b      	ldrb	r3, [r3, #30]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	460b      	mov	r3, r1
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	440b      	add	r3, r1
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7f9b      	ldrb	r3, [r3, #30]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	440b      	add	r3, r1
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b23      	cmp	r3, #35	@ 0x23
 8004c9e:	d111      	bne.n	8004cc4 <optiga_cmd_queue_update_slot+0xcc>
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	2b23      	cmp	r3, #35	@ 0x23
 8004ca4:	d10e      	bne.n	8004cc4 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7f9b      	ldrb	r3, [r3, #30]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	440b      	add	r3, r1
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e00d      	b.n	8004ce0 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7f9b      	ldrb	r3, [r3, #30]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	460b      	mov	r3, r1
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	440b      	add	r3, r1
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004cdc:	2202      	movs	r2, #2
 8004cde:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7f9b      	ldrb	r3, [r3, #30]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	460b      	mov	r3, r1
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	440b      	add	r3, r1
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	701a      	strb	r2, [r3, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bdb0      	pop	{r4, r5, r7, pc}

08004d04 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	7f9b      	ldrb	r3, [r3, #30]
 8004d14:	4619      	mov	r1, r3
 8004d16:	460b      	mov	r3, r1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	440b      	add	r3, r1
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d28:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f9b      	ldrb	r3, [r3, #30]
 8004d32:	4619      	mov	r1, r3
 8004d34:	460b      	mov	r3, r1
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	440b      	add	r3, r1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7f9b      	ldrb	r3, [r3, #30]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	460b      	mov	r3, r1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	440b      	add	r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7f9b      	ldrb	r3, [r3, #30]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	440b      	add	r3, r1
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4903      	ldr	r1, [pc, #12]	@ (8004d9c <optiga_cmd_queue_reset_slot+0x98>)
 8004d8e:	f001 ffe5 	bl	8006d5c <pal_os_event_start>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	080049d1 	.word	0x080049d1

08004da0 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7f9b      	ldrb	r3, [r3, #30]
 8004db0:	4619      	mov	r1, r3
 8004db2:	460b      	mov	r3, r1
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	440b      	add	r3, r1
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7f9b      	ldrb	r3, [r3, #30]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	460b      	mov	r3, r1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	440b      	add	r3, r1
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004df4:	2122      	movs	r1, #34	@ 0x22
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fefe 	bl	8004bf8 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fd22 	bl	8004858 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	460b      	mov	r3, r1
 8004e28:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fee2 	bl	8004bf8 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff ff5c 	bl	8004d04 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8004e5e:	f240 2302 	movw	r3, #514	@ 0x202
 8004e62:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004e7c:	f107 020c 	add.w	r2, r7, #12
 8004e80:	4619      	mov	r1, r3
 8004e82:	f001 fee3 	bl	8006c4c <pal_os_datastore_read>
 8004e86:	4603      	mov	r3, r0
 8004e88:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8004e8a:	89fb      	ldrh	r3, [r7, #14]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d11a      	bne.n	8004ec6 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 fb6c 	bl	8006576 <optiga_common_get_uint32>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fb62 	bl	8006576 <optiga_common_get_uint32>
 8004eb2:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8004eb8:	f240 2302 	movw	r3, #514	@ 0x202
 8004ebc:	81fb      	strh	r3, [r7, #14]
            break;
 8004ebe:	e003      	b.n	8004ec8 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	81fb      	strh	r3, [r7, #14]
 8004ec4:	e000      	b.n	8004ec8 <optiga_cmd_restore_context+0x72>
                break;
 8004ec6:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8004ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	7e5b      	ldrb	r3, [r3, #25]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d029      	beq.n	8004f3a <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 8004eea:	2b22      	cmp	r3, #34	@ 0x22
 8004eec:	d125      	bne.n	8004f3a <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 f810 	bl	8006f20 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004f04:	2b33      	cmp	r3, #51	@ 0x33
 8004f06:	d118      	bne.n	8004f3a <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d014      	beq.n	8004f3a <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	4619      	mov	r1, r3
 8004f20:	f001 fe16 	bl	8006b50 <pal_os_datastore_write>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461a      	mov	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8c1b      	ldrh	r3, [r3, #32]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2204      	movs	r2, #4
 8004f38:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7ddb      	ldrb	r3, [r3, #23]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d05f      	beq.n	800501c <optiga_cmd_execute_comms_open+0xd8>
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	dc6d      	bgt.n	800503c <optiga_cmd_execute_comms_open+0xf8>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <optiga_cmd_execute_comms_open+0x26>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d01b      	beq.n	8004fa0 <optiga_cmd_execute_comms_open+0x5c>
 8004f68:	e068      	b.n	800503c <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004f6a:	2121      	movs	r1, #33	@ 0x21
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff56 	bl	8004e1e <optiga_cmd_request_lock>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461a      	mov	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8c1b      	ldrh	r3, [r3, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2204      	movs	r2, #4
 8004f86:	759a      	strb	r2, [r3, #22]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f240 2202 	movw	r2, #514	@ 0x202
 8004f8e:	841a      	strh	r2, [r3, #32]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]
                    break;
 8004f96:	e05c      	b.n	8005052 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	75da      	strb	r2, [r3, #23]
                break;
 8004f9e:	e058      	b.n	8005052 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	7e92      	ldrb	r2, [r2, #26]
 8004faa:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	7ed2      	ldrb	r2, [r2, #27]
 8004fb6:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	7f12      	ldrb	r2, [r2, #28]
 8004fc2:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004fd2:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f001 f85c 	bl	800609a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 f865 	bl	80060b8 <optiga_comms_open>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8c1b      	ldrh	r3, [r3, #32]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2204      	movs	r2, #4
 8005002:	759a      	strb	r2, [r3, #22]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f240 2202 	movw	r2, #514	@ 0x202
 800500a:	841a      	strh	r2, [r3, #32]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
                    break;
 8005012:	e01e      	b.n	8005052 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	75da      	strb	r2, [r3, #23]
                break;
 800501a:	e01a      	b.n	8005052 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005024:	2332      	movs	r3, #50	@ 0x32
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4910      	ldr	r1, [pc, #64]	@ (800506c <optiga_cmd_execute_comms_open+0x128>)
 800502a:	f001 fed5 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2209      	movs	r2, #9
 8005038:	75da      	strb	r2, [r3, #23]
                break;
 800503a:	e00a      	b.n	8005052 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2204      	movs	r2, #4
 8005040:	759a      	strb	r2, [r3, #22]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f240 2202 	movw	r2, #514	@ 0x202
 8005048:	841a      	strh	r2, [r3, #32]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
            break;
 8005050:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <optiga_cmd_execute_comms_open+0x120>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	7d9b      	ldrb	r3, [r3, #22]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f43f af75 	beq.w	8004f4e <optiga_cmd_execute_comms_open+0xa>
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	08004763 	.word	0x08004763

08005070 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7ddb      	ldrb	r3, [r3, #23]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d002      	beq.n	800508e <optiga_cmd_execute_comms_close+0x1e>
 8005088:	2b04      	cmp	r3, #4
 800508a:	d068      	beq.n	800515e <optiga_cmd_execute_comms_close+0xee>
 800508c:	e07a      	b.n	8005184 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	7f1b      	ldrb	r3, [r3, #28]
 8005092:	2b22      	cmp	r3, #34	@ 0x22
 8005094:	d002      	beq.n	800509c <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2204      	movs	r2, #4
 800509a:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	7e92      	ldrb	r2, [r2, #26]
 80050a6:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	7ed2      	ldrb	r2, [r2, #27]
 80050b2:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	7f12      	ldrb	r2, [r2, #28]
 80050ca:	751a      	strb	r2, [r3, #20]
 80050cc:	e004      	b.n	80050d8 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2233      	movs	r2, #51	@ 0x33
 80050d6:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 80050f6:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 ffca 	bl	800609a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f001 f851 	bl	80061b4 <optiga_comms_close>
 8005112:	4603      	mov	r3, r0
 8005114:	461a      	mov	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8c1b      	ldrh	r3, [r3, #32]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2204      	movs	r2, #4
 8005126:	759a      	strb	r2, [r3, #22]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f240 2202 	movw	r2, #514	@ 0x202
 800512e:	841a      	strh	r2, [r3, #32]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
                    break;
 8005136:	e031      	b.n	800519c <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	7f1b      	ldrb	r3, [r3, #28]
 800513c:	2b22      	cmp	r3, #34	@ 0x22
 800513e:	d106      	bne.n	800514e <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2204      	movs	r2, #4
 8005144:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 800514c:	e026      	b.n	800519c <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fe75 	bl	8004e3e <optiga_cmd_release_lock>
 8005154:	4603      	mov	r3, r0
 8005156:	461a      	mov	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	841a      	strh	r2, [r3, #32]
                break;
 800515c:	e01e      	b.n	800519c <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68d2      	ldr	r2, [r2, #12]
 8005166:	2100      	movs	r1, #0
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	7f1b      	ldrb	r3, [r3, #28]
 8005170:	2b22      	cmp	r3, #34	@ 0x22
 8005172:	d112      	bne.n	800519a <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fe62 	bl	8004e3e <optiga_cmd_release_lock>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8005182:	e00a      	b.n	800519a <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2204      	movs	r2, #4
 8005188:	759a      	strb	r2, [r3, #22]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f240 2202 	movw	r2, #514	@ 0x202
 8005190:	841a      	strh	r2, [r3, #32]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
            break;
 8005198:	e000      	b.n	800519c <optiga_cmd_execute_comms_close+0x12c>
                break;
 800519a:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <optiga_cmd_execute_comms_close+0x13e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7d9b      	ldrb	r3, [r3, #22]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	f43f af66 	beq.w	800507a <optiga_cmd_execute_comms_close+0xa>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7ddb      	ldrb	r3, [r3, #23]
 80051cc:	3b05      	subs	r3, #5
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	f200 80d6 	bhi.w	8005380 <optiga_cmd_execute_prepare_command+0x1c8>
 80051d4:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <optiga_cmd_execute_prepare_command+0x24>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051f1 	.word	0x080051f1
 80051e0:	080051f1 	.word	0x080051f1
 80051e4:	08005245 	.word	0x08005245
 80051e8:	08005259 	.word	0x08005259
 80051ec:	08005295 	.word	0x08005295
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	7ddb      	ldrb	r3, [r3, #23]
 80051fa:	2b05      	cmp	r3, #5
 80051fc:	d107      	bne.n	800520e <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fdf4 	bl	8004dec <optiga_cmd_request_session>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	841a      	strh	r2, [r3, #32]
 800520c:	e007      	b.n	800521e <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800520e:	2121      	movs	r1, #33	@ 0x21
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff fe04 	bl	8004e1e <optiga_cmd_request_lock>
 8005216:	4603      	mov	r3, r0
 8005218:	461a      	mov	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8c1b      	ldrh	r3, [r3, #32]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2204      	movs	r2, #4
 800522a:	759a      	strb	r2, [r3, #22]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f240 2202 	movw	r2, #514	@ 0x202
 8005232:	841a      	strh	r2, [r3, #32]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
                    break;
 800523a:	e0ac      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2209      	movs	r2, #9
 8005240:	75da      	strb	r2, [r3, #23]
                break;
 8005242:	e0a8      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fdab 	bl	8004da0 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2208      	movs	r2, #8
 800524e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
                break;
 8005256:	e09e      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8005258:	2123      	movs	r1, #35	@ 0x23
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fddf 	bl	8004e1e <optiga_cmd_request_lock>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8c1b      	ldrh	r3, [r3, #32]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	759a      	strb	r2, [r3, #22]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f240 2202 	movw	r2, #514	@ 0x202
 800527c:	841a      	strh	r2, [r3, #32]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
                    break;
 8005284:	e087      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2209      	movs	r2, #9
 800528a:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
                break;
 8005292:	e080      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	4798      	blx	r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8c1b      	ldrh	r3, [r3, #32]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2204      	movs	r2, #4
 80052b4:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
                    break;
 80052bc:	e06b      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f240 6222 	movw	r2, #1570	@ 0x622
 80052c6:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	7e92      	ldrb	r2, [r2, #26]
 80052d2:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	7ed2      	ldrb	r2, [r2, #27]
 80052de:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	7e9a      	ldrb	r2, [r3, #26]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 feca 	bl	800609a <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005318:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8005326:	3306      	adds	r3, #6
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4623      	mov	r3, r4
 800532c:	f000 fefc 	bl	8006128 <optiga_comms_transceive>
 8005330:	4603      	mov	r3, r0
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8c1b      	ldrh	r3, [r3, #32]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2204      	movs	r2, #4
 8005344:	759a      	strb	r2, [r3, #22]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f240 2202 	movw	r2, #514	@ 0x202
 800534c:	841a      	strh	r2, [r3, #32]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
                    break;
 8005354:	e01f      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2203      	movs	r2, #3
 800535a:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	220a      	movs	r2, #10
 8005360:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	7f5b      	ldrb	r3, [r3, #29]
 8005366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536a:	b2da      	uxtb	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	775a      	strb	r2, [r3, #29]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7f5b      	ldrb	r3, [r3, #29]
 8005374:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005378:	b2da      	uxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	775a      	strb	r2, [r3, #29]
                break;
 800537e:	e00a      	b.n	8005396 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2204      	movs	r2, #4
 8005384:	759a      	strb	r2, [r3, #22]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f240 2202 	movw	r2, #514	@ 0x202
 800538c:	841a      	strh	r2, [r3, #32]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
            break;
 8005394:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <optiga_cmd_execute_prepare_command+0x1f0>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7d9b      	ldrb	r3, [r3, #22]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	f43f af10 	beq.w	80051c8 <optiga_cmd_execute_prepare_command+0x10>
}
 80053a8:	bf00      	nop
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd90      	pop	{r4, r7, pc}

080053b0 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fa69 	bl	8005898 <optiga_cmd_get_error_code_handler>
 80053c6:	4603      	mov	r3, r0
 80053c8:	461a      	mov	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8c1b      	ldrh	r3, [r3, #32]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <optiga_cmd_execute_get_device_error+0x30>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8c1b      	ldrh	r3, [r3, #32]
 80053da:	b21b      	sxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da0a      	bge.n	80053f6 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e8:	d10c      	bne.n	8005404 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	7f5b      	ldrb	r3, [r3, #29]
 80053ee:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d106      	bne.n	8005404 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2204      	movs	r2, #4
 80053fa:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
            break;
 8005402:	bf00      	nop
        }
    } while (FALSE);
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7f5b      	ldrb	r3, [r3, #29]
 8005426:	b25b      	sxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	da0b      	bge.n	8005444 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	4798      	blx	r3
 8005432:	4603      	mov	r3, r0
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	8c1b      	ldrh	r3, [r3, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d14e      	bne.n	80054e0 <optiga_cmd_execute_process_optiga_response+0xd4>
 8005442:	e006      	b.n	8005452 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2204      	movs	r2, #4
 8005448:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
            break;
 8005450:	e06f      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2bf1      	cmp	r3, #241	@ 0xf1
 800545a:	d113      	bne.n	8005484 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	@ (800553c <optiga_cmd_execute_process_optiga_response+0x130>)
 800546c:	f001 fcb4 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2203      	movs	r2, #3
 8005480:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8005482:	e056      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	7e1b      	ldrb	r3, [r3, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10e      	bne.n	80054aa <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	7ddb      	ldrb	r3, [r3, #23]
 8005490:	2b0e      	cmp	r3, #14
 8005492:	d006      	beq.n	80054a2 <optiga_cmd_execute_process_optiga_response+0x96>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	7ddb      	ldrb	r3, [r3, #23]
 8005498:	2b0d      	cmp	r3, #13
 800549a:	d002      	beq.n	80054a2 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	220c      	movs	r2, #12
 80054a0:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
                    break;
 80054a8:	e043      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 80054b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	4920      	ldr	r1, [pc, #128]	@ (800553c <optiga_cmd_execute_process_optiga_response+0x130>)
 80054ba:	f001 fc8d 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	7e9b      	ldrb	r3, [r3, #26]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2209      	movs	r2, #9
 80054dc:	75da      	strb	r2, [r3, #23]
}
 80054de:	e028      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8c1b      	ldrh	r3, [r3, #32]
 80054e4:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 80054e8:	d106      	bne.n	80054f8 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	220c      	movs	r2, #12
 80054ee:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
                break;
 80054f6:	e01c      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7ddb      	ldrb	r3, [r3, #23]
 80054fc:	2b0d      	cmp	r3, #13
 80054fe:	d103      	bne.n	8005508 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
}
 8005506:	e014      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	220b      	movs	r2, #11
 800550c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7f5b      	ldrb	r3, [r3, #29]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	775a      	strb	r2, [r3, #29]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7f5b      	ldrb	r3, [r3, #29]
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	b2da      	uxtb	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
}
 8005530:	e7ff      	b.n	8005532 <optiga_cmd_execute_process_optiga_response+0x126>
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	08004763 	.word	0x08004763

08005540 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	7ddb      	ldrb	r3, [r3, #23]
 800554e:	3b0a      	subs	r3, #10
 8005550:	2b04      	cmp	r3, #4
 8005552:	d84d      	bhi.n	80055f0 <optiga_cmd_execute_process_response+0xb0>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <optiga_cmd_execute_process_response+0x1c>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005571 	.word	0x08005571
 8005560:	0800557b 	.word	0x0800557b
 8005564:	080055c5 	.word	0x080055c5
 8005568:	08005585 	.word	0x08005585
 800556c:	080055d9 	.word	0x080055d9
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ff4a 	bl	800540c <optiga_cmd_execute_process_optiga_response>
                break;
 8005578:	e045      	b.n	8005606 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ff17 	bl	80053b0 <optiga_cmd_execute_get_device_error>
                break;
 8005582:	e040      	b.n	8005606 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fc3e 	bl	8004e06 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8c1b      	ldrh	r3, [r3, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	220c      	movs	r2, #12
 8005596:	75da      	strb	r2, [r3, #23]
 8005598:	e010      	b.n	80055bc <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	220b      	movs	r2, #11
 800559e:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7f5b      	ldrb	r3, [r3, #29]
 80055a4:	f023 0303 	bic.w	r3, r3, #3
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	775a      	strb	r2, [r3, #29]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	7f5b      	ldrb	r3, [r3, #29]
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
                break;
 80055c2:	e020      	b.n	8005606 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fc3a 	bl	8004e3e <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	220e      	movs	r2, #14
 80055ce:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
                break;
 80055d6:	e016      	b.n	8005606 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68d0      	ldr	r0, [r2, #12]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	8c12      	ldrh	r2, [r2, #32]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4798      	blx	r3
                *exit_loop = TRUE;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2201      	movs	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
                break;
 80055ee:	e00a      	b.n	8005606 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2204      	movs	r2, #4
 80055f4:	759a      	strb	r2, [r3, #22]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f240 2202 	movw	r2, #514	@ 0x202
 80055fc:	841a      	strh	r2, [r3, #32]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
            break;
 8005604:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <optiga_cmd_execute_process_response+0xd6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	7d9b      	ldrb	r3, [r3, #22]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d099      	beq.n	800554a <optiga_cmd_execute_process_response+0xa>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop

08005620 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fc07 	bl	8004e3e <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68d0      	ldr	r0, [r2, #12]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	8c12      	ldrh	r2, [r2, #32]
 800563c:	4611      	mov	r1, r2
 800563e:	4798      	blx	r3
        *exit_loop = TRUE;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 800565c:	2301      	movs	r3, #1
 800565e:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fc31 	bl	8004ed2 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2204      	movs	r2, #4
 8005674:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	887a      	ldrh	r2, [r7, #2]
 800567a:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	7d9b      	ldrb	r3, [r3, #22]
 8005680:	2b04      	cmp	r3, #4
 8005682:	d830      	bhi.n	80056e6 <optiga_cmd_execute_handler+0x96>
 8005684:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <optiga_cmd_execute_handler+0x3c>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056a1 	.word	0x080056a1
 8005690:	080056af 	.word	0x080056af
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056cb 	.word	0x080056cb
 800569c:	080056d9 	.word	0x080056d9
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 80056a0:	f107 030b 	add.w	r3, r7, #11
 80056a4:	4619      	mov	r1, r3
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fc4c 	bl	8004f44 <optiga_cmd_execute_comms_open>
                break;
 80056ac:	e01c      	b.n	80056e8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 80056ae:	f107 030b 	add.w	r3, r7, #11
 80056b2:	4619      	mov	r1, r3
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7ff fcdb 	bl	8005070 <optiga_cmd_execute_comms_close>
                break;
 80056ba:	e015      	b.n	80056e8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 80056bc:	f107 030b 	add.w	r3, r7, #11
 80056c0:	4619      	mov	r1, r3
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fd78 	bl	80051b8 <optiga_cmd_execute_prepare_command>
                break;
 80056c8:	e00e      	b.n	80056e8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 80056ca:	f107 030b 	add.w	r3, r7, #11
 80056ce:	4619      	mov	r1, r3
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff ff35 	bl	8005540 <optiga_cmd_execute_process_response>
                break;
 80056d6:	e007      	b.n	80056e8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 80056d8:	f107 030b 	add.w	r3, r7, #11
 80056dc:	4619      	mov	r1, r3
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff9e 	bl	8005620 <optiga_cmd_execute_error_handler>
                break;
 80056e4:	e000      	b.n	80056e8 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 80056e6:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 80056e8:	7afb      	ldrb	r3, [r7, #11]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0c6      	beq.n	800567c <optiga_cmd_execute_handler+0x2c>
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 80056f8:	b590      	push	{r4, r7, lr}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 800570a:	f001 fbd3 	bl	8006eb4 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d15b      	bne.n	80057cc <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	4a33      	ldr	r2, [pc, #204]	@ (80057e4 <optiga_cmd_create+0xec>)
 8005718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571c:	2200      	movs	r2, #0
 800571e:	2109      	movs	r1, #9
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff f8b9 	bl	8004898 <optiga_cmd_queue_get_count_of>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d051      	beq.n	80057d0 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 800572c:	2128      	movs	r1, #40	@ 0x28
 800572e:	2001      	movs	r0, #1
 8005730:	f001 fbce 	bl	8006ed0 <pal_os_calloc>
 8005734:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d04b      	beq.n	80057d4 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	4a26      	ldr	r2, [pc, #152]	@ (80057e4 <optiga_cmd_create+0xec>)
 800574c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	4a24      	ldr	r2, [pc, #144]	@ (80057e8 <optiga_cmd_create+0xf0>)
 8005758:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	7b1b      	ldrb	r3, [r3, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d129      	bne.n	80057be <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681c      	ldr	r4, [r3, #0]
 8005772:	4611      	mov	r1, r2
 8005774:	481d      	ldr	r0, [pc, #116]	@ (80057ec <optiga_cmd_create+0xf4>)
 8005776:	f001 fb17 	bl	8006da8 <pal_os_event_create>
 800577a:	4603      	mov	r3, r0
 800577c:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681c      	ldr	r4, [r3, #0]
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	481a      	ldr	r0, [pc, #104]	@ (80057f0 <optiga_cmd_create+0xf8>)
 8005788:	f000 fc4a 	bl	8006020 <optiga_comms_create>
 800578c:	4603      	mov	r3, r0
 800578e:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 800579a:	6978      	ldr	r0, [r7, #20]
 800579c:	f001 fba6 	bl	8006eec <pal_os_free>
                me = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
                break;
 80057a4:	e017      	b.n	80057d6 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2201      	movs	r2, #1
 80057ac:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 80057bc:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	331e      	adds	r3, #30
 80057c2:	4619      	mov	r1, r3
 80057c4:	6978      	ldr	r0, [r7, #20]
 80057c6:	f7ff f8a8 	bl	800491a <optiga_cmd_queue_assign_slot>
 80057ca:	e004      	b.n	80057d6 <optiga_cmd_create+0xde>
            break;
 80057cc:	bf00      	nop
 80057ce:	e002      	b.n	80057d6 <optiga_cmd_create+0xde>
            break;
 80057d0:	bf00      	nop
 80057d2:	e000      	b.n	80057d6 <optiga_cmd_create+0xde>
            break;
 80057d4:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 80057d6:	f001 fb74 	bl	8006ec2 <pal_os_lock_exit_critical_section>
    return (me);
 80057da:	697b      	ldr	r3, [r7, #20]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd90      	pop	{r4, r7, pc}
 80057e4:	200004cc 	.word	0x200004cc
 80057e8:	200004d0 	.word	0x200004d0
 80057ec:	080049d1 	.word	0x080049d1
 80057f0:	08005651 	.word	0x08005651

080057f4 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80057fc:	f240 2302 	movw	r3, #514	@ 0x202
 8005800:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 8005802:	f001 fb57 	bl	8006eb4 <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d03c      	beq.n	8005886 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fafa 	bl	8004e06 <optiga_cmd_release_session>
 8005812:	4603      	mov	r3, r0
 8005814:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff f8b1 	bl	800497e <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 800581c:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <optiga_cmd_destroy+0xa0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2200      	movs	r2, #0
 8005822:	2109      	movs	r1, #9
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff f837 	bl	8004898 <optiga_cmd_queue_get_count_of>
 800582a:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 800582c:	2b06      	cmp	r3, #6
 800582e:	d125      	bne.n	800587c <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	7b1b      	ldrb	r3, [r3, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d120      	bne.n	800587c <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f001 faa2 	bl	8006d8c <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2200      	movs	r2, #0
 800584e:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fc03 	bl	800606c <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8005876:	4618      	mov	r0, r3
 8005878:	f001 fb12 	bl	8006ea0 <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fb35 	bl	8006eec <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 8005882:	2300      	movs	r3, #0
 8005884:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 8005886:	f001 fb1c 	bl	8006ec2 <pal_os_lock_exit_critical_section>

    return (return_status);
 800588a:	89fb      	ldrh	r3, [r7, #14]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200004cc 	.word	0x200004cc

08005898 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b087      	sub	sp, #28
 800589c:	af02      	add	r7, sp, #8
 800589e:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 80058a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058a4:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80058a6:	2309      	movs	r3, #9
 80058a8:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7f5b      	ldrb	r3, [r3, #29]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	f000 8099 	beq.w	80059f0 <optiga_cmd_get_error_code_handler+0x158>
 80058be:	2b03      	cmp	r3, #3
 80058c0:	f300 80b6 	bgt.w	8005a30 <optiga_cmd_get_error_code_handler+0x198>
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d002      	beq.n	80058ce <optiga_cmd_get_error_code_handler+0x36>
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d052      	beq.n	8005972 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 80058cc:	e0b0      	b.n	8005a30 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f103 020d 	add.w	r2, r3, #13
 80058d6:	89bb      	ldrh	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe11 	bl	8006506 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80058e4:	89bb      	ldrh	r3, [r7, #12]
 80058e6:	3302      	adds	r3, #2
 80058e8:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f103 020d 	add.w	r2, r3, #13
 80058f2:	89bb      	ldrh	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	2100      	movs	r1, #0
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fe04 	bl	8006506 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80058fe:	89bb      	ldrh	r3, [r7, #12]
 8005900:	3302      	adds	r3, #2
 8005902:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f103 020d 	add.w	r2, r3, #13
 800590c:	89bb      	ldrh	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	2101      	movs	r1, #1
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fdf7 	bl	8006506 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005918:	89bb      	ldrh	r3, [r7, #12]
 800591a:	3302      	adds	r3, #2
 800591c:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800591e:	89bb      	ldrh	r3, [r7, #12]
 8005920:	3b09      	subs	r3, #9
 8005922:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800592a:	3305      	adds	r3, #5
 800592c:	2100      	movs	r1, #0
 800592e:	2001      	movs	r0, #1
 8005930:	f7fe fec3 	bl	80046ba <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	89ba      	ldrh	r2, [r7, #12]
 800593a:	3a05      	subs	r2, #5
 800593c:	b292      	uxth	r2, r2
 800593e:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	7f5b      	ldrb	r3, [r3, #29]
 8005944:	f023 0303 	bic.w	r3, r3, #3
 8005948:	b2da      	uxtb	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	775a      	strb	r2, [r3, #29]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7f5b      	ldrb	r3, [r3, #29]
 8005952:	f043 0302 	orr.w	r3, r3, #2
 8005956:	b2da      	uxtb	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005964:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4935      	ldr	r1, [pc, #212]	@ (8005a40 <optiga_cmd_get_error_code_handler+0x1a8>)
 800596c:	f001 fa34 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
        break;
 8005970:	e061      	b.n	8005a36 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f240 6222 	movw	r2, #1570	@ 0x622
 800597a:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	7e92      	ldrb	r2, [r2, #26]
 8005986:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	7ed2      	ldrb	r2, [r2, #27]
 8005992:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fb7d 	bl	800609a <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	3306      	adds	r3, #6
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	4623      	mov	r3, r4
 80059bc:	f000 fbb4 	bl	8006128 <optiga_comms_transceive>
 80059c0:	4603      	mov	r3, r0
 80059c2:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 80059c4:	89fb      	ldrh	r3, [r7, #14]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 80059ca:	f240 2302 	movw	r3, #514	@ 0x202
 80059ce:	81fb      	strh	r3, [r7, #14]
                break;
 80059d0:	e031      	b.n	8005a36 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7f5b      	ldrb	r3, [r3, #29]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	775a      	strb	r2, [r3, #29]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	7f5b      	ldrb	r3, [r3, #29]
 80059e4:	f043 0303 	orr.w	r3, r3, #3
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	775a      	strb	r2, [r3, #29]
        break;
 80059ee:	e022      	b.n	8005a36 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	7c9b      	ldrb	r3, [r3, #18]
 80059f6:	2bff      	cmp	r3, #255	@ 0xff
 80059f8:	d01c      	beq.n	8005a34 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	7d9b      	ldrb	r3, [r3, #22]
 8005a00:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005a02:	89fb      	ldrh	r3, [r7, #14]
 8005a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0c:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2203      	movs	r2, #3
 8005a12:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	220a      	movs	r2, #10
 8005a18:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4905      	ldr	r1, [pc, #20]	@ (8005a40 <optiga_cmd_get_error_code_handler+0x1a8>)
 8005a2a:	f001 f9d5 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
        break;
 8005a2e:	e002      	b.n	8005a36 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005a34:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005a36:	89fb      	ldrh	r3, [r7, #14]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd90      	pop	{r4, r7, pc}
 8005a40:	08004763 	.word	0x08004763

08005a44 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005a4c:	f240 2302 	movw	r3, #514	@ 0x202
 8005a50:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	7d9b      	ldrb	r3, [r3, #22]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d002      	beq.n	8005a60 <optiga_cmd_open_application_handler+0x1c>
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d075      	beq.n	8005b4a <optiga_cmd_open_application_handler+0x106>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 8005a5e:	e08e      	b.n	8005b7e <optiga_cmd_open_application_handler+0x13a>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8005a60:	2314      	movs	r3, #20
 8005a62:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7e5b      	ldrb	r3, [r3, #25]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <optiga_cmd_open_application_handler+0x2c>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	e000      	b.n	8005a72 <optiga_cmd_open_application_handler+0x2e>
 8005a70:	2208      	movs	r2, #8
 8005a72:	89bb      	ldrh	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005a78:	89bb      	ldrh	r3, [r7, #12]
 8005a7a:	f240 6215 	movw	r2, #1557	@ 0x615
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d903      	bls.n	8005a8a <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005a82:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005a86:	81fb      	strh	r3, [r7, #14]
                break;
 8005a88:	e079      	b.n	8005b7e <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7e5b      	ldrb	r3, [r3, #25]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff f9df 	bl	8004e56 <optiga_cmd_restore_context>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d16e      	bne.n	8005b7c <optiga_cmd_open_application_handler+0x138>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <optiga_cmd_open_application_handler+0x6a>
 8005aaa:	2210      	movs	r2, #16
 8005aac:	e000      	b.n	8005ab0 <optiga_cmd_open_application_handler+0x6c>
 8005aae:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8005ab6:	3305      	adds	r3, #5
 8005ab8:	20f0      	movs	r0, #240	@ 0xf0
 8005aba:	f7fe fdfe 	bl	80046ba <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330d      	adds	r3, #13
 8005ac4:	3309      	adds	r3, #9
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	492f      	ldr	r1, [pc, #188]	@ (8005b88 <optiga_cmd_open_application_handler+0x144>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fa19 	bl	8006f02 <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	7e5b      	ldrb	r3, [r3, #25]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <optiga_cmd_open_application_handler+0xac>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005ae8:	2208      	movs	r2, #8
 8005aea:	4619      	mov	r1, r3
 8005aec:	f001 fa09 	bl	8006f02 <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <optiga_cmd_open_application_handler+0xb8>
 8005af8:	2214      	movs	r2, #20
 8005afa:	e000      	b.n	8005afe <optiga_cmd_open_application_handler+0xba>
 8005afc:	221c      	movs	r2, #28
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	2100      	movs	r1, #0
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fa05 	bl	8006f20 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <optiga_cmd_open_application_handler+0x100>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f001 f80f 	bl	8006b50 <pal_os_datastore_write>
 8005b32:	4603      	mov	r3, r0
 8005b34:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005b36:	89fb      	ldrh	r3, [r7, #14]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <optiga_cmd_open_application_handler+0x100>
                    return_status = OPTIGA_CMD_ERROR;
 8005b3c:	f240 2302 	movw	r3, #514	@ 0x202
 8005b40:	81fb      	strh	r3, [r7, #14]
                    break;
 8005b42:	e01c      	b.n	8005b7e <optiga_cmd_open_application_handler+0x13a>
            return_status = OPTIGA_LIB_SUCCESS;
 8005b44:	2300      	movs	r3, #0
 8005b46:	81fb      	strh	r3, [r7, #14]
        break;
 8005b48:	e019      	b.n	8005b7e <optiga_cmd_open_application_handler+0x13a>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	7c9b      	ldrb	r3, [r3, #18]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <optiga_cmd_open_application_handler+0x128>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7f5b      	ldrb	r3, [r3, #29]
 8005b58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	775a      	strb	r2, [r3, #29]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	7f5a      	ldrb	r2, [r3, #29]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	775a      	strb	r2, [r3, #29]
                break;
 8005b6a:	e008      	b.n	8005b7e <optiga_cmd_open_application_handler+0x13a>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2233      	movs	r2, #51	@ 0x33
 8005b74:	751a      	strb	r2, [r3, #20]
            return_status = OPTIGA_LIB_SUCCESS;
 8005b76:	2300      	movs	r3, #0
 8005b78:	81fb      	strh	r3, [r7, #14]
        break;
 8005b7a:	e000      	b.n	8005b7e <optiga_cmd_open_application_handler+0x13a>
                    break;
 8005b7c:	bf00      	nop
    }

    return (return_status);
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	08010558 	.word	0x08010558

08005b8c <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af04      	add	r7, sp, #16
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	460b      	mov	r3, r1
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005b9a:	7af9      	ldrb	r1, [r7, #11]
 8005b9c:	23f0      	movs	r3, #240	@ 0xf0
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4a04      	ldr	r2, [pc, #16]	@ (8005bbc <optiga_cmd_open_application+0x30>)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7fe fde4 	bl	800477a <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	08005a45 	.word	0x08005a45

08005bc0 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005bce:	f240 2302 	movw	r3, #514	@ 0x202
 8005bd2:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005bd4:	2309      	movs	r3, #9
 8005bd6:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 8005bd8:	2381      	movs	r3, #129	@ 0x81
 8005bda:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	7d9b      	ldrb	r3, [r3, #22]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d002      	beq.n	8005bea <optiga_cmd_get_data_object_handler+0x2a>
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d06e      	beq.n	8005cc6 <optiga_cmd_get_data_object_handler+0x106>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005be8:	e0ec      	b.n	8005dc4 <optiga_cmd_get_data_object_handler+0x204>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8005bea:	230a      	movs	r3, #10
 8005bec:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005bee:	8a3b      	ldrh	r3, [r7, #16]
 8005bf0:	f240 6215 	movw	r2, #1557	@ 0x615
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d907      	bls.n	8005c08 <optiga_cmd_get_data_object_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005bf8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005bfc:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2200      	movs	r2, #0
 8005c04:	801a      	strh	r2, [r3, #0]
                break;
 8005c06:	e0dd      	b.n	8005dc4 <optiga_cmd_get_data_object_handler+0x204>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	8bbb      	ldrh	r3, [r7, #28]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	4413      	add	r3, r2
 8005c12:	1d5a      	adds	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	891b      	ldrh	r3, [r3, #8]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	f000 fc73 	bl	8006506 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005c20:	8bbb      	ldrh	r3, [r7, #28]
 8005c22:	3302      	adds	r3, #2
 8005c24:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	899b      	ldrh	r3, [r3, #12]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	89db      	ldrh	r3, [r3, #14]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f240 6211 	movw	r2, #1553	@ 0x611
 8005c36:	4293      	cmp	r3, r2
 8005c38:	bfa8      	it	ge
 8005c3a:	4613      	movge	r3, r2
 8005c3c:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	7c9b      	ldrb	r3, [r3, #18]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d11f      	bne.n	8005c86 <optiga_cmd_get_data_object_handler+0xc6>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	8bbb      	ldrh	r3, [r7, #28]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	4413      	add	r3, r2
 8005c50:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	895a      	ldrh	r2, [r3, #10]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005c5a:	4413      	add	r3, r2
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	f000 fc51 	bl	8006506 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005c64:	8bbb      	ldrh	r3, [r7, #28]
 8005c66:	3302      	adds	r3, #2
 8005c68:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	8bbb      	ldrh	r3, [r7, #28]
 8005c70:	3308      	adds	r3, #8
 8005c72:	4413      	add	r3, r2
 8005c74:	3305      	adds	r3, #5
 8005c76:	89fa      	ldrh	r2, [r7, #14]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fc43 	bl	8006506 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005c80:	8bbb      	ldrh	r3, [r7, #28]
 8005c82:	3302      	adds	r3, #2
 8005c84:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	891b      	ldrh	r3, [r3, #8]
 8005c8a:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d101      	bne.n	8005c96 <optiga_cmd_get_data_object_handler+0xd6>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7e59      	ldrb	r1, [r3, #25]
 8005c9a:	8bbb      	ldrh	r3, [r7, #28]
 8005c9c:	3b09      	subs	r3, #9
 8005c9e:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 8005ca6:	3305      	adds	r3, #5
 8005ca8:	7ef8      	ldrb	r0, [r7, #27]
 8005caa:	f7fe fd06 	bl	80046ba <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	8bba      	ldrh	r2, [r7, #28]
 8005cb4:	3a05      	subs	r2, #5
 8005cb6:	b292      	uxth	r2, r2
 8005cb8:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	89fa      	ldrh	r2, [r7, #14]
 8005cbe:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	83fb      	strh	r3, [r7, #30]
        break;
 8005cc4:	e07e      	b.n	8005dc4 <optiga_cmd_get_data_object_handler+0x204>
            me->chaining_ongoing = FALSE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	7c9b      	ldrb	r3, [r3, #18]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d025      	beq.n	8005d22 <optiga_cmd_get_data_object_handler+0x162>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	89db      	ldrh	r3, [r3, #14]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <optiga_cmd_get_data_object_handler+0x13c>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	7f5b      	ldrb	r3, [r3, #29]
 8005ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	775a      	strb	r2, [r3, #29]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	7f5b      	ldrb	r3, [r3, #29]
 8005cf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	775a      	strb	r2, [r3, #29]
 8005cfa:	e00e      	b.n	8005d1a <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7f5b      	ldrb	r3, [r3, #29]
 8005d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	775a      	strb	r2, [r3, #29]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7f5a      	ldrb	r2, [r3, #29]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 8005d1a:	f240 2302 	movw	r3, #514	@ 0x202
 8005d1e:	83fb      	strh	r3, [r7, #30]
        break;
 8005d20:	e04f      	b.n	8005dc2 <optiga_cmd_get_data_object_handler+0x202>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8c1b      	ldrh	r3, [r3, #32]
 8005d26:	f248 0208 	movw	r2, #32776	@ 0x8008
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d107      	bne.n	8005d3e <optiga_cmd_get_data_object_handler+0x17e>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	89d2      	ldrh	r2, [r2, #14]
 8005d36:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	83fb      	strh	r3, [r7, #30]
        break;
 8005d3c:	e041      	b.n	8005dc2 <optiga_cmd_get_data_object_handler+0x202>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	88db      	ldrh	r3, [r3, #6]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	899b      	ldrh	r3, [r3, #12]
 8005d4c:	8a7a      	ldrh	r2, [r7, #18]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d907      	bls.n	8005d62 <optiga_cmd_get_data_object_handler+0x1a2>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005d52:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005d56:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	801a      	strh	r2, [r3, #0]
                    break;
 8005d60:	e030      	b.n	8005dc4 <optiga_cmd_get_data_object_handler+0x204>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	89d2      	ldrh	r2, [r2, #14]
 8005d6a:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005d72:	3309      	adds	r3, #9
 8005d74:	8a7a      	ldrh	r2, [r7, #18]
 8005d76:	4619      	mov	r1, r3
 8005d78:	f001 f8c3 	bl	8006f02 <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	89da      	ldrh	r2, [r3, #14]
 8005d80:	8a7b      	ldrh	r3, [r7, #18]
 8005d82:	4413      	add	r3, r2
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	8a1b      	ldrh	r3, [r3, #16]
 8005d8e:	8a7a      	ldrh	r2, [r7, #18]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d305      	bcc.n	8005da0 <optiga_cmd_get_data_object_handler+0x1e0>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	89da      	ldrh	r2, [r3, #14]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d10b      	bne.n	8005db8 <optiga_cmd_get_data_object_handler+0x1f8>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	89d2      	ldrh	r2, [r2, #14]
 8005da8:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2200      	movs	r2, #0
 8005db4:	821a      	strh	r2, [r3, #16]
 8005db6:	e002      	b.n	8005dbe <optiga_cmd_get_data_object_handler+0x1fe>
                    me->chaining_ongoing = TRUE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	761a      	strb	r2, [r3, #24]
                return_status = OPTIGA_LIB_SUCCESS;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	83fb      	strh	r3, [r7, #30]
        break;
 8005dc2:	bf00      	nop
    }

    return (return_status);
 8005dc4:	8bfb      	ldrh	r3, [r7, #30]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005dde:	7af9      	ldrb	r1, [r7, #11]
 8005de0:	2381      	movs	r3, #129	@ 0x81
 8005de2:	9302      	str	r3, [sp, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	2306      	movs	r3, #6
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2302      	movs	r3, #2
 8005dee:	4a04      	ldr	r2, [pc, #16]	@ (8005e00 <optiga_cmd_get_data_object+0x30>)
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7fe fcc2 	bl	800477a <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08005bc1 	.word	0x08005bc1

08005e04 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8005e12:	2309      	movs	r3, #9
 8005e14:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005e16:	f240 2302 	movw	r3, #514	@ 0x202
 8005e1a:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7d9b      	ldrb	r3, [r3, #22]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d003      	beq.n	8005e2c <optiga_cmd_verify_sign_handler+0x28>
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	f000 80c7 	beq.w	8005fb8 <optiga_cmd_verify_sign_handler+0x1b4>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8005e2a:	e0d9      	b.n	8005fe0 <optiga_cmd_verify_sign_handler+0x1dc>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	7c1b      	ldrb	r3, [r3, #16]
 8005e30:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	899b      	ldrh	r3, [r3, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <optiga_cmd_verify_sign_handler+0x4a>
                                     p_optiga_verify_sign->public_key->length));
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8005e48:	3309      	adds	r3, #9
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	e000      	b.n	8005e50 <optiga_cmd_verify_sign_handler+0x4c>
 8005e4e:	2305      	movs	r3, #5
 8005e50:	4413      	add	r3, r2
 8005e52:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8005e54:	330a      	adds	r3, #10
 8005e56:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005e58:	89fb      	ldrh	r3, [r7, #14]
 8005e5a:	f240 6215 	movw	r2, #1557	@ 0x615
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d903      	bls.n	8005e6a <optiga_cmd_verify_sign_handler+0x66>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005e62:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005e66:	82fb      	strh	r3, [r7, #22]
                break;
 8005e68:	e0ba      	b.n	8005fe0 <optiga_cmd_verify_sign_handler+0x1dc>
                                          p_optiga_verify_sign->digest_length,
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 8005e6e:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 8005e78:	f107 030c 	add.w	r3, r7, #12
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	f7fe fc3f 	bl	8004700 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	330d      	adds	r3, #13
 8005e88:	89ba      	ldrh	r2, [r7, #12]
 8005e8a:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005e94:	461a      	mov	r2, r3
 8005e96:	f001 f834 	bl	8006f02 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	7c1b      	ldrb	r3, [r3, #16]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	89bb      	ldrh	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f7fe fc21 	bl	8004700 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330d      	adds	r3, #13
 8005ec4:	89ba      	ldrh	r2, [r7, #12]
 8005ec6:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f001 f816 	bl	8006f02 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	899a      	ldrh	r2, [r3, #12]
 8005eda:	89bb      	ldrh	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	7c5b      	ldrb	r3, [r3, #17]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d119      	bne.n	8005f1e <optiga_cmd_verify_sign_handler+0x11a>
                                              me->p_optiga->optiga_comms_buffer,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	2102      	movs	r1, #2
 8005ef8:	2004      	movs	r0, #4
 8005efa:	f7fe fc01 	bl	8004700 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330d      	adds	r3, #13
 8005f04:	89ba      	ldrh	r2, [r7, #12]
 8005f06:	441a      	add	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	89db      	ldrh	r3, [r3, #14]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f000 faf9 	bl	8006506 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005f14:	89bb      	ldrh	r3, [r7, #12]
 8005f16:	3302      	adds	r3, #2
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	81bb      	strh	r3, [r7, #12]
 8005f1c:	e037      	b.n	8005f8e <optiga_cmd_verify_sign_handler+0x18a>
                                              me->p_optiga->optiga_comms_buffer,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 8005f26:	f107 030c 	add.w	r3, r7, #12
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	2005      	movs	r0, #5
 8005f2e:	f7fe fbe7 	bl	8004700 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f103 010d 	add.w	r1, r3, #13
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	1c58      	adds	r0, r3, #1
 8005f42:	b280      	uxth	r0, r0
 8005f44:	81b8      	strh	r0, [r7, #12]
 8005f46:	440b      	add	r3, r1
 8005f48:	7992      	ldrb	r2, [r2, #6]
 8005f4a:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8005f50:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8005f5a:	f107 030c 	add.w	r3, r7, #12
 8005f5e:	2006      	movs	r0, #6
 8005f60:	f7fe fbce 	bl	8004700 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330d      	adds	r3, #13
 8005f6a:	89ba      	ldrh	r2, [r7, #12]
 8005f6c:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f000 ffc1 	bl	8006f02 <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	889a      	ldrh	r2, [r3, #4]
 8005f86:	89bb      	ldrh	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7e59      	ldrb	r1, [r3, #25]
 8005f92:	89bb      	ldrh	r3, [r7, #12]
 8005f94:	3b09      	subs	r3, #9
 8005f96:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005f9e:	3305      	adds	r3, #5
 8005fa0:	20b2      	movs	r0, #178	@ 0xb2
 8005fa2:	f7fe fb8a 	bl	80046ba <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005fa6:	89ba      	ldrh	r2, [r7, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3a05      	subs	r2, #5
 8005fae:	b292      	uxth	r2, r2
 8005fb0:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	82fb      	strh	r3, [r7, #22]
        break;
 8005fb6:	e013      	b.n	8005fe0 <optiga_cmd_verify_sign_handler+0x1dc>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	7c9b      	ldrb	r3, [r3, #18]
 8005fbe:	2bff      	cmp	r3, #255	@ 0xff
 8005fc0:	d10b      	bne.n	8005fda <optiga_cmd_verify_sign_handler+0x1d6>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7f5b      	ldrb	r3, [r3, #29]
 8005fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	775a      	strb	r2, [r3, #29]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7f5a      	ldrb	r2, [r3, #29]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	775a      	strb	r2, [r3, #29]
                break;
 8005fd8:	e002      	b.n	8005fe0 <optiga_cmd_verify_sign_handler+0x1dc>
            return_status = OPTIGA_LIB_SUCCESS;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	82fb      	strh	r3, [r7, #22]
        break;
 8005fde:	bf00      	nop
    }

    return (return_status);
 8005fe0:	8afb      	ldrh	r3, [r7, #22]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af04      	add	r7, sp, #16
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 8005ffa:	7af9      	ldrb	r1, [r7, #11]
 8005ffc:	23b2      	movs	r3, #178	@ 0xb2
 8005ffe:	9302      	str	r3, [sp, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	2306      	movs	r3, #6
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	2302      	movs	r3, #2
 800600a:	4a04      	ldr	r2, [pc, #16]	@ (800601c <optiga_cmd_verify_sign+0x30>)
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7fe fbb4 	bl	800477a <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	08005e05 	.word	0x08005e05

08006020 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 800602e:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <optiga_comms_create+0x48>)
 8006030:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	7c1b      	ldrb	r3, [r3, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d110      	bne.n	800605c <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 800603a:	f000 fc0c 	bl	8006856 <pal_init>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
                break;
 8006048:	e008      	b.n	800605c <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 800605c:	68fb      	ldr	r3, [r7, #12]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	200004d4 	.word	0x200004d4

0800606c <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	7c1b      	ldrb	r3, [r3, #16]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10a      	bne.n	8006092 <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 800608e:	f000 fbea 	bl	8006866 <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	609a      	str	r2, [r3, #8]
    return (0);
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80060c0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80060c4:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8a6 	bl	8006218 <check_optiga_comms_state>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d122      	bne.n	8006118 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4a10      	ldr	r2, [pc, #64]	@ (8006124 <optiga_comms_open+0x6c>)
 80060e2:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	7d12      	ldrb	r2, [r2, #20]
 80060ee:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fa fcb4 	bl	8000a70 <ifx_i2c_open>
 8006108:	4603      	mov	r3, r0
 800610a:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 800610c:	89fb      	ldrh	r3, [r7, #14]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8006118:	89fb      	ldrh	r3, [r7, #14]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	0800624d 	.word	0x0800624d

08006128 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8006138:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800613c:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f86a 	bl	8006218 <check_optiga_comms_state>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d12c      	bne.n	80061a4 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	4a15      	ldr	r2, [pc, #84]	@ (80061b0 <optiga_comms_transceive+0x88>)
 800615a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	7c92      	ldrb	r2, [r2, #18]
 8006166:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	7cd2      	ldrb	r2, [r2, #19]
 8006172:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	7d12      	ldrb	r2, [r2, #20]
 800617e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6858      	ldr	r0, [r3, #4]
 8006186:	88fa      	ldrh	r2, [r7, #6]
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	f7fa fca7 	bl	8000ae2 <ifx_i2c_transceive>
 8006194:	4603      	mov	r3, r0
 8006196:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8006198:	8afb      	ldrh	r3, [r7, #22]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80061a4:	8afb      	ldrh	r3, [r7, #22]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	0800624d 	.word	0x0800624d

080061b4 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80061bc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80061c0:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f828 	bl	8006218 <check_optiga_comms_state>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11c      	bne.n	8006208 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006214 <optiga_comms_close+0x60>)
 80061de:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	7d12      	ldrb	r2, [r2, #20]
 80061ea:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fa fcae 	bl	8000b54 <ifx_i2c_close>
 80061f8:	4603      	mov	r3, r0
 80061fa:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80061fc:	89fb      	ldrh	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8006208:	89fb      	ldrh	r3, [r7, #14]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	0800624d 	.word	0x0800624d

08006218 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8006220:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006224:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <check_optiga_comms_state+0x26>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7c5b      	ldrb	r3, [r3, #17]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d004      	beq.n	800623e <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 800623a:	2300      	movs	r3, #0
 800623c:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 800623e:	89fb      	ldrh	r3, [r7, #14]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	887a      	ldrh	r2, [r7, #2]
 8006264:	4611      	mov	r1, r2
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	745a      	strb	r2, [r3, #17]
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    me->handler(me->caller_context, event);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006298:	8879      	ldrh	r1, [r7, #2]
 800629a:	4610      	mov	r0, r2
 800629c:	4798      	blx	r3
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <optiga_crypt_reset_protection_level+0x18>
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 80062b4:	2200      	movs	r2, #0
 80062b6:	2101      	movs	r1, #1
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f880 	bl	80063be <optiga_crypt_set_comms_params>
    }
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	461a      	mov	r2, r3
 80062d2:	460b      	mov	r3, r1
 80062d4:	72fb      	strb	r3, [r7, #11]
 80062d6:	4613      	mov	r3, r2
 80062d8:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 80062da:	f240 4302 	movw	r3, #1026	@ 0x402
 80062de:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <optiga_crypt_verify+0x3a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <optiga_crypt_verify+0x3a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <optiga_crypt_verify+0x3a>
 80062fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8006300:	f240 4303 	movw	r3, #1027	@ 0x403
 8006304:	82fb      	strh	r3, [r7, #22]
            break;
 8006306:	e052      	b.n	80063ae <optiga_crypt_verify+0xe8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800630e:	2b01      	cmp	r3, #1
 8006310:	d103      	bne.n	800631a <optiga_crypt_verify+0x54>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8006312:	f240 4305 	movw	r3, #1029	@ 0x405
 8006316:	82fb      	strh	r3, [r7, #22]
            break;
 8006318:	e049      	b.n	80063ae <optiga_crypt_verify+0xe8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2234      	movs	r2, #52	@ 0x34
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fdf7 	bl	8006f20 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800633c:	2200      	movs	r2, #0
 800633e:	4619      	mov	r1, r3
 8006340:	f7fe f996 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800634e:	2201      	movs	r2, #1
 8006350:	4619      	mov	r1, r3
 8006352:	f7fe f98d 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	7aba      	ldrb	r2, [r7, #10]
 8006360:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6a3a      	ldr	r2, [r7, #32]
 8006366:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800636c:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006374:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8006376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <optiga_crypt_verify+0xc2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	81da      	strh	r2, [r3, #14]
 8006386:	e002      	b.n	800638e <optiga_crypt_verify+0xc8>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800638c:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006392:	7af9      	ldrb	r1, [r7, #11]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fe28 	bl	8005fec <optiga_cmd_verify_sign>
 800639c:	4603      	mov	r3, r0
 800639e:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 80063a0:	8afb      	ldrh	r3, [r7, #22]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <optiga_crypt_verify+0xe8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff ff79 	bl	80062a6 <optiga_crypt_reset_protection_level>

    return (return_value);
 80063b4:	8afb      	ldrh	r3, [r7, #22]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <optiga_crypt_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]
 80063ca:	4613      	mov	r3, r2
 80063cc:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d002      	beq.n	80063da <optiga_crypt_set_comms_params+0x1c>
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d005      	beq.n	80063e4 <optiga_crypt_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 80063d8:	e009      	b.n	80063ee <optiga_crypt_set_comms_params+0x30>
            me->protection_level = value;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	78ba      	ldrb	r2, [r7, #2]
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            break;
 80063e2:	e004      	b.n	80063ee <optiga_crypt_set_comms_params+0x30>
            me->protocol_version = value;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	78ba      	ldrb	r2, [r7, #2]
 80063e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
            break;
 80063ec:	bf00      	nop
        }
    }
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d02c      	beq.n	800646e <optiga_crypt_create+0x72>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8006414:	2144      	movs	r1, #68	@ 0x44
 8006416:	2001      	movs	r0, #1
 8006418:	f000 fd5a 	bl	8006ed0 <pal_os_calloc>
 800641c:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d026      	beq.n	8006472 <optiga_crypt_create+0x76>
        {
            break;
        }

        me->handler = handler;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	63da      	str	r2, [r3, #60]	@ 0x3c
        me->caller_context = caller_context;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	@ 0x38
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	490c      	ldr	r1, [pc, #48]	@ (8006480 <optiga_crypt_create+0x84>)
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff f952 	bl	80056f8 <optiga_cmd_create>
 8006454:	4602      	mov	r2, r0
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	635a      	str	r2, [r3, #52]	@ 0x34
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645e:	2b00      	cmp	r3, #0
 8006460:	d108      	bne.n	8006474 <optiga_crypt_create+0x78>
        {
            pal_os_free(me);
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f000 fd42 	bl	8006eec <pal_os_free>
            me = NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e002      	b.n	8006474 <optiga_crypt_create+0x78>
            break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <optiga_crypt_create+0x78>
            break;
 8006472:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8006474:	697b      	ldr	r3, [r7, #20]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	08006279 	.word	0x08006279

08006484 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8006492:	f240 4303 	movw	r3, #1027	@ 0x403
 8006496:	81fb      	strh	r3, [r7, #14]
            break;
 8006498:	e012      	b.n	80064c0 <optiga_crypt_destroy+0x3c>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d103      	bne.n	80064ac <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80064a4:	f240 4305 	movw	r3, #1029	@ 0x405
 80064a8:	81fb      	strh	r3, [r7, #14]
            break;
 80064aa:	e009      	b.n	80064c0 <optiga_crypt_destroy+0x3c>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff f99f 	bl	80057f4 <optiga_cmd_destroy>
 80064b6:	4603      	mov	r3, r0
 80064b8:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fd16 	bl	8006eec <pal_os_free>

    } while (FALSE);
    return (return_value);
 80064c0:	89fb      	ldrh	r3, [r7, #14]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b08a      	sub	sp, #40	@ 0x28
 80064ce:	af06      	add	r7, sp, #24
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
 80064da:	79fa      	ldrb	r2, [r7, #7]
 80064dc:	2300      	movs	r3, #0
 80064de:	9304      	str	r3, [sp, #16]
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	9303      	str	r3, [sp, #12]
 80064e4:	7f3b      	ldrb	r3, [r7, #28]
 80064e6:	9302      	str	r3, [sp, #8]
 80064e8:	8b3b      	ldrh	r3, [r7, #24]
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	4613      	mov	r3, r2
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	2111      	movs	r1, #17
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff fee5 	bl	80062c6 <optiga_crypt_verify>
 80064fc:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	460b      	mov	r3, r1
 8006510:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8006512:	887b      	ldrh	r3, [r7, #2]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	b29b      	uxth	r3, r3
 8006518:	b2da      	uxtb	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3301      	adds	r3, #1
 8006522:	887a      	ldrh	r2, [r7, #2]
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	0e1b      	lsrs	r3, r3, #24
 8006542:	b2da      	uxtb	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	0c1a      	lsrs	r2, r3, #16
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3301      	adds	r3, #1
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	0a1a      	lsrs	r2, r3, #8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3302      	adds	r3, #2
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3303      	adds	r3, #3
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	061a      	lsls	r2, r3, #24
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3302      	adds	r3, #2
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8006594:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	3103      	adds	r1, #3
 800659a:	7809      	ldrb	r1, [r1, #0]
 800659c:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	6992      	ldr	r2, [r2, #24]
 80065ce:	8879      	ldrh	r1, [r7, #2]
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
}
 80065d4:	bf00      	nop
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 80065ea:	2200      	movs	r2, #0
 80065ec:	2101      	movs	r1, #1
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f804 	bl	80065fc <optiga_util_set_comms_params>
    }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
 8006608:	4613      	mov	r3, r2
 800660a:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d002      	beq.n	8006618 <optiga_util_set_comms_params+0x1c>
 8006612:	2b02      	cmp	r3, #2
 8006614:	d005      	beq.n	8006622 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8006616:	e009      	b.n	800662c <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	78ba      	ldrb	r2, [r7, #2]
 800661c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8006620:	e004      	b.n	800662c <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	78ba      	ldrb	r2, [r7, #2]
 8006626:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 800662a:	bf00      	nop
        }
    }
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02b      	beq.n	80066a8 <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8006650:	2124      	movs	r1, #36	@ 0x24
 8006652:	2001      	movs	r0, #1
 8006654:	f000 fc3c 	bl	8006ed0 <pal_os_calloc>
 8006658:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d025      	beq.n	80066ac <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2200      	movs	r2, #0
 8006670:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	490c      	ldr	r1, [pc, #48]	@ (80066b8 <optiga_util_create+0x80>)
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff f835 	bl	80056f8 <optiga_cmd_create>
 800668e:	4602      	mov	r2, r0
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <optiga_util_create+0x76>
        {
            pal_os_free(me);
 800669c:	6978      	ldr	r0, [r7, #20]
 800669e:	f000 fc25 	bl	8006eec <pal_os_free>
            me = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e002      	b.n	80066ae <optiga_util_create+0x76>
            break;
 80066a8:	bf00      	nop
 80066aa:	e000      	b.n	80066ae <optiga_util_create+0x76>
            break;
 80066ac:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 80066ae:	697b      	ldr	r3, [r7, #20]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	080065b1 	.word	0x080065b1

080066bc <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 80066c8:	f240 3302 	movw	r3, #770	@ 0x302
 80066cc:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <optiga_util_open_application+0x20>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80066dc:	f240 3303 	movw	r3, #771	@ 0x303
 80066e0:	81fb      	strh	r3, [r7, #14]
            break;
 80066e2:	e03d      	b.n	8006760 <optiga_util_open_application+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8c1b      	ldrh	r3, [r3, #32]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d103      	bne.n	80066f4 <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80066ec:	f240 3305 	movw	r3, #773	@ 0x305
 80066f0:	81fb      	strh	r3, [r7, #14]
            break;
 80066f2:	e035      	b.n	8006760 <optiga_util_open_application+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6958      	ldr	r0, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006704:	2200      	movs	r2, #0
 8006706:	4619      	mov	r1, r3
 8006708:	f7fd ffb2 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6958      	ldr	r0, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006716:	2201      	movs	r2, #1
 8006718:	4619      	mov	r1, r3
 800671a:	f7fd ffa9 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d107      	bne.n	8006734 <optiga_util_open_application+0x78>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	2202      	movs	r2, #2
 800672a:	2133      	movs	r1, #51	@ 0x33
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd ff9f 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
 8006732:	e006      	b.n	8006742 <optiga_util_open_application+0x86>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	2202      	movs	r2, #2
 800673a:	2111      	movs	r1, #17
 800673c:	4618      	mov	r0, r3
 800673e:	f7fd ff97 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	78f9      	ldrb	r1, [r7, #3]
 8006748:	2200      	movs	r2, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fa1e 	bl	8005b8c <optiga_cmd_open_application>
 8006750:	4603      	mov	r3, r0
 8006752:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006754:	89fb      	ldrh	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <optiga_util_open_application+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff3b 	bl	80065dc <optiga_util_reset_protection_level>

    return (return_value);
 8006766:	89fb      	ldrh	r3, [r7, #14]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	817b      	strh	r3, [r7, #10]
 800677e:	4613      	mov	r3, r2
 8006780:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8006782:	f240 3302 	movw	r3, #770	@ 0x302
 8006786:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <optiga_util_read_data+0x32>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <optiga_util_read_data+0x32>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <optiga_util_read_data+0x32>
            (NULL == buffer) || (NULL == length))
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <optiga_util_read_data+0x3a>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80067a2:	f240 3303 	movw	r3, #771	@ 0x303
 80067a6:	82fb      	strh	r3, [r7, #22]
            break;
 80067a8:	e04d      	b.n	8006846 <optiga_util_read_data+0xd6>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8c1b      	ldrh	r3, [r3, #32]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d103      	bne.n	80067ba <optiga_util_read_data+0x4a>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80067b2:	f240 3305 	movw	r3, #773	@ 0x305
 80067b6:	82fb      	strh	r3, [r7, #22]
            break;
 80067b8:	e045      	b.n	8006846 <optiga_util_read_data+0xd6>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2214      	movs	r2, #20
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fba8 	bl	8006f20 <pal_os_memset>

        p_params->oid = optiga_oid;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	897a      	ldrh	r2, [r7, #10]
 80067d4:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	893a      	ldrh	r2, [r7, #8]
 80067da:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	2200      	movs	r2, #0
 80067e0:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	881a      	ldrh	r2, [r3, #0]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6a3a      	ldr	r2, [r7, #32]
 80067f4:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2200      	movs	r2, #0
 80067fa:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2200      	movs	r2, #0
 8006800:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6958      	ldr	r0, [r3, #20]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800680c:	2200      	movs	r2, #0
 800680e:	4619      	mov	r1, r3
 8006810:	f7fd ff2e 	bl	8004670 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6958      	ldr	r0, [r3, #20]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800681e:	2201      	movs	r2, #1
 8006820:	4619      	mov	r1, r3
 8006822:	f7fd ff25 	bl	8004670 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6958      	ldr	r0, [r3, #20]
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	7c9b      	ldrb	r3, [r3, #18]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4619      	mov	r1, r3
 8006832:	f7ff facd 	bl	8005dd0 <optiga_cmd_get_data_object>
 8006836:	4603      	mov	r3, r0
 8006838:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 800683a:	8afb      	ldrh	r3, [r7, #22]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <optiga_util_read_data+0xd6>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff fec8 	bl	80065dc <optiga_util_reset_protection_level>

    return (return_value);
 800684c:	8afb      	ldrh	r3, [r7, #22]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8006856:	b480      	push	{r7}
 8006858:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <pal_deinit>:


pal_status_t pal_deinit(void)
{
 8006866:	b480      	push	{r7}
 8006868:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8006876:	b480      	push	{r7}
 8006878:	b087      	sub	sp, #28
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	461a      	mov	r2, r3
 8006882:	460b      	mov	r3, r1
 8006884:	817b      	strh	r3, [r7, #10]
 8006886:	4613      	mov	r3, r2
 8006888:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	2b00      	cmp	r3, #0
 800688e:	d012      	beq.n	80068b6 <pal_crypt_tls_prf_sha256+0x40>
 8006890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00f      	beq.n	80068b6 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 8006896:	2300      	movs	r3, #0
 8006898:	82fb      	strh	r3, [r7, #22]
 800689a:	e007      	b.n	80068ac <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 800689c:	8afb      	ldrh	r3, [r7, #22]
 800689e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 80068a6:	8afb      	ldrh	r3, [r7, #22]
 80068a8:	3301      	adds	r3, #1
 80068aa:	82fb      	strh	r3, [r7, #22]
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	8afa      	ldrh	r2, [r7, #22]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3f2      	bcc.n	800689c <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b087      	sub	sp, #28
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	603b      	str	r3, [r7, #0]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	82fb      	strh	r3, [r7, #22]
 80068d6:	e00a      	b.n	80068ee <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 80068d8:	8afb      	ldrh	r3, [r7, #22]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	441a      	add	r2, r3
 80068de:	8afb      	ldrh	r3, [r7, #22]
 80068e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068e2:	440b      	add	r3, r1
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 80068e8:	8afb      	ldrh	r3, [r7, #22]
 80068ea:	3301      	adds	r3, #1
 80068ec:	82fb      	strh	r3, [r7, #22]
 80068ee:	8afa      	ldrh	r2, [r7, #22]
 80068f0:	8c3b      	ldrh	r3, [r7, #32]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d3f0      	bcc.n	80068d8 <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8006914:	2300      	movs	r3, #0
 8006916:	82fb      	strh	r3, [r7, #22]
 8006918:	e00a      	b.n	8006930 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 800691a:	8afb      	ldrh	r3, [r7, #22]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	441a      	add	r2, r3
 8006920:	8afb      	ldrh	r3, [r7, #22]
 8006922:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006924:	440b      	add	r3, r1
 8006926:	7812      	ldrb	r2, [r2, #0]
 8006928:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 800692a:	8afb      	ldrh	r3, [r7, #22]
 800692c:	3301      	adds	r3, #1
 800692e:	82fb      	strh	r3, [r7, #22]
 8006930:	8afa      	ldrh	r2, [r7, #22]
 8006932:	8c3b      	ldrh	r3, [r7, #32]
 8006934:	429a      	cmp	r2, r3
 8006936:	d3f0      	bcc.n	800691a <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006956:	2201      	movs	r2, #1
 8006958:	4619      	mov	r1, r3
 800695a:	f003 fbd5 	bl	800a108 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006976:	2200      	movs	r2, #0
 8006978:	4619      	mov	r1, r3
 800697a:	f003 fbc5 	bl	800a108 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 8006990:	4b08      	ldr	r3, [pc, #32]	@ (80069b4 <pal_i2c_acquire+0x2c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d106      	bne.n	80069a6 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 8006998:	4b06      	ldr	r3, [pc, #24]	@ (80069b4 <pal_i2c_acquire+0x2c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	4a05      	ldr	r2, [pc, #20]	@ (80069b4 <pal_i2c_acquire+0x2c>)
 80069a0:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 80069a2:	2300      	movs	r3, #0
 80069a4:	e000      	b.n	80069a8 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 80069a6:	2301      	movs	r3, #1
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	2000116c 	.word	0x2000116c

080069b8 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 80069c0:	4b04      	ldr	r3, [pc, #16]	@ (80069d4 <pal_i2c_release+0x1c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000116c 	.word	0x2000116c

080069d8 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 80069f6:	887a      	ldrh	r2, [r7, #2]
 80069f8:	4611      	mov	r1, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ffd8 	bl	80069b8 <pal_i2c_release>
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd90      	pop	{r4, r7, pc}

08006a10 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7ff ff9a 	bl	8006988 <pal_i2c_acquire>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d120      	bne.n	8006a9c <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <pal_i2c_write+0x78>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	b299      	uxth	r1, r3
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a72:	9200      	str	r2, [sp, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	f003 fcf9 	bl	800a46c <HAL_I2C_Master_Transmit>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006a7e:	7d7b      	ldrb	r3, [r7, #21]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006a84:	2100      	movs	r1, #0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff ffa6 	bl	80069d8 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	82fb      	strh	r3, [r7, #22]
 8006a90:	e00a      	b.n	8006aa8 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8006a92:	2101      	movs	r1, #1
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff ff9f 	bl	80069d8 <invoke_upper_layer_callback>
 8006a9a:	e005      	b.n	8006aa8 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006aa0:	2102      	movs	r1, #2
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff ff98 	bl	80069d8 <invoke_upper_layer_callback>
    }

    return status;
 8006aa8:	8afb      	ldrh	r3, [r7, #22]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20001170 	.word	0x20001170

08006ab8 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff ff5c 	bl	8006988 <pal_i2c_acquire>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d120      	bne.n	8006b18 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006ad6:	4a16      	ldr	r2, [pc, #88]	@ (8006b30 <pal_i2c_read+0x78>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	b299      	uxth	r1, r3
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006aee:	9200      	str	r2, [sp, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	f003 fdb9 	bl	800a668 <HAL_I2C_Master_Receive>
 8006af6:	4603      	mov	r3, r0
 8006af8:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006afa:	7d7b      	ldrb	r3, [r7, #21]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d106      	bne.n	8006b0e <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006b00:	2100      	movs	r1, #0
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7ff ff68 	bl	80069d8 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	82fb      	strh	r3, [r7, #22]
 8006b0c:	e00a      	b.n	8006b24 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8006b0e:	2101      	movs	r1, #1
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff ff61 	bl	80069d8 <invoke_upper_layer_callback>
 8006b16:	e005      	b.n	8006b24 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f7ff ff5a 	bl	80069d8 <invoke_upper_layer_callback>
    }

    return status;
 8006b24:	8afb      	ldrh	r3, [r7, #22]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20001170 	.word	0x20001170

08006b34 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
	...

08006b50 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	80fb      	strh	r3, [r7, #6]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8006b68:	88fb      	ldrh	r3, [r7, #6]
 8006b6a:	2b33      	cmp	r3, #51	@ 0x33
 8006b6c:	d043      	beq.n	8006bf6 <pal_os_datastore_write+0xa6>
 8006b6e:	2b33      	cmp	r3, #51	@ 0x33
 8006b70:	dc5e      	bgt.n	8006c30 <pal_os_datastore_write+0xe0>
 8006b72:	2b11      	cmp	r3, #17
 8006b74:	d002      	beq.n	8006b7c <pal_os_datastore_write+0x2c>
 8006b76:	2b22      	cmp	r3, #34	@ 0x22
 8006b78:	d020      	beq.n	8006bbc <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8006b7a:	e059      	b.n	8006c30 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006b7c:	88bb      	ldrh	r3, [r7, #4]
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d858      	bhi.n	8006c34 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8006b82:	88bb      	ldrh	r3, [r7, #4]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	b299      	uxth	r1, r3
 8006b88:	7b7b      	ldrb	r3, [r7, #13]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	737a      	strb	r2, [r7, #13]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	b2c9      	uxtb	r1, r1
 8006b92:	4b2b      	ldr	r3, [pc, #172]	@ (8006c40 <pal_os_datastore_write+0xf0>)
 8006b94:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	737a      	strb	r2, [r7, #13]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	88bb      	ldrh	r3, [r7, #4]
 8006ba0:	b2d9      	uxtb	r1, r3
 8006ba2:	4b27      	ldr	r3, [pc, #156]	@ (8006c40 <pal_os_datastore_write+0xf0>)
 8006ba4:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8006ba6:	7b7b      	ldrb	r3, [r7, #13]
 8006ba8:	4a25      	ldr	r2, [pc, #148]	@ (8006c40 <pal_os_datastore_write+0xf0>)
 8006baa:	4413      	add	r3, r2
 8006bac:	88ba      	ldrh	r2, [r7, #4]
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f008 fce2 	bl	800f57a <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	81fb      	strh	r3, [r7, #14]
            break;
 8006bba:	e03b      	b.n	8006c34 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8006bbc:	88bb      	ldrh	r3, [r7, #4]
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	b299      	uxth	r1, r3
 8006bc2:	7b7b      	ldrb	r3, [r7, #13]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	737a      	strb	r2, [r7, #13]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	b2c9      	uxtb	r1, r1
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <pal_os_datastore_write+0xf4>)
 8006bce:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8006bd0:	7b7b      	ldrb	r3, [r7, #13]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	737a      	strb	r2, [r7, #13]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
 8006bda:	b2d9      	uxtb	r1, r3
 8006bdc:	4b19      	ldr	r3, [pc, #100]	@ (8006c44 <pal_os_datastore_write+0xf4>)
 8006bde:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8006be0:	7b7b      	ldrb	r3, [r7, #13]
 8006be2:	4a18      	ldr	r2, [pc, #96]	@ (8006c44 <pal_os_datastore_write+0xf4>)
 8006be4:	4413      	add	r3, r2
 8006be6:	88ba      	ldrh	r2, [r7, #4]
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f008 fcc5 	bl	800f57a <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	81fb      	strh	r3, [r7, #14]
            break;
 8006bf4:	e01f      	b.n	8006c36 <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8006bf6:	88bb      	ldrh	r3, [r7, #4]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	b299      	uxth	r1, r3
 8006bfc:	7b7b      	ldrb	r3, [r7, #13]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	737a      	strb	r2, [r7, #13]
 8006c02:	461a      	mov	r2, r3
 8006c04:	b2c9      	uxtb	r1, r1
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <pal_os_datastore_write+0xf8>)
 8006c08:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8006c0a:	7b7b      	ldrb	r3, [r7, #13]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	737a      	strb	r2, [r7, #13]
 8006c10:	461a      	mov	r2, r3
 8006c12:	88bb      	ldrh	r3, [r7, #4]
 8006c14:	b2d9      	uxtb	r1, r3
 8006c16:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <pal_os_datastore_write+0xf8>)
 8006c18:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8006c1a:	7b7b      	ldrb	r3, [r7, #13]
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c48 <pal_os_datastore_write+0xf8>)
 8006c1e:	4413      	add	r3, r2
 8006c20:	88ba      	ldrh	r2, [r7, #4]
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f008 fca8 	bl	800f57a <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	81fb      	strh	r3, [r7, #14]
            break;
 8006c2e:	e002      	b.n	8006c36 <pal_os_datastore_write+0xe6>
            break;
 8006c30:	bf00      	nop
 8006c32:	e000      	b.n	8006c36 <pal_os_datastore_write+0xe6>
            break;
 8006c34:	bf00      	nop
        }
    }
    return return_status;
 8006c36:	89fb      	ldrh	r3, [r7, #14]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	2000050c 	.word	0x2000050c
 8006c44:	20001174 	.word	0x20001174
 8006c48:	200011b8 	.word	0x200011b8

08006c4c <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8006c62:	89fb      	ldrh	r3, [r7, #14]
 8006c64:	2b33      	cmp	r3, #51	@ 0x33
 8006c66:	d049      	beq.n	8006cfc <pal_os_datastore_read+0xb0>
 8006c68:	2b33      	cmp	r3, #51	@ 0x33
 8006c6a:	dc67      	bgt.n	8006d3c <pal_os_datastore_read+0xf0>
 8006c6c:	2b11      	cmp	r3, #17
 8006c6e:	d002      	beq.n	8006c76 <pal_os_datastore_read+0x2a>
 8006c70:	2b22      	cmp	r3, #34	@ 0x22
 8006c72:	d023      	beq.n	8006cbc <pal_os_datastore_read+0x70>
 8006c74:	e062      	b.n	8006d3c <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8006c76:	7d7b      	ldrb	r3, [r7, #21]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	757a      	strb	r2, [r7, #21]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4b34      	ldr	r3, [pc, #208]	@ (8006d50 <pal_os_datastore_read+0x104>)
 8006c80:	5c9b      	ldrb	r3, [r3, r2]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8006c86:	7d7b      	ldrb	r3, [r7, #21]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	757a      	strb	r2, [r7, #21]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4b30      	ldr	r3, [pc, #192]	@ (8006d50 <pal_os_datastore_read+0x104>)
 8006c90:	5c9b      	ldrb	r3, [r3, r2]
 8006c92:	461a      	mov	r2, r3
 8006c94:	8a7b      	ldrh	r3, [r7, #18]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006c9a:	8a7b      	ldrh	r3, [r7, #18]
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d851      	bhi.n	8006d44 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8006ca0:	7d7b      	ldrb	r3, [r7, #21]
 8006ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8006d50 <pal_os_datastore_read+0x104>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	8a7a      	ldrh	r2, [r7, #18]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	68b8      	ldr	r0, [r7, #8]
 8006cac:	f008 fc65 	bl	800f57a <memcpy>
                *p_buffer_length = data_length;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	8a7a      	ldrh	r2, [r7, #18]
 8006cb4:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8006cba:	e043      	b.n	8006d44 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8006cbc:	7d7b      	ldrb	r3, [r7, #21]
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	757a      	strb	r2, [r7, #21]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4b23      	ldr	r3, [pc, #140]	@ (8006d54 <pal_os_datastore_read+0x108>)
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006ccc:	7d7b      	ldrb	r3, [r7, #21]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	757a      	strb	r2, [r7, #21]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8006d54 <pal_os_datastore_read+0x108>)
 8006cd6:	5c9b      	ldrb	r3, [r3, r2]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	8a7b      	ldrh	r3, [r7, #18]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8006ce0:	7d7b      	ldrb	r3, [r7, #21]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <pal_os_datastore_read+0x108>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	8a7a      	ldrh	r2, [r7, #18]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	68b8      	ldr	r0, [r7, #8]
 8006cec:	f008 fc45 	bl	800f57a <memcpy>
            *p_buffer_length = data_length;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8a7a      	ldrh	r2, [r7, #18]
 8006cf4:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	82fb      	strh	r3, [r7, #22]
            break;
 8006cfa:	e024      	b.n	8006d46 <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8006cfc:	7d7b      	ldrb	r3, [r7, #21]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	757a      	strb	r2, [r7, #21]
 8006d02:	461a      	mov	r2, r3
 8006d04:	4b14      	ldr	r3, [pc, #80]	@ (8006d58 <pal_os_datastore_read+0x10c>)
 8006d06:	5c9b      	ldrb	r3, [r3, r2]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8006d0c:	7d7b      	ldrb	r3, [r7, #21]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	757a      	strb	r2, [r7, #21]
 8006d12:	461a      	mov	r2, r3
 8006d14:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <pal_os_datastore_read+0x10c>)
 8006d16:	5c9b      	ldrb	r3, [r3, r2]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	8a7b      	ldrh	r3, [r7, #18]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8006d20:	7d7b      	ldrb	r3, [r7, #21]
 8006d22:	4a0d      	ldr	r2, [pc, #52]	@ (8006d58 <pal_os_datastore_read+0x10c>)
 8006d24:	4413      	add	r3, r2
 8006d26:	8a7a      	ldrh	r2, [r7, #18]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68b8      	ldr	r0, [r7, #8]
 8006d2c:	f008 fc25 	bl	800f57a <memcpy>
            *p_buffer_length = data_length;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8a7a      	ldrh	r2, [r7, #18]
 8006d34:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006d36:	2300      	movs	r3, #0
 8006d38:	82fb      	strh	r3, [r7, #22]
            break;
 8006d3a:	e004      	b.n	8006d46 <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	801a      	strh	r2, [r3, #0]
            break;
 8006d42:	e000      	b.n	8006d46 <pal_os_datastore_read+0xfa>
            break;
 8006d44:	bf00      	nop
        }
    }

    return return_status;
 8006d46:	8afb      	ldrh	r3, [r7, #22]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	2000050c 	.word	0x2000050c
 8006d54:	20001174 	.word	0x20001174
 8006d58:	200011b8 	.word	0x200011b8

08006d5c <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	7a1b      	ldrb	r3, [r3, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8006d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f82a 	bl	8006dd8 <pal_os_event_register_callback_oneshot>
    }
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	721a      	strb	r2, [r3, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <pal_os_event_create+0x20>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4804      	ldr	r0, [pc, #16]	@ (8006dd4 <pal_os_event_create+0x2c>)
 8006dc4:	f7ff ffca 	bl	8006d5c <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006dc8:	4b02      	ldr	r3, [pc, #8]	@ (8006dd4 <pal_os_event_create+0x2c>)
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	200011c4 	.word	0x200011c4

08006dd8 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	4a0d      	ldr	r2, [pc, #52]	@ (8006e20 <pal_os_event_register_callback_oneshot+0x48>)
 8006dea:	fba2 2303 	umull	r2, r3, r2, r3
 8006dee:	099b      	lsrs	r3, r3, #6
 8006df0:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 8006dfe:	f002 fb07 	bl	8009410 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	4413      	add	r3, r2
 8006e08:	4a06      	ldr	r2, [pc, #24]	@ (8006e24 <pal_os_event_register_callback_oneshot+0x4c>)
 8006e0a:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <pal_os_event_register_callback_oneshot+0x50>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 8006e12:	4806      	ldr	r0, [pc, #24]	@ (8006e2c <pal_os_event_register_callback_oneshot+0x54>)
 8006e14:	f006 fcc6 	bl	800d7a4 <HAL_TIM_Base_Start_IT>
}
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	10624dd3 	.word	0x10624dd3
 8006e24:	200011dc 	.word	0x200011dc
 8006e28:	200011e0 	.word	0x200011e0
 8006e2c:	20000a4c 	.word	0x20000a4c

08006e30 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <pal_os_event_trigger_registered_callback+0x3c>)
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e6c <pal_os_event_trigger_registered_callback+0x3c>)
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8006e44:	4b09      	ldr	r3, [pc, #36]	@ (8006e6c <pal_os_event_trigger_registered_callback+0x3c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8006e4a:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <pal_os_event_trigger_registered_callback+0x3c>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8006e50:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <pal_os_event_trigger_registered_callback+0x3c>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 8006e56:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <pal_os_event_trigger_registered_callback+0x40>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6838      	ldr	r0, [r7, #0]
 8006e60:	4798      	blx	r3
    }
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200011c4 	.word	0x200011c4
 8006e70:	200011e0 	.word	0x200011e0

08006e74 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006e78:	4b07      	ldr	r3, [pc, #28]	@ (8006e98 <pal_os_event_timer_tick+0x24>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <pal_os_event_timer_tick+0x1e>
 8006e80:	f002 fac6 	bl	8009410 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	4b05      	ldr	r3, [pc, #20]	@ (8006e9c <pal_os_event_timer_tick+0x28>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d301      	bcc.n	8006e92 <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 8006e8e:	f7ff ffcf 	bl	8006e30 <pal_os_event_trigger_registered_callback>
    }
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200011e0 	.word	0x200011e0
 8006e9c:	200011dc 	.word	0x200011dc

08006ea0 <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 8006ec6:	bf00      	nop
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f008 f8f3 	bl	800f0c8 <calloc>
 8006ee2:	4603      	mov	r3, r0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <pal_os_free>:

void pal_os_free(void * block)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
    free(block);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f008 f903 	bl	800f100 <free>
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f008 fb31 	bl	800f57a <memcpy>
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4619      	mov	r1, r3
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f008 fadb 	bl	800f4f0 <memset>
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 8006f46:	f002 fa63 	bl	8009410 <HAL_GetTick>
 8006f4a:	4603      	mov	r3, r0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8006f54:	f002 fa5c 	bl	8009410 <HAL_GetTick>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8006f72:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <mbedtls_platform_zeroize+0x20>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000550 	.word	0x20000550

08006f8c <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006f94:	226c      	movs	r2, #108	@ 0x6c
 8006f96:	2100      	movs	r1, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f008 faa9 	bl	800f4f0 <memset>
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8006fb4:	216c      	movs	r1, #108	@ 0x6c
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff ffd6 	bl	8006f68 <mbedtls_platform_zeroize>
 8006fbc:	e000      	b.n	8006fc0 <mbedtls_sha256_free+0x1a>
        return;
 8006fbe:	bf00      	nop
}
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d118      	bne.n	8007016 <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800705c <mbedtls_sha256_starts_ret+0x94>)
 8006fe8:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	@ (8007060 <mbedtls_sha256_starts_ret+0x98>)
 8006fee:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8007064 <mbedtls_sha256_starts_ret+0x9c>)
 8006ff4:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8007068 <mbedtls_sha256_starts_ret+0xa0>)
 8006ffa:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800706c <mbedtls_sha256_starts_ret+0xa4>)
 8007000:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1a      	ldr	r2, [pc, #104]	@ (8007070 <mbedtls_sha256_starts_ret+0xa8>)
 8007006:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a1a      	ldr	r2, [pc, #104]	@ (8007074 <mbedtls_sha256_starts_ret+0xac>)
 800700c:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <mbedtls_sha256_starts_ret+0xb0>)
 8007012:	625a      	str	r2, [r3, #36]	@ 0x24
 8007014:	e017      	b.n	8007046 <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a18      	ldr	r2, [pc, #96]	@ (800707c <mbedtls_sha256_starts_ret+0xb4>)
 800701a:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a18      	ldr	r2, [pc, #96]	@ (8007080 <mbedtls_sha256_starts_ret+0xb8>)
 8007020:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a17      	ldr	r2, [pc, #92]	@ (8007084 <mbedtls_sha256_starts_ret+0xbc>)
 8007026:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a17      	ldr	r2, [pc, #92]	@ (8007088 <mbedtls_sha256_starts_ret+0xc0>)
 800702c:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a16      	ldr	r2, [pc, #88]	@ (800708c <mbedtls_sha256_starts_ret+0xc4>)
 8007032:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a16      	ldr	r2, [pc, #88]	@ (8007090 <mbedtls_sha256_starts_ret+0xc8>)
 8007038:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a15      	ldr	r2, [pc, #84]	@ (8007094 <mbedtls_sha256_starts_ret+0xcc>)
 800703e:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <mbedtls_sha256_starts_ret+0xd0>)
 8007044:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	6a09e667 	.word	0x6a09e667
 8007060:	bb67ae85 	.word	0xbb67ae85
 8007064:	3c6ef372 	.word	0x3c6ef372
 8007068:	a54ff53a 	.word	0xa54ff53a
 800706c:	510e527f 	.word	0x510e527f
 8007070:	9b05688c 	.word	0x9b05688c
 8007074:	1f83d9ab 	.word	0x1f83d9ab
 8007078:	5be0cd19 	.word	0x5be0cd19
 800707c:	c1059ed8 	.word	0xc1059ed8
 8007080:	367cd507 	.word	0x367cd507
 8007084:	3070dd17 	.word	0x3070dd17
 8007088:	f70e5939 	.word	0xf70e5939
 800708c:	ffc00b31 	.word	0xffc00b31
 8007090:	68581511 	.word	0x68581511
 8007094:	64f98fa7 	.word	0x64f98fa7
 8007098:	befa4fa4 	.word	0xbefa4fa4

0800709c <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 800709c:	b490      	push	{r4, r7}
 800709e:	b0ce      	sub	sp, #312	@ 0x138
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80070aa:	6018      	str	r0, [r3, #0]
 80070ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80070b4:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80070b6:	2300      	movs	r3, #0
 80070b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80070bc:	e016      	b.n	80070ec <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 80070be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80070cc:	3202      	adds	r2, #2
 80070ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80070da:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80070de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80070e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070e6:	3301      	adds	r3, #1
 80070e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80070ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80070f0:	2b07      	cmp	r3, #7
 80070f2:	d9e4      	bls.n	80070be <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80070f4:	2300      	movs	r3, #0
 80070f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80070fa:	e03e      	b.n	800717a <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 80070fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007106:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	4413      	add	r3, r2
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	061a      	lsls	r2, r3, #24
 8007112:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	3301      	adds	r3, #1
 800711a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800711e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007122:	6809      	ldr	r1, [r1, #0]
 8007124:	440b      	add	r3, r1
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	431a      	orrs	r2, r3
 800712c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	3302      	adds	r3, #2
 8007134:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007138:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800713c:	6809      	ldr	r1, [r1, #0]
 800713e:	440b      	add	r3, r1
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	4313      	orrs	r3, r2
 8007146:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800714a:	0092      	lsls	r2, r2, #2
 800714c:	3203      	adds	r2, #3
 800714e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007152:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007156:	6809      	ldr	r1, [r1, #0]
 8007158:	440a      	add	r2, r1
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	ea43 0102 	orr.w	r1, r3, r2
 8007160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007164:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007168:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800716c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8007170:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800717a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d9bc      	bls.n	80070fc <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 8007182:	2300      	movs	r3, #0
 8007184:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007188:	f000 bcba 	b.w	8007b00 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 800718c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007190:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007194:	69da      	ldr	r2, [r3, #28]
 8007196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800719a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80071a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80071b2:	4059      	eors	r1, r3
 80071b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	ea4f 6373 	mov.w	r3, r3, ror #25
 80071c2:	404b      	eors	r3, r1
 80071c4:	441a      	add	r2, r3
 80071c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ce:	6999      	ldr	r1, [r3, #24]
 80071d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071d8:	6918      	ldr	r0, [r3, #16]
 80071da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071e2:	695c      	ldr	r4, [r3, #20]
 80071e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	4063      	eors	r3, r4
 80071f0:	4003      	ands	r3, r0
 80071f2:	404b      	eors	r3, r1
 80071f4:	441a      	add	r2, r3
 80071f6:	49e0      	ldr	r1, [pc, #896]	@ (8007578 <mbedtls_internal_sha256_process+0x4dc>)
 80071f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80071fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007200:	441a      	add	r2, r3
 8007202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007206:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800720a:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 800720e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007212:	4413      	add	r3, r2
 8007214:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007218:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800721c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800722a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007234:	405a      	eors	r2, r3
 8007236:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800723a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007244:	405a      	eors	r2, r3
 8007246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800724a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007254:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4019      	ands	r1, r3
 800725c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007260:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007264:	6898      	ldr	r0, [r3, #8]
 8007266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800726a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800726e:	681c      	ldr	r4, [r3, #0]
 8007270:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007274:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4323      	orrs	r3, r4
 800727c:	4003      	ands	r3, r0
 800727e:	430b      	orrs	r3, r1
 8007280:	4413      	add	r3, r2
 8007282:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007286:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800728a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007294:	441a      	add	r2, r3
 8007296:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800729a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800729e:	60da      	str	r2, [r3, #12]
 80072a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072a8:	441a      	add	r2, r3
 80072aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072b2:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80072b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80072cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80072da:	4059      	eors	r1, r3
 80072dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80072ea:	404b      	eors	r3, r1
 80072ec:	441a      	add	r2, r3
 80072ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072f6:	6959      	ldr	r1, [r3, #20]
 80072f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007300:	68d8      	ldr	r0, [r3, #12]
 8007302:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007306:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800730a:	691c      	ldr	r4, [r3, #16]
 800730c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	4063      	eors	r3, r4
 8007318:	4003      	ands	r3, r0
 800731a:	404b      	eors	r3, r1
 800731c:	441a      	add	r2, r3
 800731e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007322:	3301      	adds	r3, #1
 8007324:	4994      	ldr	r1, [pc, #592]	@ (8007578 <mbedtls_internal_sha256_process+0x4dc>)
 8007326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800732a:	441a      	add	r2, r3
 800732c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007336:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800733a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800733e:	4413      	add	r3, r2
 8007340:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007344:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007348:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007352:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007356:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007360:	405a      	eors	r2, r3
 8007362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007366:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007370:	405a      	eors	r2, r3
 8007372:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007376:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800737a:	69d9      	ldr	r1, [r3, #28]
 800737c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007380:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4019      	ands	r1, r3
 8007388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800738c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007390:	6858      	ldr	r0, [r3, #4]
 8007392:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007396:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800739a:	69dc      	ldr	r4, [r3, #28]
 800739c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4323      	orrs	r3, r4
 80073a8:	4003      	ands	r3, r0
 80073aa:	430b      	orrs	r3, r1
 80073ac:	4413      	add	r3, r2
 80073ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80073b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80073c0:	441a      	add	r2, r3
 80073c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80073d4:	441a      	add	r2, r3
 80073d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073de:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80073e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80073f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007406:	4059      	eors	r1, r3
 8007408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800740c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007416:	404b      	eors	r3, r1
 8007418:	441a      	add	r2, r3
 800741a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800741e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007422:	6919      	ldr	r1, [r3, #16]
 8007424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007428:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800742c:	6898      	ldr	r0, [r3, #8]
 800742e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007432:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007436:	68dc      	ldr	r4, [r3, #12]
 8007438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800743c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	4063      	eors	r3, r4
 8007444:	4003      	ands	r3, r0
 8007446:	404b      	eors	r3, r1
 8007448:	441a      	add	r2, r3
 800744a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800744e:	3302      	adds	r3, #2
 8007450:	4949      	ldr	r1, [pc, #292]	@ (8007578 <mbedtls_internal_sha256_process+0x4dc>)
 8007452:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007456:	441a      	add	r2, r3
 8007458:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800745c:	1c99      	adds	r1, r3, #2
 800745e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007462:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007466:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800746a:	4413      	add	r3, r2
 800746c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007470:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007474:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800747e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007482:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	ea4f 3373 	mov.w	r3, r3, ror #13
 800748c:	405a      	eors	r2, r3
 800748e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007492:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800749c:	405a      	eors	r2, r3
 800749e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074a6:	6999      	ldr	r1, [r3, #24]
 80074a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	4019      	ands	r1, r3
 80074b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074c6:	699c      	ldr	r4, [r3, #24]
 80074c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	4323      	orrs	r3, r4
 80074d4:	4003      	ands	r3, r0
 80074d6:	430b      	orrs	r3, r1
 80074d8:	4413      	add	r3, r2
 80074da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80074de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80074ec:	441a      	add	r2, r3
 80074ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80074fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007500:	441a      	add	r2, r3
 8007502:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007506:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800750a:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 800750c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007510:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800751a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007524:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007528:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007532:	4059      	eors	r1, r3
 8007534:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007538:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007542:	404b      	eors	r3, r1
 8007544:	441a      	add	r2, r3
 8007546:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800754a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800754e:	68d9      	ldr	r1, [r3, #12]
 8007550:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007554:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007558:	6858      	ldr	r0, [r3, #4]
 800755a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800755e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007562:	689c      	ldr	r4, [r3, #8]
 8007564:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007568:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	4063      	eors	r3, r4
 8007570:	4003      	ands	r3, r0
 8007572:	404b      	eors	r3, r1
 8007574:	441a      	add	r2, r3
 8007576:	e001      	b.n	800757c <mbedtls_internal_sha256_process+0x4e0>
 8007578:	08010568 	.word	0x08010568
 800757c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007580:	3303      	adds	r3, #3
 8007582:	49e0      	ldr	r1, [pc, #896]	@ (8007904 <mbedtls_internal_sha256_process+0x868>)
 8007584:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007588:	441a      	add	r2, r3
 800758a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800758e:	1cd9      	adds	r1, r3, #3
 8007590:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007594:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007598:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800759c:	4413      	add	r3, r2
 800759e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80075a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80075b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	ea4f 3373 	mov.w	r3, r3, ror #13
 80075be:	405a      	eors	r2, r3
 80075c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80075ce:	405a      	eors	r2, r3
 80075d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075d8:	6959      	ldr	r1, [r3, #20]
 80075da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	4019      	ands	r1, r3
 80075e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075ee:	69d8      	ldr	r0, [r3, #28]
 80075f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075f8:	695c      	ldr	r4, [r3, #20]
 80075fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	4323      	orrs	r3, r4
 8007606:	4003      	ands	r3, r0
 8007608:	430b      	orrs	r3, r1
 800760a:	4413      	add	r3, r2
 800760c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007610:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007614:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800761e:	441a      	add	r2, r3
 8007620:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800762e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007632:	441a      	add	r2, r3
 8007634:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007638:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800763c:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 800763e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007642:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800764c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007656:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800765a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007664:	4059      	eors	r1, r3
 8007666:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800766a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007674:	404b      	eors	r3, r1
 8007676:	441a      	add	r2, r3
 8007678:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800767c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007680:	6899      	ldr	r1, [r3, #8]
 8007682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007686:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007690:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007694:	685c      	ldr	r4, [r3, #4]
 8007696:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800769a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	4063      	eors	r3, r4
 80076a2:	4003      	ands	r3, r0
 80076a4:	404b      	eors	r3, r1
 80076a6:	441a      	add	r2, r3
 80076a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076ac:	3304      	adds	r3, #4
 80076ae:	4995      	ldr	r1, [pc, #596]	@ (8007904 <mbedtls_internal_sha256_process+0x868>)
 80076b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80076b4:	441a      	add	r2, r3
 80076b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80076ba:	1d19      	adds	r1, r3, #4
 80076bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80076c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076c8:	4413      	add	r3, r2
 80076ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80076ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80076dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80076ea:	405a      	eors	r2, r3
 80076ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80076fa:	405a      	eors	r2, r3
 80076fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007700:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007704:	6919      	ldr	r1, [r3, #16]
 8007706:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800770a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	4019      	ands	r1, r3
 8007712:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007716:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800771a:	6998      	ldr	r0, [r3, #24]
 800771c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007720:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007724:	691c      	ldr	r4, [r3, #16]
 8007726:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800772a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	4323      	orrs	r3, r4
 8007732:	4003      	ands	r3, r0
 8007734:	430b      	orrs	r3, r1
 8007736:	4413      	add	r3, r2
 8007738:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800773c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007740:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007744:	69da      	ldr	r2, [r3, #28]
 8007746:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800774a:	441a      	add	r2, r3
 800774c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007750:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007754:	61da      	str	r2, [r3, #28]
 8007756:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800775a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800775e:	441a      	add	r2, r3
 8007760:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007764:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007768:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 800776a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800776e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007778:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007782:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007786:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007790:	4059      	eors	r1, r3
 8007792:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007796:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	ea4f 6373 	mov.w	r3, r3, ror #25
 80077a0:	404b      	eors	r3, r1
 80077a2:	441a      	add	r2, r3
 80077a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077b6:	69d8      	ldr	r0, [r3, #28]
 80077b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077c0:	681c      	ldr	r4, [r3, #0]
 80077c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	4063      	eors	r3, r4
 80077ce:	4003      	ands	r3, r0
 80077d0:	404b      	eors	r3, r1
 80077d2:	441a      	add	r2, r3
 80077d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077d8:	3305      	adds	r3, #5
 80077da:	494a      	ldr	r1, [pc, #296]	@ (8007904 <mbedtls_internal_sha256_process+0x868>)
 80077dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077e0:	441a      	add	r2, r3
 80077e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80077e6:	1d59      	adds	r1, r3, #5
 80077e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80077f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077f4:	4413      	add	r3, r2
 80077f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80077fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007808:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800780c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007816:	405a      	eors	r2, r3
 8007818:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800781c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007826:	405a      	eors	r2, r3
 8007828:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800782c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007830:	68d9      	ldr	r1, [r3, #12]
 8007832:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007836:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	4019      	ands	r1, r3
 800783e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007842:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007846:	6958      	ldr	r0, [r3, #20]
 8007848:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800784c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007850:	68dc      	ldr	r4, [r3, #12]
 8007852:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007856:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	4323      	orrs	r3, r4
 800785e:	4003      	ands	r3, r0
 8007860:	430b      	orrs	r3, r1
 8007862:	4413      	add	r3, r2
 8007864:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007868:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800786c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007876:	441a      	add	r2, r3
 8007878:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800787c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007880:	619a      	str	r2, [r3, #24]
 8007882:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800788a:	441a      	add	r2, r3
 800788c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007890:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007894:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8007896:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800789a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80078ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80078bc:	4059      	eors	r1, r3
 80078be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80078cc:	404b      	eors	r3, r1
 80078ce:	441a      	add	r2, r3
 80078d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078e2:	6998      	ldr	r0, [r3, #24]
 80078e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078ec:	69dc      	ldr	r4, [r3, #28]
 80078ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4063      	eors	r3, r4
 80078fa:	4003      	ands	r3, r0
 80078fc:	404b      	eors	r3, r1
 80078fe:	441a      	add	r2, r3
 8007900:	e002      	b.n	8007908 <mbedtls_internal_sha256_process+0x86c>
 8007902:	bf00      	nop
 8007904:	08010568 	.word	0x08010568
 8007908:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800790c:	3306      	adds	r3, #6
 800790e:	4981      	ldr	r1, [pc, #516]	@ (8007b14 <mbedtls_internal_sha256_process+0xa78>)
 8007910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007914:	441a      	add	r2, r3
 8007916:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800791a:	1d99      	adds	r1, r3, #6
 800791c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007920:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007924:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007928:	4413      	add	r3, r2
 800792a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800792e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007932:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800793c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007940:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	ea4f 3373 	mov.w	r3, r3, ror #13
 800794a:	405a      	eors	r2, r3
 800794c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007950:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800795a:	405a      	eors	r2, r3
 800795c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007960:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007964:	6899      	ldr	r1, [r3, #8]
 8007966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800796a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	4019      	ands	r1, r3
 8007972:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007976:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800797a:	6918      	ldr	r0, [r3, #16]
 800797c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007980:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007984:	689c      	ldr	r4, [r3, #8]
 8007986:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800798a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4323      	orrs	r3, r4
 8007992:	4003      	ands	r3, r0
 8007994:	430b      	orrs	r3, r1
 8007996:	4413      	add	r3, r2
 8007998:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800799c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079a4:	695a      	ldr	r2, [r3, #20]
 80079a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80079aa:	441a      	add	r2, r3
 80079ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079b4:	615a      	str	r2, [r3, #20]
 80079b6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80079ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079be:	441a      	add	r2, r3
 80079c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079c8:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80079ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80079e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80079f0:	4059      	eors	r1, r3
 80079f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007a00:	404b      	eors	r3, r1
 8007a02:	441a      	add	r2, r3
 8007a04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a0c:	69d9      	ldr	r1, [r3, #28]
 8007a0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a16:	6958      	ldr	r0, [r3, #20]
 8007a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a20:	699c      	ldr	r4, [r3, #24]
 8007a22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	4063      	eors	r3, r4
 8007a2e:	4003      	ands	r3, r0
 8007a30:	404b      	eors	r3, r1
 8007a32:	441a      	add	r2, r3
 8007a34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a38:	3307      	adds	r3, #7
 8007a3a:	4936      	ldr	r1, [pc, #216]	@ (8007b14 <mbedtls_internal_sha256_process+0xa78>)
 8007a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007a40:	441a      	add	r2, r3
 8007a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a46:	1dd9      	adds	r1, r3, #7
 8007a48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007a50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a54:	4413      	add	r3, r2
 8007a56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007a5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007a68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007a76:	405a      	eors	r2, r3
 8007a78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007a86:	405a      	eors	r2, r3
 8007a88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a90:	6859      	ldr	r1, [r3, #4]
 8007a92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	4019      	ands	r1, r3
 8007a9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007aa6:	68d8      	ldr	r0, [r3, #12]
 8007aa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ab0:	685c      	ldr	r4, [r3, #4]
 8007ab2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ab6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	4323      	orrs	r3, r4
 8007abe:	4003      	ands	r3, r0
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007ac8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007acc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007ad6:	441a      	add	r2, r3
 8007ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ae0:	611a      	str	r2, [r3, #16]
 8007ae2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007aea:	441a      	add	r2, r3
 8007aec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007af0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007af4:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 8007af6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007afa:	3308      	adds	r3, #8
 8007afc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007b00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b04:	2b0f      	cmp	r3, #15
 8007b06:	f67f ab41 	bls.w	800718c <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007b10:	f000 bfd5 	b.w	8008abe <mbedtls_internal_sha256_process+0x1a22>
 8007b14:	08010568 	.word	0x08010568
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8007b18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b20:	69da      	ldr	r2, [r3, #28]
 8007b22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007b30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007b3e:	4059      	eors	r1, r3
 8007b40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007b4e:	404b      	eors	r3, r1
 8007b50:	441a      	add	r2, r3
 8007b52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b5a:	6999      	ldr	r1, [r3, #24]
 8007b5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b6e:	695c      	ldr	r4, [r3, #20]
 8007b70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	4063      	eors	r3, r4
 8007b7c:	4003      	ands	r3, r0
 8007b7e:	404b      	eors	r3, r1
 8007b80:	441a      	add	r2, r3
 8007b82:	49ec      	ldr	r1, [pc, #944]	@ (8007f34 <mbedtls_internal_sha256_process+0xe98>)
 8007b84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007b8c:	441a      	add	r2, r3
 8007b8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b92:	1e99      	subs	r1, r3, #2
 8007b94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007b9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007ba0:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007ba8:	1e98      	subs	r0, r3, #2
 8007baa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bb2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007bb6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007bba:	4059      	eors	r1, r3
 8007bbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bc0:	1e98      	subs	r0, r3, #2
 8007bc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007bce:	0a9b      	lsrs	r3, r3, #10
 8007bd0:	4059      	eors	r1, r3
 8007bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bd6:	1fd8      	subs	r0, r3, #7
 8007bd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bdc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007be0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007be4:	4419      	add	r1, r3
 8007be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bea:	f1a3 000f 	sub.w	r0, r3, #15
 8007bee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bf6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007bfa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007bfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c02:	f1a3 040f 	sub.w	r4, r3, #15
 8007c06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c12:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007c16:	4058      	eors	r0, r3
 8007c18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c1c:	f1a3 040f 	sub.w	r4, r3, #15
 8007c20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c2c:	08db      	lsrs	r3, r3, #3
 8007c2e:	4043      	eors	r3, r0
 8007c30:	4419      	add	r1, r3
 8007c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c36:	f1a3 0010 	sub.w	r0, r3, #16
 8007c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c46:	18c8      	adds	r0, r1, r3
 8007c48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c4c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c50:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007c54:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8007c58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c60:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007c64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007c6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007c7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007c8a:	405a      	eors	r2, r3
 8007c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007c9a:	405a      	eors	r2, r3
 8007c9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ca0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ca4:	6819      	ldr	r1, [r3, #0]
 8007ca6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007caa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4019      	ands	r1, r3
 8007cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cba:	6898      	ldr	r0, [r3, #8]
 8007cbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cc4:	681c      	ldr	r4, [r3, #0]
 8007cc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4323      	orrs	r3, r4
 8007cd2:	4003      	ands	r3, r0
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007cdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ce0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007cea:	441a      	add	r2, r3
 8007cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cf4:	60da      	str	r2, [r3, #12]
 8007cf6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007cfe:	441a      	add	r2, r3
 8007d00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d08:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8007d0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007d22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007d30:	4059      	eors	r1, r3
 8007d32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007d40:	404b      	eors	r3, r1
 8007d42:	441a      	add	r2, r3
 8007d44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d4c:	6959      	ldr	r1, [r3, #20]
 8007d4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d56:	68d8      	ldr	r0, [r3, #12]
 8007d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d60:	691c      	ldr	r4, [r3, #16]
 8007d62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	4063      	eors	r3, r4
 8007d6e:	4003      	ands	r3, r0
 8007d70:	404b      	eors	r3, r1
 8007d72:	441a      	add	r2, r3
 8007d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d78:	3301      	adds	r3, #1
 8007d7a:	496e      	ldr	r1, [pc, #440]	@ (8007f34 <mbedtls_internal_sha256_process+0xe98>)
 8007d7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d80:	441a      	add	r2, r3
 8007d82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d86:	1e59      	subs	r1, r3, #1
 8007d88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d94:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007d98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d9c:	1e58      	subs	r0, r3, #1
 8007d9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007da2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007da6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007daa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007dae:	4059      	eors	r1, r3
 8007db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007db4:	1e58      	subs	r0, r3, #1
 8007db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007dc2:	0a9b      	lsrs	r3, r3, #10
 8007dc4:	4059      	eors	r1, r3
 8007dc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dca:	1f98      	subs	r0, r3, #6
 8007dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007dd8:	4419      	add	r1, r3
 8007dda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dde:	f1a3 000e 	sub.w	r0, r3, #14
 8007de2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007dee:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007df6:	f1a3 040e 	sub.w	r4, r3, #14
 8007dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e06:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007e0a:	4058      	eors	r0, r3
 8007e0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e10:	f1a3 040e 	sub.w	r4, r3, #14
 8007e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e20:	08db      	lsrs	r3, r3, #3
 8007e22:	4043      	eors	r3, r0
 8007e24:	18c8      	adds	r0, r1, r3
 8007e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e2a:	f1a3 010f 	sub.w	r1, r3, #15
 8007e2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e36:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e3e:	3301      	adds	r3, #1
 8007e40:	4408      	add	r0, r1
 8007e42:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007e46:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007e4a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007e4e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007e52:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007e60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007e6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007e7c:	405a      	eors	r2, r3
 8007e7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007e8c:	405a      	eors	r2, r3
 8007e8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007e96:	69d9      	ldr	r1, [r3, #28]
 8007e98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4019      	ands	r1, r3
 8007ea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eac:	6858      	ldr	r0, [r3, #4]
 8007eae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eb6:	69dc      	ldr	r4, [r3, #28]
 8007eb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ebc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4323      	orrs	r3, r4
 8007ec4:	4003      	ands	r3, r0
 8007ec6:	430b      	orrs	r3, r1
 8007ec8:	4413      	add	r3, r2
 8007eca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ed2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007edc:	441a      	add	r2, r3
 8007ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ee2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ee6:	609a      	str	r2, [r3, #8]
 8007ee8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007ef0:	441a      	add	r2, r3
 8007ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007efa:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8007efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007f22:	4059      	eors	r1, r3
 8007f24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007f32:	e001      	b.n	8007f38 <mbedtls_internal_sha256_process+0xe9c>
 8007f34:	08010568 	.word	0x08010568
 8007f38:	404b      	eors	r3, r1
 8007f3a:	441a      	add	r2, r3
 8007f3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f44:	6919      	ldr	r1, [r3, #16]
 8007f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f4e:	6898      	ldr	r0, [r3, #8]
 8007f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f58:	68dc      	ldr	r4, [r3, #12]
 8007f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	4063      	eors	r3, r4
 8007f66:	4003      	ands	r3, r0
 8007f68:	404b      	eors	r3, r1
 8007f6a:	441a      	add	r2, r3
 8007f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007f70:	3302      	adds	r3, #2
 8007f72:	49ec      	ldr	r1, [pc, #944]	@ (8008324 <mbedtls_internal_sha256_process+0x1288>)
 8007f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f78:	441a      	add	r2, r3
 8007f7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f82:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007f86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f8a:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007f96:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007f9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007f9e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007fa2:	4059      	eors	r1, r3
 8007fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fac:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007fb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007fb4:	0a9b      	lsrs	r3, r3, #10
 8007fb6:	4059      	eors	r1, r3
 8007fb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fbc:	1f58      	subs	r0, r3, #5
 8007fbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fc6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007fca:	4419      	add	r1, r3
 8007fcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fd0:	f1a3 000d 	sub.w	r0, r3, #13
 8007fd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fdc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007fe0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007fe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fe8:	f1a3 040d 	sub.w	r4, r3, #13
 8007fec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ff0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ff4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007ff8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007ffc:	4058      	eors	r0, r3
 8007ffe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008002:	f1a3 040d 	sub.w	r4, r3, #13
 8008006:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800800a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800800e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008012:	08db      	lsrs	r3, r3, #3
 8008014:	4043      	eors	r3, r0
 8008016:	18c8      	adds	r0, r1, r3
 8008018:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800801c:	f1a3 010e 	sub.w	r1, r3, #14
 8008020:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008024:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008028:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800802c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008030:	3302      	adds	r3, #2
 8008032:	4408      	add	r0, r1
 8008034:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008038:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800803c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008040:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008044:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008048:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800804c:	4413      	add	r3, r2
 800804e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008052:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008056:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008060:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008064:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800806e:	405a      	eors	r2, r3
 8008070:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008074:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800807e:	405a      	eors	r2, r3
 8008080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008088:	6999      	ldr	r1, [r3, #24]
 800808a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800808e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	4019      	ands	r1, r3
 8008096:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800809a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080a8:	699c      	ldr	r4, [r3, #24]
 80080aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	4323      	orrs	r3, r4
 80080b6:	4003      	ands	r3, r0
 80080b8:	430b      	orrs	r3, r1
 80080ba:	4413      	add	r3, r2
 80080bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80080c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80080ce:	441a      	add	r2, r3
 80080d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80080de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80080e2:	441a      	add	r2, r3
 80080e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ec:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80080ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080f6:	691a      	ldr	r2, [r3, #16]
 80080f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008106:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800810a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008114:	4059      	eors	r1, r3
 8008116:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800811a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008124:	404b      	eors	r3, r1
 8008126:	441a      	add	r2, r3
 8008128:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800812c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008130:	68d9      	ldr	r1, [r3, #12]
 8008132:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008136:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800813a:	6858      	ldr	r0, [r3, #4]
 800813c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008140:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008144:	689c      	ldr	r4, [r3, #8]
 8008146:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800814a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	4063      	eors	r3, r4
 8008152:	4003      	ands	r3, r0
 8008154:	404b      	eors	r3, r1
 8008156:	441a      	add	r2, r3
 8008158:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800815c:	3303      	adds	r3, #3
 800815e:	4971      	ldr	r1, [pc, #452]	@ (8008324 <mbedtls_internal_sha256_process+0x1288>)
 8008160:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008164:	441a      	add	r2, r3
 8008166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008170:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008178:	ea4f 4173 	mov.w	r1, r3, ror #17
 800817c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008180:	1c58      	adds	r0, r3, #1
 8008182:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008186:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800818a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800818e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008192:	4059      	eors	r1, r3
 8008194:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008198:	1c58      	adds	r0, r3, #1
 800819a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800819e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081a6:	0a9b      	lsrs	r3, r3, #10
 80081a8:	4059      	eors	r1, r3
 80081aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081ae:	1f18      	subs	r0, r3, #4
 80081b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081bc:	4419      	add	r1, r3
 80081be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081c2:	f1a3 000c 	sub.w	r0, r3, #12
 80081c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081d2:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80081d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081da:	f1a3 040c 	sub.w	r4, r3, #12
 80081de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80081ea:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80081ee:	4058      	eors	r0, r3
 80081f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081f4:	f1a3 040c 	sub.w	r4, r3, #12
 80081f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008200:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008204:	08db      	lsrs	r3, r3, #3
 8008206:	4043      	eors	r3, r0
 8008208:	18c8      	adds	r0, r1, r3
 800820a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800820e:	f1a3 010d 	sub.w	r1, r3, #13
 8008212:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008216:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800821a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800821e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008222:	3303      	adds	r3, #3
 8008224:	4408      	add	r0, r1
 8008226:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800822a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800822e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008232:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008236:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800823a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800823e:	4413      	add	r3, r2
 8008240:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008244:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008256:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008260:	405a      	eors	r2, r3
 8008262:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008266:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008270:	405a      	eors	r2, r3
 8008272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008276:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800827a:	6959      	ldr	r1, [r3, #20]
 800827c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008280:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	4019      	ands	r1, r3
 8008288:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800828c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008290:	69d8      	ldr	r0, [r3, #28]
 8008292:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008296:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800829a:	695c      	ldr	r4, [r3, #20]
 800829c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	4323      	orrs	r3, r4
 80082a8:	4003      	ands	r3, r0
 80082aa:	430b      	orrs	r3, r1
 80082ac:	4413      	add	r3, r2
 80082ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80082b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80082c0:	441a      	add	r2, r3
 80082c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80082d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80082d4:	441a      	add	r2, r3
 80082d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082de:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80082e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082e8:	68da      	ldr	r2, [r3, #12]
 80082ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80082f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008306:	4059      	eors	r1, r3
 8008308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800830c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008316:	404b      	eors	r3, r1
 8008318:	441a      	add	r2, r3
 800831a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800831e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008322:	e001      	b.n	8008328 <mbedtls_internal_sha256_process+0x128c>
 8008324:	08010568 	.word	0x08010568
 8008328:	6899      	ldr	r1, [r3, #8]
 800832a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800832e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008338:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800833c:	685c      	ldr	r4, [r3, #4]
 800833e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008342:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	4063      	eors	r3, r4
 800834a:	4003      	ands	r3, r0
 800834c:	404b      	eors	r3, r1
 800834e:	441a      	add	r2, r3
 8008350:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008354:	3304      	adds	r3, #4
 8008356:	49ec      	ldr	r1, [pc, #944]	@ (8008708 <mbedtls_internal_sha256_process+0x166c>)
 8008358:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800835c:	441a      	add	r2, r3
 800835e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008362:	1c99      	adds	r1, r3, #2
 8008364:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008368:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800836c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008370:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008374:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008378:	1c98      	adds	r0, r3, #2
 800837a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800837e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008382:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008386:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800838a:	4059      	eors	r1, r3
 800838c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008390:	1c98      	adds	r0, r3, #2
 8008392:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800839a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800839e:	0a9b      	lsrs	r3, r3, #10
 80083a0:	4059      	eors	r1, r3
 80083a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083a6:	1ed8      	subs	r0, r3, #3
 80083a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083b4:	4419      	add	r1, r3
 80083b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083ba:	f1a3 000b 	sub.w	r0, r3, #11
 80083be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083ca:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80083ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083d2:	f1a3 040b 	sub.w	r4, r3, #11
 80083d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80083e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80083e6:	4058      	eors	r0, r3
 80083e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083ec:	f1a3 040b 	sub.w	r4, r3, #11
 80083f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	4043      	eors	r3, r0
 8008400:	18c8      	adds	r0, r1, r3
 8008402:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008406:	f1a3 010c 	sub.w	r1, r3, #12
 800840a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800840e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008412:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008416:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800841a:	3304      	adds	r3, #4
 800841c:	4408      	add	r0, r1
 800841e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008422:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008426:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800842a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800842e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008432:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008436:	4413      	add	r3, r2
 8008438:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800843c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008440:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800844a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800844e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008458:	405a      	eors	r2, r3
 800845a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800845e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008468:	405a      	eors	r2, r3
 800846a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800846e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008472:	6919      	ldr	r1, [r3, #16]
 8008474:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008478:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	4019      	ands	r1, r3
 8008480:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008484:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008488:	6998      	ldr	r0, [r3, #24]
 800848a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800848e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008492:	691c      	ldr	r4, [r3, #16]
 8008494:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008498:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4323      	orrs	r3, r4
 80084a0:	4003      	ands	r3, r0
 80084a2:	430b      	orrs	r3, r1
 80084a4:	4413      	add	r3, r2
 80084a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80084aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084b2:	69da      	ldr	r2, [r3, #28]
 80084b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80084b8:	441a      	add	r2, r3
 80084ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084c2:	61da      	str	r2, [r3, #28]
 80084c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80084c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80084cc:	441a      	add	r2, r3
 80084ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084d6:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80084d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80084f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80084fe:	4059      	eors	r1, r3
 8008500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008504:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800850e:	404b      	eors	r3, r1
 8008510:	441a      	add	r2, r3
 8008512:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800851a:	6859      	ldr	r1, [r3, #4]
 800851c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008520:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008524:	69d8      	ldr	r0, [r3, #28]
 8008526:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800852a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800852e:	681c      	ldr	r4, [r3, #0]
 8008530:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008534:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	4063      	eors	r3, r4
 800853c:	4003      	ands	r3, r0
 800853e:	404b      	eors	r3, r1
 8008540:	441a      	add	r2, r3
 8008542:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008546:	3305      	adds	r3, #5
 8008548:	496f      	ldr	r1, [pc, #444]	@ (8008708 <mbedtls_internal_sha256_process+0x166c>)
 800854a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800854e:	441a      	add	r2, r3
 8008550:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008554:	1cd9      	adds	r1, r3, #3
 8008556:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800855a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800855e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008562:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008566:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800856a:	1cd8      	adds	r0, r3, #3
 800856c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008570:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008574:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008578:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800857c:	4059      	eors	r1, r3
 800857e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008582:	1cd8      	adds	r0, r3, #3
 8008584:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008588:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800858c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008590:	0a9b      	lsrs	r3, r3, #10
 8008592:	4059      	eors	r1, r3
 8008594:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008598:	1e98      	subs	r0, r3, #2
 800859a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800859e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085a6:	4419      	add	r1, r3
 80085a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085ac:	f1a3 000a 	sub.w	r0, r3, #10
 80085b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085bc:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80085c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085c4:	f1a3 040a 	sub.w	r4, r3, #10
 80085c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80085d4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80085d8:	4058      	eors	r0, r3
 80085da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085de:	f1a3 040a 	sub.w	r4, r3, #10
 80085e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80085ee:	08db      	lsrs	r3, r3, #3
 80085f0:	4043      	eors	r3, r0
 80085f2:	18c8      	adds	r0, r1, r3
 80085f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085f8:	f1a3 010b 	sub.w	r1, r3, #11
 80085fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008600:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008604:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008608:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800860c:	3305      	adds	r3, #5
 800860e:	4408      	add	r0, r1
 8008610:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008614:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008618:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800861c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008620:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008624:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008628:	4413      	add	r3, r2
 800862a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800862e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008632:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800863c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008640:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	ea4f 3373 	mov.w	r3, r3, ror #13
 800864a:	405a      	eors	r2, r3
 800864c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008650:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800865a:	405a      	eors	r2, r3
 800865c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008660:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008664:	68d9      	ldr	r1, [r3, #12]
 8008666:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800866a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	4019      	ands	r1, r3
 8008672:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008676:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800867a:	6958      	ldr	r0, [r3, #20]
 800867c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008680:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008684:	68dc      	ldr	r4, [r3, #12]
 8008686:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800868a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	4323      	orrs	r3, r4
 8008692:	4003      	ands	r3, r0
 8008694:	430b      	orrs	r3, r1
 8008696:	4413      	add	r3, r2
 8008698:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800869c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80086aa:	441a      	add	r2, r3
 80086ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086b4:	619a      	str	r2, [r3, #24]
 80086b6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80086ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80086be:	441a      	add	r2, r3
 80086c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086c8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80086ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80086e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80086f0:	4059      	eors	r1, r3
 80086f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008700:	404b      	eors	r3, r1
 8008702:	441a      	add	r2, r3
 8008704:	e002      	b.n	800870c <mbedtls_internal_sha256_process+0x1670>
 8008706:	bf00      	nop
 8008708:	08010568 	.word	0x08010568
 800870c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008714:	6819      	ldr	r1, [r3, #0]
 8008716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800871a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800871e:	6998      	ldr	r0, [r3, #24]
 8008720:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008724:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008728:	69dc      	ldr	r4, [r3, #28]
 800872a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800872e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4063      	eors	r3, r4
 8008736:	4003      	ands	r3, r0
 8008738:	404b      	eors	r3, r1
 800873a:	441a      	add	r2, r3
 800873c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008740:	3306      	adds	r3, #6
 8008742:	49e3      	ldr	r1, [pc, #908]	@ (8008ad0 <mbedtls_internal_sha256_process+0x1a34>)
 8008744:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008748:	441a      	add	r2, r3
 800874a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800874e:	1d19      	adds	r1, r3, #4
 8008750:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008754:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008758:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800875c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008760:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008764:	1d18      	adds	r0, r3, #4
 8008766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800876a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800876e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008772:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008776:	4059      	eors	r1, r3
 8008778:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800877c:	1d18      	adds	r0, r3, #4
 800877e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008786:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800878a:	0a9b      	lsrs	r3, r3, #10
 800878c:	4059      	eors	r1, r3
 800878e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008792:	1e58      	subs	r0, r3, #1
 8008794:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800879c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087a0:	4419      	add	r1, r3
 80087a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087a6:	f1a3 0009 	sub.w	r0, r3, #9
 80087aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087b6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80087ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087be:	f1a3 0409 	sub.w	r4, r3, #9
 80087c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087ce:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80087d2:	4058      	eors	r0, r3
 80087d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087d8:	f1a3 0409 	sub.w	r4, r3, #9
 80087dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087e8:	08db      	lsrs	r3, r3, #3
 80087ea:	4043      	eors	r3, r0
 80087ec:	18c8      	adds	r0, r1, r3
 80087ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087f2:	f1a3 010a 	sub.w	r1, r3, #10
 80087f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087fe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008802:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008806:	3306      	adds	r3, #6
 8008808:	4408      	add	r0, r1
 800880a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800880e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008812:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008816:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800881a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800881e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008822:	4413      	add	r3, r2
 8008824:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008828:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800882c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008836:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800883a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008844:	405a      	eors	r2, r3
 8008846:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800884a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008854:	405a      	eors	r2, r3
 8008856:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800885a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800885e:	6899      	ldr	r1, [r3, #8]
 8008860:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008864:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	4019      	ands	r1, r3
 800886c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008870:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008874:	6918      	ldr	r0, [r3, #16]
 8008876:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800887a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800887e:	689c      	ldr	r4, [r3, #8]
 8008880:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008884:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	4323      	orrs	r3, r4
 800888c:	4003      	ands	r3, r0
 800888e:	430b      	orrs	r3, r1
 8008890:	4413      	add	r3, r2
 8008892:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008896:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800889a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800889e:	695a      	ldr	r2, [r3, #20]
 80088a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80088a4:	441a      	add	r2, r3
 80088a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088ae:	615a      	str	r2, [r3, #20]
 80088b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80088b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80088b8:	441a      	add	r2, r3
 80088ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088c2:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80088c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80088dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80088ea:	4059      	eors	r1, r3
 80088ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	ea4f 6373 	mov.w	r3, r3, ror #25
 80088fa:	404b      	eors	r3, r1
 80088fc:	441a      	add	r2, r3
 80088fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008902:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008906:	69d9      	ldr	r1, [r3, #28]
 8008908:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800890c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008910:	6958      	ldr	r0, [r3, #20]
 8008912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800891a:	699c      	ldr	r4, [r3, #24]
 800891c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008920:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	4063      	eors	r3, r4
 8008928:	4003      	ands	r3, r0
 800892a:	404b      	eors	r3, r1
 800892c:	441a      	add	r2, r3
 800892e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008932:	3307      	adds	r3, #7
 8008934:	4966      	ldr	r1, [pc, #408]	@ (8008ad0 <mbedtls_internal_sha256_process+0x1a34>)
 8008936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800893a:	441a      	add	r2, r3
 800893c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008940:	1d59      	adds	r1, r3, #5
 8008942:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008946:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800894a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800894e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8008952:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008956:	1d58      	adds	r0, r3, #5
 8008958:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800895c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008960:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008964:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8008968:	4059      	eors	r1, r3
 800896a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800896e:	1d58      	adds	r0, r3, #5
 8008970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008974:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008978:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800897c:	0a9b      	lsrs	r3, r3, #10
 800897e:	4059      	eors	r1, r3
 8008980:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008984:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008988:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 800898c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008990:	4419      	add	r1, r3
 8008992:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008996:	f1a3 0008 	sub.w	r0, r3, #8
 800899a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800899e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089a6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80089aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089ae:	f1a3 0408 	sub.w	r4, r3, #8
 80089b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80089be:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80089c2:	4058      	eors	r0, r3
 80089c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089c8:	f1a3 0408 	sub.w	r4, r3, #8
 80089cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80089d8:	08db      	lsrs	r3, r3, #3
 80089da:	4043      	eors	r3, r0
 80089dc:	18c8      	adds	r0, r1, r3
 80089de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089e2:	f1a3 0109 	sub.w	r1, r3, #9
 80089e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80089f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089f6:	3307      	adds	r3, #7
 80089f8:	4408      	add	r0, r1
 80089fa:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80089fe:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008a02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008a06:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008a0a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008a0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a12:	4413      	add	r3, r2
 8008a14:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008a26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008a34:	405a      	eors	r2, r3
 8008a36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008a44:	405a      	eors	r2, r3
 8008a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a4e:	6859      	ldr	r1, [r3, #4]
 8008a50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	4019      	ands	r1, r3
 8008a5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a64:	68d8      	ldr	r0, [r3, #12]
 8008a66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a6e:	685c      	ldr	r4, [r3, #4]
 8008a70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4323      	orrs	r3, r4
 8008a7c:	4003      	ands	r3, r0
 8008a7e:	430b      	orrs	r3, r1
 8008a80:	4413      	add	r3, r2
 8008a82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008a94:	441a      	add	r2, r3
 8008a96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a9e:	611a      	str	r2, [r3, #16]
 8008aa0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008aa8:	441a      	add	r2, r3
 8008aaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ab2:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8008ab4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ab8:	3308      	adds	r3, #8
 8008aba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008abe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008ac2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ac4:	f67f a828 	bls.w	8007b18 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008ace:	e023      	b.n	8008b18 <mbedtls_internal_sha256_process+0x1a7c>
 8008ad0:	08010568 	.word	0x08010568
        ctx->state[i] += A[i];
 8008ad4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ad8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8008ae2:	3202      	adds	r2, #2
 8008ae4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ae8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008af0:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008af8:	18d1      	adds	r1, r2, r3
 8008afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008afe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8008b08:	3202      	adds	r2, #2
 8008b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8008b0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b12:	3301      	adds	r3, #1
 8008b14:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b1c:	2b07      	cmp	r3, #7
 8008b1e:	d9d9      	bls.n	8008ad4 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc90      	pop	{r4, r7}
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop

08008b30 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8008b42:	2300      	movs	r3, #0
 8008b44:	e065      	b.n	8008c12 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b4e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008b56:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	441a      	add	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d904      	bls.n	8008b80 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d034      	beq.n	8008bf0 <mbedtls_sha256_update_ret+0xc0>
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d330      	bcc.n	8008bf0 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	4413      	add	r3, r2
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f006 fcec 	bl	800f57a <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3328      	adds	r3, #40	@ 0x28
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7fe fa77 	bl	800709c <mbedtls_internal_sha256_process>
 8008bae:	6178      	str	r0, [r7, #20]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	e02b      	b.n	8008c12 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	607b      	str	r3, [r7, #4]
        left = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8008bce:	e00f      	b.n	8008bf0 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8008bd0:	68b9      	ldr	r1, [r7, #8]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7fe fa62 	bl	800709c <mbedtls_internal_sha256_process>
 8008bd8:	6178      	str	r0, [r7, #20]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	e016      	b.n	8008c12 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3340      	adds	r3, #64	@ 0x40
 8008be8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3b40      	subs	r3, #64	@ 0x40
 8008bee:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008bf4:	d8ec      	bhi.n	8008bd0 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f006 fcb5 	bl	800f57a <memcpy>

    return( 0 );
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c2c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	617a      	str	r2, [r7, #20]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	4413      	add	r3, r2
 8008c38:	2280      	movs	r2, #128	@ 0x80
 8008c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b38      	cmp	r3, #56	@ 0x38
 8008c42:	d80c      	bhi.n	8008c5e <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	18d0      	adds	r0, r2, r3
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008c54:	461a      	mov	r2, r3
 8008c56:	2100      	movs	r1, #0
 8008c58:	f006 fc4a 	bl	800f4f0 <memset>
 8008c5c:	e01e      	b.n	8008c9c <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	18d0      	adds	r0, r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2100      	movs	r1, #0
 8008c72:	f006 fc3d 	bl	800f4f0 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3328      	adds	r3, #40	@ 0x28
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fe fa0d 	bl	800709c <mbedtls_internal_sha256_process>
 8008c82:	6138      	str	r0, [r7, #16]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	e128      	b.n	8008ee0 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3328      	adds	r3, #40	@ 0x28
 8008c92:	2238      	movs	r2, #56	@ 0x38
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f006 fc2a 	bl	800f4f0 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	0e1b      	lsrs	r3, r3, #24
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	0c1b      	lsrs	r3, r3, #16
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	0a1b      	lsrs	r3, r3, #8
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	0e1b      	lsrs	r3, r3, #24
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	0c1b      	lsrs	r3, r3, #16
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	0a1b      	lsrs	r3, r3, #8
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3328      	adds	r3, #40	@ 0x28
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fe f9c0 	bl	800709c <mbedtls_internal_sha256_process>
 8008d1c:	6138      	str	r0, [r7, #16]
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	e0db      	b.n	8008ee0 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	0e1b      	lsrs	r3, r3, #24
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	701a      	strb	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	0c1a      	lsrs	r2, r3, #16
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	0a1a      	lsrs	r2, r3, #8
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	3303      	adds	r3, #3
 8008d58:	b2d2      	uxtb	r2, r2
 8008d5a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	0e1a      	lsrs	r2, r3, #24
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	3304      	adds	r3, #4
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	0c1a      	lsrs	r2, r3, #16
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	3305      	adds	r3, #5
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	0a1a      	lsrs	r2, r3, #8
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	3306      	adds	r3, #6
 8008d82:	b2d2      	uxtb	r2, r2
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	3307      	adds	r3, #7
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	0e1a      	lsrs	r2, r3, #24
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	0c1a      	lsrs	r2, r3, #16
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	3309      	adds	r3, #9
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	0a1a      	lsrs	r2, r3, #8
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	330a      	adds	r3, #10
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	330b      	adds	r3, #11
 8008dc4:	b2d2      	uxtb	r2, r2
 8008dc6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	0e1a      	lsrs	r2, r3, #24
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	330c      	adds	r3, #12
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	0c1a      	lsrs	r2, r3, #16
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	330d      	adds	r3, #13
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	701a      	strb	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	0a1a      	lsrs	r2, r3, #8
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	330e      	adds	r3, #14
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	701a      	strb	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695a      	ldr	r2, [r3, #20]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	330f      	adds	r3, #15
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	0e1a      	lsrs	r2, r3, #24
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	3310      	adds	r3, #16
 8008e08:	b2d2      	uxtb	r2, r2
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	0c1a      	lsrs	r2, r3, #16
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	3311      	adds	r3, #17
 8008e16:	b2d2      	uxtb	r2, r2
 8008e18:	701a      	strb	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	0a1a      	lsrs	r2, r3, #8
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	3312      	adds	r3, #18
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	701a      	strb	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	699a      	ldr	r2, [r3, #24]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	3313      	adds	r3, #19
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	0e1a      	lsrs	r2, r3, #24
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	3314      	adds	r3, #20
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	0c1a      	lsrs	r2, r3, #16
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	3315      	adds	r3, #21
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	0a1a      	lsrs	r2, r3, #8
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	3316      	adds	r3, #22
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	3317      	adds	r3, #23
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	0e1a      	lsrs	r2, r3, #24
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	3318      	adds	r3, #24
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	0c1a      	lsrs	r2, r3, #16
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	3319      	adds	r3, #25
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	0a1a      	lsrs	r2, r3, #8
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	331a      	adds	r3, #26
 8008e90:	b2d2      	uxtb	r2, r2
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a1a      	ldr	r2, [r3, #32]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	331b      	adds	r3, #27
 8008e9c:	b2d2      	uxtb	r2, r2
 8008e9e:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d11a      	bne.n	8008ede <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eac:	0e1a      	lsrs	r2, r3, #24
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	331c      	adds	r3, #28
 8008eb2:	b2d2      	uxtb	r2, r2
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eba:	0c1a      	lsrs	r2, r3, #16
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	331d      	adds	r3, #29
 8008ec0:	b2d2      	uxtb	r2, r2
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec8:	0a1a      	lsrs	r2, r3, #8
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	331e      	adds	r3, #30
 8008ece:	b2d2      	uxtb	r2, r2
 8008ed0:	701a      	strb	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	331f      	adds	r3, #31
 8008eda:	b2d2      	uxtb	r2, r2
 8008edc:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008eee:	2300      	movs	r3, #0
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <HAL_MspInit+0x4c>)
 8008ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8008f34 <HAL_MspInit+0x4c>)
 8008ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8008efe:	4b0d      	ldr	r3, [pc, #52]	@ (8008f34 <HAL_MspInit+0x4c>)
 8008f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f06:	607b      	str	r3, [r7, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	603b      	str	r3, [r7, #0]
 8008f0e:	4b09      	ldr	r3, [pc, #36]	@ (8008f34 <HAL_MspInit+0x4c>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f12:	4a08      	ldr	r2, [pc, #32]	@ (8008f34 <HAL_MspInit+0x4c>)
 8008f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f1a:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <HAL_MspInit+0x4c>)
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40023800 	.word	0x40023800

08008f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b08a      	sub	sp, #40	@ 0x28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	605a      	str	r2, [r3, #4]
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	60da      	str	r2, [r3, #12]
 8008f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a1d      	ldr	r2, [pc, #116]	@ (8008fcc <HAL_I2C_MspInit+0x94>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d134      	bne.n	8008fc4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd0 <HAL_I2C_MspInit+0x98>)
 8008f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f62:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd0 <HAL_I2C_MspInit+0x98>)
 8008f64:	f043 0302 	orr.w	r3, r3, #2
 8008f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f6a:	4b19      	ldr	r3, [pc, #100]	@ (8008fd0 <HAL_I2C_MspInit+0x98>)
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	613b      	str	r3, [r7, #16]
 8008f74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008f76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f7c:	2312      	movs	r3, #18
 8008f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f84:	2303      	movs	r3, #3
 8008f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008f88:	2304      	movs	r3, #4
 8008f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	4619      	mov	r1, r3
 8008f92:	4810      	ldr	r0, [pc, #64]	@ (8008fd4 <HAL_I2C_MspInit+0x9c>)
 8008f94:	f000 ff1c 	bl	8009dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd0 <HAL_I2C_MspInit+0x98>)
 8008f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8008fd0 <HAL_I2C_MspInit+0x98>)
 8008fa2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8008fa8:	4b09      	ldr	r3, [pc, #36]	@ (8008fd0 <HAL_I2C_MspInit+0x98>)
 8008faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	2020      	movs	r0, #32
 8008fba:	f000 fb4a 	bl	8009652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8008fbe:	2020      	movs	r0, #32
 8008fc0:	f000 fb63 	bl	800968a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008fc4:	bf00      	nop
 8008fc6:	3728      	adds	r7, #40	@ 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40005400 	.word	0x40005400
 8008fd0:	40023800 	.word	0x40023800
 8008fd4:	40020400 	.word	0x40020400

08008fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fe8:	d115      	bne.n	8009016 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <HAL_TIM_Base_MspInit+0x48>)
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8009020 <HAL_TIM_Base_MspInit+0x48>)
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ffa:	4b09      	ldr	r3, [pc, #36]	@ (8009020 <HAL_TIM_Base_MspInit+0x48>)
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	201c      	movs	r0, #28
 800900c:	f000 fb21 	bl	8009652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009010:	201c      	movs	r0, #28
 8009012:	f000 fb3a 	bl	800968a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	40023800 	.word	0x40023800

08009024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	@ 0x28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	609a      	str	r2, [r3, #8]
 8009038:	60da      	str	r2, [r3, #12]
 800903a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1d      	ldr	r2, [pc, #116]	@ (80090b8 <HAL_UART_MspInit+0x94>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d133      	bne.n	80090ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	4b1c      	ldr	r3, [pc, #112]	@ (80090bc <HAL_UART_MspInit+0x98>)
 800904c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904e:	4a1b      	ldr	r2, [pc, #108]	@ (80090bc <HAL_UART_MspInit+0x98>)
 8009050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009054:	6413      	str	r3, [r2, #64]	@ 0x40
 8009056:	4b19      	ldr	r3, [pc, #100]	@ (80090bc <HAL_UART_MspInit+0x98>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <HAL_UART_MspInit+0x98>)
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	4a14      	ldr	r2, [pc, #80]	@ (80090bc <HAL_UART_MspInit+0x98>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	6313      	str	r3, [r2, #48]	@ 0x30
 8009072:	4b12      	ldr	r3, [pc, #72]	@ (80090bc <HAL_UART_MspInit+0x98>)
 8009074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800907e:	230c      	movs	r3, #12
 8009080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009082:	2302      	movs	r3, #2
 8009084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009086:	2300      	movs	r3, #0
 8009088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800908a:	2300      	movs	r3, #0
 800908c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800908e:	2307      	movs	r3, #7
 8009090:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009092:	f107 0314 	add.w	r3, r7, #20
 8009096:	4619      	mov	r1, r3
 8009098:	4809      	ldr	r0, [pc, #36]	@ (80090c0 <HAL_UART_MspInit+0x9c>)
 800909a:	f000 fe99 	bl	8009dd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800909e:	2200      	movs	r2, #0
 80090a0:	2100      	movs	r1, #0
 80090a2:	2026      	movs	r0, #38	@ 0x26
 80090a4:	f000 fad5 	bl	8009652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80090a8:	2026      	movs	r0, #38	@ 0x26
 80090aa:	f000 faee 	bl	800968a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80090ae:	bf00      	nop
 80090b0:	3728      	adds	r7, #40	@ 0x28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	40004400 	.word	0x40004400
 80090bc:	40023800 	.word	0x40023800
 80090c0:	40020000 	.word	0x40020000

080090c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80090c8:	bf00      	nop
 80090ca:	e7fd      	b.n	80090c8 <NMI_Handler+0x4>

080090cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80090cc:	b480      	push	{r7}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80090d0:	bf00      	nop
 80090d2:	e7fd      	b.n	80090d0 <HardFault_Handler+0x4>

080090d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80090d8:	bf00      	nop
 80090da:	e7fd      	b.n	80090d8 <MemManage_Handler+0x4>

080090dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80090e0:	bf00      	nop
 80090e2:	e7fd      	b.n	80090e0 <BusFault_Handler+0x4>

080090e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090e4:	b480      	push	{r7}
 80090e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <UsageFault_Handler+0x4>

080090ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80090f0:	bf00      	nop
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80090fa:	b480      	push	{r7}
 80090fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80090fe:	bf00      	nop
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800910c:	bf00      	nop
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800911a:	f000 f965 	bl	80093e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009128:	4802      	ldr	r0, [pc, #8]	@ (8009134 <TIM2_IRQHandler+0x10>)
 800912a:	f004 fb9d 	bl	800d868 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800912e:	bf00      	nop
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000a4c 	.word	0x20000a4c

08009138 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800913c:	4802      	ldr	r0, [pc, #8]	@ (8009148 <I2C1_EV_IRQHandler+0x10>)
 800913e:	f001 fdf3 	bl	800ad28 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009142:	bf00      	nop
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	200009f8 	.word	0x200009f8

0800914c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009150:	4802      	ldr	r0, [pc, #8]	@ (800915c <I2C1_ER_IRQHandler+0x10>)
 8009152:	f001 ff3c 	bl	800afce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009156:	bf00      	nop
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	200009f8 	.word	0x200009f8

08009160 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009164:	4802      	ldr	r0, [pc, #8]	@ (8009170 <USART2_IRQHandler+0x10>)
 8009166:	f005 f873 	bl	800e250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800916a:	bf00      	nop
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000a94 	.word	0x20000a94

08009174 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009178:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800917c:	f000 fff8 	bl	800a170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}

08009184 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e00a      	b.n	80091ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009196:	f3af 8000 	nop.w
 800919a:	4601      	mov	r1, r0
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	60ba      	str	r2, [r7, #8]
 80091a2:	b2ca      	uxtb	r2, r1
 80091a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	3301      	adds	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	dbf0      	blt.n	8009196 <_read+0x12>
  }

  return len;
 80091b4:	687b      	ldr	r3, [r7, #4]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b086      	sub	sp, #24
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	e009      	b.n	80091e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	60ba      	str	r2, [r7, #8]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fa fd9f 	bl	8003d1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	3301      	adds	r3, #1
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	dbf1      	blt.n	80091d0 <_write+0x12>
  }
  return len;
 80091ec:	687b      	ldr	r3, [r7, #4]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <_close>:

int _close(int file)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80091fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800921e:	605a      	str	r2, [r3, #4]
  return 0;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <_isatty>:

int _isatty(int file)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009236:	2301      	movs	r3, #1
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009268:	4a14      	ldr	r2, [pc, #80]	@ (80092bc <_sbrk+0x5c>)
 800926a:	4b15      	ldr	r3, [pc, #84]	@ (80092c0 <_sbrk+0x60>)
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009274:	4b13      	ldr	r3, [pc, #76]	@ (80092c4 <_sbrk+0x64>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800927c:	4b11      	ldr	r3, [pc, #68]	@ (80092c4 <_sbrk+0x64>)
 800927e:	4a12      	ldr	r2, [pc, #72]	@ (80092c8 <_sbrk+0x68>)
 8009280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009282:	4b10      	ldr	r3, [pc, #64]	@ (80092c4 <_sbrk+0x64>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	429a      	cmp	r2, r3
 800928e:	d207      	bcs.n	80092a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009290:	f006 f946 	bl	800f520 <__errno>
 8009294:	4603      	mov	r3, r0
 8009296:	220c      	movs	r2, #12
 8009298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800929a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800929e:	e009      	b.n	80092b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80092a0:	4b08      	ldr	r3, [pc, #32]	@ (80092c4 <_sbrk+0x64>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80092a6:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <_sbrk+0x64>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4413      	add	r3, r2
 80092ae:	4a05      	ldr	r2, [pc, #20]	@ (80092c4 <_sbrk+0x64>)
 80092b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80092b2:	68fb      	ldr	r3, [r7, #12]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20018000 	.word	0x20018000
 80092c0:	00000400 	.word	0x00000400
 80092c4:	200011e4 	.word	0x200011e4
 80092c8:	20001358 	.word	0x20001358

080092cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092cc:	b480      	push	{r7}
 80092ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80092d0:	4b06      	ldr	r3, [pc, #24]	@ (80092ec <SystemInit+0x20>)
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d6:	4a05      	ldr	r2, [pc, #20]	@ (80092ec <SystemInit+0x20>)
 80092d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80092dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	e000ed00 	.word	0xe000ed00

080092f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80092f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009328 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80092f4:	f7ff ffea 	bl	80092cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80092f8:	480c      	ldr	r0, [pc, #48]	@ (800932c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80092fa:	490d      	ldr	r1, [pc, #52]	@ (8009330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80092fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80092fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009300:	e002      	b.n	8009308 <LoopCopyDataInit>

08009302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009306:	3304      	adds	r3, #4

08009308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800930a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800930c:	d3f9      	bcc.n	8009302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800930e:	4a0a      	ldr	r2, [pc, #40]	@ (8009338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009310:	4c0a      	ldr	r4, [pc, #40]	@ (800933c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009314:	e001      	b.n	800931a <LoopFillZerobss>

08009316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009318:	3204      	adds	r2, #4

0800931a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800931a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800931c:	d3fb      	bcc.n	8009316 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800931e:	f006 f905 	bl	800f52c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009322:	f7fa ff4f 	bl	80041c4 <main>
  bx  lr    
 8009326:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009328:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800932c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009330:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8009334:	080106c4 	.word	0x080106c4
  ldr r2, =_sbss
 8009338:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 800933c:	20001358 	.word	0x20001358

08009340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009340:	e7fe      	b.n	8009340 <ADC_IRQHandler>
	...

08009344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009348:	4b0e      	ldr	r3, [pc, #56]	@ (8009384 <HAL_Init+0x40>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a0d      	ldr	r2, [pc, #52]	@ (8009384 <HAL_Init+0x40>)
 800934e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009354:	4b0b      	ldr	r3, [pc, #44]	@ (8009384 <HAL_Init+0x40>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a0a      	ldr	r2, [pc, #40]	@ (8009384 <HAL_Init+0x40>)
 800935a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800935e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009360:	4b08      	ldr	r3, [pc, #32]	@ (8009384 <HAL_Init+0x40>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a07      	ldr	r2, [pc, #28]	@ (8009384 <HAL_Init+0x40>)
 8009366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800936a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800936c:	2003      	movs	r0, #3
 800936e:	f000 f965 	bl	800963c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009372:	2000      	movs	r0, #0
 8009374:	f000 f808 	bl	8009388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009378:	f7ff fdb6 	bl	8008ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	40023c00 	.word	0x40023c00

08009388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <HAL_InitTick+0x54>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4b12      	ldr	r3, [pc, #72]	@ (80093e0 <HAL_InitTick+0x58>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	4619      	mov	r1, r3
 800939a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800939e:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 f981 	bl	80096ae <HAL_SYSTICK_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e00e      	b.n	80093d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b0f      	cmp	r3, #15
 80093ba:	d80a      	bhi.n	80093d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80093bc:	2200      	movs	r2, #0
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093c4:	f000 f945 	bl	8009652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80093c8:	4a06      	ldr	r2, [pc, #24]	@ (80093e4 <HAL_InitTick+0x5c>)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e000      	b.n	80093d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000554 	.word	0x20000554
 80093e0:	2000055c 	.word	0x2000055c
 80093e4:	20000558 	.word	0x20000558

080093e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80093e8:	b480      	push	{r7}
 80093ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80093ec:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <HAL_IncTick+0x20>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b06      	ldr	r3, [pc, #24]	@ (800940c <HAL_IncTick+0x24>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4413      	add	r3, r2
 80093f8:	4a04      	ldr	r2, [pc, #16]	@ (800940c <HAL_IncTick+0x24>)
 80093fa:	6013      	str	r3, [r2, #0]
}
 80093fc:	bf00      	nop
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	2000055c 	.word	0x2000055c
 800940c:	200011e8 	.word	0x200011e8

08009410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  return uwTick;
 8009414:	4b03      	ldr	r3, [pc, #12]	@ (8009424 <HAL_GetTick+0x14>)
 8009416:	681b      	ldr	r3, [r3, #0]
}
 8009418:	4618      	mov	r0, r3
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	200011e8 	.word	0x200011e8

08009428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009430:	f7ff ffee 	bl	8009410 <HAL_GetTick>
 8009434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009440:	d005      	beq.n	800944e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009442:	4b0a      	ldr	r3, [pc, #40]	@ (800946c <HAL_Delay+0x44>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800944e:	bf00      	nop
 8009450:	f7ff ffde 	bl	8009410 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	429a      	cmp	r2, r3
 800945e:	d8f7      	bhi.n	8009450 <HAL_Delay+0x28>
  {
  }
}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	2000055c 	.word	0x2000055c

08009470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f003 0307 	and.w	r3, r3, #7
 800947e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009480:	4b0c      	ldr	r3, [pc, #48]	@ (80094b4 <__NVIC_SetPriorityGrouping+0x44>)
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800948c:	4013      	ands	r3, r2
 800948e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800949c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094a2:	4a04      	ldr	r2, [pc, #16]	@ (80094b4 <__NVIC_SetPriorityGrouping+0x44>)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	60d3      	str	r3, [r2, #12]
}
 80094a8:	bf00      	nop
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	e000ed00 	.word	0xe000ed00

080094b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80094b8:	b480      	push	{r7}
 80094ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80094bc:	4b04      	ldr	r3, [pc, #16]	@ (80094d0 <__NVIC_GetPriorityGrouping+0x18>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	0a1b      	lsrs	r3, r3, #8
 80094c2:	f003 0307 	and.w	r3, r3, #7
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	e000ed00 	.word	0xe000ed00

080094d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	4603      	mov	r3, r0
 80094dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	db0b      	blt.n	80094fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	f003 021f 	and.w	r2, r3, #31
 80094ec:	4907      	ldr	r1, [pc, #28]	@ (800950c <__NVIC_EnableIRQ+0x38>)
 80094ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	2001      	movs	r0, #1
 80094f6:	fa00 f202 	lsl.w	r2, r0, r2
 80094fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	e000e100 	.word	0xe000e100

08009510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800951c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009520:	2b00      	cmp	r3, #0
 8009522:	db0a      	blt.n	800953a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	b2da      	uxtb	r2, r3
 8009528:	490c      	ldr	r1, [pc, #48]	@ (800955c <__NVIC_SetPriority+0x4c>)
 800952a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952e:	0112      	lsls	r2, r2, #4
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	440b      	add	r3, r1
 8009534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009538:	e00a      	b.n	8009550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	4908      	ldr	r1, [pc, #32]	@ (8009560 <__NVIC_SetPriority+0x50>)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	3b04      	subs	r3, #4
 8009548:	0112      	lsls	r2, r2, #4
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	440b      	add	r3, r1
 800954e:	761a      	strb	r2, [r3, #24]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	e000e100 	.word	0xe000e100
 8009560:	e000ed00 	.word	0xe000ed00

08009564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009564:	b480      	push	{r7}
 8009566:	b089      	sub	sp, #36	@ 0x24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	f1c3 0307 	rsb	r3, r3, #7
 800957e:	2b04      	cmp	r3, #4
 8009580:	bf28      	it	cs
 8009582:	2304      	movcs	r3, #4
 8009584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	3304      	adds	r3, #4
 800958a:	2b06      	cmp	r3, #6
 800958c:	d902      	bls.n	8009594 <NVIC_EncodePriority+0x30>
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	3b03      	subs	r3, #3
 8009592:	e000      	b.n	8009596 <NVIC_EncodePriority+0x32>
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	43da      	mvns	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	401a      	ands	r2, r3
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	fa01 f303 	lsl.w	r3, r1, r3
 80095b6:	43d9      	mvns	r1, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095bc:	4313      	orrs	r3, r2
         );
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3724      	adds	r7, #36	@ 0x24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80095d0:	f3bf 8f4f 	dsb	sy
}
 80095d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80095d6:	4b06      	ldr	r3, [pc, #24]	@ (80095f0 <__NVIC_SystemReset+0x24>)
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80095de:	4904      	ldr	r1, [pc, #16]	@ (80095f0 <__NVIC_SystemReset+0x24>)
 80095e0:	4b04      	ldr	r3, [pc, #16]	@ (80095f4 <__NVIC_SystemReset+0x28>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80095e6:	f3bf 8f4f 	dsb	sy
}
 80095ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80095ec:	bf00      	nop
 80095ee:	e7fd      	b.n	80095ec <__NVIC_SystemReset+0x20>
 80095f0:	e000ed00 	.word	0xe000ed00
 80095f4:	05fa0004 	.word	0x05fa0004

080095f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3b01      	subs	r3, #1
 8009604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009608:	d301      	bcc.n	800960e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800960a:	2301      	movs	r3, #1
 800960c:	e00f      	b.n	800962e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800960e:	4a0a      	ldr	r2, [pc, #40]	@ (8009638 <SysTick_Config+0x40>)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3b01      	subs	r3, #1
 8009614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009616:	210f      	movs	r1, #15
 8009618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800961c:	f7ff ff78 	bl	8009510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009620:	4b05      	ldr	r3, [pc, #20]	@ (8009638 <SysTick_Config+0x40>)
 8009622:	2200      	movs	r2, #0
 8009624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009626:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <SysTick_Config+0x40>)
 8009628:	2207      	movs	r2, #7
 800962a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	e000e010 	.word	0xe000e010

0800963c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff ff13 	bl	8009470 <__NVIC_SetPriorityGrouping>
}
 800964a:	bf00      	nop
 800964c:	3708      	adds	r7, #8
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009652:	b580      	push	{r7, lr}
 8009654:	b086      	sub	sp, #24
 8009656:	af00      	add	r7, sp, #0
 8009658:	4603      	mov	r3, r0
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	607a      	str	r2, [r7, #4]
 800965e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009664:	f7ff ff28 	bl	80094b8 <__NVIC_GetPriorityGrouping>
 8009668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	68b9      	ldr	r1, [r7, #8]
 800966e:	6978      	ldr	r0, [r7, #20]
 8009670:	f7ff ff78 	bl	8009564 <NVIC_EncodePriority>
 8009674:	4602      	mov	r2, r0
 8009676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800967a:	4611      	mov	r1, r2
 800967c:	4618      	mov	r0, r3
 800967e:	f7ff ff47 	bl	8009510 <__NVIC_SetPriority>
}
 8009682:	bf00      	nop
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b082      	sub	sp, #8
 800968e:	af00      	add	r7, sp, #0
 8009690:	4603      	mov	r3, r0
 8009692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff ff1b 	bl	80094d4 <__NVIC_EnableIRQ>
}
 800969e:	bf00      	nop
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80096aa:	f7ff ff8f 	bl	80095cc <__NVIC_SystemReset>

080096ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff9e 	bl	80095f8 <SysTick_Config>
 80096bc:	4603      	mov	r3, r0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80096d4:	f7ff fe9c 	bl	8009410 <HAL_GetTick>
 80096d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d008      	beq.n	80096f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2280      	movs	r2, #128	@ 0x80
 80096ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e052      	b.n	800979e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 0216 	bic.w	r2, r2, #22
 8009706:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	695a      	ldr	r2, [r3, #20]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009716:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d103      	bne.n	8009728 <HAL_DMA_Abort+0x62>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009724:	2b00      	cmp	r3, #0
 8009726:	d007      	beq.n	8009738 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0208 	bic.w	r2, r2, #8
 8009736:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0201 	bic.w	r2, r2, #1
 8009746:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009748:	e013      	b.n	8009772 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800974a:	f7ff fe61 	bl	8009410 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b05      	cmp	r3, #5
 8009756:	d90c      	bls.n	8009772 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2203      	movs	r2, #3
 8009762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e015      	b.n	800979e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e4      	bne.n	800974a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009784:	223f      	movs	r2, #63	@ 0x3f
 8009786:	409a      	lsls	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d004      	beq.n	80097c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2280      	movs	r2, #128	@ 0x80
 80097be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e00c      	b.n	80097de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2205      	movs	r2, #5
 80097c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f022 0201 	bic.w	r2, r2, #1
 80097da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80097f8:	b2db      	uxtb	r3, r3
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
	...

08009808 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009816:	4b23      	ldr	r3, [pc, #140]	@ (80098a4 <HAL_FLASH_Program+0x9c>)
 8009818:	7e1b      	ldrb	r3, [r3, #24]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_FLASH_Program+0x1a>
 800981e:	2302      	movs	r3, #2
 8009820:	e03b      	b.n	800989a <HAL_FLASH_Program+0x92>
 8009822:	4b20      	ldr	r3, [pc, #128]	@ (80098a4 <HAL_FLASH_Program+0x9c>)
 8009824:	2201      	movs	r2, #1
 8009826:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009828:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800982c:	f000 f870 	bl	8009910 <FLASH_WaitForLastOperation>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009834:	7dfb      	ldrb	r3, [r7, #23]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d12b      	bne.n	8009892 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d105      	bne.n	800984c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009840:	783b      	ldrb	r3, [r7, #0]
 8009842:	4619      	mov	r1, r3
 8009844:	68b8      	ldr	r0, [r7, #8]
 8009846:	f000 f91b 	bl	8009a80 <FLASH_Program_Byte>
 800984a:	e016      	b.n	800987a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d105      	bne.n	800985e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009852:	883b      	ldrh	r3, [r7, #0]
 8009854:	4619      	mov	r1, r3
 8009856:	68b8      	ldr	r0, [r7, #8]
 8009858:	f000 f8ee 	bl	8009a38 <FLASH_Program_HalfWord>
 800985c:	e00d      	b.n	800987a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d105      	bne.n	8009870 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	4619      	mov	r1, r3
 8009868:	68b8      	ldr	r0, [r7, #8]
 800986a:	f000 f8c3 	bl	80099f4 <FLASH_Program_Word>
 800986e:	e004      	b.n	800987a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009874:	68b8      	ldr	r0, [r7, #8]
 8009876:	f000 f88b 	bl	8009990 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800987a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800987e:	f000 f847 	bl	8009910 <FLASH_WaitForLastOperation>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8009886:	4b08      	ldr	r3, [pc, #32]	@ (80098a8 <HAL_FLASH_Program+0xa0>)
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	4a07      	ldr	r2, [pc, #28]	@ (80098a8 <HAL_FLASH_Program+0xa0>)
 800988c:	f023 0301 	bic.w	r3, r3, #1
 8009890:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009892:	4b04      	ldr	r3, [pc, #16]	@ (80098a4 <HAL_FLASH_Program+0x9c>)
 8009894:	2200      	movs	r2, #0
 8009896:	761a      	strb	r2, [r3, #24]

  return status;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200011ec 	.word	0x200011ec
 80098a8:	40023c00 	.word	0x40023c00

080098ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80098b6:	4b0b      	ldr	r3, [pc, #44]	@ (80098e4 <HAL_FLASH_Unlock+0x38>)
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	da0b      	bge.n	80098d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80098be:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <HAL_FLASH_Unlock+0x38>)
 80098c0:	4a09      	ldr	r2, [pc, #36]	@ (80098e8 <HAL_FLASH_Unlock+0x3c>)
 80098c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80098c4:	4b07      	ldr	r3, [pc, #28]	@ (80098e4 <HAL_FLASH_Unlock+0x38>)
 80098c6:	4a09      	ldr	r2, [pc, #36]	@ (80098ec <HAL_FLASH_Unlock+0x40>)
 80098c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80098ca:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <HAL_FLASH_Unlock+0x38>)
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	da01      	bge.n	80098d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80098d6:	79fb      	ldrb	r3, [r7, #7]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	40023c00 	.word	0x40023c00
 80098e8:	45670123 	.word	0x45670123
 80098ec:	cdef89ab 	.word	0xcdef89ab

080098f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80098f4:	4b05      	ldr	r3, [pc, #20]	@ (800990c <HAL_FLASH_Lock+0x1c>)
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	4a04      	ldr	r2, [pc, #16]	@ (800990c <HAL_FLASH_Lock+0x1c>)
 80098fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098fe:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	40023c00 	.word	0x40023c00

08009910 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800991c:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <FLASH_WaitForLastOperation+0x78>)
 800991e:	2200      	movs	r2, #0
 8009920:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009922:	f7ff fd75 	bl	8009410 <HAL_GetTick>
 8009926:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8009928:	e010      	b.n	800994c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009930:	d00c      	beq.n	800994c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d007      	beq.n	8009948 <FLASH_WaitForLastOperation+0x38>
 8009938:	f7ff fd6a 	bl	8009410 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d201      	bcs.n	800994c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e019      	b.n	8009980 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800994c:	4b0f      	ldr	r3, [pc, #60]	@ (800998c <FLASH_WaitForLastOperation+0x7c>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e8      	bne.n	800992a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009958:	4b0c      	ldr	r3, [pc, #48]	@ (800998c <FLASH_WaitForLastOperation+0x7c>)
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009964:	4b09      	ldr	r3, [pc, #36]	@ (800998c <FLASH_WaitForLastOperation+0x7c>)
 8009966:	2201      	movs	r2, #1
 8009968:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800996a:	4b08      	ldr	r3, [pc, #32]	@ (800998c <FLASH_WaitForLastOperation+0x7c>)
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009976:	f000 f8a5 	bl	8009ac4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e000      	b.n	8009980 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800997e:	2300      	movs	r3, #0

}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	200011ec 	.word	0x200011ec
 800998c:	40023c00 	.word	0x40023c00

08009990 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800999c:	4b14      	ldr	r3, [pc, #80]	@ (80099f0 <FLASH_Program_DoubleWord+0x60>)
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	4a13      	ldr	r2, [pc, #76]	@ (80099f0 <FLASH_Program_DoubleWord+0x60>)
 80099a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80099a8:	4b11      	ldr	r3, [pc, #68]	@ (80099f0 <FLASH_Program_DoubleWord+0x60>)
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	4a10      	ldr	r2, [pc, #64]	@ (80099f0 <FLASH_Program_DoubleWord+0x60>)
 80099ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80099b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80099b4:	4b0e      	ldr	r3, [pc, #56]	@ (80099f0 <FLASH_Program_DoubleWord+0x60>)
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	4a0d      	ldr	r2, [pc, #52]	@ (80099f0 <FLASH_Program_DoubleWord+0x60>)
 80099ba:	f043 0301 	orr.w	r3, r3, #1
 80099be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80099c6:	f3bf 8f6f 	isb	sy
}
 80099ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80099cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	f04f 0300 	mov.w	r3, #0
 80099d8:	000a      	movs	r2, r1
 80099da:	2300      	movs	r3, #0
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	3104      	adds	r1, #4
 80099e0:	4613      	mov	r3, r2
 80099e2:	600b      	str	r3, [r1, #0]
}
 80099e4:	bf00      	nop
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40023c00 	.word	0x40023c00

080099f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80099fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009a34 <FLASH_Program_Word+0x40>)
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	4a0c      	ldr	r2, [pc, #48]	@ (8009a34 <FLASH_Program_Word+0x40>)
 8009a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a34 <FLASH_Program_Word+0x40>)
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	4a09      	ldr	r2, [pc, #36]	@ (8009a34 <FLASH_Program_Word+0x40>)
 8009a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009a16:	4b07      	ldr	r3, [pc, #28]	@ (8009a34 <FLASH_Program_Word+0x40>)
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	4a06      	ldr	r2, [pc, #24]	@ (8009a34 <FLASH_Program_Word+0x40>)
 8009a1c:	f043 0301 	orr.w	r3, r3, #1
 8009a20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	601a      	str	r2, [r3, #0]
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40023c00 	.word	0x40023c00

08009a38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009a44:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <FLASH_Program_HalfWord+0x44>)
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	4a0c      	ldr	r2, [pc, #48]	@ (8009a7c <FLASH_Program_HalfWord+0x44>)
 8009a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009a50:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <FLASH_Program_HalfWord+0x44>)
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	4a09      	ldr	r2, [pc, #36]	@ (8009a7c <FLASH_Program_HalfWord+0x44>)
 8009a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009a5c:	4b07      	ldr	r3, [pc, #28]	@ (8009a7c <FLASH_Program_HalfWord+0x44>)
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	4a06      	ldr	r2, [pc, #24]	@ (8009a7c <FLASH_Program_HalfWord+0x44>)
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	887a      	ldrh	r2, [r7, #2]
 8009a6c:	801a      	strh	r2, [r3, #0]
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40023c00 	.word	0x40023c00

08009a80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac0 <FLASH_Program_Byte+0x40>)
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	4a0b      	ldr	r2, [pc, #44]	@ (8009ac0 <FLASH_Program_Byte+0x40>)
 8009a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009a98:	4b09      	ldr	r3, [pc, #36]	@ (8009ac0 <FLASH_Program_Byte+0x40>)
 8009a9a:	4a09      	ldr	r2, [pc, #36]	@ (8009ac0 <FLASH_Program_Byte+0x40>)
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009aa0:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <FLASH_Program_Byte+0x40>)
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	4a06      	ldr	r2, [pc, #24]	@ (8009ac0 <FLASH_Program_Byte+0x40>)
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	78fa      	ldrb	r2, [r7, #3]
 8009ab0:	701a      	strb	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	40023c00 	.word	0x40023c00

08009ac4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f043 0310 	orr.w	r3, r3, #16
 8009adc:	4a2b      	ldr	r2, [pc, #172]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009ade:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009ae0:	4b29      	ldr	r3, [pc, #164]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009ae6:	4b28      	ldr	r3, [pc, #160]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f003 0320 	and.w	r3, r3, #32
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009af2:	4b26      	ldr	r3, [pc, #152]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	f043 0308 	orr.w	r3, r3, #8
 8009afa:	4a24      	ldr	r2, [pc, #144]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009afc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009afe:	4b22      	ldr	r3, [pc, #136]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b00:	2220      	movs	r2, #32
 8009b02:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009b04:	4b20      	ldr	r3, [pc, #128]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009b10:	4b1e      	ldr	r3, [pc, #120]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b12:	69db      	ldr	r3, [r3, #28]
 8009b14:	f043 0304 	orr.w	r3, r3, #4
 8009b18:	4a1c      	ldr	r2, [pc, #112]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b1a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b1e:	2240      	movs	r2, #64	@ 0x40
 8009b20:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009b22:	4b19      	ldr	r3, [pc, #100]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d008      	beq.n	8009b40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009b2e:	4b17      	ldr	r3, [pc, #92]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	f043 0302 	orr.w	r3, r3, #2
 8009b36:	4a15      	ldr	r2, [pc, #84]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b38:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009b3a:	4b13      	ldr	r3, [pc, #76]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b3c:	2280      	movs	r2, #128	@ 0x80
 8009b3e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8009b40:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d009      	beq.n	8009b60 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8009b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	f043 0301 	orr.w	r3, r3, #1
 8009b54:	4a0d      	ldr	r2, [pc, #52]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b56:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8009b58:	4b0b      	ldr	r3, [pc, #44]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b5e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009b60:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0302 	and.w	r3, r3, #2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d008      	beq.n	8009b7e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009b6c:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	f043 0320 	orr.w	r3, r3, #32
 8009b74:	4a05      	ldr	r2, [pc, #20]	@ (8009b8c <FLASH_SetErrorCode+0xc8>)
 8009b76:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009b78:	4b03      	ldr	r3, [pc, #12]	@ (8009b88 <FLASH_SetErrorCode+0xc4>)
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	60da      	str	r2, [r3, #12]
  }
}
 8009b7e:	bf00      	nop
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	40023c00 	.word	0x40023c00
 8009b8c:	200011ec 	.word	0x200011ec

08009b90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009b9e:	4b31      	ldr	r3, [pc, #196]	@ (8009c64 <HAL_FLASHEx_Erase+0xd4>)
 8009ba0:	7e1b      	ldrb	r3, [r3, #24]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d101      	bne.n	8009baa <HAL_FLASHEx_Erase+0x1a>
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e058      	b.n	8009c5c <HAL_FLASHEx_Erase+0xcc>
 8009baa:	4b2e      	ldr	r3, [pc, #184]	@ (8009c64 <HAL_FLASHEx_Erase+0xd4>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009bb0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009bb4:	f7ff feac 	bl	8009910 <FLASH_WaitForLastOperation>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d148      	bne.n	8009c54 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bc8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d115      	bne.n	8009bfe <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	f000 f844 	bl	8009c6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009be4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009be8:	f7ff fe92 	bl	8009910 <FLASH_WaitForLastOperation>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c68 <HAL_FLASHEx_Erase+0xd8>)
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8009c68 <HAL_FLASHEx_Erase+0xd8>)
 8009bf6:	f023 0304 	bic.w	r3, r3, #4
 8009bfa:	6113      	str	r3, [r2, #16]
 8009bfc:	e028      	b.n	8009c50 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	60bb      	str	r3, [r7, #8]
 8009c04:	e01c      	b.n	8009c40 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	68b8      	ldr	r0, [r7, #8]
 8009c10:	f000 f850 	bl	8009cb4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009c14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009c18:	f7ff fe7a 	bl	8009910 <FLASH_WaitForLastOperation>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009c20:	4b11      	ldr	r3, [pc, #68]	@ (8009c68 <HAL_FLASHEx_Erase+0xd8>)
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	4a10      	ldr	r2, [pc, #64]	@ (8009c68 <HAL_FLASHEx_Erase+0xd8>)
 8009c26:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8009c2a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	601a      	str	r2, [r3, #0]
          break;
 8009c38:	e00a      	b.n	8009c50 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60bb      	str	r3, [r7, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68da      	ldr	r2, [r3, #12]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	4413      	add	r3, r2
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d3da      	bcc.n	8009c06 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009c50:	f000 f878 	bl	8009d44 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009c54:	4b03      	ldr	r3, [pc, #12]	@ (8009c64 <HAL_FLASHEx_Erase+0xd4>)
 8009c56:	2200      	movs	r2, #0
 8009c58:	761a      	strb	r2, [r3, #24]

  return status;
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	200011ec 	.word	0x200011ec
 8009c68:	40023c00 	.word	0x40023c00

08009c6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	6039      	str	r1, [r7, #0]
 8009c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009c78:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <FLASH_MassErase+0x44>)
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8009cb0 <FLASH_MassErase+0x44>)
 8009c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009c84:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb0 <FLASH_MassErase+0x44>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	4a09      	ldr	r2, [pc, #36]	@ (8009cb0 <FLASH_MassErase+0x44>)
 8009c8a:	f043 0304 	orr.w	r3, r3, #4
 8009c8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8009c90:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <FLASH_MassErase+0x44>)
 8009c92:	691a      	ldr	r2, [r3, #16]
 8009c94:	79fb      	ldrb	r3, [r7, #7]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	4a05      	ldr	r2, [pc, #20]	@ (8009cb0 <FLASH_MassErase+0x44>)
 8009c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ca0:	6113      	str	r3, [r2, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	40023c00 	.word	0x40023c00

08009cb4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	60fb      	str	r3, [r7, #12]
 8009cce:	e010      	b.n	8009cf2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d103      	bne.n	8009cde <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	e009      	b.n	8009cf2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d103      	bne.n	8009cec <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e002      	b.n	8009cf2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009cec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009cf0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009cf2:	4b13      	ldr	r3, [pc, #76]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	4a12      	ldr	r2, [pc, #72]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009cfe:	4b10      	ldr	r3, [pc, #64]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d00:	691a      	ldr	r2, [r3, #16]
 8009d02:	490f      	ldr	r1, [pc, #60]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d10:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009d16:	4b0a      	ldr	r3, [pc, #40]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d18:	691a      	ldr	r2, [r3, #16]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	4a07      	ldr	r2, [pc, #28]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d22:	f043 0302 	orr.w	r3, r3, #2
 8009d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009d28:	4b05      	ldr	r3, [pc, #20]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	4a04      	ldr	r2, [pc, #16]	@ (8009d40 <FLASH_Erase_Sector+0x8c>)
 8009d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d32:	6113      	str	r3, [r2, #16]
}
 8009d34:	bf00      	nop
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	40023c00 	.word	0x40023c00

08009d44 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009d44:	b480      	push	{r7}
 8009d46:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009d48:	4b20      	ldr	r3, [pc, #128]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009d54:	4b1d      	ldr	r3, [pc, #116]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a1c      	ldr	r2, [pc, #112]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d5a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009d5e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009d60:	4b1a      	ldr	r3, [pc, #104]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a19      	ldr	r2, [pc, #100]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	4b17      	ldr	r3, [pc, #92]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a16      	ldr	r2, [pc, #88]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d76:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009d78:	4b14      	ldr	r3, [pc, #80]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a13      	ldr	r2, [pc, #76]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009d82:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009d84:	4b11      	ldr	r3, [pc, #68]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009d90:	4b0e      	ldr	r3, [pc, #56]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a0d      	ldr	r2, [pc, #52]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d9a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a0a      	ldr	r2, [pc, #40]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009da2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a07      	ldr	r2, [pc, #28]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009dae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009db2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009db4:	4b05      	ldr	r3, [pc, #20]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a04      	ldr	r2, [pc, #16]	@ (8009dcc <FLASH_FlushCaches+0x88>)
 8009dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009dbe:	6013      	str	r3, [r2, #0]
  }
}
 8009dc0:	bf00      	nop
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	40023c00 	.word	0x40023c00

08009dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b089      	sub	sp, #36	@ 0x24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009de6:	2300      	movs	r3, #0
 8009de8:	61fb      	str	r3, [r7, #28]
 8009dea:	e159      	b.n	800a0a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009dec:	2201      	movs	r2, #1
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	fa02 f303 	lsl.w	r3, r2, r3
 8009df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	f040 8148 	bne.w	800a09a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d005      	beq.n	8009e22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d130      	bne.n	8009e84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e32:	43db      	mvns	r3, r3
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	4013      	ands	r3, r2
 8009e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	005b      	lsls	r3, r3, #1
 8009e42:	fa02 f303 	lsl.w	r3, r2, r3
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009e58:	2201      	movs	r2, #1
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e60:	43db      	mvns	r3, r3
 8009e62:	69ba      	ldr	r2, [r7, #24]
 8009e64:	4013      	ands	r3, r2
 8009e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	f003 0201 	and.w	r2, r3, #1
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	fa02 f303 	lsl.w	r3, r2, r3
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d017      	beq.n	8009ec0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	005b      	lsls	r3, r3, #1
 8009e9a:	2203      	movs	r2, #3
 8009e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	69ba      	ldr	r2, [r7, #24]
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	69ba      	ldr	r2, [r7, #24]
 8009ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f003 0303 	and.w	r3, r3, #3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d123      	bne.n	8009f14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	08da      	lsrs	r2, r3, #3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3208      	adds	r2, #8
 8009ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	f003 0307 	and.w	r3, r3, #7
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	220f      	movs	r2, #15
 8009ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	69ba      	ldr	r2, [r7, #24]
 8009eec:	4013      	ands	r3, r2
 8009eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	691a      	ldr	r2, [r3, #16]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	fa02 f303 	lsl.w	r3, r2, r3
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	08da      	lsrs	r2, r3, #3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3208      	adds	r2, #8
 8009f0e:	69b9      	ldr	r1, [r7, #24]
 8009f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	2203      	movs	r2, #3
 8009f20:	fa02 f303 	lsl.w	r3, r2, r3
 8009f24:	43db      	mvns	r3, r3
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f003 0203 	and.w	r2, r3, #3
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 80a2 	beq.w	800a09a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f56:	2300      	movs	r3, #0
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	4b57      	ldr	r3, [pc, #348]	@ (800a0b8 <HAL_GPIO_Init+0x2e8>)
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5e:	4a56      	ldr	r2, [pc, #344]	@ (800a0b8 <HAL_GPIO_Init+0x2e8>)
 8009f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f66:	4b54      	ldr	r3, [pc, #336]	@ (800a0b8 <HAL_GPIO_Init+0x2e8>)
 8009f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009f72:	4a52      	ldr	r2, [pc, #328]	@ (800a0bc <HAL_GPIO_Init+0x2ec>)
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	089b      	lsrs	r3, r3, #2
 8009f78:	3302      	adds	r3, #2
 8009f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	f003 0303 	and.w	r3, r3, #3
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	220f      	movs	r2, #15
 8009f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8e:	43db      	mvns	r3, r3
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	4013      	ands	r3, r2
 8009f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a49      	ldr	r2, [pc, #292]	@ (800a0c0 <HAL_GPIO_Init+0x2f0>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d019      	beq.n	8009fd2 <HAL_GPIO_Init+0x202>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a48      	ldr	r2, [pc, #288]	@ (800a0c4 <HAL_GPIO_Init+0x2f4>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d013      	beq.n	8009fce <HAL_GPIO_Init+0x1fe>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a47      	ldr	r2, [pc, #284]	@ (800a0c8 <HAL_GPIO_Init+0x2f8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d00d      	beq.n	8009fca <HAL_GPIO_Init+0x1fa>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a46      	ldr	r2, [pc, #280]	@ (800a0cc <HAL_GPIO_Init+0x2fc>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d007      	beq.n	8009fc6 <HAL_GPIO_Init+0x1f6>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a45      	ldr	r2, [pc, #276]	@ (800a0d0 <HAL_GPIO_Init+0x300>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d101      	bne.n	8009fc2 <HAL_GPIO_Init+0x1f2>
 8009fbe:	2304      	movs	r3, #4
 8009fc0:	e008      	b.n	8009fd4 <HAL_GPIO_Init+0x204>
 8009fc2:	2307      	movs	r3, #7
 8009fc4:	e006      	b.n	8009fd4 <HAL_GPIO_Init+0x204>
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e004      	b.n	8009fd4 <HAL_GPIO_Init+0x204>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e002      	b.n	8009fd4 <HAL_GPIO_Init+0x204>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e000      	b.n	8009fd4 <HAL_GPIO_Init+0x204>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	f002 0203 	and.w	r2, r2, #3
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	4093      	lsls	r3, r2
 8009fde:	69ba      	ldr	r2, [r7, #24]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009fe4:	4935      	ldr	r1, [pc, #212]	@ (800a0bc <HAL_GPIO_Init+0x2ec>)
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	089b      	lsrs	r3, r3, #2
 8009fea:	3302      	adds	r3, #2
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ff2:	4b38      	ldr	r3, [pc, #224]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	43db      	mvns	r3, r3
 8009ffc:	69ba      	ldr	r2, [r7, #24]
 8009ffe:	4013      	ands	r3, r2
 800a000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a016:	4a2f      	ldr	r2, [pc, #188]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a01c:	4b2d      	ldr	r3, [pc, #180]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	43db      	mvns	r3, r3
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	4013      	ands	r3, r2
 800a02a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d003      	beq.n	800a040 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a038:	69ba      	ldr	r2, [r7, #24]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a040:	4a24      	ldr	r2, [pc, #144]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a046:	4b23      	ldr	r3, [pc, #140]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	43db      	mvns	r3, r3
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	4013      	ands	r3, r2
 800a054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a06a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a070:	4b18      	ldr	r3, [pc, #96]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	43db      	mvns	r3, r3
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	4013      	ands	r3, r2
 800a07e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d003      	beq.n	800a094 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a094:	4a0f      	ldr	r2, [pc, #60]	@ (800a0d4 <HAL_GPIO_Init+0x304>)
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	3301      	adds	r3, #1
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	2b0f      	cmp	r3, #15
 800a0a4:	f67f aea2 	bls.w	8009dec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	bf00      	nop
 800a0ac:	3724      	adds	r7, #36	@ 0x24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40023800 	.word	0x40023800
 800a0bc:	40013800 	.word	0x40013800
 800a0c0:	40020000 	.word	0x40020000
 800a0c4:	40020400 	.word	0x40020400
 800a0c8:	40020800 	.word	0x40020800
 800a0cc:	40020c00 	.word	0x40020c00
 800a0d0:	40021000 	.word	0x40021000
 800a0d4:	40013c00 	.word	0x40013c00

0800a0d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
 800a0f4:	e001      	b.n	800a0fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
 800a114:	4613      	mov	r3, r2
 800a116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a118:	787b      	ldrb	r3, [r7, #1]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a11e:	887a      	ldrh	r2, [r7, #2]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a124:	e003      	b.n	800a12e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a126:	887b      	ldrh	r3, [r7, #2]
 800a128:	041a      	lsls	r2, r3, #16
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	619a      	str	r2, [r3, #24]
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b085      	sub	sp, #20
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	460b      	mov	r3, r1
 800a144:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a14c:	887a      	ldrh	r2, [r7, #2]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4013      	ands	r3, r2
 800a152:	041a      	lsls	r2, r3, #16
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	43d9      	mvns	r1, r3
 800a158:	887b      	ldrh	r3, [r7, #2]
 800a15a:	400b      	ands	r3, r1
 800a15c:	431a      	orrs	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	619a      	str	r2, [r3, #24]
}
 800a162:	bf00      	nop
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a17a:	4b08      	ldr	r3, [pc, #32]	@ (800a19c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a17c:	695a      	ldr	r2, [r3, #20]
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	4013      	ands	r3, r2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d006      	beq.n	800a194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a186:	4a05      	ldr	r2, [pc, #20]	@ (800a19c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a188:	88fb      	ldrh	r3, [r7, #6]
 800a18a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a18c:	88fb      	ldrh	r3, [r7, #6]
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 f806 	bl	800a1a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800a194:	bf00      	nop
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	40013c00 	.word	0x40013c00

0800a1a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a1aa:	bf00      	nop
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
	...

0800a1b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e12b      	b.n	800a422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d106      	bne.n	800a1e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7fe feaa 	bl	8008f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2224      	movs	r2, #36	@ 0x24
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f022 0201 	bic.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a20a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a21a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a21c:	f003 fa4a 	bl	800d6b4 <HAL_RCC_GetPCLK1Freq>
 800a220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	4a81      	ldr	r2, [pc, #516]	@ (800a42c <HAL_I2C_Init+0x274>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d807      	bhi.n	800a23c <HAL_I2C_Init+0x84>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4a80      	ldr	r2, [pc, #512]	@ (800a430 <HAL_I2C_Init+0x278>)
 800a230:	4293      	cmp	r3, r2
 800a232:	bf94      	ite	ls
 800a234:	2301      	movls	r3, #1
 800a236:	2300      	movhi	r3, #0
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	e006      	b.n	800a24a <HAL_I2C_Init+0x92>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4a7d      	ldr	r2, [pc, #500]	@ (800a434 <HAL_I2C_Init+0x27c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	bf94      	ite	ls
 800a244:	2301      	movls	r3, #1
 800a246:	2300      	movhi	r3, #0
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e0e7      	b.n	800a422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4a78      	ldr	r2, [pc, #480]	@ (800a438 <HAL_I2C_Init+0x280>)
 800a256:	fba2 2303 	umull	r2, r3, r2, r3
 800a25a:	0c9b      	lsrs	r3, r3, #18
 800a25c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	430a      	orrs	r2, r1
 800a270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4a6a      	ldr	r2, [pc, #424]	@ (800a42c <HAL_I2C_Init+0x274>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d802      	bhi.n	800a28c <HAL_I2C_Init+0xd4>
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	3301      	adds	r3, #1
 800a28a:	e009      	b.n	800a2a0 <HAL_I2C_Init+0xe8>
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a292:	fb02 f303 	mul.w	r3, r2, r3
 800a296:	4a69      	ldr	r2, [pc, #420]	@ (800a43c <HAL_I2C_Init+0x284>)
 800a298:	fba2 2303 	umull	r2, r3, r2, r3
 800a29c:	099b      	lsrs	r3, r3, #6
 800a29e:	3301      	adds	r3, #1
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a2b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	495c      	ldr	r1, [pc, #368]	@ (800a42c <HAL_I2C_Init+0x274>)
 800a2bc:	428b      	cmp	r3, r1
 800a2be:	d819      	bhi.n	800a2f4 <HAL_I2C_Init+0x13c>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	1e59      	subs	r1, r3, #1
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2ce:	1c59      	adds	r1, r3, #1
 800a2d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a2d4:	400b      	ands	r3, r1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <HAL_I2C_Init+0x138>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	1e59      	subs	r1, r3, #1
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2ee:	e051      	b.n	800a394 <HAL_I2C_Init+0x1dc>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	e04f      	b.n	800a394 <HAL_I2C_Init+0x1dc>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d111      	bne.n	800a320 <HAL_I2C_Init+0x168>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	1e58      	subs	r0, r3, #1
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6859      	ldr	r1, [r3, #4]
 800a304:	460b      	mov	r3, r1
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	440b      	add	r3, r1
 800a30a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a30e:	3301      	adds	r3, #1
 800a310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a314:	2b00      	cmp	r3, #0
 800a316:	bf0c      	ite	eq
 800a318:	2301      	moveq	r3, #1
 800a31a:	2300      	movne	r3, #0
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	e012      	b.n	800a346 <HAL_I2C_Init+0x18e>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	1e58      	subs	r0, r3, #1
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6859      	ldr	r1, [r3, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	0099      	lsls	r1, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	fbb0 f3f3 	udiv	r3, r0, r3
 800a336:	3301      	adds	r3, #1
 800a338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	bf0c      	ite	eq
 800a340:	2301      	moveq	r3, #1
 800a342:	2300      	movne	r3, #0
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <HAL_I2C_Init+0x196>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e022      	b.n	800a394 <HAL_I2C_Init+0x1dc>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10e      	bne.n	800a374 <HAL_I2C_Init+0x1bc>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	1e58      	subs	r0, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6859      	ldr	r1, [r3, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	440b      	add	r3, r1
 800a364:	fbb0 f3f3 	udiv	r3, r0, r3
 800a368:	3301      	adds	r3, #1
 800a36a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a372:	e00f      	b.n	800a394 <HAL_I2C_Init+0x1dc>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	1e58      	subs	r0, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6859      	ldr	r1, [r3, #4]
 800a37c:	460b      	mov	r3, r1
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	0099      	lsls	r1, r3, #2
 800a384:	440b      	add	r3, r1
 800a386:	fbb0 f3f3 	udiv	r3, r0, r3
 800a38a:	3301      	adds	r3, #1
 800a38c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a394:	6879      	ldr	r1, [r7, #4]
 800a396:	6809      	ldr	r1, [r1, #0]
 800a398:	4313      	orrs	r3, r2
 800a39a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	69da      	ldr	r2, [r3, #28]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a3c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6911      	ldr	r1, [r2, #16]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	68d2      	ldr	r2, [r2, #12]
 800a3ce:	4311      	orrs	r1, r2
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	695a      	ldr	r2, [r3, #20]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	431a      	orrs	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f042 0201 	orr.w	r2, r2, #1
 800a402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	000186a0 	.word	0x000186a0
 800a430:	001e847f 	.word	0x001e847f
 800a434:	003d08ff 	.word	0x003d08ff
 800a438:	431bde83 	.word	0x431bde83
 800a43c:	10624dd3 	.word	0x10624dd3

0800a440 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a452:	2b80      	cmp	r3, #128	@ 0x80
 800a454:	d103      	bne.n	800a45e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2200      	movs	r2, #0
 800a45c:	611a      	str	r2, [r3, #16]
  }
}
 800a45e:	bf00      	nop
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af02      	add	r7, sp, #8
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	607a      	str	r2, [r7, #4]
 800a476:	461a      	mov	r2, r3
 800a478:	460b      	mov	r3, r1
 800a47a:	817b      	strh	r3, [r7, #10]
 800a47c:	4613      	mov	r3, r2
 800a47e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a480:	f7fe ffc6 	bl	8009410 <HAL_GetTick>
 800a484:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b20      	cmp	r3, #32
 800a490:	f040 80e0 	bne.w	800a654 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	2319      	movs	r3, #25
 800a49a:	2201      	movs	r2, #1
 800a49c:	4970      	ldr	r1, [pc, #448]	@ (800a660 <HAL_I2C_Master_Transmit+0x1f4>)
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f002 fa14 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e0d3      	b.n	800a656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d101      	bne.n	800a4bc <HAL_I2C_Master_Transmit+0x50>
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	e0cc      	b.n	800a656 <HAL_I2C_Master_Transmit+0x1ea>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d007      	beq.n	800a4e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f042 0201 	orr.w	r2, r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2221      	movs	r2, #33	@ 0x21
 800a4f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2210      	movs	r2, #16
 800a4fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	893a      	ldrh	r2, [r7, #8]
 800a512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a518:	b29a      	uxth	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4a50      	ldr	r2, [pc, #320]	@ (800a664 <HAL_I2C_Master_Transmit+0x1f8>)
 800a522:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a524:	8979      	ldrh	r1, [r7, #10]
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	6a3a      	ldr	r2, [r7, #32]
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f001 ffd6 	bl	800c4dc <I2C_MasterRequestWrite>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e08d      	b.n	800a656 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a53a:	2300      	movs	r3, #0
 800a53c:	613b      	str	r3, [r7, #16]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	613b      	str	r3, [r7, #16]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	613b      	str	r3, [r7, #16]
 800a54e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a550:	e066      	b.n	800a620 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	6a39      	ldr	r1, [r7, #32]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f002 fad2 	bl	800cb00 <I2C_WaitOnTXEFlagUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00d      	beq.n	800a57e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a566:	2b04      	cmp	r3, #4
 800a568:	d107      	bne.n	800a57a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e06b      	b.n	800a656 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a598:	b29b      	uxth	r3, r3
 800a59a:	3b01      	subs	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	d11b      	bne.n	800a5f4 <HAL_I2C_Master_Transmit+0x188>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d017      	beq.n	800a5f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	6a39      	ldr	r1, [r7, #32]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f002 fac9 	bl	800cb90 <I2C_WaitOnBTFFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00d      	beq.n	800a620 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d107      	bne.n	800a61c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a61a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e01a      	b.n	800a656 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a624:	2b00      	cmp	r3, #0
 800a626:	d194      	bne.n	800a552 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	e000      	b.n	800a656 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a654:	2302      	movs	r3, #2
  }
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	00100002 	.word	0x00100002
 800a664:	ffff0000 	.word	0xffff0000

0800a668 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08c      	sub	sp, #48	@ 0x30
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	461a      	mov	r2, r3
 800a674:	460b      	mov	r3, r1
 800a676:	817b      	strh	r3, [r7, #10]
 800a678:	4613      	mov	r3, r2
 800a67a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a67c:	f7fe fec8 	bl	8009410 <HAL_GetTick>
 800a680:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2b20      	cmp	r3, #32
 800a68c:	f040 8217 	bne.w	800aabe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2319      	movs	r3, #25
 800a696:	2201      	movs	r2, #1
 800a698:	497c      	ldr	r1, [pc, #496]	@ (800a88c <HAL_I2C_Master_Receive+0x224>)
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f002 f916 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e20a      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_I2C_Master_Receive+0x50>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e203      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d007      	beq.n	800a6de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f042 0201 	orr.w	r2, r2, #1
 800a6dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2222      	movs	r2, #34	@ 0x22
 800a6f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2210      	movs	r2, #16
 800a6fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	893a      	ldrh	r2, [r7, #8]
 800a70e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a714:	b29a      	uxth	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	4a5c      	ldr	r2, [pc, #368]	@ (800a890 <HAL_I2C_Master_Receive+0x228>)
 800a71e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a720:	8979      	ldrh	r1, [r7, #10]
 800a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f001 ff5a 	bl	800c5e0 <I2C_MasterRequestRead>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e1c4      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d113      	bne.n	800a766 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a73e:	2300      	movs	r3, #0
 800a740:	623b      	str	r3, [r7, #32]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	623b      	str	r3, [r7, #32]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	623b      	str	r3, [r7, #32]
 800a752:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	e198      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d11b      	bne.n	800a7a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a77c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a77e:	2300      	movs	r3, #0
 800a780:	61fb      	str	r3, [r7, #28]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	61fb      	str	r3, [r7, #28]
 800a792:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	e178      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d11b      	bne.n	800a7e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	61bb      	str	r3, [r7, #24]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	61bb      	str	r3, [r7, #24]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	e158      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a7f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
 800a800:	617b      	str	r3, [r7, #20]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a80c:	e144      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a812:	2b03      	cmp	r3, #3
 800a814:	f200 80f1 	bhi.w	800a9fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d123      	bne.n	800a868 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a822:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f002 fa2d 	bl	800cc84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e145      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	691a      	ldr	r2, [r3, #16]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83e:	b2d2      	uxtb	r2, r2
 800a840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a846:	1c5a      	adds	r2, r3, #1
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a850:	3b01      	subs	r3, #1
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	b29a      	uxth	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a866:	e117      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d14e      	bne.n	800a90e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a876:	2200      	movs	r2, #0
 800a878:	4906      	ldr	r1, [pc, #24]	@ (800a894 <HAL_I2C_Master_Receive+0x22c>)
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f002 f826 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d008      	beq.n	800a898 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e11a      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
 800a88a:	bf00      	nop
 800a88c:	00100002 	.word	0x00100002
 800a890:	ffff0000 	.word	0xffff0000
 800a894:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691a      	ldr	r2, [r3, #16]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b2:	b2d2      	uxtb	r2, r2
 800a8b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	691a      	ldr	r2, [r3, #16]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e4:	b2d2      	uxtb	r2, r2
 800a8e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a902:	b29b      	uxth	r3, r3
 800a904:	3b01      	subs	r3, #1
 800a906:	b29a      	uxth	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a90c:	e0c4      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	2200      	movs	r2, #0
 800a916:	496c      	ldr	r1, [pc, #432]	@ (800aac8 <HAL_I2C_Master_Receive+0x460>)
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f001 ffd7 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e0cb      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a954:	3b01      	subs	r3, #1
 800a956:	b29a      	uxth	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a960:	b29b      	uxth	r3, r3
 800a962:	3b01      	subs	r3, #1
 800a964:	b29a      	uxth	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a970:	2200      	movs	r2, #0
 800a972:	4955      	ldr	r1, [pc, #340]	@ (800aac8 <HAL_I2C_Master_Receive+0x460>)
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f001 ffa9 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e09d      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691a      	ldr	r2, [r3, #16]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	b2d2      	uxtb	r2, r2
 800a9a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d8:	1c5a      	adds	r2, r3, #1
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a9f8:	e04e      	b.n	800aa98 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f002 f940 	bl	800cc84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d001      	beq.n	800aa0e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e058      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691a      	ldr	r2, [r3, #16]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	f003 0304 	and.w	r3, r3, #4
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d124      	bne.n	800aa98 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d107      	bne.n	800aa66 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa64:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	691a      	ldr	r2, [r3, #16]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa70:	b2d2      	uxtb	r2, r2
 800aa72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa82:	3b01      	subs	r3, #1
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f47f aeb6 	bne.w	800a80e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e000      	b.n	800aac0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800aabe:	2302      	movs	r3, #2
  }
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3728      	adds	r7, #40	@ 0x28
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	00010004 	.word	0x00010004

0800aacc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08a      	sub	sp, #40	@ 0x28
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	607a      	str	r2, [r7, #4]
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	460b      	mov	r3, r1
 800aada:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800aadc:	f7fe fc98 	bl	8009410 <HAL_GetTick>
 800aae0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800aae2:	2300      	movs	r3, #0
 800aae4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	f040 8111 	bne.w	800ad16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	2319      	movs	r3, #25
 800aafa:	2201      	movs	r2, #1
 800aafc:	4988      	ldr	r1, [pc, #544]	@ (800ad20 <HAL_I2C_IsDeviceReady+0x254>)
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f001 fee4 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d001      	beq.n	800ab0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e104      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <HAL_I2C_IsDeviceReady+0x50>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e0fd      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d007      	beq.n	800ab42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0201 	orr.w	r2, r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2224      	movs	r2, #36	@ 0x24
 800ab56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4a70      	ldr	r2, [pc, #448]	@ (800ad24 <HAL_I2C_IsDeviceReady+0x258>)
 800ab64:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f001 fea2 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00d      	beq.n	800abaa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab9c:	d103      	bne.n	800aba6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aba4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	e0b6      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800abaa:	897b      	ldrh	r3, [r7, #10]
 800abac:	b2db      	uxtb	r3, r3
 800abae:	461a      	mov	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800abb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800abba:	f7fe fc29 	bl	8009410 <HAL_GetTick>
 800abbe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b02      	cmp	r3, #2
 800abcc:	bf0c      	ite	eq
 800abce:	2301      	moveq	r3, #1
 800abd0:	2300      	movne	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abe4:	bf0c      	ite	eq
 800abe6:	2301      	moveq	r3, #1
 800abe8:	2300      	movne	r3, #0
 800abea:	b2db      	uxtb	r3, r3
 800abec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800abee:	e025      	b.n	800ac3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800abf0:	f7fe fc0e 	bl	8009410 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d302      	bcc.n	800ac06 <HAL_I2C_IsDeviceReady+0x13a>
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	22a0      	movs	r2, #160	@ 0xa0
 800ac0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	f003 0302 	and.w	r3, r3, #2
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	bf0c      	ite	eq
 800ac1c:	2301      	moveq	r3, #1
 800ac1e:	2300      	movne	r3, #0
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac32:	bf0c      	ite	eq
 800ac34:	2301      	moveq	r3, #1
 800ac36:	2300      	movne	r3, #0
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2ba0      	cmp	r3, #160	@ 0xa0
 800ac46:	d005      	beq.n	800ac54 <HAL_I2C_IsDeviceReady+0x188>
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <HAL_I2C_IsDeviceReady+0x188>
 800ac4e:	7dbb      	ldrb	r3, [r7, #22]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0cd      	beq.n	800abf0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2220      	movs	r2, #32
 800ac58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d129      	bne.n	800acbe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	613b      	str	r3, [r7, #16]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	695b      	ldr	r3, [r3, #20]
 800ac84:	613b      	str	r3, [r7, #16]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	613b      	str	r3, [r7, #16]
 800ac8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2319      	movs	r3, #25
 800ac96:	2201      	movs	r2, #1
 800ac98:	4921      	ldr	r1, [pc, #132]	@ (800ad20 <HAL_I2C_IsDeviceReady+0x254>)
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f001 fe16 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e036      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	e02c      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800accc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800acd6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	2319      	movs	r3, #25
 800acde:	2201      	movs	r2, #1
 800ace0:	490f      	ldr	r1, [pc, #60]	@ (800ad20 <HAL_I2C_IsDeviceReady+0x254>)
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f001 fdf2 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	e012      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	3301      	adds	r3, #1
 800acf6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800acf8:	69ba      	ldr	r2, [r7, #24]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	f4ff af32 	bcc.w	800ab66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2220      	movs	r2, #32
 800ad06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e000      	b.n	800ad18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800ad16:	2302      	movs	r3, #2
  }
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	00100002 	.word	0x00100002
 800ad24:	ffff0000 	.word	0xffff0000

0800ad28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad40:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad48:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad50:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b10      	cmp	r3, #16
 800ad56:	d003      	beq.n	800ad60 <HAL_I2C_EV_IRQHandler+0x38>
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	2b40      	cmp	r3, #64	@ 0x40
 800ad5c:	f040 80b1 	bne.w	800aec2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	695b      	ldr	r3, [r3, #20]
 800ad6e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10d      	bne.n	800ad96 <HAL_I2C_EV_IRQHandler+0x6e>
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800ad80:	d003      	beq.n	800ad8a <HAL_I2C_EV_IRQHandler+0x62>
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800ad88:	d101      	bne.n	800ad8e <HAL_I2C_EV_IRQHandler+0x66>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <HAL_I2C_EV_IRQHandler+0x68>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	f000 8114 	beq.w	800afbe <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00b      	beq.n	800adb8 <HAL_I2C_EV_IRQHandler+0x90>
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d006      	beq.n	800adb8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f001 fff6 	bl	800cd9c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fd76 	bl	800b8a2 <I2C_Master_SB>
 800adb6:	e083      	b.n	800aec0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	f003 0308 	and.w	r3, r3, #8
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d008      	beq.n	800add4 <HAL_I2C_EV_IRQHandler+0xac>
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fdee 	bl	800b9ae <I2C_Master_ADD10>
 800add2:	e075      	b.n	800aec0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <HAL_I2C_EV_IRQHandler+0xc8>
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fe0a 	bl	800ba02 <I2C_Master_ADDR>
 800adee:	e067      	b.n	800aec0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d036      	beq.n	800ae68 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae08:	f000 80db 	beq.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00d      	beq.n	800ae32 <HAL_I2C_EV_IRQHandler+0x10a>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d008      	beq.n	800ae32 <HAL_I2C_EV_IRQHandler+0x10a>
 800ae20:	69fb      	ldr	r3, [r7, #28]
 800ae22:	f003 0304 	and.w	r3, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f9d6 	bl	800b1dc <I2C_MasterTransmit_TXE>
 800ae30:	e046      	b.n	800aec0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	f000 80c2 	beq.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 80bc 	beq.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	2b21      	cmp	r3, #33	@ 0x21
 800ae4e:	d103      	bne.n	800ae58 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fa5f 	bl	800b314 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ae56:	e0b4      	b.n	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b40      	cmp	r3, #64	@ 0x40
 800ae5c:	f040 80b1 	bne.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 facd 	bl	800b400 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ae66:	e0ac      	b.n	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae76:	f000 80a4 	beq.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00d      	beq.n	800aea0 <HAL_I2C_EV_IRQHandler+0x178>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d008      	beq.n	800aea0 <HAL_I2C_EV_IRQHandler+0x178>
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d103      	bne.n	800aea0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fb49 	bl	800b530 <I2C_MasterReceive_RXNE>
 800ae9e:	e00f      	b.n	800aec0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 808b 	beq.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 8085 	beq.w	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fc01 	bl	800b6c0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aebe:	e080      	b.n	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
 800aec0:	e07f      	b.n	800afc2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d004      	beq.n	800aed4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	61fb      	str	r3, [r7, #28]
 800aed2:	e007      	b.n	800aee4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d011      	beq.n	800af12 <HAL_I2C_EV_IRQHandler+0x1ea>
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00c      	beq.n	800af12 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	699b      	ldr	r3, [r3, #24]
 800af06:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800af08:	69b9      	ldr	r1, [r7, #24]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 ffc8 	bl	800bea0 <I2C_Slave_ADDR>
 800af10:	e05a      	b.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	f003 0310 	and.w	r3, r3, #16
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d008      	beq.n	800af2e <HAL_I2C_EV_IRQHandler+0x206>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 f802 	bl	800bf30 <I2C_Slave_STOPF>
 800af2c:	e04c      	b.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	2b21      	cmp	r3, #33	@ 0x21
 800af32:	d002      	beq.n	800af3a <HAL_I2C_EV_IRQHandler+0x212>
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	2b29      	cmp	r3, #41	@ 0x29
 800af38:	d120      	bne.n	800af7c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00d      	beq.n	800af60 <HAL_I2C_EV_IRQHandler+0x238>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d008      	beq.n	800af60 <HAL_I2C_EV_IRQHandler+0x238>
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	f003 0304 	and.w	r3, r3, #4
 800af54:	2b00      	cmp	r3, #0
 800af56:	d103      	bne.n	800af60 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fee3 	bl	800bd24 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800af5e:	e032      	b.n	800afc6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d02d      	beq.n	800afc6 <HAL_I2C_EV_IRQHandler+0x29e>
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af70:	2b00      	cmp	r3, #0
 800af72:	d028      	beq.n	800afc6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 ff12 	bl	800bd9e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800af7a:	e024      	b.n	800afc6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00d      	beq.n	800afa2 <HAL_I2C_EV_IRQHandler+0x27a>
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <HAL_I2C_EV_IRQHandler+0x27a>
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d103      	bne.n	800afa2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 ff20 	bl	800bde0 <I2C_SlaveReceive_RXNE>
 800afa0:	e012      	b.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00d      	beq.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d008      	beq.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 ff50 	bl	800be5c <I2C_SlaveReceive_BTF>
 800afbc:	e004      	b.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800afbe:	bf00      	nop
 800afc0:	e002      	b.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800afc2:	bf00      	nop
 800afc4:	e000      	b.n	800afc8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800afc6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800afc8:	3720      	adds	r7, #32
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b08a      	sub	sp, #40	@ 0x28
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800afe6:	2300      	movs	r3, #0
 800afe8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aff0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00d      	beq.n	800b018 <HAL_I2C_ER_IRQHandler+0x4a>
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b002:	2b00      	cmp	r3, #0
 800b004:	d008      	beq.n	800b018 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	f043 0301 	orr.w	r3, r3, #1
 800b00c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b016:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00d      	beq.n	800b03e <HAL_I2C_ER_IRQHandler+0x70>
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d008      	beq.n	800b03e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800b02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b02e:	f043 0302 	orr.w	r3, r3, #2
 800b032:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800b03c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b044:	2b00      	cmp	r3, #0
 800b046:	d03e      	beq.n	800b0c6 <HAL_I2C_ER_IRQHandler+0xf8>
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d039      	beq.n	800b0c6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800b052:	7efb      	ldrb	r3, [r7, #27]
 800b054:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b064:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b06a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800b06c:	7ebb      	ldrb	r3, [r7, #26]
 800b06e:	2b20      	cmp	r3, #32
 800b070:	d112      	bne.n	800b098 <HAL_I2C_ER_IRQHandler+0xca>
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10f      	bne.n	800b098 <HAL_I2C_ER_IRQHandler+0xca>
 800b078:	7cfb      	ldrb	r3, [r7, #19]
 800b07a:	2b21      	cmp	r3, #33	@ 0x21
 800b07c:	d008      	beq.n	800b090 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800b07e:	7cfb      	ldrb	r3, [r7, #19]
 800b080:	2b29      	cmp	r3, #41	@ 0x29
 800b082:	d005      	beq.n	800b090 <HAL_I2C_ER_IRQHandler+0xc2>
 800b084:	7cfb      	ldrb	r3, [r7, #19]
 800b086:	2b28      	cmp	r3, #40	@ 0x28
 800b088:	d106      	bne.n	800b098 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b21      	cmp	r3, #33	@ 0x21
 800b08e:	d103      	bne.n	800b098 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 f87d 	bl	800c190 <I2C_Slave_AF>
 800b096:	e016      	b.n	800b0c6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b0a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800b0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a4:	f043 0304 	orr.w	r3, r3, #4
 800b0a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b0aa:	7efb      	ldrb	r3, [r7, #27]
 800b0ac:	2b10      	cmp	r3, #16
 800b0ae:	d002      	beq.n	800b0b6 <HAL_I2C_ER_IRQHandler+0xe8>
 800b0b0:	7efb      	ldrb	r3, [r7, #27]
 800b0b2:	2b40      	cmp	r3, #64	@ 0x40
 800b0b4:	d107      	bne.n	800b0c6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00d      	beq.n	800b0ec <HAL_I2C_ER_IRQHandler+0x11e>
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d008      	beq.n	800b0ec <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	f043 0308 	orr.w	r3, r3, #8
 800b0e0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800b0ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d008      	beq.n	800b104 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	431a      	orrs	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 f8ba 	bl	800c278 <I2C_ITError>
  }
}
 800b104:	bf00      	nop
 800b106:	3728      	adds	r7, #40	@ 0x28
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
 800b168:	4613      	mov	r3, r2
 800b16a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b1bc:	bf00      	nop
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b1f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d150      	bne.n	800b2a4 <I2C_MasterTransmit_TXE+0xc8>
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	2b21      	cmp	r3, #33	@ 0x21
 800b206:	d14d      	bne.n	800b2a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b08      	cmp	r3, #8
 800b20c:	d01d      	beq.n	800b24a <I2C_MasterTransmit_TXE+0x6e>
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b20      	cmp	r3, #32
 800b212:	d01a      	beq.n	800b24a <I2C_MasterTransmit_TXE+0x6e>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b21a:	d016      	beq.n	800b24a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b22a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2211      	movs	r2, #17
 800b230:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff ff62 	bl	800b10c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b248:	e060      	b.n	800b30c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b258:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b268:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b40      	cmp	r3, #64	@ 0x40
 800b282:	d107      	bne.n	800b294 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff ff7d 	bl	800b18c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b292:	e03b      	b.n	800b30c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff ff35 	bl	800b10c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b2a2:	e033      	b.n	800b30c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	2b21      	cmp	r3, #33	@ 0x21
 800b2a8:	d005      	beq.n	800b2b6 <I2C_MasterTransmit_TXE+0xda>
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b40      	cmp	r3, #64	@ 0x40
 800b2ae:	d12d      	bne.n	800b30c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
 800b2b2:	2b22      	cmp	r3, #34	@ 0x22
 800b2b4:	d12a      	bne.n	800b30c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d108      	bne.n	800b2d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	685a      	ldr	r2, [r3, #4]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b2d0:	e01c      	b.n	800b30c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b40      	cmp	r3, #64	@ 0x40
 800b2dc:	d103      	bne.n	800b2e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f88e 	bl	800b400 <I2C_MemoryTransmit_TXE_BTF>
}
 800b2e4:	e012      	b.n	800b30c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	781a      	ldrb	r2, [r3, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29a      	uxth	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b30a:	e7ff      	b.n	800b30c <I2C_MasterTransmit_TXE+0x130>
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b320:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b21      	cmp	r3, #33	@ 0x21
 800b32c:	d164      	bne.n	800b3f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b332:	b29b      	uxth	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d012      	beq.n	800b35e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b33c:	781a      	ldrb	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b352:	b29b      	uxth	r3, r3
 800b354:	3b01      	subs	r3, #1
 800b356:	b29a      	uxth	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b35c:	e04c      	b.n	800b3f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b08      	cmp	r3, #8
 800b362:	d01d      	beq.n	800b3a0 <I2C_MasterTransmit_BTF+0x8c>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b20      	cmp	r3, #32
 800b368:	d01a      	beq.n	800b3a0 <I2C_MasterTransmit_BTF+0x8c>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b370:	d016      	beq.n	800b3a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b380:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2211      	movs	r2, #17
 800b386:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2220      	movs	r2, #32
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff feb7 	bl	800b10c <HAL_I2C_MasterTxCpltCallback>
}
 800b39e:	e02b      	b.n	800b3f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685a      	ldr	r2, [r3, #4]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b3ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b40      	cmp	r3, #64	@ 0x40
 800b3d8:	d107      	bne.n	800b3ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fed2 	bl	800b18c <HAL_I2C_MemTxCpltCallback>
}
 800b3e8:	e006      	b.n	800b3f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7ff fe8a 	bl	800b10c <HAL_I2C_MasterTxCpltCallback>
}
 800b3f8:	bf00      	nop
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b40e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b414:	2b00      	cmp	r3, #0
 800b416:	d11d      	bne.n	800b454 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d10b      	bne.n	800b438 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b424:	b2da      	uxtb	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b430:	1c9a      	adds	r2, r3, #2
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800b436:	e077      	b.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	121b      	asrs	r3, r3, #8
 800b440:	b2da      	uxtb	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b452:	e069      	b.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d10b      	bne.n	800b474 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b460:	b2da      	uxtb	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b46c:	1c5a      	adds	r2, r3, #1
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b472:	e059      	b.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d152      	bne.n	800b522 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	2b22      	cmp	r3, #34	@ 0x22
 800b480:	d10d      	bne.n	800b49e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b490:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b49c:	e044      	b.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d015      	beq.n	800b4d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	2b21      	cmp	r3, #33	@ 0x21
 800b4ac:	d112      	bne.n	800b4d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b4d2:	e029      	b.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d124      	bne.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	2b21      	cmp	r3, #33	@ 0x21
 800b4e2:	d121      	bne.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b4f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b502:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff fe36 	bl	800b18c <HAL_I2C_MemTxCpltCallback>
}
 800b520:	e002      	b.n	800b528 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7fe ff8c 	bl	800a440 <I2C_Flush_DR>
}
 800b528:	bf00      	nop
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b22      	cmp	r3, #34	@ 0x22
 800b542:	f040 80b9 	bne.w	800b6b8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b550:	b29b      	uxth	r3, r3
 800b552:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2b03      	cmp	r3, #3
 800b558:	d921      	bls.n	800b59e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	691a      	ldr	r2, [r3, #16]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b564:	b2d2      	uxtb	r2, r2
 800b566:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b576:	b29b      	uxth	r3, r3
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b584:	b29b      	uxth	r3, r3
 800b586:	2b03      	cmp	r3, #3
 800b588:	f040 8096 	bne.w	800b6b8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b59a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800b59c:	e08c      	b.n	800b6b8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d07f      	beq.n	800b6a6 <I2C_MasterReceive_RXNE+0x176>
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d002      	beq.n	800b5b2 <I2C_MasterReceive_RXNE+0x82>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d179      	bne.n	800b6a6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fb34 	bl	800cc20 <I2C_WaitOnSTOPRequestThroughIT>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d14c      	bne.n	800b658 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5cc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b5dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	691a      	ldr	r2, [r3, #16]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e8:	b2d2      	uxtb	r2, r2
 800b5ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2220      	movs	r2, #32
 800b608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b40      	cmp	r3, #64	@ 0x40
 800b616:	d10a      	bne.n	800b62e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7ff fdba 	bl	800b1a0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b62c:	e044      	b.n	800b6b8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d002      	beq.n	800b642 <I2C_MasterReceive_RXNE+0x112>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2b20      	cmp	r3, #32
 800b640:	d103      	bne.n	800b64a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	631a      	str	r2, [r3, #48]	@ 0x30
 800b648:	e002      	b.n	800b650 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2212      	movs	r2, #18
 800b64e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7ff fd65 	bl	800b120 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b656:	e02f      	b.n	800b6b8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b666:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	691a      	ldr	r2, [r3, #16]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b67a:	1c5a      	adds	r2, r3, #1
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b684:	b29b      	uxth	r3, r3
 800b686:	3b01      	subs	r3, #1
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff fd88 	bl	800b1b4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b6a4:	e008      	b.n	800b6b8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6b4:	605a      	str	r2, [r3, #4]
}
 800b6b6:	e7ff      	b.n	800b6b8 <I2C_MasterReceive_RXNE+0x188>
 800b6b8:	bf00      	nop
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d11b      	bne.n	800b710 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6e6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	691a      	ldr	r2, [r3, #16]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b704:	b29b      	uxth	r3, r3
 800b706:	3b01      	subs	r3, #1
 800b708:	b29a      	uxth	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b70e:	e0c4      	b.n	800b89a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b714:	b29b      	uxth	r3, r3
 800b716:	2b03      	cmp	r3, #3
 800b718:	d129      	bne.n	800b76e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b728:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d00a      	beq.n	800b746 <I2C_MasterReceive_BTF+0x86>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b02      	cmp	r3, #2
 800b734:	d007      	beq.n	800b746 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b744:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	691a      	ldr	r2, [r3, #16]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b750:	b2d2      	uxtb	r2, r2
 800b752:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b762:	b29b      	uxth	r3, r3
 800b764:	3b01      	subs	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b76c:	e095      	b.n	800b89a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b772:	b29b      	uxth	r3, r3
 800b774:	2b02      	cmp	r3, #2
 800b776:	d17d      	bne.n	800b874 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d002      	beq.n	800b784 <I2C_MasterReceive_BTF+0xc4>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b10      	cmp	r3, #16
 800b782:	d108      	bne.n	800b796 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e016      	b.n	800b7c4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b04      	cmp	r3, #4
 800b79a:	d002      	beq.n	800b7a2 <I2C_MasterReceive_BTF+0xe2>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d108      	bne.n	800b7b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	e007      	b.n	800b7c4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	691a      	ldr	r2, [r3, #16]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	691a      	ldr	r2, [r3, #16]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7fc:	1c5a      	adds	r2, r3, #1
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b806:	b29b      	uxth	r3, r3
 800b808:	3b01      	subs	r3, #1
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b81e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2220      	movs	r2, #32
 800b824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b40      	cmp	r3, #64	@ 0x40
 800b832:	d10a      	bne.n	800b84a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff fcac 	bl	800b1a0 <HAL_I2C_MemRxCpltCallback>
}
 800b848:	e027      	b.n	800b89a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2b08      	cmp	r3, #8
 800b856:	d002      	beq.n	800b85e <I2C_MasterReceive_BTF+0x19e>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2b20      	cmp	r3, #32
 800b85c:	d103      	bne.n	800b866 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	631a      	str	r2, [r3, #48]	@ 0x30
 800b864:	e002      	b.n	800b86c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2212      	movs	r2, #18
 800b86a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fc57 	bl	800b120 <HAL_I2C_MasterRxCpltCallback>
}
 800b872:	e012      	b.n	800b89a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	691a      	ldr	r2, [r3, #16]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b886:	1c5a      	adds	r2, r3, #1
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b890:	b29b      	uxth	r3, r3
 800b892:	3b01      	subs	r3, #1
 800b894:	b29a      	uxth	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b083      	sub	sp, #12
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b40      	cmp	r3, #64	@ 0x40
 800b8b4:	d117      	bne.n	800b8e6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d109      	bne.n	800b8d2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b8ce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b8d0:	e067      	b.n	800b9a2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f043 0301 	orr.w	r3, r3, #1
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	611a      	str	r2, [r3, #16]
}
 800b8e4:	e05d      	b.n	800b9a2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8ee:	d133      	bne.n	800b958 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	2b21      	cmp	r3, #33	@ 0x21
 800b8fa:	d109      	bne.n	800b910 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b900:	b2db      	uxtb	r3, r3
 800b902:	461a      	mov	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b90c:	611a      	str	r2, [r3, #16]
 800b90e:	e008      	b.n	800b922 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b914:	b2db      	uxtb	r3, r3
 800b916:	f043 0301 	orr.w	r3, r3, #1
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <I2C_Master_SB+0x92>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b92e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b930:	2b00      	cmp	r3, #0
 800b932:	d108      	bne.n	800b946 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d032      	beq.n	800b9a2 <I2C_Master_SB+0x100>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b942:	2b00      	cmp	r3, #0
 800b944:	d02d      	beq.n	800b9a2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b954:	605a      	str	r2, [r3, #4]
}
 800b956:	e024      	b.n	800b9a2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10e      	bne.n	800b97e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b964:	b29b      	uxth	r3, r3
 800b966:	11db      	asrs	r3, r3, #7
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	f003 0306 	and.w	r3, r3, #6
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	f063 030f 	orn	r3, r3, #15
 800b974:	b2da      	uxtb	r2, r3
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	611a      	str	r2, [r3, #16]
}
 800b97c:	e011      	b.n	800b9a2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b982:	2b01      	cmp	r3, #1
 800b984:	d10d      	bne.n	800b9a2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	11db      	asrs	r3, r3, #7
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 0306 	and.w	r3, r3, #6
 800b994:	b2db      	uxtb	r3, r3
 800b996:	f063 030e 	orn	r3, r3, #14
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	611a      	str	r2, [r3, #16]
}
 800b9a2:	bf00      	nop
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b083      	sub	sp, #12
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d004      	beq.n	800b9d4 <I2C_Master_ADD10+0x26>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d108      	bne.n	800b9e6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00c      	beq.n	800b9f6 <I2C_Master_ADD10+0x48>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d007      	beq.n	800b9f6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9f4:	605a      	str	r2, [r3, #4]
  }
}
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b091      	sub	sp, #68	@ 0x44
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba18:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	2b22      	cmp	r3, #34	@ 0x22
 800ba2a:	f040 8169 	bne.w	800bd00 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10f      	bne.n	800ba56 <I2C_Master_ADDR+0x54>
 800ba36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba3a:	2b40      	cmp	r3, #64	@ 0x40
 800ba3c:	d10b      	bne.n	800ba56 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba3e:	2300      	movs	r3, #0
 800ba40:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba54:	e160      	b.n	800bd18 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d11d      	bne.n	800ba9a <I2C_Master_ADDR+0x98>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ba66:	d118      	bne.n	800ba9a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba68:	2300      	movs	r3, #0
 800ba6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba8c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	651a      	str	r2, [r3, #80]	@ 0x50
 800ba98:	e13e      	b.n	800bd18 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d113      	bne.n	800bacc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baa4:	2300      	movs	r3, #0
 800baa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	699b      	ldr	r3, [r3, #24]
 800bab6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	e115      	b.n	800bcf8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	f040 808a 	bne.w	800bbec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800bad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bada:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bade:	d137      	bne.n	800bb50 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800baee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bafa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bafe:	d113      	bne.n	800bb28 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb0e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb10:	2300      	movs	r3, #0
 800bb12:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	e0e7      	b.n	800bcf8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb28:	2300      	movs	r3, #0
 800bb2a:	623b      	str	r3, [r7, #32]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	623b      	str	r3, [r7, #32]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	623b      	str	r3, [r7, #32]
 800bb3c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb4c:	601a      	str	r2, [r3, #0]
 800bb4e:	e0d3      	b.n	800bcf8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800bb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb52:	2b08      	cmp	r3, #8
 800bb54:	d02e      	beq.n	800bbb4 <I2C_Master_ADDR+0x1b2>
 800bb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb58:	2b20      	cmp	r3, #32
 800bb5a:	d02b      	beq.n	800bbb4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800bb5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb5e:	2b12      	cmp	r3, #18
 800bb60:	d102      	bne.n	800bb68 <I2C_Master_ADDR+0x166>
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d125      	bne.n	800bbb4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800bb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d00e      	beq.n	800bb8c <I2C_Master_ADDR+0x18a>
 800bb6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d00b      	beq.n	800bb8c <I2C_Master_ADDR+0x18a>
 800bb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb76:	2b10      	cmp	r3, #16
 800bb78:	d008      	beq.n	800bb8c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	e007      	b.n	800bb9c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bb9a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	61fb      	str	r3, [r7, #28]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	695b      	ldr	r3, [r3, #20]
 800bba6:	61fb      	str	r3, [r7, #28]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	61fb      	str	r3, [r7, #28]
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	e0a1      	b.n	800bcf8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbc2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	61bb      	str	r3, [r7, #24]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	61bb      	str	r3, [r7, #24]
 800bbd8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbe8:	601a      	str	r2, [r3, #0]
 800bbea:	e085      	b.n	800bcf8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	d14d      	bne.n	800bc92 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf8:	2b04      	cmp	r3, #4
 800bbfa:	d016      	beq.n	800bc2a <I2C_Master_ADDR+0x228>
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d013      	beq.n	800bc2a <I2C_Master_ADDR+0x228>
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	2b10      	cmp	r3, #16
 800bc06:	d010      	beq.n	800bc2a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc16:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e007      	b.n	800bc3a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc38:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc48:	d117      	bne.n	800bc7a <I2C_Master_ADDR+0x278>
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bc50:	d00b      	beq.n	800bc6a <I2C_Master_ADDR+0x268>
 800bc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d008      	beq.n	800bc6a <I2C_Master_ADDR+0x268>
 800bc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5a:	2b08      	cmp	r3, #8
 800bc5c:	d005      	beq.n	800bc6a <I2C_Master_ADDR+0x268>
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc60:	2b10      	cmp	r3, #16
 800bc62:	d002      	beq.n	800bc6a <I2C_Master_ADDR+0x268>
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	d107      	bne.n	800bc7a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bc78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	617b      	str	r3, [r7, #20]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	617b      	str	r3, [r7, #20]
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	e032      	b.n	800bcf8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bca0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcb0:	d117      	bne.n	800bce2 <I2C_Master_ADDR+0x2e0>
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bcb8:	d00b      	beq.n	800bcd2 <I2C_Master_ADDR+0x2d0>
 800bcba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d008      	beq.n	800bcd2 <I2C_Master_ADDR+0x2d0>
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc2:	2b08      	cmp	r3, #8
 800bcc4:	d005      	beq.n	800bcd2 <I2C_Master_ADDR+0x2d0>
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	2b10      	cmp	r3, #16
 800bcca:	d002      	beq.n	800bcd2 <I2C_Master_ADDR+0x2d0>
 800bccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d107      	bne.n	800bce2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bce0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bce2:	2300      	movs	r3, #0
 800bce4:	613b      	str	r3, [r7, #16]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	613b      	str	r3, [r7, #16]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	699b      	ldr	r3, [r3, #24]
 800bcf4:	613b      	str	r3, [r7, #16]
 800bcf6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800bcfe:	e00b      	b.n	800bd18 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	60fb      	str	r3, [r7, #12]
 800bd14:	68fb      	ldr	r3, [r7, #12]
}
 800bd16:	e7ff      	b.n	800bd18 <I2C_Master_ADDR+0x316>
 800bd18:	bf00      	nop
 800bd1a:	3744      	adds	r7, #68	@ 0x44
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d02b      	beq.n	800bd96 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd42:	781a      	ldrb	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d114      	bne.n	800bd96 <I2C_SlaveTransmit_TXE+0x72>
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
 800bd6e:	2b29      	cmp	r3, #41	@ 0x29
 800bd70:	d111      	bne.n	800bd96 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd80:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2221      	movs	r2, #33	@ 0x21
 800bd86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2228      	movs	r2, #40	@ 0x28
 800bd8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff f9cf 	bl	800b134 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bd96:	bf00      	nop
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d011      	beq.n	800bdd4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb4:	781a      	ldrb	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc0:	1c5a      	adds	r2, r3, #1
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d02c      	beq.n	800be54 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	691a      	ldr	r2, [r3, #16]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be04:	b2d2      	uxtb	r2, r2
 800be06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be16:	b29b      	uxth	r3, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be24:	b29b      	uxth	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d114      	bne.n	800be54 <I2C_SlaveReceive_RXNE+0x74>
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be2e:	d111      	bne.n	800be54 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be3e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2222      	movs	r2, #34	@ 0x22
 800be44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2228      	movs	r2, #40	@ 0x28
 800be4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff f97a 	bl	800b148 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800be54:	bf00      	nop
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be68:	b29b      	uxth	r3, r3
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d012      	beq.n	800be94 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	691a      	ldr	r2, [r3, #16]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be78:	b2d2      	uxtb	r2, r2
 800be7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29a      	uxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800be94:	bf00      	nop
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800beba:	2b28      	cmp	r3, #40	@ 0x28
 800bebc:	d125      	bne.n	800bf0a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800becc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800bed8:	2301      	movs	r3, #1
 800beda:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	81bb      	strh	r3, [r7, #12]
 800beec:	e002      	b.n	800bef4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800befc:	89ba      	ldrh	r2, [r7, #12]
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	4619      	mov	r1, r3
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff f92a 	bl	800b15c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bf08:	e00e      	b.n	800bf28 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60bb      	str	r3, [r7, #8]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	695b      	ldr	r3, [r3, #20]
 800bf14:	60bb      	str	r3, [r7, #8]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bf4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bf50:	2300      	movs	r3, #0
 800bf52:	60bb      	str	r3, [r7, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	60bb      	str	r3, [r7, #8]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f042 0201 	orr.w	r2, r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf8c:	d172      	bne.n	800c074 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
 800bf90:	2b22      	cmp	r3, #34	@ 0x22
 800bf92:	d002      	beq.n	800bf9a <I2C_Slave_STOPF+0x6a>
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf98:	d135      	bne.n	800c006 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb6:	f043 0204 	orr.w	r2, r3, #4
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bfcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fd fc09 	bl	80097ea <HAL_DMA_GetState>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d049      	beq.n	800c072 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe2:	4a69      	ldr	r2, [pc, #420]	@ (800c188 <I2C_Slave_STOPF+0x258>)
 800bfe4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fd fbdb 	bl	80097a6 <HAL_DMA_Abort_IT>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d03d      	beq.n	800c072 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c004:	e035      	b.n	800c072 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	b29a      	uxth	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c018:	b29b      	uxth	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d005      	beq.n	800c02a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c022:	f043 0204 	orr.w	r2, r3, #4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685a      	ldr	r2, [r3, #4]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c038:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fd fbd3 	bl	80097ea <HAL_DMA_GetState>
 800c044:	4603      	mov	r3, r0
 800c046:	2b01      	cmp	r3, #1
 800c048:	d014      	beq.n	800c074 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c04e:	4a4e      	ldr	r2, [pc, #312]	@ (800c188 <I2C_Slave_STOPF+0x258>)
 800c050:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c056:	4618      	mov	r0, r3
 800c058:	f7fd fba5 	bl	80097a6 <HAL_DMA_Abort_IT>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d008      	beq.n	800c074 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c06c:	4610      	mov	r0, r2
 800c06e:	4798      	blx	r3
 800c070:	e000      	b.n	800c074 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c072:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d03e      	beq.n	800c0fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b04      	cmp	r3, #4
 800c08a:	d112      	bne.n	800c0b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	691a      	ldr	r2, [r3, #16]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c096:	b2d2      	uxtb	r2, r2
 800c098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09e:	1c5a      	adds	r2, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0bc:	2b40      	cmp	r3, #64	@ 0x40
 800c0be:	d112      	bne.n	800c0e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	691a      	ldr	r2, [r3, #16]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ca:	b2d2      	uxtb	r2, r2
 800c0cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b01      	subs	r3, #1
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d005      	beq.n	800c0fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f4:	f043 0204 	orr.w	r2, r3, #4
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f8b7 	bl	800c278 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800c10a:	e039      	b.n	800c180 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c110:	d109      	bne.n	800c126 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2228      	movs	r2, #40	@ 0x28
 800c11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff f811 	bl	800b148 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b28      	cmp	r3, #40	@ 0x28
 800c130:	d111      	bne.n	800c156 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a15      	ldr	r2, [pc, #84]	@ (800c18c <I2C_Slave_STOPF+0x25c>)
 800c136:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff f812 	bl	800b178 <HAL_I2C_ListenCpltCallback>
}
 800c154:	e014      	b.n	800c180 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15a:	2b22      	cmp	r3, #34	@ 0x22
 800c15c:	d002      	beq.n	800c164 <I2C_Slave_STOPF+0x234>
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	2b22      	cmp	r3, #34	@ 0x22
 800c162:	d10d      	bne.n	800c180 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7fe ffe4 	bl	800b148 <HAL_I2C_SlaveRxCpltCallback>
}
 800c180:	bf00      	nop
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	0800c77d 	.word	0x0800c77d
 800c18c:	ffff0000 	.word	0xffff0000

0800c190 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c19e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b08      	cmp	r3, #8
 800c1aa:	d002      	beq.n	800c1b2 <I2C_Slave_AF+0x22>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b20      	cmp	r3, #32
 800c1b0:	d129      	bne.n	800c206 <I2C_Slave_AF+0x76>
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	2b28      	cmp	r3, #40	@ 0x28
 800c1b6:	d126      	bne.n	800c206 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a2e      	ldr	r2, [pc, #184]	@ (800c274 <I2C_Slave_AF+0xe4>)
 800c1bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c1cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2220      	movs	r2, #32
 800c1f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7fe ffba 	bl	800b178 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c204:	e031      	b.n	800c26a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	2b21      	cmp	r3, #33	@ 0x21
 800c20a:	d129      	bne.n	800c260 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a19      	ldr	r2, [pc, #100]	@ (800c274 <I2C_Slave_AF+0xe4>)
 800c210:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2221      	movs	r2, #33	@ 0x21
 800c216:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2220      	movs	r2, #32
 800c21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c236:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c240:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c250:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7fe f8f4 	bl	800a440 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7fe ff6b 	bl	800b134 <HAL_I2C_SlaveTxCpltCallback>
}
 800c25e:	e004      	b.n	800c26a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c268:	615a      	str	r2, [r3, #20]
}
 800c26a:	bf00      	nop
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	ffff0000 	.word	0xffff0000

0800c278 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c286:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c28e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	2b10      	cmp	r3, #16
 800c294:	d002      	beq.n	800c29c <I2C_ITError+0x24>
 800c296:	7bbb      	ldrb	r3, [r7, #14]
 800c298:	2b40      	cmp	r3, #64	@ 0x40
 800c29a:	d10a      	bne.n	800c2b2 <I2C_ITError+0x3a>
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	2b22      	cmp	r3, #34	@ 0x22
 800c2a0:	d107      	bne.n	800c2b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c2b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c2b8:	2b28      	cmp	r3, #40	@ 0x28
 800c2ba:	d107      	bne.n	800c2cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2228      	movs	r2, #40	@ 0x28
 800c2c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c2ca:	e015      	b.n	800c2f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2da:	d00a      	beq.n	800c2f2 <I2C_ITError+0x7a>
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b60      	cmp	r3, #96	@ 0x60
 800c2e0:	d007      	beq.n	800c2f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c306:	d162      	bne.n	800c3ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685a      	ldr	r2, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c316:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c31c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c320:	b2db      	uxtb	r3, r3
 800c322:	2b01      	cmp	r3, #1
 800c324:	d020      	beq.n	800c368 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c32a:	4a6a      	ldr	r2, [pc, #424]	@ (800c4d4 <I2C_ITError+0x25c>)
 800c32c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c332:	4618      	mov	r0, r3
 800c334:	f7fd fa37 	bl	80097a6 <HAL_DMA_Abort_IT>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8089 	beq.w	800c452 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f022 0201 	bic.w	r2, r2, #1
 800c34e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2220      	movs	r2, #32
 800c354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c35c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c362:	4610      	mov	r0, r2
 800c364:	4798      	blx	r3
 800c366:	e074      	b.n	800c452 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c36c:	4a59      	ldr	r2, [pc, #356]	@ (800c4d4 <I2C_ITError+0x25c>)
 800c36e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c374:	4618      	mov	r0, r3
 800c376:	f7fd fa16 	bl	80097a6 <HAL_DMA_Abort_IT>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d068      	beq.n	800c452 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c38a:	2b40      	cmp	r3, #64	@ 0x40
 800c38c:	d10b      	bne.n	800c3a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	691a      	ldr	r2, [r3, #16]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c398:	b2d2      	uxtb	r2, r2
 800c39a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f022 0201 	bic.w	r2, r2, #1
 800c3b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2220      	movs	r2, #32
 800c3ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c3c8:	4610      	mov	r0, r2
 800c3ca:	4798      	blx	r3
 800c3cc:	e041      	b.n	800c452 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b60      	cmp	r3, #96	@ 0x60
 800c3d8:	d125      	bne.n	800c426 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2220      	movs	r2, #32
 800c3de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f2:	2b40      	cmp	r3, #64	@ 0x40
 800c3f4:	d10b      	bne.n	800c40e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	691a      	ldr	r2, [r3, #16]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c400:	b2d2      	uxtb	r2, r2
 800c402:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c408:	1c5a      	adds	r2, r3, #1
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f022 0201 	bic.w	r2, r2, #1
 800c41c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7fe fed2 	bl	800b1c8 <HAL_I2C_AbortCpltCallback>
 800c424:	e015      	b.n	800c452 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c430:	2b40      	cmp	r3, #64	@ 0x40
 800c432:	d10b      	bne.n	800c44c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	691a      	ldr	r2, [r3, #16]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c446:	1c5a      	adds	r2, r3, #1
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7fe feb1 	bl	800b1b4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c456:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10e      	bne.n	800c480 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d109      	bne.n	800c480 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c472:	2b00      	cmp	r3, #0
 800c474:	d104      	bne.n	800c480 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d007      	beq.n	800c490 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c48e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c496:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d113      	bne.n	800c4cc <I2C_ITError+0x254>
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
 800c4a6:	2b28      	cmp	r3, #40	@ 0x28
 800c4a8:	d110      	bne.n	800c4cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c4d8 <I2C_ITError+0x260>)
 800c4ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2220      	movs	r2, #32
 800c4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7fe fe56 	bl	800b178 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	0800c77d 	.word	0x0800c77d
 800c4d8:	ffff0000 	.word	0xffff0000

0800c4dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	607a      	str	r2, [r7, #4]
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2b08      	cmp	r3, #8
 800c4f6:	d006      	beq.n	800c506 <I2C_MasterRequestWrite+0x2a>
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d003      	beq.n	800c506 <I2C_MasterRequestWrite+0x2a>
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c504:	d108      	bne.n	800c518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	e00b      	b.n	800c530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c51c:	2b12      	cmp	r3, #18
 800c51e:	d107      	bne.n	800c530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c52e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 f9c5 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00d      	beq.n	800c564 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c556:	d103      	bne.n	800c560 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c55e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e035      	b.n	800c5d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c56c:	d108      	bne.n	800c580 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c56e:	897b      	ldrh	r3, [r7, #10]
 800c570:	b2db      	uxtb	r3, r3
 800c572:	461a      	mov	r2, r3
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c57c:	611a      	str	r2, [r3, #16]
 800c57e:	e01b      	b.n	800c5b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c580:	897b      	ldrh	r3, [r7, #10]
 800c582:	11db      	asrs	r3, r3, #7
 800c584:	b2db      	uxtb	r3, r3
 800c586:	f003 0306 	and.w	r3, r3, #6
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	f063 030f 	orn	r3, r3, #15
 800c590:	b2da      	uxtb	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	490e      	ldr	r1, [pc, #56]	@ (800c5d8 <I2C_MasterRequestWrite+0xfc>)
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f000 fa0e 	bl	800c9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e010      	b.n	800c5d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c5ae:	897b      	ldrh	r3, [r7, #10]
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	4907      	ldr	r1, [pc, #28]	@ (800c5dc <I2C_MasterRequestWrite+0x100>)
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f000 f9fe 	bl	800c9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3718      	adds	r7, #24
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	00010008 	.word	0x00010008
 800c5dc:	00010002 	.word	0x00010002

0800c5e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af02      	add	r7, sp, #8
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	607a      	str	r2, [r7, #4]
 800c5ea:	603b      	str	r3, [r7, #0]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c604:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2b08      	cmp	r3, #8
 800c60a:	d006      	beq.n	800c61a <I2C_MasterRequestRead+0x3a>
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d003      	beq.n	800c61a <I2C_MasterRequestRead+0x3a>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c618:	d108      	bne.n	800c62c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	e00b      	b.n	800c644 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c630:	2b11      	cmp	r3, #17
 800c632:	d107      	bne.n	800c644 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c642:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 f93b 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00d      	beq.n	800c678 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c66a:	d103      	bne.n	800c674 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c672:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	e079      	b.n	800c76c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c680:	d108      	bne.n	800c694 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c682:	897b      	ldrh	r3, [r7, #10]
 800c684:	b2db      	uxtb	r3, r3
 800c686:	f043 0301 	orr.w	r3, r3, #1
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	611a      	str	r2, [r3, #16]
 800c692:	e05f      	b.n	800c754 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c694:	897b      	ldrh	r3, [r7, #10]
 800c696:	11db      	asrs	r3, r3, #7
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	f003 0306 	and.w	r3, r3, #6
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	f063 030f 	orn	r3, r3, #15
 800c6a4:	b2da      	uxtb	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	4930      	ldr	r1, [pc, #192]	@ (800c774 <I2C_MasterRequestRead+0x194>)
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 f984 	bl	800c9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d001      	beq.n	800c6c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e054      	b.n	800c76c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c6c2:	897b      	ldrh	r3, [r7, #10]
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4929      	ldr	r1, [pc, #164]	@ (800c778 <I2C_MasterRequestRead+0x198>)
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 f974 	bl	800c9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e044      	b.n	800c76c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	613b      	str	r3, [r7, #16]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	613b      	str	r3, [r7, #16]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	613b      	str	r3, [r7, #16]
 800c6f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c706:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f000 f8d9 	bl	800c8cc <I2C_WaitOnFlagUntilTimeout>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00d      	beq.n	800c73c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c72a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c72e:	d103      	bne.n	800c738 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c736:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e017      	b.n	800c76c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c73c:	897b      	ldrh	r3, [r7, #10]
 800c73e:	11db      	asrs	r3, r3, #7
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0306 	and.w	r3, r3, #6
 800c746:	b2db      	uxtb	r3, r3
 800c748:	f063 030e 	orn	r3, r3, #14
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	4907      	ldr	r1, [pc, #28]	@ (800c778 <I2C_MasterRequestRead+0x198>)
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 f930 	bl	800c9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e000      	b.n	800c76c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	00010008 	.word	0x00010008
 800c778:	00010002 	.word	0x00010002

0800c77c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b086      	sub	sp, #24
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c78c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c794:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c796:	4b4b      	ldr	r3, [pc, #300]	@ (800c8c4 <I2C_DMAAbort+0x148>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	08db      	lsrs	r3, r3, #3
 800c79c:	4a4a      	ldr	r2, [pc, #296]	@ (800c8c8 <I2C_DMAAbort+0x14c>)
 800c79e:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a2:	0a1a      	lsrs	r2, r3, #8
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00da      	lsls	r2, r3, #3
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d106      	bne.n	800c7c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ba:	f043 0220 	orr.w	r2, r3, #32
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c7c2:	e00a      	b.n	800c7da <I2C_DMAAbort+0x5e>
    }
    count--;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7d8:	d0ea      	beq.n	800c7b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d003      	beq.n	800c7fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c808:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2200      	movs	r2, #0
 800c80e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c814:	2b00      	cmp	r3, #0
 800c816:	d003      	beq.n	800c820 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c81c:	2200      	movs	r2, #0
 800c81e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c824:	2b00      	cmp	r3, #0
 800c826:	d003      	beq.n	800c830 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c82c:	2200      	movs	r2, #0
 800c82e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f022 0201 	bic.w	r2, r2, #1
 800c83e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b60      	cmp	r3, #96	@ 0x60
 800c84a:	d10e      	bne.n	800c86a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	2220      	movs	r2, #32
 800c850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	2200      	movs	r2, #0
 800c858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	2200      	movs	r2, #0
 800c860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c862:	6978      	ldr	r0, [r7, #20]
 800c864:	f7fe fcb0 	bl	800b1c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c868:	e027      	b.n	800c8ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c86a:	7cfb      	ldrb	r3, [r7, #19]
 800c86c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c870:	2b28      	cmp	r3, #40	@ 0x28
 800c872:	d117      	bne.n	800c8a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f042 0201 	orr.w	r2, r2, #1
 800c882:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c892:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2200      	movs	r2, #0
 800c898:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	2228      	movs	r2, #40	@ 0x28
 800c89e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c8a2:	e007      	b.n	800c8b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c8b4:	6978      	ldr	r0, [r7, #20]
 800c8b6:	f7fe fc7d 	bl	800b1b4 <HAL_I2C_ErrorCallback>
}
 800c8ba:	bf00      	nop
 800c8bc:	3718      	adds	r7, #24
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20000554 	.word	0x20000554
 800c8c8:	14f8b589 	.word	0x14f8b589

0800c8cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	603b      	str	r3, [r7, #0]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c8dc:	e048      	b.n	800c970 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8e4:	d044      	beq.n	800c970 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8e6:	f7fc fd93 	bl	8009410 <HAL_GetTick>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	683a      	ldr	r2, [r7, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d302      	bcc.n	800c8fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d139      	bne.n	800c970 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	0c1b      	lsrs	r3, r3, #16
 800c900:	b2db      	uxtb	r3, r3
 800c902:	2b01      	cmp	r3, #1
 800c904:	d10d      	bne.n	800c922 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	43da      	mvns	r2, r3
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	4013      	ands	r3, r2
 800c912:	b29b      	uxth	r3, r3
 800c914:	2b00      	cmp	r3, #0
 800c916:	bf0c      	ite	eq
 800c918:	2301      	moveq	r3, #1
 800c91a:	2300      	movne	r3, #0
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	461a      	mov	r2, r3
 800c920:	e00c      	b.n	800c93c <I2C_WaitOnFlagUntilTimeout+0x70>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	43da      	mvns	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	4013      	ands	r3, r2
 800c92e:	b29b      	uxth	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	bf0c      	ite	eq
 800c934:	2301      	moveq	r3, #1
 800c936:	2300      	movne	r3, #0
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	461a      	mov	r2, r3
 800c93c:	79fb      	ldrb	r3, [r7, #7]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d116      	bne.n	800c970 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c95c:	f043 0220 	orr.w	r2, r3, #32
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	e023      	b.n	800c9b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	0c1b      	lsrs	r3, r3, #16
 800c974:	b2db      	uxtb	r3, r3
 800c976:	2b01      	cmp	r3, #1
 800c978:	d10d      	bne.n	800c996 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	43da      	mvns	r2, r3
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	4013      	ands	r3, r2
 800c986:	b29b      	uxth	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	bf0c      	ite	eq
 800c98c:	2301      	moveq	r3, #1
 800c98e:	2300      	movne	r3, #0
 800c990:	b2db      	uxtb	r3, r3
 800c992:	461a      	mov	r2, r3
 800c994:	e00c      	b.n	800c9b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	43da      	mvns	r2, r3
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bf0c      	ite	eq
 800c9a8:	2301      	moveq	r3, #1
 800c9aa:	2300      	movne	r3, #0
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d093      	beq.n	800c8de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c9ce:	e071      	b.n	800cab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9de:	d123      	bne.n	800ca28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c9f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2220      	movs	r2, #32
 800ca04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca14:	f043 0204 	orr.w	r2, r3, #4
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e067      	b.n	800caf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca2e:	d041      	beq.n	800cab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca30:	f7fc fcee 	bl	8009410 <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d302      	bcc.n	800ca46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d136      	bne.n	800cab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	0c1b      	lsrs	r3, r3, #16
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d10c      	bne.n	800ca6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	43da      	mvns	r2, r3
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	bf14      	ite	ne
 800ca62:	2301      	movne	r3, #1
 800ca64:	2300      	moveq	r3, #0
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	e00b      	b.n	800ca82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	43da      	mvns	r2, r3
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	4013      	ands	r3, r2
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	bf14      	ite	ne
 800ca7c:	2301      	movne	r3, #1
 800ca7e:	2300      	moveq	r3, #0
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d016      	beq.n	800cab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa0:	f043 0220 	orr.w	r2, r3, #32
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e021      	b.n	800caf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	0c1b      	lsrs	r3, r3, #16
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d10c      	bne.n	800cad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	43da      	mvns	r2, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	4013      	ands	r3, r2
 800caca:	b29b      	uxth	r3, r3
 800cacc:	2b00      	cmp	r3, #0
 800cace:	bf14      	ite	ne
 800cad0:	2301      	movne	r3, #1
 800cad2:	2300      	moveq	r3, #0
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	e00b      	b.n	800caf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	699b      	ldr	r3, [r3, #24]
 800cade:	43da      	mvns	r2, r3
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	4013      	ands	r3, r2
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bf14      	ite	ne
 800caea:	2301      	movne	r3, #1
 800caec:	2300      	moveq	r3, #0
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f47f af6d 	bne.w	800c9d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb0c:	e034      	b.n	800cb78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 f915 	bl	800cd3e <I2C_IsAcknowledgeFailed>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e034      	b.n	800cb88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb24:	d028      	beq.n	800cb78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb26:	f7fc fc73 	bl	8009410 <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d302      	bcc.n	800cb3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11d      	bne.n	800cb78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb46:	2b80      	cmp	r3, #128	@ 0x80
 800cb48:	d016      	beq.n	800cb78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2220      	movs	r2, #32
 800cb54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb64:	f043 0220 	orr.w	r2, r3, #32
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e007      	b.n	800cb88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	695b      	ldr	r3, [r3, #20]
 800cb7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb82:	2b80      	cmp	r3, #128	@ 0x80
 800cb84:	d1c3      	bne.n	800cb0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cb9c:	e034      	b.n	800cc08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 f8cd 	bl	800cd3e <I2C_IsAcknowledgeFailed>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e034      	b.n	800cc18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbb4:	d028      	beq.n	800cc08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbb6:	f7fc fc2b 	bl	8009410 <HAL_GetTick>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d302      	bcc.n	800cbcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d11d      	bne.n	800cc08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	f003 0304 	and.w	r3, r3, #4
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	d016      	beq.n	800cc08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbf4:	f043 0220 	orr.w	r2, r3, #32
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e007      	b.n	800cc18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	f003 0304 	and.w	r3, r3, #4
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d1c3      	bne.n	800cb9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b085      	sub	sp, #20
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800cc2c:	4b13      	ldr	r3, [pc, #76]	@ (800cc7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	08db      	lsrs	r3, r3, #3
 800cc32:	4a13      	ldr	r2, [pc, #76]	@ (800cc80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800cc34:	fba2 2303 	umull	r2, r3, r2, r3
 800cc38:	0a1a      	lsrs	r2, r3, #8
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4413      	add	r3, r2
 800cc40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d107      	bne.n	800cc5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc52:	f043 0220 	orr.w	r2, r3, #32
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e008      	b.n	800cc70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc6c:	d0e9      	beq.n	800cc42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	20000554 	.word	0x20000554
 800cc80:	14f8b589 	.word	0x14f8b589

0800cc84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cc90:	e049      	b.n	800cd26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	695b      	ldr	r3, [r3, #20]
 800cc98:	f003 0310 	and.w	r3, r3, #16
 800cc9c:	2b10      	cmp	r3, #16
 800cc9e:	d119      	bne.n	800ccd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f06f 0210 	mvn.w	r2, #16
 800cca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e030      	b.n	800cd36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccd4:	f7fc fb9c 	bl	8009410 <HAL_GetTick>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d302      	bcc.n	800ccea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d11d      	bne.n	800cd26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	695b      	ldr	r3, [r3, #20]
 800ccf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf4:	2b40      	cmp	r3, #64	@ 0x40
 800ccf6:	d016      	beq.n	800cd26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2220      	movs	r2, #32
 800cd02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd12:	f043 0220 	orr.w	r2, r3, #32
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e007      	b.n	800cd36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd30:	2b40      	cmp	r3, #64	@ 0x40
 800cd32:	d1ae      	bne.n	800cc92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cd3e:	b480      	push	{r7}
 800cd40:	b083      	sub	sp, #12
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	695b      	ldr	r3, [r3, #20]
 800cd4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd54:	d11b      	bne.n	800cd8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cd5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2220      	movs	r2, #32
 800cd6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd7a:	f043 0204 	orr.w	r2, r3, #4
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e000      	b.n	800cd90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cda8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800cdac:	d103      	bne.n	800cdb6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800cdb4:	e007      	b.n	800cdc6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800cdbe:	d102      	bne.n	800cdc6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2208      	movs	r2, #8
 800cdc4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
	...

0800cdd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e267      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d075      	beq.n	800cede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800cdf2:	4b88      	ldr	r3, [pc, #544]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	f003 030c 	and.w	r3, r3, #12
 800cdfa:	2b04      	cmp	r3, #4
 800cdfc:	d00c      	beq.n	800ce18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cdfe:	4b85      	ldr	r3, [pc, #532]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ce06:	2b08      	cmp	r3, #8
 800ce08:	d112      	bne.n	800ce30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ce0a:	4b82      	ldr	r3, [pc, #520]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce16:	d10b      	bne.n	800ce30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce18:	4b7e      	ldr	r3, [pc, #504]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d05b      	beq.n	800cedc <HAL_RCC_OscConfig+0x108>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d157      	bne.n	800cedc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e242      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce38:	d106      	bne.n	800ce48 <HAL_RCC_OscConfig+0x74>
 800ce3a:	4b76      	ldr	r3, [pc, #472]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a75      	ldr	r2, [pc, #468]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	e01d      	b.n	800ce84 <HAL_RCC_OscConfig+0xb0>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce50:	d10c      	bne.n	800ce6c <HAL_RCC_OscConfig+0x98>
 800ce52:	4b70      	ldr	r3, [pc, #448]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a6f      	ldr	r2, [pc, #444]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	4b6d      	ldr	r3, [pc, #436]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4a6c      	ldr	r2, [pc, #432]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce68:	6013      	str	r3, [r2, #0]
 800ce6a:	e00b      	b.n	800ce84 <HAL_RCC_OscConfig+0xb0>
 800ce6c:	4b69      	ldr	r3, [pc, #420]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a68      	ldr	r2, [pc, #416]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	4b66      	ldr	r3, [pc, #408]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a65      	ldr	r2, [pc, #404]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ce7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ce82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d013      	beq.n	800ceb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce8c:	f7fc fac0 	bl	8009410 <HAL_GetTick>
 800ce90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce92:	e008      	b.n	800cea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ce94:	f7fc fabc 	bl	8009410 <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	2b64      	cmp	r3, #100	@ 0x64
 800cea0:	d901      	bls.n	800cea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cea2:	2303      	movs	r3, #3
 800cea4:	e207      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cea6:	4b5b      	ldr	r3, [pc, #364]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d0f0      	beq.n	800ce94 <HAL_RCC_OscConfig+0xc0>
 800ceb2:	e014      	b.n	800cede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ceb4:	f7fc faac 	bl	8009410 <HAL_GetTick>
 800ceb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ceba:	e008      	b.n	800cece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cebc:	f7fc faa8 	bl	8009410 <HAL_GetTick>
 800cec0:	4602      	mov	r2, r0
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	2b64      	cmp	r3, #100	@ 0x64
 800cec8:	d901      	bls.n	800cece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e1f3      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cece:	4b51      	ldr	r3, [pc, #324]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1f0      	bne.n	800cebc <HAL_RCC_OscConfig+0xe8>
 800ceda:	e000      	b.n	800cede <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cedc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d063      	beq.n	800cfb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ceea:	4b4a      	ldr	r3, [pc, #296]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	f003 030c 	and.w	r3, r3, #12
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00b      	beq.n	800cf0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cef6:	4b47      	ldr	r3, [pc, #284]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800cefe:	2b08      	cmp	r3, #8
 800cf00:	d11c      	bne.n	800cf3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cf02:	4b44      	ldr	r3, [pc, #272]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d116      	bne.n	800cf3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf0e:	4b41      	ldr	r3, [pc, #260]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f003 0302 	and.w	r3, r3, #2
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d005      	beq.n	800cf26 <HAL_RCC_OscConfig+0x152>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d001      	beq.n	800cf26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e1c7      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf26:	4b3b      	ldr	r3, [pc, #236]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	4937      	ldr	r1, [pc, #220]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf36:	4313      	orrs	r3, r2
 800cf38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf3a:	e03a      	b.n	800cfb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d020      	beq.n	800cf86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cf44:	4b34      	ldr	r3, [pc, #208]	@ (800d018 <HAL_RCC_OscConfig+0x244>)
 800cf46:	2201      	movs	r2, #1
 800cf48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf4a:	f7fc fa61 	bl	8009410 <HAL_GetTick>
 800cf4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf50:	e008      	b.n	800cf64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf52:	f7fc fa5d 	bl	8009410 <HAL_GetTick>
 800cf56:	4602      	mov	r2, r0
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d901      	bls.n	800cf64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e1a8      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf64:	4b2b      	ldr	r3, [pc, #172]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f003 0302 	and.w	r3, r3, #2
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d0f0      	beq.n	800cf52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf70:	4b28      	ldr	r3, [pc, #160]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	4925      	ldr	r1, [pc, #148]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	600b      	str	r3, [r1, #0]
 800cf84:	e015      	b.n	800cfb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cf86:	4b24      	ldr	r3, [pc, #144]	@ (800d018 <HAL_RCC_OscConfig+0x244>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf8c:	f7fc fa40 	bl	8009410 <HAL_GetTick>
 800cf90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf92:	e008      	b.n	800cfa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf94:	f7fc fa3c 	bl	8009410 <HAL_GetTick>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	1ad3      	subs	r3, r2, r3
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d901      	bls.n	800cfa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cfa2:	2303      	movs	r3, #3
 800cfa4:	e187      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cfa6:	4b1b      	ldr	r3, [pc, #108]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f003 0302 	and.w	r3, r3, #2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1f0      	bne.n	800cf94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 0308 	and.w	r3, r3, #8
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d036      	beq.n	800d02c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	695b      	ldr	r3, [r3, #20]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d016      	beq.n	800cff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cfc6:	4b15      	ldr	r3, [pc, #84]	@ (800d01c <HAL_RCC_OscConfig+0x248>)
 800cfc8:	2201      	movs	r2, #1
 800cfca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfcc:	f7fc fa20 	bl	8009410 <HAL_GetTick>
 800cfd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cfd2:	e008      	b.n	800cfe6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfd4:	f7fc fa1c 	bl	8009410 <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d901      	bls.n	800cfe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	e167      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800d014 <HAL_RCC_OscConfig+0x240>)
 800cfe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d0f0      	beq.n	800cfd4 <HAL_RCC_OscConfig+0x200>
 800cff2:	e01b      	b.n	800d02c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cff4:	4b09      	ldr	r3, [pc, #36]	@ (800d01c <HAL_RCC_OscConfig+0x248>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cffa:	f7fc fa09 	bl	8009410 <HAL_GetTick>
 800cffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d000:	e00e      	b.n	800d020 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d002:	f7fc fa05 	bl	8009410 <HAL_GetTick>
 800d006:	4602      	mov	r2, r0
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	2b02      	cmp	r3, #2
 800d00e:	d907      	bls.n	800d020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e150      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
 800d014:	40023800 	.word	0x40023800
 800d018:	42470000 	.word	0x42470000
 800d01c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d020:	4b88      	ldr	r3, [pc, #544]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d024:	f003 0302 	and.w	r3, r3, #2
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1ea      	bne.n	800d002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 0304 	and.w	r3, r3, #4
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 8097 	beq.w	800d168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d03a:	2300      	movs	r3, #0
 800d03c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d03e:	4b81      	ldr	r3, [pc, #516]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10f      	bne.n	800d06a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d04a:	2300      	movs	r3, #0
 800d04c:	60bb      	str	r3, [r7, #8]
 800d04e:	4b7d      	ldr	r3, [pc, #500]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d052:	4a7c      	ldr	r2, [pc, #496]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d058:	6413      	str	r3, [r2, #64]	@ 0x40
 800d05a:	4b7a      	ldr	r3, [pc, #488]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d05e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d062:	60bb      	str	r3, [r7, #8]
 800d064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d066:	2301      	movs	r3, #1
 800d068:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d06a:	4b77      	ldr	r3, [pc, #476]	@ (800d248 <HAL_RCC_OscConfig+0x474>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d072:	2b00      	cmp	r3, #0
 800d074:	d118      	bne.n	800d0a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d076:	4b74      	ldr	r3, [pc, #464]	@ (800d248 <HAL_RCC_OscConfig+0x474>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a73      	ldr	r2, [pc, #460]	@ (800d248 <HAL_RCC_OscConfig+0x474>)
 800d07c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d082:	f7fc f9c5 	bl	8009410 <HAL_GetTick>
 800d086:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d088:	e008      	b.n	800d09c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d08a:	f7fc f9c1 	bl	8009410 <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d901      	bls.n	800d09c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e10c      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d09c:	4b6a      	ldr	r3, [pc, #424]	@ (800d248 <HAL_RCC_OscConfig+0x474>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0f0      	beq.n	800d08a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d106      	bne.n	800d0be <HAL_RCC_OscConfig+0x2ea>
 800d0b0:	4b64      	ldr	r3, [pc, #400]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0b4:	4a63      	ldr	r2, [pc, #396]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0b6:	f043 0301 	orr.w	r3, r3, #1
 800d0ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0bc:	e01c      	b.n	800d0f8 <HAL_RCC_OscConfig+0x324>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	2b05      	cmp	r3, #5
 800d0c4:	d10c      	bne.n	800d0e0 <HAL_RCC_OscConfig+0x30c>
 800d0c6:	4b5f      	ldr	r3, [pc, #380]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0ca:	4a5e      	ldr	r2, [pc, #376]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0cc:	f043 0304 	orr.w	r3, r3, #4
 800d0d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0d2:	4b5c      	ldr	r3, [pc, #368]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0d6:	4a5b      	ldr	r2, [pc, #364]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0d8:	f043 0301 	orr.w	r3, r3, #1
 800d0dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0de:	e00b      	b.n	800d0f8 <HAL_RCC_OscConfig+0x324>
 800d0e0:	4b58      	ldr	r3, [pc, #352]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0e4:	4a57      	ldr	r2, [pc, #348]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0e6:	f023 0301 	bic.w	r3, r3, #1
 800d0ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800d0ec:	4b55      	ldr	r3, [pc, #340]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d0f0:	4a54      	ldr	r2, [pc, #336]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d0f2:	f023 0304 	bic.w	r3, r3, #4
 800d0f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d015      	beq.n	800d12c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d100:	f7fc f986 	bl	8009410 <HAL_GetTick>
 800d104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d106:	e00a      	b.n	800d11e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d108:	f7fc f982 	bl	8009410 <HAL_GetTick>
 800d10c:	4602      	mov	r2, r0
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d116:	4293      	cmp	r3, r2
 800d118:	d901      	bls.n	800d11e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e0cb      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d11e:	4b49      	ldr	r3, [pc, #292]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d122:	f003 0302 	and.w	r3, r3, #2
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0ee      	beq.n	800d108 <HAL_RCC_OscConfig+0x334>
 800d12a:	e014      	b.n	800d156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d12c:	f7fc f970 	bl	8009410 <HAL_GetTick>
 800d130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d132:	e00a      	b.n	800d14a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d134:	f7fc f96c 	bl	8009410 <HAL_GetTick>
 800d138:	4602      	mov	r2, r0
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d142:	4293      	cmp	r3, r2
 800d144:	d901      	bls.n	800d14a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d146:	2303      	movs	r3, #3
 800d148:	e0b5      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d14a:	4b3e      	ldr	r3, [pc, #248]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d14c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d14e:	f003 0302 	and.w	r3, r3, #2
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1ee      	bne.n	800d134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d156:	7dfb      	ldrb	r3, [r7, #23]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d105      	bne.n	800d168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d15c:	4b39      	ldr	r3, [pc, #228]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d160:	4a38      	ldr	r2, [pc, #224]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d166:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	699b      	ldr	r3, [r3, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 80a1 	beq.w	800d2b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d172:	4b34      	ldr	r3, [pc, #208]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f003 030c 	and.w	r3, r3, #12
 800d17a:	2b08      	cmp	r3, #8
 800d17c:	d05c      	beq.n	800d238 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d141      	bne.n	800d20a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d186:	4b31      	ldr	r3, [pc, #196]	@ (800d24c <HAL_RCC_OscConfig+0x478>)
 800d188:	2200      	movs	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d18c:	f7fc f940 	bl	8009410 <HAL_GetTick>
 800d190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d192:	e008      	b.n	800d1a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d194:	f7fc f93c 	bl	8009410 <HAL_GetTick>
 800d198:	4602      	mov	r2, r0
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d901      	bls.n	800d1a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	e087      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d1a6:	4b27      	ldr	r3, [pc, #156]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1f0      	bne.n	800d194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	69da      	ldr	r2, [r3, #28]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a1b      	ldr	r3, [r3, #32]
 800d1ba:	431a      	orrs	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c0:	019b      	lsls	r3, r3, #6
 800d1c2:	431a      	orrs	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1c8:	085b      	lsrs	r3, r3, #1
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	041b      	lsls	r3, r3, #16
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d4:	061b      	lsls	r3, r3, #24
 800d1d6:	491b      	ldr	r1, [pc, #108]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d1dc:	4b1b      	ldr	r3, [pc, #108]	@ (800d24c <HAL_RCC_OscConfig+0x478>)
 800d1de:	2201      	movs	r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d1e2:	f7fc f915 	bl	8009410 <HAL_GetTick>
 800d1e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d1e8:	e008      	b.n	800d1fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1ea:	f7fc f911 	bl	8009410 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d901      	bls.n	800d1fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e05c      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d1fc:	4b11      	ldr	r3, [pc, #68]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d204:	2b00      	cmp	r3, #0
 800d206:	d0f0      	beq.n	800d1ea <HAL_RCC_OscConfig+0x416>
 800d208:	e054      	b.n	800d2b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d20a:	4b10      	ldr	r3, [pc, #64]	@ (800d24c <HAL_RCC_OscConfig+0x478>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d210:	f7fc f8fe 	bl	8009410 <HAL_GetTick>
 800d214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d216:	e008      	b.n	800d22a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d218:	f7fc f8fa 	bl	8009410 <HAL_GetTick>
 800d21c:	4602      	mov	r2, r0
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	2b02      	cmp	r3, #2
 800d224:	d901      	bls.n	800d22a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d226:	2303      	movs	r3, #3
 800d228:	e045      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d22a:	4b06      	ldr	r3, [pc, #24]	@ (800d244 <HAL_RCC_OscConfig+0x470>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1f0      	bne.n	800d218 <HAL_RCC_OscConfig+0x444>
 800d236:	e03d      	b.n	800d2b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	699b      	ldr	r3, [r3, #24]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d107      	bne.n	800d250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e038      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
 800d244:	40023800 	.word	0x40023800
 800d248:	40007000 	.word	0x40007000
 800d24c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d250:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c0 <HAL_RCC_OscConfig+0x4ec>)
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	699b      	ldr	r3, [r3, #24]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d028      	beq.n	800d2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d268:	429a      	cmp	r2, r3
 800d26a:	d121      	bne.n	800d2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d276:	429a      	cmp	r2, r3
 800d278:	d11a      	bne.n	800d2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800d280:	4013      	ands	r3, r2
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d288:	4293      	cmp	r3, r2
 800d28a:	d111      	bne.n	800d2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d296:	085b      	lsrs	r3, r3, #1
 800d298:	3b01      	subs	r3, #1
 800d29a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d107      	bne.n	800d2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d001      	beq.n	800d2b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e000      	b.n	800d2b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3718      	adds	r7, #24
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	40023800 	.word	0x40023800

0800d2c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d101      	bne.n	800d2d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e0cc      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d2d8:	4b68      	ldr	r3, [pc, #416]	@ (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f003 0307 	and.w	r3, r3, #7
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d90c      	bls.n	800d300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2e6:	4b65      	ldr	r3, [pc, #404]	@ (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	b2d2      	uxtb	r2, r2
 800d2ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2ee:	4b63      	ldr	r3, [pc, #396]	@ (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f003 0307 	and.w	r3, r3, #7
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d001      	beq.n	800d300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e0b8      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0302 	and.w	r3, r3, #2
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d020      	beq.n	800d34e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 0304 	and.w	r3, r3, #4
 800d314:	2b00      	cmp	r3, #0
 800d316:	d005      	beq.n	800d324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d318:	4b59      	ldr	r3, [pc, #356]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	4a58      	ldr	r2, [pc, #352]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d31e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0308 	and.w	r3, r3, #8
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d005      	beq.n	800d33c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d330:	4b53      	ldr	r3, [pc, #332]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	4a52      	ldr	r2, [pc, #328]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d33a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d33c:	4b50      	ldr	r3, [pc, #320]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	494d      	ldr	r1, [pc, #308]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	2b00      	cmp	r3, #0
 800d358:	d044      	beq.n	800d3e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d107      	bne.n	800d372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d362:	4b47      	ldr	r3, [pc, #284]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d119      	bne.n	800d3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e07f      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	2b02      	cmp	r3, #2
 800d378:	d003      	beq.n	800d382 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d37e:	2b03      	cmp	r3, #3
 800d380:	d107      	bne.n	800d392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d382:	4b3f      	ldr	r3, [pc, #252]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d109      	bne.n	800d3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	e06f      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d392:	4b3b      	ldr	r3, [pc, #236]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f003 0302 	and.w	r3, r3, #2
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d101      	bne.n	800d3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e067      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d3a2:	4b37      	ldr	r3, [pc, #220]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f023 0203 	bic.w	r2, r3, #3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	4934      	ldr	r1, [pc, #208]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d3b4:	f7fc f82c 	bl	8009410 <HAL_GetTick>
 800d3b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3ba:	e00a      	b.n	800d3d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d3bc:	f7fc f828 	bl	8009410 <HAL_GetTick>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	1ad3      	subs	r3, r2, r3
 800d3c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d901      	bls.n	800d3d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	e04f      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3d2:	4b2b      	ldr	r3, [pc, #172]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	f003 020c 	and.w	r2, r3, #12
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d1eb      	bne.n	800d3bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d3e4:	4b25      	ldr	r3, [pc, #148]	@ (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f003 0307 	and.w	r3, r3, #7
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d20c      	bcs.n	800d40c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3f2:	4b22      	ldr	r3, [pc, #136]	@ (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	b2d2      	uxtb	r2, r2
 800d3f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3fa:	4b20      	ldr	r3, [pc, #128]	@ (800d47c <HAL_RCC_ClockConfig+0x1b8>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f003 0307 	and.w	r3, r3, #7
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d001      	beq.n	800d40c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	e032      	b.n	800d472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f003 0304 	and.w	r3, r3, #4
 800d414:	2b00      	cmp	r3, #0
 800d416:	d008      	beq.n	800d42a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d418:	4b19      	ldr	r3, [pc, #100]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d41a:	689b      	ldr	r3, [r3, #8]
 800d41c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	4916      	ldr	r1, [pc, #88]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d426:	4313      	orrs	r3, r2
 800d428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f003 0308 	and.w	r3, r3, #8
 800d432:	2b00      	cmp	r3, #0
 800d434:	d009      	beq.n	800d44a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d436:	4b12      	ldr	r3, [pc, #72]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	490e      	ldr	r1, [pc, #56]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d446:	4313      	orrs	r3, r2
 800d448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d44a:	f000 f821 	bl	800d490 <HAL_RCC_GetSysClockFreq>
 800d44e:	4602      	mov	r2, r0
 800d450:	4b0b      	ldr	r3, [pc, #44]	@ (800d480 <HAL_RCC_ClockConfig+0x1bc>)
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	091b      	lsrs	r3, r3, #4
 800d456:	f003 030f 	and.w	r3, r3, #15
 800d45a:	490a      	ldr	r1, [pc, #40]	@ (800d484 <HAL_RCC_ClockConfig+0x1c0>)
 800d45c:	5ccb      	ldrb	r3, [r1, r3]
 800d45e:	fa22 f303 	lsr.w	r3, r2, r3
 800d462:	4a09      	ldr	r2, [pc, #36]	@ (800d488 <HAL_RCC_ClockConfig+0x1c4>)
 800d464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <HAL_RCC_ClockConfig+0x1c8>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fb ff8c 	bl	8009388 <HAL_InitTick>

  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	40023c00 	.word	0x40023c00
 800d480:	40023800 	.word	0x40023800
 800d484:	08010668 	.word	0x08010668
 800d488:	20000554 	.word	0x20000554
 800d48c:	20000558 	.word	0x20000558

0800d490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d494:	b094      	sub	sp, #80	@ 0x50
 800d496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d498:	2300      	movs	r3, #0
 800d49a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800d49c:	2300      	movs	r3, #0
 800d49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d4a8:	4b79      	ldr	r3, [pc, #484]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	f003 030c 	and.w	r3, r3, #12
 800d4b0:	2b08      	cmp	r3, #8
 800d4b2:	d00d      	beq.n	800d4d0 <HAL_RCC_GetSysClockFreq+0x40>
 800d4b4:	2b08      	cmp	r3, #8
 800d4b6:	f200 80e1 	bhi.w	800d67c <HAL_RCC_GetSysClockFreq+0x1ec>
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <HAL_RCC_GetSysClockFreq+0x34>
 800d4be:	2b04      	cmp	r3, #4
 800d4c0:	d003      	beq.n	800d4ca <HAL_RCC_GetSysClockFreq+0x3a>
 800d4c2:	e0db      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d4c4:	4b73      	ldr	r3, [pc, #460]	@ (800d694 <HAL_RCC_GetSysClockFreq+0x204>)
 800d4c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d4c8:	e0db      	b.n	800d682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d4ca:	4b73      	ldr	r3, [pc, #460]	@ (800d698 <HAL_RCC_GetSysClockFreq+0x208>)
 800d4cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d4ce:	e0d8      	b.n	800d682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d4d0:	4b6f      	ldr	r3, [pc, #444]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d4da:	4b6d      	ldr	r3, [pc, #436]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d063      	beq.n	800d5ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d4e6:	4b6a      	ldr	r3, [pc, #424]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	099b      	lsrs	r3, r3, #6
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d502:	4622      	mov	r2, r4
 800d504:	462b      	mov	r3, r5
 800d506:	f04f 0000 	mov.w	r0, #0
 800d50a:	f04f 0100 	mov.w	r1, #0
 800d50e:	0159      	lsls	r1, r3, #5
 800d510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d514:	0150      	lsls	r0, r2, #5
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	4621      	mov	r1, r4
 800d51c:	1a51      	subs	r1, r2, r1
 800d51e:	6139      	str	r1, [r7, #16]
 800d520:	4629      	mov	r1, r5
 800d522:	eb63 0301 	sbc.w	r3, r3, r1
 800d526:	617b      	str	r3, [r7, #20]
 800d528:	f04f 0200 	mov.w	r2, #0
 800d52c:	f04f 0300 	mov.w	r3, #0
 800d530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d534:	4659      	mov	r1, fp
 800d536:	018b      	lsls	r3, r1, #6
 800d538:	4651      	mov	r1, sl
 800d53a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d53e:	4651      	mov	r1, sl
 800d540:	018a      	lsls	r2, r1, #6
 800d542:	4651      	mov	r1, sl
 800d544:	ebb2 0801 	subs.w	r8, r2, r1
 800d548:	4659      	mov	r1, fp
 800d54a:	eb63 0901 	sbc.w	r9, r3, r1
 800d54e:	f04f 0200 	mov.w	r2, #0
 800d552:	f04f 0300 	mov.w	r3, #0
 800d556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d55a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d55e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d562:	4690      	mov	r8, r2
 800d564:	4699      	mov	r9, r3
 800d566:	4623      	mov	r3, r4
 800d568:	eb18 0303 	adds.w	r3, r8, r3
 800d56c:	60bb      	str	r3, [r7, #8]
 800d56e:	462b      	mov	r3, r5
 800d570:	eb49 0303 	adc.w	r3, r9, r3
 800d574:	60fb      	str	r3, [r7, #12]
 800d576:	f04f 0200 	mov.w	r2, #0
 800d57a:	f04f 0300 	mov.w	r3, #0
 800d57e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d582:	4629      	mov	r1, r5
 800d584:	024b      	lsls	r3, r1, #9
 800d586:	4621      	mov	r1, r4
 800d588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d58c:	4621      	mov	r1, r4
 800d58e:	024a      	lsls	r2, r1, #9
 800d590:	4610      	mov	r0, r2
 800d592:	4619      	mov	r1, r3
 800d594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d596:	2200      	movs	r2, #0
 800d598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d59a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d59c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d5a0:	f7f2 fe6e 	bl	8000280 <__aeabi_uldivmod>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d5ac:	e058      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5ae:	4b38      	ldr	r3, [pc, #224]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x200>)
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	099b      	lsrs	r3, r3, #6
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d5be:	623b      	str	r3, [r7, #32]
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d5c8:	4642      	mov	r2, r8
 800d5ca:	464b      	mov	r3, r9
 800d5cc:	f04f 0000 	mov.w	r0, #0
 800d5d0:	f04f 0100 	mov.w	r1, #0
 800d5d4:	0159      	lsls	r1, r3, #5
 800d5d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d5da:	0150      	lsls	r0, r2, #5
 800d5dc:	4602      	mov	r2, r0
 800d5de:	460b      	mov	r3, r1
 800d5e0:	4641      	mov	r1, r8
 800d5e2:	ebb2 0a01 	subs.w	sl, r2, r1
 800d5e6:	4649      	mov	r1, r9
 800d5e8:	eb63 0b01 	sbc.w	fp, r3, r1
 800d5ec:	f04f 0200 	mov.w	r2, #0
 800d5f0:	f04f 0300 	mov.w	r3, #0
 800d5f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d5f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d5fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d600:	ebb2 040a 	subs.w	r4, r2, sl
 800d604:	eb63 050b 	sbc.w	r5, r3, fp
 800d608:	f04f 0200 	mov.w	r2, #0
 800d60c:	f04f 0300 	mov.w	r3, #0
 800d610:	00eb      	lsls	r3, r5, #3
 800d612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d616:	00e2      	lsls	r2, r4, #3
 800d618:	4614      	mov	r4, r2
 800d61a:	461d      	mov	r5, r3
 800d61c:	4643      	mov	r3, r8
 800d61e:	18e3      	adds	r3, r4, r3
 800d620:	603b      	str	r3, [r7, #0]
 800d622:	464b      	mov	r3, r9
 800d624:	eb45 0303 	adc.w	r3, r5, r3
 800d628:	607b      	str	r3, [r7, #4]
 800d62a:	f04f 0200 	mov.w	r2, #0
 800d62e:	f04f 0300 	mov.w	r3, #0
 800d632:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d636:	4629      	mov	r1, r5
 800d638:	028b      	lsls	r3, r1, #10
 800d63a:	4621      	mov	r1, r4
 800d63c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d640:	4621      	mov	r1, r4
 800d642:	028a      	lsls	r2, r1, #10
 800d644:	4610      	mov	r0, r2
 800d646:	4619      	mov	r1, r3
 800d648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d64a:	2200      	movs	r2, #0
 800d64c:	61bb      	str	r3, [r7, #24]
 800d64e:	61fa      	str	r2, [r7, #28]
 800d650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d654:	f7f2 fe14 	bl	8000280 <__aeabi_uldivmod>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	4613      	mov	r3, r2
 800d65e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d660:	4b0b      	ldr	r3, [pc, #44]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x200>)
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	0c1b      	lsrs	r3, r3, #16
 800d666:	f003 0303 	and.w	r3, r3, #3
 800d66a:	3301      	adds	r3, #1
 800d66c:	005b      	lsls	r3, r3, #1
 800d66e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800d670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d674:	fbb2 f3f3 	udiv	r3, r2, r3
 800d678:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d67a:	e002      	b.n	800d682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d67c:	4b05      	ldr	r3, [pc, #20]	@ (800d694 <HAL_RCC_GetSysClockFreq+0x204>)
 800d67e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d680:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d684:	4618      	mov	r0, r3
 800d686:	3750      	adds	r7, #80	@ 0x50
 800d688:	46bd      	mov	sp, r7
 800d68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d68e:	bf00      	nop
 800d690:	40023800 	.word	0x40023800
 800d694:	00f42400 	.word	0x00f42400
 800d698:	007a1200 	.word	0x007a1200

0800d69c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d69c:	b480      	push	{r7}
 800d69e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d6a0:	4b03      	ldr	r3, [pc, #12]	@ (800d6b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop
 800d6b0:	20000554 	.word	0x20000554

0800d6b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d6b8:	f7ff fff0 	bl	800d69c <HAL_RCC_GetHCLKFreq>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	4b05      	ldr	r3, [pc, #20]	@ (800d6d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	0a9b      	lsrs	r3, r3, #10
 800d6c4:	f003 0307 	and.w	r3, r3, #7
 800d6c8:	4903      	ldr	r1, [pc, #12]	@ (800d6d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6ca:	5ccb      	ldrb	r3, [r1, r3]
 800d6cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	40023800 	.word	0x40023800
 800d6d8:	08010678 	.word	0x08010678

0800d6dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d6e0:	f7ff ffdc 	bl	800d69c <HAL_RCC_GetHCLKFreq>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	4b05      	ldr	r3, [pc, #20]	@ (800d6fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	0b5b      	lsrs	r3, r3, #13
 800d6ec:	f003 0307 	and.w	r3, r3, #7
 800d6f0:	4903      	ldr	r1, [pc, #12]	@ (800d700 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d6f2:	5ccb      	ldrb	r3, [r1, r3]
 800d6f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	40023800 	.word	0x40023800
 800d700:	08010678 	.word	0x08010678

0800d704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e041      	b.n	800d79a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7fb fc54 	bl	8008fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2202      	movs	r2, #2
 800d734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	3304      	adds	r3, #4
 800d740:	4619      	mov	r1, r3
 800d742:	4610      	mov	r0, r2
 800d744:	f000 fa70 	bl	800dc28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d001      	beq.n	800d7bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e044      	b.n	800d846 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2202      	movs	r2, #2
 800d7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68da      	ldr	r2, [r3, #12]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f042 0201 	orr.w	r2, r2, #1
 800d7d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a1e      	ldr	r2, [pc, #120]	@ (800d854 <HAL_TIM_Base_Start_IT+0xb0>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d018      	beq.n	800d810 <HAL_TIM_Base_Start_IT+0x6c>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7e6:	d013      	beq.n	800d810 <HAL_TIM_Base_Start_IT+0x6c>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a1a      	ldr	r2, [pc, #104]	@ (800d858 <HAL_TIM_Base_Start_IT+0xb4>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d00e      	beq.n	800d810 <HAL_TIM_Base_Start_IT+0x6c>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a19      	ldr	r2, [pc, #100]	@ (800d85c <HAL_TIM_Base_Start_IT+0xb8>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d009      	beq.n	800d810 <HAL_TIM_Base_Start_IT+0x6c>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4a17      	ldr	r2, [pc, #92]	@ (800d860 <HAL_TIM_Base_Start_IT+0xbc>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d004      	beq.n	800d810 <HAL_TIM_Base_Start_IT+0x6c>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a16      	ldr	r2, [pc, #88]	@ (800d864 <HAL_TIM_Base_Start_IT+0xc0>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d111      	bne.n	800d834 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	f003 0307 	and.w	r3, r3, #7
 800d81a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2b06      	cmp	r3, #6
 800d820:	d010      	beq.n	800d844 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f042 0201 	orr.w	r2, r2, #1
 800d830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d832:	e007      	b.n	800d844 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f042 0201 	orr.w	r2, r2, #1
 800d842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	40010000 	.word	0x40010000
 800d858:	40000400 	.word	0x40000400
 800d85c:	40000800 	.word	0x40000800
 800d860:	40000c00 	.word	0x40000c00
 800d864:	40014000 	.word	0x40014000

0800d868 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	2b00      	cmp	r3, #0
 800d888:	d020      	beq.n	800d8cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f003 0302 	and.w	r3, r3, #2
 800d890:	2b00      	cmp	r3, #0
 800d892:	d01b      	beq.n	800d8cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f06f 0202 	mvn.w	r2, #2
 800d89c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	f003 0303 	and.w	r3, r3, #3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f999 	bl	800dbea <HAL_TIM_IC_CaptureCallback>
 800d8b8:	e005      	b.n	800d8c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f98b 	bl	800dbd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f99c 	bl	800dbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	f003 0304 	and.w	r3, r3, #4
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d020      	beq.n	800d918 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f003 0304 	and.w	r3, r3, #4
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d01b      	beq.n	800d918 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f06f 0204 	mvn.w	r2, #4
 800d8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d003      	beq.n	800d906 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f973 	bl	800dbea <HAL_TIM_IC_CaptureCallback>
 800d904:	e005      	b.n	800d912 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f965 	bl	800dbd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 f976 	bl	800dbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2200      	movs	r2, #0
 800d916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	f003 0308 	and.w	r3, r3, #8
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d020      	beq.n	800d964 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f003 0308 	and.w	r3, r3, #8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d01b      	beq.n	800d964 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f06f 0208 	mvn.w	r2, #8
 800d934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2204      	movs	r2, #4
 800d93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	69db      	ldr	r3, [r3, #28]
 800d942:	f003 0303 	and.w	r3, r3, #3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f94d 	bl	800dbea <HAL_TIM_IC_CaptureCallback>
 800d950:	e005      	b.n	800d95e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 f93f 	bl	800dbd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f000 f950 	bl	800dbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f003 0310 	and.w	r3, r3, #16
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d020      	beq.n	800d9b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f003 0310 	and.w	r3, r3, #16
 800d974:	2b00      	cmp	r3, #0
 800d976:	d01b      	beq.n	800d9b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f06f 0210 	mvn.w	r2, #16
 800d980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2208      	movs	r2, #8
 800d986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	69db      	ldr	r3, [r3, #28]
 800d98e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 f927 	bl	800dbea <HAL_TIM_IC_CaptureCallback>
 800d99c:	e005      	b.n	800d9aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f919 	bl	800dbd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 f92a 	bl	800dbfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00c      	beq.n	800d9d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f003 0301 	and.w	r3, r3, #1
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d007      	beq.n	800d9d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f06f 0201 	mvn.w	r2, #1
 800d9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7f6 f9c8 	bl	8003d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00c      	beq.n	800d9f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d007      	beq.n	800d9f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fab0 	bl	800df58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00c      	beq.n	800da1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d007      	beq.n	800da1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800da14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f8fb 	bl	800dc12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f003 0320 	and.w	r3, r3, #32
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00c      	beq.n	800da40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f003 0320 	and.w	r3, r3, #32
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d007      	beq.n	800da40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	f06f 0220 	mvn.w	r2, #32
 800da38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fa82 	bl	800df44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da40:	bf00      	nop
 800da42:	3710      	adds	r7, #16
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d101      	bne.n	800da64 <HAL_TIM_ConfigClockSource+0x1c>
 800da60:	2302      	movs	r3, #2
 800da62:	e0b4      	b.n	800dbce <HAL_TIM_ConfigClockSource+0x186>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800da82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da9c:	d03e      	beq.n	800db1c <HAL_TIM_ConfigClockSource+0xd4>
 800da9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800daa2:	f200 8087 	bhi.w	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800daa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800daaa:	f000 8086 	beq.w	800dbba <HAL_TIM_ConfigClockSource+0x172>
 800daae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dab2:	d87f      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dab4:	2b70      	cmp	r3, #112	@ 0x70
 800dab6:	d01a      	beq.n	800daee <HAL_TIM_ConfigClockSource+0xa6>
 800dab8:	2b70      	cmp	r3, #112	@ 0x70
 800daba:	d87b      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dabc:	2b60      	cmp	r3, #96	@ 0x60
 800dabe:	d050      	beq.n	800db62 <HAL_TIM_ConfigClockSource+0x11a>
 800dac0:	2b60      	cmp	r3, #96	@ 0x60
 800dac2:	d877      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dac4:	2b50      	cmp	r3, #80	@ 0x50
 800dac6:	d03c      	beq.n	800db42 <HAL_TIM_ConfigClockSource+0xfa>
 800dac8:	2b50      	cmp	r3, #80	@ 0x50
 800daca:	d873      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dacc:	2b40      	cmp	r3, #64	@ 0x40
 800dace:	d058      	beq.n	800db82 <HAL_TIM_ConfigClockSource+0x13a>
 800dad0:	2b40      	cmp	r3, #64	@ 0x40
 800dad2:	d86f      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dad4:	2b30      	cmp	r3, #48	@ 0x30
 800dad6:	d064      	beq.n	800dba2 <HAL_TIM_ConfigClockSource+0x15a>
 800dad8:	2b30      	cmp	r3, #48	@ 0x30
 800dada:	d86b      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dadc:	2b20      	cmp	r3, #32
 800dade:	d060      	beq.n	800dba2 <HAL_TIM_ConfigClockSource+0x15a>
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	d867      	bhi.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d05c      	beq.n	800dba2 <HAL_TIM_ConfigClockSource+0x15a>
 800dae8:	2b10      	cmp	r3, #16
 800daea:	d05a      	beq.n	800dba2 <HAL_TIM_ConfigClockSource+0x15a>
 800daec:	e062      	b.n	800dbb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dafe:	f000 f993 	bl	800de28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800db10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	609a      	str	r2, [r3, #8]
      break;
 800db1a:	e04f      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db2c:	f000 f97c 	bl	800de28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	689a      	ldr	r2, [r3, #8]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db3e:	609a      	str	r2, [r3, #8]
      break;
 800db40:	e03c      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db4e:	461a      	mov	r2, r3
 800db50:	f000 f8f0 	bl	800dd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2150      	movs	r1, #80	@ 0x50
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 f949 	bl	800ddf2 <TIM_ITRx_SetConfig>
      break;
 800db60:	e02c      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db6e:	461a      	mov	r2, r3
 800db70:	f000 f90f 	bl	800dd92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2160      	movs	r1, #96	@ 0x60
 800db7a:	4618      	mov	r0, r3
 800db7c:	f000 f939 	bl	800ddf2 <TIM_ITRx_SetConfig>
      break;
 800db80:	e01c      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db8e:	461a      	mov	r2, r3
 800db90:	f000 f8d0 	bl	800dd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	2140      	movs	r1, #64	@ 0x40
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 f929 	bl	800ddf2 <TIM_ITRx_SetConfig>
      break;
 800dba0:	e00c      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	4610      	mov	r0, r2
 800dbae:	f000 f920 	bl	800ddf2 <TIM_ITRx_SetConfig>
      break;
 800dbb2:	e003      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	73fb      	strb	r3, [r7, #15]
      break;
 800dbb8:	e000      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800dbba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbde:	bf00      	nop
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b083      	sub	sp, #12
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr

0800dbfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dbfe:	b480      	push	{r7}
 800dc00:	b083      	sub	sp, #12
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc06:	bf00      	nop
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr

0800dc12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc12:	b480      	push	{r7}
 800dc14:	b083      	sub	sp, #12
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc1a:	bf00      	nop
 800dc1c:	370c      	adds	r7, #12
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
	...

0800dc28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a37      	ldr	r2, [pc, #220]	@ (800dd18 <TIM_Base_SetConfig+0xf0>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d00f      	beq.n	800dc60 <TIM_Base_SetConfig+0x38>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc46:	d00b      	beq.n	800dc60 <TIM_Base_SetConfig+0x38>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	4a34      	ldr	r2, [pc, #208]	@ (800dd1c <TIM_Base_SetConfig+0xf4>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d007      	beq.n	800dc60 <TIM_Base_SetConfig+0x38>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4a33      	ldr	r2, [pc, #204]	@ (800dd20 <TIM_Base_SetConfig+0xf8>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d003      	beq.n	800dc60 <TIM_Base_SetConfig+0x38>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4a32      	ldr	r2, [pc, #200]	@ (800dd24 <TIM_Base_SetConfig+0xfc>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d108      	bne.n	800dc72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a28      	ldr	r2, [pc, #160]	@ (800dd18 <TIM_Base_SetConfig+0xf0>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d01b      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc80:	d017      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a25      	ldr	r2, [pc, #148]	@ (800dd1c <TIM_Base_SetConfig+0xf4>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d013      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a24      	ldr	r2, [pc, #144]	@ (800dd20 <TIM_Base_SetConfig+0xf8>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d00f      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a23      	ldr	r2, [pc, #140]	@ (800dd24 <TIM_Base_SetConfig+0xfc>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d00b      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4a22      	ldr	r2, [pc, #136]	@ (800dd28 <TIM_Base_SetConfig+0x100>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d007      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4a21      	ldr	r2, [pc, #132]	@ (800dd2c <TIM_Base_SetConfig+0x104>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d003      	beq.n	800dcb2 <TIM_Base_SetConfig+0x8a>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a20      	ldr	r2, [pc, #128]	@ (800dd30 <TIM_Base_SetConfig+0x108>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d108      	bne.n	800dcc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dcb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	695b      	ldr	r3, [r3, #20]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	689a      	ldr	r2, [r3, #8]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a0c      	ldr	r2, [pc, #48]	@ (800dd18 <TIM_Base_SetConfig+0xf0>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d103      	bne.n	800dcf2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	691a      	ldr	r2, [r3, #16]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f043 0204 	orr.w	r2, r3, #4
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	601a      	str	r2, [r3, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	40010000 	.word	0x40010000
 800dd1c:	40000400 	.word	0x40000400
 800dd20:	40000800 	.word	0x40000800
 800dd24:	40000c00 	.word	0x40000c00
 800dd28:	40014000 	.word	0x40014000
 800dd2c:	40014400 	.word	0x40014400
 800dd30:	40014800 	.word	0x40014800

0800dd34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b087      	sub	sp, #28
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	f023 0201 	bic.w	r2, r3, #1
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	699b      	ldr	r3, [r3, #24]
 800dd56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	011b      	lsls	r3, r3, #4
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f023 030a 	bic.w	r3, r3, #10
 800dd70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	693a      	ldr	r2, [r7, #16]
 800dd7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	697a      	ldr	r2, [r7, #20]
 800dd84:	621a      	str	r2, [r3, #32]
}
 800dd86:	bf00      	nop
 800dd88:	371c      	adds	r7, #28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b087      	sub	sp, #28
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	60f8      	str	r0, [r7, #12]
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	f023 0210 	bic.w	r2, r3, #16
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	699b      	ldr	r3, [r3, #24]
 800ddb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ddbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	031b      	lsls	r3, r3, #12
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ddce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	011b      	lsls	r3, r3, #4
 800ddd4:	697a      	ldr	r2, [r7, #20]
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	621a      	str	r2, [r3, #32]
}
 800dde6:	bf00      	nop
 800dde8:	371c      	adds	r7, #28
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b085      	sub	sp, #20
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
 800ddfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	4313      	orrs	r3, r2
 800de10:	f043 0307 	orr.w	r3, r3, #7
 800de14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	609a      	str	r2, [r3, #8]
}
 800de1c:	bf00      	nop
 800de1e:	3714      	adds	r7, #20
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	021a      	lsls	r2, r3, #8
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	431a      	orrs	r2, r3
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	4313      	orrs	r3, r2
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	4313      	orrs	r3, r2
 800de54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	697a      	ldr	r2, [r7, #20]
 800de5a:	609a      	str	r2, [r3, #8]
}
 800de5c:	bf00      	nop
 800de5e:	371c      	adds	r7, #28
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d101      	bne.n	800de80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de7c:	2302      	movs	r3, #2
 800de7e:	e050      	b.n	800df22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2202      	movs	r2, #2
 800de8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	4313      	orrs	r3, r2
 800deb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	4a1c      	ldr	r2, [pc, #112]	@ (800df30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d018      	beq.n	800def6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800decc:	d013      	beq.n	800def6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4a18      	ldr	r2, [pc, #96]	@ (800df34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d00e      	beq.n	800def6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a16      	ldr	r2, [pc, #88]	@ (800df38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d009      	beq.n	800def6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	4a15      	ldr	r2, [pc, #84]	@ (800df3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d004      	beq.n	800def6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a13      	ldr	r2, [pc, #76]	@ (800df40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d10c      	bne.n	800df10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800defc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	4313      	orrs	r3, r2
 800df06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	40010000 	.word	0x40010000
 800df34:	40000400 	.word	0x40000400
 800df38:	40000800 	.word	0x40000800
 800df3c:	40000c00 	.word	0x40000c00
 800df40:	40014000 	.word	0x40014000

0800df44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df4c:	bf00      	nop
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e042      	b.n	800e004 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7fb f846 	bl	8009024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2224      	movs	r2, #36	@ 0x24
 800df9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68da      	ldr	r2, [r3, #12]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dfae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fe15 	bl	800ebe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	691a      	ldr	r2, [r3, #16]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dfc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	695a      	ldr	r2, [r3, #20]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dfd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68da      	ldr	r2, [r3, #12]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dfe4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2220      	movs	r2, #32
 800dff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2220      	movs	r2, #32
 800dff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2200      	movs	r2, #0
 800e000:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08a      	sub	sp, #40	@ 0x28
 800e010:	af02      	add	r7, sp, #8
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	603b      	str	r3, [r7, #0]
 800e018:	4613      	mov	r3, r2
 800e01a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e01c:	2300      	movs	r3, #0
 800e01e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b20      	cmp	r3, #32
 800e02a:	d175      	bne.n	800e118 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <HAL_UART_Transmit+0x2c>
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e038:	2301      	movs	r3, #1
 800e03a:	e06e      	b.n	800e11a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2200      	movs	r2, #0
 800e040:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2221      	movs	r2, #33	@ 0x21
 800e046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e04a:	f7fb f9e1 	bl	8009410 <HAL_GetTick>
 800e04e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	88fa      	ldrh	r2, [r7, #6]
 800e054:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	88fa      	ldrh	r2, [r7, #6]
 800e05a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e064:	d108      	bne.n	800e078 <HAL_UART_Transmit+0x6c>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d104      	bne.n	800e078 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	61bb      	str	r3, [r7, #24]
 800e076:	e003      	b.n	800e080 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e07c:	2300      	movs	r3, #0
 800e07e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e080:	e02e      	b.n	800e0e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2200      	movs	r2, #0
 800e08a:	2180      	movs	r1, #128	@ 0x80
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f000 fbb3 	bl	800e7f8 <UART_WaitOnFlagUntilTimeout>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d005      	beq.n	800e0a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2220      	movs	r2, #32
 800e09c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	e03a      	b.n	800e11a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d10b      	bne.n	800e0c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	3302      	adds	r3, #2
 800e0be:	61bb      	str	r3, [r7, #24]
 800e0c0:	e007      	b.n	800e0d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	781a      	ldrb	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1cb      	bne.n	800e082 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	2140      	movs	r1, #64	@ 0x40
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f000 fb7f 	bl	800e7f8 <UART_WaitOnFlagUntilTimeout>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d005      	beq.n	800e10c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2220      	movs	r2, #32
 800e104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800e108:	2303      	movs	r3, #3
 800e10a:	e006      	b.n	800e11a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2220      	movs	r2, #32
 800e110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	e000      	b.n	800e11a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800e118:	2302      	movs	r3, #2
  }
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b08a      	sub	sp, #40	@ 0x28
 800e126:	af02      	add	r7, sp, #8
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	60b9      	str	r1, [r7, #8]
 800e12c:	603b      	str	r3, [r7, #0]
 800e12e:	4613      	mov	r3, r2
 800e130:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e132:	2300      	movs	r3, #0
 800e134:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b20      	cmp	r3, #32
 800e140:	f040 8081 	bne.w	800e246 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d002      	beq.n	800e150 <HAL_UART_Receive+0x2e>
 800e14a:	88fb      	ldrh	r3, [r7, #6]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e150:	2301      	movs	r3, #1
 800e152:	e079      	b.n	800e248 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2222      	movs	r2, #34	@ 0x22
 800e15e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e168:	f7fb f952 	bl	8009410 <HAL_GetTick>
 800e16c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	88fa      	ldrh	r2, [r7, #6]
 800e172:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	88fa      	ldrh	r2, [r7, #6]
 800e178:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e182:	d108      	bne.n	800e196 <HAL_UART_Receive+0x74>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d104      	bne.n	800e196 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	61bb      	str	r3, [r7, #24]
 800e194:	e003      	b.n	800e19e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e19e:	e047      	b.n	800e230 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	9300      	str	r3, [sp, #0]
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2120      	movs	r1, #32
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f000 fb24 	bl	800e7f8 <UART_WaitOnFlagUntilTimeout>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d005      	beq.n	800e1c2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	e042      	b.n	800e248 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10c      	bne.n	800e1e2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	3302      	adds	r3, #2
 800e1de:	61bb      	str	r3, [r7, #24]
 800e1e0:	e01f      	b.n	800e222 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e1ea:	d007      	beq.n	800e1fc <HAL_UART_Receive+0xda>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d10a      	bne.n	800e20a <HAL_UART_Receive+0xe8>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d106      	bne.n	800e20a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	b2da      	uxtb	r2, r3
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	e008      	b.n	800e21c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e216:	b2da      	uxtb	r2, r3
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	3301      	adds	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e226:	b29b      	uxth	r3, r3
 800e228:	3b01      	subs	r3, #1
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e234:	b29b      	uxth	r3, r3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1b2      	bne.n	800e1a0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2220      	movs	r2, #32
 800e23e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	e000      	b.n	800e248 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800e246:	2302      	movs	r3, #2
  }
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b0ba      	sub	sp, #232	@ 0xe8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800e276:	2300      	movs	r3, #0
 800e278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800e27c:	2300      	movs	r3, #0
 800e27e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e286:	f003 030f 	and.w	r3, r3, #15
 800e28a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e28e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10f      	bne.n	800e2b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e29a:	f003 0320 	and.w	r3, r3, #32
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d009      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x66>
 800e2a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2a6:	f003 0320 	and.w	r3, r3, #32
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d003      	beq.n	800e2b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fbd7 	bl	800ea62 <UART_Receive_IT>
      return;
 800e2b4:	e273      	b.n	800e79e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e2b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f000 80de 	beq.w	800e47c <HAL_UART_IRQHandler+0x22c>
 800e2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e2c4:	f003 0301 	and.w	r3, r3, #1
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d106      	bne.n	800e2da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80d1 	beq.w	800e47c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00b      	beq.n	800e2fe <HAL_UART_IRQHandler+0xae>
 800e2e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d005      	beq.n	800e2fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2f6:	f043 0201 	orr.w	r2, r3, #1
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e302:	f003 0304 	and.w	r3, r3, #4
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00b      	beq.n	800e322 <HAL_UART_IRQHandler+0xd2>
 800e30a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	d005      	beq.n	800e322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e31a:	f043 0202 	orr.w	r2, r3, #2
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e326:	f003 0302 	and.w	r3, r3, #2
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00b      	beq.n	800e346 <HAL_UART_IRQHandler+0xf6>
 800e32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e332:	f003 0301 	and.w	r3, r3, #1
 800e336:	2b00      	cmp	r3, #0
 800e338:	d005      	beq.n	800e346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e33e:	f043 0204 	orr.w	r2, r3, #4
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e34a:	f003 0308 	and.w	r3, r3, #8
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d011      	beq.n	800e376 <HAL_UART_IRQHandler+0x126>
 800e352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e356:	f003 0320 	and.w	r3, r3, #32
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d105      	bne.n	800e36a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e362:	f003 0301 	and.w	r3, r3, #1
 800e366:	2b00      	cmp	r3, #0
 800e368:	d005      	beq.n	800e376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e36e:	f043 0208 	orr.w	r2, r3, #8
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 820a 	beq.w	800e794 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e384:	f003 0320 	and.w	r3, r3, #32
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d008      	beq.n	800e39e <HAL_UART_IRQHandler+0x14e>
 800e38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e390:	f003 0320 	and.w	r3, r3, #32
 800e394:	2b00      	cmp	r3, #0
 800e396:	d002      	beq.n	800e39e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 fb62 	bl	800ea62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	695b      	ldr	r3, [r3, #20]
 800e3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3a8:	2b40      	cmp	r3, #64	@ 0x40
 800e3aa:	bf0c      	ite	eq
 800e3ac:	2301      	moveq	r3, #1
 800e3ae:	2300      	movne	r3, #0
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3ba:	f003 0308 	and.w	r3, r3, #8
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d103      	bne.n	800e3ca <HAL_UART_IRQHandler+0x17a>
 800e3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d04f      	beq.n	800e46a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fa6d 	bl	800e8aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3da:	2b40      	cmp	r3, #64	@ 0x40
 800e3dc:	d141      	bne.n	800e462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3314      	adds	r3, #20
 800e3e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e3ec:	e853 3f00 	ldrex	r3, [r3]
 800e3f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3314      	adds	r3, #20
 800e406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e40a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e40e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d1d9      	bne.n	800e3de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d013      	beq.n	800e45a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e436:	4a8a      	ldr	r2, [pc, #552]	@ (800e660 <HAL_UART_IRQHandler+0x410>)
 800e438:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fb f9b1 	bl	80097a6 <HAL_DMA_Abort_IT>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d016      	beq.n	800e478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e454:	4610      	mov	r0, r2
 800e456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e458:	e00e      	b.n	800e478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f9b6 	bl	800e7cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e460:	e00a      	b.n	800e478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f9b2 	bl	800e7cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e468:	e006      	b.n	800e478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f9ae 	bl	800e7cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e476:	e18d      	b.n	800e794 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e478:	bf00      	nop
    return;
 800e47a:	e18b      	b.n	800e794 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e480:	2b01      	cmp	r3, #1
 800e482:	f040 8167 	bne.w	800e754 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e48a:	f003 0310 	and.w	r3, r3, #16
 800e48e:	2b00      	cmp	r3, #0
 800e490:	f000 8160 	beq.w	800e754 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800e494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e498:	f003 0310 	and.w	r3, r3, #16
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f000 8159 	beq.w	800e754 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	60bb      	str	r3, [r7, #8]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	60bb      	str	r3, [r7, #8]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	60bb      	str	r3, [r7, #8]
 800e4b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c2:	2b40      	cmp	r3, #64	@ 0x40
 800e4c4:	f040 80ce 	bne.w	800e664 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e4d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f000 80a9 	beq.w	800e630 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e4e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	f080 80a2 	bcs.w	800e630 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e4f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4f8:	69db      	ldr	r3, [r3, #28]
 800e4fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4fe:	f000 8088 	beq.w	800e612 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	330c      	adds	r3, #12
 800e508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e510:	e853 3f00 	ldrex	r3, [r3]
 800e514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e51c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	330c      	adds	r3, #12
 800e52a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e52e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e536:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e53a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e53e:	e841 2300 	strex	r3, r2, [r1]
 800e542:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1d9      	bne.n	800e502 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3314      	adds	r3, #20
 800e554:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e558:	e853 3f00 	ldrex	r3, [r3]
 800e55c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e55e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e560:	f023 0301 	bic.w	r3, r3, #1
 800e564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3314      	adds	r3, #20
 800e56e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e572:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e576:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e57a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e57e:	e841 2300 	strex	r3, r2, [r1]
 800e582:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1e1      	bne.n	800e54e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	3314      	adds	r3, #20
 800e590:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e594:	e853 3f00 	ldrex	r3, [r3]
 800e598:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e59a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e59c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e5a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3314      	adds	r3, #20
 800e5aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e5ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e5b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e5b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e5b6:	e841 2300 	strex	r3, r2, [r1]
 800e5ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e5bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1e3      	bne.n	800e58a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2220      	movs	r2, #32
 800e5c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	330c      	adds	r3, #12
 800e5d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5da:	e853 3f00 	ldrex	r3, [r3]
 800e5de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e5e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5e2:	f023 0310 	bic.w	r3, r3, #16
 800e5e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	330c      	adds	r3, #12
 800e5f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e5f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e5f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e5fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e5fc:	e841 2300 	strex	r3, r2, [r1]
 800e600:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1e3      	bne.n	800e5d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fb f85a 	bl	80096c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2202      	movs	r2, #2
 800e616:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e620:	b29b      	uxth	r3, r3
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	b29b      	uxth	r3, r3
 800e626:	4619      	mov	r1, r3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f000 f8d9 	bl	800e7e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e62e:	e0b3      	b.n	800e798 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e638:	429a      	cmp	r2, r3
 800e63a:	f040 80ad 	bne.w	800e798 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e642:	69db      	ldr	r3, [r3, #28]
 800e644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e648:	f040 80a6 	bne.w	800e798 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2202      	movs	r2, #2
 800e650:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 f8c1 	bl	800e7e0 <HAL_UARTEx_RxEventCallback>
      return;
 800e65e:	e09b      	b.n	800e798 <HAL_UART_IRQHandler+0x548>
 800e660:	0800e971 	.word	0x0800e971
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	1ad3      	subs	r3, r2, r3
 800e670:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 808e 	beq.w	800e79c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800e680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e684:	2b00      	cmp	r3, #0
 800e686:	f000 8089 	beq.w	800e79c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	330c      	adds	r3, #12
 800e690:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e694:	e853 3f00 	ldrex	r3, [r3]
 800e698:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e69a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e69c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	330c      	adds	r3, #12
 800e6aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e6ae:	647a      	str	r2, [r7, #68]	@ 0x44
 800e6b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e6b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6b6:	e841 2300 	strex	r3, r2, [r1]
 800e6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e6bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1e3      	bne.n	800e68a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3314      	adds	r3, #20
 800e6c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6cc:	e853 3f00 	ldrex	r3, [r3]
 800e6d0:	623b      	str	r3, [r7, #32]
   return(result);
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	f023 0301 	bic.w	r3, r3, #1
 800e6d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	3314      	adds	r3, #20
 800e6e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e6e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6ee:	e841 2300 	strex	r3, r2, [r1]
 800e6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1e3      	bne.n	800e6c2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	330c      	adds	r3, #12
 800e70e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	60fb      	str	r3, [r7, #12]
   return(result);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f023 0310 	bic.w	r3, r3, #16
 800e71e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	330c      	adds	r3, #12
 800e728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e72c:	61fa      	str	r2, [r7, #28]
 800e72e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e730:	69b9      	ldr	r1, [r7, #24]
 800e732:	69fa      	ldr	r2, [r7, #28]
 800e734:	e841 2300 	strex	r3, r2, [r1]
 800e738:	617b      	str	r3, [r7, #20]
   return(result);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e3      	bne.n	800e708 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2202      	movs	r2, #2
 800e744:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e74a:	4619      	mov	r1, r3
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 f847 	bl	800e7e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e752:	e023      	b.n	800e79c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d009      	beq.n	800e774 <HAL_UART_IRQHandler+0x524>
 800e760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d003      	beq.n	800e774 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f000 f910 	bl	800e992 <UART_Transmit_IT>
    return;
 800e772:	e014      	b.n	800e79e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00e      	beq.n	800e79e <HAL_UART_IRQHandler+0x54e>
 800e780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d008      	beq.n	800e79e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f950 	bl	800ea32 <UART_EndTransmit_IT>
    return;
 800e792:	e004      	b.n	800e79e <HAL_UART_IRQHandler+0x54e>
    return;
 800e794:	bf00      	nop
 800e796:	e002      	b.n	800e79e <HAL_UART_IRQHandler+0x54e>
      return;
 800e798:	bf00      	nop
 800e79a:	e000      	b.n	800e79e <HAL_UART_IRQHandler+0x54e>
      return;
 800e79c:	bf00      	nop
  }
}
 800e79e:	37e8      	adds	r7, #232	@ 0xe8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e7ac:	bf00      	nop
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	603b      	str	r3, [r7, #0]
 800e804:	4613      	mov	r3, r2
 800e806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e808:	e03b      	b.n	800e882 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e810:	d037      	beq.n	800e882 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e812:	f7fa fdfd 	bl	8009410 <HAL_GetTick>
 800e816:	4602      	mov	r2, r0
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	6a3a      	ldr	r2, [r7, #32]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d302      	bcc.n	800e828 <UART_WaitOnFlagUntilTimeout+0x30>
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d101      	bne.n	800e82c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e828:	2303      	movs	r3, #3
 800e82a:	e03a      	b.n	800e8a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	f003 0304 	and.w	r3, r3, #4
 800e836:	2b00      	cmp	r3, #0
 800e838:	d023      	beq.n	800e882 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	2b80      	cmp	r3, #128	@ 0x80
 800e83e:	d020      	beq.n	800e882 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2b40      	cmp	r3, #64	@ 0x40
 800e844:	d01d      	beq.n	800e882 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f003 0308 	and.w	r3, r3, #8
 800e850:	2b08      	cmp	r3, #8
 800e852:	d116      	bne.n	800e882 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e854:	2300      	movs	r3, #0
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	617b      	str	r3, [r7, #20]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 f81d 	bl	800e8aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2208      	movs	r2, #8
 800e874:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e87e:	2301      	movs	r3, #1
 800e880:	e00f      	b.n	800e8a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	4013      	ands	r3, r2
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	bf0c      	ite	eq
 800e892:	2301      	moveq	r3, #1
 800e894:	2300      	movne	r3, #0
 800e896:	b2db      	uxtb	r3, r3
 800e898:	461a      	mov	r2, r3
 800e89a:	79fb      	ldrb	r3, [r7, #7]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d0b4      	beq.n	800e80a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3718      	adds	r7, #24
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b095      	sub	sp, #84	@ 0x54
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	330c      	adds	r3, #12
 800e8b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8bc:	e853 3f00 	ldrex	r3, [r3]
 800e8c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e8c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	330c      	adds	r3, #12
 800e8d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e8d2:	643a      	str	r2, [r7, #64]	@ 0x40
 800e8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e8d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e8da:	e841 2300 	strex	r3, r2, [r1]
 800e8de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1e5      	bne.n	800e8b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	3314      	adds	r3, #20
 800e8ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	e853 3f00 	ldrex	r3, [r3]
 800e8f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	f023 0301 	bic.w	r3, r3, #1
 800e8fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	3314      	adds	r3, #20
 800e904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e908:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e90c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e90e:	e841 2300 	strex	r3, r2, [r1]
 800e912:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1e5      	bne.n	800e8e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d119      	bne.n	800e956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	330c      	adds	r3, #12
 800e928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	e853 3f00 	ldrex	r3, [r3]
 800e930:	60bb      	str	r3, [r7, #8]
   return(result);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	f023 0310 	bic.w	r3, r3, #16
 800e938:	647b      	str	r3, [r7, #68]	@ 0x44
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	330c      	adds	r3, #12
 800e940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e942:	61ba      	str	r2, [r7, #24]
 800e944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e946:	6979      	ldr	r1, [r7, #20]
 800e948:	69ba      	ldr	r2, [r7, #24]
 800e94a:	e841 2300 	strex	r3, r2, [r1]
 800e94e:	613b      	str	r3, [r7, #16]
   return(result);
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1e5      	bne.n	800e922 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2220      	movs	r2, #32
 800e95a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e964:	bf00      	nop
 800e966:	3754      	adds	r7, #84	@ 0x54
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e97c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2200      	movs	r2, #0
 800e982:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7ff ff21 	bl	800e7cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e98a:	bf00      	nop
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e992:	b480      	push	{r7}
 800e994:	b085      	sub	sp, #20
 800e996:	af00      	add	r7, sp, #0
 800e998:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b21      	cmp	r3, #33	@ 0x21
 800e9a4:	d13e      	bne.n	800ea24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9ae:	d114      	bne.n	800e9da <UART_Transmit_IT+0x48>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	691b      	ldr	r3, [r3, #16]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d110      	bne.n	800e9da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6a1b      	ldr	r3, [r3, #32]
 800e9bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e9cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a1b      	ldr	r3, [r3, #32]
 800e9d2:	1c9a      	adds	r2, r3, #2
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	621a      	str	r2, [r3, #32]
 800e9d8:	e008      	b.n	800e9ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a1b      	ldr	r3, [r3, #32]
 800e9de:	1c59      	adds	r1, r3, #1
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	6211      	str	r1, [r2, #32]
 800e9e4:	781a      	ldrb	r2, [r3, #0]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10f      	bne.n	800ea20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68da      	ldr	r2, [r3, #12]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ea0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68da      	ldr	r2, [r3, #12]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	e000      	b.n	800ea26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ea24:	2302      	movs	r3, #2
  }
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	68da      	ldr	r2, [r3, #12]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ea48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2220      	movs	r2, #32
 800ea4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f7ff fea6 	bl	800e7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b08c      	sub	sp, #48	@ 0x30
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b22      	cmp	r3, #34	@ 0x22
 800ea7c:	f040 80aa 	bne.w	800ebd4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	689b      	ldr	r3, [r3, #8]
 800ea84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea88:	d115      	bne.n	800eab6 <UART_Receive_IT+0x54>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	691b      	ldr	r3, [r3, #16]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d111      	bne.n	800eab6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaae:	1c9a      	adds	r2, r3, #2
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	629a      	str	r2, [r3, #40]	@ 0x28
 800eab4:	e024      	b.n	800eb00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eac4:	d007      	beq.n	800ead6 <UART_Receive_IT+0x74>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	689b      	ldr	r3, [r3, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10a      	bne.n	800eae4 <UART_Receive_IT+0x82>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	691b      	ldr	r3, [r3, #16]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d106      	bne.n	800eae4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	e008      	b.n	800eaf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eafa:	1c5a      	adds	r2, r3, #1
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	3b01      	subs	r3, #1
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	687a      	ldr	r2, [r7, #4]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d15d      	bne.n	800ebd0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	68da      	ldr	r2, [r3, #12]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f022 0220 	bic.w	r2, r2, #32
 800eb22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68da      	ldr	r2, [r3, #12]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800eb32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	695a      	ldr	r2, [r3, #20]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f022 0201 	bic.w	r2, r2, #1
 800eb42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2220      	movs	r2, #32
 800eb48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d135      	bne.n	800ebc6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	330c      	adds	r3, #12
 800eb66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	613b      	str	r3, [r7, #16]
   return(result);
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	f023 0310 	bic.w	r3, r3, #16
 800eb76:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	330c      	adds	r3, #12
 800eb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb80:	623a      	str	r2, [r7, #32]
 800eb82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb84:	69f9      	ldr	r1, [r7, #28]
 800eb86:	6a3a      	ldr	r2, [r7, #32]
 800eb88:	e841 2300 	strex	r3, r2, [r1]
 800eb8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1e5      	bne.n	800eb60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f003 0310 	and.w	r3, r3, #16
 800eb9e:	2b10      	cmp	r3, #16
 800eba0:	d10a      	bne.n	800ebb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800eba2:	2300      	movs	r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	60fb      	str	r3, [r7, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	60fb      	str	r3, [r7, #12]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f7ff fe0e 	bl	800e7e0 <HAL_UARTEx_RxEventCallback>
 800ebc4:	e002      	b.n	800ebcc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f7ff fdf6 	bl	800e7b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e002      	b.n	800ebd6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e000      	b.n	800ebd6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ebd4:	2302      	movs	r3, #2
  }
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3730      	adds	r7, #48	@ 0x30
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
	...

0800ebe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebe4:	b0c0      	sub	sp, #256	@ 0x100
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ebec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	691b      	ldr	r3, [r3, #16]
 800ebf4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ebf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebfc:	68d9      	ldr	r1, [r3, #12]
 800ebfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	ea40 0301 	orr.w	r3, r0, r1
 800ec08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ec0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec0e:	689a      	ldr	r2, [r3, #8]
 800ec10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	431a      	orrs	r2, r3
 800ec18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec24:	69db      	ldr	r3, [r3, #28]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ec2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ec38:	f021 010c 	bic.w	r1, r1, #12
 800ec3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ec46:	430b      	orrs	r3, r1
 800ec48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ec4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ec56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec5a:	6999      	ldr	r1, [r3, #24]
 800ec5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	ea40 0301 	orr.w	r3, r0, r1
 800ec66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ec68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	4b8f      	ldr	r3, [pc, #572]	@ (800eeac <UART_SetConfig+0x2cc>)
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d005      	beq.n	800ec80 <UART_SetConfig+0xa0>
 800ec74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	4b8d      	ldr	r3, [pc, #564]	@ (800eeb0 <UART_SetConfig+0x2d0>)
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d104      	bne.n	800ec8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ec80:	f7fe fd2c 	bl	800d6dc <HAL_RCC_GetPCLK2Freq>
 800ec84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ec88:	e003      	b.n	800ec92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ec8a:	f7fe fd13 	bl	800d6b4 <HAL_RCC_GetPCLK1Freq>
 800ec8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec9c:	f040 810c 	bne.w	800eeb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eca4:	2200      	movs	r2, #0
 800eca6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ecaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ecae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	462b      	mov	r3, r5
 800ecb6:	1891      	adds	r1, r2, r2
 800ecb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ecba:	415b      	adcs	r3, r3
 800ecbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	eb12 0801 	adds.w	r8, r2, r1
 800ecc8:	4629      	mov	r1, r5
 800ecca:	eb43 0901 	adc.w	r9, r3, r1
 800ecce:	f04f 0200 	mov.w	r2, #0
 800ecd2:	f04f 0300 	mov.w	r3, #0
 800ecd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ecda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ecde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ece2:	4690      	mov	r8, r2
 800ece4:	4699      	mov	r9, r3
 800ece6:	4623      	mov	r3, r4
 800ece8:	eb18 0303 	adds.w	r3, r8, r3
 800ecec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ecf0:	462b      	mov	r3, r5
 800ecf2:	eb49 0303 	adc.w	r3, r9, r3
 800ecf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ecfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ed06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ed0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ed0e:	460b      	mov	r3, r1
 800ed10:	18db      	adds	r3, r3, r3
 800ed12:	653b      	str	r3, [r7, #80]	@ 0x50
 800ed14:	4613      	mov	r3, r2
 800ed16:	eb42 0303 	adc.w	r3, r2, r3
 800ed1a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ed20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ed24:	f7f1 faac 	bl	8000280 <__aeabi_uldivmod>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4b61      	ldr	r3, [pc, #388]	@ (800eeb4 <UART_SetConfig+0x2d4>)
 800ed2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ed32:	095b      	lsrs	r3, r3, #5
 800ed34:	011c      	lsls	r4, r3, #4
 800ed36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ed40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ed44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ed48:	4642      	mov	r2, r8
 800ed4a:	464b      	mov	r3, r9
 800ed4c:	1891      	adds	r1, r2, r2
 800ed4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ed50:	415b      	adcs	r3, r3
 800ed52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ed58:	4641      	mov	r1, r8
 800ed5a:	eb12 0a01 	adds.w	sl, r2, r1
 800ed5e:	4649      	mov	r1, r9
 800ed60:	eb43 0b01 	adc.w	fp, r3, r1
 800ed64:	f04f 0200 	mov.w	r2, #0
 800ed68:	f04f 0300 	mov.w	r3, #0
 800ed6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ed70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ed74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed78:	4692      	mov	sl, r2
 800ed7a:	469b      	mov	fp, r3
 800ed7c:	4643      	mov	r3, r8
 800ed7e:	eb1a 0303 	adds.w	r3, sl, r3
 800ed82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ed86:	464b      	mov	r3, r9
 800ed88:	eb4b 0303 	adc.w	r3, fp, r3
 800ed8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ed90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ed9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800eda0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800eda4:	460b      	mov	r3, r1
 800eda6:	18db      	adds	r3, r3, r3
 800eda8:	643b      	str	r3, [r7, #64]	@ 0x40
 800edaa:	4613      	mov	r3, r2
 800edac:	eb42 0303 	adc.w	r3, r2, r3
 800edb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800edb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800edb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800edba:	f7f1 fa61 	bl	8000280 <__aeabi_uldivmod>
 800edbe:	4602      	mov	r2, r0
 800edc0:	460b      	mov	r3, r1
 800edc2:	4611      	mov	r1, r2
 800edc4:	4b3b      	ldr	r3, [pc, #236]	@ (800eeb4 <UART_SetConfig+0x2d4>)
 800edc6:	fba3 2301 	umull	r2, r3, r3, r1
 800edca:	095b      	lsrs	r3, r3, #5
 800edcc:	2264      	movs	r2, #100	@ 0x64
 800edce:	fb02 f303 	mul.w	r3, r2, r3
 800edd2:	1acb      	subs	r3, r1, r3
 800edd4:	00db      	lsls	r3, r3, #3
 800edd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800edda:	4b36      	ldr	r3, [pc, #216]	@ (800eeb4 <UART_SetConfig+0x2d4>)
 800eddc:	fba3 2302 	umull	r2, r3, r3, r2
 800ede0:	095b      	lsrs	r3, r3, #5
 800ede2:	005b      	lsls	r3, r3, #1
 800ede4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ede8:	441c      	add	r4, r3
 800edea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800edee:	2200      	movs	r2, #0
 800edf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800edf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800edf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800edfc:	4642      	mov	r2, r8
 800edfe:	464b      	mov	r3, r9
 800ee00:	1891      	adds	r1, r2, r2
 800ee02:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ee04:	415b      	adcs	r3, r3
 800ee06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ee0c:	4641      	mov	r1, r8
 800ee0e:	1851      	adds	r1, r2, r1
 800ee10:	6339      	str	r1, [r7, #48]	@ 0x30
 800ee12:	4649      	mov	r1, r9
 800ee14:	414b      	adcs	r3, r1
 800ee16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee18:	f04f 0200 	mov.w	r2, #0
 800ee1c:	f04f 0300 	mov.w	r3, #0
 800ee20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ee24:	4659      	mov	r1, fp
 800ee26:	00cb      	lsls	r3, r1, #3
 800ee28:	4651      	mov	r1, sl
 800ee2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ee2e:	4651      	mov	r1, sl
 800ee30:	00ca      	lsls	r2, r1, #3
 800ee32:	4610      	mov	r0, r2
 800ee34:	4619      	mov	r1, r3
 800ee36:	4603      	mov	r3, r0
 800ee38:	4642      	mov	r2, r8
 800ee3a:	189b      	adds	r3, r3, r2
 800ee3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ee40:	464b      	mov	r3, r9
 800ee42:	460a      	mov	r2, r1
 800ee44:	eb42 0303 	adc.w	r3, r2, r3
 800ee48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ee4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	2200      	movs	r2, #0
 800ee54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ee58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ee5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ee60:	460b      	mov	r3, r1
 800ee62:	18db      	adds	r3, r3, r3
 800ee64:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee66:	4613      	mov	r3, r2
 800ee68:	eb42 0303 	adc.w	r3, r2, r3
 800ee6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ee72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ee76:	f7f1 fa03 	bl	8000280 <__aeabi_uldivmod>
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb4 <UART_SetConfig+0x2d4>)
 800ee80:	fba3 1302 	umull	r1, r3, r3, r2
 800ee84:	095b      	lsrs	r3, r3, #5
 800ee86:	2164      	movs	r1, #100	@ 0x64
 800ee88:	fb01 f303 	mul.w	r3, r1, r3
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	3332      	adds	r3, #50	@ 0x32
 800ee92:	4a08      	ldr	r2, [pc, #32]	@ (800eeb4 <UART_SetConfig+0x2d4>)
 800ee94:	fba2 2303 	umull	r2, r3, r2, r3
 800ee98:	095b      	lsrs	r3, r3, #5
 800ee9a:	f003 0207 	and.w	r2, r3, #7
 800ee9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4422      	add	r2, r4
 800eea6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800eea8:	e106      	b.n	800f0b8 <UART_SetConfig+0x4d8>
 800eeaa:	bf00      	nop
 800eeac:	40011000 	.word	0x40011000
 800eeb0:	40011400 	.word	0x40011400
 800eeb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eeb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800eec2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800eec6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800eeca:	4642      	mov	r2, r8
 800eecc:	464b      	mov	r3, r9
 800eece:	1891      	adds	r1, r2, r2
 800eed0:	6239      	str	r1, [r7, #32]
 800eed2:	415b      	adcs	r3, r3
 800eed4:	627b      	str	r3, [r7, #36]	@ 0x24
 800eed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eeda:	4641      	mov	r1, r8
 800eedc:	1854      	adds	r4, r2, r1
 800eede:	4649      	mov	r1, r9
 800eee0:	eb43 0501 	adc.w	r5, r3, r1
 800eee4:	f04f 0200 	mov.w	r2, #0
 800eee8:	f04f 0300 	mov.w	r3, #0
 800eeec:	00eb      	lsls	r3, r5, #3
 800eeee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800eef2:	00e2      	lsls	r2, r4, #3
 800eef4:	4614      	mov	r4, r2
 800eef6:	461d      	mov	r5, r3
 800eef8:	4643      	mov	r3, r8
 800eefa:	18e3      	adds	r3, r4, r3
 800eefc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ef00:	464b      	mov	r3, r9
 800ef02:	eb45 0303 	adc.w	r3, r5, r3
 800ef06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ef0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ef1a:	f04f 0200 	mov.w	r2, #0
 800ef1e:	f04f 0300 	mov.w	r3, #0
 800ef22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ef26:	4629      	mov	r1, r5
 800ef28:	008b      	lsls	r3, r1, #2
 800ef2a:	4621      	mov	r1, r4
 800ef2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ef30:	4621      	mov	r1, r4
 800ef32:	008a      	lsls	r2, r1, #2
 800ef34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ef38:	f7f1 f9a2 	bl	8000280 <__aeabi_uldivmod>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4b60      	ldr	r3, [pc, #384]	@ (800f0c4 <UART_SetConfig+0x4e4>)
 800ef42:	fba3 2302 	umull	r2, r3, r3, r2
 800ef46:	095b      	lsrs	r3, r3, #5
 800ef48:	011c      	lsls	r4, r3, #4
 800ef4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ef58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ef5c:	4642      	mov	r2, r8
 800ef5e:	464b      	mov	r3, r9
 800ef60:	1891      	adds	r1, r2, r2
 800ef62:	61b9      	str	r1, [r7, #24]
 800ef64:	415b      	adcs	r3, r3
 800ef66:	61fb      	str	r3, [r7, #28]
 800ef68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ef6c:	4641      	mov	r1, r8
 800ef6e:	1851      	adds	r1, r2, r1
 800ef70:	6139      	str	r1, [r7, #16]
 800ef72:	4649      	mov	r1, r9
 800ef74:	414b      	adcs	r3, r1
 800ef76:	617b      	str	r3, [r7, #20]
 800ef78:	f04f 0200 	mov.w	r2, #0
 800ef7c:	f04f 0300 	mov.w	r3, #0
 800ef80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ef84:	4659      	mov	r1, fp
 800ef86:	00cb      	lsls	r3, r1, #3
 800ef88:	4651      	mov	r1, sl
 800ef8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ef8e:	4651      	mov	r1, sl
 800ef90:	00ca      	lsls	r2, r1, #3
 800ef92:	4610      	mov	r0, r2
 800ef94:	4619      	mov	r1, r3
 800ef96:	4603      	mov	r3, r0
 800ef98:	4642      	mov	r2, r8
 800ef9a:	189b      	adds	r3, r3, r2
 800ef9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800efa0:	464b      	mov	r3, r9
 800efa2:	460a      	mov	r2, r1
 800efa4:	eb42 0303 	adc.w	r3, r2, r3
 800efa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800efac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800efb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800efb8:	f04f 0200 	mov.w	r2, #0
 800efbc:	f04f 0300 	mov.w	r3, #0
 800efc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800efc4:	4649      	mov	r1, r9
 800efc6:	008b      	lsls	r3, r1, #2
 800efc8:	4641      	mov	r1, r8
 800efca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800efce:	4641      	mov	r1, r8
 800efd0:	008a      	lsls	r2, r1, #2
 800efd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800efd6:	f7f1 f953 	bl	8000280 <__aeabi_uldivmod>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	4611      	mov	r1, r2
 800efe0:	4b38      	ldr	r3, [pc, #224]	@ (800f0c4 <UART_SetConfig+0x4e4>)
 800efe2:	fba3 2301 	umull	r2, r3, r3, r1
 800efe6:	095b      	lsrs	r3, r3, #5
 800efe8:	2264      	movs	r2, #100	@ 0x64
 800efea:	fb02 f303 	mul.w	r3, r2, r3
 800efee:	1acb      	subs	r3, r1, r3
 800eff0:	011b      	lsls	r3, r3, #4
 800eff2:	3332      	adds	r3, #50	@ 0x32
 800eff4:	4a33      	ldr	r2, [pc, #204]	@ (800f0c4 <UART_SetConfig+0x4e4>)
 800eff6:	fba2 2303 	umull	r2, r3, r2, r3
 800effa:	095b      	lsrs	r3, r3, #5
 800effc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f000:	441c      	add	r4, r3
 800f002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f006:	2200      	movs	r2, #0
 800f008:	673b      	str	r3, [r7, #112]	@ 0x70
 800f00a:	677a      	str	r2, [r7, #116]	@ 0x74
 800f00c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800f010:	4642      	mov	r2, r8
 800f012:	464b      	mov	r3, r9
 800f014:	1891      	adds	r1, r2, r2
 800f016:	60b9      	str	r1, [r7, #8]
 800f018:	415b      	adcs	r3, r3
 800f01a:	60fb      	str	r3, [r7, #12]
 800f01c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f020:	4641      	mov	r1, r8
 800f022:	1851      	adds	r1, r2, r1
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	4649      	mov	r1, r9
 800f028:	414b      	adcs	r3, r1
 800f02a:	607b      	str	r3, [r7, #4]
 800f02c:	f04f 0200 	mov.w	r2, #0
 800f030:	f04f 0300 	mov.w	r3, #0
 800f034:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f038:	4659      	mov	r1, fp
 800f03a:	00cb      	lsls	r3, r1, #3
 800f03c:	4651      	mov	r1, sl
 800f03e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f042:	4651      	mov	r1, sl
 800f044:	00ca      	lsls	r2, r1, #3
 800f046:	4610      	mov	r0, r2
 800f048:	4619      	mov	r1, r3
 800f04a:	4603      	mov	r3, r0
 800f04c:	4642      	mov	r2, r8
 800f04e:	189b      	adds	r3, r3, r2
 800f050:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f052:	464b      	mov	r3, r9
 800f054:	460a      	mov	r2, r1
 800f056:	eb42 0303 	adc.w	r3, r2, r3
 800f05a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	663b      	str	r3, [r7, #96]	@ 0x60
 800f066:	667a      	str	r2, [r7, #100]	@ 0x64
 800f068:	f04f 0200 	mov.w	r2, #0
 800f06c:	f04f 0300 	mov.w	r3, #0
 800f070:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800f074:	4649      	mov	r1, r9
 800f076:	008b      	lsls	r3, r1, #2
 800f078:	4641      	mov	r1, r8
 800f07a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f07e:	4641      	mov	r1, r8
 800f080:	008a      	lsls	r2, r1, #2
 800f082:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f086:	f7f1 f8fb 	bl	8000280 <__aeabi_uldivmod>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0c4 <UART_SetConfig+0x4e4>)
 800f090:	fba3 1302 	umull	r1, r3, r3, r2
 800f094:	095b      	lsrs	r3, r3, #5
 800f096:	2164      	movs	r1, #100	@ 0x64
 800f098:	fb01 f303 	mul.w	r3, r1, r3
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	011b      	lsls	r3, r3, #4
 800f0a0:	3332      	adds	r3, #50	@ 0x32
 800f0a2:	4a08      	ldr	r2, [pc, #32]	@ (800f0c4 <UART_SetConfig+0x4e4>)
 800f0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800f0a8:	095b      	lsrs	r3, r3, #5
 800f0aa:	f003 020f 	and.w	r2, r3, #15
 800f0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4422      	add	r2, r4
 800f0b6:	609a      	str	r2, [r3, #8]
}
 800f0b8:	bf00      	nop
 800f0ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f0c4:	51eb851f 	.word	0x51eb851f

0800f0c8 <calloc>:
 800f0c8:	4b02      	ldr	r3, [pc, #8]	@ (800f0d4 <calloc+0xc>)
 800f0ca:	460a      	mov	r2, r1
 800f0cc:	4601      	mov	r1, r0
 800f0ce:	6818      	ldr	r0, [r3, #0]
 800f0d0:	f000 b802 	b.w	800f0d8 <_calloc_r>
 800f0d4:	2000056c 	.word	0x2000056c

0800f0d8 <_calloc_r>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	fba1 5402 	umull	r5, r4, r1, r2
 800f0de:	b93c      	cbnz	r4, 800f0f0 <_calloc_r+0x18>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	f000 f837 	bl	800f154 <_malloc_r>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	b928      	cbnz	r0, 800f0f6 <_calloc_r+0x1e>
 800f0ea:	2600      	movs	r6, #0
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	bd70      	pop	{r4, r5, r6, pc}
 800f0f0:	220c      	movs	r2, #12
 800f0f2:	6002      	str	r2, [r0, #0]
 800f0f4:	e7f9      	b.n	800f0ea <_calloc_r+0x12>
 800f0f6:	462a      	mov	r2, r5
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	f000 f9f9 	bl	800f4f0 <memset>
 800f0fe:	e7f5      	b.n	800f0ec <_calloc_r+0x14>

0800f100 <free>:
 800f100:	4b02      	ldr	r3, [pc, #8]	@ (800f10c <free+0xc>)
 800f102:	4601      	mov	r1, r0
 800f104:	6818      	ldr	r0, [r3, #0]
 800f106:	f000 ba47 	b.w	800f598 <_free_r>
 800f10a:	bf00      	nop
 800f10c:	2000056c 	.word	0x2000056c

0800f110 <sbrk_aligned>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	4e0f      	ldr	r6, [pc, #60]	@ (800f150 <sbrk_aligned+0x40>)
 800f114:	460c      	mov	r4, r1
 800f116:	6831      	ldr	r1, [r6, #0]
 800f118:	4605      	mov	r5, r0
 800f11a:	b911      	cbnz	r1, 800f122 <sbrk_aligned+0x12>
 800f11c:	f000 f9f0 	bl	800f500 <_sbrk_r>
 800f120:	6030      	str	r0, [r6, #0]
 800f122:	4621      	mov	r1, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f000 f9eb 	bl	800f500 <_sbrk_r>
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	d103      	bne.n	800f136 <sbrk_aligned+0x26>
 800f12e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f132:	4620      	mov	r0, r4
 800f134:	bd70      	pop	{r4, r5, r6, pc}
 800f136:	1cc4      	adds	r4, r0, #3
 800f138:	f024 0403 	bic.w	r4, r4, #3
 800f13c:	42a0      	cmp	r0, r4
 800f13e:	d0f8      	beq.n	800f132 <sbrk_aligned+0x22>
 800f140:	1a21      	subs	r1, r4, r0
 800f142:	4628      	mov	r0, r5
 800f144:	f000 f9dc 	bl	800f500 <_sbrk_r>
 800f148:	3001      	adds	r0, #1
 800f14a:	d1f2      	bne.n	800f132 <sbrk_aligned+0x22>
 800f14c:	e7ef      	b.n	800f12e <sbrk_aligned+0x1e>
 800f14e:	bf00      	nop
 800f150:	2000120c 	.word	0x2000120c

0800f154 <_malloc_r>:
 800f154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f158:	1ccd      	adds	r5, r1, #3
 800f15a:	f025 0503 	bic.w	r5, r5, #3
 800f15e:	3508      	adds	r5, #8
 800f160:	2d0c      	cmp	r5, #12
 800f162:	bf38      	it	cc
 800f164:	250c      	movcc	r5, #12
 800f166:	2d00      	cmp	r5, #0
 800f168:	4606      	mov	r6, r0
 800f16a:	db01      	blt.n	800f170 <_malloc_r+0x1c>
 800f16c:	42a9      	cmp	r1, r5
 800f16e:	d904      	bls.n	800f17a <_malloc_r+0x26>
 800f170:	230c      	movs	r3, #12
 800f172:	6033      	str	r3, [r6, #0]
 800f174:	2000      	movs	r0, #0
 800f176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f17a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f250 <_malloc_r+0xfc>
 800f17e:	f000 f869 	bl	800f254 <__malloc_lock>
 800f182:	f8d8 3000 	ldr.w	r3, [r8]
 800f186:	461c      	mov	r4, r3
 800f188:	bb44      	cbnz	r4, 800f1dc <_malloc_r+0x88>
 800f18a:	4629      	mov	r1, r5
 800f18c:	4630      	mov	r0, r6
 800f18e:	f7ff ffbf 	bl	800f110 <sbrk_aligned>
 800f192:	1c43      	adds	r3, r0, #1
 800f194:	4604      	mov	r4, r0
 800f196:	d158      	bne.n	800f24a <_malloc_r+0xf6>
 800f198:	f8d8 4000 	ldr.w	r4, [r8]
 800f19c:	4627      	mov	r7, r4
 800f19e:	2f00      	cmp	r7, #0
 800f1a0:	d143      	bne.n	800f22a <_malloc_r+0xd6>
 800f1a2:	2c00      	cmp	r4, #0
 800f1a4:	d04b      	beq.n	800f23e <_malloc_r+0xea>
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	eb04 0903 	add.w	r9, r4, r3
 800f1b0:	f000 f9a6 	bl	800f500 <_sbrk_r>
 800f1b4:	4581      	cmp	r9, r0
 800f1b6:	d142      	bne.n	800f23e <_malloc_r+0xea>
 800f1b8:	6821      	ldr	r1, [r4, #0]
 800f1ba:	1a6d      	subs	r5, r5, r1
 800f1bc:	4629      	mov	r1, r5
 800f1be:	4630      	mov	r0, r6
 800f1c0:	f7ff ffa6 	bl	800f110 <sbrk_aligned>
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	d03a      	beq.n	800f23e <_malloc_r+0xea>
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	442b      	add	r3, r5
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d2:	685a      	ldr	r2, [r3, #4]
 800f1d4:	bb62      	cbnz	r2, 800f230 <_malloc_r+0xdc>
 800f1d6:	f8c8 7000 	str.w	r7, [r8]
 800f1da:	e00f      	b.n	800f1fc <_malloc_r+0xa8>
 800f1dc:	6822      	ldr	r2, [r4, #0]
 800f1de:	1b52      	subs	r2, r2, r5
 800f1e0:	d420      	bmi.n	800f224 <_malloc_r+0xd0>
 800f1e2:	2a0b      	cmp	r2, #11
 800f1e4:	d917      	bls.n	800f216 <_malloc_r+0xc2>
 800f1e6:	1961      	adds	r1, r4, r5
 800f1e8:	42a3      	cmp	r3, r4
 800f1ea:	6025      	str	r5, [r4, #0]
 800f1ec:	bf18      	it	ne
 800f1ee:	6059      	strne	r1, [r3, #4]
 800f1f0:	6863      	ldr	r3, [r4, #4]
 800f1f2:	bf08      	it	eq
 800f1f4:	f8c8 1000 	streq.w	r1, [r8]
 800f1f8:	5162      	str	r2, [r4, r5]
 800f1fa:	604b      	str	r3, [r1, #4]
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	f000 f82f 	bl	800f260 <__malloc_unlock>
 800f202:	f104 000b 	add.w	r0, r4, #11
 800f206:	1d23      	adds	r3, r4, #4
 800f208:	f020 0007 	bic.w	r0, r0, #7
 800f20c:	1ac2      	subs	r2, r0, r3
 800f20e:	bf1c      	itt	ne
 800f210:	1a1b      	subne	r3, r3, r0
 800f212:	50a3      	strne	r3, [r4, r2]
 800f214:	e7af      	b.n	800f176 <_malloc_r+0x22>
 800f216:	6862      	ldr	r2, [r4, #4]
 800f218:	42a3      	cmp	r3, r4
 800f21a:	bf0c      	ite	eq
 800f21c:	f8c8 2000 	streq.w	r2, [r8]
 800f220:	605a      	strne	r2, [r3, #4]
 800f222:	e7eb      	b.n	800f1fc <_malloc_r+0xa8>
 800f224:	4623      	mov	r3, r4
 800f226:	6864      	ldr	r4, [r4, #4]
 800f228:	e7ae      	b.n	800f188 <_malloc_r+0x34>
 800f22a:	463c      	mov	r4, r7
 800f22c:	687f      	ldr	r7, [r7, #4]
 800f22e:	e7b6      	b.n	800f19e <_malloc_r+0x4a>
 800f230:	461a      	mov	r2, r3
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	42a3      	cmp	r3, r4
 800f236:	d1fb      	bne.n	800f230 <_malloc_r+0xdc>
 800f238:	2300      	movs	r3, #0
 800f23a:	6053      	str	r3, [r2, #4]
 800f23c:	e7de      	b.n	800f1fc <_malloc_r+0xa8>
 800f23e:	230c      	movs	r3, #12
 800f240:	6033      	str	r3, [r6, #0]
 800f242:	4630      	mov	r0, r6
 800f244:	f000 f80c 	bl	800f260 <__malloc_unlock>
 800f248:	e794      	b.n	800f174 <_malloc_r+0x20>
 800f24a:	6005      	str	r5, [r0, #0]
 800f24c:	e7d6      	b.n	800f1fc <_malloc_r+0xa8>
 800f24e:	bf00      	nop
 800f250:	20001210 	.word	0x20001210

0800f254 <__malloc_lock>:
 800f254:	4801      	ldr	r0, [pc, #4]	@ (800f25c <__malloc_lock+0x8>)
 800f256:	f000 b98e 	b.w	800f576 <__retarget_lock_acquire_recursive>
 800f25a:	bf00      	nop
 800f25c:	20001350 	.word	0x20001350

0800f260 <__malloc_unlock>:
 800f260:	4801      	ldr	r0, [pc, #4]	@ (800f268 <__malloc_unlock+0x8>)
 800f262:	f000 b989 	b.w	800f578 <__retarget_lock_release_recursive>
 800f266:	bf00      	nop
 800f268:	20001350 	.word	0x20001350

0800f26c <std>:
 800f26c:	2300      	movs	r3, #0
 800f26e:	b510      	push	{r4, lr}
 800f270:	4604      	mov	r4, r0
 800f272:	e9c0 3300 	strd	r3, r3, [r0]
 800f276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f27a:	6083      	str	r3, [r0, #8]
 800f27c:	8181      	strh	r1, [r0, #12]
 800f27e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f280:	81c2      	strh	r2, [r0, #14]
 800f282:	6183      	str	r3, [r0, #24]
 800f284:	4619      	mov	r1, r3
 800f286:	2208      	movs	r2, #8
 800f288:	305c      	adds	r0, #92	@ 0x5c
 800f28a:	f000 f931 	bl	800f4f0 <memset>
 800f28e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c4 <std+0x58>)
 800f290:	6263      	str	r3, [r4, #36]	@ 0x24
 800f292:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c8 <std+0x5c>)
 800f294:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f296:	4b0d      	ldr	r3, [pc, #52]	@ (800f2cc <std+0x60>)
 800f298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f29a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d0 <std+0x64>)
 800f29c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f29e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2d4 <std+0x68>)
 800f2a0:	6224      	str	r4, [r4, #32]
 800f2a2:	429c      	cmp	r4, r3
 800f2a4:	d006      	beq.n	800f2b4 <std+0x48>
 800f2a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f2aa:	4294      	cmp	r4, r2
 800f2ac:	d002      	beq.n	800f2b4 <std+0x48>
 800f2ae:	33d0      	adds	r3, #208	@ 0xd0
 800f2b0:	429c      	cmp	r4, r3
 800f2b2:	d105      	bne.n	800f2c0 <std+0x54>
 800f2b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2bc:	f000 b95a 	b.w	800f574 <__retarget_lock_init_recursive>
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	bf00      	nop
 800f2c4:	0800fd25 	.word	0x0800fd25
 800f2c8:	0800fd47 	.word	0x0800fd47
 800f2cc:	0800fd7f 	.word	0x0800fd7f
 800f2d0:	0800fda3 	.word	0x0800fda3
 800f2d4:	20001214 	.word	0x20001214

0800f2d8 <stdio_exit_handler>:
 800f2d8:	4a02      	ldr	r2, [pc, #8]	@ (800f2e4 <stdio_exit_handler+0xc>)
 800f2da:	4903      	ldr	r1, [pc, #12]	@ (800f2e8 <stdio_exit_handler+0x10>)
 800f2dc:	4803      	ldr	r0, [pc, #12]	@ (800f2ec <stdio_exit_handler+0x14>)
 800f2de:	f000 b869 	b.w	800f3b4 <_fwalk_sglue>
 800f2e2:	bf00      	nop
 800f2e4:	20000560 	.word	0x20000560
 800f2e8:	0800fcd5 	.word	0x0800fcd5
 800f2ec:	20000570 	.word	0x20000570

0800f2f0 <cleanup_stdio>:
 800f2f0:	6841      	ldr	r1, [r0, #4]
 800f2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800f324 <cleanup_stdio+0x34>)
 800f2f4:	4299      	cmp	r1, r3
 800f2f6:	b510      	push	{r4, lr}
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	d001      	beq.n	800f300 <cleanup_stdio+0x10>
 800f2fc:	f000 fcea 	bl	800fcd4 <_fflush_r>
 800f300:	68a1      	ldr	r1, [r4, #8]
 800f302:	4b09      	ldr	r3, [pc, #36]	@ (800f328 <cleanup_stdio+0x38>)
 800f304:	4299      	cmp	r1, r3
 800f306:	d002      	beq.n	800f30e <cleanup_stdio+0x1e>
 800f308:	4620      	mov	r0, r4
 800f30a:	f000 fce3 	bl	800fcd4 <_fflush_r>
 800f30e:	68e1      	ldr	r1, [r4, #12]
 800f310:	4b06      	ldr	r3, [pc, #24]	@ (800f32c <cleanup_stdio+0x3c>)
 800f312:	4299      	cmp	r1, r3
 800f314:	d004      	beq.n	800f320 <cleanup_stdio+0x30>
 800f316:	4620      	mov	r0, r4
 800f318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f31c:	f000 bcda 	b.w	800fcd4 <_fflush_r>
 800f320:	bd10      	pop	{r4, pc}
 800f322:	bf00      	nop
 800f324:	20001214 	.word	0x20001214
 800f328:	2000127c 	.word	0x2000127c
 800f32c:	200012e4 	.word	0x200012e4

0800f330 <global_stdio_init.part.0>:
 800f330:	b510      	push	{r4, lr}
 800f332:	4b0b      	ldr	r3, [pc, #44]	@ (800f360 <global_stdio_init.part.0+0x30>)
 800f334:	4c0b      	ldr	r4, [pc, #44]	@ (800f364 <global_stdio_init.part.0+0x34>)
 800f336:	4a0c      	ldr	r2, [pc, #48]	@ (800f368 <global_stdio_init.part.0+0x38>)
 800f338:	601a      	str	r2, [r3, #0]
 800f33a:	4620      	mov	r0, r4
 800f33c:	2200      	movs	r2, #0
 800f33e:	2104      	movs	r1, #4
 800f340:	f7ff ff94 	bl	800f26c <std>
 800f344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f348:	2201      	movs	r2, #1
 800f34a:	2109      	movs	r1, #9
 800f34c:	f7ff ff8e 	bl	800f26c <std>
 800f350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f354:	2202      	movs	r2, #2
 800f356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f35a:	2112      	movs	r1, #18
 800f35c:	f7ff bf86 	b.w	800f26c <std>
 800f360:	2000134c 	.word	0x2000134c
 800f364:	20001214 	.word	0x20001214
 800f368:	0800f2d9 	.word	0x0800f2d9

0800f36c <__sfp_lock_acquire>:
 800f36c:	4801      	ldr	r0, [pc, #4]	@ (800f374 <__sfp_lock_acquire+0x8>)
 800f36e:	f000 b902 	b.w	800f576 <__retarget_lock_acquire_recursive>
 800f372:	bf00      	nop
 800f374:	20001351 	.word	0x20001351

0800f378 <__sfp_lock_release>:
 800f378:	4801      	ldr	r0, [pc, #4]	@ (800f380 <__sfp_lock_release+0x8>)
 800f37a:	f000 b8fd 	b.w	800f578 <__retarget_lock_release_recursive>
 800f37e:	bf00      	nop
 800f380:	20001351 	.word	0x20001351

0800f384 <__sinit>:
 800f384:	b510      	push	{r4, lr}
 800f386:	4604      	mov	r4, r0
 800f388:	f7ff fff0 	bl	800f36c <__sfp_lock_acquire>
 800f38c:	6a23      	ldr	r3, [r4, #32]
 800f38e:	b11b      	cbz	r3, 800f398 <__sinit+0x14>
 800f390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f394:	f7ff bff0 	b.w	800f378 <__sfp_lock_release>
 800f398:	4b04      	ldr	r3, [pc, #16]	@ (800f3ac <__sinit+0x28>)
 800f39a:	6223      	str	r3, [r4, #32]
 800f39c:	4b04      	ldr	r3, [pc, #16]	@ (800f3b0 <__sinit+0x2c>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1f5      	bne.n	800f390 <__sinit+0xc>
 800f3a4:	f7ff ffc4 	bl	800f330 <global_stdio_init.part.0>
 800f3a8:	e7f2      	b.n	800f390 <__sinit+0xc>
 800f3aa:	bf00      	nop
 800f3ac:	0800f2f1 	.word	0x0800f2f1
 800f3b0:	2000134c 	.word	0x2000134c

0800f3b4 <_fwalk_sglue>:
 800f3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b8:	4607      	mov	r7, r0
 800f3ba:	4688      	mov	r8, r1
 800f3bc:	4614      	mov	r4, r2
 800f3be:	2600      	movs	r6, #0
 800f3c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3c4:	f1b9 0901 	subs.w	r9, r9, #1
 800f3c8:	d505      	bpl.n	800f3d6 <_fwalk_sglue+0x22>
 800f3ca:	6824      	ldr	r4, [r4, #0]
 800f3cc:	2c00      	cmp	r4, #0
 800f3ce:	d1f7      	bne.n	800f3c0 <_fwalk_sglue+0xc>
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d6:	89ab      	ldrh	r3, [r5, #12]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d907      	bls.n	800f3ec <_fwalk_sglue+0x38>
 800f3dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	d003      	beq.n	800f3ec <_fwalk_sglue+0x38>
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	47c0      	blx	r8
 800f3ea:	4306      	orrs	r6, r0
 800f3ec:	3568      	adds	r5, #104	@ 0x68
 800f3ee:	e7e9      	b.n	800f3c4 <_fwalk_sglue+0x10>

0800f3f0 <iprintf>:
 800f3f0:	b40f      	push	{r0, r1, r2, r3}
 800f3f2:	b507      	push	{r0, r1, r2, lr}
 800f3f4:	4906      	ldr	r1, [pc, #24]	@ (800f410 <iprintf+0x20>)
 800f3f6:	ab04      	add	r3, sp, #16
 800f3f8:	6808      	ldr	r0, [r1, #0]
 800f3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3fe:	6881      	ldr	r1, [r0, #8]
 800f400:	9301      	str	r3, [sp, #4]
 800f402:	f000 f93d 	bl	800f680 <_vfiprintf_r>
 800f406:	b003      	add	sp, #12
 800f408:	f85d eb04 	ldr.w	lr, [sp], #4
 800f40c:	b004      	add	sp, #16
 800f40e:	4770      	bx	lr
 800f410:	2000056c 	.word	0x2000056c

0800f414 <_puts_r>:
 800f414:	6a03      	ldr	r3, [r0, #32]
 800f416:	b570      	push	{r4, r5, r6, lr}
 800f418:	6884      	ldr	r4, [r0, #8]
 800f41a:	4605      	mov	r5, r0
 800f41c:	460e      	mov	r6, r1
 800f41e:	b90b      	cbnz	r3, 800f424 <_puts_r+0x10>
 800f420:	f7ff ffb0 	bl	800f384 <__sinit>
 800f424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f426:	07db      	lsls	r3, r3, #31
 800f428:	d405      	bmi.n	800f436 <_puts_r+0x22>
 800f42a:	89a3      	ldrh	r3, [r4, #12]
 800f42c:	0598      	lsls	r0, r3, #22
 800f42e:	d402      	bmi.n	800f436 <_puts_r+0x22>
 800f430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f432:	f000 f8a0 	bl	800f576 <__retarget_lock_acquire_recursive>
 800f436:	89a3      	ldrh	r3, [r4, #12]
 800f438:	0719      	lsls	r1, r3, #28
 800f43a:	d502      	bpl.n	800f442 <_puts_r+0x2e>
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d135      	bne.n	800f4ae <_puts_r+0x9a>
 800f442:	4621      	mov	r1, r4
 800f444:	4628      	mov	r0, r5
 800f446:	f000 fcef 	bl	800fe28 <__swsetup_r>
 800f44a:	b380      	cbz	r0, 800f4ae <_puts_r+0x9a>
 800f44c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800f450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f452:	07da      	lsls	r2, r3, #31
 800f454:	d405      	bmi.n	800f462 <_puts_r+0x4e>
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	059b      	lsls	r3, r3, #22
 800f45a:	d402      	bmi.n	800f462 <_puts_r+0x4e>
 800f45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f45e:	f000 f88b 	bl	800f578 <__retarget_lock_release_recursive>
 800f462:	4628      	mov	r0, r5
 800f464:	bd70      	pop	{r4, r5, r6, pc}
 800f466:	2b00      	cmp	r3, #0
 800f468:	da04      	bge.n	800f474 <_puts_r+0x60>
 800f46a:	69a2      	ldr	r2, [r4, #24]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	dc17      	bgt.n	800f4a0 <_puts_r+0x8c>
 800f470:	290a      	cmp	r1, #10
 800f472:	d015      	beq.n	800f4a0 <_puts_r+0x8c>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	6022      	str	r2, [r4, #0]
 800f47a:	7019      	strb	r1, [r3, #0]
 800f47c:	68a3      	ldr	r3, [r4, #8]
 800f47e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f482:	3b01      	subs	r3, #1
 800f484:	60a3      	str	r3, [r4, #8]
 800f486:	2900      	cmp	r1, #0
 800f488:	d1ed      	bne.n	800f466 <_puts_r+0x52>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	da11      	bge.n	800f4b2 <_puts_r+0x9e>
 800f48e:	4622      	mov	r2, r4
 800f490:	210a      	movs	r1, #10
 800f492:	4628      	mov	r0, r5
 800f494:	f000 fc89 	bl	800fdaa <__swbuf_r>
 800f498:	3001      	adds	r0, #1
 800f49a:	d0d7      	beq.n	800f44c <_puts_r+0x38>
 800f49c:	250a      	movs	r5, #10
 800f49e:	e7d7      	b.n	800f450 <_puts_r+0x3c>
 800f4a0:	4622      	mov	r2, r4
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f000 fc81 	bl	800fdaa <__swbuf_r>
 800f4a8:	3001      	adds	r0, #1
 800f4aa:	d1e7      	bne.n	800f47c <_puts_r+0x68>
 800f4ac:	e7ce      	b.n	800f44c <_puts_r+0x38>
 800f4ae:	3e01      	subs	r6, #1
 800f4b0:	e7e4      	b.n	800f47c <_puts_r+0x68>
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	1c5a      	adds	r2, r3, #1
 800f4b6:	6022      	str	r2, [r4, #0]
 800f4b8:	220a      	movs	r2, #10
 800f4ba:	701a      	strb	r2, [r3, #0]
 800f4bc:	e7ee      	b.n	800f49c <_puts_r+0x88>
	...

0800f4c0 <puts>:
 800f4c0:	4b02      	ldr	r3, [pc, #8]	@ (800f4cc <puts+0xc>)
 800f4c2:	4601      	mov	r1, r0
 800f4c4:	6818      	ldr	r0, [r3, #0]
 800f4c6:	f7ff bfa5 	b.w	800f414 <_puts_r>
 800f4ca:	bf00      	nop
 800f4cc:	2000056c 	.word	0x2000056c

0800f4d0 <memcmp>:
 800f4d0:	b510      	push	{r4, lr}
 800f4d2:	3901      	subs	r1, #1
 800f4d4:	4402      	add	r2, r0
 800f4d6:	4290      	cmp	r0, r2
 800f4d8:	d101      	bne.n	800f4de <memcmp+0xe>
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e005      	b.n	800f4ea <memcmp+0x1a>
 800f4de:	7803      	ldrb	r3, [r0, #0]
 800f4e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	d001      	beq.n	800f4ec <memcmp+0x1c>
 800f4e8:	1b18      	subs	r0, r3, r4
 800f4ea:	bd10      	pop	{r4, pc}
 800f4ec:	3001      	adds	r0, #1
 800f4ee:	e7f2      	b.n	800f4d6 <memcmp+0x6>

0800f4f0 <memset>:
 800f4f0:	4402      	add	r2, r0
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d100      	bne.n	800f4fa <memset+0xa>
 800f4f8:	4770      	bx	lr
 800f4fa:	f803 1b01 	strb.w	r1, [r3], #1
 800f4fe:	e7f9      	b.n	800f4f4 <memset+0x4>

0800f500 <_sbrk_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4d06      	ldr	r5, [pc, #24]	@ (800f51c <_sbrk_r+0x1c>)
 800f504:	2300      	movs	r3, #0
 800f506:	4604      	mov	r4, r0
 800f508:	4608      	mov	r0, r1
 800f50a:	602b      	str	r3, [r5, #0]
 800f50c:	f7f9 fea8 	bl	8009260 <_sbrk>
 800f510:	1c43      	adds	r3, r0, #1
 800f512:	d102      	bne.n	800f51a <_sbrk_r+0x1a>
 800f514:	682b      	ldr	r3, [r5, #0]
 800f516:	b103      	cbz	r3, 800f51a <_sbrk_r+0x1a>
 800f518:	6023      	str	r3, [r4, #0]
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
 800f51c:	20001354 	.word	0x20001354

0800f520 <__errno>:
 800f520:	4b01      	ldr	r3, [pc, #4]	@ (800f528 <__errno+0x8>)
 800f522:	6818      	ldr	r0, [r3, #0]
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	2000056c 	.word	0x2000056c

0800f52c <__libc_init_array>:
 800f52c:	b570      	push	{r4, r5, r6, lr}
 800f52e:	4d0d      	ldr	r5, [pc, #52]	@ (800f564 <__libc_init_array+0x38>)
 800f530:	4c0d      	ldr	r4, [pc, #52]	@ (800f568 <__libc_init_array+0x3c>)
 800f532:	1b64      	subs	r4, r4, r5
 800f534:	10a4      	asrs	r4, r4, #2
 800f536:	2600      	movs	r6, #0
 800f538:	42a6      	cmp	r6, r4
 800f53a:	d109      	bne.n	800f550 <__libc_init_array+0x24>
 800f53c:	4d0b      	ldr	r5, [pc, #44]	@ (800f56c <__libc_init_array+0x40>)
 800f53e:	4c0c      	ldr	r4, [pc, #48]	@ (800f570 <__libc_init_array+0x44>)
 800f540:	f000 fd92 	bl	8010068 <_init>
 800f544:	1b64      	subs	r4, r4, r5
 800f546:	10a4      	asrs	r4, r4, #2
 800f548:	2600      	movs	r6, #0
 800f54a:	42a6      	cmp	r6, r4
 800f54c:	d105      	bne.n	800f55a <__libc_init_array+0x2e>
 800f54e:	bd70      	pop	{r4, r5, r6, pc}
 800f550:	f855 3b04 	ldr.w	r3, [r5], #4
 800f554:	4798      	blx	r3
 800f556:	3601      	adds	r6, #1
 800f558:	e7ee      	b.n	800f538 <__libc_init_array+0xc>
 800f55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f55e:	4798      	blx	r3
 800f560:	3601      	adds	r6, #1
 800f562:	e7f2      	b.n	800f54a <__libc_init_array+0x1e>
 800f564:	080106bc 	.word	0x080106bc
 800f568:	080106bc 	.word	0x080106bc
 800f56c:	080106bc 	.word	0x080106bc
 800f570:	080106c0 	.word	0x080106c0

0800f574 <__retarget_lock_init_recursive>:
 800f574:	4770      	bx	lr

0800f576 <__retarget_lock_acquire_recursive>:
 800f576:	4770      	bx	lr

0800f578 <__retarget_lock_release_recursive>:
 800f578:	4770      	bx	lr

0800f57a <memcpy>:
 800f57a:	440a      	add	r2, r1
 800f57c:	4291      	cmp	r1, r2
 800f57e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f582:	d100      	bne.n	800f586 <memcpy+0xc>
 800f584:	4770      	bx	lr
 800f586:	b510      	push	{r4, lr}
 800f588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f58c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f590:	4291      	cmp	r1, r2
 800f592:	d1f9      	bne.n	800f588 <memcpy+0xe>
 800f594:	bd10      	pop	{r4, pc}
	...

0800f598 <_free_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4605      	mov	r5, r0
 800f59c:	2900      	cmp	r1, #0
 800f59e:	d041      	beq.n	800f624 <_free_r+0x8c>
 800f5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a4:	1f0c      	subs	r4, r1, #4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bfb8      	it	lt
 800f5aa:	18e4      	addlt	r4, r4, r3
 800f5ac:	f7ff fe52 	bl	800f254 <__malloc_lock>
 800f5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f628 <_free_r+0x90>)
 800f5b2:	6813      	ldr	r3, [r2, #0]
 800f5b4:	b933      	cbnz	r3, 800f5c4 <_free_r+0x2c>
 800f5b6:	6063      	str	r3, [r4, #4]
 800f5b8:	6014      	str	r4, [r2, #0]
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5c0:	f7ff be4e 	b.w	800f260 <__malloc_unlock>
 800f5c4:	42a3      	cmp	r3, r4
 800f5c6:	d908      	bls.n	800f5da <_free_r+0x42>
 800f5c8:	6820      	ldr	r0, [r4, #0]
 800f5ca:	1821      	adds	r1, r4, r0
 800f5cc:	428b      	cmp	r3, r1
 800f5ce:	bf01      	itttt	eq
 800f5d0:	6819      	ldreq	r1, [r3, #0]
 800f5d2:	685b      	ldreq	r3, [r3, #4]
 800f5d4:	1809      	addeq	r1, r1, r0
 800f5d6:	6021      	streq	r1, [r4, #0]
 800f5d8:	e7ed      	b.n	800f5b6 <_free_r+0x1e>
 800f5da:	461a      	mov	r2, r3
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	b10b      	cbz	r3, 800f5e4 <_free_r+0x4c>
 800f5e0:	42a3      	cmp	r3, r4
 800f5e2:	d9fa      	bls.n	800f5da <_free_r+0x42>
 800f5e4:	6811      	ldr	r1, [r2, #0]
 800f5e6:	1850      	adds	r0, r2, r1
 800f5e8:	42a0      	cmp	r0, r4
 800f5ea:	d10b      	bne.n	800f604 <_free_r+0x6c>
 800f5ec:	6820      	ldr	r0, [r4, #0]
 800f5ee:	4401      	add	r1, r0
 800f5f0:	1850      	adds	r0, r2, r1
 800f5f2:	4283      	cmp	r3, r0
 800f5f4:	6011      	str	r1, [r2, #0]
 800f5f6:	d1e0      	bne.n	800f5ba <_free_r+0x22>
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	6053      	str	r3, [r2, #4]
 800f5fe:	4408      	add	r0, r1
 800f600:	6010      	str	r0, [r2, #0]
 800f602:	e7da      	b.n	800f5ba <_free_r+0x22>
 800f604:	d902      	bls.n	800f60c <_free_r+0x74>
 800f606:	230c      	movs	r3, #12
 800f608:	602b      	str	r3, [r5, #0]
 800f60a:	e7d6      	b.n	800f5ba <_free_r+0x22>
 800f60c:	6820      	ldr	r0, [r4, #0]
 800f60e:	1821      	adds	r1, r4, r0
 800f610:	428b      	cmp	r3, r1
 800f612:	bf04      	itt	eq
 800f614:	6819      	ldreq	r1, [r3, #0]
 800f616:	685b      	ldreq	r3, [r3, #4]
 800f618:	6063      	str	r3, [r4, #4]
 800f61a:	bf04      	itt	eq
 800f61c:	1809      	addeq	r1, r1, r0
 800f61e:	6021      	streq	r1, [r4, #0]
 800f620:	6054      	str	r4, [r2, #4]
 800f622:	e7ca      	b.n	800f5ba <_free_r+0x22>
 800f624:	bd38      	pop	{r3, r4, r5, pc}
 800f626:	bf00      	nop
 800f628:	20001210 	.word	0x20001210

0800f62c <__sfputc_r>:
 800f62c:	6893      	ldr	r3, [r2, #8]
 800f62e:	3b01      	subs	r3, #1
 800f630:	2b00      	cmp	r3, #0
 800f632:	b410      	push	{r4}
 800f634:	6093      	str	r3, [r2, #8]
 800f636:	da08      	bge.n	800f64a <__sfputc_r+0x1e>
 800f638:	6994      	ldr	r4, [r2, #24]
 800f63a:	42a3      	cmp	r3, r4
 800f63c:	db01      	blt.n	800f642 <__sfputc_r+0x16>
 800f63e:	290a      	cmp	r1, #10
 800f640:	d103      	bne.n	800f64a <__sfputc_r+0x1e>
 800f642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f646:	f000 bbb0 	b.w	800fdaa <__swbuf_r>
 800f64a:	6813      	ldr	r3, [r2, #0]
 800f64c:	1c58      	adds	r0, r3, #1
 800f64e:	6010      	str	r0, [r2, #0]
 800f650:	7019      	strb	r1, [r3, #0]
 800f652:	4608      	mov	r0, r1
 800f654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <__sfputs_r>:
 800f65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65c:	4606      	mov	r6, r0
 800f65e:	460f      	mov	r7, r1
 800f660:	4614      	mov	r4, r2
 800f662:	18d5      	adds	r5, r2, r3
 800f664:	42ac      	cmp	r4, r5
 800f666:	d101      	bne.n	800f66c <__sfputs_r+0x12>
 800f668:	2000      	movs	r0, #0
 800f66a:	e007      	b.n	800f67c <__sfputs_r+0x22>
 800f66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f670:	463a      	mov	r2, r7
 800f672:	4630      	mov	r0, r6
 800f674:	f7ff ffda 	bl	800f62c <__sfputc_r>
 800f678:	1c43      	adds	r3, r0, #1
 800f67a:	d1f3      	bne.n	800f664 <__sfputs_r+0xa>
 800f67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f680 <_vfiprintf_r>:
 800f680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f684:	460d      	mov	r5, r1
 800f686:	b09d      	sub	sp, #116	@ 0x74
 800f688:	4614      	mov	r4, r2
 800f68a:	4698      	mov	r8, r3
 800f68c:	4606      	mov	r6, r0
 800f68e:	b118      	cbz	r0, 800f698 <_vfiprintf_r+0x18>
 800f690:	6a03      	ldr	r3, [r0, #32]
 800f692:	b90b      	cbnz	r3, 800f698 <_vfiprintf_r+0x18>
 800f694:	f7ff fe76 	bl	800f384 <__sinit>
 800f698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f69a:	07d9      	lsls	r1, r3, #31
 800f69c:	d405      	bmi.n	800f6aa <_vfiprintf_r+0x2a>
 800f69e:	89ab      	ldrh	r3, [r5, #12]
 800f6a0:	059a      	lsls	r2, r3, #22
 800f6a2:	d402      	bmi.n	800f6aa <_vfiprintf_r+0x2a>
 800f6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6a6:	f7ff ff66 	bl	800f576 <__retarget_lock_acquire_recursive>
 800f6aa:	89ab      	ldrh	r3, [r5, #12]
 800f6ac:	071b      	lsls	r3, r3, #28
 800f6ae:	d501      	bpl.n	800f6b4 <_vfiprintf_r+0x34>
 800f6b0:	692b      	ldr	r3, [r5, #16]
 800f6b2:	b99b      	cbnz	r3, 800f6dc <_vfiprintf_r+0x5c>
 800f6b4:	4629      	mov	r1, r5
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f000 fbb6 	bl	800fe28 <__swsetup_r>
 800f6bc:	b170      	cbz	r0, 800f6dc <_vfiprintf_r+0x5c>
 800f6be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6c0:	07dc      	lsls	r4, r3, #31
 800f6c2:	d504      	bpl.n	800f6ce <_vfiprintf_r+0x4e>
 800f6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6c8:	b01d      	add	sp, #116	@ 0x74
 800f6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ce:	89ab      	ldrh	r3, [r5, #12]
 800f6d0:	0598      	lsls	r0, r3, #22
 800f6d2:	d4f7      	bmi.n	800f6c4 <_vfiprintf_r+0x44>
 800f6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6d6:	f7ff ff4f 	bl	800f578 <__retarget_lock_release_recursive>
 800f6da:	e7f3      	b.n	800f6c4 <_vfiprintf_r+0x44>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6e0:	2320      	movs	r3, #32
 800f6e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6ea:	2330      	movs	r3, #48	@ 0x30
 800f6ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f89c <_vfiprintf_r+0x21c>
 800f6f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f6f4:	f04f 0901 	mov.w	r9, #1
 800f6f8:	4623      	mov	r3, r4
 800f6fa:	469a      	mov	sl, r3
 800f6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f700:	b10a      	cbz	r2, 800f706 <_vfiprintf_r+0x86>
 800f702:	2a25      	cmp	r2, #37	@ 0x25
 800f704:	d1f9      	bne.n	800f6fa <_vfiprintf_r+0x7a>
 800f706:	ebba 0b04 	subs.w	fp, sl, r4
 800f70a:	d00b      	beq.n	800f724 <_vfiprintf_r+0xa4>
 800f70c:	465b      	mov	r3, fp
 800f70e:	4622      	mov	r2, r4
 800f710:	4629      	mov	r1, r5
 800f712:	4630      	mov	r0, r6
 800f714:	f7ff ffa1 	bl	800f65a <__sfputs_r>
 800f718:	3001      	adds	r0, #1
 800f71a:	f000 80a7 	beq.w	800f86c <_vfiprintf_r+0x1ec>
 800f71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f720:	445a      	add	r2, fp
 800f722:	9209      	str	r2, [sp, #36]	@ 0x24
 800f724:	f89a 3000 	ldrb.w	r3, [sl]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f000 809f 	beq.w	800f86c <_vfiprintf_r+0x1ec>
 800f72e:	2300      	movs	r3, #0
 800f730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f738:	f10a 0a01 	add.w	sl, sl, #1
 800f73c:	9304      	str	r3, [sp, #16]
 800f73e:	9307      	str	r3, [sp, #28]
 800f740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f744:	931a      	str	r3, [sp, #104]	@ 0x68
 800f746:	4654      	mov	r4, sl
 800f748:	2205      	movs	r2, #5
 800f74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f74e:	4853      	ldr	r0, [pc, #332]	@ (800f89c <_vfiprintf_r+0x21c>)
 800f750:	f7f0 fd46 	bl	80001e0 <memchr>
 800f754:	9a04      	ldr	r2, [sp, #16]
 800f756:	b9d8      	cbnz	r0, 800f790 <_vfiprintf_r+0x110>
 800f758:	06d1      	lsls	r1, r2, #27
 800f75a:	bf44      	itt	mi
 800f75c:	2320      	movmi	r3, #32
 800f75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f762:	0713      	lsls	r3, r2, #28
 800f764:	bf44      	itt	mi
 800f766:	232b      	movmi	r3, #43	@ 0x2b
 800f768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f76c:	f89a 3000 	ldrb.w	r3, [sl]
 800f770:	2b2a      	cmp	r3, #42	@ 0x2a
 800f772:	d015      	beq.n	800f7a0 <_vfiprintf_r+0x120>
 800f774:	9a07      	ldr	r2, [sp, #28]
 800f776:	4654      	mov	r4, sl
 800f778:	2000      	movs	r0, #0
 800f77a:	f04f 0c0a 	mov.w	ip, #10
 800f77e:	4621      	mov	r1, r4
 800f780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f784:	3b30      	subs	r3, #48	@ 0x30
 800f786:	2b09      	cmp	r3, #9
 800f788:	d94b      	bls.n	800f822 <_vfiprintf_r+0x1a2>
 800f78a:	b1b0      	cbz	r0, 800f7ba <_vfiprintf_r+0x13a>
 800f78c:	9207      	str	r2, [sp, #28]
 800f78e:	e014      	b.n	800f7ba <_vfiprintf_r+0x13a>
 800f790:	eba0 0308 	sub.w	r3, r0, r8
 800f794:	fa09 f303 	lsl.w	r3, r9, r3
 800f798:	4313      	orrs	r3, r2
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	46a2      	mov	sl, r4
 800f79e:	e7d2      	b.n	800f746 <_vfiprintf_r+0xc6>
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	1d19      	adds	r1, r3, #4
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	9103      	str	r1, [sp, #12]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	bfbb      	ittet	lt
 800f7ac:	425b      	neglt	r3, r3
 800f7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f7b2:	9307      	strge	r3, [sp, #28]
 800f7b4:	9307      	strlt	r3, [sp, #28]
 800f7b6:	bfb8      	it	lt
 800f7b8:	9204      	strlt	r2, [sp, #16]
 800f7ba:	7823      	ldrb	r3, [r4, #0]
 800f7bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f7be:	d10a      	bne.n	800f7d6 <_vfiprintf_r+0x156>
 800f7c0:	7863      	ldrb	r3, [r4, #1]
 800f7c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7c4:	d132      	bne.n	800f82c <_vfiprintf_r+0x1ac>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	1d1a      	adds	r2, r3, #4
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	9203      	str	r2, [sp, #12]
 800f7ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f7d2:	3402      	adds	r4, #2
 800f7d4:	9305      	str	r3, [sp, #20]
 800f7d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f8ac <_vfiprintf_r+0x22c>
 800f7da:	7821      	ldrb	r1, [r4, #0]
 800f7dc:	2203      	movs	r2, #3
 800f7de:	4650      	mov	r0, sl
 800f7e0:	f7f0 fcfe 	bl	80001e0 <memchr>
 800f7e4:	b138      	cbz	r0, 800f7f6 <_vfiprintf_r+0x176>
 800f7e6:	9b04      	ldr	r3, [sp, #16]
 800f7e8:	eba0 000a 	sub.w	r0, r0, sl
 800f7ec:	2240      	movs	r2, #64	@ 0x40
 800f7ee:	4082      	lsls	r2, r0
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	3401      	adds	r4, #1
 800f7f4:	9304      	str	r3, [sp, #16]
 800f7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7fa:	4829      	ldr	r0, [pc, #164]	@ (800f8a0 <_vfiprintf_r+0x220>)
 800f7fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f800:	2206      	movs	r2, #6
 800f802:	f7f0 fced 	bl	80001e0 <memchr>
 800f806:	2800      	cmp	r0, #0
 800f808:	d03f      	beq.n	800f88a <_vfiprintf_r+0x20a>
 800f80a:	4b26      	ldr	r3, [pc, #152]	@ (800f8a4 <_vfiprintf_r+0x224>)
 800f80c:	bb1b      	cbnz	r3, 800f856 <_vfiprintf_r+0x1d6>
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	3307      	adds	r3, #7
 800f812:	f023 0307 	bic.w	r3, r3, #7
 800f816:	3308      	adds	r3, #8
 800f818:	9303      	str	r3, [sp, #12]
 800f81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f81c:	443b      	add	r3, r7
 800f81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f820:	e76a      	b.n	800f6f8 <_vfiprintf_r+0x78>
 800f822:	fb0c 3202 	mla	r2, ip, r2, r3
 800f826:	460c      	mov	r4, r1
 800f828:	2001      	movs	r0, #1
 800f82a:	e7a8      	b.n	800f77e <_vfiprintf_r+0xfe>
 800f82c:	2300      	movs	r3, #0
 800f82e:	3401      	adds	r4, #1
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	4619      	mov	r1, r3
 800f834:	f04f 0c0a 	mov.w	ip, #10
 800f838:	4620      	mov	r0, r4
 800f83a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f83e:	3a30      	subs	r2, #48	@ 0x30
 800f840:	2a09      	cmp	r2, #9
 800f842:	d903      	bls.n	800f84c <_vfiprintf_r+0x1cc>
 800f844:	2b00      	cmp	r3, #0
 800f846:	d0c6      	beq.n	800f7d6 <_vfiprintf_r+0x156>
 800f848:	9105      	str	r1, [sp, #20]
 800f84a:	e7c4      	b.n	800f7d6 <_vfiprintf_r+0x156>
 800f84c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f850:	4604      	mov	r4, r0
 800f852:	2301      	movs	r3, #1
 800f854:	e7f0      	b.n	800f838 <_vfiprintf_r+0x1b8>
 800f856:	ab03      	add	r3, sp, #12
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	462a      	mov	r2, r5
 800f85c:	4b12      	ldr	r3, [pc, #72]	@ (800f8a8 <_vfiprintf_r+0x228>)
 800f85e:	a904      	add	r1, sp, #16
 800f860:	4630      	mov	r0, r6
 800f862:	f3af 8000 	nop.w
 800f866:	4607      	mov	r7, r0
 800f868:	1c78      	adds	r0, r7, #1
 800f86a:	d1d6      	bne.n	800f81a <_vfiprintf_r+0x19a>
 800f86c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f86e:	07d9      	lsls	r1, r3, #31
 800f870:	d405      	bmi.n	800f87e <_vfiprintf_r+0x1fe>
 800f872:	89ab      	ldrh	r3, [r5, #12]
 800f874:	059a      	lsls	r2, r3, #22
 800f876:	d402      	bmi.n	800f87e <_vfiprintf_r+0x1fe>
 800f878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f87a:	f7ff fe7d 	bl	800f578 <__retarget_lock_release_recursive>
 800f87e:	89ab      	ldrh	r3, [r5, #12]
 800f880:	065b      	lsls	r3, r3, #25
 800f882:	f53f af1f 	bmi.w	800f6c4 <_vfiprintf_r+0x44>
 800f886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f888:	e71e      	b.n	800f6c8 <_vfiprintf_r+0x48>
 800f88a:	ab03      	add	r3, sp, #12
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	462a      	mov	r2, r5
 800f890:	4b05      	ldr	r3, [pc, #20]	@ (800f8a8 <_vfiprintf_r+0x228>)
 800f892:	a904      	add	r1, sp, #16
 800f894:	4630      	mov	r0, r6
 800f896:	f000 f879 	bl	800f98c <_printf_i>
 800f89a:	e7e4      	b.n	800f866 <_vfiprintf_r+0x1e6>
 800f89c:	08010680 	.word	0x08010680
 800f8a0:	0801068a 	.word	0x0801068a
 800f8a4:	00000000 	.word	0x00000000
 800f8a8:	0800f65b 	.word	0x0800f65b
 800f8ac:	08010686 	.word	0x08010686

0800f8b0 <_printf_common>:
 800f8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	4698      	mov	r8, r3
 800f8b8:	688a      	ldr	r2, [r1, #8]
 800f8ba:	690b      	ldr	r3, [r1, #16]
 800f8bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	bfb8      	it	lt
 800f8c4:	4613      	movlt	r3, r2
 800f8c6:	6033      	str	r3, [r6, #0]
 800f8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f8cc:	4607      	mov	r7, r0
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	b10a      	cbz	r2, 800f8d6 <_printf_common+0x26>
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	6033      	str	r3, [r6, #0]
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	0699      	lsls	r1, r3, #26
 800f8da:	bf42      	ittt	mi
 800f8dc:	6833      	ldrmi	r3, [r6, #0]
 800f8de:	3302      	addmi	r3, #2
 800f8e0:	6033      	strmi	r3, [r6, #0]
 800f8e2:	6825      	ldr	r5, [r4, #0]
 800f8e4:	f015 0506 	ands.w	r5, r5, #6
 800f8e8:	d106      	bne.n	800f8f8 <_printf_common+0x48>
 800f8ea:	f104 0a19 	add.w	sl, r4, #25
 800f8ee:	68e3      	ldr	r3, [r4, #12]
 800f8f0:	6832      	ldr	r2, [r6, #0]
 800f8f2:	1a9b      	subs	r3, r3, r2
 800f8f4:	42ab      	cmp	r3, r5
 800f8f6:	dc26      	bgt.n	800f946 <_printf_common+0x96>
 800f8f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f8fc:	6822      	ldr	r2, [r4, #0]
 800f8fe:	3b00      	subs	r3, #0
 800f900:	bf18      	it	ne
 800f902:	2301      	movne	r3, #1
 800f904:	0692      	lsls	r2, r2, #26
 800f906:	d42b      	bmi.n	800f960 <_printf_common+0xb0>
 800f908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f90c:	4641      	mov	r1, r8
 800f90e:	4638      	mov	r0, r7
 800f910:	47c8      	blx	r9
 800f912:	3001      	adds	r0, #1
 800f914:	d01e      	beq.n	800f954 <_printf_common+0xa4>
 800f916:	6823      	ldr	r3, [r4, #0]
 800f918:	6922      	ldr	r2, [r4, #16]
 800f91a:	f003 0306 	and.w	r3, r3, #6
 800f91e:	2b04      	cmp	r3, #4
 800f920:	bf02      	ittt	eq
 800f922:	68e5      	ldreq	r5, [r4, #12]
 800f924:	6833      	ldreq	r3, [r6, #0]
 800f926:	1aed      	subeq	r5, r5, r3
 800f928:	68a3      	ldr	r3, [r4, #8]
 800f92a:	bf0c      	ite	eq
 800f92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f930:	2500      	movne	r5, #0
 800f932:	4293      	cmp	r3, r2
 800f934:	bfc4      	itt	gt
 800f936:	1a9b      	subgt	r3, r3, r2
 800f938:	18ed      	addgt	r5, r5, r3
 800f93a:	2600      	movs	r6, #0
 800f93c:	341a      	adds	r4, #26
 800f93e:	42b5      	cmp	r5, r6
 800f940:	d11a      	bne.n	800f978 <_printf_common+0xc8>
 800f942:	2000      	movs	r0, #0
 800f944:	e008      	b.n	800f958 <_printf_common+0xa8>
 800f946:	2301      	movs	r3, #1
 800f948:	4652      	mov	r2, sl
 800f94a:	4641      	mov	r1, r8
 800f94c:	4638      	mov	r0, r7
 800f94e:	47c8      	blx	r9
 800f950:	3001      	adds	r0, #1
 800f952:	d103      	bne.n	800f95c <_printf_common+0xac>
 800f954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f95c:	3501      	adds	r5, #1
 800f95e:	e7c6      	b.n	800f8ee <_printf_common+0x3e>
 800f960:	18e1      	adds	r1, r4, r3
 800f962:	1c5a      	adds	r2, r3, #1
 800f964:	2030      	movs	r0, #48	@ 0x30
 800f966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f96a:	4422      	add	r2, r4
 800f96c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f974:	3302      	adds	r3, #2
 800f976:	e7c7      	b.n	800f908 <_printf_common+0x58>
 800f978:	2301      	movs	r3, #1
 800f97a:	4622      	mov	r2, r4
 800f97c:	4641      	mov	r1, r8
 800f97e:	4638      	mov	r0, r7
 800f980:	47c8      	blx	r9
 800f982:	3001      	adds	r0, #1
 800f984:	d0e6      	beq.n	800f954 <_printf_common+0xa4>
 800f986:	3601      	adds	r6, #1
 800f988:	e7d9      	b.n	800f93e <_printf_common+0x8e>
	...

0800f98c <_printf_i>:
 800f98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f990:	7e0f      	ldrb	r7, [r1, #24]
 800f992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f994:	2f78      	cmp	r7, #120	@ 0x78
 800f996:	4691      	mov	r9, r2
 800f998:	4680      	mov	r8, r0
 800f99a:	460c      	mov	r4, r1
 800f99c:	469a      	mov	sl, r3
 800f99e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f9a2:	d807      	bhi.n	800f9b4 <_printf_i+0x28>
 800f9a4:	2f62      	cmp	r7, #98	@ 0x62
 800f9a6:	d80a      	bhi.n	800f9be <_printf_i+0x32>
 800f9a8:	2f00      	cmp	r7, #0
 800f9aa:	f000 80d2 	beq.w	800fb52 <_printf_i+0x1c6>
 800f9ae:	2f58      	cmp	r7, #88	@ 0x58
 800f9b0:	f000 80b9 	beq.w	800fb26 <_printf_i+0x19a>
 800f9b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f9b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f9bc:	e03a      	b.n	800fa34 <_printf_i+0xa8>
 800f9be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f9c2:	2b15      	cmp	r3, #21
 800f9c4:	d8f6      	bhi.n	800f9b4 <_printf_i+0x28>
 800f9c6:	a101      	add	r1, pc, #4	@ (adr r1, 800f9cc <_printf_i+0x40>)
 800f9c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9cc:	0800fa25 	.word	0x0800fa25
 800f9d0:	0800fa39 	.word	0x0800fa39
 800f9d4:	0800f9b5 	.word	0x0800f9b5
 800f9d8:	0800f9b5 	.word	0x0800f9b5
 800f9dc:	0800f9b5 	.word	0x0800f9b5
 800f9e0:	0800f9b5 	.word	0x0800f9b5
 800f9e4:	0800fa39 	.word	0x0800fa39
 800f9e8:	0800f9b5 	.word	0x0800f9b5
 800f9ec:	0800f9b5 	.word	0x0800f9b5
 800f9f0:	0800f9b5 	.word	0x0800f9b5
 800f9f4:	0800f9b5 	.word	0x0800f9b5
 800f9f8:	0800fb39 	.word	0x0800fb39
 800f9fc:	0800fa63 	.word	0x0800fa63
 800fa00:	0800faf3 	.word	0x0800faf3
 800fa04:	0800f9b5 	.word	0x0800f9b5
 800fa08:	0800f9b5 	.word	0x0800f9b5
 800fa0c:	0800fb5b 	.word	0x0800fb5b
 800fa10:	0800f9b5 	.word	0x0800f9b5
 800fa14:	0800fa63 	.word	0x0800fa63
 800fa18:	0800f9b5 	.word	0x0800f9b5
 800fa1c:	0800f9b5 	.word	0x0800f9b5
 800fa20:	0800fafb 	.word	0x0800fafb
 800fa24:	6833      	ldr	r3, [r6, #0]
 800fa26:	1d1a      	adds	r2, r3, #4
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6032      	str	r2, [r6, #0]
 800fa2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fa34:	2301      	movs	r3, #1
 800fa36:	e09d      	b.n	800fb74 <_printf_i+0x1e8>
 800fa38:	6833      	ldr	r3, [r6, #0]
 800fa3a:	6820      	ldr	r0, [r4, #0]
 800fa3c:	1d19      	adds	r1, r3, #4
 800fa3e:	6031      	str	r1, [r6, #0]
 800fa40:	0606      	lsls	r6, r0, #24
 800fa42:	d501      	bpl.n	800fa48 <_printf_i+0xbc>
 800fa44:	681d      	ldr	r5, [r3, #0]
 800fa46:	e003      	b.n	800fa50 <_printf_i+0xc4>
 800fa48:	0645      	lsls	r5, r0, #25
 800fa4a:	d5fb      	bpl.n	800fa44 <_printf_i+0xb8>
 800fa4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fa50:	2d00      	cmp	r5, #0
 800fa52:	da03      	bge.n	800fa5c <_printf_i+0xd0>
 800fa54:	232d      	movs	r3, #45	@ 0x2d
 800fa56:	426d      	negs	r5, r5
 800fa58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa5c:	4859      	ldr	r0, [pc, #356]	@ (800fbc4 <_printf_i+0x238>)
 800fa5e:	230a      	movs	r3, #10
 800fa60:	e011      	b.n	800fa86 <_printf_i+0xfa>
 800fa62:	6821      	ldr	r1, [r4, #0]
 800fa64:	6833      	ldr	r3, [r6, #0]
 800fa66:	0608      	lsls	r0, r1, #24
 800fa68:	f853 5b04 	ldr.w	r5, [r3], #4
 800fa6c:	d402      	bmi.n	800fa74 <_printf_i+0xe8>
 800fa6e:	0649      	lsls	r1, r1, #25
 800fa70:	bf48      	it	mi
 800fa72:	b2ad      	uxthmi	r5, r5
 800fa74:	2f6f      	cmp	r7, #111	@ 0x6f
 800fa76:	4853      	ldr	r0, [pc, #332]	@ (800fbc4 <_printf_i+0x238>)
 800fa78:	6033      	str	r3, [r6, #0]
 800fa7a:	bf14      	ite	ne
 800fa7c:	230a      	movne	r3, #10
 800fa7e:	2308      	moveq	r3, #8
 800fa80:	2100      	movs	r1, #0
 800fa82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fa86:	6866      	ldr	r6, [r4, #4]
 800fa88:	60a6      	str	r6, [r4, #8]
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	bfa2      	ittt	ge
 800fa8e:	6821      	ldrge	r1, [r4, #0]
 800fa90:	f021 0104 	bicge.w	r1, r1, #4
 800fa94:	6021      	strge	r1, [r4, #0]
 800fa96:	b90d      	cbnz	r5, 800fa9c <_printf_i+0x110>
 800fa98:	2e00      	cmp	r6, #0
 800fa9a:	d04b      	beq.n	800fb34 <_printf_i+0x1a8>
 800fa9c:	4616      	mov	r6, r2
 800fa9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800faa2:	fb03 5711 	mls	r7, r3, r1, r5
 800faa6:	5dc7      	ldrb	r7, [r0, r7]
 800faa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800faac:	462f      	mov	r7, r5
 800faae:	42bb      	cmp	r3, r7
 800fab0:	460d      	mov	r5, r1
 800fab2:	d9f4      	bls.n	800fa9e <_printf_i+0x112>
 800fab4:	2b08      	cmp	r3, #8
 800fab6:	d10b      	bne.n	800fad0 <_printf_i+0x144>
 800fab8:	6823      	ldr	r3, [r4, #0]
 800faba:	07df      	lsls	r7, r3, #31
 800fabc:	d508      	bpl.n	800fad0 <_printf_i+0x144>
 800fabe:	6923      	ldr	r3, [r4, #16]
 800fac0:	6861      	ldr	r1, [r4, #4]
 800fac2:	4299      	cmp	r1, r3
 800fac4:	bfde      	ittt	le
 800fac6:	2330      	movle	r3, #48	@ 0x30
 800fac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800facc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fad0:	1b92      	subs	r2, r2, r6
 800fad2:	6122      	str	r2, [r4, #16]
 800fad4:	f8cd a000 	str.w	sl, [sp]
 800fad8:	464b      	mov	r3, r9
 800fada:	aa03      	add	r2, sp, #12
 800fadc:	4621      	mov	r1, r4
 800fade:	4640      	mov	r0, r8
 800fae0:	f7ff fee6 	bl	800f8b0 <_printf_common>
 800fae4:	3001      	adds	r0, #1
 800fae6:	d14a      	bne.n	800fb7e <_printf_i+0x1f2>
 800fae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800faec:	b004      	add	sp, #16
 800faee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	f043 0320 	orr.w	r3, r3, #32
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	4833      	ldr	r0, [pc, #204]	@ (800fbc8 <_printf_i+0x23c>)
 800fafc:	2778      	movs	r7, #120	@ 0x78
 800fafe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	6831      	ldr	r1, [r6, #0]
 800fb06:	061f      	lsls	r7, r3, #24
 800fb08:	f851 5b04 	ldr.w	r5, [r1], #4
 800fb0c:	d402      	bmi.n	800fb14 <_printf_i+0x188>
 800fb0e:	065f      	lsls	r7, r3, #25
 800fb10:	bf48      	it	mi
 800fb12:	b2ad      	uxthmi	r5, r5
 800fb14:	6031      	str	r1, [r6, #0]
 800fb16:	07d9      	lsls	r1, r3, #31
 800fb18:	bf44      	itt	mi
 800fb1a:	f043 0320 	orrmi.w	r3, r3, #32
 800fb1e:	6023      	strmi	r3, [r4, #0]
 800fb20:	b11d      	cbz	r5, 800fb2a <_printf_i+0x19e>
 800fb22:	2310      	movs	r3, #16
 800fb24:	e7ac      	b.n	800fa80 <_printf_i+0xf4>
 800fb26:	4827      	ldr	r0, [pc, #156]	@ (800fbc4 <_printf_i+0x238>)
 800fb28:	e7e9      	b.n	800fafe <_printf_i+0x172>
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	f023 0320 	bic.w	r3, r3, #32
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	e7f6      	b.n	800fb22 <_printf_i+0x196>
 800fb34:	4616      	mov	r6, r2
 800fb36:	e7bd      	b.n	800fab4 <_printf_i+0x128>
 800fb38:	6833      	ldr	r3, [r6, #0]
 800fb3a:	6825      	ldr	r5, [r4, #0]
 800fb3c:	6961      	ldr	r1, [r4, #20]
 800fb3e:	1d18      	adds	r0, r3, #4
 800fb40:	6030      	str	r0, [r6, #0]
 800fb42:	062e      	lsls	r6, r5, #24
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	d501      	bpl.n	800fb4c <_printf_i+0x1c0>
 800fb48:	6019      	str	r1, [r3, #0]
 800fb4a:	e002      	b.n	800fb52 <_printf_i+0x1c6>
 800fb4c:	0668      	lsls	r0, r5, #25
 800fb4e:	d5fb      	bpl.n	800fb48 <_printf_i+0x1bc>
 800fb50:	8019      	strh	r1, [r3, #0]
 800fb52:	2300      	movs	r3, #0
 800fb54:	6123      	str	r3, [r4, #16]
 800fb56:	4616      	mov	r6, r2
 800fb58:	e7bc      	b.n	800fad4 <_printf_i+0x148>
 800fb5a:	6833      	ldr	r3, [r6, #0]
 800fb5c:	1d1a      	adds	r2, r3, #4
 800fb5e:	6032      	str	r2, [r6, #0]
 800fb60:	681e      	ldr	r6, [r3, #0]
 800fb62:	6862      	ldr	r2, [r4, #4]
 800fb64:	2100      	movs	r1, #0
 800fb66:	4630      	mov	r0, r6
 800fb68:	f7f0 fb3a 	bl	80001e0 <memchr>
 800fb6c:	b108      	cbz	r0, 800fb72 <_printf_i+0x1e6>
 800fb6e:	1b80      	subs	r0, r0, r6
 800fb70:	6060      	str	r0, [r4, #4]
 800fb72:	6863      	ldr	r3, [r4, #4]
 800fb74:	6123      	str	r3, [r4, #16]
 800fb76:	2300      	movs	r3, #0
 800fb78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb7c:	e7aa      	b.n	800fad4 <_printf_i+0x148>
 800fb7e:	6923      	ldr	r3, [r4, #16]
 800fb80:	4632      	mov	r2, r6
 800fb82:	4649      	mov	r1, r9
 800fb84:	4640      	mov	r0, r8
 800fb86:	47d0      	blx	sl
 800fb88:	3001      	adds	r0, #1
 800fb8a:	d0ad      	beq.n	800fae8 <_printf_i+0x15c>
 800fb8c:	6823      	ldr	r3, [r4, #0]
 800fb8e:	079b      	lsls	r3, r3, #30
 800fb90:	d413      	bmi.n	800fbba <_printf_i+0x22e>
 800fb92:	68e0      	ldr	r0, [r4, #12]
 800fb94:	9b03      	ldr	r3, [sp, #12]
 800fb96:	4298      	cmp	r0, r3
 800fb98:	bfb8      	it	lt
 800fb9a:	4618      	movlt	r0, r3
 800fb9c:	e7a6      	b.n	800faec <_printf_i+0x160>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	4632      	mov	r2, r6
 800fba2:	4649      	mov	r1, r9
 800fba4:	4640      	mov	r0, r8
 800fba6:	47d0      	blx	sl
 800fba8:	3001      	adds	r0, #1
 800fbaa:	d09d      	beq.n	800fae8 <_printf_i+0x15c>
 800fbac:	3501      	adds	r5, #1
 800fbae:	68e3      	ldr	r3, [r4, #12]
 800fbb0:	9903      	ldr	r1, [sp, #12]
 800fbb2:	1a5b      	subs	r3, r3, r1
 800fbb4:	42ab      	cmp	r3, r5
 800fbb6:	dcf2      	bgt.n	800fb9e <_printf_i+0x212>
 800fbb8:	e7eb      	b.n	800fb92 <_printf_i+0x206>
 800fbba:	2500      	movs	r5, #0
 800fbbc:	f104 0619 	add.w	r6, r4, #25
 800fbc0:	e7f5      	b.n	800fbae <_printf_i+0x222>
 800fbc2:	bf00      	nop
 800fbc4:	08010691 	.word	0x08010691
 800fbc8:	080106a2 	.word	0x080106a2

0800fbcc <__sflush_r>:
 800fbcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd4:	0716      	lsls	r6, r2, #28
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	460c      	mov	r4, r1
 800fbda:	d454      	bmi.n	800fc86 <__sflush_r+0xba>
 800fbdc:	684b      	ldr	r3, [r1, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	dc02      	bgt.n	800fbe8 <__sflush_r+0x1c>
 800fbe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	dd48      	ble.n	800fc7a <__sflush_r+0xae>
 800fbe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fbea:	2e00      	cmp	r6, #0
 800fbec:	d045      	beq.n	800fc7a <__sflush_r+0xae>
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fbf4:	682f      	ldr	r7, [r5, #0]
 800fbf6:	6a21      	ldr	r1, [r4, #32]
 800fbf8:	602b      	str	r3, [r5, #0]
 800fbfa:	d030      	beq.n	800fc5e <__sflush_r+0x92>
 800fbfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	0759      	lsls	r1, r3, #29
 800fc02:	d505      	bpl.n	800fc10 <__sflush_r+0x44>
 800fc04:	6863      	ldr	r3, [r4, #4]
 800fc06:	1ad2      	subs	r2, r2, r3
 800fc08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc0a:	b10b      	cbz	r3, 800fc10 <__sflush_r+0x44>
 800fc0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc0e:	1ad2      	subs	r2, r2, r3
 800fc10:	2300      	movs	r3, #0
 800fc12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc14:	6a21      	ldr	r1, [r4, #32]
 800fc16:	4628      	mov	r0, r5
 800fc18:	47b0      	blx	r6
 800fc1a:	1c43      	adds	r3, r0, #1
 800fc1c:	89a3      	ldrh	r3, [r4, #12]
 800fc1e:	d106      	bne.n	800fc2e <__sflush_r+0x62>
 800fc20:	6829      	ldr	r1, [r5, #0]
 800fc22:	291d      	cmp	r1, #29
 800fc24:	d82b      	bhi.n	800fc7e <__sflush_r+0xb2>
 800fc26:	4a2a      	ldr	r2, [pc, #168]	@ (800fcd0 <__sflush_r+0x104>)
 800fc28:	410a      	asrs	r2, r1
 800fc2a:	07d6      	lsls	r6, r2, #31
 800fc2c:	d427      	bmi.n	800fc7e <__sflush_r+0xb2>
 800fc2e:	2200      	movs	r2, #0
 800fc30:	6062      	str	r2, [r4, #4]
 800fc32:	04d9      	lsls	r1, r3, #19
 800fc34:	6922      	ldr	r2, [r4, #16]
 800fc36:	6022      	str	r2, [r4, #0]
 800fc38:	d504      	bpl.n	800fc44 <__sflush_r+0x78>
 800fc3a:	1c42      	adds	r2, r0, #1
 800fc3c:	d101      	bne.n	800fc42 <__sflush_r+0x76>
 800fc3e:	682b      	ldr	r3, [r5, #0]
 800fc40:	b903      	cbnz	r3, 800fc44 <__sflush_r+0x78>
 800fc42:	6560      	str	r0, [r4, #84]	@ 0x54
 800fc44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc46:	602f      	str	r7, [r5, #0]
 800fc48:	b1b9      	cbz	r1, 800fc7a <__sflush_r+0xae>
 800fc4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc4e:	4299      	cmp	r1, r3
 800fc50:	d002      	beq.n	800fc58 <__sflush_r+0x8c>
 800fc52:	4628      	mov	r0, r5
 800fc54:	f7ff fca0 	bl	800f598 <_free_r>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc5c:	e00d      	b.n	800fc7a <__sflush_r+0xae>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	4628      	mov	r0, r5
 800fc62:	47b0      	blx	r6
 800fc64:	4602      	mov	r2, r0
 800fc66:	1c50      	adds	r0, r2, #1
 800fc68:	d1c9      	bne.n	800fbfe <__sflush_r+0x32>
 800fc6a:	682b      	ldr	r3, [r5, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d0c6      	beq.n	800fbfe <__sflush_r+0x32>
 800fc70:	2b1d      	cmp	r3, #29
 800fc72:	d001      	beq.n	800fc78 <__sflush_r+0xac>
 800fc74:	2b16      	cmp	r3, #22
 800fc76:	d11e      	bne.n	800fcb6 <__sflush_r+0xea>
 800fc78:	602f      	str	r7, [r5, #0]
 800fc7a:	2000      	movs	r0, #0
 800fc7c:	e022      	b.n	800fcc4 <__sflush_r+0xf8>
 800fc7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc82:	b21b      	sxth	r3, r3
 800fc84:	e01b      	b.n	800fcbe <__sflush_r+0xf2>
 800fc86:	690f      	ldr	r7, [r1, #16]
 800fc88:	2f00      	cmp	r7, #0
 800fc8a:	d0f6      	beq.n	800fc7a <__sflush_r+0xae>
 800fc8c:	0793      	lsls	r3, r2, #30
 800fc8e:	680e      	ldr	r6, [r1, #0]
 800fc90:	bf08      	it	eq
 800fc92:	694b      	ldreq	r3, [r1, #20]
 800fc94:	600f      	str	r7, [r1, #0]
 800fc96:	bf18      	it	ne
 800fc98:	2300      	movne	r3, #0
 800fc9a:	eba6 0807 	sub.w	r8, r6, r7
 800fc9e:	608b      	str	r3, [r1, #8]
 800fca0:	f1b8 0f00 	cmp.w	r8, #0
 800fca4:	dde9      	ble.n	800fc7a <__sflush_r+0xae>
 800fca6:	6a21      	ldr	r1, [r4, #32]
 800fca8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fcaa:	4643      	mov	r3, r8
 800fcac:	463a      	mov	r2, r7
 800fcae:	4628      	mov	r0, r5
 800fcb0:	47b0      	blx	r6
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	dc08      	bgt.n	800fcc8 <__sflush_r+0xfc>
 800fcb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcbe:	81a3      	strh	r3, [r4, #12]
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc8:	4407      	add	r7, r0
 800fcca:	eba8 0800 	sub.w	r8, r8, r0
 800fcce:	e7e7      	b.n	800fca0 <__sflush_r+0xd4>
 800fcd0:	dfbffffe 	.word	0xdfbffffe

0800fcd4 <_fflush_r>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	690b      	ldr	r3, [r1, #16]
 800fcd8:	4605      	mov	r5, r0
 800fcda:	460c      	mov	r4, r1
 800fcdc:	b913      	cbnz	r3, 800fce4 <_fflush_r+0x10>
 800fcde:	2500      	movs	r5, #0
 800fce0:	4628      	mov	r0, r5
 800fce2:	bd38      	pop	{r3, r4, r5, pc}
 800fce4:	b118      	cbz	r0, 800fcee <_fflush_r+0x1a>
 800fce6:	6a03      	ldr	r3, [r0, #32]
 800fce8:	b90b      	cbnz	r3, 800fcee <_fflush_r+0x1a>
 800fcea:	f7ff fb4b 	bl	800f384 <__sinit>
 800fcee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d0f3      	beq.n	800fcde <_fflush_r+0xa>
 800fcf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fcf8:	07d0      	lsls	r0, r2, #31
 800fcfa:	d404      	bmi.n	800fd06 <_fflush_r+0x32>
 800fcfc:	0599      	lsls	r1, r3, #22
 800fcfe:	d402      	bmi.n	800fd06 <_fflush_r+0x32>
 800fd00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd02:	f7ff fc38 	bl	800f576 <__retarget_lock_acquire_recursive>
 800fd06:	4628      	mov	r0, r5
 800fd08:	4621      	mov	r1, r4
 800fd0a:	f7ff ff5f 	bl	800fbcc <__sflush_r>
 800fd0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fd10:	07da      	lsls	r2, r3, #31
 800fd12:	4605      	mov	r5, r0
 800fd14:	d4e4      	bmi.n	800fce0 <_fflush_r+0xc>
 800fd16:	89a3      	ldrh	r3, [r4, #12]
 800fd18:	059b      	lsls	r3, r3, #22
 800fd1a:	d4e1      	bmi.n	800fce0 <_fflush_r+0xc>
 800fd1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd1e:	f7ff fc2b 	bl	800f578 <__retarget_lock_release_recursive>
 800fd22:	e7dd      	b.n	800fce0 <_fflush_r+0xc>

0800fd24 <__sread>:
 800fd24:	b510      	push	{r4, lr}
 800fd26:	460c      	mov	r4, r1
 800fd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd2c:	f000 f978 	bl	8010020 <_read_r>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	bfab      	itete	ge
 800fd34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd36:	89a3      	ldrhlt	r3, [r4, #12]
 800fd38:	181b      	addge	r3, r3, r0
 800fd3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd3e:	bfac      	ite	ge
 800fd40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd42:	81a3      	strhlt	r3, [r4, #12]
 800fd44:	bd10      	pop	{r4, pc}

0800fd46 <__swrite>:
 800fd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd4a:	461f      	mov	r7, r3
 800fd4c:	898b      	ldrh	r3, [r1, #12]
 800fd4e:	05db      	lsls	r3, r3, #23
 800fd50:	4605      	mov	r5, r0
 800fd52:	460c      	mov	r4, r1
 800fd54:	4616      	mov	r6, r2
 800fd56:	d505      	bpl.n	800fd64 <__swrite+0x1e>
 800fd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd5c:	2302      	movs	r3, #2
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f000 f94c 	bl	800fffc <_lseek_r>
 800fd64:	89a3      	ldrh	r3, [r4, #12]
 800fd66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fd6e:	81a3      	strh	r3, [r4, #12]
 800fd70:	4632      	mov	r2, r6
 800fd72:	463b      	mov	r3, r7
 800fd74:	4628      	mov	r0, r5
 800fd76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7a:	f000 b963 	b.w	8010044 <_write_r>

0800fd7e <__sseek>:
 800fd7e:	b510      	push	{r4, lr}
 800fd80:	460c      	mov	r4, r1
 800fd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd86:	f000 f939 	bl	800fffc <_lseek_r>
 800fd8a:	1c43      	adds	r3, r0, #1
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	bf15      	itete	ne
 800fd90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fd92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fd96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fd9a:	81a3      	strheq	r3, [r4, #12]
 800fd9c:	bf18      	it	ne
 800fd9e:	81a3      	strhne	r3, [r4, #12]
 800fda0:	bd10      	pop	{r4, pc}

0800fda2 <__sclose>:
 800fda2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda6:	f000 b8f7 	b.w	800ff98 <_close_r>

0800fdaa <__swbuf_r>:
 800fdaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdac:	460e      	mov	r6, r1
 800fdae:	4614      	mov	r4, r2
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	b118      	cbz	r0, 800fdbc <__swbuf_r+0x12>
 800fdb4:	6a03      	ldr	r3, [r0, #32]
 800fdb6:	b90b      	cbnz	r3, 800fdbc <__swbuf_r+0x12>
 800fdb8:	f7ff fae4 	bl	800f384 <__sinit>
 800fdbc:	69a3      	ldr	r3, [r4, #24]
 800fdbe:	60a3      	str	r3, [r4, #8]
 800fdc0:	89a3      	ldrh	r3, [r4, #12]
 800fdc2:	071a      	lsls	r2, r3, #28
 800fdc4:	d501      	bpl.n	800fdca <__swbuf_r+0x20>
 800fdc6:	6923      	ldr	r3, [r4, #16]
 800fdc8:	b943      	cbnz	r3, 800fddc <__swbuf_r+0x32>
 800fdca:	4621      	mov	r1, r4
 800fdcc:	4628      	mov	r0, r5
 800fdce:	f000 f82b 	bl	800fe28 <__swsetup_r>
 800fdd2:	b118      	cbz	r0, 800fddc <__swbuf_r+0x32>
 800fdd4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fdd8:	4638      	mov	r0, r7
 800fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fddc:	6823      	ldr	r3, [r4, #0]
 800fdde:	6922      	ldr	r2, [r4, #16]
 800fde0:	1a98      	subs	r0, r3, r2
 800fde2:	6963      	ldr	r3, [r4, #20]
 800fde4:	b2f6      	uxtb	r6, r6
 800fde6:	4283      	cmp	r3, r0
 800fde8:	4637      	mov	r7, r6
 800fdea:	dc05      	bgt.n	800fdf8 <__swbuf_r+0x4e>
 800fdec:	4621      	mov	r1, r4
 800fdee:	4628      	mov	r0, r5
 800fdf0:	f7ff ff70 	bl	800fcd4 <_fflush_r>
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	d1ed      	bne.n	800fdd4 <__swbuf_r+0x2a>
 800fdf8:	68a3      	ldr	r3, [r4, #8]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	60a3      	str	r3, [r4, #8]
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	1c5a      	adds	r2, r3, #1
 800fe02:	6022      	str	r2, [r4, #0]
 800fe04:	701e      	strb	r6, [r3, #0]
 800fe06:	6962      	ldr	r2, [r4, #20]
 800fe08:	1c43      	adds	r3, r0, #1
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d004      	beq.n	800fe18 <__swbuf_r+0x6e>
 800fe0e:	89a3      	ldrh	r3, [r4, #12]
 800fe10:	07db      	lsls	r3, r3, #31
 800fe12:	d5e1      	bpl.n	800fdd8 <__swbuf_r+0x2e>
 800fe14:	2e0a      	cmp	r6, #10
 800fe16:	d1df      	bne.n	800fdd8 <__swbuf_r+0x2e>
 800fe18:	4621      	mov	r1, r4
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f7ff ff5a 	bl	800fcd4 <_fflush_r>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d0d9      	beq.n	800fdd8 <__swbuf_r+0x2e>
 800fe24:	e7d6      	b.n	800fdd4 <__swbuf_r+0x2a>
	...

0800fe28 <__swsetup_r>:
 800fe28:	b538      	push	{r3, r4, r5, lr}
 800fe2a:	4b29      	ldr	r3, [pc, #164]	@ (800fed0 <__swsetup_r+0xa8>)
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	6818      	ldr	r0, [r3, #0]
 800fe30:	460c      	mov	r4, r1
 800fe32:	b118      	cbz	r0, 800fe3c <__swsetup_r+0x14>
 800fe34:	6a03      	ldr	r3, [r0, #32]
 800fe36:	b90b      	cbnz	r3, 800fe3c <__swsetup_r+0x14>
 800fe38:	f7ff faa4 	bl	800f384 <__sinit>
 800fe3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe40:	0719      	lsls	r1, r3, #28
 800fe42:	d422      	bmi.n	800fe8a <__swsetup_r+0x62>
 800fe44:	06da      	lsls	r2, r3, #27
 800fe46:	d407      	bmi.n	800fe58 <__swsetup_r+0x30>
 800fe48:	2209      	movs	r2, #9
 800fe4a:	602a      	str	r2, [r5, #0]
 800fe4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe50:	81a3      	strh	r3, [r4, #12]
 800fe52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe56:	e033      	b.n	800fec0 <__swsetup_r+0x98>
 800fe58:	0758      	lsls	r0, r3, #29
 800fe5a:	d512      	bpl.n	800fe82 <__swsetup_r+0x5a>
 800fe5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe5e:	b141      	cbz	r1, 800fe72 <__swsetup_r+0x4a>
 800fe60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe64:	4299      	cmp	r1, r3
 800fe66:	d002      	beq.n	800fe6e <__swsetup_r+0x46>
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f7ff fb95 	bl	800f598 <_free_r>
 800fe6e:	2300      	movs	r3, #0
 800fe70:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fe78:	81a3      	strh	r3, [r4, #12]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	6063      	str	r3, [r4, #4]
 800fe7e:	6923      	ldr	r3, [r4, #16]
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	89a3      	ldrh	r3, [r4, #12]
 800fe84:	f043 0308 	orr.w	r3, r3, #8
 800fe88:	81a3      	strh	r3, [r4, #12]
 800fe8a:	6923      	ldr	r3, [r4, #16]
 800fe8c:	b94b      	cbnz	r3, 800fea2 <__swsetup_r+0x7a>
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fe94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe98:	d003      	beq.n	800fea2 <__swsetup_r+0x7a>
 800fe9a:	4621      	mov	r1, r4
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	f000 f83f 	bl	800ff20 <__smakebuf_r>
 800fea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fea6:	f013 0201 	ands.w	r2, r3, #1
 800feaa:	d00a      	beq.n	800fec2 <__swsetup_r+0x9a>
 800feac:	2200      	movs	r2, #0
 800feae:	60a2      	str	r2, [r4, #8]
 800feb0:	6962      	ldr	r2, [r4, #20]
 800feb2:	4252      	negs	r2, r2
 800feb4:	61a2      	str	r2, [r4, #24]
 800feb6:	6922      	ldr	r2, [r4, #16]
 800feb8:	b942      	cbnz	r2, 800fecc <__swsetup_r+0xa4>
 800feba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800febe:	d1c5      	bne.n	800fe4c <__swsetup_r+0x24>
 800fec0:	bd38      	pop	{r3, r4, r5, pc}
 800fec2:	0799      	lsls	r1, r3, #30
 800fec4:	bf58      	it	pl
 800fec6:	6962      	ldrpl	r2, [r4, #20]
 800fec8:	60a2      	str	r2, [r4, #8]
 800feca:	e7f4      	b.n	800feb6 <__swsetup_r+0x8e>
 800fecc:	2000      	movs	r0, #0
 800fece:	e7f7      	b.n	800fec0 <__swsetup_r+0x98>
 800fed0:	2000056c 	.word	0x2000056c

0800fed4 <__swhatbuf_r>:
 800fed4:	b570      	push	{r4, r5, r6, lr}
 800fed6:	460c      	mov	r4, r1
 800fed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fedc:	2900      	cmp	r1, #0
 800fede:	b096      	sub	sp, #88	@ 0x58
 800fee0:	4615      	mov	r5, r2
 800fee2:	461e      	mov	r6, r3
 800fee4:	da0d      	bge.n	800ff02 <__swhatbuf_r+0x2e>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800feec:	f04f 0100 	mov.w	r1, #0
 800fef0:	bf14      	ite	ne
 800fef2:	2340      	movne	r3, #64	@ 0x40
 800fef4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fef8:	2000      	movs	r0, #0
 800fefa:	6031      	str	r1, [r6, #0]
 800fefc:	602b      	str	r3, [r5, #0]
 800fefe:	b016      	add	sp, #88	@ 0x58
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	466a      	mov	r2, sp
 800ff04:	f000 f858 	bl	800ffb8 <_fstat_r>
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	dbec      	blt.n	800fee6 <__swhatbuf_r+0x12>
 800ff0c:	9901      	ldr	r1, [sp, #4]
 800ff0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ff12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ff16:	4259      	negs	r1, r3
 800ff18:	4159      	adcs	r1, r3
 800ff1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff1e:	e7eb      	b.n	800fef8 <__swhatbuf_r+0x24>

0800ff20 <__smakebuf_r>:
 800ff20:	898b      	ldrh	r3, [r1, #12]
 800ff22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff24:	079d      	lsls	r5, r3, #30
 800ff26:	4606      	mov	r6, r0
 800ff28:	460c      	mov	r4, r1
 800ff2a:	d507      	bpl.n	800ff3c <__smakebuf_r+0x1c>
 800ff2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ff30:	6023      	str	r3, [r4, #0]
 800ff32:	6123      	str	r3, [r4, #16]
 800ff34:	2301      	movs	r3, #1
 800ff36:	6163      	str	r3, [r4, #20]
 800ff38:	b003      	add	sp, #12
 800ff3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff3c:	ab01      	add	r3, sp, #4
 800ff3e:	466a      	mov	r2, sp
 800ff40:	f7ff ffc8 	bl	800fed4 <__swhatbuf_r>
 800ff44:	9f00      	ldr	r7, [sp, #0]
 800ff46:	4605      	mov	r5, r0
 800ff48:	4639      	mov	r1, r7
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	f7ff f902 	bl	800f154 <_malloc_r>
 800ff50:	b948      	cbnz	r0, 800ff66 <__smakebuf_r+0x46>
 800ff52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff56:	059a      	lsls	r2, r3, #22
 800ff58:	d4ee      	bmi.n	800ff38 <__smakebuf_r+0x18>
 800ff5a:	f023 0303 	bic.w	r3, r3, #3
 800ff5e:	f043 0302 	orr.w	r3, r3, #2
 800ff62:	81a3      	strh	r3, [r4, #12]
 800ff64:	e7e2      	b.n	800ff2c <__smakebuf_r+0xc>
 800ff66:	89a3      	ldrh	r3, [r4, #12]
 800ff68:	6020      	str	r0, [r4, #0]
 800ff6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff6e:	81a3      	strh	r3, [r4, #12]
 800ff70:	9b01      	ldr	r3, [sp, #4]
 800ff72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ff76:	b15b      	cbz	r3, 800ff90 <__smakebuf_r+0x70>
 800ff78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	f000 f82d 	bl	800ffdc <_isatty_r>
 800ff82:	b128      	cbz	r0, 800ff90 <__smakebuf_r+0x70>
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	f023 0303 	bic.w	r3, r3, #3
 800ff8a:	f043 0301 	orr.w	r3, r3, #1
 800ff8e:	81a3      	strh	r3, [r4, #12]
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	431d      	orrs	r5, r3
 800ff94:	81a5      	strh	r5, [r4, #12]
 800ff96:	e7cf      	b.n	800ff38 <__smakebuf_r+0x18>

0800ff98 <_close_r>:
 800ff98:	b538      	push	{r3, r4, r5, lr}
 800ff9a:	4d06      	ldr	r5, [pc, #24]	@ (800ffb4 <_close_r+0x1c>)
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	4608      	mov	r0, r1
 800ffa2:	602b      	str	r3, [r5, #0]
 800ffa4:	f7f9 f927 	bl	80091f6 <_close>
 800ffa8:	1c43      	adds	r3, r0, #1
 800ffaa:	d102      	bne.n	800ffb2 <_close_r+0x1a>
 800ffac:	682b      	ldr	r3, [r5, #0]
 800ffae:	b103      	cbz	r3, 800ffb2 <_close_r+0x1a>
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	bd38      	pop	{r3, r4, r5, pc}
 800ffb4:	20001354 	.word	0x20001354

0800ffb8 <_fstat_r>:
 800ffb8:	b538      	push	{r3, r4, r5, lr}
 800ffba:	4d07      	ldr	r5, [pc, #28]	@ (800ffd8 <_fstat_r+0x20>)
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4608      	mov	r0, r1
 800ffc2:	4611      	mov	r1, r2
 800ffc4:	602b      	str	r3, [r5, #0]
 800ffc6:	f7f9 f922 	bl	800920e <_fstat>
 800ffca:	1c43      	adds	r3, r0, #1
 800ffcc:	d102      	bne.n	800ffd4 <_fstat_r+0x1c>
 800ffce:	682b      	ldr	r3, [r5, #0]
 800ffd0:	b103      	cbz	r3, 800ffd4 <_fstat_r+0x1c>
 800ffd2:	6023      	str	r3, [r4, #0]
 800ffd4:	bd38      	pop	{r3, r4, r5, pc}
 800ffd6:	bf00      	nop
 800ffd8:	20001354 	.word	0x20001354

0800ffdc <_isatty_r>:
 800ffdc:	b538      	push	{r3, r4, r5, lr}
 800ffde:	4d06      	ldr	r5, [pc, #24]	@ (800fff8 <_isatty_r+0x1c>)
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	4608      	mov	r0, r1
 800ffe6:	602b      	str	r3, [r5, #0]
 800ffe8:	f7f9 f921 	bl	800922e <_isatty>
 800ffec:	1c43      	adds	r3, r0, #1
 800ffee:	d102      	bne.n	800fff6 <_isatty_r+0x1a>
 800fff0:	682b      	ldr	r3, [r5, #0]
 800fff2:	b103      	cbz	r3, 800fff6 <_isatty_r+0x1a>
 800fff4:	6023      	str	r3, [r4, #0]
 800fff6:	bd38      	pop	{r3, r4, r5, pc}
 800fff8:	20001354 	.word	0x20001354

0800fffc <_lseek_r>:
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4d07      	ldr	r5, [pc, #28]	@ (801001c <_lseek_r+0x20>)
 8010000:	4604      	mov	r4, r0
 8010002:	4608      	mov	r0, r1
 8010004:	4611      	mov	r1, r2
 8010006:	2200      	movs	r2, #0
 8010008:	602a      	str	r2, [r5, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	f7f9 f91a 	bl	8009244 <_lseek>
 8010010:	1c43      	adds	r3, r0, #1
 8010012:	d102      	bne.n	801001a <_lseek_r+0x1e>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	b103      	cbz	r3, 801001a <_lseek_r+0x1e>
 8010018:	6023      	str	r3, [r4, #0]
 801001a:	bd38      	pop	{r3, r4, r5, pc}
 801001c:	20001354 	.word	0x20001354

08010020 <_read_r>:
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	4d07      	ldr	r5, [pc, #28]	@ (8010040 <_read_r+0x20>)
 8010024:	4604      	mov	r4, r0
 8010026:	4608      	mov	r0, r1
 8010028:	4611      	mov	r1, r2
 801002a:	2200      	movs	r2, #0
 801002c:	602a      	str	r2, [r5, #0]
 801002e:	461a      	mov	r2, r3
 8010030:	f7f9 f8a8 	bl	8009184 <_read>
 8010034:	1c43      	adds	r3, r0, #1
 8010036:	d102      	bne.n	801003e <_read_r+0x1e>
 8010038:	682b      	ldr	r3, [r5, #0]
 801003a:	b103      	cbz	r3, 801003e <_read_r+0x1e>
 801003c:	6023      	str	r3, [r4, #0]
 801003e:	bd38      	pop	{r3, r4, r5, pc}
 8010040:	20001354 	.word	0x20001354

08010044 <_write_r>:
 8010044:	b538      	push	{r3, r4, r5, lr}
 8010046:	4d07      	ldr	r5, [pc, #28]	@ (8010064 <_write_r+0x20>)
 8010048:	4604      	mov	r4, r0
 801004a:	4608      	mov	r0, r1
 801004c:	4611      	mov	r1, r2
 801004e:	2200      	movs	r2, #0
 8010050:	602a      	str	r2, [r5, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	f7f9 f8b3 	bl	80091be <_write>
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	d102      	bne.n	8010062 <_write_r+0x1e>
 801005c:	682b      	ldr	r3, [r5, #0]
 801005e:	b103      	cbz	r3, 8010062 <_write_r+0x1e>
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	bd38      	pop	{r3, r4, r5, pc}
 8010064:	20001354 	.word	0x20001354

08010068 <_init>:
 8010068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006a:	bf00      	nop
 801006c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801006e:	bc08      	pop	{r3}
 8010070:	469e      	mov	lr, r3
 8010072:	4770      	bx	lr

08010074 <_fini>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	bf00      	nop
 8010078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801007a:	bc08      	pop	{r3}
 801007c:	469e      	mov	lr, r3
 801007e:	4770      	bx	lr
