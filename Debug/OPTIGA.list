
OPTIGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001158  0800fd2c  0800fd2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e84  08010e84  000125bc  2**0
                  CONTENTS
  4 .ARM          00000008  08010e84  08010e84  00011e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e8c  08010e8c  000125bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e8c  08010e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e90  08010e90  00011e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005bc  20000000  08010e94  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000096c  200005bc  08011450  000125bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f28  08011450  00012f28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000125bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b51  00000000  00000000  000125ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004da7  00000000  00000000  0003313d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  00037ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ae  00000000  00000000  000399c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac07  00000000  00000000  0003ae76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245fb  00000000  00000000  00055a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e7ad  00000000  00000000  0007a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118825  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077f8  00000000  00000000  00118868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00120060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005bc 	.word	0x200005bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd14 	.word	0x0800fd14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c0 	.word	0x200005c0
 80001dc:	0800fd14 	.word	0x0800fd14

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000588:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800058c:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000594:	2b03      	cmp	r3, #3
 8000596:	d027      	beq.n	80005e8 <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 24be 	strb.w	r2, [r3, #1214]	@ 0x4be
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d818      	bhi.n	80005e6 <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	22b1      	movs	r2, #177	@ 0xb1
 80005b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
            p_ctx->do_pal_init = TRUE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2201      	movs	r2, #1
 80005c0:	f883 24bf 	strb.w	r2, [r3, #1215]	@ 0x4bf
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb

            api_status = ifx_i2c_init(p_ctx);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f8f5 	bl	80007bc <ifx_i2c_init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d105      	bne.n	80005e8 <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2203      	movs	r2, #3
 80005e0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
 80005e4:	e000      	b.n	80005e8 <ifx_i2c_open+0x68>
                break;
 80005e6:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 80005e8:	89fb      	ldrh	r3, [r7, #14]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b088      	sub	sp, #32
 80005f6:	af02      	add	r7, sp, #8
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4613      	mov	r3, r2
 8000600:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8000602:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000606:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 800060e:	2b02      	cmp	r3, #2
 8000610:	d122      	bne.n	8000658 <ifx_i2c_transceive+0x66>
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000618:	2b03      	cmp	r3, #3
 800061a:	d01d      	beq.n	8000658 <ifx_i2c_transceive+0x66>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	f8c3 227c 	str.w	r2, [r3, #636]	@ 0x27c
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6a3a      	ldr	r2, [r7, #32]
 8000628:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
        if (IFX_I2C_STACK_SUCCESS == api_status)
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
        }
#else
        api_status = ifx_i2c_prl_transceive(p_ctx,
 800062c:	88fa      	ldrh	r2, [r7, #6]
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f001 fb5c 	bl	8001cf4 <ifx_i2c_prl_transceive>
 800063c:	4603      	mov	r3, r0
 800063e:	82fb      	strh	r3, [r7, #22]
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 8000640:	8afb      	ldrh	r3, [r7, #22]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d108      	bne.n	8000658 <ifx_i2c_transceive+0x66>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f8b3 328c 	ldrh.w	r3, [r3, #652]	@ 0x28c
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <ifx_i2c_transceive+0x66>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2203      	movs	r2, #3
 8000654:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        }
    }
    return (api_status);
 8000658:	8afb      	ldrh	r3, [r7, #22]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 800066c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000670:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8000678:	2b03      	cmp	r3, #3
 800067a:	d02a      	beq.n	80006d2 <ifx_i2c_close+0x6e>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 800067c:	2300      	movs	r3, #0
 800067e:	81fb      	strh	r3, [r7, #14]

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        p_ctx->close_state = IFX_I2C_STACK_ERROR;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8000686:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2201      	movs	r2, #1
 800068e:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
        //lint --e{838} suppress "Previous value of api_status is needed for scenario when shielded connection is disabled"
        api_status = ifx_i2c_prl_close(p_ctx, ifx_i2c_prl_close_event_handler);
 8000692:	4912      	ldr	r1, [pc, #72]	@ (80006dc <ifx_i2c_close+0x78>)
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f001 faeb 	bl	8001c70 <ifx_i2c_prl_close>
 800069a:	4603      	mov	r3, r0
 800069c:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_ERROR == api_status)
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80006a4:	d115      	bne.n	80006d2 <ifx_i2c_close+0x6e>
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80006ac:	4618      	mov	r0, r3
 80006ae:	f006 f9ca 	bl	8006a46 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 f965 	bl	8006988 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 f95f 	bl	8006988 <pal_gpio_set_low>
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2204      	movs	r2, #4
 80006ce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
        p_ctx->state = IFX_I2C_STATE_UNINIT;
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
#endif

    }
    return (api_status);
 80006d2:	89fb      	ldrh	r3, [r7, #14]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08000749 	.word	0x08000749

080006e0 <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	461a      	mov	r2, r3
 80006ec:	460b      	mov	r3, r1
 80006ee:	817b      	strh	r3, [r7, #10]
 80006f0:	4613      	mov	r3, r2
 80006f2:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d008      	beq.n	8000710 <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 800070a:	8979      	ldrh	r1, [r7, #10]
 800070c:	4610      	mov	r0, r2
 800070e:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	897a      	ldrh	r2, [r7, #10]
 8000714:	f8a3 228c 	strh.w	r2, [r3, #652]	@ 0x28c
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	2204      	movs	r2, #4
 800071c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 8000726:	2b01      	cmp	r3, #1
 8000728:	d107      	bne.n	800073a <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 800072a:	897b      	ldrh	r3, [r7, #10]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2202      	movs	r2, #2
 8000734:	f883 24bb 	strb.w	r2, [r3, #1211]	@ 0x4bb
            }
            break;
 8000738:	e001      	b.n	800073e <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <ifx_i2c_tl_event_handler+0x60>
            break;
 800073e:	bf00      	nop
    }
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <ifx_i2c_prl_close_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
_STATIC_H void ifx_i2c_prl_close_event_handler(ifx_i2c_context_t * p_ctx,
                                               optiga_lib_status_t event,
                                               const uint8_t * p_data,
                                               uint16_t data_len)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	461a      	mov	r2, r3
 8000754:	460b      	mov	r3, r1
 8000756:	817b      	strh	r3, [r7, #10]
 8000758:	4613      	mov	r3, r2
 800075a:	813b      	strh	r3, [r7, #8]
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	2204      	movs	r2, #4
 8000760:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
    switch (p_ctx->state)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f893 34bb 	ldrb.w	r3, [r3, #1211]	@ 0x4bb
 800076a:	2b01      	cmp	r3, #1
 800076c:	d112      	bne.n	8000794 <ifx_i2c_prl_close_event_handler+0x4c>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            //lint --e{534} suppress "Error handling is not required so return value is not checked"
            pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8000774:	4618      	mov	r0, r3
 8000776:	f006 f966 	bl	8006a46 <pal_i2c_deinit>
            // Also power off the device
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000780:	4618      	mov	r0, r3
 8000782:	f006 f901 	bl	8006988 <pal_gpio_set_low>
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 800078c:	4618      	mov	r0, r3
 800078e:	f006 f8fb 	bl	8006988 <pal_gpio_set_low>
            break;
 8000792:	e000      	b.n	8000796 <ifx_i2c_prl_close_event_handler+0x4e>
        }
        default:
            break;
 8000794:	bf00      	nop
    }
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 800079c:	2b00      	cmp	r3, #0
 800079e:	d008      	beq.n	80007b2 <ifx_i2c_prl_close_event_handler+0x6a>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	f8d2 2278 	ldr.w	r2, [r2, #632]	@ 0x278
 80007ac:	8979      	ldrh	r1, [r7, #10]
 80007ae:	4610      	mov	r0, r2
 80007b0:	4798      	blx	r3
    }
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <ifx_i2c_init>:
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 80007c4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80007c8:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d004      	beq.n	80007de <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d156      	bne.n	800088c <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80007e4:	2bb3      	cmp	r3, #179	@ 0xb3
 80007e6:	d048      	beq.n	800087a <ifx_i2c_init+0xbe>
 80007e8:	2bb3      	cmp	r3, #179	@ 0xb3
 80007ea:	dc4d      	bgt.n	8000888 <ifx_i2c_init+0xcc>
 80007ec:	2bb1      	cmp	r3, #177	@ 0xb1
 80007ee:	d002      	beq.n	80007f6 <ifx_i2c_init+0x3a>
 80007f0:	2bb2      	cmp	r3, #178	@ 0xb2
 80007f2:	d021      	beq.n	8000838 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 80007f4:	e048      	b.n	8000888 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d105      	bne.n	800080c <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000806:	4618      	mov	r0, r3
 8000808:	f006 f8be 	bl	8006988 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000812:	4618      	mov	r0, r3
 8000814:	f006 f8b8 	bl	8006988 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	22b2      	movs	r2, #178	@ 0xb2
 800081c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000826:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4923      	ldr	r1, [pc, #140]	@ (80008bc <ifx_i2c_init+0x100>)
 800082e:	f006 fafd 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000832:	2300      	movs	r3, #0
 8000834:	81fb      	strh	r3, [r7, #14]
                break;
 8000836:	e028      	b.n	800088a <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f893 34be 	ldrb.w	r3, [r3, #1214]	@ 0x4be
 800083e:	2b00      	cmp	r3, #0
 8000840:	d105      	bne.n	800084e <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 8000848:	4618      	mov	r0, r3
 800084a:	f006 f88d 	bl	8006968 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
 8000854:	4618      	mov	r0, r3
 8000856:	f006 f887 	bl	8006968 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	22b3      	movs	r2, #179	@ 0xb3
 800085e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8000868:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4913      	ldr	r1, [pc, #76]	@ (80008bc <ifx_i2c_init+0x100>)
 8000870:	f006 fadc 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 8000874:	2300      	movs	r3, #0
 8000876:	81fb      	strh	r3, [r7, #14]
                break;
 8000878:	e007      	b.n	800088a <ifx_i2c_init+0xce>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800087a:	4911      	ldr	r1, [pc, #68]	@ (80008c0 <ifx_i2c_init+0x104>)
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f001 f9af 	bl	8001be0 <ifx_i2c_prl_init>
 8000882:	4603      	mov	r3, r0
 8000884:	81fb      	strh	r3, [r7, #14]
                break;
 8000886:	e000      	b.n	800088a <ifx_i2c_init+0xce>
                break;
 8000888:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 800088a:	e009      	b.n	80008a0 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2201      	movs	r2, #1
 8000890:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8000894:	490a      	ldr	r1, [pc, #40]	@ (80008c0 <ifx_i2c_init+0x104>)
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f001 f9a2 	bl	8001be0 <ifx_i2c_prl_init>
 800089c:	4603      	mov	r3, r0
 800089e:	81fb      	strh	r3, [r7, #14]
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d005      	beq.n	80008b2 <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 80008a6:	89f9      	ldrh	r1, [r7, #14]
 80008a8:	2300      	movs	r3, #0
 80008aa:	2200      	movs	r2, #0
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff17 	bl	80006e0 <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 80008b2:	89fb      	ldrh	r3, [r7, #14]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	080007bd 	.word	0x080007bd
 80008c0:	080006e1 	.word	0x080006e1

080008c4 <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 80008d6:	4919      	ldr	r1, [pc, #100]	@ (800093c <ifx_i2c_dl_init+0x78>)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 fc93 	bl	8001204 <ifx_i2c_pl_init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 80008e4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80008e8:	e024      	b.n	8000934 <ifx_i2c_dl_init+0x70>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    p_ctx->dl.state = DL_STATE_IDLE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2203      	movs	r2, #3
 80008fe:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2203      	movs	r2, #3
 8000906:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 0;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    p_ctx->dl.error = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f203 228e 	addw	r2, r3, #654	@ 0x28e
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    return IFX_I2C_STACK_SUCCESS;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08000d45 	.word	0x08000d45

08000940 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000952:	2b01      	cmp	r3, #1
 8000954:	d102      	bne.n	800095c <ifx_i2c_dl_send_frame+0x1c>
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 800095c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000960:	e01a      	b.n	8000998 <ifx_i2c_dl_send_frame+0x58>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2202      	movs	r2, #2
 8000966:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 0;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.tx_buffer_size = frame_len;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	887a      	ldrh	r2, [r7, #2]
 800097e:	f8a3 212c 	strh.w	r2, [r3, #300]	@ 0x12c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	220a      	movs	r2, #10
 8000986:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 800098a:	8879      	ldrh	r1, [r7, #2]
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 f88b 	bl	8000aac <ifx_i2c_dl_send_frame_internal>
 8000996:	4603      	mov	r3, r0
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d002      	beq.n	80009b8 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 80009b2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80009b6:	e019      	b.n	80009ec <ifx_i2c_dl_receive_frame+0x4c>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2203      	movs	r2, #3
 80009bc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    p_ctx->dl.retransmit_counter = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    p_ctx->dl.action_rx_only = 1;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2201      	movs	r2, #1
 80009cc:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 80009d0:	f006 fae1 	bl	8006f96 <pal_os_timer_get_time_in_milliseconds>
 80009d4:	4602      	mov	r2, r0
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <ifx_i2c_dl_receive_frame+0x54>)
 80009e0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    return (ifx_i2c_pl_receive_frame(p_ctx));
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 fc86 	bl	80012f6 <ifx_i2c_pl_receive_frame>
 80009ea:	4603      	mov	r3, r0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0002bf20 	.word	0x0002bf20

080009f8 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	460a      	mov	r2, r1
 8000a02:	80fb      	strh	r3, [r7, #6]
 8000a04:	4613      	mov	r3, r2
 8000a06:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 8000a08:	797b      	ldrb	r3, [r7, #5]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	4053      	eors	r3, r2
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	f003 030f 	and.w	r3, r3, #15
 8000a1c:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 8000a1e:	89bb      	ldrh	r3, [r7, #12]
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	89fb      	ldrh	r3, [r7, #14]
 8000a26:	4053      	eors	r3, r2
 8000a28:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8000a2a:	897b      	ldrh	r3, [r7, #10]
 8000a2c:	091b      	lsrs	r3, r3, #4
 8000a2e:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 8000a30:	897b      	ldrh	r3, [r7, #10]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	893b      	ldrh	r3, [r7, #8]
 8000a38:	4053      	eors	r3, r2
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	89bb      	ldrh	r3, [r7, #12]
 8000a42:	4053      	eors	r3, r2
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	893b      	ldrh	r3, [r7, #8]
 8000a4c:	4053      	eors	r3, r2
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4053      	eors	r3, r2
 8000a58:	b29b      	uxth	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	81fb      	strh	r3, [r7, #14]
 8000a7a:	e00d      	b.n	8000a98 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	89bb      	ldrh	r3, [r7, #12]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ffb5 	bl	80009f8 <ifx_i2c_dl_calc_crc_byte>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	3301      	adds	r3, #1
 8000a96:	81fb      	strh	r3, [r7, #14]
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3ed      	bcc.n	8000a7c <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 8000aa0:	89bb      	ldrh	r3, [r7, #12]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4603      	mov	r3, r0
 8000abc:	807b      	strh	r3, [r7, #2]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	707b      	strb	r3, [r7, #1]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000acc:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 8000ace:	787b      	ldrb	r3, [r7, #1]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d107      	bne.n	8000ae4 <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000ada:	3301      	adds	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000aea:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d105      	bne.n	8000afe <ifx_i2c_dl_send_frame_internal+0x52>
    {
        ack_nr = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000afc:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 8000afe:	787b      	ldrb	r3, [r7, #1]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d108      	bne.n	8000b16 <ifx_i2c_dl_send_frame_internal+0x6a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000b0a:	2b09      	cmp	r3, #9
 8000b0c:	d103      	bne.n	8000b16 <ifx_i2c_dl_send_frame_internal+0x6a>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000b14:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 8000b16:	8afb      	ldrh	r3, [r7, #22]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	787b      	ldrb	r3, [r7, #1]
 8000b24:	015b      	lsls	r3, r3, #5
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8000b30:	887b      	ldrh	r3, [r7, #2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d027      	beq.n	8000b86 <ifx_i2c_dl_send_frame_internal+0xda>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8000b36:	783b      	ldrb	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <ifx_i2c_dl_send_frame_internal+0x9a>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00a      	beq.n	8000b5c <ifx_i2c_dl_send_frame_internal+0xb0>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
 8000b7a:	4a31      	ldr	r2, [pc, #196]	@ (8000c40 <ifx_i2c_dl_send_frame_internal+0x194>)
 8000b7c:	4931      	ldr	r1, [pc, #196]	@ (8000c44 <ifx_i2c_dl_send_frame_internal+0x198>)
 8000b7e:	4832      	ldr	r0, [pc, #200]	@ (8000c48 <ifx_i2c_dl_send_frame_internal+0x19c>)
 8000b80:	f005 fbe0 	bl	8006344 <optiga_lib_print_message>
 8000b84:	e006      	b.n	8000b94 <ifx_i2c_dl_send_frame_internal+0xe8>
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8000b94:	887b      	ldrh	r3, [r7, #2]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	3303      	adds	r3, #3
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6938      	ldr	r0, [r7, #16]
 8000bb6:	f7ff ff56 	bl	8000a66 <ifx_i2c_dl_calc_crc>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	3303      	adds	r3, #3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	440b      	add	r3, r1
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4413      	add	r3, r2
 8000bdc:	89fa      	ldrh	r2, [r7, #14]
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d01e      	beq.n	8000c26 <ifx_i2c_dl_send_frame_internal+0x17a>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d006      	beq.n	8000c04 <ifx_i2c_dl_send_frame_internal+0x158>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d108      	bne.n	8000c16 <ifx_i2c_dl_send_frame_internal+0x16a>
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	3305      	adds	r3, #5
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <ifx_i2c_dl_send_frame_internal+0x1a0>)
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6938      	ldr	r0, [r7, #16]
 8000c10:	f005 fbfa 	bl	8006408 <optiga_lib_print_array_hex_format>
 8000c14:	e007      	b.n	8000c26 <ifx_i2c_dl_send_frame_internal+0x17a>
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	3305      	adds	r3, #5
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <ifx_i2c_dl_send_frame_internal+0x1a4>)
 8000c1e:	4619      	mov	r1, r3
 8000c20:	6938      	ldr	r0, [r7, #16]
 8000c22:	f005 fbf1 	bl	8006408 <optiga_lib_print_array_hex_format>
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	3305      	adds	r3, #5
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	6939      	ldr	r1, [r7, #16]
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 fb37 	bl	80012a4 <ifx_i2c_pl_send_frame>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	0800fd2c 	.word	0x0800fd2c
 8000c44:	0800fd34 	.word	0x0800fd34
 8000c48:	0800fd4c 	.word	0x0800fd4c
 8000c4c:	0800fd54 	.word	0x0800fd54
 8000c50:	0800fd5c 	.word	0x0800fd5c

08000c54 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2203      	movs	r2, #3
 8000c68:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
    p_ctx->dl.resynced = 1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2205      	movs	r2, #5
 8000c78:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2202      	movs	r2, #2
 8000c80:	2100      	movs	r1, #0
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff12 	bl	8000aac <ifx_i2c_dl_send_frame_internal>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8000ca4:	f006 f977 	bl	8006f96 <pal_os_timer_get_time_in_milliseconds>
 8000ca8:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d205      	bcs.n	8000cce <ifx_i2c_dl_resend_frame+0x36>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <ifx_i2c_dl_resend_frame+0xa8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d82c      	bhi.n	8000d30 <ifx_i2c_dl_resend_frame+0x98>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d109      	bne.n	8000cf4 <ifx_i2c_dl_resend_frame+0x5c>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            status = ifx_i2c_dl_resync(p_ctx);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ffb3 	bl	8000c54 <ifx_i2c_dl_resync>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	82fb      	strh	r3, [r7, #22]
 8000cf2:	e015      	b.n	8000d20 <ifx_i2c_dl_resend_frame+0x88>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            p_ctx->dl.state = DL_STATE_TX;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2202      	movs	r2, #2
 8000d08:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8b3 112c 	ldrh.w	r1, [r3, #300]	@ 0x12c
 8000d12:	78fa      	ldrb	r2, [r7, #3]
 8000d14:	2301      	movs	r3, #1
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff fec8 	bl	8000aac <ifx_i2c_dl_send_frame_internal>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8000d20:	8afb      	ldrh	r3, [r7, #22]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d008      	beq.n	8000d38 <ifx_i2c_dl_resend_frame+0xa0>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2206      	movs	r2, #6
 8000d2a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8000d2e:	e003      	b.n	8000d38 <ifx_i2c_dl_resend_frame+0xa0>
        p_ctx->dl.state = DL_STATE_ERROR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2208      	movs	r2, #8
 8000d34:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0002bf1f 	.word	0x0002bf1f

08000d44 <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	460b      	mov	r3, r1
 8000d52:	817b      	strh	r3, [r7, #10]
 8000d54:	4613      	mov	r3, r2
 8000d56:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8000d7c:	897b      	ldrh	r3, [r7, #10]
 8000d7e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000d82:	d108      	bne.n	8000d96 <ifx_i2c_pl_event_handler+0x52>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d003      	beq.n	8000d96 <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2208      	movs	r2, #8
 8000d92:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
        }
        switch (p_ctx->dl.state)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	f200 820d 	bhi.w	80011be <ifx_i2c_pl_event_handler+0x47a>
 8000da4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <ifx_i2c_pl_event_handler+0x68>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000dd9 	.word	0x08000dd9
 8000db0:	08000dff 	.word	0x08000dff
 8000db4:	08000e41 	.word	0x08000e41
 8000db8:	080010d3 	.word	0x080010d3
 8000dbc:	08001155 	.word	0x08001155
 8000dc0:	0800113b 	.word	0x0800113b
 8000dc4:	080011bf 	.word	0x080011bf
 8000dc8:	0800116d 	.word	0x0800116d
 8000dcc:	080010bf 	.word	0x080010bf
 8000dd0:	08000eed 	.word	0x08000eed
 8000dd4:	08000ffd 	.word	0x08000ffd
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8000dd8:	897b      	ldrh	r3, [r7, #10]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <ifx_i2c_pl_event_handler+0x9e>
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <ifx_i2c_pl_event_handler+0xa0>
 8000de2:	2302      	movs	r3, #2
 8000de4:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b299      	uxth	r1, r3
 8000df4:	2300      	movs	r3, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	47a0      	blx	r4
            }
            break;
 8000dfc:	e1ef      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8000dfe:	897b      	ldrh	r3, [r7, #10]
 8000e00:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000e04:	d104      	bne.n	8000e10 <ifx_i2c_pl_event_handler+0xcc>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2205      	movs	r2, #5
 8000e0a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000e0e:	e1e6      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8000e10:	f006 f8c1 	bl	8006f96 <pal_os_timer_get_time_in_milliseconds>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
                p_ctx->dl.state = DL_STATE_RX;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f000 fa66 	bl	80012f6 <ifx_i2c_pl_receive_frame>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <ifx_i2c_pl_event_handler+0xf6>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2206      	movs	r2, #6
 8000e34:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8000e38:	e1d1      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                    continue_state_machine = FALSE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	773b      	strb	r3, [r7, #28]
            break;
 8000e3e:	e1ce      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8000e40:	897b      	ldrh	r3, [r7, #10]
 8000e42:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8000e46:	d104      	bne.n	8000e52 <ifx_i2c_pl_event_handler+0x10e>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000e50:	e1c5      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8000e52:	893b      	ldrh	r3, [r7, #8]
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d804      	bhi.n	8000e62 <ifx_i2c_pl_event_handler+0x11e>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000e60:	e1bd      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8000e68:	7d7b      	ldrb	r3, [r7, #21]
 8000e6a:	09db      	lsrs	r3, r3, #7
 8000e6c:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8000e6e:	7d7b      	ldrb	r3, [r7, #21]
 8000e70:	115b      	asrs	r3, r3, #5
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8000e7a:	7d7b      	ldrb	r3, [r7, #21]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8000e82:	7d7b      	ldrb	r3, [r7, #21]
 8000e84:	109b      	asrs	r3, r3, #2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3301      	adds	r3, #1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b21b      	sxth	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8000ea6:	893b      	ldrh	r3, [r7, #8]
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	893b      	ldrh	r3, [r7, #8]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	440b      	add	r3, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8000ec6:	893b      	ldrh	r3, [r7, #8]
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fdc9 	bl	8000a66 <ifx_i2c_dl_calc_crc>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8000ed8:	7d3b      	ldrb	r3, [r7, #20]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d101      	bne.n	8000ee2 <ifx_i2c_pl_event_handler+0x19e>
 8000ede:	220b      	movs	r2, #11
 8000ee0:	e000      	b.n	8000ee4 <ifx_i2c_pl_event_handler+0x1a0>
 8000ee2:	220a      	movs	r2, #10
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            break;
 8000eea:	e178      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000eec:	8b3a      	ldrh	r2, [r7, #24]
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d10d      	bne.n	8000f10 <ifx_i2c_pl_event_handler+0x1cc>
 8000ef4:	8b7b      	ldrh	r3, [r7, #26]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00a      	beq.n	8000f10 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000efa:	893a      	ldrh	r2, [r7, #8]
 8000efc:	8b7b      	ldrh	r3, [r7, #26]
 8000efe:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d105      	bne.n	8000f10 <ifx_i2c_pl_event_handler+0x1cc>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8000f04:	7f7b      	ldrb	r3, [r7, #29]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d002      	beq.n	8000f10 <ifx_i2c_pl_event_handler+0x1cc>
 8000f0a:	7f7b      	ldrb	r3, [r7, #29]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d104      	bne.n	8000f1a <ifx_i2c_pl_event_handler+0x1d6>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2206      	movs	r2, #6
 8000f14:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f18:	e161      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8000f1a:	7ffa      	ldrb	r2, [r7, #31]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000f22:	3301      	adds	r3, #1
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d00c      	beq.n	8000f46 <ifx_i2c_pl_event_handler+0x202>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2209      	movs	r2, #9
 8000f30:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    continue_state_machine = FALSE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f7ff fdb4 	bl	8000aac <ifx_i2c_dl_send_frame_internal>
                    break;
 8000f44:	e14b      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8000f4c:	7fba      	ldrb	r2, [r7, #30]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d004      	beq.n	8000f5c <ifx_i2c_pl_event_handler+0x218>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2209      	movs	r2, #9
 8000f56:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f5a:	e140      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8000f5c:	7f7b      	ldrb	r3, [r7, #29]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d104      	bne.n	8000f6c <ifx_i2c_pl_event_handler+0x228>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2205      	movs	r2, #5
 8000f66:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8000f6a:	e138      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8000f88:	893a      	ldrh	r2, [r7, #8]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00d ffa2 	bl	800eed6 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	893a      	ldrh	r2, [r7, #8]
 8000f96:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
                p_ctx->dl.state = DL_STATE_ACK;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
 8000fae:	4a90      	ldr	r2, [pc, #576]	@ (80011f0 <ifx_i2c_pl_event_handler+0x4ac>)
 8000fb0:	4990      	ldr	r1, [pc, #576]	@ (80011f4 <ifx_i2c_pl_event_handler+0x4b0>)
 8000fb2:	4891      	ldr	r0, [pc, #580]	@ (80011f8 <ifx_i2c_pl_event_handler+0x4b4>)
 8000fb4:	f005 f9c6 	bl	8006344 <optiga_lib_print_message>
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d006      	beq.n	8000fd4 <ifx_i2c_pl_event_handler+0x290>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d106      	bne.n	8000fe2 <ifx_i2c_pl_event_handler+0x29e>
 8000fd4:	893b      	ldrh	r3, [r7, #8]
 8000fd6:	4a89      	ldr	r2, [pc, #548]	@ (80011fc <ifx_i2c_pl_event_handler+0x4b8>)
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f005 fa14 	bl	8006408 <optiga_lib_print_array_hex_format>
 8000fe0:	e005      	b.n	8000fee <ifx_i2c_pl_event_handler+0x2aa>
 8000fe2:	893b      	ldrh	r3, [r7, #8]
 8000fe4:	4a86      	ldr	r2, [pc, #536]	@ (8001200 <ifx_i2c_pl_event_handler+0x4bc>)
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f005 fa0d 	bl	8006408 <optiga_lib_print_array_hex_format>
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fd59 	bl	8000aac <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8000ffa:	e0f0      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8001002:	461a      	mov	r2, r3
 8001004:	7f7b      	ldrb	r3, [r7, #29]
 8001006:	2b02      	cmp	r3, #2
 8001008:	bf0c      	ite	eq
 800100a:	2301      	moveq	r3, #1
 800100c:	2300      	movne	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	429a      	cmp	r2, r3
 8001012:	d004      	beq.n	800101e <ifx_i2c_pl_event_handler+0x2da>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2209      	movs	r2, #9
 8001018:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800101c:	e0df      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if (crc_received != crc_calculated)
 800101e:	8b3a      	ldrh	r2, [r7, #24]
 8001020:	8afb      	ldrh	r3, [r7, #22]
 8001022:	429a      	cmp	r2, r3
 8001024:	d004      	beq.n	8001030 <ifx_i2c_pl_event_handler+0x2ec>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2205      	movs	r2, #5
 800102a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800102e:	e0d6      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8001030:	893b      	ldrh	r3, [r7, #8]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d802      	bhi.n	800103c <ifx_i2c_pl_event_handler+0x2f8>
 8001036:	8b7b      	ldrh	r3, [r7, #26]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <ifx_i2c_pl_event_handler+0x302>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2209      	movs	r2, #9
 8001040:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 8001044:	e0cb      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8001046:	7f7b      	ldrb	r3, [r7, #29]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d110      	bne.n	800106e <ifx_i2c_pl_event_handler+0x32a>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2209      	movs	r2, #9
 8001050:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.resynced = 1;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2203      	movs	r2, #3
 8001060:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2203      	movs	r2, #3
 8001068:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
                    break;
 800106c:	e0b7      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d108      	bne.n	8001086 <ifx_i2c_pl_event_handler+0x342>
 8001074:	7f7b      	ldrb	r3, [r7, #29]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d005      	beq.n	8001086 <ifx_i2c_pl_event_handler+0x342>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8001080:	7fba      	ldrb	r2, [r7, #30]
 8001082:	429a      	cmp	r2, r3
 8001084:	d004      	beq.n	8001090 <ifx_i2c_pl_event_handler+0x34c>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2209      	movs	r2, #9
 800108a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800108e:	e0a6      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8001090:	7f7b      	ldrb	r3, [r7, #29]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d104      	bne.n	80010a0 <ifx_i2c_pl_event_handler+0x35c>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2205      	movs	r2, #5
 800109a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 800109e:	e09e      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80010b2:	2300      	movs	r3, #0
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	47a0      	blx	r4
            }
            break;
 80010bc:	e08f      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2203      	movs	r2, #3
 80010c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 f913 	bl	80012f6 <ifx_i2c_pl_receive_frame>
            }
            break;
 80010d0:	e085      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 80010d2:	897b      	ldrh	r3, [r7, #10]
 80010d4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80010d8:	d104      	bne.n	80010e4 <ifx_i2c_pl_event_handler+0x3a0>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    break;
 80010e2:	e07c      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00f      	beq.n	800111a <ifx_i2c_pl_event_handler+0x3d6>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001106:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800110e:	3b05      	subs	r3, #5
 8001110:	b29b      	uxth	r3, r3
 8001112:	2104      	movs	r1, #4
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8001118:	e061      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001126:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f8b3 312e 	ldrh.w	r3, [r3, #302]	@ 0x12e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 800112e:	3b05      	subs	r3, #5
 8001130:	b29b      	uxth	r3, r3
 8001132:	2106      	movs	r1, #6
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	47a0      	blx	r4
            break;
 8001138:	e051      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2202      	movs	r2, #2
 800113e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                continue_state_machine = FALSE;
 8001142:	2300      	movs	r3, #0
 8001144:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8001146:	2300      	movs	r3, #0
 8001148:	2201      	movs	r2, #1
 800114a:	2100      	movs	r1, #0
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff fcad 	bl	8000aac <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8001152:	e044      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8001154:	2100      	movs	r1, #0
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff fd9e 	bl	8000c98 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8001162:	2b08      	cmp	r3, #8
 8001164:	d03a      	beq.n	80011dc <ifx_i2c_pl_event_handler+0x498>
                {
                    continue_state_machine = FALSE;
 8001166:	2300      	movs	r3, #0
 8001168:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 800116a:	e037      	b.n	80011dc <ifx_i2c_pl_event_handler+0x498>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <ifx_i2c_pl_event_handler+0x43a>
                {
                    p_ctx->dl.error = 1;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                if (0 == p_ctx->dl.error)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10c      	bne.n	80011a2 <ifx_i2c_pl_event_handler+0x45e>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 8001196:	2300      	movs	r3, #0
 8001198:	2200      	movs	r2, #0
 800119a:	2101      	movs	r1, #1
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	47a0      	blx	r4
 80011a0:	e00a      	b.n	80011b8 <ifx_i2c_pl_event_handler+0x474>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f7ff fd56 	bl	8000c54 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2208      	movs	r2, #8
 80011ac:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    p_ctx->dl.error = 0;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
                }
                continue_state_machine = FALSE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	773b      	strb	r3, [r7, #28]
            }
            break;
 80011bc:	e00f      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f8d3 4124 	ldr.w	r4, [r3, #292]	@ 0x124
 80011cc:	2300      	movs	r3, #0
 80011ce:	2200      	movs	r2, #0
 80011d0:	2101      	movs	r1, #1
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	47a0      	blx	r4
                continue_state_machine = FALSE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	773b      	strb	r3, [r7, #28]
                break;
 80011da:	e000      	b.n	80011de <ifx_i2c_pl_event_handler+0x49a>
            break;
 80011dc:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 80011de:	7f3b      	ldrb	r3, [r7, #28]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f43f adcb 	beq.w	8000d7c <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	3724      	adds	r7, #36	@ 0x24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	0800fd2c 	.word	0x0800fd2c
 80011f4:	0800fd34 	.word	0x0800fd34
 80011f8:	0800fd64 	.word	0x0800fd64
 80011fc:	0800fd54 	.word	0x0800fd54
 8001200:	0800fd5c 	.word	0x0800fd5c

08001204 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	22bb      	movs	r2, #187	@ 0xbb
 8001222:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	f892 24ba 	ldrb.w	r2, [r2, #1210]	@ 0x4ba
 8001232:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800123a:	4a19      	ldr	r2, [pc, #100]	@ (80012a0 <ifx_i2c_pl_init+0x9c>)
 800123c:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	22c8      	movs	r2, #200	@ 0xc8
 8001242:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    if (TRUE == p_ctx->do_pal_init)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 34bf 	ldrb.w	r3, [r3, #1215]	@ 0x4bf
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10b      	bne.n	8001268 <ifx_i2c_pl_init+0x64>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001256:	4618      	mov	r0, r3
 8001258:	f005 fbea 	bl	8006a30 <pal_i2c_init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d002      	beq.n	8001268 <ifx_i2c_pl_init+0x64>
        {
            return (IFX_I2C_STACK_ERROR);
 8001262:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001266:	e016      	b.n	8001296 <ifx_i2c_pl_init+0x92>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 800126e:	2b01      	cmp	r3, #1
 8001270:	d108      	bne.n	8001284 <ifx_i2c_pl_init+0x80>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2299      	movs	r2, #153	@ 0x99
 8001276:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2205      	movs	r2, #5
 800127e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8001282:	e003      	b.n	800128c <ifx_i2c_pl_init+0x88>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 800128c:	2100      	movs	r1, #0
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 fa84 	bl	800179c <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08001a85 	.word	0x08001a85

080012a4 <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d007      	beq.n	80012cc <ifx_i2c_pl_send_frame+0x28>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d002      	beq.n	80012cc <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80012c6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80012ca:	e010      	b.n	80012ee <ifx_i2c_pl_send_frame+0x4a>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    p_ctx->pl.tx_frame_len = frame_len;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	88fa      	ldrh	r2, [r7, #6]
 80012e0:	f8a3 2146 	strh.w	r2, [r3, #326]	@ 0x146

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80012e4:	2100      	movs	r1, #0
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f000 fa58 	bl	800179c <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <ifx_i2c_pl_receive_frame+0x22>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800130e:	2b02      	cmp	r3, #2
 8001310:	d002      	beq.n	8001318 <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8001312:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001316:	e008      	b.n	800132a <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001320:	2100      	movs	r1, #0
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fa3a 	bl	800179c <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
 800133e:	4613      	mov	r3, r2
 8001340:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	78fa      	ldrb	r2, [r7, #3]
 8001346:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    p_ctx->pl.buffer_tx_len = 1;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	883a      	ldrh	r2, [r7, #0]
 8001356:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	22c8      	movs	r2, #200	@ 0xc8
 8001366:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 8001384:	461a      	mov	r2, r3
 8001386:	f005 fb69 	bl	8006a5c <pal_i2c_write>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	72fb      	strb	r3, [r7, #11]
 80013a0:	4613      	mov	r3, r2
 80013a2:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	7afa      	ldrb	r2, [r7, #11]
 80013a8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80013b2:	3301      	adds	r3, #1
 80013b4:	893a      	ldrh	r2, [r7, #8]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00d fd8c 	bl	800eed6 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80013be:	893b      	ldrh	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2202      	movs	r2, #2
 80013ce:	f883 225e 	strb.w	r2, [r3, #606]	@ 0x25e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	22c8      	movs	r2, #200	@ 0xc8
 80013d6:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80013f4:	461a      	mov	r2, r3
 80013f6:	f005 fb31 	bl	8006a5c <pal_i2c_write>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 800140a:	2204      	movs	r2, #4
 800140c:	2182      	movs	r1, #130	@ 0x82
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff8f 	bl	8001332 <ifx_i2c_pl_read_register>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f005 fb84 	bl	8006b54 <pal_i2c_set_bitrate>
 800144c:	4603      	mov	r3, r0
 800144e:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d019      	beq.n	8001494 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	b291      	uxth	r1, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <ifx_i2c_pl_set_bit_rate+0x88>)
 8001482:	f005 fcd3 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 8001486:	2301      	movs	r3, #1
 8001488:	81fb      	strh	r3, [r7, #14]
 800148a:	e005      	b.n	8001498 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 800148c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	e001      	b.n	8001498 <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 8001494:	2300      	movs	r3, #0
 8001496:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 8001498:	89fb      	ldrh	r3, [r7, #14]

}
 800149a:	4618      	mov	r0, r3
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	080014a9 	.word	0x080014a9

080014a8 <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08b      	sub	sp, #44	@ 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80014b0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80014b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	733b      	strb	r3, [r7, #12]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80014e6:	2bbb      	cmp	r3, #187	@ 0xbb
 80014e8:	d031      	beq.n	800154e <ifx_i2c_pl_negotiation_event_handler+0xa6>
 80014ea:	2bbb      	cmp	r3, #187	@ 0xbb
 80014ec:	f300 8145 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80014f0:	2baa      	cmp	r3, #170	@ 0xaa
 80014f2:	f000 812d 	beq.w	8001750 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 80014f6:	2baa      	cmp	r3, #170	@ 0xaa
 80014f8:	f300 813f 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 80014fc:	2b88      	cmp	r3, #136	@ 0x88
 80014fe:	f000 8103 	beq.w	8001708 <ifx_i2c_pl_negotiation_event_handler+0x260>
 8001502:	2b88      	cmp	r3, #136	@ 0x88
 8001504:	f300 8139 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001508:	2b77      	cmp	r3, #119	@ 0x77
 800150a:	f000 80c6 	beq.w	800169a <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 800150e:	2b77      	cmp	r3, #119	@ 0x77
 8001510:	f300 8133 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001514:	2b66      	cmp	r3, #102	@ 0x66
 8001516:	f000 809d 	beq.w	8001654 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 800151a:	2b66      	cmp	r3, #102	@ 0x66
 800151c:	f300 812d 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001520:	2b55      	cmp	r3, #85	@ 0x55
 8001522:	f000 808d 	beq.w	8001640 <ifx_i2c_pl_negotiation_event_handler+0x198>
 8001526:	2b55      	cmp	r3, #85	@ 0x55
 8001528:	f300 8127 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 800152c:	2b44      	cmp	r3, #68	@ 0x44
 800152e:	d040      	beq.n	80015b2 <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8001530:	2b44      	cmp	r3, #68	@ 0x44
 8001532:	f300 8122 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001536:	2b33      	cmp	r3, #51	@ 0x33
 8001538:	d031      	beq.n	800159e <ifx_i2c_pl_negotiation_event_handler+0xf6>
 800153a:	2b33      	cmp	r3, #51	@ 0x33
 800153c:	f300 811d 	bgt.w	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
 8001540:	2b11      	cmp	r3, #17
 8001542:	f000 80cb 	beq.w	80016dc <ifx_i2c_pl_negotiation_event_handler+0x234>
 8001546:	2b22      	cmp	r3, #34	@ 0x22
 8001548:	f000 80d4 	beq.w	80016f4 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 800154c:	e115      	b.n	800177a <ifx_i2c_pl_negotiation_event_handler+0x2d2>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 800154e:	2164      	movs	r1, #100	@ 0x64
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff63 	bl	800141c <ifx_i2c_pl_set_bit_rate>
 8001556:	4603      	mov	r3, r0
 8001558:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 800155a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2233      	movs	r2, #51	@ 0x33
 8001564:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001568:	2301      	movs	r3, #1
 800156a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 800156e:	e106      	b.n	800177e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                else if (IFX_I2C_STACK_ERROR == event)
 8001570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001572:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8001576:	f040 8102 	bne.w	800177e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	22aa      	movs	r2, #170	@ 0xaa
 800157e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001590:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4980      	ldr	r1, [pc, #512]	@ (8001798 <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 8001598:	f005 fc48 	bl	8006e2c <pal_os_event_register_callback_oneshot>
            break;
 800159c:	e0ef      	b.n	800177e <ifx_i2c_pl_negotiation_event_handler+0x2d6>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2244      	movs	r2, #68	@ 0x44
 80015a2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 80015a6:	2204      	movs	r2, #4
 80015a8:	2184      	movs	r1, #132	@ 0x84
 80015aa:	69b8      	ldr	r0, [r7, #24]
 80015ac:	f7ff fec1 	bl	8001332 <ifx_i2c_pl_read_register>
            break;
 80015b0:	e0e8      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80015d4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80015d8:	d911      	bls.n	80015fe <ifx_i2c_pl_negotiation_event_handler+0x156>
 80015da:	8abb      	ldrh	r3, [r7, #20]
 80015dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80015e0:	d80d      	bhi.n	80015fe <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 80015e2:	2304      	movs	r3, #4
 80015e4:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2255      	movs	r2, #85	@ 0x55
 80015ea:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2202      	movs	r2, #2
 80015f4:	2189      	movs	r1, #137	@ 0x89
 80015f6:	69b8      	ldr	r0, [r7, #24]
 80015f8:	f7ff fecb 	bl	8001392 <ifx_i2c_pl_write_register>
 80015fc:	e01f      	b.n	800163e <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001604:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001608:	d811      	bhi.n	800162e <ifx_i2c_pl_negotiation_event_handler+0x186>
 800160a:	8abb      	ldrh	r3, [r7, #20]
 800160c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001610:	d90d      	bls.n	800162e <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8001612:	2303      	movs	r3, #3
 8001614:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	2255      	movs	r2, #85	@ 0x55
 800161a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	2202      	movs	r2, #2
 8001624:	2189      	movs	r1, #137	@ 0x89
 8001626:	69b8      	ldr	r0, [r7, #24]
 8001628:	f7ff feb3 	bl	8001392 <ifx_i2c_pl_write_register>
 800162c:	e007      	b.n	800163e <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2266      	movs	r2, #102	@ 0x66
 8001632:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 8001636:	2301      	movs	r3, #1
 8001638:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 800163c:	e0a2      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
 800163e:	e0a1      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2266      	movs	r2, #102	@ 0x66
 8001644:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 8001648:	2204      	movs	r2, #4
 800164a:	2184      	movs	r1, #132	@ 0x84
 800164c:	69b8      	ldr	r0, [r7, #24]
 800164e:	f7ff fe70 	bl	8001332 <ifx_i2c_pl_read_register>
            break;
 8001652:	e097      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	b21a      	sxth	r2, r3
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 8001672:	8aba      	ldrh	r2, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	d208      	bcs.n	800168a <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	22aa      	movs	r2, #170	@ 0xaa
 8001684:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8001688:	e003      	b.n	8001692 <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2277      	movs	r2, #119	@ 0x77
 800168e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                continue_negotiation = TRUE;
 8001692:	2301      	movs	r3, #1
 8001694:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8001698:	e074      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	f8b3 3288 	ldrh.w	r3, [r3, #648]	@ 0x288
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff feba 	bl	800141c <ifx_i2c_pl_set_bit_rate>
 80016a8:	4603      	mov	r3, r0
 80016aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 80016ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d107      	bne.n	80016c2 <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2211      	movs	r2, #17
 80016b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    continue_negotiation = TRUE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80016c0:	e05f      	b.n	8001782 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                else if (IFX_I2C_STACK_ERROR == event)
 80016c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016c4:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80016c8:	d15b      	bne.n	8001782 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	22aa      	movs	r2, #170	@ 0xaa
 80016ce:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                    p_buffer = NULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 80016da:	e052      	b.n	8001782 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2222      	movs	r2, #34	@ 0x22
 80016e0:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2202      	movs	r2, #2
 80016ea:	2181      	movs	r1, #129	@ 0x81
 80016ec:	69b8      	ldr	r0, [r7, #24]
 80016ee:	f7ff fe50 	bl	8001392 <ifx_i2c_pl_write_register>
            break;
 80016f2:	e047      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2288      	movs	r2, #136	@ 0x88
 80016f8:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 80016fc:	2202      	movs	r2, #2
 80016fe:	2181      	movs	r1, #129	@ 0x81
 8001700:	69b8      	ldr	r0, [r7, #24]
 8001702:	f7ff fe16 	bl	8001332 <ifx_i2c_pl_read_register>
            break;
 8001706:	e03d      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	22aa      	movs	r2, #170	@ 0xaa
 800170c:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21b      	sxth	r3, r3
 8001726:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 800172e:	8afa      	ldrh	r2, [r7, #22]
 8001730:	429a      	cmp	r2, r3
 8001732:	d805      	bhi.n	8001740 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	8afa      	ldrh	r2, [r7, #22]
 8001738:	f8a3 228a 	strh.w	r2, [r3, #650]	@ 0x28a
                    event = IFX_I2C_STACK_SUCCESS;
 800173c:	2300      	movs	r3, #0
 800173e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 8001748:	2301      	movs	r3, #1
 800174a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 800174e:	e019      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                if (IFX_I2C_STACK_SUCCESS == event)
 8001750:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001752:	2b00      	cmp	r3, #0
 8001754:	d104      	bne.n	8001760 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2202      	movs	r2, #2
 800175a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800175e:	e003      	b.n	8001768 <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 800176e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001770:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	69b8      	ldr	r0, [r7, #24]
 8001776:	47a0      	blx	r4
            break;
 8001778:	e004      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
                break;
 800177a:	bf00      	nop
 800177c:	e002      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 800177e:	bf00      	nop
 8001780:	e000      	b.n	8001784 <ifx_i2c_pl_negotiation_event_handler+0x2dc>
            break;
 8001782:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8001784:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001788:	2b00      	cmp	r3, #0
 800178a:	f47f aea6 	bne.w	80014da <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	372c      	adds	r7, #44	@ 0x2c
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	080014a9 	.word	0x080014a9

0800179c <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <ifx_i2c_pl_frame_event_handler+0x2c>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80017bc:	8879      	ldrh	r1, [r7, #2]
 80017be:	2300      	movs	r3, #0
 80017c0:	2200      	movs	r2, #0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80017c6:	e0f0      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
        switch (p_ctx->pl.frame_state)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80017ce:	3b01      	subs	r3, #1
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	f200 80dc 	bhi.w	800198e <ifx_i2c_pl_frame_event_handler+0x1f2>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <ifx_i2c_pl_frame_event_handler+0x40>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017f9 	.word	0x080017f9
 80017e0:	08001801 	.word	0x08001801
 80017e4:	0800181f 	.word	0x0800181f
 80017e8:	0800196d 	.word	0x0800196d
 80017ec:	080017f1 	.word	0x080017f1
                ifx_i2c_pl_soft_reset(p_ctx);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f983 	bl	8001afc <ifx_i2c_pl_soft_reset>
            break;
 80017f6:	e0d8      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fe55 	bl	80014a8 <ifx_i2c_pl_negotiation_event_handler>
            break;
 80017fe:	e0d4      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800180e:	2b02      	cmp	r3, #2
 8001810:	d105      	bne.n	800181e <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001812:	2204      	movs	r2, #4
 8001814:	2182      	movs	r1, #130	@ 0x82
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fd8b 	bl	8001332 <ifx_i2c_pl_read_register>
                    break;
 800181c:	e0c5      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8001824:	2b02      	cmp	r3, #2
 8001826:	d159      	bne.n	80018dc <ifx_i2c_pl_frame_event_handler+0x140>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800182e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001832:	2b00      	cmp	r3, #0
 8001834:	d052      	beq.n	80018dc <ifx_i2c_pl_frame_event_handler+0x140>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b21a      	sxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21b      	sxth	r3, r3
 800184c:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 800184e:	8a7b      	ldrh	r3, [r7, #18]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d010      	beq.n	8001876 <ifx_i2c_pl_frame_event_handler+0xda>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 800185a:	8a7a      	ldrh	r2, [r7, #18]
 800185c:	429a      	cmp	r2, r3
 800185e:	d80a      	bhi.n	8001876 <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2204      	movs	r2, #4
 8001864:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 8001868:	8a7b      	ldrh	r3, [r7, #18]
 800186a:	461a      	mov	r2, r3
 800186c:	2180      	movs	r1, #128	@ 0x80
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd5f 	bl	8001332 <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8001874:	e079      	b.n	800196a <ifx_i2c_pl_frame_event_handler+0x1ce>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 8001876:	f005 fb8e 	bl	8006f96 <pal_os_timer_get_time_in_milliseconds>
 800187a:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d205      	bcs.n	80018a0 <ifx_i2c_pl_frame_event_handler+0x104>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d209      	bcs.n	80018c0 <ifx_i2c_pl_frame_event_handler+0x124>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 80018b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	493e      	ldr	r1, [pc, #248]	@ (80019b4 <ifx_i2c_pl_frame_event_handler+0x218>)
 80018ba:	f005 fab7 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80018be:	e054      	b.n	800196a <ifx_i2c_pl_frame_event_handler+0x1ce>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 80018ce:	2300      	movs	r3, #0
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80018da:	e046      	b.n	800196a <ifx_i2c_pl_frame_event_handler+0x1ce>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10e      	bne.n	8001904 <ifx_i2c_pl_frame_event_handler+0x168>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                    ifx_i2c_pl_write_register(p_ctx,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8b3 2146 	ldrh.w	r2, [r3, #326]	@ 0x146
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
                    ifx_i2c_pl_write_register(p_ctx,
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fd48 	bl	8001392 <ifx_i2c_pl_write_register>
            break;
 8001902:	e052      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 8001904:	f005 fb47 	bl	8006f96 <pal_os_timer_get_time_in_milliseconds>
 8001908:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	429a      	cmp	r2, r3
 8001920:	d205      	bcs.n	800192e <ifx_i2c_pl_frame_event_handler+0x192>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	429a      	cmp	r2, r3
 8001938:	d209      	bcs.n	800194e <ifx_i2c_pl_frame_event_handler+0x1b2>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001940:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	491b      	ldr	r1, [pc, #108]	@ (80019b4 <ifx_i2c_pl_frame_event_handler+0x218>)
 8001948:	f005 fa70 	bl	8006e2c <pal_os_event_register_callback_oneshot>
            break;
 800194c:	e02d      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 800195c:	2300      	movs	r3, #0
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	47a0      	blx	r4
            break;
 8001968:	e01f      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
 800196a:	e01e      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
                                                    p_ctx->pl.buffer,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001986:	2100      	movs	r1, #0
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	47a0      	blx	r4
            break;
 800198c:	e00d      	b.n	80019aa <ifx_i2c_pl_frame_event_handler+0x20e>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8d3 413c 	ldr.w	r4, [r3, #316]	@ 0x13c
 800199c:	2300      	movs	r3, #0
 800199e:	2200      	movs	r2, #0
 80019a0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	47a0      	blx	r4
            break;
 80019a8:	bf00      	nop
}
 80019aa:	bf00      	nop
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08001403 	.word	0x08001403

080019b8 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d10c      	bne.n	80019e8 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80019e0:	461a      	mov	r2, r3
 80019e2:	f005 f83b 	bl	8006a5c <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 80019e6:	e010      	b.n	8001a0a <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d10b      	bne.n	8001a0a <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001a04:	461a      	mov	r2, r3
 8001a06:	f005 f867 	bl	8006ad8 <pal_i2c_read>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d11f      	bne.n	8001a68 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d110      	bne.n	8001a54 <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 225f 	strb.w	r2, [r3, #607]	@ 0x25f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f8d3 0270 	ldr.w	r0, [r3, #624]	@ 0x270
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f503 71a4 	add.w	r1, r3, #328	@ 0x148
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f005 f843 	bl	8006ad8 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 8001a52:	e012      	b.n	8001a7a <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 325f 	ldrb.w	r3, [r3, #607]	@ 0x25f
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d10d      	bne.n	8001a7a <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fe9b 	bl	800179c <ifx_i2c_pl_frame_event_handler>
}
 8001a66:	e008      	b.n	8001a7a <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 325e 	ldrb.w	r3, [r3, #606]	@ 0x25e
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d103      	bne.n	8001a7a <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8001a72:	2100      	movs	r1, #0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fe91 	bl	800179c <ifx_i2c_pl_frame_event_handler>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60fb      	str	r3, [r7, #12]
    switch (event)
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01e      	beq.n	8001ad8 <ifx_i2c_pl_pal_event_handler+0x54>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db25      	blt.n	8001aea <ifx_i2c_pl_pal_event_handler+0x66>
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d822      	bhi.n	8001aea <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f8b3 3140 	ldrh.w	r3, [r3, #320]	@ 0x140
 8001aaa:	1e5a      	subs	r2, r3, #1
 8001aac:	b291      	uxth	r1, r2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	f8a2 1140 	strh.w	r1, [r2, #320]	@ 0x140
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	490b      	ldr	r1, [pc, #44]	@ (8001af4 <ifx_i2c_pl_pal_event_handler+0x70>)
 8001ac6:	f005 f9b1 	bl	8006e2c <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 8001aca:	e00f      	b.n	8001aec <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 8001acc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff fe63 	bl	800179c <ifx_i2c_pl_frame_event_handler>
            break;
 8001ad6:	e009      	b.n	8001aec <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001ade:	2332      	movs	r3, #50	@ 0x32
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4905      	ldr	r1, [pc, #20]	@ (8001af8 <ifx_i2c_pl_pal_event_handler+0x74>)
 8001ae4:	f005 f9a2 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 8001ae8:	e000      	b.n	8001aec <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 8001aea:	bf00      	nop
    }
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	080019b9 	.word	0x080019b9
 8001af8:	08001a13 	.word	0x08001a13

08001afc <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 8001b04:	2300      	movs	r3, #0
 8001b06:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3263 	ldrb.w	r3, [r3, #611]	@ 0x263
 8001b0e:	3b99      	subs	r3, #153	@ 0x99
 8001b10:	2b0a      	cmp	r3, #10
 8001b12:	d85e      	bhi.n	8001bd2 <ifx_i2c_pl_soft_reset+0xd6>
 8001b14:	a201      	add	r2, pc, #4	@ (adr r2, 8001b1c <ifx_i2c_pl_soft_reset+0x20>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001bd3 	.word	0x08001bd3
 8001b24:	08001bd3 	.word	0x08001bd3
 8001b28:	08001bd3 	.word	0x08001bd3
 8001b2c:	08001bd3 	.word	0x08001bd3
 8001b30:	08001bd3 	.word	0x08001bd3
 8001b34:	08001bd3 	.word	0x08001bd3
 8001b38:	08001bd3 	.word	0x08001bd3
 8001b3c:	08001bc1 	.word	0x08001bc1
 8001b40:	08001b5d 	.word	0x08001b5d
 8001b44:	08001ba5 	.word	0x08001ba5
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	22a2      	movs	r2, #162	@ 0xa2
 8001b4c:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8001b50:	2204      	movs	r2, #4
 8001b52:	2182      	movs	r1, #130	@ 0x82
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fbec 	bl	8001332 <ifx_i2c_pl_read_register>
            break;
 8001b5a:	e03b      	b.n	8001bd4 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d10b      	bne.n	8001b90 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	22a3      	movs	r2, #163	@ 0xa3
 8001b7c:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2202      	movs	r2, #2
 8001b86:	2188      	movs	r1, #136	@ 0x88
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fc02 	bl	8001392 <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8001b8e:	e021      	b.n	8001bd4 <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8001b98:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff fdfd 	bl	800179c <ifx_i2c_pl_frame_event_handler>
            break;
 8001ba2:	e017      	b.n	8001bd4 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	22a1      	movs	r2, #161	@ 0xa1
 8001ba8:	f883 2263 	strb.w	r2, [r3, #611]	@ 0x263
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 8001bb2:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <ifx_i2c_pl_soft_reset+0xe0>)
 8001bba:	f005 f937 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8001bbe:	e009      	b.n	8001bd4 <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fde6 	bl	800179c <ifx_i2c_pl_frame_event_handler>
            break;
 8001bd0:	e000      	b.n	8001bd4 <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 8001bd2:	bf00      	nop
    }
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	08001afd 	.word	0x08001afd

08001be0 <ifx_i2c_prl_init>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx);
/// @endcond

optiga_lib_status_t ifx_i2c_prl_init(ifx_i2c_context_t * p_ctx,
                                     ifx_i2c_event_handler_t handler)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001bea:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001bee:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Init\n");

    p_ctx->tl.state = PRL_STATE_UNINIT;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    do
    {
        // Initialize transport layer (and register event handler)
        if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_init(p_ctx, ifx_i2c_prl_event_handler))
 8001bf8:	491c      	ldr	r1, [pc, #112]	@ (8001c6c <ifx_i2c_prl_init+0x8c>)
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f001 faa0 	bl	8003140 <ifx_i2c_tl_init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d12b      	bne.n	8001c5e <ifx_i2c_prl_init+0x7e>
        {
            break;
        }

        p_ctx->prl.upper_layer_event_handler = handler;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001c12:	2b11      	cmp	r3, #17
 8001c14:	d104      	bne.n	8001c20 <ifx_i2c_prl_init+0x40>
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_NOT_DONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001c1e:	e003      	b.n	8001c28 <ifx_i2c_prl_init+0x48>
        }
        else
        {
            p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
        }
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2

        p_ctx->protocol_version = PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2211      	movs	r2, #17
 8001c4c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2211      	movs	r2, #17
 8001c54:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        return_status = IFX_I2C_STACK_SUCCESS;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	81fb      	strh	r3, [r7, #14]
 8001c5c:	e000      	b.n	8001c60 <ifx_i2c_prl_init+0x80>
            break;
 8001c5e:	bf00      	nop
    } while (FALSE);
    
    return (return_status);
 8001c60:	89fb      	ldrh	r3, [r7, #14]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	080027e9 	.word	0x080027e9

08001c70 <ifx_i2c_prl_close>:

optiga_lib_status_t ifx_i2c_prl_close(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001c7a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001c7e:	81fb      	strh	r3, [r7, #14]
    LOG_PRL("[IFX-PRL]: Close\n");
    do
    {
        // Presentation Layer must be idle
        if (PRL_STATE_IDLE != p_ctx->prl.state)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d12e      	bne.n	8001ce8 <ifx_i2c_prl_close+0x78>
        {
            break;
        }
        p_ctx->prl.upper_layer_event_handler = handler;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (IFX_I2C_SESSION_CONTEXT_NONE == p_ctx->manage_context_operation)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001c96:	2b33      	cmp	r3, #51	@ 0x33
 8001c98:	d109      	bne.n	8001cae <ifx_i2c_prl_close+0x3e>
        {
            p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	47a0      	blx	r4
            return_status = IFX_I2C_STACK_SUCCESS;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	81fb      	strh	r3, [r7, #14]
            break;
 8001cac:	e01d      	b.n	8001cea <ifx_i2c_prl_close+0x7a>
        }

        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d118      	bne.n	8001cea <ifx_i2c_prl_close+0x7a>
            (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
        if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) &&
 8001cbe:	2b22      	cmp	r3, #34	@ 0x22
 8001cc0:	d113      	bne.n	8001cea <ifx_i2c_prl_close+0x7a>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            ifx_i2c_prl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, p_ctx->prl.prl_txrx_buffer, 1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fd83 	bl	80027e8 <ifx_i2c_prl_event_handler>
            return_status = IFX_I2C_STACK_SUCCESS;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	81fb      	strh	r3, [r7, #14]
            break;
 8001ce6:	e000      	b.n	8001cea <ifx_i2c_prl_close+0x7a>
            break;
 8001ce8:	bf00      	nop
        }
    } while (FALSE);
    return (return_status);
 8001cea:	89fb      	ldrh	r3, [r7, #14]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <ifx_i2c_prl_transceive>:
optiga_lib_status_t ifx_i2c_prl_transceive(ifx_i2c_context_t * p_ctx,
                                           uint8_t * p_tx_data,
                                           uint16_t tx_data_len,
                                           uint8_t * p_rx_data,
                                           uint16_t * p_rx_data_len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001d04:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001d08:	82fb      	strh	r3, [r7, #22]
    LOG_PRL("[IFX-PRL]: Transceive txlen %d\n", tx_data_len);

    do
    {
        // Check function arguments and presentation Layer must be idle
        if ((NULL == p_tx_data) || (0 == tx_data_len) || (PRL_STATE_IDLE != p_ctx->prl.state))
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d05a      	beq.n	8001dc6 <ifx_i2c_prl_transceive+0xd2>
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d057      	beq.n	8001dc6 <ifx_i2c_prl_transceive+0xd2>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d152      	bne.n	8001dc6 <ifx_i2c_prl_transceive+0xd2>
        {
            break;
        }

        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d10d      	bne.n	8001d46 <ifx_i2c_prl_transceive+0x52>
            (PRL_RESTORE_NOT_DONE == p_ctx->prl.restore_context_flag))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
        if ((IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && 
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <ifx_i2c_prl_transceive+0x52>
        {
            p_ctx->prl.state = PRL_STATE_MANAGE_CONTEXT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2208      	movs	r2, #8
 8001d38:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_TX_STATE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
 8001d44:	e003      	b.n	8001d4e <ifx_i2c_prl_transceive+0x5a>
        }
        else
        {
            p_ctx->prl.state = PRL_STATE_START;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        }
        p_ctx->prl.p_actual_payload = p_tx_data;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	635a      	str	r2, [r3, #52]	@ 0x34
        p_ctx->prl.actual_payload_length = tx_data_len;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d006      	beq.n	8001d78 <ifx_i2c_prl_transceive+0x84>
            (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8001d70:	f003 0303 	and.w	r3, r3, #3
        if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d103      	bne.n	8001d80 <ifx_i2c_prl_transceive+0x8c>
        {
            p_ctx->prl.p_recv_payload_buffer = p_rx_data;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d7e:	e003      	b.n	8001d88 <ifx_i2c_prl_transceive+0x94>
        }
        else
        {
            p_ctx->prl.p_recv_payload_buffer = &p_rx_data[PRL_PLAIN_TEST_OFFSET];
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	1d1a      	adds	r2, r3, #4
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        p_ctx->prl.p_recv_payload_buffer_length = p_rx_data_len;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a3a      	ldr	r2, [r7, #32]
 8001d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
        p_ctx->prl.data_retransmit_counter = 0;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
        p_ctx->prl.trans_repeat_status = FALSE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
        p_ctx->prl.decryption_failure_counter = 0;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        p_ctx->prl.alert_type = PRL_DEFAULT_ALERT;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2211      	movs	r2, #17
 8001db2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

        ifx_i2c_prl_event_handler(p_ctx,
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fd13 	bl	80027e8 <ifx_i2c_prl_event_handler>
                                  IFX_I2C_STACK_SUCCESS,
                                  p_tx_data, tx_data_len);
        return_status = IFX_I2C_STACK_SUCCESS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	82fb      	strh	r3, [r7, #22]

    } while (FALSE);
    return (return_status);
 8001dc6:	8afb      	ldrh	r3, [r7, #22]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <ifx_i2c_prl_prf>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_prf(ifx_i2c_context_t * p_ctx)
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b09e      	sub	sp, #120	@ 0x78
 8001dd4:	af06      	add	r7, sp, #24
 8001dd6:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001dd8:	f240 1307 	movw	r3, #263	@ 0x107
 8001ddc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint8_t label_input[] = PRL_LABEL;
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <ifx_i2c_prl_prf+0xa4>)
 8001de2:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001de6:	461d      	mov	r5, r3
 8001de8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	7023      	strb	r3, [r4, #0]
    uint8_t secret_input[OPTIGA_SHARED_SECRET_MAX_LENGTH];
    uint16_t shared_secret_length;
    do
    {
        //Reading pre-shared secret from datastore
        return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_shared_secret_id,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	f107 020a 	add.w	r2, r7, #10
 8001dfc:	f107 010c 	add.w	r1, r7, #12
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 ff4d 	bl	8006ca0 <pal_os_datastore_read>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
                                              secret_input,
                                              &shared_secret_length);
        if (PAL_STATUS_SUCCESS != return_status)
 8001e0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <ifx_i2c_prl_prf+0x4e>
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001e14:	f240 1307 	movw	r3, #263	@ 0x107
 8001e18:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
            break;
 8001e1c:	e024      	b.n	8001e68 <ifx_i2c_prl_prf+0x98>
        }
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001e1e:	8978      	ldrh	r0, [r7, #10]
                                                           shared_secret_length,
                                                           label_input,
                                                           sizeof(label_input) - 1,
                                                           p_ctx->prl.random,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3380      	adds	r3, #128	@ 0x80
                                                           sizeof(p_ctx->prl.random),
                                                           p_ctx->prl.session_key,
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	3258      	adds	r2, #88	@ 0x58
        if (PAL_STATUS_SUCCESS != pal_crypt_tls_prf_sha256(NULL, secret_input,
 8001e28:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001e2c:	f107 010c 	add.w	r1, r7, #12
 8001e30:	2528      	movs	r5, #40	@ 0x28
 8001e32:	9504      	str	r5, [sp, #16]
 8001e34:	9203      	str	r2, [sp, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	9202      	str	r2, [sp, #8]
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4623      	mov	r3, r4
 8001e42:	4602      	mov	r2, r0
 8001e44:	2000      	movs	r0, #0
 8001e46:	f004 fd27 	bl	8006898 <pal_crypt_tls_prf_sha256>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <ifx_i2c_prl_prf+0x88>
                                                           sizeof(p_ctx->prl.session_key)))
        {
            return_status = IFX_I2C_HANDSHAKE_ERROR;
 8001e50:	f240 1307 	movw	r3, #263	@ 0x107
 8001e54:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        }
        memset(secret_input, 0, shared_secret_length);
 8001e58:	897b      	ldrh	r3, [r7, #10]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00c fff1 	bl	800ee4a <memset>

    } while (FALSE);
    return (return_status);
 8001e68:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3760      	adds	r7, #96	@ 0x60
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bdb0      	pop	{r4, r5, r7, pc}
 8001e74:	0800fd6c 	.word	0x0800fd6c

08001e78 <ifx_i2c_prl_form_associated_data>:

_STATIC_H void ifx_i2c_prl_form_associated_data(ifx_i2c_context_t * p_ctx,
                                                uint16_t data_len,
                                                uint32_t seq_number,
                                                uint8_t sctr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	460b      	mov	r3, r1
 8001e86:	817b      	strh	r3, [r7, #10]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	727b      	strb	r3, [r7, #9]
    p_ctx->prl.associate_data[0] = sctr;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	7a7a      	ldrb	r2, [r7, #9]
 8001e90:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    optiga_common_set_uint32(&p_ctx->prl.associate_data[1], seq_number);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	33a1      	adds	r3, #161	@ 0xa1
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 f8e7 	bl	800606e <optiga_common_set_uint32>
    p_ctx->prl.associate_data[5] = p_ctx->protocol_version;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
    optiga_common_set_uint16(&p_ctx->prl.associate_data[6], data_len);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	33a6      	adds	r3, #166	@ 0xa6
 8001eb0:	897a      	ldrh	r2, [r7, #10]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 f8c3 	bl	8006040 <optiga_common_set_uint16>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <ifx_i2c_prl_encrypt_msg>:
_STATIC_H optiga_lib_status_t ifx_i2c_prl_encrypt_msg(ifx_i2c_context_t * p_ctx,
                                                      uint8_t * p_data,
                                                      uint16_t data_len,
                                                      uint32_t seq_number,
                                                      uint8_t sctr)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b08e      	sub	sp, #56	@ 0x38
 8001ec6:	af06      	add	r7, sp, #24
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001ed2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001ed6:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len,seq_number,sctr);
 8001ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001edc:	88f9      	ldrh	r1, [r7, #6]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff ffc9 	bl	8001e78 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[PRL_MASTER_ENCRYPTION_NONCE_OFFSET], PRL_MASTER_NONCE_LENGTH);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3378      	adds	r3, #120	@ 0x78
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 f8b9 	bl	800606e <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
                                                                p_data,
                                                                data_len,
                                                                &p_ctx->prl.
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f103 0058 	add.w	r0, r3, #88	@ 0x58
                                                                session_key[PRL_MASTER_ENCRYPTION_KEY_OFFSET],
                                                                nonce_data, PRL_MASTER_NONCE_LENGTH + 
                                                                PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_encrypt_aes128_ccm(NULL,
 8001f06:	88f9      	ldrh	r1, [r7, #6]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	9205      	str	r2, [sp, #20]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	9204      	str	r2, [sp, #16]
 8001f10:	2208      	movs	r2, #8
 8001f12:	9203      	str	r2, [sp, #12]
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2308      	movs	r3, #8
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4603      	mov	r3, r0
 8001f22:	460a      	mov	r2, r1
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	2000      	movs	r0, #0
 8001f28:	f004 fcdc 	bl	80068e4 <pal_crypt_encrypt_aes128_ccm>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <ifx_i2c_prl_encrypt_msg+0x76>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                p_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001f32:	2300      	movs	r3, #0
 8001f34:	83fb      	strh	r3, [r7, #30]
 8001f36:	e000      	b.n	8001f3a <ifx_i2c_prl_encrypt_msg+0x78>
            break;
 8001f38:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001f3a:	8bfb      	ldrh	r3, [r7, #30]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ifx_i2c_prl_decrypt_msg>:
                                                      uint32_t seq_number,
                                                      uint8_t * out_data,
                                                      uint8_t decrypt_key_offset,
                                                      uint8_t decrypt_nonce_offset,
                                                      uint8_t sctr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08e      	sub	sp, #56	@ 0x38
 8001f48:	af06      	add	r7, sp, #24
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8001f54:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001f58:	83fb      	strh	r3, [r7, #30]
    uint8_t nonce_data[PRL_NONCE_LENGTH];
    do
    {
        //Form associated data
        ifx_i2c_prl_form_associated_data(p_ctx, data_len, seq_number, sctr);
 8001f5a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f5e:	88f9      	ldrh	r1, [r7, #6]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff ff88 	bl	8001e78 <ifx_i2c_prl_form_associated_data>
        //Prepare nonce data
        memcpy(nonce_data, &p_ctx->prl.session_key[decrypt_nonce_offset], PRL_MASTER_NONCE_LENGTH);
 8001f68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f6c:	3358      	adds	r3, #88	@ 0x58
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	617b      	str	r3, [r7, #20]
        optiga_common_set_uint32(&nonce_data[PRL_MASTER_NONCE_LENGTH], seq_number);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 f875 	bl	800606e <optiga_common_set_uint32>

        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	3308      	adds	r3, #8
 8001f88:	b299      	uxth	r1, r3
                                                                p_data,
                                                                (data_len + IFX_I2C_PRL_MAC_SIZE),
                                                                &p_ctx->prl.session_key[decrypt_key_offset],
 8001f8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f8e:	3358      	adds	r3, #88	@ 0x58
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	18d0      	adds	r0, r2, r3
                                                                nonce_data,
                                                                PRL_MASTER_NONCE_LENGTH + PRL_SEQ_NUMBER_LENGTH,
                                                                p_ctx->prl.associate_data,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	33a0      	adds	r3, #160	@ 0xa0
        if (PAL_STATUS_SUCCESS != (pal_crypt_decrypt_aes128_ccm(NULL,
 8001f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f9a:	9205      	str	r2, [sp, #20]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	9204      	str	r2, [sp, #16]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	9203      	str	r2, [sp, #12]
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f004 fcb5 	bl	8006926 <pal_crypt_decrypt_aes128_ccm>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <ifx_i2c_prl_decrypt_msg+0x84>
                                                                IFX_I2C_PRL_MAC_SIZE,
                                                                out_data)))
        {
            break;
        }
        return_status = IFX_I2C_STACK_SUCCESS;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	83fb      	strh	r3, [r7, #30]
 8001fc6:	e000      	b.n	8001fca <ifx_i2c_prl_decrypt_msg+0x86>
            break;
 8001fc8:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <ifx_i2c_prl_send_alert>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_send_alert(ifx_i2c_context_t * p_ctx)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = IFX_I2C_STACK_SUCCESS;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	81fb      	strh	r3, [r7, #14]
    do
    {
        p_ctx->prl.state = PRL_STATE_IDLE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
        if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d134      	bne.n	800205c <ifx_i2c_prl_send_alert+0x88>
        {
            p_ctx->prl.decryption_failure_counter++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
            p_ctx->prl.state = PRL_STATE_VERIFY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            //lint --e{835} suppress "Protection bits in SCTR is set to 0 for alert message"
            FORM_SCTR_HEADER(p_ctx, PRL_ALERT_PROTOCOL, p_ctx->prl.alert_type, 0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800201c:	b2da      	uxtb	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
            p_ctx->prl.prl_txrx_buffer[0] = p_ctx->prl.sctr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3354      	adds	r3, #84	@ 0x54
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	2201      	movs	r2, #1
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f001 f8a9 	bl	800319c <ifx_i2c_tl_transceive>
 800204a:	4603      	mov	r3, r0
 800204c:	81fb      	strh	r3, [r7, #14]
                                                  1,
                                                  p_ctx->prl.p_recv_payload_buffer,
                                                  &p_ctx->prl.prl_receive_length);
            *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e00d      	b.n	8002078 <ifx_i2c_prl_send_alert+0xa4>
        }
        else
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002062:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	22ff      	movs	r2, #255	@ 0xff
 8002072:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
            break;
 8002076:	bf00      	nop
        }

    } while (FALSE);
    return (return_status);
 8002078:	89fb      	ldrh	r3, [r7, #14]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <ifx_i2c_prl_do_handshake>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_handshake(ifx_i2c_context_t * p_ctx, const uint8_t * p_data)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b08a      	sub	sp, #40	@ 0x28
 8002086:	af04      	add	r7, sp, #16
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
    uint8_t sseq[4];
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 800208c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002090:	82fb      	strh	r3, [r7, #22]
    uint32_t exit_machine = FALSE;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
    LOG_PRL("[IFX-PRL]: Do Handshake \n");

    do
    {
        switch (p_ctx->prl.hs_state)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 30e3 	ldrb.w	r3, [r3, #227]	@ 0xe3
 800209c:	2b55      	cmp	r3, #85	@ 0x55
 800209e:	f000 8178 	beq.w	8002392 <ifx_i2c_prl_do_handshake+0x310>
 80020a2:	2b55      	cmp	r3, #85	@ 0x55
 80020a4:	f300 817f 	bgt.w	80023a6 <ifx_i2c_prl_do_handshake+0x324>
 80020a8:	2b44      	cmp	r3, #68	@ 0x44
 80020aa:	f000 8100 	beq.w	80022ae <ifx_i2c_prl_do_handshake+0x22c>
 80020ae:	2b44      	cmp	r3, #68	@ 0x44
 80020b0:	f300 8179 	bgt.w	80023a6 <ifx_i2c_prl_do_handshake+0x324>
 80020b4:	2b33      	cmp	r3, #51	@ 0x33
 80020b6:	f000 8095 	beq.w	80021e4 <ifx_i2c_prl_do_handshake+0x162>
 80020ba:	2b33      	cmp	r3, #51	@ 0x33
 80020bc:	f300 8173 	bgt.w	80023a6 <ifx_i2c_prl_do_handshake+0x324>
 80020c0:	2b11      	cmp	r3, #17
 80020c2:	d002      	beq.n	80020ca <ifx_i2c_prl_do_handshake+0x48>
 80020c4:	2b22      	cmp	r3, #34	@ 0x22
 80020c6:	d034      	beq.n	8002132 <ifx_i2c_prl_do_handshake+0xb0>
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
                exit_machine = FALSE;
            }
            break;
            default:
            break;
 80020c8:	e16d      	b.n	80023a6 <ifx_i2c_prl_do_handshake+0x324>
                FORM_SCTR_HEADER(p_ctx,PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_HELLO_MSG, 0);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_txrx_buffer[PRL_PROTOCOL_VERSION_OFFSET] = p_ctx->protocol_version;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 24c1 	ldrb.w	r2, [r3, #1217]	@ 0x4c1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
                p_ctx->prl.prl_receive_length = PRL_SLAVE_HELLO_LENGTH;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2226      	movs	r2, #38	@ 0x26
 80020ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3354      	adds	r3, #84	@ 0x54
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	2202      	movs	r2, #2
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f001 f847 	bl	800319c <ifx_i2c_tl_transceive>
 800210e:	4603      	mov	r3, r0
 8002110:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002112:	8afb      	ldrh	r3, [r7, #22]
 8002114:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002118:	d106      	bne.n	8002128 <ifx_i2c_prl_do_handshake+0xa6>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2255      	movs	r2, #85	@ 0x55
 800211e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002122:	2301      	movs	r3, #1
 8002124:	613b      	str	r3, [r7, #16]
                    break;
 8002126:	e13f      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_HELLO;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2222      	movs	r2, #34	@ 0x22
 800212c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 8002130:	e13a      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                exit_machine = TRUE;
 8002132:	2301      	movs	r3, #1
 8002134:	613b      	str	r3, [r7, #16]
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <ifx_i2c_prl_do_handshake+0xcc>
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	f003 0344 	and.w	r3, r3, #68	@ 0x44
                if ((((p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) ||
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00e      	beq.n	800216c <ifx_i2c_prl_do_handshake+0xea>
                    (1 == p_ctx->prl.prl_receive_length)))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                    (p_data[PRL_SCTR_OFFSET] & (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) &&
 8002154:	2b01      	cmp	r3, #1
 8002156:	d109      	bne.n	800216c <ifx_i2c_prl_do_handshake+0xea>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002158:	f240 1307 	movw	r3, #263	@ 0x107
 800215c:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	22ff      	movs	r2, #255	@ 0xff
 8002162:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
                    break;
 800216a:	e11d      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002172:	2b26      	cmp	r3, #38	@ 0x26
 8002174:	d108      	bne.n	8002188 <ifx_i2c_prl_do_handshake+0x106>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d104      	bne.n	8002188 <ifx_i2c_prl_do_handshake+0x106>
                    (PROTOCOL_VERSION_PRE_SHARED_SECRET != p_data[PRL_PROTOCOL_VERSION_OFFSET]))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	781b      	ldrb	r3, [r3, #0]
                if ((PRL_SLAVE_HELLO_LENGTH != p_ctx->prl.prl_receive_length) || (0 != p_data[PRL_SCTR_OFFSET]) ||
 8002184:	2b01      	cmp	r3, #1
 8002186:	d004      	beq.n	8002192 <ifx_i2c_prl_do_handshake+0x110>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2255      	movs	r2, #85	@ 0x55
 800218c:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 8002190:	e10a      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_data[PRL_SLAVE_HELLO_SEQ_NUMBER_OFFSET]);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	3322      	adds	r3, #34	@ 0x22
 8002196:	4618      	mov	r0, r3
 8002198:	f003 ff8a 	bl	80060b0 <optiga_common_get_uint32>
 800219c:	4602      	mov	r2, r0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	649a      	str	r2, [r3, #72]	@ 0x48
                p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	64da      	str	r2, [r3, #76]	@ 0x4c
                memcpy(p_ctx->prl.random, &p_data[PRL_RANDOM_DATAOFFSET], PRL_RANDOM_DATA_LENGTH);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3302      	adds	r3, #2
 80021b4:	2220      	movs	r2, #32
 80021b6:	4619      	mov	r1, r3
 80021b8:	f00c fe8d 	bl	800eed6 <memcpy>
                return_status = ifx_i2c_prl_prf(p_ctx);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fe07 	bl	8001dd0 <ifx_i2c_prl_prf>
 80021c2:	4603      	mov	r3, r0
 80021c4:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 80021c6:	8afb      	ldrh	r3, [r7, #22]
 80021c8:	f240 1207 	movw	r2, #263	@ 0x107
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d104      	bne.n	80021da <ifx_i2c_prl_do_handshake+0x158>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2255      	movs	r2, #85	@ 0x55
 80021d4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    break;
 80021d8:	e0e6      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_SEND_FINISHED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2233      	movs	r2, #51	@ 0x33
 80021de:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80021e2:	e0e1      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                FORM_SCTR_HEADER(p_ctx, PRL_HANDSHAKE_PROTOCOL, PRL_MASTER_FINISHED_MSG,0);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2208      	movs	r2, #8
 80021e8:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                exit_machine = FALSE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
                memcpy(&p_ctx->prl.prl_txrx_buffer[IFX_I2C_PRL_HEADER_SIZE] ,p_ctx->prl.random, PRL_RANDOM_DATA_LENGTH);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f103 00ad 	add.w	r0, r3, #173	@ 0xad
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3380      	adds	r3, #128	@ 0x80
 80021fa:	2220      	movs	r2, #32
 80021fc:	4619      	mov	r1, r3
 80021fe:	f00c fe6a 	bl	800eed6 <memcpy>
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH + IFX_I2C_PRL_HEADER_SIZE],
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 02cd 	add.w	r2, r3, #205	@ 0xcd
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220c:	4619      	mov	r1, r3
 800220e:	4610      	mov	r0, r2
 8002210:	f003 ff2d 	bl	800606e <optiga_common_set_uint32>
                return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 01ad 	add.w	r1, r3, #173	@ 0xad
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 30e6 	ldrb.w	r3, [r3, #230]	@ 0xe6
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	2224      	movs	r2, #36	@ 0x24
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fe49 	bl	8001ec2 <ifx_i2c_prl_encrypt_msg>
 8002230:	4603      	mov	r3, r0
 8002232:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 8002234:	8afb      	ldrh	r3, [r7, #22]
 8002236:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800223a:	d106      	bne.n	800224a <ifx_i2c_prl_do_handshake+0x1c8>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2255      	movs	r2, #85	@ 0x55
 8002240:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002244:	2301      	movs	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
                    break;
 8002248:	e0ae      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], p_ctx->prl.slave_sequence_number);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f003 ff03 	bl	800606e <optiga_common_set_uint32>
                p_ctx->prl.prl_receive_length = PRL_FINISHED_DATA_LENGTH + 1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2231      	movs	r2, #49	@ 0x31
 800226c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                                                      p_ctx->prl.prl_txrx_buffer,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
                                                      p_ctx->prl.prl_txrx_buffer,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
                return_status = ifx_i2c_tl_transceive(p_ctx,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3354      	adds	r3, #84	@ 0x54
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	2231      	movs	r2, #49	@ 0x31
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ff88 	bl	800319c <ifx_i2c_tl_transceive>
 800228c:	4603      	mov	r3, r0
 800228e:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_SUCCESS != return_status)
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <ifx_i2c_prl_do_handshake+0x222>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2255      	movs	r2, #85	@ 0x55
 800229a:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800229e:	2301      	movs	r3, #1
 80022a0:	613b      	str	r3, [r7, #16]
                    break;
 80022a2:	e081      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.hs_state = PRL_HS_VERIFY_FINISHED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2244      	movs	r2, #68	@ 0x44
 80022a8:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
            break;
 80022ac:	e07c      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d104      	bne.n	80022c0 <ifx_i2c_prl_do_handshake+0x23e>
                    ((PRL_FINISHED_DATA_LENGTH + 1) != p_ctx->prl.prl_receive_length))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
                if ((PRL_MASTER_FINISHED_MSG != p_data[PRL_SCTR_OFFSET]) ||
 80022bc:	2b31      	cmp	r3, #49	@ 0x31
 80022be:	d006      	beq.n	80022ce <ifx_i2c_prl_do_handshake+0x24c>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2255      	movs	r2, #85	@ 0x55
 80022c4:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
                    break;
 80022cc:	e06c      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.master_sequence_number = optiga_common_get_uint32(&p_data[1]);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 feec 	bl	80060b0 <optiga_common_get_uint32>
 80022d8:	4602      	mov	r2, r0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	1d59      	adds	r1, r3, #5
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
                                                        p_ctx->prl.prl_txrx_buffer,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	33a8      	adds	r3, #168	@ 0xa8
                return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 80022f0:	9203      	str	r2, [sp, #12]
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	9202      	str	r2, [sp, #8]
 80022f6:	2210      	movs	r2, #16
 80022f8:	9201      	str	r2, [sp, #4]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	4603      	mov	r3, r0
 80022fe:	2224      	movs	r2, #36	@ 0x24
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff fe1f 	bl	8001f44 <ifx_i2c_prl_decrypt_msg>
 8002306:	4603      	mov	r3, r0
 8002308:	82fb      	strh	r3, [r7, #22]
                if (IFX_I2C_STACK_ERROR == return_status)
 800230a:	8afb      	ldrh	r3, [r7, #22]
 800230c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002310:	d106      	bne.n	8002320 <ifx_i2c_prl_do_handshake+0x29e>
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2255      	movs	r2, #85	@ 0x55
 8002316:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 800231a:	2301      	movs	r3, #1
 800231c:	613b      	str	r3, [r7, #16]
                    break;
 800231e:	e043      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                optiga_common_set_uint32(sseq, p_ctx->prl.master_sequence_number);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f003 fe9f 	bl	800606e <optiga_common_set_uint32>
                if (0 != (memcmp(p_ctx->prl.random, p_ctx->prl.prl_txrx_buffer, PRL_RANDOM_DATA_LENGTH)))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	33a8      	adds	r3, #168	@ 0xa8
 800233a:	2220      	movs	r2, #32
 800233c:	4619      	mov	r1, r3
 800233e:	f00c fd74 	bl	800ee2a <memcmp>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <ifx_i2c_prl_do_handshake+0x2da>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002348:	f240 1307 	movw	r3, #263	@ 0x107
 800234c:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2255      	movs	r2, #85	@ 0x55
 8002352:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002356:	2301      	movs	r3, #1
 8002358:	613b      	str	r3, [r7, #16]
                    break;
 800235a:	e025      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                if (0 != (memcmp(sseq, &p_ctx->prl.prl_txrx_buffer[PRL_RANDOM_DATA_LENGTH], PRL_SEQ_NUMBER_LENGTH)))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8002362:	f107 030c 	add.w	r3, r7, #12
 8002366:	2204      	movs	r2, #4
 8002368:	4618      	mov	r0, r3
 800236a:	f00c fd5e 	bl	800ee2a <memcmp>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <ifx_i2c_prl_do_handshake+0x306>
                    return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002374:	f240 1307 	movw	r3, #263	@ 0x107
 8002378:	82fb      	strh	r3, [r7, #22]
                    p_ctx->prl.hs_state = PRL_HS_ERROR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2255      	movs	r2, #85	@ 0x55
 800237e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    exit_machine = TRUE;
 8002382:	2301      	movs	r3, #1
 8002384:	613b      	str	r3, [r7, #16]
                    break;
 8002386:	e00f      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                p_ctx->prl.negotiation_state = PRL_NEGOTIATION_DONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002390:	e00a      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
                return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002392:	f240 1307 	movw	r3, #263	@ 0x107
 8002396:	82fb      	strh	r3, [r7, #22]
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	22ff      	movs	r2, #255	@ 0xff
 800239c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                exit_machine = FALSE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
            break;
 80023a4:	e000      	b.n	80023a8 <ifx_i2c_prl_do_handshake+0x326>
            break;
 80023a6:	bf00      	nop
        }

    } while (TRUE == exit_machine);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	f43f ae73 	beq.w	8002096 <ifx_i2c_prl_do_handshake+0x14>

    return (return_status);
 80023b0:	8afb      	ldrh	r3, [r7, #22]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <ifx_i2c_prl_do_manage_context>:

_STATIC_H optiga_lib_status_t ifx_i2c_prl_do_manage_context(ifx_i2c_context_t * p_ctx,
                                                            const uint8_t * p_data,
                                                            uint16_t data_len,
                                                            uint8_t * exit_machine)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b094      	sub	sp, #80	@ 0x50
 80023be:	af02      	add	r7, sp, #8
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 80023ca:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80023ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t sctr;

    switch (p_ctx->prl.mc_state)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f893 30e5 	ldrb.w	r3, [r3, #229]	@ 0xe5
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d003      	beq.n	80023e4 <ifx_i2c_prl_do_manage_context+0x2a>
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f000 80eb 	beq.w	80025b8 <ifx_i2c_prl_do_manage_context+0x1fe>
 80023e2:	e1df      	b.n	80027a4 <ifx_i2c_prl_do_manage_context+0x3ea>
    {
        case PRL_MANAGE_CONTEXT_TX_STATE:
        {
            LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
            if (0 != (p_ctx->protection_level & RE_ESTABLISH))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da07      	bge.n	8002400 <ifx_i2c_prl_do_manage_context+0x46>
            {
                p_ctx->prl.state = PRL_STATE_START;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                return_status = IFX_I2C_STACK_SUCCESS;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 80023fe:	e1ed      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
            }

            if (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 8002406:	2b22      	cmp	r3, #34	@ 0x22
 8002408:	d10c      	bne.n	8002424 <ifx_i2c_prl_do_manage_context+0x6a>
            {
                p_ctx->prl.prl_txrx_buffer[0] = PRL_SAVE_CONTEXT_MSG;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2260      	movs	r2, #96	@ 0x60
 800240e:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                p_ctx->prl.prl_receive_length = 1;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_txrx_receive_length = 1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8002422:	e0a6      	b.n	8002572 <ifx_i2c_prl_do_manage_context+0x1b8>
            }
            else if (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
 800242a:	2b11      	cmp	r3, #17
 800242c:	f040 8093 	bne.w	8002556 <ifx_i2c_prl_do_manage_context+0x19c>
            {
                /// Restoring saved context from data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002436:	885b      	ldrh	r3, [r3, #2]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d033      	beq.n	80024a4 <ifx_i2c_prl_do_manage_context+0xea>
                {
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2234      	movs	r2, #52	@ 0x34
 8002440:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800244a:	8858      	ldrh	r0, [r3, #2]
                                                          (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 800244c:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_read(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3354      	adds	r3, #84	@ 0x54
 8002452:	461a      	mov	r2, r3
 8002454:	f004 fc24 	bl	8006ca0 <pal_os_datastore_read>
 8002458:	4603      	mov	r3, r0
 800245a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          &p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_FAILURE == return_status)
 800245e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002462:	2b01      	cmp	r3, #1
 8002464:	f000 81b7 	beq.w	80027d6 <ifx_i2c_prl_do_manage_context+0x41c>
                    {
                        break;
                    }
                    p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800247a:	2b00      	cmp	r3, #0
 800247c:	d130      	bne.n	80024e0 <ifx_i2c_prl_do_manage_context+0x126>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 800249c:	2300      	movs	r3, #0
 800249e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80024a2:	e19b      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                else
                {
                    if (p_ctx->prl.prl_saved_ctx.stored_context_flag == FALSE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d112      	bne.n	80024d4 <ifx_i2c_prl_do_manage_context+0x11a>
                    {
                        p_ctx->prl.state = PRL_STATE_START;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                        *exit_machine = TRUE;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
                        return_status = IFX_I2C_STACK_SUCCESS;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                        break;
 80024d2:	e183      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
                    }
                    else
                    {
                        p_ctx->prl.negotiation_state = p_ctx->prl.prl_saved_ctx.negotiation_state;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                    }
                }
                ///Prepare restore message
                p_ctx->prl.prl_txrx_buffer[PRL_SCTR_OFFSET] = PRL_RESTORE_CONTEXT_MSG;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2268      	movs	r2, #104	@ 0x68
 80024e4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                optiga_common_set_uint32(&p_ctx->prl.prl_txrx_buffer[1], 
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f103 02a9 	add.w	r2, r3, #169	@ 0xa9
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f003 fdba 	bl	800606e <optiga_common_set_uint32>
                                         p_ctx->prl.prl_saved_ctx.save_slave_sequence_number);
                p_ctx->prl.prl_txrx_receive_length = 5;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2205      	movs	r2, #5
 80024fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
                prl_saved_ctx.stored_context_flag = FALSE;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
                p_ctx->prl.prl_receive_length = 5;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2205      	movs	r2, #5
 800250c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.prl_saved_ctx.stored_context_flag = FALSE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                ///Clearing the saved context in data store
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800251e:	885b      	ldrh	r3, [r3, #2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d026      	beq.n	8002572 <ifx_i2c_prl_do_manage_context+0x1b8>
                {
                    memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002524:	f107 0310 	add.w	r3, r7, #16
 8002528:	2234      	movs	r2, #52	@ 0x34
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f00c fc8c 	bl	800ee4a <memset>
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002538:	885b      	ldrh	r3, [r3, #2]
 800253a:	f107 0110 	add.w	r1, r7, #16
 800253e:	2234      	movs	r2, #52	@ 0x34
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fb2f 	bl	8006ba4 <pal_os_datastore_write>
 8002546:	4603      	mov	r3, r0
 8002548:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_FAILURE == return_status)
 800254c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10e      	bne.n	8002572 <ifx_i2c_prl_do_manage_context+0x1b8>
                    {
                        break;
 8002554:	e142      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
                }
            }
            else
            {
                /// Message type invalid
                p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	22ff      	movs	r2, #255	@ 0xff
 800255a:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                p_ctx->prl.state = PRL_STATE_ERROR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2207      	movs	r2, #7
 8002562:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800256c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                break;
 8002570:	e134      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
            }
            return_status = ifx_i2c_tl_transceive(p_ctx,
                                                  p_ctx->prl.prl_txrx_buffer,
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
                                                  p_ctx->prl.prl_txrx_receive_length,
                                                  p_ctx->prl.prl_txrx_buffer,
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
            return_status = ifx_i2c_tl_transceive(p_ctx,
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3354      	adds	r3, #84	@ 0x54
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	4603      	mov	r3, r0
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fe05 	bl	800319c <ifx_i2c_tl_transceive>
 8002592:	4603      	mov	r3, r0
 8002594:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                  &p_ctx->prl.prl_receive_length);
            if (IFX_I2C_STACK_SUCCESS != return_status)
 8002598:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 811c 	bne.w	80027da <ifx_i2c_prl_do_manage_context+0x420>
            {
                break;
            }
            p_ctx->prl.mc_state = PRL_MANAGE_CONTEXT_RX_STATE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 20e5 	strb.w	r2, [r3, #229]	@ 0xe5
            return_status = IFX_I2C_STACK_SUCCESS;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            *exit_machine = FALSE;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80025b6:	e111      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
        case PRL_MANAGE_CONTEXT_RX_STATE:
        {
            *exit_machine = TRUE;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
            sctr = p_data[PRL_SCTR_OFFSET] & PRL_MANAGE_CONTEXT_MASK;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 80025ca:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80025ce:	2b6c      	cmp	r3, #108	@ 0x6c
 80025d0:	d133      	bne.n	800263a <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            if ((PRL_CONTEXT_RESTORED_MSG == sctr) &&
 80025d8:	2b11      	cmp	r3, #17
 80025da:	d12e      	bne.n	800263a <ifx_i2c_prl_do_manage_context+0x280>
                (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation) && (5 == data_len))
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d12b      	bne.n	800263a <ifx_i2c_prl_do_manage_context+0x280>
            {
                ///Restore the saved context to active context structure
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl.prl_saved_ctx,p_ctx->prl);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3308      	adds	r3, #8
 80025ec:	2228      	movs	r2, #40	@ 0x28
 80025ee:	4619      	mov	r1, r3
 80025f0:	f00c fc71 	bl	800eed6 <memcpy>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                p_ctx->prl.restore_context_flag = PRL_RESTORE_DONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
                p_ctx->prl.state = PRL_STATE_TXRX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2204      	movs	r2, #4
 8002634:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002638:	e0ac      	b.n	8002794 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 800263a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	f040 808b 	bne.w	800275a <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
            else if ((PRL_CONTEXT_SAVED_MSG == sctr) &&
 800264a:	2b22      	cmp	r3, #34	@ 0x22
 800264c:	f040 8085 	bne.w	800275a <ifx_i2c_prl_do_manage_context+0x3a0>
                     (IFX_I2C_SESSION_CONTEXT_SAVE == p_ctx->manage_context_operation) && (1 == data_len))
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 8081 	bne.w	800275a <ifx_i2c_prl_do_manage_context+0x3a0>
            {
                p_ctx->prl.prl_saved_ctx.stored_context_flag = TRUE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                COPY_MANAGE_CONTEXT_DATA(p_ctx->prl, p_ctx->prl.prl_saved_ctx);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f103 0008 	add.w	r0, r3, #8
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3358      	adds	r3, #88	@ 0x58
 800266a:	2228      	movs	r2, #40	@ 0x28
 800266c:	4619      	mov	r1, r3
 800266e:	f00c fc32 	bl	800eed6 <memcpy>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 20ea 	ldrb.w	r2, [r3, #234]	@ 0xea
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 20eb 	ldrb.w	r2, [r3, #235]	@ 0xeb
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 20e4 	ldrb.w	r2, [r3, #228]	@ 0xe4
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
                
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026ac:	885b      	ldrh	r3, [r3, #2]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d02e      	beq.n	8002710 <ifx_i2c_prl_do_manage_context+0x356>
                {
                    ///Store active session to data store
                    p_ctx->prl.prl_receive_length = sizeof(p_ctx->prl.prl_saved_ctx);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2234      	movs	r2, #52	@ 0x34
 80026b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80026c0:	8858      	ldrh	r0, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 80026c2:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80026ca:	461a      	mov	r2, r3
 80026cc:	f004 fa6a 	bl	8006ba4 <pal_os_datastore_write>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           p_ctx->prl.prl_receive_length);
                    if (PAL_STATUS_SUCCESS != return_status)
 80026d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d018      	beq.n	8002710 <ifx_i2c_prl_do_manage_context+0x356>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	22ff      	movs	r2, #255	@ 0xff
 80026e2:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2207      	movs	r2, #7
 80026ea:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80026fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
                        break;
 800270e:	e065      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
                    }
                }
                ///Clearing the active session
                CLEAR_SESSION_CONTEXT(p_ctx);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3358      	adds	r3, #88	@ 0x58
 8002714:	2228      	movs	r2, #40	@ 0x28
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f00c fb96 	bl	800ee4a <memset>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	645a      	str	r2, [r3, #68]	@ 0x44
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	649a      	str	r2, [r3, #72]	@ 0x48
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.state = PRL_STATE_IDLE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002758:	e01c      	b.n	8002794 <ifx_i2c_prl_do_manage_context+0x3da>
            }
            else
            {
                memset((uint8_t * )&p_ctx->prl.prl_saved_ctx,0,sizeof(p_ctx->prl.prl_saved_ctx));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2234      	movs	r2, #52	@ 0x34
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f00c fb72 	bl	800ee4a <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 800276c:	885b      	ldrh	r3, [r3, #2]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <ifx_i2c_prl_do_manage_context+0x3d0>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 8002778:	885b      	ldrh	r3, [r3, #2]
                                                           (uint8_t * )&p_ctx->prl.prl_saved_ctx,
 800277a:	68f9      	ldr	r1, [r7, #12]
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 800277c:	2234      	movs	r2, #52	@ 0x34
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fa10 	bl	8006ba4 <pal_os_datastore_write>
 8002784:	4603      	mov	r3, r0
 8002786:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           sizeof(p_ctx->prl.prl_saved_ctx));
                }
                //lint --e{838} suppress "return_status is ignored for pal_os_datastore_write as it's an error scenario"
                return_status = IFX_I2C_STACK_ERROR;
 800278a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800278e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                break;
 8002792:	e023      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
            }
            p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            return_status = IFX_I2C_STACK_SUCCESS;
 800279c:	2300      	movs	r3, #0
 800279e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        }
        break;
 80027a2:	e01b      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
        default:
        {
            ERROR_STATE_PREPARATION(p_ctx,*exit_machine);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	22ff      	movs	r2, #255	@ 0xff
 80027a8:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2207      	movs	r2, #7
 80027b0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80027c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
        }
        break;
 80027d4:	e002      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
                        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <ifx_i2c_prl_do_manage_context+0x422>
                break;
 80027da:	bf00      	nop
    }
  return (return_status);
 80027dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3748      	adds	r7, #72	@ 0x48
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <ifx_i2c_prl_event_handler>:

_STATIC_H void ifx_i2c_prl_event_handler(ifx_i2c_context_t * p_ctx,
                                         optiga_lib_status_t event,
                                         const uint8_t * p_data,
                                         uint16_t data_len)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b097      	sub	sp, #92	@ 0x5c
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607a      	str	r2, [r7, #4]
 80027f2:	461a      	mov	r2, r3
 80027f4:	460b      	mov	r3, r1
 80027f6:	817b      	strh	r3, [r7, #10]
 80027f8:	4613      	mov	r3, r2
 80027fa:	813b      	strh	r3, [r7, #8]
    //if handshake
    uint8_t exit_machine = TRUE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    ifx_i2c_prl_manage_context_t prl_saved_ctx;
    optiga_lib_status_t return_status = IFX_I2C_STACK_ERROR;
 8002802:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002806:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    LOG_PRL("[IFX-PRL]: ifx_i2c_prl_event_handler %d\n", data_len);
    if ((0 != (event & IFX_I2C_STACK_MEM_ERROR)) || (0 != (event & IFX_I2C_STACK_ERROR)))
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <ifx_i2c_prl_event_handler+0x36>
 8002814:	897b      	ldrh	r3, [r7, #10]
 8002816:	f403 7381 	and.w	r3, r3, #258	@ 0x102
 800281a:	2b00      	cmp	r3, #0
 800281c:	d029      	beq.n	8002872 <ifx_i2c_prl_event_handler+0x8a>
    {
        p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	@ 0xff
 8002822:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
        if (PRL_STATE_HANDSHAKE == p_ctx->prl.state)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 800282c:	2b05      	cmp	r3, #5
 800282e:	d105      	bne.n	800283c <ifx_i2c_prl_event_handler+0x54>
        {
            p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f240 1207 	movw	r2, #263	@ 0x107
 8002836:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 800283a:	e016      	b.n	800286a <ifx_i2c_prl_event_handler+0x82>
        }
        else if ((PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state) && (IFX_I2C_STACK_MEM_ERROR != event))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002842:	2b01      	cmp	r3, #1
 8002844:	d10d      	bne.n	8002862 <ifx_i2c_prl_event_handler+0x7a>
 8002846:	897b      	ldrh	r3, [r7, #10]
 8002848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800284c:	d009      	beq.n	8002862 <ifx_i2c_prl_event_handler+0x7a>
        {
            p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002854:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002860:	e003      	b.n	800286a <ifx_i2c_prl_event_handler+0x82>
        }
        else
        {
            p_ctx->prl.return_status = event;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	897a      	ldrh	r2, [r7, #10]
 8002866:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
        }
        p_ctx->prl.state = PRL_STATE_ERROR;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2207      	movs	r2, #7
 800286e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
    }

    do
    {
        //exit_machine = FALSE;
        switch (p_ctx->prl.state)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 30e2 	ldrb.w	r3, [r3, #226]	@ 0xe2
 8002878:	3b01      	subs	r3, #1
 800287a:	2b07      	cmp	r3, #7
 800287c:	f200 8445 	bhi.w	800310a <ifx_i2c_prl_event_handler+0x922>
 8002880:	a201      	add	r2, pc, #4	@ (adr r2, 8002888 <ifx_i2c_prl_event_handler+0xa0>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	080028a9 	.word	0x080028a9
 800288c:	08002917 	.word	0x08002917
 8002890:	08002d29 	.word	0x08002d29
 8002894:	08002a57 	.word	0x08002a57
 8002898:	0800295b 	.word	0x0800295b
 800289c:	08002fc1 	.word	0x08002fc1
 80028a0:	080030db 	.word	0x080030db
 80028a4:	080028c5 	.word	0x080028c5
        {
            case PRL_STATE_IDLE:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_IDLE %d\n", p_ctx->prl.return_status);
                p_ctx->prl.upper_layer_event_handler(p_ctx, p_ctx->prl.return_status, 0, 0);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8b3 1056 	ldrh.w	r1, [r3, #86]	@ 0x56
 80028b2:	2300      	movs	r3, #0
 80028b4:	2200      	movs	r2, #0
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	47a0      	blx	r4
                exit_machine = FALSE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 80028c0:	f000 bc34 	b.w	800312c <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_MANAGE_CONTEXT:
            {
                LOG_PRL("[IFX-PRL]: PRL_STATE_MANAGE_CONTEXT \n");
                return_status = ifx_i2c_prl_do_manage_context(p_ctx, p_data,data_len,&exit_machine);
 80028c4:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff fd74 	bl	80023ba <ifx_i2c_prl_do_manage_context>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_STACK_SUCCESS != return_status)
 80028d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8424 	beq.w	800312a <ifx_i2c_prl_event_handler+0x942>
                {
                  ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	22ff      	movs	r2, #255	@ 0xff
 80028e6:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2207      	movs	r2, #7
 80028ee:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002900:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800290c:	2301      	movs	r3, #1
 800290e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                }
            }
            break;
 8002912:	f000 bc0a 	b.w	800312a <ifx_i2c_prl_event_handler+0x942>
            case PRL_STATE_START:
            {
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 800291c:	b25b      	sxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	db09      	blt.n	8002936 <ifx_i2c_prl_event_handler+0x14e>
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                if (((p_ctx->protection_level & RE_ESTABLISH) ||
 8002928:	2b00      	cmp	r3, #0
 800292a:	d011      	beq.n	8002950 <ifx_i2c_prl_event_handler+0x168>
                    (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state))))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
                    ((p_ctx->protection_level != NO_PROTECTION ) &&
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <ifx_i2c_prl_event_handler+0x168>
                {
                    p_ctx->prl.state =  PRL_STATE_HANDSHAKE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2205      	movs	r2, #5
 800293a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.hs_state = PRL_HS_SEND_HELLO;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2211      	movs	r2, #17
 8002942:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                    p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                else
                {
                    p_ctx->prl.state =  PRL_STATE_TXRX;
                }
            }
            break;
 800294e:	e3ed      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state =  PRL_STATE_TXRX;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2204      	movs	r2, #4
 8002954:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002958:	e3e8      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_HANDSHAKE:
            {
                ///Clearing the saved context in data store
                CLEAR_SAVED_SESSION_CONTEXT(p_ctx->prl.prl_saved_ctx);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3308      	adds	r3, #8
 800295e:	2228      	movs	r2, #40	@ 0x28
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f00c fa71 	bl	800ee4a <memset>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
                memset((uint8_t * )&prl_saved_ctx,0,sizeof(prl_saved_ctx));
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	2234      	movs	r2, #52	@ 0x34
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f00c fa54 	bl	800ee4a <memset>
                if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80029a8:	885b      	ldrh	r3, [r3, #2]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d02e      	beq.n	8002a0c <ifx_i2c_prl_event_handler+0x224>
                {
                    return_status = pal_os_datastore_write(p_ctx->ifx_i2c_datastore_config->datastore_manage_context_id,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
 80029b4:	885b      	ldrh	r3, [r3, #2]
 80029b6:	f107 0110 	add.w	r1, r7, #16
 80029ba:	2234      	movs	r2, #52	@ 0x34
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 f8f1 	bl	8006ba4 <pal_os_datastore_write>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                           (uint8_t * )&prl_saved_ctx,
                                                           sizeof(prl_saved_ctx));
                    if (PAL_STATUS_SUCCESS != return_status)
 80029c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01d      	beq.n	8002a0c <ifx_i2c_prl_event_handler+0x224>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	22ff      	movs	r2, #255	@ 0xff
 80029d4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2207      	movs	r2, #7
 80029dc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80029ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        p_ctx->prl.return_status = IFX_I2C_HANDSHAKE_ERROR;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f240 1207 	movw	r2, #263	@ 0x107
 8002a06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        break;
 8002a0a:	e38f      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    }
                }
                return_status = ifx_i2c_prl_do_handshake(p_ctx,p_data);
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fb37 	bl	8002082 <ifx_i2c_prl_do_handshake>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                if (IFX_I2C_HANDSHAKE_ERROR == return_status)
 8002a1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002a1e:	f240 1207 	movw	r2, #263	@ 0x107
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d109      	bne.n	8002a3a <ifx_i2c_prl_event_handler+0x252>
                {
                    p_ctx->prl.return_status = return_status;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2207      	movs	r2, #7
 8002a34:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    break;
 8002a38:	e378      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                }

                if (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d104      	bne.n	8002a4e <ifx_i2c_prl_event_handler+0x266>
                {
                    p_ctx->prl.state = PRL_STATE_TXRX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2204      	movs	r2, #4
 8002a48:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                else
                {
                    exit_machine = FALSE;
                }
            }
            break;
 8002a4c:	e36e      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    exit_machine = FALSE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002a54:	e36a      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_TXRX:
            {
                //lint --e{835} suppress "Message bits in SCTR is set to 0 for record transaction"
                FORM_SCTR_HEADER(p_ctx,
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	f043 0320 	orr.w	r3, r3, #32
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f883 20e6 	strb.w	r2, [r3, #230]	@ 0xe6
                                 PRL_RECORD_EXCHANGE_PROTOCOL,
                                 0,
                                 (p_ctx->protection_level & PRL_PROTECTION_MASK));
                ///Preparing receive length based on the protection level
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d006      	beq.n	8002a8e <ifx_i2c_prl_event_handler+0x2a6>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002a86:	f003 0303 	and.w	r3, r3, #3
                if ((SLAVE_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d122      	bne.n	8002ad4 <ifx_i2c_prl_event_handler+0x2ec>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	3301      	adds	r3, #1
 8002a94:	f113 0f10 	cmn.w	r3, #16
 8002a98:	d914      	bls.n	8002ac4 <ifx_i2c_prl_event_handler+0x2dc>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.save_slave_sequence_number + 1)) &&
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10f      	bne.n	8002ac4 <ifx_i2c_prl_event_handler+0x2dc>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2205      	movs	r2, #5
 8002ab0:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2211      	movs	r2, #17
 8002abe:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002ac2:	e333      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    }
                    *p_ctx->prl.p_recv_payload_buffer_length += (IFX_I2C_PRL_MAC_SIZE + IFX_I2C_PRL_HEADER_SIZE);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	881a      	ldrh	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ace:	320d      	adds	r2, #13
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	801a      	strh	r2, [r3, #0]
                }
                p_ctx->prl.saved_sctr = p_ctx->prl.sctr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f893 20e6 	ldrb.w	r2, [r3, #230]	@ 0xe6
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f883 20e7 	strb.w	r2, [r3, #231]	@ 0xe7

                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d007      	beq.n	8002afe <ifx_i2c_prl_event_handler+0x316>
                    (FULL_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8002af4:	f003 0303 	and.w	r3, r3, #3
                if ((MASTER_PROTECTION == (p_ctx->protection_level & PRL_PROTECTION_MASK)) ||
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	f040 80c2 	bne.w	8002c82 <ifx_i2c_prl_event_handler+0x49a>
                {
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	3301      	adds	r3, #1
 8002b04:	f113 0f10 	cmn.w	r3, #16
 8002b08:	d914      	bls.n	8002b34 <ifx_i2c_prl_event_handler+0x34c>
                        (FALSE == p_ctx->prl.trans_repeat_status))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
                    if ((PRL_SEQUENCE_THRESHOLD < (p_ctx->prl.master_sequence_number + 1)) &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <ifx_i2c_prl_event_handler+0x34c>
                    {
                        DO_NEGOTIATION(p_ctx,exit_machine);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2211      	movs	r2, #17
 8002b2e:	f883 20e3 	strb.w	r2, [r3, #227]	@ 0xe3
                        break;
 8002b32:	e2fb      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    }
                    ///Decrypt messag to use for retansmit
                    if (PRL_INTEGRITY_VIOLATED_ALERT_MSG == p_ctx->prl.alert_type)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d13f      	bne.n	8002bbe <ifx_i2c_prl_event_handler+0x3d6>
                    {
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b42:	1d59      	adds	r1, r3, #5
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8b3 0050 	ldrh.w	r0, [r3, #80]	@ 0x50
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
                                                                p_ctx->prl.actual_payload_length,
                                                                p_ctx->prl.master_sequence_number,
                                                                &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                        return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002b52:	3305      	adds	r3, #5
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002b5a:	9203      	str	r2, [sp, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	9202      	str	r2, [sp, #8]
 8002b60:	2200      	movs	r2, #0
 8002b62:	9201      	str	r2, [sp, #4]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	4623      	mov	r3, r4
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff f9ea 	bl	8001f44 <ifx_i2c_prl_decrypt_msg>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                                PRL_MASTER_ENCRYPTION_KEY_OFFSET,
                                                                PRL_MASTER_ENCRYPTION_NONCE_OFFSET,
                                                                p_ctx->prl.saved_sctr);
                        if (IFX_I2C_STACK_ERROR == return_status)
 8002b76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002b7a:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002b7e:	d118      	bne.n	8002bb2 <ifx_i2c_prl_event_handler+0x3ca>
                        {
                            ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	22ff      	movs	r2, #255	@ 0xff
 8002b84:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            break;
 8002bb0:	e2bc      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                        }
                        *p_ctx->prl.p_recv_payload_buffer_length = p_ctx->prl.prl_receive_length;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	f8b2 2054 	ldrh.w	r2, [r2, #84]	@ 0x54
 8002bbc:	801a      	strh	r2, [r3, #0]
                    }

                    p_ctx->prl.master_sequence_number += 1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	645a      	str	r2, [r3, #68]	@ 0x44
                    p_ctx->prl.prl_header_offset = IFX_I2C_PRL_HEADER_SIZE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2205      	movs	r2, #5
 8002bcc:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    optiga_common_set_uint32(&p_ctx->prl.p_actual_payload[1], p_ctx->prl.master_sequence_number);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4610      	mov	r0, r2
 8002bde:	f003 fa46 	bl	800606e <optiga_common_set_uint32>
                    //Preparing encription data
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
                                                            &p_ctx->prl.p_actual_payload[IFX_I2C_PRL_HEADER_SIZE],
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_prl_encrypt_msg(p_ctx,
 8002be6:	1d59      	adds	r1, r3, #5
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f7ff f960 	bl	8001ec2 <ifx_i2c_prl_encrypt_msg>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                            p_ctx->prl.actual_payload_length,
                                                            p_ctx->prl.master_sequence_number,
                                                            p_ctx->prl.saved_sctr);
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002c08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002c0c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002c10:	d118      	bne.n	8002c44 <ifx_i2c_prl_event_handler+0x45c>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	22ff      	movs	r2, #255	@ 0xff
 8002c16:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002c30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002c42:	e273      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    }
                    p_ctx->prl.p_actual_payload[PRL_SCTR_OFFSET] = p_ctx->prl.sctr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002c4e:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
                                                          p_ctx->prl.p_actual_payload,
                                                          p_ctx->prl.actual_payload_length + 
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset + IFX_I2C_PRL_MAC_SIZE,
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                                                          p_ctx->prl.actual_payload_length + 
 8002c60:	4413      	add	r3, r2
 8002c62:	b29b      	uxth	r3, r3
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002c64:	3308      	adds	r3, #8
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4603      	mov	r3, r0
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 fa91 	bl	800319c <ifx_i2c_tl_transceive>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002c80:	e021      	b.n	8002cc6 <ifx_i2c_prl_event_handler+0x4de>
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                else
                {
                    ///Sending plan data
                    p_ctx->prl.prl_header_offset = 1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 20e9 	strb.w	r2, [r3, #233]	@ 0xe9
                    p_ctx->prl.p_actual_payload[4] = p_ctx->prl.sctr;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	3304      	adds	r3, #4
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	f892 20e6 	ldrb.w	r2, [r2, #230]	@ 0xe6
 8002c96:	701a      	strb	r2, [r3, #0]
                    return_status = ifx_i2c_tl_transceive(p_ctx,
                                                          &p_ctx->prl.p_actual_payload[4],
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002c9c:	1d19      	adds	r1, r3, #4
                                                          p_ctx->prl.actual_payload_length + 
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                                                          p_ctx->prl.prl_header_offset,
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
                    return_status = ifx_i2c_tl_transceive(p_ctx,
 8002caa:	4413      	add	r3, r2
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fa6e 	bl	800319c <ifx_i2c_tl_transceive>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                                                          p_ctx->prl.p_recv_payload_buffer,
                                                          p_ctx->prl.p_recv_payload_buffer_length);
                }
                if (IFX_I2C_STACK_ERROR == return_status)
 8002cc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002cca:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002cce:	d11d      	bne.n	8002d0c <ifx_i2c_prl_event_handler+0x524>
                {
                    ERROR_STATE_PREPARATION(p_ctx,  exit_machine);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	22ff      	movs	r2, #255	@ 0xff
 8002cd4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2207      	movs	r2, #7
 8002cdc:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002cee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002d06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    break;
 8002d0a:	e20f      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                }
                p_ctx->prl.prl_receive_length = *p_ctx->prl.p_recv_payload_buffer_length;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	881a      	ldrh	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
                p_ctx->prl.state = PRL_STATE_VERIFY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                exit_machine = FALSE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8002d26:	e201      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_VERIFY:
            {
                p_ctx->prl.slave_sequence_number = optiga_common_get_uint32(&p_ctx->prl.p_recv_payload_buffer[1]);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 f9be 	bl	80060b0 <optiga_common_get_uint32>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	649a      	str	r2, [r3, #72]	@ 0x48
                if (0 == data_len)
 8002d3a:	893b      	ldrh	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d118      	bne.n	8002d72 <ifx_i2c_prl_event_handler+0x58a>
                {
                    ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	22ff      	movs	r2, #255	@ 0xff
 8002d44:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002d5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002d70:	e1dc      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                }
                else if (0 != (p_data[PRL_SCTR_OFFSET] & PRL_ALERT_PROTOCOL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d040      	beq.n	8002e00 <ifx_i2c_prl_event_handler+0x618>
                {
                    //Check invalid message
                    //lint --e{835} suppress "Macros are defined as 0x00 and is kept for future enhancements"
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b40      	cmp	r3, #64	@ 0x40
 8002d84:	d003      	beq.n	8002d8e <ifx_i2c_prl_event_handler+0x5a6>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	781b      	ldrb	r3, [r3, #0]
                    if (((p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_FATAL_ALERT_MSG)) &&
 8002d8a:	2b44      	cmp	r3, #68	@ 0x44
 8002d8c:	d10c      	bne.n	8002da8 <ifx_i2c_prl_event_handler+0x5c0>
                        (p_data[PRL_SCTR_OFFSET] != (PRL_ALERT_PROTOCOL | PRL_INTEGRITY_VIOLATED_ALERT_MSG))) ||
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d004      	beq.n	8002d9e <ifx_i2c_prl_event_handler+0x5b6>
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d004      	beq.n	8002da8 <ifx_i2c_prl_event_handler+0x5c0>
                        (PRL_TRANS_REPEAT == p_ctx->prl.data_retransmit_counter))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
                        ((1 != data_len) && (PRL_NEGOTIATION_DONE == p_ctx->prl.negotiation_state)) ||
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d109      	bne.n	8002dbc <ifx_i2c_prl_event_handler+0x5d4>
                    {
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002dae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002dba:	e018      	b.n	8002dee <ifx_i2c_prl_event_handler+0x606>
                    }
                    //After restore operation if invalid message received
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10e      	bne.n	8002de4 <ifx_i2c_prl_event_handler+0x5fc>
                             (IFX_I2C_SESSION_CONTEXT_RESTORE == p_ctx->manage_context_operation))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 34c2 	ldrb.w	r3, [r3, #1218]	@ 0x4c2
                    else if ((PRL_RESTORE_DONE == p_ctx->prl.restore_context_flag) &&
 8002dcc:	2b11      	cmp	r3, #17
 8002dce:	d109      	bne.n	8002de4 <ifx_i2c_prl_event_handler+0x5fc>
                    {
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002dde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002de2:	e004      	b.n	8002dee <ifx_i2c_prl_event_handler+0x606>
                    }
                    else
                    {
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002dea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    }
                    p_ctx->prl.state = PRL_STATE_ALERT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2206      	movs	r2, #6
 8002df2:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	22ff      	movs	r2, #255	@ 0xff
 8002dfa:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 8002dfe:	e195      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                else if (p_data[PRL_SCTR_OFFSET] != p_ctx->prl.saved_sctr)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 30e7 	ldrb.w	r3, [r3, #231]	@ 0xe7
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d018      	beq.n	8002e40 <ifx_i2c_prl_event_handler+0x658>
                    ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	22ff      	movs	r2, #255	@ 0xff
 8002e12:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2207      	movs	r2, #7
 8002e1a:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    break;
 8002e3e:	e175      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d006      	beq.n	8002e5a <ifx_i2c_prl_event_handler+0x672>
                         ((uint8_t)FULL_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f003 0303 	and.w	r3, r3, #3
                else if (((uint8_t)SLAVE_PROTECTION == (p_data[PRL_SCTR_OFFSET] & PRL_PROTECTION_MASK)) ||
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	f040 8082 	bne.w	8002f5e <ifx_i2c_prl_event_handler+0x776>
                    if (data_len <= (IFX_I2C_PRL_HEADER_SIZE + IFX_I2C_PRL_MAC_SIZE))
 8002e5a:	893b      	ldrh	r3, [r7, #8]
 8002e5c:	2b0d      	cmp	r3, #13
 8002e5e:	d818      	bhi.n	8002e92 <ifx_i2c_prl_event_handler+0x6aa>
                        ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	22ff      	movs	r2, #255	@ 0xff
 8002e64:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002e7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002e90:	e14c      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    else if ((p_ctx->prl.slave_sequence_number > (p_ctx->prl.save_slave_sequence_number + PRL_TRANS_REPEAT))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9a:	3303      	adds	r3, #3
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d805      	bhi.n	8002eac <ifx_i2c_prl_event_handler+0x6c4>
                             || (p_ctx->prl.slave_sequence_number <= p_ctx->prl.save_slave_sequence_number ))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d818      	bhi.n	8002ede <ifx_i2c_prl_event_handler+0x6f6>
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	22ff      	movs	r2, #255	@ 0xff
 8002eb0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002eca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8002edc:	e126      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.save_slave_sequence_number = p_ctx->prl.slave_sequence_number;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
                    *p_ctx->prl.p_recv_payload_buffer_length = *p_ctx->prl.p_recv_payload_buffer_length -
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	3a0d      	subs	r2, #13
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	801a      	strh	r2, [r3, #0]
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	1d59      	adds	r1, r3, #5
                                                            (*p_ctx->prl.p_recv_payload_buffer_length),
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f00:	8818      	ldrh	r0, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                                                            &p_ctx->prl.p_recv_payload_buffer[IFX_I2C_PRL_HEADER_SIZE],
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    return_status = ifx_i2c_prl_decrypt_msg(p_ctx,
 8002f0a:	3305      	adds	r3, #5
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	f892 20e7 	ldrb.w	r2, [r2, #231]	@ 0xe7
 8002f12:	9203      	str	r2, [sp, #12]
 8002f14:	2224      	movs	r2, #36	@ 0x24
 8002f16:	9202      	str	r2, [sp, #8]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	9201      	str	r2, [sp, #4]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	4623      	mov	r3, r4
 8002f20:	4602      	mov	r2, r0
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff f80e 	bl	8001f44 <ifx_i2c_prl_decrypt_msg>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002f2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002f32:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8002f36:	d108      	bne.n	8002f4a <ifx_i2c_prl_event_handler+0x762>
                        p_ctx->prl.state = PRL_STATE_ALERT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2206      	movs	r2, #6
 8002f3c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2204      	movs	r2, #4
 8002f44:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        break;
 8002f48:	e0f0      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.state = PRL_STATE_IDLE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    if (IFX_I2C_STACK_ERROR == return_status)
 8002f5a:	bf00      	nop
            break;
 8002f5c:	e0e6      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                else if (data_len <= 1)
 8002f5e:	893b      	ldrh	r3, [r7, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d81c      	bhi.n	8002f9e <ifx_i2c_prl_event_handler+0x7b6>
                    p_ctx->prl.state = PRL_STATE_ERROR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2207      	movs	r2, #7
 8002f68:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                    p_ctx->prl.alert_type = PRL_INVALID_ALERT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    if (PRL_NEGOTIATION_NOT_DONE == p_ctx->prl.negotiation_state)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <ifx_i2c_prl_event_handler+0x7a2>
                        p_ctx->prl.return_status = IFX_I2C_STACK_ERROR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
            break;
 8002f88:	e0d0      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                        p_ctx->prl.return_status = IFX_I2C_SESSION_ERROR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002f90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                        p_ctx->prl.negotiation_state = PRL_NEGOTIATION_NOT_DONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
            break;
 8002f9c:	e0c6      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    *p_ctx->prl.p_recv_payload_buffer_length -= 1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	3a01      	subs	r2, #1
 8002faa:	b292      	uxth	r2, r2
 8002fac:	801a      	strh	r2, [r3, #0]
                    p_ctx->prl.return_status = IFX_I2C_STACK_SUCCESS;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8002fbe:	e0b5      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ALERT:
            {
                if ((PRL_INTEGRITY_VIOLATED_ALERT_MSG | PRL_ALERT_PROTOCOL) == p_data[PRL_SCTR_OFFSET])
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b44      	cmp	r3, #68	@ 0x44
 8002fc6:	d166      	bne.n	8003096 <ifx_i2c_prl_event_handler+0x8ae>
                {
                    if ((1 !=  data_len) || (p_ctx->prl.data_retransmit_counter >= PRL_TRANS_REPEAT))
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d104      	bne.n	8002fd8 <ifx_i2c_prl_event_handler+0x7f0>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d918      	bls.n	800300a <ifx_i2c_prl_event_handler+0x822>
                    {
                        ERROR_STATE_PREPARATION(p_ctx,exit_machine);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	22ff      	movs	r2, #255	@ 0xff
 8002fdc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2207      	movs	r2, #7
 8002fe4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8002ff6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                        break;
 8003008:	e090      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    }
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d004      	beq.n	800301e <ifx_i2c_prl_event_handler+0x836>
                             (FULL_PROTECTION == p_ctx->protection_level))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 34c0 	ldrb.w	r3, [r3, #1216]	@ 0x4c0
                    else if ((MASTER_PROTECTION == p_ctx->protection_level) ||
 800301a:	2b03      	cmp	r3, #3
 800301c:	d136      	bne.n	800308c <ifx_i2c_prl_event_handler+0x8a4>
                    {
                        p_ctx->prl.data_retransmit_counter++;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
                        p_ctx->prl.trans_repeat_status = TRUE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
                        if (p_ctx->prl.data_retransmit_counter > PRL_TRANS_REPEAT)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 30eb 	ldrb.w	r3, [r3, #235]	@ 0xeb
 800303c:	2b03      	cmp	r3, #3
 800303e:	d91c      	bls.n	800307a <ifx_i2c_prl_event_handler+0x892>
                        {
                            ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	22ff      	movs	r2, #255	@ 0xff
 8003044:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2207      	movs	r2, #7
 800304c:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800305e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                            p_ctx->prl.state = PRL_STATE_IDLE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                            break;
 8003078:	e058      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                        }
                        p_ctx->prl.alert_type = PRL_INTEGRITY_VIOLATED_ALERT_MSG;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2204      	movs	r2, #4
 800307e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                        p_ctx->prl.state = PRL_STATE_TXRX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2204      	movs	r2, #4
 8003086:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
                    }
                    p_ctx->prl.state = PRL_STATE_ERROR;
                }
            }
            break;
 800308a:	e04f      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                      p_ctx->prl.state = PRL_STATE_ERROR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2207      	movs	r2, #7
 8003090:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003094:	e04a      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    if (PRL_TRANS_REPEAT == p_ctx->prl.decryption_failure_counter)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 30ea 	ldrb.w	r3, [r3, #234]	@ 0xea
 800309c:	2b03      	cmp	r3, #3
 800309e:	d117      	bne.n	80030d0 <ifx_i2c_prl_event_handler+0x8e8>
                      ERROR_STATE_PREPARATION(p_ctx, exit_machine);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	22ff      	movs	r2, #255	@ 0xff
 80030a4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2207      	movs	r2, #7
 80030ac:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7284 	mov.w	r2, #264	@ 0x108
 80030be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                    p_ctx->prl.state = PRL_STATE_ERROR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2207      	movs	r2, #7
 80030d4:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 80030d8:	e028      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            case PRL_STATE_ERROR:
            {
                if (PRL_INVALID_ALERT != p_ctx->prl.alert_type)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80030e0:	2bff      	cmp	r3, #255	@ 0xff
 80030e2:	d00d      	beq.n	8003100 <ifx_i2c_prl_event_handler+0x918>
                {
                    return_status = ifx_i2c_prl_send_alert(p_ctx);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7fe ff75 	bl	8001fd4 <ifx_i2c_prl_send_alert>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                    p_ctx->prl.alert_type = (uint8_t)PRL_INVALID_ALERT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	22ff      	movs	r2, #255	@ 0xff
 80030f4:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
                    exit_machine = FALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
                else
                {
                    p_ctx->prl.state = PRL_STATE_IDLE;
                }
            }
            break;
 80030fe:	e015      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
                    p_ctx->prl.state = PRL_STATE_IDLE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
            break;
 8003108:	e010      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            default:
            {
                p_ctx->prl.state = PRL_STATE_IDLE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 20e2 	strb.w	r2, [r3, #226]	@ 0xe2
                p_ctx->prl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003116:	2300      	movs	r3, #0
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	47a0      	blx	r4
                exit_machine = FALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            }
            break;
 8003128:	e000      	b.n	800312c <ifx_i2c_prl_event_handler+0x944>
            break;
 800312a:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 800312c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003130:	2b01      	cmp	r3, #1
 8003132:	f43f ab9e 	beq.w	8002872 <ifx_i2c_prl_event_handler+0x8a>
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	374c      	adds	r7, #76	@ 0x4c
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 8003152:	4911      	ldr	r1, [pc, #68]	@ (8003198 <ifx_i2c_tl_init+0x58>)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fbb5 	bl	80008c4 <ifx_i2c_dl_init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <ifx_i2c_tl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 8003160:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003164:	e014      	b.n	8003190 <ifx_i2c_tl_init+0x50>
    }
    p_ctx->tl.initialization_state = TRUE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
    p_ctx->tl.upper_layer_event_handler = handler;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    p_ctx->tl.state = TL_STATE_IDLE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 328a 	ldrh.w	r3, [r3, #650]	@ 0x28a
 8003184:	3b06      	subs	r3, #6
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a

    return (IFX_I2C_STACK_SUCCESS);
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	08003481 	.word	0x08003481

0800319c <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80031ac:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80031b0:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d041      	beq.n	800323c <ifx_i2c_tl_transceive+0xa0>
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d03e      	beq.n	800323c <ifx_i2c_tl_transceive+0xa0>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d138      	bne.n	800323a <ifx_i2c_tl_transceive+0x9e>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 80031d0:	f003 fee1 	bl	8006f96 <pal_os_timer_get_time_in_milliseconds>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        p_ctx->tl.p_actual_packet = p_packet;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        p_ctx->tl.actual_packet_length = packet_len;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
        p_ctx->tl.packet_offset = 0;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        p_ctx->tl.total_recv_length = 0;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
        p_ctx->tl.chaining_error_count = 0;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
        p_ctx->tl.master_chaining_error_count = 0;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
        p_ctx->tl.transmission_completed = 0;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800322a:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f866 	bl	8003300 <ifx_i2c_tl_send_next_fragment>
 8003234:	4603      	mov	r3, r0
 8003236:	82fb      	strh	r3, [r7, #22]
 8003238:	e000      	b.n	800323c <ifx_i2c_tl_transceive+0xa0>
            break;
 800323a:	bf00      	nop
    } while (FALSE);
    return (status);
 800323c:	8afb      	ldrh	r3, [r7, #22]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003254:	2b01      	cmp	r3, #1
 8003256:	d002      	beq.n	800325e <ifx_i2c_tl_resend_packets+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003258:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800325c:	e00f      	b.n	800327e <ifx_i2c_tl_resend_packets+0x38>
    }

    p_ctx->tl.packet_offset = 0;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    p_ctx->tl.total_recv_length = 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    p_ctx->tl.state = TL_STATE_TX;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f842 	bl	8003300 <ifx_i2c_tl_send_next_fragment>
 800327c:	4603      	mov	r3, r0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 8003294:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <ifx_i2c_tl_calculate_pctr+0x38>
 80032b0:	897a      	ldrh	r2, [r7, #10]
 80032b2:	89bb      	ldrh	r3, [r7, #12]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d802      	bhi.n	80032be <ifx_i2c_tl_calculate_pctr+0x38>
    {
        pctr = TL_CHAINING_NO;
 80032b8:	2300      	movs	r3, #0
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e019      	b.n	80032f2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <ifx_i2c_tl_calculate_pctr+0x50>
 80032c8:	897a      	ldrh	r2, [r7, #10]
 80032ca:	89bb      	ldrh	r3, [r7, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <ifx_i2c_tl_calculate_pctr+0x50>
    {
        pctr = TL_CHAINING_FIRST;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e00d      	b.n	80032f2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <ifx_i2c_tl_calculate_pctr+0x68>
 80032e0:	897a      	ldrh	r2, [r7, #10]
 80032e2:	89bb      	ldrh	r3, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d902      	bls.n	80032ee <ifx_i2c_tl_calculate_pctr+0x68>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 80032e8:	2302      	movs	r3, #2
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e001      	b.n	80032f2 <ifx_i2c_tl_calculate_pctr+0x6c>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 80032ee:	2304      	movs	r3, #4
 80032f0:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 800330e:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ffb8 	bl	8003286 <ifx_i2c_tl_calculate_pctr>
 8003316:	4603      	mov	r3, r0
 8003318:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	89fb      	ldrh	r3, [r7, #14]
 800332c:	429a      	cmp	r2, r3
 800332e:	da07      	bge.n	8003340 <ifx_i2c_tl_send_next_fragment+0x40>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8003340:	7b7b      	ldrb	r3, [r7, #13]
 8003342:	f043 0308 	orr.w	r3, r3, #8
 8003346:	b2da      	uxtb	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f203 238e 	addw	r3, r3, #654	@ 0x28e
 8003354:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 8003362:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8003364:	89fa      	ldrh	r2, [r7, #14]
 8003366:	4619      	mov	r1, r3
 8003368:	f00b fdb5 	bl	800eed6 <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 8003372:	89fb      	ldrh	r3, [r7, #14]
 8003374:	4413      	add	r3, r2
 8003376:	b29a      	uxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 800337e:	89fb      	ldrh	r3, [r7, #14]
 8003380:	3301      	adds	r3, #1
 8003382:	b29b      	uxth	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fada 	bl	8000940 <ifx_i2c_dl_send_frame>
 800338c:	4603      	mov	r3, r0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 800339e:	2301      	movs	r3, #1
 80033a0:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2207      	movs	r2, #7
 80033a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    p_ctx->tl.total_recv_length = 0;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 80033b2:	89fb      	ldrh	r3, [r7, #14]
 80033b4:	4619      	mov	r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fd fac2 	bl	8000940 <ifx_i2c_dl_send_frame>
 80033bc:	4603      	mov	r3, r0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	460a      	mov	r2, r1
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 80033d8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80033dc:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b07      	cmp	r3, #7
 80033e2:	d00b      	beq.n	80033fc <ifx_i2c_tl_check_chaining_error+0x34>
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <ifx_i2c_tl_check_chaining_error+0x34>
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d005      	beq.n	80033fc <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d002      	beq.n	80033fc <ifx_i2c_tl_check_chaining_error+0x34>
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d110      	bne.n	800341e <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a0b      	ldr	r2, [pc, #44]	@ (800342c <ifx_i2c_tl_check_chaining_error+0x64>)
 8003400:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003404:	79ba      	ldrb	r2, [r7, #6]
 8003406:	429a      	cmp	r2, r3
 8003408:	d007      	beq.n	800341a <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	4a07      	ldr	r2, [pc, #28]	@ (800342c <ifx_i2c_tl_check_chaining_error+0x64>)
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8003414:	79ba      	ldrb	r2, [r7, #6]
 8003416:	429a      	cmp	r2, r3
 8003418:	d101      	bne.n	800341e <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 800341a:	2300      	movs	r3, #0
 800341c:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 800341e:	89fb      	ldrh	r3, [r7, #14]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	08010c74 	.word	0x08010c74

08003430 <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 800343c:	2300      	movs	r3, #0
 800343e:	81fb      	strh	r3, [r7, #14]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	737b      	strb	r3, [r7, #13]
    //lint --e{774} suppress "This value changes based on presentation layer macro"
    if (0 != IFX_I2C_PRESENCE_BIT_CHECK)
    {
        if ((FALSE == p_ctx->tl.initialization_state) && ((TL_CHAINING_NO == (pctr & TL_PCTR_CHAIN_MASK))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10f      	bne.n	8003472 <presence_bit_check+0x42>
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	2b00      	cmp	r3, #0
 800345a:	d004      	beq.n	8003466 <presence_bit_check+0x36>
            || (TL_CHAINING_FIRST == (pctr & TL_PCTR_CHAIN_MASK))))
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <presence_bit_check+0x42>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8003466:	7b7b      	ldrb	r3, [r7, #13]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d002      	beq.n	8003472 <presence_bit_check+0x42>
            {
                return_status = IFX_I2C_STACK_ERROR;
 800346c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003470:	81fb      	strh	r3, [r7, #14]
            {
                return_status = IFX_I2C_STACK_ERROR;
            }
        }
    }
    return (return_status);
 8003472:	89fb      	ldrh	r3, [r7, #14]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	460b      	mov	r3, r1
 800348e:	817b      	strh	r3, [r7, #10]
 8003490:	4613      	mov	r3, r2
 8003492:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 80034b4:	897b      	ldrh	r3, [r7, #10]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <ifx_i2c_dl_event_handler+0x50>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2206      	movs	r2, #6
 80034c2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80034cc:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
        }
        if (0 != data_len)
 80034d0:	893b      	ldrh	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <ifx_i2c_dl_event_handler+0x78>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	4619      	mov	r1, r3
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff ffa8 	bl	8003430 <presence_bit_check>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <ifx_i2c_dl_event_handler+0x78>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2206      	movs	r2, #6
 80034ea:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80034f4:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
        switch (p_ctx->tl.state)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 310e 	ldrb.w	r3, [r3, #270]	@ 0x10e
 8003506:	3b01      	subs	r3, #1
 8003508:	2b07      	cmp	r3, #7
 800350a:	f200 81d0 	bhi.w	80038ae <ifx_i2c_dl_event_handler+0x42e>
 800350e:	a201      	add	r2, pc, #4	@ (adr r2, 8003514 <ifx_i2c_dl_event_handler+0x94>)
 8003510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003514:	08003535 	.word	0x08003535
 8003518:	0800354b 	.word	0x0800354b
 800351c:	080038af 	.word	0x080038af
 8003520:	080035e1 	.word	0x080035e1
 8003524:	08003727 	.word	0x08003727
 8003528:	0800387d 	.word	0x0800387d
 800352c:	0800383b 	.word	0x0800383b
 8003530:	080037df 	.word	0x080037df
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 8003534:	2300      	movs	r3, #0
 8003536:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 800353e:	2300      	movs	r3, #0
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	47a0      	blx	r4
            }
            break;
 8003548:	e1c3      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d040      	beq.n	80035d6 <ifx_i2c_dl_event_handler+0x156>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8b3 2108 	ldrh.w	r2, [r3, #264]	@ 0x108
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8003560:	429a      	cmp	r2, r3
 8003562:	d215      	bcs.n	8003590 <ifx_i2c_dl_event_handler+0x110>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8003564:	7dbb      	ldrb	r3, [r7, #22]
 8003566:	2b07      	cmp	r3, #7
 8003568:	d104      	bne.n	8003574 <ifx_i2c_dl_event_handler+0xf4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2208      	movs	r2, #8
 800356e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003572:	e1ae      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8003574:	893b      	ldrh	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <ifx_i2c_dl_event_handler+0x104>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2206      	movs	r2, #6
 800357e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003582:	e1a6      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 8003584:	2300      	movs	r3, #0
 8003586:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff feb9 	bl	8003300 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 800358e:	e19f      	b.n	80038d0 <ifx_i2c_dl_event_handler+0x450>
                        p_ctx->tl.state = TL_STATE_RX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2204      	movs	r2, #4
 8003594:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        p_ctx->tl.total_recv_length = 0;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                        p_ctx->tl.transmission_completed = 1;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2112 	strb.w	r2, [r3, #274]	@ 0x112
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80035b0:	897b      	ldrh	r3, [r7, #10]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 818a 	bne.w	80038d0 <ifx_i2c_dl_event_handler+0x450>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7fd f9ef 	bl	80009a0 <ifx_i2c_dl_receive_frame>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <ifx_i2c_dl_event_handler+0x150>
                                p_ctx->tl.state = TL_STATE_ERROR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2206      	movs	r2, #6
 80035cc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            exit_machine = FALSE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	757b      	strb	r3, [r7, #21]
            break;
 80035d4:	e17c      	b.n	80038d0 <ifx_i2c_dl_event_handler+0x450>
                    p_ctx->tl.state = TL_STATE_ERROR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2206      	movs	r2, #6
 80035da:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80035de:	e178      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8098 	beq.w	800371c <ifx_i2c_dl_event_handler+0x29c>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 80035ec:	893b      	ldrh	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <ifx_i2c_dl_event_handler+0x17c>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2206      	movs	r2, #6
 80035f6:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 80035fa:	e16a      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8003602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003606:	d114      	bne.n	8003632 <ifx_i2c_dl_event_handler+0x1b2>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8003608:	7dbb      	ldrb	r3, [r7, #22]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d005      	beq.n	800361a <ifx_i2c_dl_event_handler+0x19a>
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7fd f9c6 	bl	80009a0 <ifx_i2c_dl_receive_frame>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <ifx_i2c_dl_event_handler+0x1a4>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2206      	movs	r2, #6
 800361e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 8003622:	e156      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2204      	movs	r2, #4
 8003628:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        exit_machine = FALSE;
 800362c:	2300      	movs	r3, #0
 800362e:	757b      	strb	r3, [r7, #21]
                        break;
 8003630:	e14f      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 2111 	ldrb.w	r2, [r3, #273]	@ 0x111
 8003638:	7dbb      	ldrb	r3, [r7, #22]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fec3 	bl	80033c8 <ifx_i2c_tl_check_chaining_error>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d004      	beq.n	8003652 <ifx_i2c_dl_event_handler+0x1d2>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2208      	movs	r2, #8
 800364c:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 8003650:	e13f      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8003652:	7dbb      	ldrb	r3, [r7, #22]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                    if (NULL == p_data)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <ifx_i2c_dl_event_handler+0x1f0>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2206      	movs	r2, #6
 800366a:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        break;
 800366e:	e130      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8003670:	7dbb      	ldrb	r3, [r7, #22]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <ifx_i2c_dl_event_handler+0x1fc>
 8003676:	7dbb      	ldrb	r3, [r7, #22]
 8003678:	2b04      	cmp	r3, #4
 800367a:	d14a      	bne.n	8003712 <ifx_i2c_dl_event_handler+0x292>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003682:	461a      	mov	r2, r3
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	4413      	add	r3, r2
 8003688:	3b01      	subs	r3, #1
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	4293      	cmp	r3, r2
 8003694:	dd09      	ble.n	80036aa <ifx_i2c_dl_event_handler+0x22a>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800369c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                            p_ctx->tl.state = TL_STATE_ERROR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2206      	movs	r2, #6
 80036a4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                            break;
 80036a8:	e113      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        }
                        exit_machine = FALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80036ba:	1898      	adds	r0, r3, r2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1c59      	adds	r1, r3, #1
 80036c0:	893b      	ldrh	r3, [r7, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	461a      	mov	r2, r3
 80036c6:	f00b fc06 	bl	800eed6 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	4413      	add	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 80036f4:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
                                                            p_ctx->tl.p_recv_packet_buffer,
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	2100      	movs	r1, #0
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8003710:	e0df      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2205      	movs	r2, #5
 8003716:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 800371a:	e0da      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2206      	movs	r2, #6
 8003720:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 8003724:	e0d5      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8003726:	893a      	ldrh	r2, [r7, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	@ 0x10a
 800372e:	3301      	adds	r3, #1
 8003730:	429a      	cmp	r2, r3
 8003732:	d004      	beq.n	800373e <ifx_i2c_dl_event_handler+0x2be>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2207      	movs	r2, #7
 8003738:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800373c:	e0c9      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8003744:	461a      	mov	r2, r3
 8003746:	893b      	ldrh	r3, [r7, #8]
 8003748:	4413      	add	r3, r2
 800374a:	3b01      	subs	r3, #1
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 8003752:	8812      	ldrh	r2, [r2, #0]
 8003754:	4293      	cmp	r3, r2
 8003756:	dd09      	ble.n	800376c <ifx_i2c_dl_event_handler+0x2ec>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800375e:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                    p_ctx->tl.state = TL_STATE_RX;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2204      	movs	r2, #4
 8003766:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800376a:	e0b2      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                }
                if (NULL == p_data)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <ifx_i2c_dl_event_handler+0x2fc>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2206      	movs	r2, #6
 8003776:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 800377a:	e0aa      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	f8b2 2104 	ldrh.w	r2, [r2, #260]	@ 0x104
 8003788:	1898      	adds	r0, r3, r2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	1c59      	adds	r1, r3, #1
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	3b01      	subs	r3, #1
 8003792:	461a      	mov	r2, r3
 8003794:	f00b fb9f 	bl	800eed6 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 800379e:	893b      	ldrh	r3, [r7, #8]
 80037a0:	4413      	add	r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

                p_ctx->tl.previous_chaining = pctr & 0x07;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2204      	movs	r2, #4
 80037c0:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7fd f8eb 	bl	80009a0 <ifx_i2c_dl_receive_frame>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <ifx_i2c_dl_event_handler+0x358>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2206      	movs	r2, #6
 80037d4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                exit_machine = FALSE;
 80037d8:	2300      	movs	r3, #0
 80037da:	757b      	strb	r3, [r7, #21]
            }
            break;
 80037dc:	e079      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 80037de:	893b      	ldrh	r3, [r7, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d909      	bls.n	80037f8 <ifx_i2c_dl_event_handler+0x378>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3112 	ldrb.w	r3, [r3, #274]	@ 0x112
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d104      	bne.n	80037f8 <ifx_i2c_dl_event_handler+0x378>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2207      	movs	r2, #7
 80037f2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    break;
 80037f6:	e06c      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 310f 	ldrb.w	r3, [r3, #271]	@ 0x10f
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	b2d1      	uxtb	r1, r2
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	f882 110f 	strb.w	r1, [r2, #271]	@ 0x10f
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <ifx_i2c_dl_event_handler+0x3b0>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff fd16 	bl	8003246 <ifx_i2c_tl_resend_packets>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d004      	beq.n	800382a <ifx_i2c_dl_event_handler+0x3aa>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2206      	movs	r2, #6
 8003824:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8003828:	e053      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	757b      	strb	r3, [r7, #21]
            break;
 800382e:	e050      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2206      	movs	r2, #6
 8003834:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 8003838:	e04b      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	b2d1      	uxtb	r1, r2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	f882 1110 	strb.w	r1, [r2, #272]	@ 0x110
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <ifx_i2c_dl_event_handler+0x3f2>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fd9d 	bl	8003396 <ifx_i2c_tl_send_chaining_error>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <ifx_i2c_dl_event_handler+0x3ec>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2206      	movs	r2, #6
 8003866:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 800386a:	e032      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                        exit_machine = FALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	757b      	strb	r3, [r7, #21]
            break;
 8003870:	e02f      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2206      	movs	r2, #6
 8003876:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
            break;
 800387a:	e02a      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8003880:	897b      	ldrh	r3, [r7, #10]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <ifx_i2c_dl_event_handler+0x410>
 800388a:	893b      	ldrh	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <ifx_i2c_dl_event_handler+0x418>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80038a4:	2300      	movs	r3, #0
 80038a6:	2200      	movs	r2, #0
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	47a0      	blx	r4
            }
            break;
 80038ac:	e011      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
                exit_machine = FALSE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8d3 40fc 	ldr.w	r4, [r3, #252]	@ 0xfc
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8b3 110c 	ldrh.w	r1, [r3, #268]	@ 0x10c
 80038c6:	2300      	movs	r3, #0
 80038c8:	2200      	movs	r2, #0
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	47a0      	blx	r4
            }
            break;
 80038ce:	e000      	b.n	80038d2 <ifx_i2c_dl_event_handler+0x452>
            break;
 80038d0:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 80038d2:	7d7b      	ldrb	r3, [r7, #21]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f43f ade3 	beq.w	80034a0 <ifx_i2c_dl_event_handler+0x20>
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int __io_putchar(int ch) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80038ec:	1d39      	adds	r1, r7, #4
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038f2:	2201      	movs	r2, #1
 80038f4:	4803      	ldr	r0, [pc, #12]	@ (8003904 <__io_putchar+0x20>)
 80038f6:	f00a f89d 	bl	800da34 <HAL_UART_Transmit>
  return ch;
 80038fa:	687b      	ldr	r3, [r7, #4]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	2000067c 	.word	0x2000067c

08003908 <optiga_util_callback>:
//
// pFunction jumpToApplication;
// uint32_t jumpAddress;
//  Async callback
static void optiga_util_callback(void *context,
                                 optiga_lib_status_t return_status) {
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
  optiga_lib_status = return_status;
 8003914:	4a04      	ldr	r2, [pc, #16]	@ (8003928 <optiga_util_callback+0x20>)
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	8013      	strh	r3, [r2, #0]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	200006c4 	.word	0x200006c4

0800392c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PeriodElapsedCallback+0x16>
    pal_os_event_timer_tick();
 800393e:	f003 fac3 	bl	8006ec8 <pal_os_event_timer_tick>
  }
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <verify_firmware_signature>:

bool verify_firmware_signature(optiga_util_t *util) {
 800394c:	b580      	push	{r7, lr}
 800394e:	f5ad 5d51 	sub.w	sp, sp, #13376	@ 0x3440
 8003952:	af04      	add	r7, sp, #16
 8003954:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8003958:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800395c:	6018      	str	r0, [r3, #0]
  uint8_t calc_hash[32];
  uint8_t expected_hash[32]; // Optional expected hash stored in flash
  uint8_t firmware_signature[SIGNATURE_SIZE];

  // 1. Read firmware data from flash
  memcpy(firmware_data, (uint8_t *)BOOTLOADER_START_ADDR, HASH_CALC_LEN);
 800395e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8003962:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8003966:	4a5c      	ldr	r2, [pc, #368]	@ (8003ad8 <verify_firmware_signature+0x18c>)
 8003968:	4618      	mov	r0, r3
 800396a:	4611      	mov	r1, r2
 800396c:	f243 23e4 	movw	r3, #13028	@ 0x32e4
 8003970:	461a      	mov	r2, r3
 8003972:	f00b fab0 	bl	800eed6 <memcpy>

  // 2. Calculate SHA-256 hash of the firmware
  mbedtls_sha256_context ctx;
  mbedtls_sha256_init(&ctx);
 8003976:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800397a:	3b1c      	subs	r3, #28
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fb2f 	bl	8006fe0 <mbedtls_sha256_init>
  mbedtls_sha256_starts_ret(&ctx, 0);
 8003982:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003986:	3b1c      	subs	r3, #28
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fb46 	bl	800701c <mbedtls_sha256_starts_ret>
  mbedtls_sha256_update_ret(&ctx, firmware_data, HASH_CALC_LEN);
 8003990:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8003994:	3928      	subs	r1, #40	@ 0x28
 8003996:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800399a:	3b1c      	subs	r3, #28
 800399c:	f243 22e4 	movw	r2, #13028	@ 0x32e4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f005 f8ef 	bl	8008b84 <mbedtls_sha256_update_ret>
  mbedtls_sha256_finish_ret(&ctx, calc_hash);
 80039a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80039aa:	3a08      	subs	r2, #8
 80039ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80039b0:	3b1c      	subs	r3, #28
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f005 f95a 	bl	8008c6e <mbedtls_sha256_finish_ret>
  mbedtls_sha256_free(&ctx);
 80039ba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80039be:	3b1c      	subs	r3, #28
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fb1a 	bl	8006ffa <mbedtls_sha256_free>

  // 4. Read firmware signature from flash
  memcpy(firmware_signature,
 80039c6:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80039ca:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80039ce:	4a43      	ldr	r2, [pc, #268]	@ (8003adc <verify_firmware_signature+0x190>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	4611      	mov	r1, r2
 80039d4:	2347      	movs	r3, #71	@ 0x47
 80039d6:	461a      	mov	r2, r3
 80039d8:	f00b fa7d 	bl	800eed6 <memcpy>

  // 5. Read public key from OPTIGA OID (if not already provisioned, this will
  // fail)
  uint8_t public_key[65]; // Standard uncompressed ECC public key (0x04 | X[32]
                          // | Y[32])
  uint16_t public_key_len = sizeof(public_key);
 80039dc:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80039e0:	f2a3 4322 	subw	r3, r3, #1058	@ 0x422
 80039e4:	2241      	movs	r2, #65	@ 0x41
 80039e6:	801a      	strh	r2, [r3, #0]

  optiga_lib_status = optiga_util_read_data(util, SIGNATURE_OID, 0, public_key,
 80039e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80039ec:	3a20      	subs	r2, #32
 80039ee:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80039f2:	f2a3 402c 	subw	r0, r3, #1068	@ 0x42c
 80039f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80039fa:	3b22      	subs	r3, #34	@ 0x22
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003a06:	6800      	ldr	r0, [r0, #0]
 8003a08:	f002 feb8 	bl	800677c <optiga_util_read_data>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b33      	ldr	r3, [pc, #204]	@ (8003ae0 <verify_firmware_signature+0x194>)
 8003a12:	801a      	strh	r2, [r3, #0]
                                            &public_key_len);
  if (optiga_lib_status != OPTIGA_LIB_SUCCESS) {
 8003a14:	4b32      	ldr	r3, [pc, #200]	@ (8003ae0 <verify_firmware_signature+0x194>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <verify_firmware_signature+0xe0>
    printf("❌ Failed to read public key from OID 0x%04X\r\n", SIGNATURE_OID);
 8003a1e:	f24e 01e8 	movw	r1, #57576	@ 0xe0e8
 8003a22:	4830      	ldr	r0, [pc, #192]	@ (8003ae4 <verify_firmware_signature+0x198>)
 8003a24:	f00b f982 	bl	800ed2c <iprintf>
    return false;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e04e      	b.n	8003aca <verify_firmware_signature+0x17e>
  }



  // 6. Verify digital signature using OPTIGA crypt
  optiga_crypt_t *me_crypt = optiga_crypt_create(0, optiga_util_callback, NULL);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	492e      	ldr	r1, [pc, #184]	@ (8003ae8 <verify_firmware_signature+0x19c>)
 8003a30:	2000      	movs	r0, #0
 8003a32:	f002 fa73 	bl	8005f1c <optiga_crypt_create>
 8003a36:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a3a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003a3e:	6018      	str	r0, [r3, #0]
  if (!me_crypt) {
 8003a40:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a44:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <verify_firmware_signature+0x10c>
    printf("❌ Failed to create OPTIGA crypt instance!\r\n");
 8003a4e:	4827      	ldr	r0, [pc, #156]	@ (8003aec <verify_firmware_signature+0x1a0>)
 8003a50:	f00b f9d4 	bl	800edfc <puts>
    return false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e038      	b.n	8003aca <verify_firmware_signature+0x17e>
  }

  optiga_lib_status = OPTIGA_LIB_BUSY;
 8003a58:	4b21      	ldr	r3, [pc, #132]	@ (8003ae0 <verify_firmware_signature+0x194>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	801a      	strh	r2, [r3, #0]
  optiga_crypt_ecdsa_verify(
 8003a5e:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8003a62:	3b30      	subs	r3, #48	@ 0x30
 8003a64:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8003a68:	3908      	subs	r1, #8
 8003a6a:	f24e 02e8 	movw	r2, #57576	@ 0xe0e8
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	9201      	str	r2, [sp, #4]
 8003a74:	2247      	movs	r2, #71	@ 0x47
 8003a76:	9200      	str	r2, [sp, #0]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f507 5050 	add.w	r0, r7, #13312	@ 0x3400
 8003a7e:	f100 002c 	add.w	r0, r0, #44	@ 0x2c
 8003a82:	6800      	ldr	r0, [r0, #0]
 8003a84:	f002 fab2 	bl	8005fec <optiga_crypt_ecdsa_verify>
      me_crypt, calc_hash, sizeof(calc_hash), firmware_signature,
      SIGNATURE_SIZE,
      OPTIGA_CRYPT_OID_DATA, // Using key stored inside OPTIGA
      SIGNATURE_OID);

  while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003a88:	e001      	b.n	8003a8e <verify_firmware_signature+0x142>
    pal_os_event_trigger_registered_callback();
 8003a8a:	f003 f9fb 	bl	8006e84 <pal_os_event_trigger_registered_callback>
  while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <verify_firmware_signature+0x194>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d0f8      	beq.n	8003a8a <verify_firmware_signature+0x13e>

  optiga_crypt_destroy(me_crypt);
 8003a98:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8003a9c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f002 fa7f 	bl	8005fa4 <optiga_crypt_destroy>

  if (optiga_lib_status != OPTIGA_LIB_SUCCESS) {
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <verify_firmware_signature+0x194>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <verify_firmware_signature+0x176>
    printf("❌ Signature verification FAILED! Status: 0x%04X\r\n",
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <verify_firmware_signature+0x194>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	480d      	ldr	r0, [pc, #52]	@ (8003af0 <verify_firmware_signature+0x1a4>)
 8003aba:	f00b f937 	bl	800ed2c <iprintf>
           optiga_lib_status);
    return false;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e003      	b.n	8003aca <verify_firmware_signature+0x17e>
  }
  printf("✅ Firmware signature verified successfully.\r\n");
 8003ac2:	480c      	ldr	r0, [pc, #48]	@ (8003af4 <verify_firmware_signature+0x1a8>)
 8003ac4:	f00b f99a 	bl	800edfc <puts>
  return true;
 8003ac8:	2301      	movs	r3, #1
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	f507 5750 	add.w	r7, r7, #13312	@ 0x3400
 8003ad0:	3730      	adds	r7, #48	@ 0x30
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08020000 	.word	0x08020000
 8003adc:	080232e4 	.word	0x080232e4
 8003ae0:	200006c4 	.word	0x200006c4
 8003ae4:	0800fd80 	.word	0x0800fd80
 8003ae8:	08003909 	.word	0x08003909
 8003aec:	0800fdb0 	.word	0x0800fdb0
 8003af0:	0800fde0 	.word	0x0800fde0
 8003af4:	0800fe14 	.word	0x0800fe14

08003af8 <verify_firmware_integrity>:
/* Replace verify_bootloader_hash() with combined hash+signature check */
bool verify_firmware_integrity(optiga_util_t *util) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return verify_firmware_signature(util);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff23 	bl	800394c <verify_firmware_signature>
 8003b06:	4603      	mov	r3, r0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <optiga_main_logic>:
void optiga_main_logic(void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  optiga_util_t *me_util = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
  optiga_lib_status_t return_status = OPTIGA_UTIL_ERROR;
 8003b1a:	f240 3302 	movw	r3, #770	@ 0x302
 8003b1e:	807b      	strh	r3, [r7, #2]

  me_util = optiga_util_create(0, optiga_util_callback, NULL);
 8003b20:	2200      	movs	r2, #0
 8003b22:	492c      	ldr	r1, [pc, #176]	@ (8003bd4 <optiga_main_logic+0xc4>)
 8003b24:	2000      	movs	r0, #0
 8003b26:	f002 fd81 	bl	800662c <optiga_util_create>
 8003b2a:	6078      	str	r0, [r7, #4]
  if (!me_util) {
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <optiga_main_logic+0x2a>
    printf("Failed to create OPTIGA util instance.\r\n");
 8003b32:	4829      	ldr	r0, [pc, #164]	@ (8003bd8 <optiga_main_logic+0xc8>)
 8003b34:	f00b f962 	bl	800edfc <puts>
    return;
 8003b38:	e049      	b.n	8003bce <optiga_main_logic+0xbe>
  }

  // Retry loop to initialize OPTIGA
  while (1) {
    optiga_lib_status = OPTIGA_LIB_BUSY;
 8003b3a:	4b28      	ldr	r3, [pc, #160]	@ (8003bdc <optiga_main_logic+0xcc>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	801a      	strh	r2, [r3, #0]
    return_status = optiga_util_open_application(me_util, 0);
 8003b40:	2100      	movs	r1, #0
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f002 fdb4 	bl	80066b0 <optiga_util_open_application>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	807b      	strh	r3, [r7, #2]
    if (return_status != OPTIGA_LIB_SUCCESS) {
 8003b4c:	887b      	ldrh	r3, [r7, #2]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <optiga_main_logic+0x4a>
      printf(
 8003b52:	4823      	ldr	r0, [pc, #140]	@ (8003be0 <optiga_main_logic+0xd0>)
 8003b54:	f00b f952 	bl	800edfc <puts>
          "optiga_util_open_application() failed immediately. Retrying...\r\n");
      continue;
 8003b58:	e028      	b.n	8003bac <optiga_main_logic+0x9c>
    }
    HAL_Delay(100);
 8003b5a:	2064      	movs	r0, #100	@ 0x64
 8003b5c:	f005 fc8e 	bl	800947c <HAL_Delay>
    while (optiga_lib_status == OPTIGA_LIB_BUSY) {
 8003b60:	e001      	b.n	8003b66 <optiga_main_logic+0x56>
      pal_os_event_trigger_registered_callback(); // CRUCIAL for bare metal
 8003b62:	f003 f98f 	bl	8006e84 <pal_os_event_trigger_registered_callback>
    while (optiga_lib_status == OPTIGA_LIB_BUSY) {
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <optiga_main_logic+0xcc>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d0f8      	beq.n	8003b62 <optiga_main_logic+0x52>
    }
    HAL_Delay(100);
 8003b70:	2064      	movs	r0, #100	@ 0x64
 8003b72:	f005 fc83 	bl	800947c <HAL_Delay>
    if (optiga_lib_status == OPTIGA_LIB_SUCCESS) {
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <optiga_main_logic+0xcc>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <optiga_main_logic+0x86>
      printf("OPTIGA Trust M initialized successfully.\r\n");
 8003b80:	4818      	ldr	r0, [pc, #96]	@ (8003be4 <optiga_main_logic+0xd4>)
 8003b82:	f00b f93b 	bl	800edfc <puts>
      break;
 8003b86:	bf00      	nop
             optiga_lib_status);
      HAL_Delay(2000);
    }
  }

  if (verify_firmware_integrity(me_util)) {
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ffb5 	bl	8003af8 <verify_firmware_integrity>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00f      	beq.n	8003bb4 <optiga_main_logic+0xa4>
 8003b94:	e00b      	b.n	8003bae <optiga_main_logic+0x9e>
      printf("OPTIGA init async failed: 0x%04X. Retrying...\r\n",
 8003b96:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <optiga_main_logic+0xcc>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4812      	ldr	r0, [pc, #72]	@ (8003be8 <optiga_main_logic+0xd8>)
 8003ba0:	f00b f8c4 	bl	800ed2c <iprintf>
      HAL_Delay(2000);
 8003ba4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003ba8:	f005 fc68 	bl	800947c <HAL_Delay>
    optiga_lib_status = OPTIGA_LIB_BUSY;
 8003bac:	e7c5      	b.n	8003b3a <optiga_main_logic+0x2a>
    goto_application();
 8003bae:	f000 fa3b 	bl	8004028 <goto_application>
 8003bb2:	e00c      	b.n	8003bce <optiga_main_logic+0xbe>
  } else {
    printf("Firmware came from Unauthenticated server....\r\n");
 8003bb4:	480d      	ldr	r0, [pc, #52]	@ (8003bec <optiga_main_logic+0xdc>)
 8003bb6:	f00b f921 	bl	800edfc <puts>
    while (1) {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003bba:	2120      	movs	r1, #32
 8003bbc:	480c      	ldr	r0, [pc, #48]	@ (8003bf0 <optiga_main_logic+0xe0>)
 8003bbe:	f005 ffd0 	bl	8009b62 <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8003bc2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bc6:	f005 fc59 	bl	800947c <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003bca:	bf00      	nop
 8003bcc:	e7f5      	b.n	8003bba <optiga_main_logic+0xaa>
    }
  }
}
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	08003909 	.word	0x08003909
 8003bd8:	0800fe44 	.word	0x0800fe44
 8003bdc:	200006c4 	.word	0x200006c4
 8003be0:	0800fe6c 	.word	0x0800fe6c
 8003be4:	0800feac 	.word	0x0800feac
 8003be8:	0800fed8 	.word	0x0800fed8
 8003bec:	0800ff08 	.word	0x0800ff08
 8003bf0:	40020000 	.word	0x40020000

08003bf4 <I2C_Scan>:

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  printf("Scanning I2C...\r\n");
 8003bfc:	4811      	ldr	r0, [pc, #68]	@ (8003c44 <I2C_Scan+0x50>)
 8003bfe:	f00b f8fd 	bl	800edfc <puts>
  for (uint8_t addr = 1; addr < 128; addr++) {
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e013      	b.n	8003c30 <I2C_Scan+0x3c>
    if (HAL_I2C_IsDeviceReady(hi2c, addr << 1, 1, 10) == HAL_OK) {
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	230a      	movs	r3, #10
 8003c12:	2201      	movs	r2, #1
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f006 fc6d 	bl	800a4f4 <HAL_I2C_IsDeviceReady>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d104      	bne.n	8003c2a <I2C_Scan+0x36>
      printf("Device found at 0x%02X\r\n", addr);
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	4619      	mov	r1, r3
 8003c24:	4808      	ldr	r0, [pc, #32]	@ (8003c48 <I2C_Scan+0x54>)
 8003c26:	f00b f881 	bl	800ed2c <iprintf>
  for (uint8_t addr = 1; addr < 128; addr++) {
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	dae7      	bge.n	8003c08 <I2C_Scan+0x14>
    }
  }
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	0800ff38 	.word	0x0800ff38
 8003c48:	0800ff4c 	.word	0x0800ff4c

08003c4c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8003c50:	f005 fba2 	bl	8009398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c54:	f000 f854 	bl	8003d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c58:	f000 f96e 	bl	8003f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003c5c:	f000 f942 	bl	8003ee4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003c60:	f000 f8c6 	bl	8003df0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003c64:	f000 f8f2 	bl	8003e4c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003c68:	f000 f8b6 	bl	8003dd8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8003c6c:	481b      	ldr	r0, [pc, #108]	@ (8003cdc <main+0x90>)
 8003c6e:	f009 faad 	bl	800d1cc <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	201c      	movs	r0, #28
 8003c78:	f005 fcff 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c7c:	201c      	movs	r0, #28
 8003c7e:	f005 fd18 	bl	80096b2 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Green LED OFF
 8003c82:	2201      	movs	r2, #1
 8003c84:	2120      	movs	r1, #32
 8003c86:	4816      	ldr	r0, [pc, #88]	@ (8003ce0 <main+0x94>)
 8003c88:	f005 ff52 	bl	8009b30 <HAL_GPIO_WritePin>

  printf("Starting Bootloader(%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	4619      	mov	r1, r3
 8003c92:	4814      	ldr	r0, [pc, #80]	@ (8003ce4 <main+0x98>)
 8003c94:	f00b f84a 	bl	800ed2c <iprintf>

  printf("Powering ON OPTIGA Trust M...\r\n");
 8003c98:	4813      	ldr	r0, [pc, #76]	@ (8003ce8 <main+0x9c>)
 8003c9a:	f00b f8af 	bl	800edfc <puts>

  /* Power ON the OPTIGA Trust M chip */
  pal_gpio_set_high(&optiga_vdd_0);
 8003c9e:	4813      	ldr	r0, [pc, #76]	@ (8003cec <main+0xa0>)
 8003ca0:	f002 fe62 	bl	8006968 <pal_gpio_set_high>
  printf("Resetting OPTIGA...\r\n");
 8003ca4:	4812      	ldr	r0, [pc, #72]	@ (8003cf0 <main+0xa4>)
 8003ca6:	f00b f8a9 	bl	800edfc <puts>
  pal_gpio_set_low(&optiga_reset_0);
 8003caa:	4812      	ldr	r0, [pc, #72]	@ (8003cf4 <main+0xa8>)
 8003cac:	f002 fe6c 	bl	8006988 <pal_gpio_set_low>
  HAL_Delay(10);
 8003cb0:	200a      	movs	r0, #10
 8003cb2:	f005 fbe3 	bl	800947c <HAL_Delay>
  pal_gpio_set_high(&optiga_reset_0);
 8003cb6:	480f      	ldr	r0, [pc, #60]	@ (8003cf4 <main+0xa8>)
 8003cb8:	f002 fe56 	bl	8006968 <pal_gpio_set_high>
  HAL_Delay(10);
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	f005 fbdd 	bl	800947c <HAL_Delay>

  /* Optional: Scan I2C to check if device responds */
  I2C_Scan(&hi2c1);
 8003cc2:	480d      	ldr	r0, [pc, #52]	@ (8003cf8 <main+0xac>)
 8003cc4:	f7ff ff96 	bl	8003bf4 <I2C_Scan>

  printf("Starting OPTIGA Trust M logic...\r\n");
 8003cc8:	480c      	ldr	r0, [pc, #48]	@ (8003cfc <main+0xb0>)
 8003cca:	f00b f897 	bl	800edfc <puts>

  /* Execute main OPTIGA logic (write, read, LED control) */
  HAL_Delay(100);
 8003cce:	2064      	movs	r0, #100	@ 0x64
 8003cd0:	f005 fbd4 	bl	800947c <HAL_Delay>

  optiga_main_logic();
 8003cd4:	f7ff ff1c 	bl	8003b10 <optiga_main_logic>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <main+0x8c>
 8003cdc:	20000634 	.word	0x20000634
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	0800ff68 	.word	0x0800ff68
 8003ce8:	0800ff88 	.word	0x0800ff88
 8003cec:	200004fc 	.word	0x200004fc
 8003cf0:	0800ffa8 	.word	0x0800ffa8
 8003cf4:	20000504 	.word	0x20000504
 8003cf8:	200005e0 	.word	0x200005e0
 8003cfc:	0800ffc0 	.word	0x0800ffc0

08003d00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b094      	sub	sp, #80	@ 0x50
 8003d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d06:	f107 0320 	add.w	r3, r7, #32
 8003d0a:	2230      	movs	r2, #48	@ 0x30
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f00b f89b 	bl	800ee4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <SystemClock_Config+0xd0>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	4a28      	ldr	r2, [pc, #160]	@ (8003dd0 <SystemClock_Config+0xd0>)
 8003d2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d34:	4b26      	ldr	r3, [pc, #152]	@ (8003dd0 <SystemClock_Config+0xd0>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d40:	2300      	movs	r3, #0
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <SystemClock_Config+0xd4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003d4c:	4a21      	ldr	r2, [pc, #132]	@ (8003dd4 <SystemClock_Config+0xd4>)
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd4 <SystemClock_Config+0xd4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d64:	2301      	movs	r3, #1
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d68:	2310      	movs	r3, #16
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d70:	2300      	movs	r3, #0
 8003d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003d74:	2310      	movs	r3, #16
 8003d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003d78:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d7e:	2304      	movs	r3, #4
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d82:	2307      	movs	r3, #7
 8003d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003d86:	f107 0320 	add.w	r3, r7, #32
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f008 fd36 	bl	800c7fc <HAL_RCC_OscConfig>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <SystemClock_Config+0x9a>
    Error_Handler();
 8003d96:	f000 f96d 	bl	8004074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8003d9a:	230f      	movs	r3, #15
 8003d9c:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f008 ff98 	bl	800ccec <HAL_RCC_ClockConfig>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <SystemClock_Config+0xc6>
    Error_Handler();
 8003dc2:	f000 f957 	bl	8004074 <Error_Handler>
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3750      	adds	r7, #80	@ 0x50
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000

08003dd8 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2100      	movs	r1, #0
 8003de0:	201f      	movs	r0, #31
 8003de2:	f005 fc4a 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003de6:	201f      	movs	r0, #31
 8003de8:	f005 fc63 	bl	80096b2 <HAL_NVIC_EnableIRQ>
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003df6:	4a13      	ldr	r2, [pc, #76]	@ (8003e44 <MX_I2C1_Init+0x54>)
 8003df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003dfa:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003dfc:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <MX_I2C1_Init+0x58>)
 8003dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e00:	4b0f      	ldr	r3, [pc, #60]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e06:	4b0e      	ldr	r3, [pc, #56]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e1a:	4b09      	ldr	r3, [pc, #36]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003e2c:	4804      	ldr	r0, [pc, #16]	@ (8003e40 <MX_I2C1_Init+0x50>)
 8003e2e:	f005 fed7 	bl	8009be0 <HAL_I2C_Init>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_I2C1_Init+0x4c>
    Error_Handler();
 8003e38:	f000 f91c 	bl	8004074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200005e0 	.word	0x200005e0
 8003e44:	40005400 	.word	0x40005400
 8003e48:	00061a80 	.word	0x00061a80

08003e4c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e60:	463b      	mov	r3, r7
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e72:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8003e7e:	4b18      	ldr	r3, [pc, #96]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e80:	2209      	movs	r2, #9
 8003e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003e90:	4813      	ldr	r0, [pc, #76]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003e92:	f009 f94b 	bl	800d12c <HAL_TIM_Base_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM2_Init+0x54>
    Error_Handler();
 8003e9c:	f000 f8ea 	bl	8004074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003ea6:	f107 0308 	add.w	r3, r7, #8
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480c      	ldr	r0, [pc, #48]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003eae:	f009 fadf 	bl	800d470 <HAL_TIM_ConfigClockSource>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM2_Init+0x70>
    Error_Handler();
 8003eb8:	f000 f8dc 	bl	8004074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <MX_TIM2_Init+0x94>)
 8003eca:	f009 fce1 	bl	800d890 <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM2_Init+0x8c>
    Error_Handler();
 8003ed4:	f000 f8ce 	bl	8004074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000634 	.word	0x20000634

08003ee4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003eea:	4a12      	ldr	r2, [pc, #72]	@ (8003f34 <MX_USART2_UART_Init+0x50>)
 8003eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003ef0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f02:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f08:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0e:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003f1a:	4805      	ldr	r0, [pc, #20]	@ (8003f30 <MX_USART2_UART_Init+0x4c>)
 8003f1c:	f009 fd3a 	bl	800d994 <HAL_UART_Init>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_USART2_UART_Init+0x46>
    Error_Handler();
 8003f26:	f000 f8a5 	bl	8004074 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8003f2a:	bf00      	nop
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	2000067c 	.word	0x2000067c
 8003f34:	40004400 	.word	0x40004400

08003f38 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	4b32      	ldr	r3, [pc, #200]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a31      	ldr	r2, [pc, #196]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f7a:	4b28      	ldr	r3, [pc, #160]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	4b24      	ldr	r3, [pc, #144]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	4a23      	ldr	r2, [pc, #140]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f96:	4b21      	ldr	r3, [pc, #132]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	4a1c      	ldr	r2, [pc, #112]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800401c <MX_GPIO_Init+0xe4>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | LD2_Pin | GPIO_PIN_8, GPIO_PIN_RESET);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8003fc4:	4816      	ldr	r0, [pc, #88]	@ (8004020 <MX_GPIO_Init+0xe8>)
 8003fc6:	f005 fdb3 	bl	8009b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003fca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003fd0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003fda:	f107 0314 	add.w	r3, r7, #20
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4810      	ldr	r0, [pc, #64]	@ (8004024 <MX_GPIO_Init+0xec>)
 8003fe2:	f005 fc21 	bl	8009828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4 | LD2_Pin | GPIO_PIN_8;
 8003fe6:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8003fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fec:	2301      	movs	r3, #1
 8003fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4808      	ldr	r0, [pc, #32]	@ (8004020 <MX_GPIO_Init+0xe8>)
 8004000:	f005 fc12 	bl	8009828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2100      	movs	r1, #0
 8004008:	2028      	movs	r0, #40	@ 0x28
 800400a:	f005 fb36 	bl	800967a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800400e:	2028      	movs	r0, #40	@ 0x28
 8004010:	f005 fb4f 	bl	80096b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004014:	bf00      	nop
 8004016:	3728      	adds	r7, #40	@ 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40023800 	.word	0x40023800
 8004020:	40020000 	.word	0x40020000
 8004024:	40020800 	.word	0x40020800

08004028 <goto_application>:

/* USER CODE BEGIN 4 */

static void goto_application(void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
  printf("Jumping to application...\r\n");
 800402e:	480c      	ldr	r0, [pc, #48]	@ (8004060 <goto_application+0x38>)
 8004030:	f00a fee4 	bl	800edfc <puts>

  // Check if the value at the application's start is a valid stack pointer (RAM
  // range)
  jumpAddress = *(__IO uint32_t *)(APPLICATION_ADDRESS + 4);
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <goto_application+0x3c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0b      	ldr	r2, [pc, #44]	@ (8004068 <goto_application+0x40>)
 800403a:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  jumpToApplication = (pFunction)jumpAddress;
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <goto_application+0x40>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <goto_application+0x44>)
 8004044:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t *)APPLICATION_ADDRESS);
 8004046:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <goto_application+0x48>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f383 8808 	msr	MSP, r3
}
 8004052:	bf00      	nop
  jumpToApplication();
 8004054:	4b05      	ldr	r3, [pc, #20]	@ (800406c <goto_application+0x44>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4798      	blx	r3

  while (1)
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <goto_application+0x32>
 800405e:	bf00      	nop
 8004060:	0800ffe4 	.word	0x0800ffe4
 8004064:	08020004 	.word	0x08020004
 8004068:	200005dc 	.word	0x200005dc
 800406c:	200005d8 	.word	0x200005d8
 8004070:	08020000 	.word	0x08020000

08004074 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004078:	b672      	cpsid	i
}
 800407a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800407c:	bf00      	nop
 800407e:	e7fd      	b.n	800407c <Error_Handler+0x8>

08004080 <optiga_cmd_set_shielded_connection_option>:
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
//lint --e{714} suppress "This function is defined here but referred from other modules"
void optiga_cmd_set_shielded_connection_option(optiga_cmd_t * me,
                                               uint8_t value,
                                               uint8_t shielded_connection_option)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
 800408c:	4613      	mov	r3, r2
 800408e:	70bb      	strb	r3, [r7, #2]
    switch (shielded_connection_option)
 8004090:	78bb      	ldrb	r3, [r7, #2]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d00e      	beq.n	80040b4 <optiga_cmd_set_shielded_connection_option+0x34>
 8004096:	2b02      	cmp	r3, #2
 8004098:	dc10      	bgt.n	80040bc <optiga_cmd_set_shielded_connection_option+0x3c>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <optiga_cmd_set_shielded_connection_option+0x24>
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d004      	beq.n	80040ac <optiga_cmd_set_shielded_connection_option+0x2c>
        {
            me->manage_context_operation = value;
        }
        break;
        default:
        break;
 80040a2:	e00b      	b.n	80040bc <optiga_cmd_set_shielded_connection_option+0x3c>
            me->protection_level = value;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	769a      	strb	r2, [r3, #26]
        break;
 80040aa:	e008      	b.n	80040be <optiga_cmd_set_shielded_connection_option+0x3e>
            me->protocol_version = value;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	76da      	strb	r2, [r3, #27]
        break;
 80040b2:	e004      	b.n	80040be <optiga_cmd_set_shielded_connection_option+0x3e>
            me->manage_context_operation = value;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	771a      	strb	r2, [r3, #28]
        break;
 80040ba:	e000      	b.n	80040be <optiga_cmd_set_shielded_connection_option+0x3e>
        break;
 80040bc:	bf00      	nop
    }
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4603      	mov	r3, r0
 80040d4:	71fb      	strb	r3, [r7, #7]
 80040d6:	460b      	mov	r3, r1
 80040d8:	71bb      	strb	r3, [r7, #6]
 80040da:	4613      	mov	r3, r2
 80040dc:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	79fa      	ldrb	r2, [r7, #7]
 80040e2:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	79ba      	ldrb	r2, [r7, #6]
 80040ea:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 80040ec:	88bb      	ldrh	r3, [r7, #4]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	3302      	adds	r3, #2
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	3303      	adds	r3, #3
 80040fe:	88ba      	ldrh	r2, [r7, #4]
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60ba      	str	r2, [r7, #8]
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	4603      	mov	r3, r0
 800411c:	73fb      	strb	r3, [r7, #15]
 800411e:	460b      	mov	r3, r1
 8004120:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 8004128:	8afb      	ldrh	r3, [r7, #22]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	82fa      	strh	r2, [r7, #22]
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4413      	add	r3, r2
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8004138:	89bb      	ldrh	r3, [r7, #12]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b29a      	uxth	r2, r3
 800413e:	8afb      	ldrh	r3, [r7, #22]
 8004140:	1c59      	adds	r1, r3, #1
 8004142:	82f9      	strh	r1, [r7, #22]
 8004144:	4619      	mov	r1, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	440b      	add	r3, r1
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	82fa      	strh	r2, [r7, #22]
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4413      	add	r3, r2
 800415a:	89ba      	ldrh	r2, [r7, #12]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8afa      	ldrh	r2, [r7, #22]
 8004164:	801a      	strh	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 800417a:	2100      	movs	r1, #0
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 ff6f 	bl	8005060 <optiga_cmd_execute_handler>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	461a      	mov	r2, r3
 8004196:	460b      	mov	r3, r1
 8004198:	72fb      	strb	r3, [r7, #11]
 800419a:	4613      	mov	r3, r2
 800419c:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	7aba      	ldrb	r2, [r7, #10]
 80041a8:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	7e3a      	ldrb	r2, [r7, #24]
 80041ae:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	7afa      	ldrb	r2, [r7, #11]
 80041c0:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8c3a      	ldrh	r2, [r7, #32]
 80041c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 80041c8:	2100      	movs	r1, #0
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 ff48 	bl	8005060 <optiga_cmd_execute_handler>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3308      	adds	r3, #8
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 ff63 	bl	80060b0 <optiga_common_get_uint32>
 80041ea:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 80041f2:	d201      	bcs.n	80041f8 <optiga_cmd_session_available+0x20>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <optiga_cmd_session_available+0x22>
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3308      	adds	r3, #8
 8004212:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8a9b      	ldrh	r3, [r3, #20]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11d      	bne.n	8004258 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e017      	b.n	8004252 <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 8004222:	7bfb      	ldrb	r3, [r7, #15]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	4413      	add	r3, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b10      	cmp	r3, #16
 800422c:	d00e      	beq.n	800424c <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	b21a      	sxth	r2, r3
 8004232:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <optiga_cmd_session_assign+0x60>)
 8004234:	4313      	orrs	r3, r2
 8004236:	b21b      	sxth	r3, r3
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	4413      	add	r3, r2
 8004244:	2210      	movs	r2, #16
 8004246:	701a      	strb	r2, [r3, #0]
                break;
 8004248:	bf00      	nop
            }
        }
    }
}
 800424a:	e005      	b.n	8004258 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b03      	cmp	r3, #3
 8004256:	d9e4      	bls.n	8004222 <optiga_cmd_session_assign+0x1e>
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	ffffe100 	.word	0xffffe100

08004268 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3308      	adds	r3, #8
 8004276:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8a9b      	ldrh	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8a9b      	ldrh	r3, [r3, #20]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
    }
}
 800429c:	bf00      	nop
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
 80042b4:	4613      	mov	r3, r2
 80042b6:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	e027      	b.n	8004316 <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d002      	beq.n	80042d2 <optiga_cmd_queue_get_count_of+0x2a>
 80042cc:	2b09      	cmp	r3, #9
 80042ce:	d00c      	beq.n	80042ea <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 80042d0:	e017      	b.n	8004302 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	737b      	strb	r3, [r7, #13]
            break;
 80042e8:	e00b      	b.n	8004302 <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	737b      	strb	r3, [r7, #13]
            break;
 8004300:	bf00      	nop
        }
        if (state_to_check == slot_value)
 8004302:	78ba      	ldrb	r2, [r7, #2]
 8004304:	7b7b      	ldrb	r3, [r7, #13]
 8004306:	429a      	cmp	r2, r3
 8004308:	d102      	bne.n	8004310 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 800430a:	7bbb      	ldrb	r3, [r7, #14]
 800430c:	3301      	adds	r3, #1
 800430e:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	3301      	adds	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b05      	cmp	r3, #5
 800431a:	d9d4      	bls.n	80042c6 <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 800431c:	7bbb      	ldrb	r3, [r7, #14]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e01f      	b.n	800437a <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6819      	ldr	r1, [r3, #0]
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	4613      	mov	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
           break;
 8004372:	e006      	b.n	8004382 <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	3301      	adds	r3, #1
 8004378:	73fb      	strb	r3, [r7, #15]
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b05      	cmp	r3, #5
 800437e:	d9dc      	bls.n	800433a <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <optiga_cmd_queue_deassign_slot>:

/*
* De-assigns a slot from a optiga cmd instance and makes the slot available for next optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_deassign_slot(optiga_cmd_t * me)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_NOT_ASSIGNED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7f9b      	ldrb	r3, [r3, #30]
 800439e:	4619      	mov	r1, r3
 80043a0:	460b      	mov	r3, r1
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	440b      	add	r3, r1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7f9b      	ldrb	r3, [r3, #30]
 80043ba:	4619      	mov	r1, r3
 80043bc:	460b      	mov	r3, r1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	440b      	add	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
    me->queue_id = 0;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	779a      	strb	r2, [r3, #30]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043ec:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 80043ee:	23ff      	movs	r3, #255	@ 0xff
 80043f0:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8004400:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 8004402:	2202      	movs	r2, #2
 8004404:	2109      	movs	r1, #9
 8004406:	6978      	ldr	r0, [r7, #20]
 8004408:	f7ff ff4e 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 8004412:	2208      	movs	r2, #8
 8004414:	2109      	movs	r1, #9
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7ff ff46 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 800441c:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00f      	beq.n	8004442 <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 8004422:	2204      	movs	r2, #4
 8004424:	2109      	movs	r1, #9
 8004426:	6978      	ldr	r0, [r7, #20]
 8004428:	f7ff ff3e 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 800442c:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10f      	bne.n	8004452 <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 8004432:	2223      	movs	r2, #35	@ 0x23
 8004434:	2108      	movs	r1, #8
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff36 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 800443c:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 8004442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	496d      	ldr	r1, [pc, #436]	@ (8004600 <optiga_cmd_queue_scheduler+0x220>)
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f002 fcee 	bl	8006e2c <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 8004450:	e0d2      	b.n	80045f8 <optiga_cmd_queue_scheduler+0x218>
        pal_os_event_stop(my_os_event);
 8004452:	6938      	ldr	r0, [r7, #16]
 8004454:	f002 fcc4 	bl	8006de0 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 8004458:	7e7b      	ldrb	r3, [r7, #25]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d105      	bne.n	800446a <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
                overflow_detected = FALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 800446a:	2300      	movs	r3, #0
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e05b      	b.n	8004528 <optiga_cmd_queue_scheduler+0x148>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8004470:	7efa      	ldrb	r2, [r7, #27]
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4413      	add	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 8004484:	2208      	movs	r2, #8
 8004486:	2109      	movs	r1, #9
 8004488:	6978      	ldr	r0, [r7, #20]
 800448a:	f7ff ff0d 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 800448e:	4603      	mov	r3, r0
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10d      	bne.n	80044b0 <optiga_cmd_queue_scheduler+0xd0>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	7a5b      	ldrb	r3, [r3, #9]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d142      	bne.n	8004522 <optiga_cmd_queue_scheduler+0x142>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 80044a0:	2b23      	cmp	r3, #35	@ 0x23
 80044a2:	d13e      	bne.n	8004522 <optiga_cmd_queue_scheduler+0x142>
                        reference_time_stamp = p_queue_entry->arrival_time;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 80044aa:	7efb      	ldrb	r3, [r7, #27]
 80044ac:	76bb      	strb	r3, [r7, #26]
 80044ae:	e038      	b.n	8004522 <optiga_cmd_queue_scheduler+0x142>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	7a5b      	ldrb	r3, [r3, #9]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d134      	bne.n	8004522 <optiga_cmd_queue_scheduler+0x142>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d201      	bcs.n	80044ca <optiga_cmd_queue_scheduler+0xea>
                            overflow_detected = TRUE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d326      	bcc.n	8004522 <optiga_cmd_queue_scheduler+0x142>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80044de:	429a      	cmp	r2, r3
 80044e0:	d31f      	bcc.n	8004522 <optiga_cmd_queue_scheduler+0x142>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 80044e6:	2b22      	cmp	r3, #34	@ 0x22
 80044e8:	d105      	bne.n	80044f6 <optiga_cmd_queue_scheduler+0x116>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff fe74 	bl	80041d8 <optiga_cmd_session_available>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d010      	beq.n	8004518 <optiga_cmd_queue_scheduler+0x138>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 80044fa:	2b22      	cmp	r3, #34	@ 0x22
 80044fc:	d104      	bne.n	8004508 <optiga_cmd_queue_scheduler+0x128>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	8a9b      	ldrh	r3, [r3, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d107      	bne.n	8004518 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 800450c:	2b21      	cmp	r3, #33	@ 0x21
 800450e:	d003      	beq.n	8004518 <optiga_cmd_queue_scheduler+0x138>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 8004514:	2b23      	cmp	r3, #35	@ 0x23
 8004516:	d104      	bne.n	8004522 <optiga_cmd_queue_scheduler+0x142>
                            reference_time_stamp = p_queue_entry->arrival_time;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 800451e:	7efb      	ldrb	r3, [r7, #27]
 8004520:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8004522:	7efb      	ldrb	r3, [r7, #27]
 8004524:	3301      	adds	r3, #1
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	7efb      	ldrb	r3, [r7, #27]
 800452a:	2b05      	cmp	r3, #5
 800452c:	d9a0      	bls.n	8004470 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 800452e:	7ebb      	ldrb	r3, [r7, #26]
 8004530:	2bff      	cmp	r3, #255	@ 0xff
 8004532:	d102      	bne.n	800453a <optiga_cmd_queue_scheduler+0x15a>
 8004534:	7e7b      	ldrb	r3, [r7, #25]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d08e      	beq.n	8004458 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 800453a:	7ebb      	ldrb	r3, [r7, #26]
 800453c:	2bff      	cmp	r3, #255	@ 0xff
 800453e:	d054      	beq.n	80045ea <optiga_cmd_queue_scheduler+0x20a>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 8004540:	7eba      	ldrb	r2, [r7, #26]
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4413      	add	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004554:	7eba      	ldrb	r2, [r7, #26]
 8004556:	6979      	ldr	r1, [r7, #20]
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b22      	cmp	r3, #34	@ 0x22
 800456a:	d111      	bne.n	8004590 <optiga_cmd_queue_scheduler+0x1b0>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <optiga_cmd_queue_scheduler+0x1b0>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8004576:	7eba      	ldrb	r2, [r7, #26]
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fe3a 	bl	8004204 <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 8004590:	7eba      	ldrb	r2, [r7, #26]
 8004592:	6979      	ldr	r1, [r7, #20]
 8004594:	4613      	mov	r3, r2
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 80045aa:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 80045ac:	7eba      	ldrb	r2, [r7, #26]
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	4613      	mov	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2332      	movs	r3, #50	@ 0x32
 80045c2:	4910      	ldr	r1, [pc, #64]	@ (8004604 <optiga_cmd_queue_scheduler+0x224>)
 80045c4:	6938      	ldr	r0, [r7, #16]
 80045c6:	f002 fc31 	bl	8006e2c <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 80045ca:	7eba      	ldrb	r2, [r7, #26]
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	4613      	mov	r3, r2
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80045dc:	2204      	movs	r2, #4
 80045de:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
}
 80045e8:	e006      	b.n	80045f8 <optiga_cmd_queue_scheduler+0x218>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 80045ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4903      	ldr	r1, [pc, #12]	@ (8004600 <optiga_cmd_queue_scheduler+0x220>)
 80045f2:	6938      	ldr	r0, [r7, #16]
 80045f4:	f002 fc1a 	bl	8006e2c <pal_os_event_register_callback_oneshot>
}
 80045f8:	bf00      	nop
 80045fa:	3720      	adds	r7, #32
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	080043e1 	.word	0x080043e1
 8004604:	08004173 	.word	0x08004173

08004608 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 8004608:	b5b0      	push	{r4, r5, r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7f9b      	ldrb	r3, [r3, #30]
 800461c:	4619      	mov	r1, r3
 800461e:	460b      	mov	r3, r1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b23      	cmp	r3, #35	@ 0x23
 8004630:	d111      	bne.n	8004656 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7f9b      	ldrb	r3, [r3, #30]
 800463a:	4619      	mov	r1, r3
 800463c:	460b      	mov	r3, r1
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	440b      	add	r3, r1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800464a:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 800464c:	2b23      	cmp	r3, #35	@ 0x23
 800464e:	d112      	bne.n	8004676 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	2b23      	cmp	r3, #35	@ 0x23
 8004654:	d00f      	beq.n	8004676 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	7f9b      	ldrb	r3, [r3, #30]
 800465e:	461d      	mov	r5, r3
 8004660:	f002 fca0 	bl	8006fa4 <pal_os_timer_get_time_in_microseconds>
 8004664:	4602      	mov	r2, r0
 8004666:	462b      	mov	r3, r5
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	442b      	add	r3, r5
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4423      	add	r3, r4
 8004670:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004674:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7f9b      	ldrb	r3, [r3, #30]
 800467e:	4619      	mov	r1, r3
 8004680:	460b      	mov	r3, r1
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	440b      	add	r3, r1
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7f9b      	ldrb	r3, [r3, #30]
 800469a:	4619      	mov	r1, r3
 800469c:	460b      	mov	r3, r1
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	440b      	add	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b23      	cmp	r3, #35	@ 0x23
 80046ae:	d111      	bne.n	80046d4 <optiga_cmd_queue_update_slot+0xcc>
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	2b23      	cmp	r3, #35	@ 0x23
 80046b4:	d10e      	bne.n	80046d4 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	7f9b      	ldrb	r3, [r3, #30]
 80046be:	4619      	mov	r1, r3
 80046c0:	460b      	mov	r3, r1
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	440b      	add	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80046ce:	2208      	movs	r2, #8
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e00d      	b.n	80046f0 <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7f9b      	ldrb	r3, [r3, #30]
 80046dc:	4619      	mov	r1, r3
 80046de:	460b      	mov	r3, r1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	440b      	add	r3, r1
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80046ec:	2202      	movs	r2, #2
 80046ee:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7f9b      	ldrb	r3, [r3, #30]
 80046f8:	4619      	mov	r1, r3
 80046fa:	460b      	mov	r3, r1
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	440b      	add	r3, r1
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	701a      	strb	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bdb0      	pop	{r4, r5, r7, pc}

08004714 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7f9b      	ldrb	r3, [r3, #30]
 8004724:	4619      	mov	r1, r3
 8004726:	460b      	mov	r3, r1
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	440b      	add	r3, r1
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8004734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004738:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	7f9b      	ldrb	r3, [r3, #30]
 8004742:	4619      	mov	r1, r3
 8004744:	460b      	mov	r3, r1
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	440b      	add	r3, r1
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7f9b      	ldrb	r3, [r3, #30]
 800475e:	4619      	mov	r1, r3
 8004760:	460b      	mov	r3, r1
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	440b      	add	r3, r1
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	7f9b      	ldrb	r3, [r3, #30]
 800477a:	4619      	mov	r1, r3
 800477c:	460b      	mov	r3, r1
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	440b      	add	r3, r1
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 800478a:	2201      	movs	r2, #1
 800478c:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	4903      	ldr	r1, [pc, #12]	@ (80047ac <optiga_cmd_queue_reset_slot+0x98>)
 800479e:	f002 fb07 	bl	8006db0 <pal_os_event_start>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	080043e1 	.word	0x080043e1

080047b0 <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7f9b      	ldrb	r3, [r3, #30]
 80047c0:	4619      	mov	r1, r3
 80047c2:	460b      	mov	r3, r1
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	440b      	add	r3, r1
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	f203 6339 	addw	r3, r3, #1593	@ 0x639
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7f9b      	ldrb	r3, [r3, #30]
 80047dc:	4619      	mov	r1, r3
 80047de:	460b      	mov	r3, r1
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	440b      	add	r3, r1
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63c7 	add.w	r3, r3, #1592	@ 0x638
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 8004804:	2122      	movs	r1, #34	@ 0x22
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff fefe 	bl	8004608 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fd22 	bl	8004268 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff fee2 	bl	8004608 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ff5c 	bl	8004714 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800486e:	f240 2302 	movw	r3, #514	@ 0x202
 8004872:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 800487c:	2308      	movs	r3, #8
 800487e:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                  me->p_optiga->optiga_context_handle_buffer,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 800488c:	f107 020c 	add.w	r2, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	f002 fa05 	bl	8006ca0 <pal_os_datastore_read>
 8004896:	4603      	mov	r3, r0
 8004898:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11a      	bne.n	80048d6 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fc01 	bl	80060b0 <optiga_common_get_uint32>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10d      	bne.n	80048d0 <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fbf7 	bl	80060b0 <optiga_common_get_uint32>
 80048c2:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 80048c8:	f240 2302 	movw	r3, #514	@ 0x202
 80048cc:	81fb      	strh	r3, [r7, #14]
            break;
 80048ce:	e003      	b.n	80048d8 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 80048d0:	2300      	movs	r3, #0
 80048d2:	81fb      	strh	r3, [r7, #14]
 80048d4:	e000      	b.n	80048d8 <optiga_cmd_restore_context+0x72>
                break;
 80048d6:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 80048d8:	89fb      	ldrh	r3, [r7, #14]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <optiga_cmd_clear_app_ctx>:
    return (return_status);
}

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
_STATIC_H void optiga_cmd_clear_app_ctx(void * p_ctx)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
    /*In the case of hibernate if any low level error occurs while performing
      close application this section clears the saved application context.*/
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	7e5b      	ldrb	r3, [r3, #25]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d029      	beq.n	800494a <optiga_cmd_clear_app_ctx+0x68>
        (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	7f1b      	ldrb	r3, [r3, #28]
    if ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param) &&
 80048fa:	2b22      	cmp	r3, #34	@ 0x22
 80048fc:	d125      	bne.n	800494a <optiga_cmd_clear_app_ctx+0x68>
    {
        pal_os_memset(me->p_optiga->optiga_context_handle_buffer,0,
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8004906:	2208      	movs	r2, #8
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f002 fb32 	bl	8006f74 <pal_os_memset>
                        sizeof(me->p_optiga->optiga_context_handle_buffer));
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004914:	2b33      	cmp	r3, #51	@ 0x33
 8004916:	d118      	bne.n	800494a <optiga_cmd_clear_app_ctx+0x68>
            (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
        if ((OPTIGA_HIBERNATE_CONTEXT_ID == me->optiga_context_datastore_id) &&
 800491c:	2b00      	cmp	r3, #0
 800491e:	d014      	beq.n	800494a <optiga_cmd_clear_app_ctx+0x68>
        {
            //Clearing context handle secret from datastore
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                     me->p_optiga->optiga_context_handle_buffer,
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
            me->exit_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 800492c:	2208      	movs	r2, #8
 800492e:	4619      	mov	r1, r3
 8004930:	f002 f938 	bl	8006ba4 <pal_os_datastore_write>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	841a      	strh	r2, [r3, #32]
                                                     sizeof(me->p_optiga->optiga_context_handle_buffer));
            if (PAL_STATUS_SUCCESS != me->exit_status)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8c1b      	ldrh	r3, [r3, #32]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <optiga_cmd_clear_app_ctx+0x68>
            {
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2204      	movs	r2, #4
 8004948:	759a      	strb	r2, [r3, #22]
            }
        }
    }
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <optiga_cmd_execute_comms_open>:
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7ddb      	ldrb	r3, [r3, #23]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d05f      	beq.n	8004a2c <optiga_cmd_execute_comms_open+0xd8>
 800496c:	2b02      	cmp	r3, #2
 800496e:	dc6d      	bgt.n	8004a4c <optiga_cmd_execute_comms_open+0xf8>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <optiga_cmd_execute_comms_open+0x26>
 8004974:	2b01      	cmp	r3, #1
 8004976:	d01b      	beq.n	80049b0 <optiga_cmd_execute_comms_open+0x5c>
 8004978:	e068      	b.n	8004a4c <optiga_cmd_execute_comms_open+0xf8>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 800497a:	2121      	movs	r1, #33	@ 0x21
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff56 	bl	800482e <optiga_cmd_request_lock>
 8004982:	4603      	mov	r3, r0
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8c1b      	ldrh	r3, [r3, #32]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2204      	movs	r2, #4
 8004996:	759a      	strb	r2, [r3, #22]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f240 2202 	movw	r2, #514	@ 0x202
 800499e:	841a      	strh	r2, [r3, #32]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
                    break;
 80049a6:	e05c      	b.n	8004a62 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	75da      	strb	r2, [r3, #23]
                break;
 80049ae:	e058      	b.n	8004a62 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	7e92      	ldrb	r2, [r2, #26]
 80049ba:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	7ed2      	ldrb	r2, [r2, #27]
 80049c6:	74da      	strb	r2, [r3, #19]
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	7f12      	ldrb	r2, [r2, #28]
 80049d2:	751a      	strb	r2, [r3, #20]
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 80049e2:	601a      	str	r2, [r3, #0]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 f8e4 	bl	8005bba <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f8ed 	bl	8005bd8 <optiga_comms_open>
 80049fe:	4603      	mov	r3, r0
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8c1b      	ldrh	r3, [r3, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <optiga_cmd_execute_comms_open+0xd0>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	759a      	strb	r2, [r3, #22]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f240 2202 	movw	r2, #514	@ 0x202
 8004a1a:	841a      	strh	r2, [r3, #32]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	701a      	strb	r2, [r3, #0]
                    break;
 8004a22:	e01e      	b.n	8004a62 <optiga_cmd_execute_comms_open+0x10e>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	75da      	strb	r2, [r3, #23]
                break;
 8004a2a:	e01a      	b.n	8004a62 <optiga_cmd_execute_comms_open+0x10e>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004a34:	2332      	movs	r3, #50	@ 0x32
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4910      	ldr	r1, [pc, #64]	@ (8004a7c <optiga_cmd_execute_comms_open+0x128>)
 8004a3a:	f002 f9f7 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2209      	movs	r2, #9
 8004a48:	75da      	strb	r2, [r3, #23]
                break;
 8004a4a:	e00a      	b.n	8004a62 <optiga_cmd_execute_comms_open+0x10e>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	759a      	strb	r2, [r3, #22]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f240 2202 	movw	r2, #514	@ 0x202
 8004a58:	841a      	strh	r2, [r3, #32]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
            break;
 8004a60:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <optiga_cmd_execute_comms_open+0x120>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7d9b      	ldrb	r3, [r3, #22]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f43f af75 	beq.w	800495e <optiga_cmd_execute_comms_open+0xa>
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08004173 	.word	0x08004173

08004a80 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7ddb      	ldrb	r3, [r3, #23]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d002      	beq.n	8004a9e <optiga_cmd_execute_comms_close+0x1e>
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d068      	beq.n	8004b6e <optiga_cmd_execute_comms_close+0xee>
 8004a9c:	e07a      	b.n	8004b94 <optiga_cmd_execute_comms_close+0x114>
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_START:
            {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is not invoked or is PRL is not enabled,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it synchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE != me->manage_context_operation)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7f1b      	ldrb	r3, [r3, #28]
 8004aa2:	2b22      	cmp	r3, #34	@ 0x22
 8004aa4:	d002      	beq.n	8004aac <optiga_cmd_execute_comms_close+0x2c>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	75da      	strb	r2, [r3, #23]
                }
                me->p_optiga->p_optiga_comms->protection_level =  me->protection_level;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	7e92      	ldrb	r2, [r2, #26]
 8004ab6:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	7ed2      	ldrb	r2, [r2, #27]
 8004ac2:	74da      	strb	r2, [r3, #19]
                if (0 != me->p_optiga->protection_level_state)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f893 3688 	ldrb.w	r3, [r3, #1672]	@ 0x688
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <optiga_cmd_execute_comms_close+0x5e>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	7f12      	ldrb	r2, [r2, #28]
 8004ada:	751a      	strb	r2, [r3, #20]
 8004adc:	e004      	b.n	8004ae8 <optiga_cmd_execute_comms_close+0x68>
                }
                else
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2233      	movs	r2, #51	@ 0x33
 8004ae6:	751a      	strb	r2, [r3, #20]
                }
                me->p_optiga->protection_level_state = 0;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2204      	movs	r2, #4
 8004af6:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 8004b06:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f852 	bl	8005bba <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 f8d9 	bl	8005cd4 <optiga_comms_close>
 8004b22:	4603      	mov	r3, r0
 8004b24:	461a      	mov	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8c1b      	ldrh	r3, [r3, #32]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <optiga_cmd_execute_comms_close+0xc8>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2204      	movs	r2, #4
 8004b36:	759a      	strb	r2, [r3, #22]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f240 2202 	movw	r2, #514	@ 0x202
 8004b3e:	841a      	strh	r2, [r3, #32]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
                    break;
 8004b46:	e031      	b.n	8004bac <optiga_cmd_execute_comms_close+0x12c>
                }

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // In case PRL is enabled and save context is requested,
                //change state to OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE, since it asynchronous in nature
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	7f1b      	ldrb	r3, [r3, #28]
 8004b4c:	2b22      	cmp	r3, #34	@ 0x22
 8004b4e:	d106      	bne.n	8004b5e <optiga_cmd_execute_comms_close+0xde>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2204      	movs	r2, #4
 8004b54:	75da      	strb	r2, [r3, #23]
                    *exit_loop = TRUE;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004b5c:	e026      	b.n	8004bac <optiga_cmd_execute_comms_close+0x12c>
                    me->exit_status = optiga_cmd_release_lock(me);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fe75 	bl	800484e <optiga_cmd_release_lock>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	841a      	strh	r2, [r3, #32]
                break;
 8004b6c:	e01e      	b.n	8004bac <optiga_cmd_execute_comms_close+0x12c>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	2100      	movs	r1, #0
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4798      	blx	r3
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                // For asynchronous behavior, change state to release the lock
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7f1b      	ldrb	r3, [r3, #28]
 8004b80:	2b22      	cmp	r3, #34	@ 0x22
 8004b82:	d112      	bne.n	8004baa <optiga_cmd_execute_comms_close+0x12a>
                {
                    me->exit_status = optiga_cmd_release_lock(me);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff fe62 	bl	800484e <optiga_cmd_release_lock>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	841a      	strh	r2, [r3, #32]
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 8004b92:	e00a      	b.n	8004baa <optiga_cmd_execute_comms_close+0x12a>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2204      	movs	r2, #4
 8004b98:	759a      	strb	r2, [r3, #22]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f240 2202 	movw	r2, #514	@ 0x202
 8004ba0:	841a      	strh	r2, [r3, #32]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
            break;
 8004ba8:	e000      	b.n	8004bac <optiga_cmd_execute_comms_close+0x12c>
                break;
 8004baa:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <optiga_cmd_execute_comms_close+0x13e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7d9b      	ldrb	r3, [r3, #22]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f43f af66 	beq.w	8004a8a <optiga_cmd_execute_comms_close+0xa>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7ddb      	ldrb	r3, [r3, #23]
 8004bdc:	3b05      	subs	r3, #5
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	f200 80d6 	bhi.w	8004d90 <optiga_cmd_execute_prepare_command+0x1c8>
 8004be4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <optiga_cmd_execute_prepare_command+0x24>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c01 	.word	0x08004c01
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c55 	.word	0x08004c55
 8004bf8:	08004c69 	.word	0x08004c69
 8004bfc:	08004ca5 	.word	0x08004ca5
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7ddb      	ldrb	r3, [r3, #23]
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d107      	bne.n	8004c1e <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff fdf4 	bl	80047fc <optiga_cmd_request_session>
 8004c14:	4603      	mov	r3, r0
 8004c16:	461a      	mov	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	841a      	strh	r2, [r3, #32]
 8004c1c:	e007      	b.n	8004c2e <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8004c1e:	2121      	movs	r1, #33	@ 0x21
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fe04 	bl	800482e <optiga_cmd_request_lock>
 8004c26:	4603      	mov	r3, r0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	841a      	strh	r2, [r3, #32]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8c1b      	ldrh	r3, [r3, #32]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	759a      	strb	r2, [r3, #22]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f240 2202 	movw	r2, #514	@ 0x202
 8004c42:	841a      	strh	r2, [r3, #32]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
                    break;
 8004c4a:	e0ac      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2209      	movs	r2, #9
 8004c50:	75da      	strb	r2, [r3, #23]
                break;
 8004c52:	e0a8      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff fdab 	bl	80047b0 <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
                break;
 8004c66:	e09e      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 8004c68:	2123      	movs	r1, #35	@ 0x23
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fddf 	bl	800482e <optiga_cmd_request_lock>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8c1b      	ldrh	r3, [r3, #32]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2204      	movs	r2, #4
 8004c84:	759a      	strb	r2, [r3, #22]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f240 2202 	movw	r2, #514	@ 0x202
 8004c8c:	841a      	strh	r2, [r3, #32]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
                    break;
 8004c94:	e087      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2209      	movs	r2, #9
 8004c9a:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
                break;
 8004ca2:	e080      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	841a      	strh	r2, [r3, #32]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8c1b      	ldrh	r3, [r3, #32]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
                    break;
 8004ccc:	e06b      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f240 6222 	movw	r2, #1570	@ 0x622
 8004cd6:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	7e92      	ldrb	r2, [r2, #26]
 8004ce2:	749a      	strb	r2, [r3, #18]
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	7ed2      	ldrb	r2, [r2, #27]
 8004cee:	74da      	strb	r2, [r3, #19]
                me->p_optiga->protection_level_state |= me->protection_level;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f893 1688 	ldrb.w	r1, [r3, #1672]	@ 0x688
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7e9a      	ldrb	r2, [r3, #26]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	f883 2688 	strb.w	r2, [r3, #1672]	@ 0x688
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 ff52 	bl	8005bba <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004d28:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 8004d36:	3306      	adds	r3, #6
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	f000 ff84 	bl	8005c48 <optiga_comms_transceive>
 8004d40:	4603      	mov	r3, r0
 8004d42:	461a      	mov	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	841a      	strh	r2, [r3, #32]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8c1b      	ldrh	r3, [r3, #32]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <optiga_cmd_execute_prepare_command+0x19e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2204      	movs	r2, #4
 8004d54:	759a      	strb	r2, [r3, #22]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f240 2202 	movw	r2, #514	@ 0x202
 8004d5c:	841a      	strh	r2, [r3, #32]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
                    break;
 8004d64:	e01f      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	220a      	movs	r2, #10
 8004d70:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7f5b      	ldrb	r3, [r3, #29]
 8004d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	775a      	strb	r2, [r3, #29]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7f5b      	ldrb	r3, [r3, #29]
 8004d84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	775a      	strb	r2, [r3, #29]
                break;
 8004d8e:	e00a      	b.n	8004da6 <optiga_cmd_execute_prepare_command+0x1de>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2204      	movs	r2, #4
 8004d94:	759a      	strb	r2, [r3, #22]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f240 2202 	movw	r2, #514	@ 0x202
 8004d9c:	841a      	strh	r2, [r3, #32]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
            break;
 8004da4:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <optiga_cmd_execute_prepare_command+0x1f0>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	7d9b      	ldrb	r3, [r3, #22]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	f43f af10 	beq.w	8004bd8 <optiga_cmd_execute_prepare_command+0x10>
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd90      	pop	{r4, r7, pc}

08004dc0 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fa69 	bl	80052a8 <optiga_cmd_get_error_code_handler>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	841a      	strh	r2, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8c1b      	ldrh	r3, [r3, #32]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <optiga_cmd_execute_get_device_error+0x30>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8c1b      	ldrh	r3, [r3, #32]
 8004dea:	b21b      	sxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	da0a      	bge.n	8004e06 <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8c1b      	ldrh	r3, [r3, #32]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004df8:	d10c      	bne.n	8004e14 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7f5b      	ldrb	r3, [r3, #29]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d106      	bne.n	8004e14 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
            break;
 8004e12:	bf00      	nop
        }
    } while (FALSE);
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	7f5b      	ldrb	r3, [r3, #29]
 8004e36:	b25b      	sxtb	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da0b      	bge.n	8004e54 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	841a      	strh	r2, [r3, #32]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8c1b      	ldrh	r3, [r3, #32]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d14e      	bne.n	8004ef0 <optiga_cmd_execute_process_optiga_response+0xd4>
 8004e52:	e006      	b.n	8004e62 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2204      	movs	r2, #4
 8004e58:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
            break;
 8004e60:	e06f      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2bf1      	cmp	r3, #241	@ 0xf1
 8004e6a:	d113      	bne.n	8004e94 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	4934      	ldr	r1, [pc, #208]	@ (8004f4c <optiga_cmd_execute_process_optiga_response+0x130>)
 8004e7c:	f001 ffd6 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8004e92:	e056      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
                if (FALSE == me->chaining_ongoing)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7e1b      	ldrb	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10e      	bne.n	8004eba <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	7ddb      	ldrb	r3, [r3, #23]
 8004ea0:	2b0e      	cmp	r3, #14
 8004ea2:	d006      	beq.n	8004eb2 <optiga_cmd_execute_process_optiga_response+0x96>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	7ddb      	ldrb	r3, [r3, #23]
 8004ea8:	2b0d      	cmp	r3, #13
 8004eaa:	d002      	beq.n	8004eb2 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	220c      	movs	r2, #12
 8004eb0:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	701a      	strb	r2, [r3, #0]
                    break;
 8004eb8:	e043      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8004ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4920      	ldr	r1, [pc, #128]	@ (8004f4c <optiga_cmd_execute_process_optiga_response+0x130>)
 8004eca:	f001 ffaf 	bl	8006e2c <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
                    me->protection_level &= OPTIGA_PROTECTION_LEVEL_MASK;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7e9b      	ldrb	r3, [r3, #26]
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	769a      	strb	r2, [r3, #26]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2209      	movs	r2, #9
 8004eec:	75da      	strb	r2, [r3, #23]
}
 8004eee:	e028      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8c1b      	ldrh	r3, [r3, #32]
 8004ef4:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8004ef8:	d106      	bne.n	8004f08 <optiga_cmd_execute_process_optiga_response+0xec>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	220c      	movs	r2, #12
 8004efe:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
                break;
 8004f06:	e01c      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7ddb      	ldrb	r3, [r3, #23]
 8004f0c:	2b0d      	cmp	r3, #13
 8004f0e:	d103      	bne.n	8004f18 <optiga_cmd_execute_process_optiga_response+0xfc>
                *exit_loop = FALSE;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
}
 8004f16:	e014      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	220b      	movs	r2, #11
 8004f1c:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	7f5b      	ldrb	r3, [r3, #29]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	775a      	strb	r2, [r3, #29]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	7f5b      	ldrb	r3, [r3, #29]
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	775a      	strb	r2, [r3, #29]
                *exit_loop = FALSE;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	701a      	strb	r2, [r3, #0]
}
 8004f40:	e7ff      	b.n	8004f42 <optiga_cmd_execute_process_optiga_response+0x126>
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	08004173 	.word	0x08004173

08004f50 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	7ddb      	ldrb	r3, [r3, #23]
 8004f5e:	3b0a      	subs	r3, #10
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d84d      	bhi.n	8005000 <optiga_cmd_execute_process_response+0xb0>
 8004f64:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <optiga_cmd_execute_process_response+0x1c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f81 	.word	0x08004f81
 8004f70:	08004f8b 	.word	0x08004f8b
 8004f74:	08004fd5 	.word	0x08004fd5
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	08004fe9 	.word	0x08004fe9
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8004f80:	6839      	ldr	r1, [r7, #0]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff ff4a 	bl	8004e1c <optiga_cmd_execute_process_optiga_response>
                break;
 8004f88:	e045      	b.n	8005016 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ff17 	bl	8004dc0 <optiga_cmd_execute_get_device_error>
                break;
 8004f92:	e040      	b.n	8005016 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff fc3e 	bl	8004816 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	8c1b      	ldrh	r3, [r3, #32]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	220c      	movs	r2, #12
 8004fa6:	75da      	strb	r2, [r3, #23]
 8004fa8:	e010      	b.n	8004fcc <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	220b      	movs	r2, #11
 8004fae:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	7f5b      	ldrb	r3, [r3, #29]
 8004fb4:	f023 0303 	bic.w	r3, r3, #3
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	775a      	strb	r2, [r3, #29]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	7f5b      	ldrb	r3, [r3, #29]
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	775a      	strb	r2, [r3, #29]
                }
                *exit_loop = FALSE;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
                break;
 8004fd2:	e020      	b.n	8005016 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fc3a 	bl	800484e <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	220e      	movs	r2, #14
 8004fde:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
                break;
 8004fe6:	e016      	b.n	8005016 <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68d0      	ldr	r0, [r2, #12]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	8c12      	ldrh	r2, [r2, #32]
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4798      	blx	r3
                *exit_loop = TRUE;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
                break;
 8004ffe:	e00a      	b.n	8005016 <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2204      	movs	r2, #4
 8005004:	759a      	strb	r2, [r3, #22]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f240 2202 	movw	r2, #514	@ 0x202
 800500c:	841a      	strh	r2, [r3, #32]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
            break;
 8005014:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <optiga_cmd_execute_process_response+0xd6>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	7d9b      	ldrb	r3, [r3, #22]
 8005022:	2b03      	cmp	r3, #3
 8005024:	d099      	beq.n	8004f5a <optiga_cmd_execute_process_response+0xa>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fc07 	bl	800484e <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	68d0      	ldr	r0, [r2, #12]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	8c12      	ldrh	r2, [r2, #32]
 800504c:	4611      	mov	r1, r2
 800504e:	4798      	blx	r3
        *exit_loop = TRUE;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 800506c:	2301      	movs	r3, #1
 800506e:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8005074:	887b      	ldrh	r3, [r7, #2]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <optiga_cmd_execute_handler+0x2c>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fc31 	bl	80048e2 <optiga_cmd_clear_app_ctx>
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2204      	movs	r2, #4
 8005084:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	841a      	strh	r2, [r3, #32]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	7d9b      	ldrb	r3, [r3, #22]
 8005090:	2b04      	cmp	r3, #4
 8005092:	d830      	bhi.n	80050f6 <optiga_cmd_execute_handler+0x96>
 8005094:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <optiga_cmd_execute_handler+0x3c>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050b1 	.word	0x080050b1
 80050a0:	080050bf 	.word	0x080050bf
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050e9 	.word	0x080050e9
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 80050b0:	f107 030b 	add.w	r3, r7, #11
 80050b4:	4619      	mov	r1, r3
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fc4c 	bl	8004954 <optiga_cmd_execute_comms_open>
                break;
 80050bc:	e01c      	b.n	80050f8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 80050be:	f107 030b 	add.w	r3, r7, #11
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff fcdb 	bl	8004a80 <optiga_cmd_execute_comms_close>
                break;
 80050ca:	e015      	b.n	80050f8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 80050cc:	f107 030b 	add.w	r3, r7, #11
 80050d0:	4619      	mov	r1, r3
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fd78 	bl	8004bc8 <optiga_cmd_execute_prepare_command>
                break;
 80050d8:	e00e      	b.n	80050f8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 80050da:	f107 030b 	add.w	r3, r7, #11
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff ff35 	bl	8004f50 <optiga_cmd_execute_process_response>
                break;
 80050e6:	e007      	b.n	80050f8 <optiga_cmd_execute_handler+0x98>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 80050e8:	f107 030b 	add.w	r3, r7, #11
 80050ec:	4619      	mov	r1, r3
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff9e 	bl	8005030 <optiga_cmd_execute_error_handler>
                break;
 80050f4:	e000      	b.n	80050f8 <optiga_cmd_execute_handler+0x98>
            }
            default :
                break;
 80050f6:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 80050f8:	7afb      	ldrb	r3, [r7, #11]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0c6      	beq.n	800508c <optiga_cmd_execute_handler+0x2c>
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 800511a:	f001 fef5 	bl	8006f08 <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d15b      	bne.n	80051dc <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	4a33      	ldr	r2, [pc, #204]	@ (80051f4 <optiga_cmd_create+0xec>)
 8005128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800512c:	2200      	movs	r2, #0
 800512e:	2109      	movs	r1, #9
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff f8b9 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d051      	beq.n	80051e0 <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 800513c:	2128      	movs	r1, #40	@ 0x28
 800513e:	2001      	movs	r0, #1
 8005140:	f001 fef0 	bl	8006f24 <pal_os_calloc>
 8005144:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d04b      	beq.n	80051e4 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	4a26      	ldr	r2, [pc, #152]	@ (80051f4 <optiga_cmd_create+0xec>)
 800515c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	4a24      	ldr	r2, [pc, #144]	@ (80051f8 <optiga_cmd_create+0xf0>)
 8005168:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	845a      	strh	r2, [r3, #34]	@ 0x22

        if (FALSE == me->p_optiga->instance_init_state)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	7b1b      	ldrb	r3, [r3, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d129      	bne.n	80051ce <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681c      	ldr	r4, [r3, #0]
 8005182:	4611      	mov	r1, r2
 8005184:	481d      	ldr	r0, [pc, #116]	@ (80051fc <optiga_cmd_create+0xf4>)
 8005186:	f001 fe39 	bl	8006dfc <pal_os_event_create>
 800518a:	4603      	mov	r3, r0
 800518c:	f8c4 3678 	str.w	r3, [r4, #1656]	@ 0x678
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681c      	ldr	r4, [r3, #0]
 8005194:	6979      	ldr	r1, [r7, #20]
 8005196:	481a      	ldr	r0, [pc, #104]	@ (8005200 <optiga_cmd_create+0xf8>)
 8005198:	f000 fcd2 	bl	8005b40 <optiga_comms_create>
 800519c:	4603      	mov	r3, r0
 800519e:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f001 fec8 	bl	8006f40 <pal_os_free>
                me = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
                break;
 80051b4:	e017      	b.n	80051e6 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8d2 2678 	ldr.w	r2, [r2, #1656]	@ 0x678
 80051cc:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	331e      	adds	r3, #30
 80051d2:	4619      	mov	r1, r3
 80051d4:	6978      	ldr	r0, [r7, #20]
 80051d6:	f7ff f8a8 	bl	800432a <optiga_cmd_queue_assign_slot>
 80051da:	e004      	b.n	80051e6 <optiga_cmd_create+0xde>
            break;
 80051dc:	bf00      	nop
 80051de:	e002      	b.n	80051e6 <optiga_cmd_create+0xde>
            break;
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <optiga_cmd_create+0xde>
            break;
 80051e4:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 80051e6:	f001 fe96 	bl	8006f16 <pal_os_lock_exit_critical_section>
    return (me);
 80051ea:	697b      	ldr	r3, [r7, #20]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	371c      	adds	r7, #28
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd90      	pop	{r4, r7, pc}
 80051f4:	200004cc 	.word	0x200004cc
 80051f8:	200004d0 	.word	0x200004d0
 80051fc:	080043e1 	.word	0x080043e1
 8005200:	08005061 	.word	0x08005061

08005204 <optiga_cmd_destroy>:

optiga_lib_status_t optiga_cmd_destroy(optiga_cmd_t * me)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800520c:	f240 2302 	movw	r3, #514	@ 0x202
 8005210:	81fb      	strh	r3, [r7, #14]

    pal_os_lock_enter_critical_section();
 8005212:	f001 fe79 	bl	8006f08 <pal_os_lock_enter_critical_section>
    do
    {
        if (NULL != me)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d03c      	beq.n	8005296 <optiga_cmd_destroy+0x92>
        {
            return_status = optiga_cmd_release_session(me);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fafa 	bl	8004816 <optiga_cmd_release_session>
 8005222:	4603      	mov	r3, r0
 8005224:	81fb      	strh	r3, [r7, #14]
            // attach optiga cmd queue entry
            optiga_cmd_queue_deassign_slot(me);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff f8b1 	bl	800438e <optiga_cmd_queue_deassign_slot>
            // If all the slots are free, then destroy optiga comms and pal_os_event resources
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
               optiga_cmd_queue_get_count_of(g_optiga_list[0],
 800522c:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <optiga_cmd_destroy+0xa0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2200      	movs	r2, #0
 8005232:	2109      	movs	r1, #9
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff f837 	bl	80042a8 <optiga_cmd_queue_get_count_of>
 800523a:	4603      	mov	r3, r0
            if (OPTIGA_CMD_MAX_REGISTRATIONS == 
 800523c:	2b06      	cmp	r3, #6
 800523e:	d125      	bne.n	800528c <optiga_cmd_destroy+0x88>
                                             OPTIGA_CMD_QUEUE_SLOT_STATE,
                                             OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
            {
                if (TRUE == me->p_optiga->instance_init_state)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	7b1b      	ldrb	r3, [r3, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d120      	bne.n	800528c <optiga_cmd_destroy+0x88>
                {
                    pal_os_event_stop(me->p_optiga->p_optiga_comms->p_pal_os_event_ctx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fdc4 	bl	8006de0 <pal_os_event_stop>
                    me->p_optiga->instance_init_state = FALSE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	731a      	strb	r2, [r3, #12]
                    me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
                    optiga_comms_destroy(me->p_optiga->p_optiga_comms);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fc8b 	bl	8005b8c <optiga_comms_destroy>
                    me->p_optiga->p_optiga_comms = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
                    pal_os_event_destroy(me->p_optiga->p_pal_os_event_ctx);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 8005286:	4618      	mov	r0, r3
 8005288:	f001 fe34 	bl	8006ef4 <pal_os_event_destroy>
                }
            }
            
            pal_os_free(me);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fe57 	bl	8006f40 <pal_os_free>
            //lint --e{838} suppress "Release session API returns success. Status is checked for future enhancements"
            return_status = OPTIGA_LIB_SUCCESS;
 8005292:	2300      	movs	r3, #0
 8005294:	81fb      	strh	r3, [r7, #14]
        }
    } while (FALSE);
    pal_os_lock_exit_critical_section();
 8005296:	f001 fe3e 	bl	8006f16 <pal_os_lock_exit_critical_section>

    return (return_status);
 800529a:	89fb      	ldrh	r3, [r7, #14]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	200004cc 	.word	0x200004cc

080052a8 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 80052b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052b4:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80052b6:	2309      	movs	r3, #9
 80052b8:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7f5b      	ldrb	r3, [r3, #29]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	f000 8099 	beq.w	8005400 <optiga_cmd_get_error_code_handler+0x158>
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	f300 80b6 	bgt.w	8005440 <optiga_cmd_get_error_code_handler+0x198>
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d002      	beq.n	80052de <optiga_cmd_get_error_code_handler+0x36>
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d052      	beq.n	8005382 <optiga_cmd_get_error_code_handler+0xda>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 80052dc:	e0b0      	b.n	8005440 <optiga_cmd_get_error_code_handler+0x198>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f103 020d 	add.w	r2, r3, #13
 80052e6:	89bb      	ldrh	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fea6 	bl	8006040 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80052f4:	89bb      	ldrh	r3, [r7, #12]
 80052f6:	3302      	adds	r3, #2
 80052f8:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f103 020d 	add.w	r2, r3, #13
 8005302:	89bb      	ldrh	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fe99 	bl	8006040 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800530e:	89bb      	ldrh	r3, [r7, #12]
 8005310:	3302      	adds	r3, #2
 8005312:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f103 020d 	add.w	r2, r3, #13
 800531c:	89bb      	ldrh	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	2101      	movs	r1, #1
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fe8c 	bl	8006040 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005328:	89bb      	ldrh	r3, [r7, #12]
 800532a:	3302      	adds	r3, #2
 800532c:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800532e:	89bb      	ldrh	r3, [r7, #12]
 8005330:	3b09      	subs	r3, #9
 8005332:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 800533a:	3305      	adds	r3, #5
 800533c:	2100      	movs	r1, #0
 800533e:	2001      	movs	r0, #1
 8005340:	f7fe fec3 	bl	80040ca <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	89ba      	ldrh	r2, [r7, #12]
 800534a:	3a05      	subs	r2, #5
 800534c:	b292      	uxth	r2, r2
 800534e:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7f5b      	ldrb	r3, [r3, #29]
 8005354:	f023 0303 	bic.w	r3, r3, #3
 8005358:	b2da      	uxtb	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	775a      	strb	r2, [r3, #29]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	7f5b      	ldrb	r3, [r3, #29]
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	775a      	strb	r2, [r3, #29]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005374:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4935      	ldr	r1, [pc, #212]	@ (8005450 <optiga_cmd_get_error_code_handler+0x1a8>)
 800537c:	f001 fd56 	bl	8006e2c <pal_os_event_register_callback_oneshot>
        break;
 8005380:	e061      	b.n	8005446 <optiga_cmd_get_error_code_handler+0x19e>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f240 6222 	movw	r2, #1570	@ 0x622
 800538a:	80da      	strh	r2, [r3, #6]
            me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	7e92      	ldrb	r2, [r2, #26]
 8005396:	749a      	strb	r2, [r3, #18]
            me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	7ed2      	ldrb	r2, [r2, #27]
 80053a2:	74da      	strb	r2, [r3, #19]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fc05 	bl	8005bba <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	3306      	adds	r3, #6
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	4623      	mov	r3, r4
 80053cc:	f000 fc3c 	bl	8005c48 <optiga_comms_transceive>
 80053d0:	4603      	mov	r3, r0
 80053d2:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 80053d4:	89fb      	ldrh	r3, [r7, #14]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <optiga_cmd_get_error_code_handler+0x13a>
                return_status = OPTIGA_CMD_ERROR;
 80053da:	f240 2302 	movw	r3, #514	@ 0x202
 80053de:	81fb      	strh	r3, [r7, #14]
                break;
 80053e0:	e031      	b.n	8005446 <optiga_cmd_get_error_code_handler+0x19e>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7f5b      	ldrb	r3, [r3, #29]
 80053e6:	f023 0303 	bic.w	r3, r3, #3
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	775a      	strb	r2, [r3, #29]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7f5b      	ldrb	r3, [r3, #29]
 80053f4:	f043 0303 	orr.w	r3, r3, #3
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	775a      	strb	r2, [r3, #29]
        break;
 80053fe:	e022      	b.n	8005446 <optiga_cmd_get_error_code_handler+0x19e>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	7c9b      	ldrb	r3, [r3, #18]
 8005406:	2bff      	cmp	r3, #255	@ 0xff
 8005408:	d01c      	beq.n	8005444 <optiga_cmd_get_error_code_handler+0x19c>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	7d9b      	ldrb	r3, [r3, #22]
 8005410:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8005412:	89fb      	ldrh	r3, [r7, #14]
 8005414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541c:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2203      	movs	r2, #3
 8005422:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	220a      	movs	r2, #10
 8005428:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8d3 0678 	ldr.w	r0, [r3, #1656]	@ 0x678
 8005432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4905      	ldr	r1, [pc, #20]	@ (8005450 <optiga_cmd_get_error_code_handler+0x1a8>)
 800543a:	f001 fcf7 	bl	8006e2c <pal_os_event_register_callback_oneshot>
        break;
 800543e:	e002      	b.n	8005446 <optiga_cmd_get_error_code_handler+0x19e>
            break;
 8005440:	bf00      	nop
 8005442:	e000      	b.n	8005446 <optiga_cmd_get_error_code_handler+0x19e>
                break;
 8005444:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8005446:	89fb      	ldrh	r3, [r7, #14]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}
 8005450:	08004173 	.word	0x08004173

08005454 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800545c:	f240 2302 	movw	r3, #514	@ 0x202
 8005460:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	7d9b      	ldrb	r3, [r3, #22]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d002      	beq.n	8005470 <optiga_cmd_open_application_handler+0x1c>
 800546a:	2b03      	cmp	r3, #3
 800546c:	d07a      	beq.n	8005564 <optiga_cmd_open_application_handler+0x110>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 800546e:	e0a2      	b.n	80055b6 <optiga_cmd_open_application_handler+0x162>
            OPTIGA_CMD_LOG_MESSAGE("Sending open app command...");
 8005470:	4a53      	ldr	r2, [pc, #332]	@ (80055c0 <optiga_cmd_open_application_handler+0x16c>)
 8005472:	4954      	ldr	r1, [pc, #336]	@ (80055c4 <optiga_cmd_open_application_handler+0x170>)
 8005474:	4854      	ldr	r0, [pc, #336]	@ (80055c8 <optiga_cmd_open_application_handler+0x174>)
 8005476:	f000 ff65 	bl	8006344 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 800547a:	2314      	movs	r3, #20
 800547c:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7e5b      	ldrb	r3, [r3, #25]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <optiga_cmd_open_application_handler+0x36>
 8005486:	2200      	movs	r2, #0
 8005488:	e000      	b.n	800548c <optiga_cmd_open_application_handler+0x38>
 800548a:	2208      	movs	r2, #8
 800548c:	89bb      	ldrh	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005492:	89bb      	ldrh	r3, [r7, #12]
 8005494:	f240 6215 	movw	r2, #1557	@ 0x615
 8005498:	4293      	cmp	r3, r2
 800549a:	d903      	bls.n	80054a4 <optiga_cmd_open_application_handler+0x50>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800549c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80054a0:	81fb      	strh	r3, [r7, #14]
                break;
 80054a2:	e088      	b.n	80055b6 <optiga_cmd_open_application_handler+0x162>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7e5b      	ldrb	r3, [r3, #25]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <optiga_cmd_open_application_handler+0x64>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff f9da 	bl	8004866 <optiga_cmd_restore_context>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d17d      	bne.n	80055b4 <optiga_cmd_open_application_handler+0x160>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <optiga_cmd_open_application_handler+0x74>
 80054c4:	2210      	movs	r2, #16
 80054c6:	e000      	b.n	80054ca <optiga_cmd_open_application_handler+0x76>
 80054c8:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 80054d0:	3305      	adds	r3, #5
 80054d2:	20f0      	movs	r0, #240	@ 0xf0
 80054d4:	f7fe fdf9 	bl	80040ca <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330d      	adds	r3, #13
 80054de:	3309      	adds	r3, #9
 80054e0:	2210      	movs	r2, #16
 80054e2:	493a      	ldr	r1, [pc, #232]	@ (80055cc <optiga_cmd_open_application_handler+0x178>)
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fd36 	bl	8006f56 <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	7e5b      	ldrb	r3, [r3, #25]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <optiga_cmd_open_application_handler+0xb6>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
                              me->p_optiga->optiga_context_handle_buffer,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8005502:	2208      	movs	r2, #8
 8005504:	4619      	mov	r1, r3
 8005506:	f001 fd26 	bl	8006f56 <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <optiga_cmd_open_application_handler+0xc2>
 8005512:	2214      	movs	r2, #20
 8005514:	e000      	b.n	8005518 <optiga_cmd_open_application_handler+0xc4>
 8005516:	221c      	movs	r2, #28
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8005526:	2208      	movs	r2, #8
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f001 fd22 	bl	8006f74 <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005534:	2b00      	cmp	r3, #0
 8005536:	d012      	beq.n	800555e <optiga_cmd_open_application_handler+0x10a>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8c58      	ldrh	r0, [r3, #34]	@ 0x22
                                                       me->p_optiga->optiga_context_handle_buffer,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8005544:	2208      	movs	r2, #8
 8005546:	4619      	mov	r1, r3
 8005548:	f001 fb2c 	bl	8006ba4 <pal_os_datastore_write>
 800554c:	4603      	mov	r3, r0
 800554e:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <optiga_cmd_open_application_handler+0x10a>
                    return_status = OPTIGA_CMD_ERROR;
 8005556:	f240 2302 	movw	r3, #514	@ 0x202
 800555a:	81fb      	strh	r3, [r7, #14]
                    break;
 800555c:	e02b      	b.n	80055b6 <optiga_cmd_open_application_handler+0x162>
            return_status = OPTIGA_LIB_SUCCESS;
 800555e:	2300      	movs	r3, #0
 8005560:	81fb      	strh	r3, [r7, #14]
        break;
 8005562:	e028      	b.n	80055b6 <optiga_cmd_open_application_handler+0x162>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for open app command...");
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <optiga_cmd_open_application_handler+0x16c>)
 8005566:	4917      	ldr	r1, [pc, #92]	@ (80055c4 <optiga_cmd_open_application_handler+0x170>)
 8005568:	4819      	ldr	r0, [pc, #100]	@ (80055d0 <optiga_cmd_open_application_handler+0x17c>)
 800556a:	f000 feeb 	bl	8006344 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	7c9b      	ldrb	r3, [r3, #18]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d010      	beq.n	800559a <optiga_cmd_open_application_handler+0x146>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing open app response...");
 8005578:	4a11      	ldr	r2, [pc, #68]	@ (80055c0 <optiga_cmd_open_application_handler+0x16c>)
 800557a:	4912      	ldr	r1, [pc, #72]	@ (80055c4 <optiga_cmd_open_application_handler+0x170>)
 800557c:	4815      	ldr	r0, [pc, #84]	@ (80055d4 <optiga_cmd_open_application_handler+0x180>)
 800557e:	f000 fee1 	bl	8006344 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	7f5b      	ldrb	r3, [r3, #29]
 8005586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800558a:	b2da      	uxtb	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	775a      	strb	r2, [r3, #29]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	7f5a      	ldrb	r2, [r3, #29]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	775a      	strb	r2, [r3, #29]
                break;
 8005598:	e00d      	b.n	80055b6 <optiga_cmd_open_application_handler+0x162>
            me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2233      	movs	r2, #51	@ 0x33
 80055a2:	751a      	strb	r2, [r3, #20]
            OPTIGA_CMD_LOG_MESSAGE("Response of open app command is processed...");
 80055a4:	4a06      	ldr	r2, [pc, #24]	@ (80055c0 <optiga_cmd_open_application_handler+0x16c>)
 80055a6:	4907      	ldr	r1, [pc, #28]	@ (80055c4 <optiga_cmd_open_application_handler+0x170>)
 80055a8:	480b      	ldr	r0, [pc, #44]	@ (80055d8 <optiga_cmd_open_application_handler+0x184>)
 80055aa:	f000 fecb 	bl	8006344 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
 80055ae:	2300      	movs	r3, #0
 80055b0:	81fb      	strh	r3, [r7, #14]
        break;
 80055b2:	e000      	b.n	80055b6 <optiga_cmd_open_application_handler+0x162>
                    break;
 80055b4:	bf00      	nop
    }

    return (return_status);
 80055b6:	89fb      	ldrh	r3, [r7, #14]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	08010000 	.word	0x08010000
 80055c4:	08010008 	.word	0x08010008
 80055c8:	08010020 	.word	0x08010020
 80055cc:	08010c84 	.word	0x08010c84
 80055d0:	0801003c 	.word	0x0801003c
 80055d4:	08010068 	.word	0x08010068
 80055d8:	08010094 	.word	0x08010094

080055dc <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	460b      	mov	r3, r1
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 80055ea:	4a0b      	ldr	r2, [pc, #44]	@ (8005618 <optiga_cmd_open_application+0x3c>)
 80055ec:	490b      	ldr	r1, [pc, #44]	@ (800561c <optiga_cmd_open_application+0x40>)
 80055ee:	480c      	ldr	r0, [pc, #48]	@ (8005620 <optiga_cmd_open_application+0x44>)
 80055f0:	f000 fea8 	bl	8006344 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 80055f4:	7af9      	ldrb	r1, [r7, #11]
 80055f6:	23f0      	movs	r3, #240	@ 0xf0
 80055f8:	9302      	str	r3, [sp, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	9301      	str	r3, [sp, #4]
 80055fe:	2300      	movs	r3, #0
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	2300      	movs	r3, #0
 8005604:	4a07      	ldr	r2, [pc, #28]	@ (8005624 <optiga_cmd_open_application+0x48>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7fe fdbf 	bl	800418a <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	08010000 	.word	0x08010000
 800561c:	08010008 	.word	0x08010008
 8005620:	08010c94 	.word	0x08010c94
 8005624:	08005455 	.word	0x08005455

08005628 <optiga_cmd_get_data_object_handler>:

/*
* Get Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_data_object_handler(optiga_cmd_t * me)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_data_object_params_t * p_optiga_read_data = (optiga_get_data_object_params_t *)me->p_input;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	617b      	str	r3, [r7, #20]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8005636:	f240 2302 	movw	r3, #514	@ 0x202
 800563a:	83fb      	strh	r3, [r7, #30]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800563c:	2309      	movs	r3, #9
 800563e:	83bb      	strh	r3, [r7, #28]
    uint16_t size_to_read, data_read;
    uint8_t cmd = OPTIGA_CMD_GET_DATA_OBJECT;
 8005640:	2381      	movs	r3, #129	@ 0x81
 8005642:	76fb      	strb	r3, [r7, #27]
    switch ((uint8_t)me->cmd_next_execution_state)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7d9b      	ldrb	r3, [r3, #22]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d002      	beq.n	8005652 <optiga_cmd_get_data_object_handler+0x2a>
 800564c:	2b03      	cmp	r3, #3
 800564e:	d073      	beq.n	8005738 <optiga_cmd_get_data_object_handler+0x110>
                return_status = OPTIGA_LIB_SUCCESS;
            }
        }
        break;
        default:
            break;
 8005650:	e105      	b.n	800585e <optiga_cmd_get_data_object_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Sending read data command...");
 8005652:	4a85      	ldr	r2, [pc, #532]	@ (8005868 <optiga_cmd_get_data_object_handler+0x240>)
 8005654:	4985      	ldr	r1, [pc, #532]	@ (800586c <optiga_cmd_get_data_object_handler+0x244>)
 8005656:	4886      	ldr	r0, [pc, #536]	@ (8005870 <optiga_cmd_get_data_object_handler+0x248>)
 8005658:	f000 fe74 	bl	8006344 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800565c:	230a      	movs	r3, #10
 800565e:	823b      	strh	r3, [r7, #16]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8005660:	8a3b      	ldrh	r3, [r7, #16]
 8005662:	f240 6215 	movw	r2, #1557	@ 0x615
 8005666:	4293      	cmp	r3, r2
 8005668:	d907      	bls.n	800567a <optiga_cmd_get_data_object_handler+0x52>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800566a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800566e:	83fb      	strh	r3, [r7, #30]
                *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2200      	movs	r2, #0
 8005676:	801a      	strh	r2, [r3, #0]
                break;
 8005678:	e0f1      	b.n	800585e <optiga_cmd_get_data_object_handler+0x236>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	8bbb      	ldrh	r3, [r7, #28]
 8005680:	3308      	adds	r3, #8
 8005682:	4413      	add	r3, r2
 8005684:	1d5a      	adds	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	891b      	ldrh	r3, [r3, #8]
 800568a:	4619      	mov	r1, r3
 800568c:	4610      	mov	r0, r2
 800568e:	f000 fcd7 	bl	8006040 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8005692:	8bbb      	ldrh	r3, [r7, #28]
 8005694:	3302      	adds	r3, #2
 8005696:	83bb      	strh	r3, [r7, #28]
            size_to_read = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE - OPTIGA_CMD_APDU_HEADER_SIZE),
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	899b      	ldrh	r3, [r3, #12]
 800569c:	461a      	mov	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	89db      	ldrh	r3, [r3, #14]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f240 6211 	movw	r2, #1553	@ 0x611
 80056a8:	4293      	cmp	r3, r2
 80056aa:	bfa8      	it	ge
 80056ac:	4613      	movge	r3, r2
 80056ae:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_CMD_READ_DATA == p_optiga_read_data->data_or_metadata)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	7c9b      	ldrb	r3, [r3, #18]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11f      	bne.n	80056f8 <optiga_cmd_get_data_object_handler+0xd0>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	8bbb      	ldrh	r3, [r7, #28]
 80056be:	3308      	adds	r3, #8
 80056c0:	4413      	add	r3, r2
 80056c2:	1d58      	adds	r0, r3, #5
                           (p_optiga_read_data->offset + p_optiga_read_data->accumulated_size));
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	895a      	ldrh	r2, [r3, #10]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	89db      	ldrh	r3, [r3, #14]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056cc:	4413      	add	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	f000 fcb5 	bl	8006040 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80056d6:	8bbb      	ldrh	r3, [r7, #28]
 80056d8:	3302      	adds	r3, #2
 80056da:	83bb      	strh	r3, [r7, #28]
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	8bbb      	ldrh	r3, [r7, #28]
 80056e2:	3308      	adds	r3, #8
 80056e4:	4413      	add	r3, r2
 80056e6:	3305      	adds	r3, #5
 80056e8:	89fa      	ldrh	r2, [r7, #14]
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fca7 	bl	8006040 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80056f2:	8bbb      	ldrh	r3, [r7, #28]
 80056f4:	3302      	adds	r3, #2
 80056f6:	83bb      	strh	r3, [r7, #28]
            if (OPTIGA_CMD_LAST_ERROR_CODE == p_optiga_read_data->oid)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	891b      	ldrh	r3, [r3, #8]
 80056fc:	f24f 12c2 	movw	r2, #61890	@ 0xf1c2
 8005700:	4293      	cmp	r3, r2
 8005702:	d101      	bne.n	8005708 <optiga_cmd_get_data_object_handler+0xe0>
                cmd = OPTIGA_CMD_GET_DATA_OBJECT_NO_ERROR_CLEAR;
 8005704:	2301      	movs	r3, #1
 8005706:	76fb      	strb	r3, [r7, #27]
            optiga_cmd_prepare_apdu_header(cmd,
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	7e59      	ldrb	r1, [r3, #25]
 800570c:	8bbb      	ldrh	r3, [r7, #28]
 800570e:	3b09      	subs	r3, #9
 8005710:	b29a      	uxth	r2, r3
                                           (me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(cmd,
 8005718:	3305      	adds	r3, #5
 800571a:	7ef8      	ldrb	r0, [r7, #27]
 800571c:	f7fe fcd5 	bl	80040ca <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	8bba      	ldrh	r2, [r7, #28]
 8005726:	3a05      	subs	r2, #5
 8005728:	b292      	uxth	r2, r2
 800572a:	809a      	strh	r2, [r3, #4]
            p_optiga_read_data->last_read_size = size_to_read;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	89fa      	ldrh	r2, [r7, #14]
 8005730:	821a      	strh	r2, [r3, #16]
            return_status = OPTIGA_LIB_SUCCESS;
 8005732:	2300      	movs	r3, #0
 8005734:	83fb      	strh	r3, [r7, #30]
        break;
 8005736:	e092      	b.n	800585e <optiga_cmd_get_data_object_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for read data command...");
 8005738:	4a4b      	ldr	r2, [pc, #300]	@ (8005868 <optiga_cmd_get_data_object_handler+0x240>)
 800573a:	494c      	ldr	r1, [pc, #304]	@ (800586c <optiga_cmd_get_data_object_handler+0x244>)
 800573c:	484d      	ldr	r0, [pc, #308]	@ (8005874 <optiga_cmd_get_data_object_handler+0x24c>)
 800573e:	f000 fe01 	bl	8006344 <optiga_lib_print_message>
            me->chaining_ongoing = FALSE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	761a      	strb	r2, [r3, #24]
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	7c9b      	ldrb	r3, [r3, #18]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d02a      	beq.n	80057a8 <optiga_cmd_get_data_object_handler+0x180>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
 8005752:	4a45      	ldr	r2, [pc, #276]	@ (8005868 <optiga_cmd_get_data_object_handler+0x240>)
 8005754:	4945      	ldr	r1, [pc, #276]	@ (800586c <optiga_cmd_get_data_object_handler+0x244>)
 8005756:	4848      	ldr	r0, [pc, #288]	@ (8005878 <optiga_cmd_get_data_object_handler+0x250>)
 8005758:	f000 fdf4 	bl	8006344 <optiga_lib_print_message>
                if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != p_optiga_read_data->accumulated_size)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	89db      	ldrh	r3, [r3, #14]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00e      	beq.n	8005782 <optiga_cmd_get_data_object_handler+0x15a>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	7f5b      	ldrb	r3, [r3, #29]
 8005768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800576c:	b2da      	uxtb	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	775a      	strb	r2, [r3, #29]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	7f5b      	ldrb	r3, [r3, #29]
 8005776:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800577a:	b2da      	uxtb	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	775a      	strb	r2, [r3, #29]
 8005780:	e00e      	b.n	80057a0 <optiga_cmd_get_data_object_handler+0x178>
                    SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	7f5b      	ldrb	r3, [r3, #29]
 8005786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578a:	b2da      	uxtb	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	775a      	strb	r2, [r3, #29]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7f5a      	ldrb	r2, [r3, #29]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	775a      	strb	r2, [r3, #29]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2200      	movs	r2, #0
 800579e:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR;
 80057a0:	f240 2302 	movw	r3, #514	@ 0x202
 80057a4:	83fb      	strh	r3, [r7, #30]
        break;
 80057a6:	e059      	b.n	800585c <optiga_cmd_get_data_object_handler+0x234>
            else if (me->exit_status == (optiga_lib_status_t)(OPTIGA_CMD_OUT_OF_BOUNDARY_ERROR | OPTIGA_DEVICE_ERROR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8c1b      	ldrh	r3, [r3, #32]
 80057ac:	f248 0208 	movw	r2, #32776	@ 0x8008
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d107      	bne.n	80057c4 <optiga_cmd_get_data_object_handler+0x19c>
                *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	89d2      	ldrh	r2, [r2, #14]
 80057bc:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_LIB_SUCCESS;
 80057be:	2300      	movs	r3, #0
 80057c0:	83fb      	strh	r3, [r7, #30]
        break;
 80057c2:	e04b      	b.n	800585c <optiga_cmd_get_data_object_handler+0x234>
                data_read = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	88db      	ldrh	r3, [r3, #6]
 80057ca:	3b04      	subs	r3, #4
 80057cc:	827b      	strh	r3, [r7, #18]
                if (p_optiga_read_data->bytes_to_read < data_read)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	899b      	ldrh	r3, [r3, #12]
 80057d2:	8a7a      	ldrh	r2, [r7, #18]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d90c      	bls.n	80057f2 <optiga_cmd_get_data_object_handler+0x1ca>
                    OPTIGA_CMD_LOG_MESSAGE("Error in processing read data response...");
 80057d8:	4a23      	ldr	r2, [pc, #140]	@ (8005868 <optiga_cmd_get_data_object_handler+0x240>)
 80057da:	4924      	ldr	r1, [pc, #144]	@ (800586c <optiga_cmd_get_data_object_handler+0x244>)
 80057dc:	4826      	ldr	r0, [pc, #152]	@ (8005878 <optiga_cmd_get_data_object_handler+0x250>)
 80057de:	f000 fdb1 	bl	8006344 <optiga_lib_print_message>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80057e2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80057e6:	83fb      	strh	r3, [r7, #30]
                    *(p_optiga_read_data->ref_bytes_to_read) = 0x00;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2200      	movs	r2, #0
 80057ee:	801a      	strh	r2, [r3, #0]
                    break;
 80057f0:	e035      	b.n	800585e <optiga_cmd_get_data_object_handler+0x236>
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	89d2      	ldrh	r2, [r2, #14]
 80057fa:	1898      	adds	r0, r3, r2
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330d      	adds	r3, #13
                pal_os_memcpy(p_optiga_read_data->buffer + p_optiga_read_data->accumulated_size,
 8005802:	3309      	adds	r3, #9
 8005804:	8a7a      	ldrh	r2, [r7, #18]
 8005806:	4619      	mov	r1, r3
 8005808:	f001 fba5 	bl	8006f56 <pal_os_memcpy>
                p_optiga_read_data->accumulated_size += data_read;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	89da      	ldrh	r2, [r3, #14]
 8005810:	8a7b      	ldrh	r3, [r7, #18]
 8005812:	4413      	add	r3, r2
 8005814:	b29a      	uxth	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	81da      	strh	r2, [r3, #14]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	8a1b      	ldrh	r3, [r3, #16]
 800581e:	8a7a      	ldrh	r2, [r7, #18]
 8005820:	429a      	cmp	r2, r3
 8005822:	d305      	bcc.n	8005830 <optiga_cmd_get_data_object_handler+0x208>
                    (p_optiga_read_data->accumulated_size == p_optiga_read_data->bytes_to_read))
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	89da      	ldrh	r2, [r3, #14]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	899b      	ldrh	r3, [r3, #12]
                if ((p_optiga_read_data->last_read_size > data_read) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d10b      	bne.n	8005848 <optiga_cmd_get_data_object_handler+0x220>
                    *(p_optiga_read_data->ref_bytes_to_read) = p_optiga_read_data->accumulated_size;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	89d2      	ldrh	r2, [r2, #14]
 8005838:	801a      	strh	r2, [r3, #0]
                    p_optiga_read_data->accumulated_size = 0;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	81da      	strh	r2, [r3, #14]
                    p_optiga_read_data->last_read_size = 0;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2200      	movs	r2, #0
 8005844:	821a      	strh	r2, [r3, #16]
 8005846:	e002      	b.n	800584e <optiga_cmd_get_data_object_handler+0x226>
                    me->chaining_ongoing = TRUE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	761a      	strb	r2, [r3, #24]
                OPTIGA_CMD_LOG_MESSAGE("Response of read data command is processed...");
 800584e:	4a06      	ldr	r2, [pc, #24]	@ (8005868 <optiga_cmd_get_data_object_handler+0x240>)
 8005850:	4906      	ldr	r1, [pc, #24]	@ (800586c <optiga_cmd_get_data_object_handler+0x244>)
 8005852:	480a      	ldr	r0, [pc, #40]	@ (800587c <optiga_cmd_get_data_object_handler+0x254>)
 8005854:	f000 fd76 	bl	8006344 <optiga_lib_print_message>
                return_status = OPTIGA_LIB_SUCCESS;
 8005858:	2300      	movs	r3, #0
 800585a:	83fb      	strh	r3, [r7, #30]
        break;
 800585c:	bf00      	nop
    }

    return (return_status);
 800585e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08010000 	.word	0x08010000
 800586c:	08010008 	.word	0x08010008
 8005870:	0801016c 	.word	0x0801016c
 8005874:	0801018c 	.word	0x0801018c
 8005878:	080101bc 	.word	0x080101bc
 800587c:	080101e8 	.word	0x080101e8

08005880 <optiga_cmd_get_data_object>:

optiga_lib_status_t optiga_cmd_get_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_get_data_object_params_t * params)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af04      	add	r7, sp, #16
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	460b      	mov	r3, r1
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 800588e:	4a0b      	ldr	r2, [pc, #44]	@ (80058bc <optiga_cmd_get_data_object+0x3c>)
 8005890:	490b      	ldr	r1, [pc, #44]	@ (80058c0 <optiga_cmd_get_data_object+0x40>)
 8005892:	480c      	ldr	r0, [pc, #48]	@ (80058c4 <optiga_cmd_get_data_object+0x44>)
 8005894:	f000 fd56 	bl	8006344 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8005898:	7af9      	ldrb	r1, [r7, #11]
 800589a:	2381      	movs	r3, #129	@ 0x81
 800589c:	9302      	str	r3, [sp, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	2306      	movs	r3, #6
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2302      	movs	r3, #2
 80058a8:	4a07      	ldr	r2, [pc, #28]	@ (80058c8 <optiga_cmd_get_data_object+0x48>)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f7fe fc6d 	bl	800418a <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	08010000 	.word	0x08010000
 80058c0:	08010008 	.word	0x08010008
 80058c4:	08010cb0 	.word	0x08010cb0
 80058c8:	08005629 	.word	0x08005629

080058cc <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80058da:	2309      	movs	r3, #9
 80058dc:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80058de:	f240 2302 	movw	r3, #514	@ 0x202
 80058e2:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	7d9b      	ldrb	r3, [r3, #22]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d003      	beq.n	80058f4 <optiga_cmd_verify_sign_handler+0x28>
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	f000 80cc 	beq.w	8005a8a <optiga_cmd_verify_sign_handler+0x1be>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 80058f2:	e0ed      	b.n	8005ad0 <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Sending verify sign command..");
 80058f4:	4a79      	ldr	r2, [pc, #484]	@ (8005adc <optiga_cmd_verify_sign_handler+0x210>)
 80058f6:	497a      	ldr	r1, [pc, #488]	@ (8005ae0 <optiga_cmd_verify_sign_handler+0x214>)
 80058f8:	487a      	ldr	r0, [pc, #488]	@ (8005ae4 <optiga_cmd_verify_sign_handler+0x218>)
 80058fa:	f000 fd23 	bl	8006344 <optiga_lib_print_message>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	7c1b      	ldrb	r3, [r3, #16]
 8005902:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	899b      	ldrh	r3, [r3, #12]
 8005908:	4413      	add	r3, r2
 800590a:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <optiga_cmd_verify_sign_handler+0x54>
                                     p_optiga_verify_sign->public_key->length));
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 800591a:	3309      	adds	r3, #9
 800591c:	b29b      	uxth	r3, r3
 800591e:	e000      	b.n	8005922 <optiga_cmd_verify_sign_handler+0x56>
 8005920:	2305      	movs	r3, #5
 8005922:	4413      	add	r3, r2
 8005924:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8005926:	330a      	adds	r3, #10
 8005928:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 800592a:	89fb      	ldrh	r3, [r7, #14]
 800592c:	f240 6215 	movw	r2, #1557	@ 0x615
 8005930:	4293      	cmp	r3, r2
 8005932:	d903      	bls.n	800593c <optiga_cmd_verify_sign_handler+0x70>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8005934:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8005938:	82fb      	strh	r3, [r7, #22]
                break;
 800593a:	e0c9      	b.n	8005ad0 <optiga_cmd_verify_sign_handler+0x204>
                                          p_optiga_verify_sign->digest_length,
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 8005940:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2001      	movs	r0, #1
 8005950:	f7fe fbde 	bl	8004110 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330d      	adds	r3, #13
 800595a:	89ba      	ldrh	r2, [r7, #12]
 800595c:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005966:	461a      	mov	r2, r3
 8005968:	f001 faf5 	bl	8006f56 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	7c1b      	ldrb	r3, [r3, #16]
 8005970:	461a      	mov	r2, r3
 8005972:	89bb      	ldrh	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	b29b      	uxth	r3, r3
 8005978:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 8005986:	f107 030c 	add.w	r3, r7, #12
 800598a:	2002      	movs	r0, #2
 800598c:	f7fe fbc0 	bl	8004110 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330d      	adds	r3, #13
 8005996:	89ba      	ldrh	r2, [r7, #12]
 8005998:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80059a2:	461a      	mov	r2, r3
 80059a4:	f001 fad7 	bl	8006f56 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	899a      	ldrh	r2, [r3, #12]
 80059ac:	89bb      	ldrh	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	7c5b      	ldrb	r3, [r3, #17]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d119      	bne.n	80059f0 <optiga_cmd_verify_sign_handler+0x124>
                                              me->p_optiga->optiga_comms_buffer,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 80059c4:	f107 030c 	add.w	r3, r7, #12
 80059c8:	2102      	movs	r1, #2
 80059ca:	2004      	movs	r0, #4
 80059cc:	f7fe fba0 	bl	8004110 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330d      	adds	r3, #13
 80059d6:	89ba      	ldrh	r2, [r7, #12]
 80059d8:	441a      	add	r2, r3
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	89db      	ldrh	r3, [r3, #14]
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f000 fb2d 	bl	8006040 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80059e6:	89bb      	ldrh	r3, [r7, #12]
 80059e8:	3302      	adds	r3, #2
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	81bb      	strh	r3, [r7, #12]
 80059ee:	e037      	b.n	8005a60 <optiga_cmd_verify_sign_handler+0x194>
                                              me->p_optiga->optiga_comms_buffer,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 80059f8:	f107 030c 	add.w	r3, r7, #12
 80059fc:	2101      	movs	r1, #1
 80059fe:	2005      	movs	r0, #5
 8005a00:	f7fe fb86 	bl	8004110 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f103 010d 	add.w	r1, r3, #13
 8005a10:	89bb      	ldrh	r3, [r7, #12]
 8005a12:	1c58      	adds	r0, r3, #1
 8005a14:	b280      	uxth	r0, r0
 8005a16:	81b8      	strh	r0, [r7, #12]
 8005a18:	440b      	add	r3, r1
 8005a1a:	7992      	ldrb	r2, [r2, #6]
 8005a1c:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8005a22:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8005a2c:	f107 030c 	add.w	r3, r7, #12
 8005a30:	2006      	movs	r0, #6
 8005a32:	f7fe fb6d 	bl	8004110 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330d      	adds	r3, #13
 8005a3c:	89ba      	ldrh	r2, [r7, #12]
 8005a3e:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f001 fa82 	bl	8006f56 <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	889a      	ldrh	r2, [r3, #4]
 8005a58:	89bb      	ldrh	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7e59      	ldrb	r1, [r3, #25]
 8005a64:	89bb      	ldrh	r3, [r7, #12]
 8005a66:	3b09      	subs	r3, #9
 8005a68:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 8005a70:	3305      	adds	r3, #5
 8005a72:	20b2      	movs	r0, #178	@ 0xb2
 8005a74:	f7fe fb29 	bl	80040ca <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8005a78:	89ba      	ldrh	r2, [r7, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3a05      	subs	r2, #5
 8005a80:	b292      	uxth	r2, r2
 8005a82:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8005a84:	2300      	movs	r3, #0
 8005a86:	82fb      	strh	r3, [r7, #22]
        break;
 8005a88:	e022      	b.n	8005ad0 <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Processing response for verify sign command...");
 8005a8a:	4a14      	ldr	r2, [pc, #80]	@ (8005adc <optiga_cmd_verify_sign_handler+0x210>)
 8005a8c:	4914      	ldr	r1, [pc, #80]	@ (8005ae0 <optiga_cmd_verify_sign_handler+0x214>)
 8005a8e:	4816      	ldr	r0, [pc, #88]	@ (8005ae8 <optiga_cmd_verify_sign_handler+0x21c>)
 8005a90:	f000 fc58 	bl	8006344 <optiga_lib_print_message>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	7c9b      	ldrb	r3, [r3, #18]
 8005a9a:	2bff      	cmp	r3, #255	@ 0xff
 8005a9c:	d110      	bne.n	8005ac0 <optiga_cmd_verify_sign_handler+0x1f4>
                OPTIGA_CMD_LOG_MESSAGE("Error in processing verify sign response...");
 8005a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005adc <optiga_cmd_verify_sign_handler+0x210>)
 8005aa0:	490f      	ldr	r1, [pc, #60]	@ (8005ae0 <optiga_cmd_verify_sign_handler+0x214>)
 8005aa2:	4812      	ldr	r0, [pc, #72]	@ (8005aec <optiga_cmd_verify_sign_handler+0x220>)
 8005aa4:	f000 fc4e 	bl	8006344 <optiga_lib_print_message>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7f5b      	ldrb	r3, [r3, #29]
 8005aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	775a      	strb	r2, [r3, #29]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7f5a      	ldrb	r2, [r3, #29]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	775a      	strb	r2, [r3, #29]
                break;
 8005abe:	e007      	b.n	8005ad0 <optiga_cmd_verify_sign_handler+0x204>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
 8005ac0:	4a06      	ldr	r2, [pc, #24]	@ (8005adc <optiga_cmd_verify_sign_handler+0x210>)
 8005ac2:	4907      	ldr	r1, [pc, #28]	@ (8005ae0 <optiga_cmd_verify_sign_handler+0x214>)
 8005ac4:	480a      	ldr	r0, [pc, #40]	@ (8005af0 <optiga_cmd_verify_sign_handler+0x224>)
 8005ac6:	f000 fc3d 	bl	8006344 <optiga_lib_print_message>
            return_status = OPTIGA_LIB_SUCCESS;
 8005aca:	2300      	movs	r3, #0
 8005acc:	82fb      	strh	r3, [r7, #22]
        break;
 8005ace:	bf00      	nop
    }

    return (return_status);
 8005ad0:	8afb      	ldrh	r3, [r7, #22]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	08010000 	.word	0x08010000
 8005ae0:	08010008 	.word	0x08010008
 8005ae4:	08010424 	.word	0x08010424
 8005ae8:	08010444 	.word	0x08010444
 8005aec:	08010474 	.word	0x08010474
 8005af0:	080104a0 	.word	0x080104a0

08005af4 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af04      	add	r7, sp, #16
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	460b      	mov	r3, r1
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
 8005b02:	4a0b      	ldr	r2, [pc, #44]	@ (8005b30 <optiga_cmd_verify_sign+0x3c>)
 8005b04:	490b      	ldr	r1, [pc, #44]	@ (8005b34 <optiga_cmd_verify_sign+0x40>)
 8005b06:	480c      	ldr	r0, [pc, #48]	@ (8005b38 <optiga_cmd_verify_sign+0x44>)
 8005b08:	f000 fc1c 	bl	8006344 <optiga_lib_print_message>
    optiga_cmd_execute(me,
 8005b0c:	7af9      	ldrb	r1, [r7, #11]
 8005b0e:	23b2      	movs	r3, #178	@ 0xb2
 8005b10:	9302      	str	r3, [sp, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	2306      	movs	r3, #6
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	4a07      	ldr	r2, [pc, #28]	@ (8005b3c <optiga_cmd_verify_sign+0x48>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7fe fb33 	bl	800418a <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	08010000 	.word	0x08010000
 8005b34:	08010008 	.word	0x08010008
 8005b38:	08010ccc 	.word	0x08010ccc
 8005b3c:	080058cd 	.word	0x080058cd

08005b40 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b88 <optiga_comms_create+0x48>)
 8005b50:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7c1b      	ldrb	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d110      	bne.n	8005b7c <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 8005b5a:	f000 fe8d 	bl	8006878 <pal_init>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]
                break;
 8005b68:	e008      	b.n	8005b7c <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200004d4 	.word	0x200004d4

08005b8c <optiga_comms_destroy>:

//lint --e{715} suppress "p_optiga_cmd is not used here as it is placeholder for future."
//lint --e{818} suppress "Not declared as pointer as nothing needs to be updated in the pointer."
void optiga_comms_destroy(optiga_comms_t * p_optiga_cmd)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
    do
    {
        if (TRUE == p_optiga_cmd->instance_init_state)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	7c1b      	ldrb	r3, [r3, #16]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10a      	bne.n	8005bb2 <optiga_comms_destroy+0x26>
        {
            p_optiga_cmd->instance_init_state = FALSE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	741a      	strb	r2, [r3, #16]
            p_optiga_cmd->p_upper_layer_ctx = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
            p_optiga_cmd->upper_layer_handler = NULL;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	60da      	str	r2, [r3, #12]
#ifdef OPTIGA_PAL_INIT_ENABLED
            (void)pal_deinit();
 8005bae:	f000 fe6b 	bl	8006888 <pal_deinit>
#endif
        }
    } while (FALSE);
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	609a      	str	r2, [r3, #8]
    return (0);
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005be0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005be4:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8a6 	bl	8005d38 <check_optiga_comms_state>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d122      	bne.n	8005c38 <optiga_comms_open+0x60>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a10      	ldr	r2, [pc, #64]	@ (8005c44 <optiga_comms_open+0x6c>)
 8005c02:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	7d12      	ldrb	r2, [r2, #20]
 8005c0e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fa fcac 	bl	8000580 <ifx_i2c_open>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <optiga_comms_open+0x60>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005c38:	89fb      	ldrh	r3, [r7, #14]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	08005d6d 	.word	0x08005d6d

08005c48 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005c58:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005c5c:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f86a 	bl	8005d38 <check_optiga_comms_state>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d12c      	bne.n	8005cc4 <optiga_comms_transceive+0x7c>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a15      	ldr	r2, [pc, #84]	@ (8005cd0 <optiga_comms_transceive+0x88>)
 8005c7a:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	7c92      	ldrb	r2, [r2, #18]
 8005c86:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	7cd2      	ldrb	r2, [r2, #19]
 8005c92:	f883 24c1 	strb.w	r2, [r3, #1217]	@ 0x4c1
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	7d12      	ldrb	r2, [r2, #20]
 8005c9e:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6858      	ldr	r0, [r3, #4]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	6a3b      	ldr	r3, [r7, #32]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	f7fa fc9f 	bl	80005f2 <ifx_i2c_transceive>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 8005cb8:	8afb      	ldrh	r3, [r7, #22]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <optiga_comms_transceive+0x7c>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005cc4:	8afb      	ldrh	r3, [r7, #22]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	08005d6d 	.word	0x08005d6d

08005cd4 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005cdc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005ce0:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f828 	bl	8005d38 <check_optiga_comms_state>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11c      	bne.n	8005d28 <optiga_comms_close+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	f8c3 2278 	str.w	r2, [r3, #632]	@ 0x278
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8005d34 <optiga_comms_close+0x60>)
 8005cfe:	f8c3 2274 	str.w	r2, [r3, #628]	@ 0x274
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	7d12      	ldrb	r2, [r2, #20]
 8005d0a:	f883 24c2 	strb.w	r2, [r3, #1218]	@ 0x4c2
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fa fca6 	bl	8000664 <ifx_i2c_close>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005d1c:	89fb      	ldrh	r3, [r7, #14]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <optiga_comms_close+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005d28:	89fb      	ldrh	r3, [r7, #14]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08005d6d 	.word	0x08005d6d

08005d38 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005d40:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005d44:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <check_optiga_comms_state+0x26>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	7c5b      	ldrb	r3, [r3, #17]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d004      	beq.n	8005d5e <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	4611      	mov	r1, r2
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	745a      	strb	r2, [r3, #17]
}
 8005d90:	bf00      	nop
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    me->handler(me->caller_context, event);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005db8:	8879      	ldrh	r1, [r7, #2]
 8005dba:	4610      	mov	r0, r2
 8005dbc:	4798      	blx	r3
}
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <optiga_crypt_reset_protection_level+0x18>
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f880 	bl	8005ede <optiga_crypt_set_comms_params>
    }
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	461a      	mov	r2, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	72fb      	strb	r3, [r7, #11]
 8005df6:	4613      	mov	r3, r2
 8005df8:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8005dfa:	f240 4302 	movw	r3, #1026	@ 0x402
 8005dfe:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <optiga_crypt_verify+0x3a>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <optiga_crypt_verify+0x3a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <optiga_crypt_verify+0x3a>
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005e20:	f240 4303 	movw	r3, #1027	@ 0x403
 8005e24:	82fb      	strh	r3, [r7, #22]
            break;
 8005e26:	e052      	b.n	8005ece <optiga_crypt_verify+0xe8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d103      	bne.n	8005e3a <optiga_crypt_verify+0x54>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005e32:	f240 4305 	movw	r3, #1029	@ 0x405
 8005e36:	82fb      	strh	r3, [r7, #22]
            break;
 8005e38:	e049      	b.n	8005ece <optiga_crypt_verify+0xe8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2234      	movs	r2, #52	@ 0x34
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f891 	bl	8006f74 <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4619      	mov	r1, r3
 8005e60:	f7fe f90e 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fe f905 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
        p_params->p_digest = p_digest;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	7aba      	ldrb	r2, [r7, #10]
 8005e80:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e8c:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005e94:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 8005e96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <optiga_crypt_verify+0xc2>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 8005e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	81da      	strh	r2, [r3, #14]
 8005ea6:	e002      	b.n	8005eae <optiga_crypt_verify+0xc8>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eac:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb2:	7af9      	ldrb	r1, [r7, #11]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fe1c 	bl	8005af4 <optiga_cmd_verify_sign>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005ec0:	8afb      	ldrh	r3, [r7, #22]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <optiga_crypt_verify+0xe8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff ff79 	bl	8005dc6 <optiga_crypt_reset_protection_level>

    return (return_value);
 8005ed4:	8afb      	ldrh	r3, [r7, #22]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <optiga_crypt_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_crypt_set_comms_params(optiga_crypt_t * me,
                                   uint8_t parameter_type,
                                   uint8_t value)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]
 8005eea:	4613      	mov	r3, r2
 8005eec:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d002      	beq.n	8005efa <optiga_crypt_set_comms_params+0x1c>
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d005      	beq.n	8005f04 <optiga_crypt_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 8005ef8:	e009      	b.n	8005f0e <optiga_crypt_set_comms_params+0x30>
            me->protection_level = value;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	78ba      	ldrb	r2, [r7, #2]
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            break;
 8005f02:	e004      	b.n	8005f0e <optiga_crypt_set_comms_params+0x30>
            me->protocol_version = value;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	78ba      	ldrb	r2, [r7, #2]
 8005f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
            break;
 8005f0c:	bf00      	nop
        }
    }
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d02c      	beq.n	8005f8e <optiga_crypt_create+0x72>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8005f34:	2144      	movs	r1, #68	@ 0x44
 8005f36:	2001      	movs	r0, #1
 8005f38:	f000 fff4 	bl	8006f24 <pal_os_calloc>
 8005f3c:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d026      	beq.n	8005f92 <optiga_crypt_create+0x76>
        {
            break;
        }

        me->handler = handler;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	63da      	str	r2, [r3, #60]	@ 0x3c
        me->caller_context = caller_context;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	@ 0x38
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	490c      	ldr	r1, [pc, #48]	@ (8005fa0 <optiga_crypt_create+0x84>)
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff f8ca 	bl	8005108 <optiga_cmd_create>
 8005f74:	4602      	mov	r2, r0
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	635a      	str	r2, [r3, #52]	@ 0x34
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <optiga_crypt_create+0x78>
        {
            pal_os_free(me);
 8005f82:	6978      	ldr	r0, [r7, #20]
 8005f84:	f000 ffdc 	bl	8006f40 <pal_os_free>
            me = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e002      	b.n	8005f94 <optiga_crypt_create+0x78>
            break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <optiga_crypt_create+0x78>
            break;
 8005f92:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8005f94:	697b      	ldr	r3, [r7, #20]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	08005d99 	.word	0x08005d99

08005fa4 <optiga_crypt_destroy>:

optiga_lib_status_t optiga_crypt_destroy(optiga_crypt_t * me)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t return_value;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == me)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <optiga_crypt_destroy+0x16>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005fb2:	f240 4303 	movw	r3, #1027	@ 0x403
 8005fb6:	81fb      	strh	r3, [r7, #14]
            break;
 8005fb8:	e012      	b.n	8005fe0 <optiga_crypt_destroy+0x3c>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d103      	bne.n	8005fcc <optiga_crypt_destroy+0x28>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005fc4:	f240 4305 	movw	r3, #1029	@ 0x405
 8005fc8:	81fb      	strh	r3, [r7, #14]
            break;
 8005fca:	e009      	b.n	8005fe0 <optiga_crypt_destroy+0x3c>
        }
        return_value = optiga_cmd_destroy(me->my_cmd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff f917 	bl	8005204 <optiga_cmd_destroy>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	81fb      	strh	r3, [r7, #14]
        pal_os_free(me);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 ffb0 	bl	8006f40 <pal_os_free>

    } while (FALSE);
    return (return_value);
 8005fe0:	89fb      	ldrh	r3, [r7, #14]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <optiga_crypt_ecdsa_verify>:
                                              uint8_t digest_length,
                                              const uint8_t * signature,
                                              uint16_t signature_length,
                                              uint8_t public_key_source_type,
                                              const void * public_key)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08a      	sub	sp, #40	@ 0x28
 8005ff0:	af06      	add	r7, sp, #24
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	71fb      	strb	r3, [r7, #7]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8006034 <optiga_crypt_ecdsa_verify+0x48>)
 8005ffe:	490e      	ldr	r1, [pc, #56]	@ (8006038 <optiga_crypt_ecdsa_verify+0x4c>)
 8006000:	480e      	ldr	r0, [pc, #56]	@ (800603c <optiga_crypt_ecdsa_verify+0x50>)
 8006002:	f000 f99f 	bl	8006344 <optiga_lib_print_message>
    return (optiga_crypt_verify(me,
 8006006:	79fa      	ldrb	r2, [r7, #7]
 8006008:	2300      	movs	r3, #0
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	7f3b      	ldrb	r3, [r7, #28]
 8006012:	9302      	str	r3, [sp, #8]
 8006014:	8b3b      	ldrh	r3, [r7, #24]
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	2111      	movs	r1, #17
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff fedf 	bl	8005de6 <optiga_crypt_verify>
 8006028:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                0x0000));
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	08010bd4 	.word	0x08010bd4
 8006038:	08010bdc 	.word	0x08010bdc
 800603c:	08010ce4 	.word	0x08010ce4

08006040 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	b29b      	uxth	r3, r3
 8006052:	b2da      	uxtb	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3301      	adds	r3, #1
 800605c:	887a      	ldrh	r2, [r7, #2]
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <optiga_common_set_uint32>:

void optiga_common_set_uint32 (uint8_t* p_output_buffer,uint32_t four_byte_value)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
    *(p_output_buffer) = (uint8_t)(four_byte_value>>24);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	0e1b      	lsrs	r3, r3, #24
 800607c:	b2da      	uxtb	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(four_byte_value>>16);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	0c1a      	lsrs	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3301      	adds	r3, #1
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	0a1a      	lsrs	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3302      	adds	r3, #2
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3303      	adds	r3, #3
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <optiga_common_get_uint32>:

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	061a      	lsls	r2, r3, #24
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3301      	adds	r3, #1
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3302      	adds	r3, #2
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80060ce:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	3103      	adds	r1, #3
 80060d4:	7809      	ldrb	r1, [r1, #0]
 80060d6:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <optiga_lib_byte_to_hex_string>:
/* Converts the uint8 array to hex string format */
_STATIC_H void optiga_lib_byte_to_hex_string(const uint8_t * p_array_buffer,
                                             uint8_t * p_hex_string,
                                             uint32_t length,
                                             bool_t is_input_byte_array)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	70fb      	strb	r3, [r7, #3]
    uint32_t loop = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	617b      	str	r3, [r7, #20]
    uint8_t hex_byte = 0, index = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	74bb      	strb	r3, [r7, #18]
 8006100:	2300      	movs	r3, #0
 8006102:	74fb      	strb	r3, [r7, #19]

    do
    {
        if ((NULL == p_array_buffer) || (NULL == p_hex_string))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d05f      	beq.n	80061ca <optiga_lib_byte_to_hex_string+0xe0>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d05c      	beq.n	80061ca <optiga_lib_byte_to_hex_string+0xe0>
        {
            return;
        }

        for (loop = 0; loop < length; loop++)
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e051      	b.n	80061ba <optiga_lib_byte_to_hex_string+0xd0>
        {
            index = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	74fb      	strb	r3, [r7, #19]
            hex_byte = p_array_buffer[loop];
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	4413      	add	r3, r2
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	74bb      	strb	r3, [r7, #18]
            if (TRUE == is_input_byte_array)
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d10f      	bne.n	800614a <optiga_lib_byte_to_hex_string+0x60>
            {
                p_hex_string [index++] = '0';
 800612a:	7cfb      	ldrb	r3, [r7, #19]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	74fa      	strb	r2, [r7, #19]
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	2230      	movs	r2, #48	@ 0x30
 8006138:	701a      	strb	r2, [r3, #0]
                p_hex_string [index++] = 'x';
 800613a:	7cfb      	ldrb	r3, [r7, #19]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	74fa      	strb	r2, [r7, #19]
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	4413      	add	r3, r2
 8006146:	2278      	movs	r2, #120	@ 0x78
 8006148:	701a      	strb	r2, [r3, #0]
            }

            /*Convert Byte to HexString */
            OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_hex_string, index);
 800614a:	7cbb      	ldrb	r3, [r7, #18]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	747b      	strb	r3, [r7, #17]
 8006150:	7c7b      	ldrb	r3, [r7, #17]
 8006152:	2b09      	cmp	r3, #9
 8006154:	d903      	bls.n	800615e <optiga_lib_byte_to_hex_string+0x74>
 8006156:	7c7b      	ldrb	r3, [r7, #17]
 8006158:	3337      	adds	r3, #55	@ 0x37
 800615a:	b2db      	uxtb	r3, r3
 800615c:	e002      	b.n	8006164 <optiga_lib_byte_to_hex_string+0x7a>
 800615e:	7c7b      	ldrb	r3, [r7, #17]
 8006160:	3330      	adds	r3, #48	@ 0x30
 8006162:	b2db      	uxtb	r3, r3
 8006164:	7cfa      	ldrb	r2, [r7, #19]
 8006166:	1c51      	adds	r1, r2, #1
 8006168:	74f9      	strb	r1, [r7, #19]
 800616a:	4611      	mov	r1, r2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	440a      	add	r2, r1
 8006170:	7013      	strb	r3, [r2, #0]
 8006172:	7cbb      	ldrb	r3, [r7, #18]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	747b      	strb	r3, [r7, #17]
 800617a:	7c7b      	ldrb	r3, [r7, #17]
 800617c:	2b09      	cmp	r3, #9
 800617e:	d903      	bls.n	8006188 <optiga_lib_byte_to_hex_string+0x9e>
 8006180:	7c7b      	ldrb	r3, [r7, #17]
 8006182:	3337      	adds	r3, #55	@ 0x37
 8006184:	b2db      	uxtb	r3, r3
 8006186:	e002      	b.n	800618e <optiga_lib_byte_to_hex_string+0xa4>
 8006188:	7c7b      	ldrb	r3, [r7, #17]
 800618a:	3330      	adds	r3, #48	@ 0x30
 800618c:	b2db      	uxtb	r3, r3
 800618e:	7cfa      	ldrb	r2, [r7, #19]
 8006190:	1c51      	adds	r1, r2, #1
 8006192:	74f9      	strb	r1, [r7, #19]
 8006194:	4611      	mov	r1, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	440a      	add	r2, r1
 800619a:	7013      	strb	r3, [r2, #0]
            
            p_hex_string [index++] = ' ';
 800619c:	7cfb      	ldrb	r3, [r7, #19]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	74fa      	strb	r2, [r7, #19]
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4413      	add	r3, r2
 80061a8:	2220      	movs	r2, #32
 80061aa:	701a      	strb	r2, [r3, #0]
            p_hex_string += index;
 80061ac:	7cfb      	ldrb	r3, [r7, #19]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
        for (loop = 0; loop < length; loop++)
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	3301      	adds	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d3a9      	bcc.n	8006116 <optiga_lib_byte_to_hex_string+0x2c>
        }
        *p_hex_string = 0x00;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e000      	b.n	80061cc <optiga_lib_byte_to_hex_string+0xe2>
            return;
 80061ca:	bf00      	nop
    } while(0);
}
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <optiga_lib_word_to_hex_string>:
/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_word_to_hex_string(uint16_t value,
                                             uint8_t * p_buffer)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b087      	sub	sp, #28
 80061da:	af00      	add	r7, sp, #0
 80061dc:	4603      	mov	r3, r0
 80061de:	6039      	str	r1, [r7, #0]
 80061e0:	80fb      	strh	r3, [r7, #6]
    uint8_t array_buffer [5] = {0};   
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	2300      	movs	r3, #0
 80061e8:	743b      	strb	r3, [r7, #16]
    uint8_t loop, hex_byte = 0, index = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	757b      	strb	r3, [r7, #21]
 80061ee:	2300      	movs	r3, #0
 80061f0:	75bb      	strb	r3, [r7, #22]
    
    array_buffer [0] = (uint8_t)((value & 0xFF00) >> 8);
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	733b      	strb	r3, [r7, #12]
    array_buffer [1] = (uint8_t)((value & 0x00FF));
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	737b      	strb	r3, [r7, #13]

    p_buffer [index++] = '0';
 8006202:	7dbb      	ldrb	r3, [r7, #22]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	75ba      	strb	r2, [r7, #22]
 8006208:	461a      	mov	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	4413      	add	r3, r2
 800620e:	2230      	movs	r2, #48	@ 0x30
 8006210:	701a      	strb	r2, [r3, #0]
    p_buffer [index++] = 'x';
 8006212:	7dbb      	ldrb	r3, [r7, #22]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	75ba      	strb	r2, [r7, #22]
 8006218:	461a      	mov	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	4413      	add	r3, r2
 800621e:	2278      	movs	r2, #120	@ 0x78
 8006220:	701a      	strb	r2, [r3, #0]
    
    for (loop = 0; loop < 2; loop++)
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]
 8006226:	e031      	b.n	800628c <optiga_lib_word_to_hex_string+0xb6>
    {
        hex_byte = array_buffer[loop];
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	3318      	adds	r3, #24
 800622c:	443b      	add	r3, r7
 800622e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006232:	757b      	strb	r3, [r7, #21]

        /*Convert Byte to HexString */
        OPTIGA_LOGGER_CONVERT_BYTE_TO_HEX(hex_byte,p_buffer, index);
 8006234:	7d7b      	ldrb	r3, [r7, #21]
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	753b      	strb	r3, [r7, #20]
 800623a:	7d3b      	ldrb	r3, [r7, #20]
 800623c:	2b09      	cmp	r3, #9
 800623e:	d903      	bls.n	8006248 <optiga_lib_word_to_hex_string+0x72>
 8006240:	7d3b      	ldrb	r3, [r7, #20]
 8006242:	3337      	adds	r3, #55	@ 0x37
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e002      	b.n	800624e <optiga_lib_word_to_hex_string+0x78>
 8006248:	7d3b      	ldrb	r3, [r7, #20]
 800624a:	3330      	adds	r3, #48	@ 0x30
 800624c:	b2db      	uxtb	r3, r3
 800624e:	7dba      	ldrb	r2, [r7, #22]
 8006250:	1c51      	adds	r1, r2, #1
 8006252:	75b9      	strb	r1, [r7, #22]
 8006254:	4611      	mov	r1, r2
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	440a      	add	r2, r1
 800625a:	7013      	strb	r3, [r2, #0]
 800625c:	7d7b      	ldrb	r3, [r7, #21]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	753b      	strb	r3, [r7, #20]
 8006264:	7d3b      	ldrb	r3, [r7, #20]
 8006266:	2b09      	cmp	r3, #9
 8006268:	d903      	bls.n	8006272 <optiga_lib_word_to_hex_string+0x9c>
 800626a:	7d3b      	ldrb	r3, [r7, #20]
 800626c:	3337      	adds	r3, #55	@ 0x37
 800626e:	b2db      	uxtb	r3, r3
 8006270:	e002      	b.n	8006278 <optiga_lib_word_to_hex_string+0xa2>
 8006272:	7d3b      	ldrb	r3, [r7, #20]
 8006274:	3330      	adds	r3, #48	@ 0x30
 8006276:	b2db      	uxtb	r3, r3
 8006278:	7dba      	ldrb	r2, [r7, #22]
 800627a:	1c51      	adds	r1, r2, #1
 800627c:	75b9      	strb	r1, [r7, #22]
 800627e:	4611      	mov	r1, r2
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	440a      	add	r2, r1
 8006284:	7013      	strb	r3, [r2, #0]
    for (loop = 0; loop < 2; loop++)
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	3301      	adds	r3, #1
 800628a:	75fb      	strb	r3, [r7, #23]
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d9ca      	bls.n	8006228 <optiga_lib_word_to_hex_string+0x52>
    }    

}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	371c      	adds	r7, #28
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <optiga_lib_print_length_of_data>:

/* Converts the uint16 value to hex string format */
_STATIC_H void optiga_lib_print_length_of_data(uint16_t value)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b092      	sub	sp, #72	@ 0x48
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	80fb      	strh	r3, [r7, #6]
    uint8_t uint16t_conv_buffer [10] = {0};
 80062aa:	2300      	movs	r3, #0
 80062ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	809a      	strh	r2, [r3, #4]
    char_t print_buffer[50];      

    sprintf((char_t *)print_buffer, "%37s", "Length of data - ");
 80062b8:	f107 0308 	add.w	r3, r7, #8
 80062bc:	4a0e      	ldr	r2, [pc, #56]	@ (80062f8 <optiga_lib_print_length_of_data+0x58>)
 80062be:	490f      	ldr	r1, [pc, #60]	@ (80062fc <optiga_lib_print_length_of_data+0x5c>)
 80062c0:	4618      	mov	r0, r3
 80062c2:	f008 fc51 	bl	800eb68 <siprintf>
    strcat(print_buffer,OPTIGA_HEX_BYTE_SEPERATOR);
    optiga_lib_word_to_hex_string(value,uint16t_conv_buffer);
 80062c6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ff81 	bl	80061d6 <optiga_lib_word_to_hex_string>
    strcat(print_buffer,(char_t *)uint16t_conv_buffer); 
 80062d4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80062d8:	f107 0308 	add.w	r3, r7, #8
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f008 fd94 	bl	800ee0c <strcat>
    
    optiga_lib_print_string_with_newline(print_buffer);
 80062e4:	f107 0308 	add.w	r3, r7, #8
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f809 	bl	8006300 <optiga_lib_print_string_with_newline>
}
 80062ee:	bf00      	nop
 80062f0:	3748      	adds	r7, #72	@ 0x48
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	08010bf4 	.word	0x08010bf4
 80062fc:	08010c08 	.word	0x08010c08

08006300 <optiga_lib_print_string_with_newline>:
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
}

void optiga_lib_print_string_with_newline(const char_t * p_log_string)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
    uint8_t new_line_characters [2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006308:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800630c:	81bb      	strh	r3, [r7, #12]

    if (NULL == p_log_string)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d010      	beq.n	8006336 <optiga_lib_print_string_with_newline+0x36>
    {
        return;
    }

    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)p_log_string, strlen(p_log_string));
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7f9 ff63 	bl	80001e0 <strlen>
 800631a:	4603      	mov	r3, r0
 800631c:	461a      	mov	r2, r3
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4807      	ldr	r0, [pc, #28]	@ (8006340 <optiga_lib_print_string_with_newline+0x40>)
 8006322:	f000 fc25 	bl	8006b70 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 8006326:	f107 030c 	add.w	r3, r7, #12
 800632a:	2202      	movs	r2, #2
 800632c:	4619      	mov	r1, r3
 800632e:	4804      	ldr	r0, [pc, #16]	@ (8006340 <optiga_lib_print_string_with_newline+0x40>)
 8006330:	f000 fc1e 	bl	8006b70 <pal_logger_write>
 8006334:	e000      	b.n	8006338 <optiga_lib_print_string_with_newline+0x38>
        return;
 8006336:	bf00      	nop

}
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000d54 	.word	0x20000d54

08006344 <optiga_lib_print_message>:

void optiga_lib_print_message(const char_t * p_log_string,
                              const char_t * p_log_layer,
                              const char_t * p_log_color)                                  
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b0ec      	sub	sp, #432	@ 0x1b0
 8006348:	af02      	add	r7, sp, #8
 800634a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800634e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006352:	6018      	str	r0, [r3, #0]
 8006354:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006358:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800635c:	6019      	str	r1, [r3, #0]
 800635e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006362:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8006366:	601a      	str	r2, [r3, #0]
    uint8_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006368:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800636c:	f8a7 31a4 	strh.w	r3, [r7, #420]	@ 0x1a4
    char_t color_buffer[400];

    if ((NULL == p_log_string) || (NULL == p_log_layer) || (NULL == p_log_color))
 8006370:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006374:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d038      	beq.n	80063f0 <optiga_lib_print_message+0xac>
 800637e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006382:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d031      	beq.n	80063f0 <optiga_lib_print_message+0xac>
 800638c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8006390:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d02a      	beq.n	80063f0 <optiga_lib_print_message+0xac>
    {
        return;
    }

    OPTIGA_LIB_LOGGER_PRINT_INFO(color_buffer, p_log_string, p_log_layer, p_log_color);
 800639a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800639e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80063a2:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 80063a6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80063aa:	f107 0014 	add.w	r0, r7, #20
 80063ae:	4913      	ldr	r1, [pc, #76]	@ (80063fc <optiga_lib_print_message+0xb8>)
 80063b0:	9101      	str	r1, [sp, #4]
 80063b2:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 80063b6:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80063ba:	6809      	ldr	r1, [r1, #0]
 80063bc:	9100      	str	r1, [sp, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	490f      	ldr	r1, [pc, #60]	@ (8006400 <optiga_lib_print_message+0xbc>)
 80063c4:	f008 fbd0 	bl	800eb68 <siprintf>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, (const uint8_t *)color_buffer, strlen(color_buffer));
 80063c8:	f107 0314 	add.w	r3, r7, #20
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7f9 ff07 	bl	80001e0 <strlen>
 80063d2:	4602      	mov	r2, r0
 80063d4:	f107 0314 	add.w	r3, r7, #20
 80063d8:	4619      	mov	r1, r3
 80063da:	480a      	ldr	r0, [pc, #40]	@ (8006404 <optiga_lib_print_message+0xc0>)
 80063dc:	f000 fbc8 	bl	8006b70 <pal_logger_write>
    //lint --e{534} The return value is not used hence not checked*/
    pal_logger_write(&logger_console, new_line_characters, 2);
 80063e0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80063e4:	2202      	movs	r2, #2
 80063e6:	4619      	mov	r1, r3
 80063e8:	4806      	ldr	r0, [pc, #24]	@ (8006404 <optiga_lib_print_message+0xc0>)
 80063ea:	f000 fbc1 	bl	8006b70 <pal_logger_write>
 80063ee:	e000      	b.n	80063f2 <optiga_lib_print_message+0xae>
        return;
 80063f0:	bf00      	nop
}
 80063f2:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	08010c1c 	.word	0x08010c1c
 8006400:	08010c10 	.word	0x08010c10
 8006404:	20000d54 	.word	0x20000d54

08006408 <optiga_lib_print_array_hex_format>:
}

void optiga_lib_print_array_hex_format(const uint8_t * p_log_string,
                                       uint16_t length,
                                       const char_t * p_log_color)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 800640e:	af02      	add	r7, sp, #8
 8006410:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006414:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 8006418:	6018      	str	r0, [r3, #0]
 800641a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800641e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006428:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 800642c:	460a      	mov	r2, r1
 800642e:	801a      	strh	r2, [r3, #0]
    uint8_t temp_buffer[350];
    char_t output_buffer[400];
    uint16_t index;
    uint16_t temp_length;
    char_t new_line_characters[2] = {OPTIGA_LOGGER_NEW_LINE_CHAR};
 8006430:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006434:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 8006438:	f640 220d 	movw	r2, #2573	@ 0xa0d
 800643c:	801a      	strh	r2, [r3, #0]
    uint8_t buffer_window = 32; // Alignment of 16 bytes per line
 800643e:	2320      	movs	r3, #32
 8006440:	f887 3303 	strb.w	r3, [r7, #771]	@ 0x303

    if ((NULL == p_log_string) || (NULL == p_log_color))
 8006444:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006448:	f5a3 733f 	sub.w	r3, r3, #764	@ 0x2fc
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 809c 	beq.w	800658c <optiga_lib_print_array_hex_format+0x184>
 8006454:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006458:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8094 	beq.w	800658c <optiga_lib_print_array_hex_format+0x184>
    {
        return;
    }
    
    optiga_lib_print_length_of_data(length);
 8006464:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006468:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff ff16 	bl	80062a0 <optiga_lib_print_length_of_data>
    
    //Logging the arrays in chunks of 16 bytes through chaining
    for (index = 0; index < length; index+=buffer_window)
 8006474:	2300      	movs	r3, #0
 8006476:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
 800647a:	e07c      	b.n	8006576 <optiga_lib_print_array_hex_format+0x16e>
    {
        temp_length = buffer_window;
 800647c:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006480:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
        if ((length - index) < buffer_window)
 8006484:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006488:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 800648c:	881a      	ldrh	r2, [r3, #0]
 800648e:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 8006498:	429a      	cmp	r2, r3
 800649a:	da09      	bge.n	80064b0 <optiga_lib_print_array_hex_format+0xa8>
        {
            temp_length =  length - index;
 800649c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 80064a0:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
        }

        pal_os_memset(temp_buffer, 0x00, sizeof(temp_buffer));
 80064b0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80064b4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fd5a 	bl	8006f74 <pal_os_memset>
        pal_os_memset(output_buffer, 0x00, sizeof(output_buffer));
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fd52 	bl	8006f74 <pal_os_memset>

        optiga_lib_byte_to_hex_string((uint8_t*)(p_log_string + index), temp_buffer, temp_length, FALSE);
 80064d0:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 80064d4:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80064d8:	f5a2 723f 	sub.w	r2, r2, #764	@ 0x2fc
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	18d0      	adds	r0, r2, r3
 80064e0:	f8b7 2304 	ldrh.w	r2, [r7, #772]	@ 0x304
 80064e4:	f507 71d2 	add.w	r1, r7, #420	@ 0x1a4
 80064e8:	2300      	movs	r3, #0
 80064ea:	f7ff fdfe 	bl	80060ea <optiga_lib_byte_to_hex_string>

        OPTIGA_LIB_LOGGER_PRINT_ARRAY(output_buffer,temp_buffer, p_log_color);
 80064ee:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80064f2:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 80064f6:	f5a2 7241 	sub.w	r2, r2, #772	@ 0x304
 80064fa:	f107 0014 	add.w	r0, r7, #20
 80064fe:	4926      	ldr	r1, [pc, #152]	@ (8006598 <optiga_lib_print_array_hex_format+0x190>)
 8006500:	9100      	str	r1, [sp, #0]
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	4925      	ldr	r1, [pc, #148]	@ (800659c <optiga_lib_print_array_hex_format+0x194>)
 8006506:	f008 fb2f 	bl	800eb68 <siprintf>

        // New line characted entered at the end of each segment
        output_buffer[strlen(output_buffer)] = new_line_characters[0];
 800650a:	f107 0314 	add.w	r3, r7, #20
 800650e:	4618      	mov	r0, r3
 8006510:	f7f9 fe66 	bl	80001e0 <strlen>
 8006514:	4602      	mov	r2, r0
 8006516:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800651a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800651e:	7819      	ldrb	r1, [r3, #0]
 8006520:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8006524:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8006528:	5499      	strb	r1, [r3, r2]
        output_buffer[strlen(output_buffer)+1] = new_line_characters[1];
 800652a:	f107 0314 	add.w	r3, r7, #20
 800652e:	4618      	mov	r0, r3
 8006530:	f7f9 fe56 	bl	80001e0 <strlen>
 8006534:	4603      	mov	r3, r0
 8006536:	3301      	adds	r3, #1
 8006538:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 800653c:	f5a2 723e 	sub.w	r2, r2, #760	@ 0x2f8
 8006540:	7851      	ldrb	r1, [r2, #1]
 8006542:	f507 7242 	add.w	r2, r7, #776	@ 0x308
 8006546:	f5a2 723d 	sub.w	r2, r2, #756	@ 0x2f4
 800654a:	54d1      	strb	r1, [r2, r3]
        //lint --e{534} The return value is not used hence not checked*/
        pal_logger_write(&logger_console, (const uint8_t *)output_buffer, strlen(output_buffer) + 2);
 800654c:	f107 0314 	add.w	r3, r7, #20
 8006550:	4618      	mov	r0, r3
 8006552:	f7f9 fe45 	bl	80001e0 <strlen>
 8006556:	4603      	mov	r3, r0
 8006558:	1c9a      	adds	r2, r3, #2
 800655a:	f107 0314 	add.w	r3, r7, #20
 800655e:	4619      	mov	r1, r3
 8006560:	480f      	ldr	r0, [pc, #60]	@ (80065a0 <optiga_lib_print_array_hex_format+0x198>)
 8006562:	f000 fb05 	bl	8006b70 <pal_logger_write>
    for (index = 0; index < length; index+=buffer_window)
 8006566:	f897 3303 	ldrb.w	r3, [r7, #771]	@ 0x303
 800656a:	b29a      	uxth	r2, r3
 800656c:	f8b7 3306 	ldrh.w	r3, [r7, #774]	@ 0x306
 8006570:	4413      	add	r3, r2
 8006572:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
 8006576:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 800657a:	f2a3 23fe 	subw	r3, r3, #766	@ 0x2fe
 800657e:	f8b7 2306 	ldrh.w	r2, [r7, #774]	@ 0x306
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	f4ff af79 	bcc.w	800647c <optiga_lib_print_array_hex_format+0x74>
 800658a:	e000      	b.n	800658e <optiga_lib_print_array_hex_format+0x186>
        return;
 800658c:	bf00      	nop
    }
}
 800658e:	f507 7742 	add.w	r7, r7, #776	@ 0x308
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	08010c1c 	.word	0x08010c1c
 800659c:	08010c48 	.word	0x08010c48
 80065a0:	20000d54 	.word	0x20000d54

080065a4 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6992      	ldr	r2, [r2, #24]
 80065c2:	8879      	ldrh	r1, [r7, #2]
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
}
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
    if (NULL != me)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <optiga_util_reset_protection_level+0x18>
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
 80065de:	2200      	movs	r2, #0
 80065e0:	2101      	movs	r1, #1
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f804 	bl	80065f0 <optiga_util_set_comms_params>
    }
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <optiga_util_set_comms_params>:

#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
void optiga_util_set_comms_params(optiga_util_t * me,
                                  uint8_t parameter_type,
                                  uint8_t value)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
 80065fc:	4613      	mov	r3, r2
 80065fe:	70bb      	strb	r3, [r7, #2]
    switch (parameter_type)
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d002      	beq.n	800660c <optiga_util_set_comms_params+0x1c>
 8006606:	2b02      	cmp	r3, #2
 8006608:	d005      	beq.n	8006616 <optiga_util_set_comms_params+0x26>
            me->protocol_version = value;
            break;
        }
        default:
        {
            break;
 800660a:	e009      	b.n	8006620 <optiga_util_set_comms_params+0x30>
            me->protection_level = value;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	78ba      	ldrb	r2, [r7, #2]
 8006610:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            break;
 8006614:	e004      	b.n	8006620 <optiga_util_set_comms_params+0x30>
            me->protocol_version = value;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	78ba      	ldrb	r2, [r7, #2]
 800661a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
            break;
 800661e:	bf00      	nop
        }
    }
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d02b      	beq.n	800669c <optiga_util_create+0x70>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 8006644:	2124      	movs	r1, #36	@ 0x24
 8006646:	2001      	movs	r0, #1
 8006648:	f000 fc6c 	bl	8006f24 <pal_os_calloc>
 800664c:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d025      	beq.n	80066a0 <optiga_util_create+0x74>
        {
            break;
        }

        me->handler = handler;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	490c      	ldr	r1, [pc, #48]	@ (80066ac <optiga_util_create+0x80>)
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fd43 	bl	8005108 <optiga_cmd_create>
 8006682:	4602      	mov	r2, r0
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d108      	bne.n	80066a2 <optiga_util_create+0x76>
        {
            pal_os_free(me);
 8006690:	6978      	ldr	r0, [r7, #20]
 8006692:	f000 fc55 	bl	8006f40 <pal_os_free>
            me = NULL;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e002      	b.n	80066a2 <optiga_util_create+0x76>
            break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <optiga_util_create+0x76>
            break;
 80066a0:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 80066a2:	697b      	ldr	r3, [r7, #20]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	080065a5 	.word	0x080065a5

080066b0 <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 80066bc:	f240 3302 	movw	r3, #770	@ 0x302
 80066c0:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
 80066c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006770 <optiga_util_open_application+0xc0>)
 80066c4:	492b      	ldr	r1, [pc, #172]	@ (8006774 <optiga_util_open_application+0xc4>)
 80066c6:	482c      	ldr	r0, [pc, #176]	@ (8006778 <optiga_util_open_application+0xc8>)
 80066c8:	f7ff fe3c 	bl	8006344 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <optiga_util_open_application+0x2a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <optiga_util_open_application+0x32>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80066da:	f240 3303 	movw	r3, #771	@ 0x303
 80066de:	81fb      	strh	r3, [r7, #14]
            break;
 80066e0:	e03d      	b.n	800675e <optiga_util_open_application+0xae>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8c1b      	ldrh	r3, [r3, #32]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d103      	bne.n	80066f2 <optiga_util_open_application+0x42>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80066ea:	f240 3305 	movw	r3, #773	@ 0x305
 80066ee:	81fb      	strh	r3, [r7, #14]
            break;
 80066f0:	e035      	b.n	800675e <optiga_util_open_application+0xae>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	841a      	strh	r2, [r3, #32]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6958      	ldr	r0, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006702:	2200      	movs	r2, #0
 8006704:	4619      	mov	r1, r3
 8006706:	f7fd fcbb 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6958      	ldr	r0, [r3, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006714:	2201      	movs	r2, #1
 8006716:	4619      	mov	r1, r3
 8006718:	f7fd fcb2 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        if (FALSE == perform_restore)
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d107      	bne.n	8006732 <optiga_util_open_application+0x82>
        {
            OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_NONE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	2202      	movs	r2, #2
 8006728:	2133      	movs	r1, #51	@ 0x33
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd fca8 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
 8006730:	e006      	b.n	8006740 <optiga_util_open_application+0x90>
        }
        else
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2202      	movs	r2, #2
 8006738:	2111      	movs	r1, #17
 800673a:	4618      	mov	r0, r3
 800673c:	f7fd fca0 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	78f9      	ldrb	r1, [r7, #3]
 8006746:	2200      	movs	r2, #0
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe ff47 	bl	80055dc <optiga_cmd_open_application>
 800674e:	4603      	mov	r3, r0
 8006750:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006752:	89fb      	ldrh	r3, [r7, #14]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <optiga_util_open_application+0xae>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7ff ff36 	bl	80065d0 <optiga_util_reset_protection_level>

    return (return_value);
 8006764:	89fb      	ldrh	r3, [r7, #14]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	08010c54 	.word	0x08010c54
 8006774:	08010c5c 	.word	0x08010c5c
 8006778:	08010d00 	.word	0x08010d00

0800677c <optiga_util_read_data>:
optiga_lib_status_t optiga_util_read_data(optiga_util_t * me,
                                          uint16_t optiga_oid,
                                          uint16_t offset,
                                          uint8_t * buffer,
                                          uint16_t * length)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	817b      	strh	r3, [r7, #10]
 800678a:	4613      	mov	r3, r2
 800678c:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 800678e:	f240 3302 	movw	r3, #770	@ 0x302
 8006792:	82fb      	strh	r3, [r7, #22]
    optiga_get_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
 8006794:	4a35      	ldr	r2, [pc, #212]	@ (800686c <optiga_util_read_data+0xf0>)
 8006796:	4936      	ldr	r1, [pc, #216]	@ (8006870 <optiga_util_read_data+0xf4>)
 8006798:	4836      	ldr	r0, [pc, #216]	@ (8006874 <optiga_util_read_data+0xf8>)
 800679a:	f7ff fdd3 	bl	8006344 <optiga_lib_print_message>
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <optiga_util_read_data+0x3c>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <optiga_util_read_data+0x3c>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <optiga_util_read_data+0x3c>
            (NULL == buffer) || (NULL == length))
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d103      	bne.n	80067c0 <optiga_util_read_data+0x44>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80067b8:	f240 3303 	movw	r3, #771	@ 0x303
 80067bc:	82fb      	strh	r3, [r7, #22]
            break;
 80067be:	e04d      	b.n	800685c <optiga_util_read_data+0xe0>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8c1b      	ldrh	r3, [r3, #32]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d103      	bne.n	80067d0 <optiga_util_read_data+0x54>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80067c8:	f240 3305 	movw	r3, #773	@ 0x305
 80067cc:	82fb      	strh	r3, [r7, #22]
            break;
 80067ce:	e045      	b.n	800685c <optiga_util_read_data+0xe0>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_get_data_object_params_t *)&(me->params.optiga_get_data_object_params);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2214      	movs	r2, #20
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fbc7 	bl	8006f74 <pal_os_memset>

        p_params->oid = optiga_oid;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	897a      	ldrh	r2, [r7, #10]
 80067ea:	811a      	strh	r2, [r3, #8]
        p_params->offset = offset;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	893a      	ldrh	r2, [r7, #8]
 80067f0:	815a      	strh	r2, [r3, #10]
        // set option to read data
        p_params->data_or_metadata = 0;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2200      	movs	r2, #0
 80067f6:	749a      	strb	r2, [r3, #18]
        p_params->buffer = buffer;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	605a      	str	r2, [r3, #4]
        p_params->bytes_to_read = *length;
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	881a      	ldrh	r2, [r3, #0]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	819a      	strh	r2, [r3, #12]
        p_params->ref_bytes_to_read = length;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6a3a      	ldr	r2, [r7, #32]
 800680a:	601a      	str	r2, [r3, #0]
        p_params->accumulated_size = 0;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2200      	movs	r2, #0
 8006810:	81da      	strh	r2, [r3, #14]
        p_params->last_read_size = 0;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2200      	movs	r2, #0
 8006816:	821a      	strh	r2, [r3, #16]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6958      	ldr	r0, [r3, #20]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006822:	2200      	movs	r2, #0
 8006824:	4619      	mov	r1, r3
 8006826:	f7fd fc2b 	bl	8004080 <optiga_cmd_set_shielded_connection_option>
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6958      	ldr	r0, [r3, #20]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006834:	2201      	movs	r2, #1
 8006836:	4619      	mov	r1, r3
 8006838:	f7fd fc22 	bl	8004080 <optiga_cmd_set_shielded_connection_option>

        return_value = optiga_cmd_get_data_object(me->my_cmd, p_params->data_or_metadata, p_params);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6958      	ldr	r0, [r3, #20]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	7c9b      	ldrb	r3, [r3, #18]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4619      	mov	r1, r3
 8006848:	f7ff f81a 	bl	8005880 <optiga_cmd_get_data_object>
 800684c:	4603      	mov	r3, r0
 800684e:	82fb      	strh	r3, [r7, #22]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006850:	8afb      	ldrh	r3, [r7, #22]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <optiga_util_read_data+0xe0>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff feb7 	bl	80065d0 <optiga_util_reset_protection_level>

    return (return_value);
 8006862:	8afb      	ldrh	r3, [r7, #22]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	08010c54 	.word	0x08010c54
 8006870:	08010c5c 	.word	0x08010c5c
 8006874:	08010d20 	.word	0x08010d20

08006878 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <pal_deinit>:


pal_status_t pal_deinit(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <pal_crypt_tls_prf_sha256>:

void pal_crypt_tls_prf_sha256(const uint8_t* secret, uint16_t secret_length,
                               const uint8_t* label, uint16_t label_length,
                               const uint8_t* seed, uint16_t seed_length,
                               uint8_t* derived_key, uint16_t* derived_key_length)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	607a      	str	r2, [r7, #4]
 80068a2:	461a      	mov	r2, r3
 80068a4:	460b      	mov	r3, r1
 80068a6:	817b      	strh	r3, [r7, #10]
 80068a8:	4613      	mov	r3, r2
 80068aa:	813b      	strh	r3, [r7, #8]
    if (derived_key && derived_key_length)
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d012      	beq.n	80068d8 <pal_crypt_tls_prf_sha256+0x40>
 80068b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00f      	beq.n	80068d8 <pal_crypt_tls_prf_sha256+0x40>
    {
        for (uint16_t i = 0; i < *derived_key_length; i++)
 80068b8:	2300      	movs	r3, #0
 80068ba:	82fb      	strh	r3, [r7, #22]
 80068bc:	e007      	b.n	80068ce <pal_crypt_tls_prf_sha256+0x36>
        {
            derived_key[i] = 0x00;  // Dummy output
 80068be:	8afb      	ldrh	r3, [r7, #22]
 80068c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c2:	4413      	add	r3, r2
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
        for (uint16_t i = 0; i < *derived_key_length; i++)
 80068c8:	8afb      	ldrh	r3, [r7, #22]
 80068ca:	3301      	adds	r3, #1
 80068cc:	82fb      	strh	r3, [r7, #22]
 80068ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	8afa      	ldrh	r2, [r7, #22]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3f2      	bcc.n	80068be <pal_crypt_tls_prf_sha256+0x26>
        }
    }
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <pal_crypt_encrypt_aes128_ccm>:

int pal_crypt_encrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  uint8_t* output, uint8_t* tag, uint16_t tag_length)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 80068f4:	2300      	movs	r3, #0
 80068f6:	82fb      	strh	r3, [r7, #22]
 80068f8:	e00a      	b.n	8006910 <pal_crypt_encrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real encryption
 80068fa:	8afb      	ldrh	r3, [r7, #22]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	441a      	add	r2, r3
 8006900:	8afb      	ldrh	r3, [r7, #22]
 8006902:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006904:	440b      	add	r3, r1
 8006906:	7812      	ldrb	r2, [r2, #0]
 8006908:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 800690a:	8afb      	ldrh	r3, [r7, #22]
 800690c:	3301      	adds	r3, #1
 800690e:	82fb      	strh	r3, [r7, #22]
 8006910:	8afa      	ldrh	r2, [r7, #22]
 8006912:	8c3b      	ldrh	r3, [r7, #32]
 8006914:	429a      	cmp	r2, r3
 8006916:	d3f0      	bcc.n	80068fa <pal_crypt_encrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <pal_crypt_decrypt_aes128_ccm>:
int pal_crypt_decrypt_aes128_ccm(const uint8_t* key, const uint8_t* nonce, uint16_t nonce_length,
                                  const uint8_t* input, uint16_t input_length,
                                  const uint8_t* aad, uint16_t aad_length,
                                  const uint8_t* tag, uint16_t tag_length,
                                  uint8_t* output)
{
 8006926:	b480      	push	{r7}
 8006928:	b087      	sub	sp, #28
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < input_length; i++)
 8006936:	2300      	movs	r3, #0
 8006938:	82fb      	strh	r3, [r7, #22]
 800693a:	e00a      	b.n	8006952 <pal_crypt_decrypt_aes128_ccm+0x2c>
    {
        output[i] = input[i];  // No real decryption
 800693c:	8afb      	ldrh	r3, [r7, #22]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	441a      	add	r2, r3
 8006942:	8afb      	ldrh	r3, [r7, #22]
 8006944:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006946:	440b      	add	r3, r1
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < input_length; i++)
 800694c:	8afb      	ldrh	r3, [r7, #22]
 800694e:	3301      	adds	r3, #1
 8006950:	82fb      	strh	r3, [r7, #22]
 8006952:	8afa      	ldrh	r2, [r7, #22]
 8006954:	8c3b      	ldrh	r3, [r7, #32]
 8006956:	429a      	cmp	r2, r3
 8006958:	d3f0      	bcc.n	800693c <pal_crypt_decrypt_aes128_ccm+0x16>
    }
    return 0;  // Success
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <pal_gpio_set_high>:
#include "stm32f4xx_hal.h" // <-- change based on your STM32 series



void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006978:	2201      	movs	r2, #1
 800697a:	4619      	mov	r1, r3
 800697c:	f003 f8d8 	bl	8009b30 <HAL_GPIO_WritePin>
                      GPIO_PIN_SET);
}
 8006980:	bf00      	nop
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6818      	ldr	r0, [r3, #0]
                      p_gpio_context->pin,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin((GPIO_TypeDef *)p_gpio_context->p_gpio_hw,
 8006998:	2200      	movs	r2, #0
 800699a:	4619      	mov	r1, r3
 800699c:	f003 f8c8 	bl	8009b30 <HAL_GPIO_WritePin>
                      GPIO_PIN_RESET);
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    if (0 == g_entry_count)
 80069b0:	4b08      	ldr	r3, [pc, #32]	@ (80069d4 <pal_i2c_acquire+0x2c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d106      	bne.n	80069c6 <pal_i2c_acquire+0x1e>
    {
        g_entry_count++;
 80069b8:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <pal_i2c_acquire+0x2c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3301      	adds	r3, #1
 80069be:	4a05      	ldr	r2, [pc, #20]	@ (80069d4 <pal_i2c_acquire+0x2c>)
 80069c0:	6013      	str	r3, [r2, #0]
        return PAL_STATUS_SUCCESS;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <pal_i2c_acquire+0x20>
    }
    return PAL_STATUS_FAILURE;
 80069c6:	2301      	movs	r3, #1
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	20000d5c 	.word	0x20000d5c

080069d8 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    g_entry_count = 0;
 80069e0:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <pal_i2c_release+0x1c>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000d5c 	.word	0x20000d5c

080069f8 <invoke_upper_layer_callback>:

static void invoke_upper_layer_callback(const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 80069f8:	b590      	push	{r4, r7, lr}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	807b      	strh	r3, [r7, #2]
    if (p_pal_i2c_ctx->upper_layer_event_handler != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <invoke_upper_layer_callback+0x26>
    {
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	461c      	mov	r4, r3
            p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_pal_i2c_ctx->upper_layer_event_handler))(
 8006a16:	887a      	ldrh	r2, [r7, #2]
 8006a18:	4611      	mov	r1, r2
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	47a0      	blx	r4
    }
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff ffd8 	bl	80069d8 <pal_i2c_release>
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd90      	pop	{r4, r7, pc}

08006a30 <pal_i2c_init>:

pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
    // Typically handled by MX or HAL init elsewhere
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff ff9a 	bl	80069a8 <pal_i2c_acquire>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d120      	bne.n	8006abc <pal_i2c_write+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006a7a:	4a16      	ldr	r2, [pc, #88]	@ (8006ad4 <pal_i2c_write+0x78>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Transmit(
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	b299      	uxth	r1, r3
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a92:	9200      	str	r2, [sp, #0]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	f003 f9fd 	bl	8009e94 <HAL_I2C_Master_Transmit>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006a9e:	7d7b      	ldrb	r3, [r7, #21]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d106      	bne.n	8006ab2 <pal_i2c_write+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f7ff ffa6 	bl	80069f8 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006aac:	2300      	movs	r3, #0
 8006aae:	82fb      	strh	r3, [r7, #22]
 8006ab0:	e00a      	b.n	8006ac8 <pal_i2c_write+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff ff9f 	bl	80069f8 <invoke_upper_layer_callback>
 8006aba:	e005      	b.n	8006ac8 <pal_i2c_write+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006abc:	2302      	movs	r3, #2
 8006abe:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff98 	bl	80069f8 <invoke_upper_layer_callback>
    }

    return status;
 8006ac8:	8afb      	ldrh	r3, [r7, #22]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000d60 	.word	0x20000d60

08006ad8 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	82fb      	strh	r3, [r7, #22]

    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff ff5c 	bl	80069a8 <pal_i2c_acquire>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d120      	bne.n	8006b38 <pal_i2c_read+0x60>
    {
    	gp_pal_i2c_current_ctx = (pal_i2c_t *)p_i2c_context;
 8006af6:	4a16      	ldr	r2, [pc, #88]	@ (8006b50 <pal_i2c_read+0x78>)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6013      	str	r3, [r2, #0]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
            (I2C_HandleTypeDef *)(p_i2c_context->p_i2c_hw_config),
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6818      	ldr	r0, [r3, #0]
            (uint16_t)(p_i2c_context->slave_address << 1),
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
        HAL_StatusTypeDef hal_status = HAL_I2C_Master_Receive(
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	b299      	uxth	r1, r3
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b0e:	9200      	str	r2, [sp, #0]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	f003 fabd 	bl	800a090 <HAL_I2C_Master_Receive>
 8006b16:	4603      	mov	r3, r0
 8006b18:	757b      	strb	r3, [r7, #21]
            p_data,
            length,
            HAL_MAX_DELAY);

        if (hal_status == HAL_OK)
 8006b1a:	7d7b      	ldrb	r3, [r7, #21]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <pal_i2c_read+0x56>
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_SUCCESS);
 8006b20:	2100      	movs	r1, #0
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff ff68 	bl	80069f8 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	82fb      	strh	r3, [r7, #22]
 8006b2c:	e00a      	b.n	8006b44 <pal_i2c_read+0x6c>
        }
        else
        {
            invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_ERROR);
 8006b2e:	2101      	movs	r1, #1
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff ff61 	bl	80069f8 <invoke_upper_layer_callback>
 8006b36:	e005      	b.n	8006b44 <pal_i2c_read+0x6c>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	82fb      	strh	r3, [r7, #22]
        invoke_upper_layer_callback(p_i2c_context, PAL_I2C_EVENT_BUSY);
 8006b3c:	2102      	movs	r1, #2
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff ff5a 	bl	80069f8 <invoke_upper_layer_callback>
    }

    return status;
 8006b44:	8afb      	ldrh	r3, [r7, #22]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000d60 	.word	0x20000d60

08006b54 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	807b      	strh	r3, [r7, #2]
    // Not applicable for STM32 HAL — config is done via CubeMX
    (void)p_i2c_context;
    (void)bitrate;
    return PAL_STATUS_SUCCESS;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
	...

08006b70 <pal_logger_write>:
    return return_status;
}


pal_status_t pal_logger_write(void * p_logger_context, const uint8_t * p_log_data, uint32_t log_data_length)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]

    int32_t return_status = PAL_STATUS_FAILURE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
    pal_logger_t * p_log_context = p_logger_context;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	613b      	str	r3, [r7, #16]

    do
    {

        HAL_UART_Transmit(&huart2, (uint8_t*)p_log_data, log_data_length, HAL_MAX_DELAY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	4804      	ldr	r0, [pc, #16]	@ (8006ba0 <pal_logger_write+0x30>)
 8006b90:	f006 ff50 	bl	800da34 <HAL_UART_Transmit>
        return PAL_STATUS_SUCCESS;
 8006b94:	2300      	movs	r3, #0
        // !!!OPTIGA_LIB_PORTING_REQUIRED
    } while(0);
    return ((pal_status_t)return_status);
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	2000067c 	.word	0x2000067c

08006ba4 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	6039      	str	r1, [r7, #0]
 8006bae:	80fb      	strh	r3, [r7, #6]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	2b33      	cmp	r3, #51	@ 0x33
 8006bc0:	d043      	beq.n	8006c4a <pal_os_datastore_write+0xa6>
 8006bc2:	2b33      	cmp	r3, #51	@ 0x33
 8006bc4:	dc5e      	bgt.n	8006c84 <pal_os_datastore_write+0xe0>
 8006bc6:	2b11      	cmp	r3, #17
 8006bc8:	d002      	beq.n	8006bd0 <pal_os_datastore_write+0x2c>
 8006bca:	2b22      	cmp	r3, #34	@ 0x22
 8006bcc:	d020      	beq.n	8006c10 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8006bce:	e059      	b.n	8006c84 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006bd0:	88bb      	ldrh	r3, [r7, #4]
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d858      	bhi.n	8006c88 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8006bd6:	88bb      	ldrh	r3, [r7, #4]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	b299      	uxth	r1, r3
 8006bdc:	7b7b      	ldrb	r3, [r7, #13]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	737a      	strb	r2, [r7, #13]
 8006be2:	461a      	mov	r2, r3
 8006be4:	b2c9      	uxtb	r1, r1
 8006be6:	4b2b      	ldr	r3, [pc, #172]	@ (8006c94 <pal_os_datastore_write+0xf0>)
 8006be8:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8006bea:	7b7b      	ldrb	r3, [r7, #13]
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	737a      	strb	r2, [r7, #13]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	88bb      	ldrh	r3, [r7, #4]
 8006bf4:	b2d9      	uxtb	r1, r3
 8006bf6:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <pal_os_datastore_write+0xf0>)
 8006bf8:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8006bfa:	7b7b      	ldrb	r3, [r7, #13]
 8006bfc:	4a25      	ldr	r2, [pc, #148]	@ (8006c94 <pal_os_datastore_write+0xf0>)
 8006bfe:	4413      	add	r3, r2
 8006c00:	88ba      	ldrh	r2, [r7, #4]
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f008 f966 	bl	800eed6 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	81fb      	strh	r3, [r7, #14]
            break;
 8006c0e:	e03b      	b.n	8006c88 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8006c10:	88bb      	ldrh	r3, [r7, #4]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	b299      	uxth	r1, r3
 8006c16:	7b7b      	ldrb	r3, [r7, #13]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	737a      	strb	r2, [r7, #13]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	b2c9      	uxtb	r1, r1
 8006c20:	4b1d      	ldr	r3, [pc, #116]	@ (8006c98 <pal_os_datastore_write+0xf4>)
 8006c22:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8006c24:	7b7b      	ldrb	r3, [r7, #13]
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	737a      	strb	r2, [r7, #13]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	88bb      	ldrh	r3, [r7, #4]
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	4b19      	ldr	r3, [pc, #100]	@ (8006c98 <pal_os_datastore_write+0xf4>)
 8006c32:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8006c34:	7b7b      	ldrb	r3, [r7, #13]
 8006c36:	4a18      	ldr	r2, [pc, #96]	@ (8006c98 <pal_os_datastore_write+0xf4>)
 8006c38:	4413      	add	r3, r2
 8006c3a:	88ba      	ldrh	r2, [r7, #4]
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f008 f949 	bl	800eed6 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8006c44:	2300      	movs	r3, #0
 8006c46:	81fb      	strh	r3, [r7, #14]
            break;
 8006c48:	e01f      	b.n	8006c8a <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8006c4a:	88bb      	ldrh	r3, [r7, #4]
 8006c4c:	0a1b      	lsrs	r3, r3, #8
 8006c4e:	b299      	uxth	r1, r3
 8006c50:	7b7b      	ldrb	r3, [r7, #13]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	737a      	strb	r2, [r7, #13]
 8006c56:	461a      	mov	r2, r3
 8006c58:	b2c9      	uxtb	r1, r1
 8006c5a:	4b10      	ldr	r3, [pc, #64]	@ (8006c9c <pal_os_datastore_write+0xf8>)
 8006c5c:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8006c5e:	7b7b      	ldrb	r3, [r7, #13]
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	737a      	strb	r2, [r7, #13]
 8006c64:	461a      	mov	r2, r3
 8006c66:	88bb      	ldrh	r3, [r7, #4]
 8006c68:	b2d9      	uxtb	r1, r3
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c9c <pal_os_datastore_write+0xf8>)
 8006c6c:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8006c6e:	7b7b      	ldrb	r3, [r7, #13]
 8006c70:	4a0a      	ldr	r2, [pc, #40]	@ (8006c9c <pal_os_datastore_write+0xf8>)
 8006c72:	4413      	add	r3, r2
 8006c74:	88ba      	ldrh	r2, [r7, #4]
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f008 f92c 	bl	800eed6 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	81fb      	strh	r3, [r7, #14]
            break;
 8006c82:	e002      	b.n	8006c8a <pal_os_datastore_write+0xe6>
            break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <pal_os_datastore_write+0xe6>
            break;
 8006c88:	bf00      	nop
        }
    }
    return return_status;
 8006c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2000050c 	.word	0x2000050c
 8006c98:	20000d64 	.word	0x20000d64
 8006c9c:	20000da8 	.word	0x20000da8

08006ca0 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8006cb6:	89fb      	ldrh	r3, [r7, #14]
 8006cb8:	2b33      	cmp	r3, #51	@ 0x33
 8006cba:	d049      	beq.n	8006d50 <pal_os_datastore_read+0xb0>
 8006cbc:	2b33      	cmp	r3, #51	@ 0x33
 8006cbe:	dc67      	bgt.n	8006d90 <pal_os_datastore_read+0xf0>
 8006cc0:	2b11      	cmp	r3, #17
 8006cc2:	d002      	beq.n	8006cca <pal_os_datastore_read+0x2a>
 8006cc4:	2b22      	cmp	r3, #34	@ 0x22
 8006cc6:	d023      	beq.n	8006d10 <pal_os_datastore_read+0x70>
 8006cc8:	e062      	b.n	8006d90 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8006cca:	7d7b      	ldrb	r3, [r7, #21]
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	757a      	strb	r2, [r7, #21]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4b34      	ldr	r3, [pc, #208]	@ (8006da4 <pal_os_datastore_read+0x104>)
 8006cd4:	5c9b      	ldrb	r3, [r3, r2]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8006cda:	7d7b      	ldrb	r3, [r7, #21]
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	757a      	strb	r2, [r7, #21]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4b30      	ldr	r3, [pc, #192]	@ (8006da4 <pal_os_datastore_read+0x104>)
 8006ce4:	5c9b      	ldrb	r3, [r3, r2]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	8a7b      	ldrh	r3, [r7, #18]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8006cee:	8a7b      	ldrh	r3, [r7, #18]
 8006cf0:	2b40      	cmp	r3, #64	@ 0x40
 8006cf2:	d851      	bhi.n	8006d98 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8006cf4:	7d7b      	ldrb	r3, [r7, #21]
 8006cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8006da4 <pal_os_datastore_read+0x104>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	8a7a      	ldrh	r2, [r7, #18]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68b8      	ldr	r0, [r7, #8]
 8006d00:	f008 f8e9 	bl	800eed6 <memcpy>
                *p_buffer_length = data_length;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8a7a      	ldrh	r2, [r7, #18]
 8006d08:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8006d0e:	e043      	b.n	8006d98 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8006d10:	7d7b      	ldrb	r3, [r7, #21]
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	757a      	strb	r2, [r7, #21]
 8006d16:	461a      	mov	r2, r3
 8006d18:	4b23      	ldr	r3, [pc, #140]	@ (8006da8 <pal_os_datastore_read+0x108>)
 8006d1a:	5c9b      	ldrb	r3, [r3, r2]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8006d20:	7d7b      	ldrb	r3, [r7, #21]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	757a      	strb	r2, [r7, #21]
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <pal_os_datastore_read+0x108>)
 8006d2a:	5c9b      	ldrb	r3, [r3, r2]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	8a7b      	ldrh	r3, [r7, #18]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8006d34:	7d7b      	ldrb	r3, [r7, #21]
 8006d36:	4a1c      	ldr	r2, [pc, #112]	@ (8006da8 <pal_os_datastore_read+0x108>)
 8006d38:	4413      	add	r3, r2
 8006d3a:	8a7a      	ldrh	r2, [r7, #18]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f008 f8c9 	bl	800eed6 <memcpy>
            *p_buffer_length = data_length;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8a7a      	ldrh	r2, [r7, #18]
 8006d48:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	82fb      	strh	r3, [r7, #22]
            break;
 8006d4e:	e024      	b.n	8006d9a <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8006d50:	7d7b      	ldrb	r3, [r7, #21]
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	757a      	strb	r2, [r7, #21]
 8006d56:	461a      	mov	r2, r3
 8006d58:	4b14      	ldr	r3, [pc, #80]	@ (8006dac <pal_os_datastore_read+0x10c>)
 8006d5a:	5c9b      	ldrb	r3, [r3, r2]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8006d60:	7d7b      	ldrb	r3, [r7, #21]
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	757a      	strb	r2, [r7, #21]
 8006d66:	461a      	mov	r2, r3
 8006d68:	4b10      	ldr	r3, [pc, #64]	@ (8006dac <pal_os_datastore_read+0x10c>)
 8006d6a:	5c9b      	ldrb	r3, [r3, r2]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	8a7b      	ldrh	r3, [r7, #18]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8006d74:	7d7b      	ldrb	r3, [r7, #21]
 8006d76:	4a0d      	ldr	r2, [pc, #52]	@ (8006dac <pal_os_datastore_read+0x10c>)
 8006d78:	4413      	add	r3, r2
 8006d7a:	8a7a      	ldrh	r2, [r7, #18]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	68b8      	ldr	r0, [r7, #8]
 8006d80:	f008 f8a9 	bl	800eed6 <memcpy>
            *p_buffer_length = data_length;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8a7a      	ldrh	r2, [r7, #18]
 8006d88:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	82fb      	strh	r3, [r7, #22]
            break;
 8006d8e:	e004      	b.n	8006d9a <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	801a      	strh	r2, [r3, #0]
            break;
 8006d96:	e000      	b.n	8006d9a <pal_os_datastore_read+0xfa>
            break;
 8006d98:	bf00      	nop
        }
    }

    return return_status;
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	2000050c 	.word	0x2000050c
 8006da8:	20000d64 	.word	0x20000d64
 8006dac:	20000da8 	.word	0x20000da8

08006db0 <pal_os_event_start>:
static pal_os_event_t pal_os_event_0 = {0};
static uint32_t timer_expiry = 0;
static uint8_t timer_running = 0;

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7a1b      	ldrb	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8006dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f82a 	bl	8006e2c <pal_os_event_register_callback_oneshot>
    }
}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	721a      	strb	r2, [r3, #8]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <pal_os_event_create+0x20>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d004      	beq.n	8006e1c <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4804      	ldr	r0, [pc, #16]	@ (8006e28 <pal_os_event_create+0x2c>)
 8006e18:	f7ff ffca 	bl	8006db0 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8006e1c:	4b02      	ldr	r3, [pc, #8]	@ (8006e28 <pal_os_event_create+0x2c>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20000db4 	.word	0x20000db4

08006e2c <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                            register_callback callback,
                                            void* callback_args,
                                            uint32_t time_us)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
    // Convert microseconds to milliseconds
    uint32_t time_ms = time_us / 1000;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e74 <pal_os_event_register_callback_oneshot+0x48>)
 8006e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e42:	099b      	lsrs	r3, r3, #6
 8006e44:	617b      	str	r3, [r7, #20]

    p_pal_os_event->callback_registered = callback;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]

    timer_expiry = HAL_GetTick() + time_ms;
 8006e52:	f002 fb07 	bl	8009464 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	4a06      	ldr	r2, [pc, #24]	@ (8006e78 <pal_os_event_register_callback_oneshot+0x4c>)
 8006e5e:	6013      	str	r3, [r2, #0]
    timer_running = 1;
 8006e60:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <pal_os_event_register_callback_oneshot+0x50>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	701a      	strb	r2, [r3, #0]

    // Start TIM2 interrupt if not already started
    HAL_TIM_Base_Start_IT(&htim2);
 8006e66:	4806      	ldr	r0, [pc, #24]	@ (8006e80 <pal_os_event_register_callback_oneshot+0x54>)
 8006e68:	f006 f9b0 	bl	800d1cc <HAL_TIM_Base_Start_IT>
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	10624dd3 	.word	0x10624dd3
 8006e78:	20000dcc 	.word	0x20000dcc
 8006e7c:	20000dd0 	.word	0x20000dd0
 8006e80:	20000634 	.word	0x20000634

08006e84 <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
    if (pal_os_event_0.callback_registered)
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <pal_os_event_trigger_registered_callback+0x3c>)
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d011      	beq.n	8006eb6 <pal_os_event_trigger_registered_callback+0x32>
    {
        register_callback cb = pal_os_event_0.callback_registered;
 8006e92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec0 <pal_os_event_trigger_registered_callback+0x3c>)
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	607b      	str	r3, [r7, #4]
        void* ctx = pal_os_event_0.callback_ctx;
 8006e98:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <pal_os_event_trigger_registered_callback+0x3c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	603b      	str	r3, [r7, #0]

        // Clear timer and reset state
        pal_os_event_0.callback_registered = NULL;
 8006e9e:	4b08      	ldr	r3, [pc, #32]	@ (8006ec0 <pal_os_event_trigger_registered_callback+0x3c>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	615a      	str	r2, [r3, #20]
        pal_os_event_0.callback_ctx = NULL;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <pal_os_event_trigger_registered_callback+0x3c>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
        timer_running = 0;
 8006eaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <pal_os_event_trigger_registered_callback+0x40>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]

        cb(ctx);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6838      	ldr	r0, [r7, #0]
 8006eb4:	4798      	blx	r3
    }
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000db4 	.word	0x20000db4
 8006ec4:	20000dd0 	.word	0x20000dd0

08006ec8 <pal_os_event_timer_tick>:

// This function should be called periodically from TIM2 ISR
void pal_os_event_timer_tick(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
    if (timer_running && (HAL_GetTick() >= timer_expiry))
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <pal_os_event_timer_tick+0x24>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <pal_os_event_timer_tick+0x1e>
 8006ed4:	f002 fac6 	bl	8009464 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <pal_os_event_timer_tick+0x28>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d301      	bcc.n	8006ee6 <pal_os_event_timer_tick+0x1e>
    {
        pal_os_event_trigger_registered_callback();
 8006ee2:	f7ff ffcf 	bl	8006e84 <pal_os_event_trigger_registered_callback>
    }
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000dd0 	.word	0x20000dd0
 8006ef0:	20000dcc 	.word	0x20000dcc

08006ef4 <pal_os_event_destroy>:

void pal_os_event_destroy(pal_os_event_t * pal_os_event)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
    (void)pal_os_event;
    // User should take care to destroy the event if it's not required
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8006f0c:	bf00      	nop
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 8006f16:	b480      	push	{r7}
 8006f18:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 8006f1a:	bf00      	nop
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <pal_os_calloc>:
{
    return malloc(block_size);
}

void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
    return calloc(number_of_blocks, block_size);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f007 fd47 	bl	800e9c4 <calloc>
 8006f36:	4603      	mov	r3, r0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <pal_os_free>:

void pal_os_free(void * block)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
    free(block);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f007 fd57 	bl	800e9fc <free>
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <pal_os_memcpy>:

void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
    memcpy(p_destination, p_source, size);
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f007 ffb5 	bl	800eed6 <memcpy>
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <pal_os_memset>:

void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
    // Since memset takes int for value and sets byte-wise, cast to unsigned char
    memset(p_buffer, (unsigned char)value, size);
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f007 ff5e 	bl	800ee4a <memset>
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <pal_os_timer_get_time_in_milliseconds>:
#include "optiga/pal/pal_os_timer.h"
#include "stm32f4xx_hal.h"

// Uses HAL_GetTick() (1ms resolution based on SysTick)
uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // SysTick provides time since HAL_Init()
 8006f9a:	f002 fa63 	bl	8009464 <HAL_GetTick>
 8006f9e:	4603      	mov	r3, r0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <pal_os_timer_get_time_in_microseconds>:
{
    HAL_Delay(milliseconds);  // Blocking delay
}

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
    // HAL tick is in ms, convert to µs (multiply by 1000)
    return ((uint64_t)HAL_GetTick()) * 1000;
 8006fa8:	f002 fa5c 	bl	8009464 <HAL_GetTick>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8006fc6:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <mbedtls_platform_zeroize+0x20>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000550 	.word	0x20000550

08006fe0 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006fe8:	226c      	movs	r2, #108	@ 0x6c
 8006fea:	2100      	movs	r1, #0
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f007 ff2c 	bl	800ee4a <memset>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d004      	beq.n	8007012 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8007008:	216c      	movs	r1, #108	@ 0x6c
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff ffd6 	bl	8006fbc <mbedtls_platform_zeroize>
 8007010:	e000      	b.n	8007014 <mbedtls_sha256_free+0x1a>
        return;
 8007012:	bf00      	nop
}
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d118      	bne.n	800706a <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a1d      	ldr	r2, [pc, #116]	@ (80070b0 <mbedtls_sha256_starts_ret+0x94>)
 800703c:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a1c      	ldr	r2, [pc, #112]	@ (80070b4 <mbedtls_sha256_starts_ret+0x98>)
 8007042:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a1c      	ldr	r2, [pc, #112]	@ (80070b8 <mbedtls_sha256_starts_ret+0x9c>)
 8007048:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1b      	ldr	r2, [pc, #108]	@ (80070bc <mbedtls_sha256_starts_ret+0xa0>)
 800704e:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a1b      	ldr	r2, [pc, #108]	@ (80070c0 <mbedtls_sha256_starts_ret+0xa4>)
 8007054:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a1a      	ldr	r2, [pc, #104]	@ (80070c4 <mbedtls_sha256_starts_ret+0xa8>)
 800705a:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1a      	ldr	r2, [pc, #104]	@ (80070c8 <mbedtls_sha256_starts_ret+0xac>)
 8007060:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a19      	ldr	r2, [pc, #100]	@ (80070cc <mbedtls_sha256_starts_ret+0xb0>)
 8007066:	625a      	str	r2, [r3, #36]	@ 0x24
 8007068:	e017      	b.n	800709a <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a18      	ldr	r2, [pc, #96]	@ (80070d0 <mbedtls_sha256_starts_ret+0xb4>)
 800706e:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <mbedtls_sha256_starts_ret+0xb8>)
 8007074:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a17      	ldr	r2, [pc, #92]	@ (80070d8 <mbedtls_sha256_starts_ret+0xbc>)
 800707a:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a17      	ldr	r2, [pc, #92]	@ (80070dc <mbedtls_sha256_starts_ret+0xc0>)
 8007080:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <mbedtls_sha256_starts_ret+0xc4>)
 8007086:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a16      	ldr	r2, [pc, #88]	@ (80070e4 <mbedtls_sha256_starts_ret+0xc8>)
 800708c:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a15      	ldr	r2, [pc, #84]	@ (80070e8 <mbedtls_sha256_starts_ret+0xcc>)
 8007092:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a15      	ldr	r2, [pc, #84]	@ (80070ec <mbedtls_sha256_starts_ret+0xd0>)
 8007098:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	6a09e667 	.word	0x6a09e667
 80070b4:	bb67ae85 	.word	0xbb67ae85
 80070b8:	3c6ef372 	.word	0x3c6ef372
 80070bc:	a54ff53a 	.word	0xa54ff53a
 80070c0:	510e527f 	.word	0x510e527f
 80070c4:	9b05688c 	.word	0x9b05688c
 80070c8:	1f83d9ab 	.word	0x1f83d9ab
 80070cc:	5be0cd19 	.word	0x5be0cd19
 80070d0:	c1059ed8 	.word	0xc1059ed8
 80070d4:	367cd507 	.word	0x367cd507
 80070d8:	3070dd17 	.word	0x3070dd17
 80070dc:	f70e5939 	.word	0xf70e5939
 80070e0:	ffc00b31 	.word	0xffc00b31
 80070e4:	68581511 	.word	0x68581511
 80070e8:	64f98fa7 	.word	0x64f98fa7
 80070ec:	befa4fa4 	.word	0xbefa4fa4

080070f0 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80070f0:	b490      	push	{r4, r7}
 80070f2:	b0ce      	sub	sp, #312	@ 0x138
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070fa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80070fe:	6018      	str	r0, [r3, #0]
 8007100:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007104:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007108:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 800710a:	2300      	movs	r3, #0
 800710c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007110:	e016      	b.n	8007140 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8007112:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007116:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007120:	3202      	adds	r2, #2
 8007122:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007126:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800712a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800712e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8007132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8007136:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800713a:	3301      	adds	r3, #1
 800713c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007140:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007144:	2b07      	cmp	r3, #7
 8007146:	d9e4      	bls.n	8007112 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8007148:	2300      	movs	r3, #0
 800714a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800714e:	e03e      	b.n	80071ce <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8007150:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800715a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	4413      	add	r3, r2
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	061a      	lsls	r2, r3, #24
 8007166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	3301      	adds	r3, #1
 800716e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007172:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007176:	6809      	ldr	r1, [r1, #0]
 8007178:	440b      	add	r3, r1
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	431a      	orrs	r2, r3
 8007180:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	3302      	adds	r3, #2
 8007188:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800718c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8007190:	6809      	ldr	r1, [r1, #0]
 8007192:	440b      	add	r3, r1
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	4313      	orrs	r3, r2
 800719a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800719e:	0092      	lsls	r2, r2, #2
 80071a0:	3203      	adds	r2, #3
 80071a2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80071a6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80071aa:	6809      	ldr	r1, [r1, #0]
 80071ac:	440a      	add	r2, r1
 80071ae:	7812      	ldrb	r2, [r2, #0]
 80071b0:	ea43 0102 	orr.w	r1, r3, r2
 80071b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80071bc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80071c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 80071c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80071c8:	3301      	adds	r3, #1
 80071ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80071ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	d9bc      	bls.n	8007150 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80071dc:	f000 bcba 	b.w	8007b54 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80071e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80071f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007206:	4059      	eors	r1, r3
 8007208:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800720c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007216:	404b      	eors	r3, r1
 8007218:	441a      	add	r2, r3
 800721a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800721e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007222:	6999      	ldr	r1, [r3, #24]
 8007224:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007228:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800722c:	6918      	ldr	r0, [r3, #16]
 800722e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007232:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007236:	695c      	ldr	r4, [r3, #20]
 8007238:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800723c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	4063      	eors	r3, r4
 8007244:	4003      	ands	r3, r0
 8007246:	404b      	eors	r3, r1
 8007248:	441a      	add	r2, r3
 800724a:	49e0      	ldr	r1, [pc, #896]	@ (80075cc <mbedtls_internal_sha256_process+0x4dc>)
 800724c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007250:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007254:	441a      	add	r2, r3
 8007256:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800725a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800725e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007262:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007266:	4413      	add	r3, r2
 8007268:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800726c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007270:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800727a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800727e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007288:	405a      	eors	r2, r3
 800728a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800728e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007298:	405a      	eors	r2, r3
 800729a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800729e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	4019      	ands	r1, r3
 80072b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072b8:	6898      	ldr	r0, [r3, #8]
 80072ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072c2:	681c      	ldr	r4, [r3, #0]
 80072c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	4323      	orrs	r3, r4
 80072d0:	4003      	ands	r3, r0
 80072d2:	430b      	orrs	r3, r1
 80072d4:	4413      	add	r3, r2
 80072d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80072da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072e8:	441a      	add	r2, r3
 80072ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80072fc:	441a      	add	r2, r3
 80072fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007302:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007306:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8007308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800730c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007316:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800732e:	4059      	eors	r1, r3
 8007330:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800733e:	404b      	eors	r3, r1
 8007340:	441a      	add	r2, r3
 8007342:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007346:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800734a:	6959      	ldr	r1, [r3, #20]
 800734c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007354:	68d8      	ldr	r0, [r3, #12]
 8007356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800735a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800735e:	691c      	ldr	r4, [r3, #16]
 8007360:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007364:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	4063      	eors	r3, r4
 800736c:	4003      	ands	r3, r0
 800736e:	404b      	eors	r3, r1
 8007370:	441a      	add	r2, r3
 8007372:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007376:	3301      	adds	r3, #1
 8007378:	4994      	ldr	r1, [pc, #592]	@ (80075cc <mbedtls_internal_sha256_process+0x4dc>)
 800737a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800737e:	441a      	add	r2, r3
 8007380:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007384:	1c59      	adds	r1, r3, #1
 8007386:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800738a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800738e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007392:	4413      	add	r3, r2
 8007394:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007398:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800739c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80073a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80073b4:	405a      	eors	r2, r3
 80073b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80073c4:	405a      	eors	r2, r3
 80073c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ce:	69d9      	ldr	r1, [r3, #28]
 80073d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4019      	ands	r1, r3
 80073dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073e4:	6858      	ldr	r0, [r3, #4]
 80073e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073ee:	69dc      	ldr	r4, [r3, #28]
 80073f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80073f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4323      	orrs	r3, r4
 80073fc:	4003      	ands	r3, r0
 80073fe:	430b      	orrs	r3, r1
 8007400:	4413      	add	r3, r2
 8007402:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007406:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800740a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007414:	441a      	add	r2, r3
 8007416:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800741a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007424:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007428:	441a      	add	r2, r3
 800742a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800742e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007432:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8007434:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007438:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800743c:	695a      	ldr	r2, [r3, #20]
 800743e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007442:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800744c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007450:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800745a:	4059      	eors	r1, r3
 800745c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007460:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	ea4f 6373 	mov.w	r3, r3, ror #25
 800746a:	404b      	eors	r3, r1
 800746c:	441a      	add	r2, r3
 800746e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007472:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007476:	6919      	ldr	r1, [r3, #16]
 8007478:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800747c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007480:	6898      	ldr	r0, [r3, #8]
 8007482:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007486:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800748a:	68dc      	ldr	r4, [r3, #12]
 800748c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	4063      	eors	r3, r4
 8007498:	4003      	ands	r3, r0
 800749a:	404b      	eors	r3, r1
 800749c:	441a      	add	r2, r3
 800749e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074a2:	3302      	adds	r3, #2
 80074a4:	4949      	ldr	r1, [pc, #292]	@ (80075cc <mbedtls_internal_sha256_process+0x4dc>)
 80074a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074aa:	441a      	add	r2, r3
 80074ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80074b0:	1c99      	adds	r1, r3, #2
 80074b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80074ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074be:	4413      	add	r3, r2
 80074c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80074c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80074d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	ea4f 3373 	mov.w	r3, r3, ror #13
 80074e0:	405a      	eors	r2, r3
 80074e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80074f0:	405a      	eors	r2, r3
 80074f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80074fa:	6999      	ldr	r1, [r3, #24]
 80074fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	4019      	ands	r1, r3
 8007508:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800750c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800751a:	699c      	ldr	r4, [r3, #24]
 800751c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007520:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	4323      	orrs	r3, r4
 8007528:	4003      	ands	r3, r0
 800752a:	430b      	orrs	r3, r1
 800752c:	4413      	add	r3, r2
 800752e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007532:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007536:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007540:	441a      	add	r2, r3
 8007542:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007546:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800754a:	605a      	str	r2, [r3, #4]
 800754c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007554:	441a      	add	r2, r3
 8007556:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800755a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800755e:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8007560:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007564:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800756e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007578:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800757c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007586:	4059      	eors	r1, r3
 8007588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800758c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007596:	404b      	eors	r3, r1
 8007598:	441a      	add	r2, r3
 800759a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800759e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075a2:	68d9      	ldr	r1, [r3, #12]
 80075a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075ac:	6858      	ldr	r0, [r3, #4]
 80075ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075b6:	689c      	ldr	r4, [r3, #8]
 80075b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	4063      	eors	r3, r4
 80075c4:	4003      	ands	r3, r0
 80075c6:	404b      	eors	r3, r1
 80075c8:	441a      	add	r2, r3
 80075ca:	e001      	b.n	80075d0 <mbedtls_internal_sha256_process+0x4e0>
 80075cc:	08010d38 	.word	0x08010d38
 80075d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075d4:	3303      	adds	r3, #3
 80075d6:	49e0      	ldr	r1, [pc, #896]	@ (8007958 <mbedtls_internal_sha256_process+0x868>)
 80075d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80075dc:	441a      	add	r2, r3
 80075de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80075e2:	1cd9      	adds	r1, r3, #3
 80075e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80075ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075f0:	4413      	add	r3, r2
 80075f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80075f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007604:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007608:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007612:	405a      	eors	r2, r3
 8007614:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007618:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007622:	405a      	eors	r2, r3
 8007624:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007628:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800762c:	6959      	ldr	r1, [r3, #20]
 800762e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007632:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	4019      	ands	r1, r3
 800763a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800763e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007642:	69d8      	ldr	r0, [r3, #28]
 8007644:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007648:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800764c:	695c      	ldr	r4, [r3, #20]
 800764e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007652:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	4323      	orrs	r3, r4
 800765a:	4003      	ands	r3, r0
 800765c:	430b      	orrs	r3, r1
 800765e:	4413      	add	r3, r2
 8007660:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007664:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007668:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007672:	441a      	add	r2, r3
 8007674:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007678:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007682:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007686:	441a      	add	r2, r3
 8007688:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800768c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007690:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8007692:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007696:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80076aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80076b8:	4059      	eors	r1, r3
 80076ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80076c8:	404b      	eors	r3, r1
 80076ca:	441a      	add	r2, r3
 80076cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076d4:	6899      	ldr	r1, [r3, #8]
 80076d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076e8:	685c      	ldr	r4, [r3, #4]
 80076ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80076ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4063      	eors	r3, r4
 80076f6:	4003      	ands	r3, r0
 80076f8:	404b      	eors	r3, r1
 80076fa:	441a      	add	r2, r3
 80076fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007700:	3304      	adds	r3, #4
 8007702:	4995      	ldr	r1, [pc, #596]	@ (8007958 <mbedtls_internal_sha256_process+0x868>)
 8007704:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007708:	441a      	add	r2, r3
 800770a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800770e:	1d19      	adds	r1, r3, #4
 8007710:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007714:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800771c:	4413      	add	r3, r2
 800771e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007722:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007726:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007730:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007734:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800773e:	405a      	eors	r2, r3
 8007740:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007744:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800774e:	405a      	eors	r2, r3
 8007750:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007754:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007758:	6919      	ldr	r1, [r3, #16]
 800775a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800775e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	4019      	ands	r1, r3
 8007766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800776a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800776e:	6998      	ldr	r0, [r3, #24]
 8007770:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007774:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007778:	691c      	ldr	r4, [r3, #16]
 800777a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800777e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	4323      	orrs	r3, r4
 8007786:	4003      	ands	r3, r0
 8007788:	430b      	orrs	r3, r1
 800778a:	4413      	add	r3, r2
 800778c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007790:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800779e:	441a      	add	r2, r3
 80077a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077a8:	61da      	str	r2, [r3, #28]
 80077aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80077ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80077b2:	441a      	add	r2, r3
 80077b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077bc:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80077be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80077d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80077e4:	4059      	eors	r1, r3
 80077e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80077f4:	404b      	eors	r3, r1
 80077f6:	441a      	add	r2, r3
 80077f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80077fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007806:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800780a:	69d8      	ldr	r0, [r3, #28]
 800780c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007810:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007814:	681c      	ldr	r4, [r3, #0]
 8007816:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800781a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4063      	eors	r3, r4
 8007822:	4003      	ands	r3, r0
 8007824:	404b      	eors	r3, r1
 8007826:	441a      	add	r2, r3
 8007828:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800782c:	3305      	adds	r3, #5
 800782e:	494a      	ldr	r1, [pc, #296]	@ (8007958 <mbedtls_internal_sha256_process+0x868>)
 8007830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007834:	441a      	add	r2, r3
 8007836:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800783a:	1d59      	adds	r1, r3, #5
 800783c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007840:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007848:	4413      	add	r3, r2
 800784a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800784e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007852:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800785c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007860:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	ea4f 3373 	mov.w	r3, r3, ror #13
 800786a:	405a      	eors	r2, r3
 800786c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007870:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800787a:	405a      	eors	r2, r3
 800787c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007884:	68d9      	ldr	r1, [r3, #12]
 8007886:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800788a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4019      	ands	r1, r3
 8007892:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007896:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800789a:	6958      	ldr	r0, [r3, #20]
 800789c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078a4:	68dc      	ldr	r4, [r3, #12]
 80078a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	4323      	orrs	r3, r4
 80078b2:	4003      	ands	r3, r0
 80078b4:	430b      	orrs	r3, r1
 80078b6:	4413      	add	r3, r2
 80078b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80078bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80078ca:	441a      	add	r2, r3
 80078cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078d4:	619a      	str	r2, [r3, #24]
 80078d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80078de:	441a      	add	r2, r3
 80078e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078e8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80078ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007906:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007910:	4059      	eors	r1, r3
 8007912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007920:	404b      	eors	r3, r1
 8007922:	441a      	add	r2, r3
 8007924:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007928:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800792c:	6819      	ldr	r1, [r3, #0]
 800792e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007932:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007936:	6998      	ldr	r0, [r3, #24]
 8007938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800793c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007940:	69dc      	ldr	r4, [r3, #28]
 8007942:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007946:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4063      	eors	r3, r4
 800794e:	4003      	ands	r3, r0
 8007950:	404b      	eors	r3, r1
 8007952:	441a      	add	r2, r3
 8007954:	e002      	b.n	800795c <mbedtls_internal_sha256_process+0x86c>
 8007956:	bf00      	nop
 8007958:	08010d38 	.word	0x08010d38
 800795c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007960:	3306      	adds	r3, #6
 8007962:	4981      	ldr	r1, [pc, #516]	@ (8007b68 <mbedtls_internal_sha256_process+0xa78>)
 8007964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007968:	441a      	add	r2, r3
 800796a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800796e:	1d99      	adds	r1, r3, #6
 8007970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007974:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800797c:	4413      	add	r3, r2
 800797e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007986:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800799e:	405a      	eors	r2, r3
 80079a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80079ae:	405a      	eors	r2, r3
 80079b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079b8:	6899      	ldr	r1, [r3, #8]
 80079ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	4019      	ands	r1, r3
 80079c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079ce:	6918      	ldr	r0, [r3, #16]
 80079d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079d8:	689c      	ldr	r4, [r3, #8]
 80079da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	4323      	orrs	r3, r4
 80079e6:	4003      	ands	r3, r0
 80079e8:	430b      	orrs	r3, r1
 80079ea:	4413      	add	r3, r2
 80079ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80079f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80079f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80079f8:	695a      	ldr	r2, [r3, #20]
 80079fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80079fe:	441a      	add	r2, r3
 8007a00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a08:	615a      	str	r2, [r3, #20]
 8007a0a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a12:	441a      	add	r2, r3
 8007a14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a1c:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8007a1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007a36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007a44:	4059      	eors	r1, r3
 8007a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007a54:	404b      	eors	r3, r1
 8007a56:	441a      	add	r2, r3
 8007a58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a60:	69d9      	ldr	r1, [r3, #28]
 8007a62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a6a:	6958      	ldr	r0, [r3, #20]
 8007a6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a74:	699c      	ldr	r4, [r3, #24]
 8007a76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007a7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	4063      	eors	r3, r4
 8007a82:	4003      	ands	r3, r0
 8007a84:	404b      	eors	r3, r1
 8007a86:	441a      	add	r2, r3
 8007a88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	4936      	ldr	r1, [pc, #216]	@ (8007b68 <mbedtls_internal_sha256_process+0xa78>)
 8007a90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007a94:	441a      	add	r2, r3
 8007a96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007a9a:	1dd9      	adds	r1, r3, #7
 8007a9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aa0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007aae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ab2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007abc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ac0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007aca:	405a      	eors	r2, r3
 8007acc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007ada:	405a      	eors	r2, r3
 8007adc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ae0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ae4:	6859      	ldr	r1, [r3, #4]
 8007ae6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007aea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4019      	ands	r1, r3
 8007af2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007af6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007afa:	68d8      	ldr	r0, [r3, #12]
 8007afc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b04:	685c      	ldr	r4, [r3, #4]
 8007b06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	4323      	orrs	r3, r4
 8007b12:	4003      	ands	r3, r0
 8007b14:	430b      	orrs	r3, r1
 8007b16:	4413      	add	r3, r2
 8007b18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007b1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007b2a:	441a      	add	r2, r3
 8007b2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b34:	611a      	str	r2, [r3, #16]
 8007b36:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007b3e:	441a      	add	r2, r3
 8007b40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b48:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 8007b4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b4e:	3308      	adds	r3, #8
 8007b50:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007b54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b58:	2b0f      	cmp	r3, #15
 8007b5a:	f67f ab41 	bls.w	80071e0 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8007b5e:	2310      	movs	r3, #16
 8007b60:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007b64:	f000 bfd5 	b.w	8008b12 <mbedtls_internal_sha256_process+0x1a22>
 8007b68:	08010d38 	.word	0x08010d38
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8007b6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b74:	69da      	ldr	r2, [r3, #28]
 8007b76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007b84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007b92:	4059      	eors	r1, r3
 8007b94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007b98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007ba2:	404b      	eors	r3, r1
 8007ba4:	441a      	add	r2, r3
 8007ba6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007baa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bae:	6999      	ldr	r1, [r3, #24]
 8007bb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bb8:	6918      	ldr	r0, [r3, #16]
 8007bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bc2:	695c      	ldr	r4, [r3, #20]
 8007bc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	4063      	eors	r3, r4
 8007bd0:	4003      	ands	r3, r0
 8007bd2:	404b      	eors	r3, r1
 8007bd4:	441a      	add	r2, r3
 8007bd6:	49ec      	ldr	r1, [pc, #944]	@ (8007f88 <mbedtls_internal_sha256_process+0xe98>)
 8007bd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007be0:	441a      	add	r2, r3
 8007be2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007be6:	1e99      	subs	r1, r3, #2
 8007be8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007bec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bf4:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007bfc:	1e98      	subs	r0, r3, #2
 8007bfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c0a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007c0e:	4059      	eors	r1, r3
 8007c10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c14:	1e98      	subs	r0, r3, #2
 8007c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c22:	0a9b      	lsrs	r3, r3, #10
 8007c24:	4059      	eors	r1, r3
 8007c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c2a:	1fd8      	subs	r0, r3, #7
 8007c2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c30:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c38:	4419      	add	r1, r3
 8007c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c3e:	f1a3 000f 	sub.w	r0, r3, #15
 8007c42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c46:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c4e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007c52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c56:	f1a3 040f 	sub.w	r4, r3, #15
 8007c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c66:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007c6a:	4058      	eors	r0, r3
 8007c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c70:	f1a3 040f 	sub.w	r4, r3, #15
 8007c74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c7c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c80:	08db      	lsrs	r3, r3, #3
 8007c82:	4043      	eors	r3, r0
 8007c84:	4419      	add	r1, r3
 8007c86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c8a:	f1a3 0010 	sub.w	r0, r3, #16
 8007c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007c92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007c96:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007c9a:	18c8      	adds	r0, r1, r3
 8007c9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ca0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007ca4:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007ca8:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8007cac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007cb4:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007cb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007cde:	405a      	eors	r2, r3
 8007ce0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ce4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007cee:	405a      	eors	r2, r3
 8007cf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007cf8:	6819      	ldr	r1, [r3, #0]
 8007cfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007cfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4019      	ands	r1, r3
 8007d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d0e:	6898      	ldr	r0, [r3, #8]
 8007d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d18:	681c      	ldr	r4, [r3, #0]
 8007d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	4323      	orrs	r3, r4
 8007d26:	4003      	ands	r3, r0
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007d3e:	441a      	add	r2, r3
 8007d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d48:	60da      	str	r2, [r3, #12]
 8007d4a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d52:	441a      	add	r2, r3
 8007d54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d5c:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8007d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d66:	699a      	ldr	r2, [r3, #24]
 8007d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007d76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007d84:	4059      	eors	r1, r3
 8007d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007d94:	404b      	eors	r3, r1
 8007d96:	441a      	add	r2, r3
 8007d98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007d9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007da0:	6959      	ldr	r1, [r3, #20]
 8007da2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007da6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007daa:	68d8      	ldr	r0, [r3, #12]
 8007dac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007db4:	691c      	ldr	r4, [r3, #16]
 8007db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007dba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	4063      	eors	r3, r4
 8007dc2:	4003      	ands	r3, r0
 8007dc4:	404b      	eors	r3, r1
 8007dc6:	441a      	add	r2, r3
 8007dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dcc:	3301      	adds	r3, #1
 8007dce:	496e      	ldr	r1, [pc, #440]	@ (8007f88 <mbedtls_internal_sha256_process+0xe98>)
 8007dd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007dd4:	441a      	add	r2, r3
 8007dd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007dda:	1e59      	subs	r1, r3, #1
 8007ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007de0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007de4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de8:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007dec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007df0:	1e58      	subs	r0, r3, #1
 8007df2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007df6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007dfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007dfe:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007e02:	4059      	eors	r1, r3
 8007e04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e08:	1e58      	subs	r0, r3, #1
 8007e0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e0e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e16:	0a9b      	lsrs	r3, r3, #10
 8007e18:	4059      	eors	r1, r3
 8007e1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e1e:	1f98      	subs	r0, r3, #6
 8007e20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e2c:	4419      	add	r1, r3
 8007e2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e32:	f1a3 000e 	sub.w	r0, r3, #14
 8007e36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007e42:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8007e46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e4a:	f1a3 040e 	sub.w	r4, r3, #14
 8007e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e56:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e5a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8007e5e:	4058      	eors	r0, r3
 8007e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e64:	f1a3 040e 	sub.w	r4, r3, #14
 8007e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e6c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	4043      	eors	r3, r0
 8007e78:	18c8      	adds	r0, r1, r3
 8007e7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e7e:	f1a3 010f 	sub.w	r1, r3, #15
 8007e82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007e86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007e8a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e92:	3301      	adds	r3, #1
 8007e94:	4408      	add	r0, r1
 8007e96:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007e9a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007e9e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007ea2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8007ea6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8007eaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8007ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8007ed0:	405a      	eors	r2, r3
 8007ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8007ee0:	405a      	eors	r2, r3
 8007ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ee6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007eea:	69d9      	ldr	r1, [r3, #28]
 8007eec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ef0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4019      	ands	r1, r3
 8007ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007efc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f00:	6858      	ldr	r0, [r3, #4]
 8007f02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f0a:	69dc      	ldr	r4, [r3, #28]
 8007f0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4323      	orrs	r3, r4
 8007f18:	4003      	ands	r3, r0
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007f22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007f30:	441a      	add	r2, r3
 8007f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f3a:	609a      	str	r2, [r3, #8]
 8007f3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8007f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007f44:	441a      	add	r2, r3
 8007f46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f4e:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8007f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f58:	695a      	ldr	r2, [r3, #20]
 8007f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8007f68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8007f76:	4059      	eors	r1, r3
 8007f78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	ea4f 6373 	mov.w	r3, r3, ror #25
 8007f86:	e001      	b.n	8007f8c <mbedtls_internal_sha256_process+0xe9c>
 8007f88:	08010d38 	.word	0x08010d38
 8007f8c:	404b      	eors	r3, r1
 8007f8e:	441a      	add	r2, r3
 8007f90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007f98:	6919      	ldr	r1, [r3, #16]
 8007f9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fa2:	6898      	ldr	r0, [r3, #8]
 8007fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fac:	68dc      	ldr	r4, [r3, #12]
 8007fae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	4063      	eors	r3, r4
 8007fba:	4003      	ands	r3, r0
 8007fbc:	404b      	eors	r3, r1
 8007fbe:	441a      	add	r2, r3
 8007fc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	49ec      	ldr	r1, [pc, #944]	@ (8008378 <mbedtls_internal_sha256_process+0x1288>)
 8007fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007fcc:	441a      	add	r2, r3
 8007fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fd6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8007fda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fde:	ea4f 4173 	mov.w	r1, r3, ror #17
 8007fe2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fe6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007fea:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007fee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007ff2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8007ff6:	4059      	eors	r1, r3
 8007ff8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007ffc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008000:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8008004:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008008:	0a9b      	lsrs	r3, r3, #10
 800800a:	4059      	eors	r1, r3
 800800c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008010:	1f58      	subs	r0, r3, #5
 8008012:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800801a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800801e:	4419      	add	r1, r3
 8008020:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008024:	f1a3 000d 	sub.w	r0, r3, #13
 8008028:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800802c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008030:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008034:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008038:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800803c:	f1a3 040d 	sub.w	r4, r3, #13
 8008040:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008044:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008048:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800804c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008050:	4058      	eors	r0, r3
 8008052:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008056:	f1a3 040d 	sub.w	r4, r3, #13
 800805a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800805e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008062:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	4043      	eors	r3, r0
 800806a:	18c8      	adds	r0, r1, r3
 800806c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008070:	f1a3 010e 	sub.w	r1, r3, #14
 8008074:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008078:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800807c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008080:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008084:	3302      	adds	r3, #2
 8008086:	4408      	add	r0, r1
 8008088:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800808c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008090:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008094:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008098:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800809c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80080a0:	4413      	add	r3, r2
 80080a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80080a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80080b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	ea4f 3373 	mov.w	r3, r3, ror #13
 80080c2:	405a      	eors	r2, r3
 80080c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80080d2:	405a      	eors	r2, r3
 80080d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080dc:	6999      	ldr	r1, [r3, #24]
 80080de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	4019      	ands	r1, r3
 80080ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80080f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80080fc:	699c      	ldr	r4, [r3, #24]
 80080fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	4323      	orrs	r3, r4
 800810a:	4003      	ands	r3, r0
 800810c:	430b      	orrs	r3, r1
 800810e:	4413      	add	r3, r2
 8008110:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008114:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008118:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008122:	441a      	add	r2, r3
 8008124:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008128:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800812c:	605a      	str	r2, [r3, #4]
 800812e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008132:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008136:	441a      	add	r2, r3
 8008138:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800813c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008140:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8008142:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008146:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008150:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800815a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800815e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008168:	4059      	eors	r1, r3
 800816a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800816e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008178:	404b      	eors	r3, r1
 800817a:	441a      	add	r2, r3
 800817c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008180:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008184:	68d9      	ldr	r1, [r3, #12]
 8008186:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800818a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800818e:	6858      	ldr	r0, [r3, #4]
 8008190:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008194:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008198:	689c      	ldr	r4, [r3, #8]
 800819a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800819e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	4063      	eors	r3, r4
 80081a6:	4003      	ands	r3, r0
 80081a8:	404b      	eors	r3, r1
 80081aa:	441a      	add	r2, r3
 80081ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081b0:	3303      	adds	r3, #3
 80081b2:	4971      	ldr	r1, [pc, #452]	@ (8008378 <mbedtls_internal_sha256_process+0x1288>)
 80081b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80081b8:	441a      	add	r2, r3
 80081ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081be:	1c59      	adds	r1, r3, #1
 80081c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081cc:	ea4f 4173 	mov.w	r1, r3, ror #17
 80081d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081d4:	1c58      	adds	r0, r3, #1
 80081d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081e2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80081e6:	4059      	eors	r1, r3
 80081e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80081ec:	1c58      	adds	r0, r3, #1
 80081ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80081f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80081f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80081fa:	0a9b      	lsrs	r3, r3, #10
 80081fc:	4059      	eors	r1, r3
 80081fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008202:	1f18      	subs	r0, r3, #4
 8008204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008208:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800820c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008210:	4419      	add	r1, r3
 8008212:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008216:	f1a3 000c 	sub.w	r0, r3, #12
 800821a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800821e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008222:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008226:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800822a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800822e:	f1a3 040c 	sub.w	r4, r3, #12
 8008232:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008236:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800823a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800823e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008242:	4058      	eors	r0, r3
 8008244:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008248:	f1a3 040c 	sub.w	r4, r3, #12
 800824c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008250:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008254:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008258:	08db      	lsrs	r3, r3, #3
 800825a:	4043      	eors	r3, r0
 800825c:	18c8      	adds	r0, r1, r3
 800825e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008262:	f1a3 010d 	sub.w	r1, r3, #13
 8008266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800826a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800826e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008276:	3303      	adds	r3, #3
 8008278:	4408      	add	r0, r1
 800827a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800827e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008282:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008286:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800828a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800828e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008292:	4413      	add	r3, r2
 8008294:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008298:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800829c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80082a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80082b4:	405a      	eors	r2, r3
 80082b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80082c4:	405a      	eors	r2, r3
 80082c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ce:	6959      	ldr	r1, [r3, #20]
 80082d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	4019      	ands	r1, r3
 80082dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082e4:	69d8      	ldr	r0, [r3, #28]
 80082e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082ee:	695c      	ldr	r4, [r3, #20]
 80082f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80082f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	4323      	orrs	r3, r4
 80082fc:	4003      	ands	r3, r0
 80082fe:	430b      	orrs	r3, r1
 8008300:	4413      	add	r3, r2
 8008302:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008306:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800830a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008314:	441a      	add	r2, r3
 8008316:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800831a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008324:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008328:	441a      	add	r2, r3
 800832a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800832e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008332:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8008334:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008338:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008342:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	ea4f 11b3 	mov.w	r1, r3, ror #6
 800834c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800835a:	4059      	eors	r1, r3
 800835c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008360:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	ea4f 6373 	mov.w	r3, r3, ror #25
 800836a:	404b      	eors	r3, r1
 800836c:	441a      	add	r2, r3
 800836e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008372:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008376:	e001      	b.n	800837c <mbedtls_internal_sha256_process+0x128c>
 8008378:	08010d38 	.word	0x08010d38
 800837c:	6899      	ldr	r1, [r3, #8]
 800837e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008382:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800838c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008390:	685c      	ldr	r4, [r3, #4]
 8008392:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008396:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	4063      	eors	r3, r4
 800839e:	4003      	ands	r3, r0
 80083a0:	404b      	eors	r3, r1
 80083a2:	441a      	add	r2, r3
 80083a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083a8:	3304      	adds	r3, #4
 80083aa:	49ec      	ldr	r1, [pc, #944]	@ (800875c <mbedtls_internal_sha256_process+0x166c>)
 80083ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80083b0:	441a      	add	r2, r3
 80083b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083b6:	1c99      	adds	r1, r3, #2
 80083b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083c4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80083c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083cc:	1c98      	adds	r0, r3, #2
 80083ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083da:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80083de:	4059      	eors	r1, r3
 80083e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083e4:	1c98      	adds	r0, r3, #2
 80083e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80083ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80083ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80083f2:	0a9b      	lsrs	r3, r3, #10
 80083f4:	4059      	eors	r1, r3
 80083f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80083fa:	1ed8      	subs	r0, r3, #3
 80083fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008400:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008408:	4419      	add	r1, r3
 800840a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800840e:	f1a3 000b 	sub.w	r0, r3, #11
 8008412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800841a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800841e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008422:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008426:	f1a3 040b 	sub.w	r4, r3, #11
 800842a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800842e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008432:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008436:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800843a:	4058      	eors	r0, r3
 800843c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008440:	f1a3 040b 	sub.w	r4, r3, #11
 8008444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008448:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800844c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008450:	08db      	lsrs	r3, r3, #3
 8008452:	4043      	eors	r3, r0
 8008454:	18c8      	adds	r0, r1, r3
 8008456:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800845a:	f1a3 010c 	sub.w	r1, r3, #12
 800845e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008462:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008466:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800846a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800846e:	3304      	adds	r3, #4
 8008470:	4408      	add	r0, r1
 8008472:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008476:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800847a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800847e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008482:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008486:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800848a:	4413      	add	r3, r2
 800848c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008490:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008494:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800849e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80084ac:	405a      	eors	r2, r3
 80084ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80084bc:	405a      	eors	r2, r3
 80084be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084c6:	6919      	ldr	r1, [r3, #16]
 80084c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	4019      	ands	r1, r3
 80084d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084dc:	6998      	ldr	r0, [r3, #24]
 80084de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084e6:	691c      	ldr	r4, [r3, #16]
 80084e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80084ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	4323      	orrs	r3, r4
 80084f4:	4003      	ands	r3, r0
 80084f6:	430b      	orrs	r3, r1
 80084f8:	4413      	add	r3, r2
 80084fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80084fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008502:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800850c:	441a      	add	r2, r3
 800850e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008512:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008516:	61da      	str	r2, [r3, #28]
 8008518:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800851c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008520:	441a      	add	r2, r3
 8008522:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008526:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800852a:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 800852c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008530:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800853a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008544:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008548:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008552:	4059      	eors	r1, r3
 8008554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008558:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008562:	404b      	eors	r3, r1
 8008564:	441a      	add	r2, r3
 8008566:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800856a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800856e:	6859      	ldr	r1, [r3, #4]
 8008570:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008578:	69d8      	ldr	r0, [r3, #28]
 800857a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800857e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008582:	681c      	ldr	r4, [r3, #0]
 8008584:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008588:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4063      	eors	r3, r4
 8008590:	4003      	ands	r3, r0
 8008592:	404b      	eors	r3, r1
 8008594:	441a      	add	r2, r3
 8008596:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800859a:	3305      	adds	r3, #5
 800859c:	496f      	ldr	r1, [pc, #444]	@ (800875c <mbedtls_internal_sha256_process+0x166c>)
 800859e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80085a2:	441a      	add	r2, r3
 80085a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085a8:	1cd9      	adds	r1, r3, #3
 80085aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085b6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80085ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085be:	1cd8      	adds	r0, r3, #3
 80085c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085cc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80085d0:	4059      	eors	r1, r3
 80085d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085d6:	1cd8      	adds	r0, r3, #3
 80085d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085e4:	0a9b      	lsrs	r3, r3, #10
 80085e6:	4059      	eors	r1, r3
 80085e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80085ec:	1e98      	subs	r0, r3, #2
 80085ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80085f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80085f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80085fa:	4419      	add	r1, r3
 80085fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008600:	f1a3 000a 	sub.w	r0, r3, #10
 8008604:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008608:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800860c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008610:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8008614:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008618:	f1a3 040a 	sub.w	r4, r3, #10
 800861c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008620:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008624:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008628:	ea4f 43b3 	mov.w	r3, r3, ror #18
 800862c:	4058      	eors	r0, r3
 800862e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008632:	f1a3 040a 	sub.w	r4, r3, #10
 8008636:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800863a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800863e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008642:	08db      	lsrs	r3, r3, #3
 8008644:	4043      	eors	r3, r0
 8008646:	18c8      	adds	r0, r1, r3
 8008648:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800864c:	f1a3 010b 	sub.w	r1, r3, #11
 8008650:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008654:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008658:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800865c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008660:	3305      	adds	r3, #5
 8008662:	4408      	add	r0, r1
 8008664:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008668:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800866c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008670:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008674:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800867c:	4413      	add	r3, r2
 800867e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008686:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008690:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008694:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	ea4f 3373 	mov.w	r3, r3, ror #13
 800869e:	405a      	eors	r2, r3
 80086a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80086ae:	405a      	eors	r2, r3
 80086b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086b8:	68d9      	ldr	r1, [r3, #12]
 80086ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	4019      	ands	r1, r3
 80086c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086ce:	6958      	ldr	r0, [r3, #20]
 80086d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086d8:	68dc      	ldr	r4, [r3, #12]
 80086da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	4323      	orrs	r3, r4
 80086e6:	4003      	ands	r3, r0
 80086e8:	430b      	orrs	r3, r1
 80086ea:	4413      	add	r3, r2
 80086ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80086f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80086f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80086f8:	699a      	ldr	r2, [r3, #24]
 80086fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80086fe:	441a      	add	r2, r3
 8008700:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008704:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008708:	619a      	str	r2, [r3, #24]
 800870a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800870e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008712:	441a      	add	r2, r3
 8008714:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008718:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800871c:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 800871e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008722:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800872c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800873a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8008744:	4059      	eors	r1, r3
 8008746:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800874a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	ea4f 6373 	mov.w	r3, r3, ror #25
 8008754:	404b      	eors	r3, r1
 8008756:	441a      	add	r2, r3
 8008758:	e002      	b.n	8008760 <mbedtls_internal_sha256_process+0x1670>
 800875a:	bf00      	nop
 800875c:	08010d38 	.word	0x08010d38
 8008760:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008764:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008768:	6819      	ldr	r1, [r3, #0]
 800876a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800876e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008772:	6998      	ldr	r0, [r3, #24]
 8008774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008778:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800877c:	69dc      	ldr	r4, [r3, #28]
 800877e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008782:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4063      	eors	r3, r4
 800878a:	4003      	ands	r3, r0
 800878c:	404b      	eors	r3, r1
 800878e:	441a      	add	r2, r3
 8008790:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008794:	3306      	adds	r3, #6
 8008796:	49e3      	ldr	r1, [pc, #908]	@ (8008b24 <mbedtls_internal_sha256_process+0x1a34>)
 8008798:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800879c:	441a      	add	r2, r3
 800879e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087a2:	1d19      	adds	r1, r3, #4
 80087a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087b0:	ea4f 4173 	mov.w	r1, r3, ror #17
 80087b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087b8:	1d18      	adds	r0, r3, #4
 80087ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087c6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80087ca:	4059      	eors	r1, r3
 80087cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087d0:	1d18      	adds	r0, r3, #4
 80087d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087de:	0a9b      	lsrs	r3, r3, #10
 80087e0:	4059      	eors	r1, r3
 80087e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087e6:	1e58      	subs	r0, r3, #1
 80087e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80087ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80087f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80087f4:	4419      	add	r1, r3
 80087f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80087fa:	f1a3 0009 	sub.w	r0, r3, #9
 80087fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008802:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008806:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800880a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 800880e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008812:	f1a3 0409 	sub.w	r4, r3, #9
 8008816:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800881a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800881e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008822:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008826:	4058      	eors	r0, r3
 8008828:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800882c:	f1a3 0409 	sub.w	r4, r3, #9
 8008830:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008834:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008838:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800883c:	08db      	lsrs	r3, r3, #3
 800883e:	4043      	eors	r3, r0
 8008840:	18c8      	adds	r0, r1, r3
 8008842:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008846:	f1a3 010a 	sub.w	r1, r3, #10
 800884a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800884e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008852:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008856:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800885a:	3306      	adds	r3, #6
 800885c:	4408      	add	r0, r1
 800885e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008862:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008866:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800886a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800886e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008872:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008876:	4413      	add	r3, r2
 8008878:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800887c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800888a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800888e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008898:	405a      	eors	r2, r3
 800889a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800889e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80088a8:	405a      	eors	r2, r3
 80088aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088b2:	6899      	ldr	r1, [r3, #8]
 80088b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	4019      	ands	r1, r3
 80088c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088c8:	6918      	ldr	r0, [r3, #16]
 80088ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088d2:	689c      	ldr	r4, [r3, #8]
 80088d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	4323      	orrs	r3, r4
 80088e0:	4003      	ands	r3, r0
 80088e2:	430b      	orrs	r3, r1
 80088e4:	4413      	add	r3, r2
 80088e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80088ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80088f8:	441a      	add	r2, r3
 80088fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80088fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008902:	615a      	str	r2, [r3, #20]
 8008904:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008908:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800890c:	441a      	add	r2, r3
 800890e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008912:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008916:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8008918:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800891c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008926:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8008930:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008934:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 800893e:	4059      	eors	r1, r3
 8008940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008944:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	ea4f 6373 	mov.w	r3, r3, ror #25
 800894e:	404b      	eors	r3, r1
 8008950:	441a      	add	r2, r3
 8008952:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008956:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800895a:	69d9      	ldr	r1, [r3, #28]
 800895c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008960:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008964:	6958      	ldr	r0, [r3, #20]
 8008966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800896a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800896e:	699c      	ldr	r4, [r3, #24]
 8008970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008974:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	4063      	eors	r3, r4
 800897c:	4003      	ands	r3, r0
 800897e:	404b      	eors	r3, r1
 8008980:	441a      	add	r2, r3
 8008982:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008986:	3307      	adds	r3, #7
 8008988:	4966      	ldr	r1, [pc, #408]	@ (8008b24 <mbedtls_internal_sha256_process+0x1a34>)
 800898a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800898e:	441a      	add	r2, r3
 8008990:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008994:	1d59      	adds	r1, r3, #5
 8008996:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800899a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800899e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089a2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80089a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089aa:	1d58      	adds	r0, r3, #5
 80089ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089b8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80089bc:	4059      	eors	r1, r3
 80089be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089c2:	1d58      	adds	r0, r3, #5
 80089c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089c8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089d0:	0a9b      	lsrs	r3, r3, #10
 80089d2:	4059      	eors	r1, r3
 80089d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089dc:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80089e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089e4:	4419      	add	r1, r3
 80089e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80089ea:	f1a3 0008 	sub.w	r0, r3, #8
 80089ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80089f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80089f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089fa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80089fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a02:	f1a3 0408 	sub.w	r4, r3, #8
 8008a06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a12:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8008a16:	4058      	eors	r0, r3
 8008a18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a1c:	f1a3 0408 	sub.w	r4, r3, #8
 8008a20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a2c:	08db      	lsrs	r3, r3, #3
 8008a2e:	4043      	eors	r3, r0
 8008a30:	18c8      	adds	r0, r1, r3
 8008a32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a36:	f1a3 0109 	sub.w	r1, r3, #9
 8008a3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8008a42:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008a4a:	3307      	adds	r3, #7
 8008a4c:	4408      	add	r0, r1
 8008a4e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008a52:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008a56:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008a5a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8008a5e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8008a62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a66:	4413      	add	r3, r2
 8008a68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008a6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8008a7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	ea4f 3373 	mov.w	r3, r3, ror #13
 8008a88:	405a      	eors	r2, r3
 8008a8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8008a98:	405a      	eors	r2, r3
 8008a9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008a9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008aa2:	6859      	ldr	r1, [r3, #4]
 8008aa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	4019      	ands	r1, r3
 8008ab0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ab4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ab8:	68d8      	ldr	r0, [r3, #12]
 8008aba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008abe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ac2:	685c      	ldr	r4, [r3, #4]
 8008ac4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ac8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	4323      	orrs	r3, r4
 8008ad0:	4003      	ands	r3, r0
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008ada:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008ade:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8008ae8:	441a      	add	r2, r3
 8008aea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008aee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008af2:	611a      	str	r2, [r3, #16]
 8008af4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8008af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8008afc:	441a      	add	r2, r3
 8008afe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b06:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8008b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008b12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b18:	f67f a828 	bls.w	8007b6c <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008b22:	e023      	b.n	8008b6c <mbedtls_internal_sha256_process+0x1a7c>
 8008b24:	08010d38 	.word	0x08010d38
        ctx->state[i] += A[i];
 8008b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b2c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8008b36:	3202      	adds	r2, #2
 8008b38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8008b44:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8008b48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b4c:	18d1      	adds	r1, r2, r3
 8008b4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8008b52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8008b5c:	3202      	adds	r2, #2
 8008b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8008b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b66:	3301      	adds	r3, #1
 8008b68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8008b70:	2b07      	cmp	r3, #7
 8008b72:	d9d9      	bls.n	8008b28 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc90      	pop	{r4, r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8008b96:	2300      	movs	r3, #0
 8008b98:	e065      	b.n	8008c66 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ba2:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008baa:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	441a      	add	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d904      	bls.n	8008bd4 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d034      	beq.n	8008c44 <mbedtls_sha256_update_ret+0xc0>
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d330      	bcc.n	8008c44 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f006 f970 	bl	800eed6 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3328      	adds	r3, #40	@ 0x28
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f7fe fa77 	bl	80070f0 <mbedtls_internal_sha256_process>
 8008c02:	6178      	str	r0, [r7, #20]
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	e02b      	b.n	8008c66 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	4413      	add	r3, r2
 8008c14:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	607b      	str	r3, [r7, #4]
        left = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8008c22:	e00f      	b.n	8008c44 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f7fe fa62 	bl	80070f0 <mbedtls_internal_sha256_process>
 8008c2c:	6178      	str	r0, [r7, #20]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	e016      	b.n	8008c66 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3340      	adds	r3, #64	@ 0x40
 8008c3c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3b40      	subs	r3, #64	@ 0x40
 8008c42:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c48:	d8ec      	bhi.n	8008c24 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d009      	beq.n	8008c64 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f006 f939 	bl	800eed6 <memcpy>

    return( 0 );
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3720      	adds	r7, #32
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c80:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	617a      	str	r2, [r7, #20]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	2280      	movs	r2, #128	@ 0x80
 8008c8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b38      	cmp	r3, #56	@ 0x38
 8008c96:	d80c      	bhi.n	8008cb2 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	18d0      	adds	r0, r2, r3
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008ca8:	461a      	mov	r2, r3
 8008caa:	2100      	movs	r1, #0
 8008cac:	f006 f8cd 	bl	800ee4a <memset>
 8008cb0:	e01e      	b.n	8008cf0 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	18d0      	adds	r0, r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	f006 f8c0 	bl	800ee4a <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3328      	adds	r3, #40	@ 0x28
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fe fa0d 	bl	80070f0 <mbedtls_internal_sha256_process>
 8008cd6:	6138      	str	r0, [r7, #16]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	e128      	b.n	8008f34 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3328      	adds	r3, #40	@ 0x28
 8008ce6:	2238      	movs	r2, #56	@ 0x38
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f006 f8ad 	bl	800ee4a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	0e1b      	lsrs	r3, r3, #24
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	0c1b      	lsrs	r3, r3, #16
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	0e1b      	lsrs	r3, r3, #24
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	0c1b      	lsrs	r3, r3, #16
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3328      	adds	r3, #40	@ 0x28
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fe f9c0 	bl	80070f0 <mbedtls_internal_sha256_process>
 8008d70:	6138      	str	r0, [r7, #16]
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	e0db      	b.n	8008f34 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	0e1b      	lsrs	r3, r3, #24
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	701a      	strb	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	0c1a      	lsrs	r2, r3, #16
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	0a1a      	lsrs	r2, r3, #8
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	3302      	adds	r3, #2
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	3303      	adds	r3, #3
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	0e1a      	lsrs	r2, r3, #24
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	3304      	adds	r3, #4
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	0c1a      	lsrs	r2, r3, #16
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	3305      	adds	r3, #5
 8008dc8:	b2d2      	uxtb	r2, r2
 8008dca:	701a      	strb	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	0a1a      	lsrs	r2, r3, #8
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	3306      	adds	r3, #6
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	3307      	adds	r3, #7
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	0e1a      	lsrs	r2, r3, #24
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	0c1a      	lsrs	r2, r3, #16
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	3309      	adds	r3, #9
 8008dfe:	b2d2      	uxtb	r2, r2
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	0a1a      	lsrs	r2, r3, #8
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	330a      	adds	r3, #10
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	701a      	strb	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	330b      	adds	r3, #11
 8008e18:	b2d2      	uxtb	r2, r2
 8008e1a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	0e1a      	lsrs	r2, r3, #24
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	0c1a      	lsrs	r2, r3, #16
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	330d      	adds	r3, #13
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	0a1a      	lsrs	r2, r3, #8
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	330e      	adds	r3, #14
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695a      	ldr	r2, [r3, #20]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	330f      	adds	r3, #15
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	699b      	ldr	r3, [r3, #24]
 8008e56:	0e1a      	lsrs	r2, r3, #24
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	3310      	adds	r3, #16
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	0c1a      	lsrs	r2, r3, #16
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3311      	adds	r3, #17
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	0a1a      	lsrs	r2, r3, #8
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3312      	adds	r3, #18
 8008e78:	b2d2      	uxtb	r2, r2
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	3313      	adds	r3, #19
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	0e1a      	lsrs	r2, r3, #24
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	3314      	adds	r3, #20
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	0c1a      	lsrs	r2, r3, #16
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	3315      	adds	r3, #21
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	0a1a      	lsrs	r2, r3, #8
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	3316      	adds	r3, #22
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69da      	ldr	r2, [r3, #28]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	3317      	adds	r3, #23
 8008eba:	b2d2      	uxtb	r2, r2
 8008ebc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	0e1a      	lsrs	r2, r3, #24
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	3318      	adds	r3, #24
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	0c1a      	lsrs	r2, r3, #16
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	3319      	adds	r3, #25
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	0a1a      	lsrs	r2, r3, #8
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	331a      	adds	r3, #26
 8008ee4:	b2d2      	uxtb	r2, r2
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a1a      	ldr	r2, [r3, #32]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	331b      	adds	r3, #27
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d11a      	bne.n	8008f32 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	0e1a      	lsrs	r2, r3, #24
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	331c      	adds	r3, #28
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0e:	0c1a      	lsrs	r2, r3, #16
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	331d      	adds	r3, #29
 8008f14:	b2d2      	uxtb	r2, r2
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	0a1a      	lsrs	r2, r3, #8
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	331e      	adds	r3, #30
 8008f22:	b2d2      	uxtb	r2, r2
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	331f      	adds	r3, #31
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f42:	2300      	movs	r3, #0
 8008f44:	607b      	str	r3, [r7, #4]
 8008f46:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <HAL_MspInit+0x4c>)
 8008f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8008f88 <HAL_MspInit+0x4c>)
 8008f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f52:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <HAL_MspInit+0x4c>)
 8008f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f5a:	607b      	str	r3, [r7, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f5e:	2300      	movs	r3, #0
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <HAL_MspInit+0x4c>)
 8008f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f66:	4a08      	ldr	r2, [pc, #32]	@ (8008f88 <HAL_MspInit+0x4c>)
 8008f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008f6e:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <HAL_MspInit+0x4c>)
 8008f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40023800 	.word	0x40023800

08008f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	@ 0x28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	605a      	str	r2, [r3, #4]
 8008f9e:	609a      	str	r2, [r3, #8]
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8009020 <HAL_I2C_MspInit+0x94>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d134      	bne.n	8009018 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fae:	2300      	movs	r3, #0
 8008fb0:	613b      	str	r3, [r7, #16]
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009024 <HAL_I2C_MspInit+0x98>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8009024 <HAL_I2C_MspInit+0x98>)
 8008fb8:	f043 0302 	orr.w	r3, r3, #2
 8008fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8008fbe:	4b19      	ldr	r3, [pc, #100]	@ (8009024 <HAL_I2C_MspInit+0x98>)
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008fca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008fd0:	2312      	movs	r3, #18
 8008fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008fdc:	2304      	movs	r3, #4
 8008fde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fe0:	f107 0314 	add.w	r3, r7, #20
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4810      	ldr	r0, [pc, #64]	@ (8009028 <HAL_I2C_MspInit+0x9c>)
 8008fe8:	f000 fc1e 	bl	8009828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <HAL_I2C_MspInit+0x98>)
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8009024 <HAL_I2C_MspInit+0x98>)
 8008ff6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ffc:	4b09      	ldr	r3, [pc, #36]	@ (8009024 <HAL_I2C_MspInit+0x98>)
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8009008:	2200      	movs	r2, #0
 800900a:	2100      	movs	r1, #0
 800900c:	2020      	movs	r0, #32
 800900e:	f000 fb34 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8009012:	2020      	movs	r0, #32
 8009014:	f000 fb4d 	bl	80096b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009018:	bf00      	nop
 800901a:	3728      	adds	r7, #40	@ 0x28
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40005400 	.word	0x40005400
 8009024:	40023800 	.word	0x40023800
 8009028:	40020400 	.word	0x40020400

0800902c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903c:	d115      	bne.n	800906a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800903e:	2300      	movs	r3, #0
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	4b0c      	ldr	r3, [pc, #48]	@ (8009074 <HAL_TIM_Base_MspInit+0x48>)
 8009044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009046:	4a0b      	ldr	r2, [pc, #44]	@ (8009074 <HAL_TIM_Base_MspInit+0x48>)
 8009048:	f043 0301 	orr.w	r3, r3, #1
 800904c:	6413      	str	r3, [r2, #64]	@ 0x40
 800904e:	4b09      	ldr	r3, [pc, #36]	@ (8009074 <HAL_TIM_Base_MspInit+0x48>)
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	201c      	movs	r0, #28
 8009060:	f000 fb0b 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009064:	201c      	movs	r0, #28
 8009066:	f000 fb24 	bl	80096b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800

08009078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08a      	sub	sp, #40	@ 0x28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009080:	f107 0314 	add.w	r3, r7, #20
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	605a      	str	r2, [r3, #4]
 800908a:	609a      	str	r2, [r3, #8]
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1d      	ldr	r2, [pc, #116]	@ (800910c <HAL_UART_MspInit+0x94>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d133      	bne.n	8009102 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800909a:	2300      	movs	r3, #0
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	4b1c      	ldr	r3, [pc, #112]	@ (8009110 <HAL_UART_MspInit+0x98>)
 80090a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009110 <HAL_UART_MspInit+0x98>)
 80090a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80090aa:	4b19      	ldr	r3, [pc, #100]	@ (8009110 <HAL_UART_MspInit+0x98>)
 80090ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b2:	613b      	str	r3, [r7, #16]
 80090b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	4b15      	ldr	r3, [pc, #84]	@ (8009110 <HAL_UART_MspInit+0x98>)
 80090bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090be:	4a14      	ldr	r2, [pc, #80]	@ (8009110 <HAL_UART_MspInit+0x98>)
 80090c0:	f043 0301 	orr.w	r3, r3, #1
 80090c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80090c6:	4b12      	ldr	r3, [pc, #72]	@ (8009110 <HAL_UART_MspInit+0x98>)
 80090c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80090d2:	230c      	movs	r3, #12
 80090d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d6:	2302      	movs	r3, #2
 80090d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090de:	2300      	movs	r3, #0
 80090e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80090e2:	2307      	movs	r3, #7
 80090e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090e6:	f107 0314 	add.w	r3, r7, #20
 80090ea:	4619      	mov	r1, r3
 80090ec:	4809      	ldr	r0, [pc, #36]	@ (8009114 <HAL_UART_MspInit+0x9c>)
 80090ee:	f000 fb9b 	bl	8009828 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80090f2:	2200      	movs	r2, #0
 80090f4:	2100      	movs	r1, #0
 80090f6:	2026      	movs	r0, #38	@ 0x26
 80090f8:	f000 fabf 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80090fc:	2026      	movs	r0, #38	@ 0x26
 80090fe:	f000 fad8 	bl	80096b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8009102:	bf00      	nop
 8009104:	3728      	adds	r7, #40	@ 0x28
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	40004400 	.word	0x40004400
 8009110:	40023800 	.word	0x40023800
 8009114:	40020000 	.word	0x40020000

08009118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800911c:	bf00      	nop
 800911e:	e7fd      	b.n	800911c <NMI_Handler+0x4>

08009120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <HardFault_Handler+0x4>

08009128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800912c:	bf00      	nop
 800912e:	e7fd      	b.n	800912c <MemManage_Handler+0x4>

08009130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <BusFault_Handler+0x4>

08009138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <UsageFault_Handler+0x4>

08009140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009144:	bf00      	nop
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr

0800914e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800914e:	b480      	push	{r7}
 8009150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009152:	bf00      	nop
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009160:	bf00      	nop
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800916e:	f000 f965 	bl	800943c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009172:	bf00      	nop
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800917c:	4802      	ldr	r0, [pc, #8]	@ (8009188 <TIM2_IRQHandler+0x10>)
 800917e:	f004 f887 	bl	800d290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009182:	bf00      	nop
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000634 	.word	0x20000634

0800918c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009190:	4802      	ldr	r0, [pc, #8]	@ (800919c <I2C1_EV_IRQHandler+0x10>)
 8009192:	f001 fadd 	bl	800a750 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009196:	bf00      	nop
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	200005e0 	.word	0x200005e0

080091a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80091a4:	4802      	ldr	r0, [pc, #8]	@ (80091b0 <I2C1_ER_IRQHandler+0x10>)
 80091a6:	f001 fc26 	bl	800a9f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80091aa:	bf00      	nop
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200005e0 	.word	0x200005e0

080091b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80091b8:	4802      	ldr	r0, [pc, #8]	@ (80091c4 <USART2_IRQHandler+0x10>)
 80091ba:	f004 fcc7 	bl	800db4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000067c 	.word	0x2000067c

080091c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80091cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80091d0:	f000 fce2 	bl	8009b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80091d4:	bf00      	nop
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091e4:	2300      	movs	r3, #0
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	e00a      	b.n	8009200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80091ea:	f3af 8000 	nop.w
 80091ee:	4601      	mov	r1, r0
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	60ba      	str	r2, [r7, #8]
 80091f6:	b2ca      	uxtb	r2, r1
 80091f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	3301      	adds	r3, #1
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	dbf0      	blt.n	80091ea <_read+0x12>
  }

  return len;
 8009208:	687b      	ldr	r3, [r7, #4]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b086      	sub	sp, #24
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800921e:	2300      	movs	r3, #0
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	e009      	b.n	8009238 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	60ba      	str	r2, [r7, #8]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7fa fb59 	bl	80038e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3301      	adds	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	dbf1      	blt.n	8009224 <_write+0x12>
  }
  return len;
 8009240:	687b      	ldr	r3, [r7, #4]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <_close>:

int _close(int file)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009272:	605a      	str	r2, [r3, #4]
  return 0;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <_isatty>:

int _isatty(int file)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800928a:	2301      	movs	r3, #1
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80092bc:	4a14      	ldr	r2, [pc, #80]	@ (8009310 <_sbrk+0x5c>)
 80092be:	4b15      	ldr	r3, [pc, #84]	@ (8009314 <_sbrk+0x60>)
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80092c8:	4b13      	ldr	r3, [pc, #76]	@ (8009318 <_sbrk+0x64>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80092d0:	4b11      	ldr	r3, [pc, #68]	@ (8009318 <_sbrk+0x64>)
 80092d2:	4a12      	ldr	r2, [pc, #72]	@ (800931c <_sbrk+0x68>)
 80092d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80092d6:	4b10      	ldr	r3, [pc, #64]	@ (8009318 <_sbrk+0x64>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4413      	add	r3, r2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d207      	bcs.n	80092f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80092e4:	f005 fdca 	bl	800ee7c <__errno>
 80092e8:	4603      	mov	r3, r0
 80092ea:	220c      	movs	r2, #12
 80092ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80092ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092f2:	e009      	b.n	8009308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80092f4:	4b08      	ldr	r3, [pc, #32]	@ (8009318 <_sbrk+0x64>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80092fa:	4b07      	ldr	r3, [pc, #28]	@ (8009318 <_sbrk+0x64>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4413      	add	r3, r2
 8009302:	4a05      	ldr	r2, [pc, #20]	@ (8009318 <_sbrk+0x64>)
 8009304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009306:	68fb      	ldr	r3, [r7, #12]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3718      	adds	r7, #24
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20018000 	.word	0x20018000
 8009314:	00000400 	.word	0x00000400
 8009318:	20000dd4 	.word	0x20000dd4
 800931c:	20000f28 	.word	0x20000f28

08009320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009324:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <SystemInit+0x20>)
 8009326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800932a:	4a05      	ldr	r2, [pc, #20]	@ (8009340 <SystemInit+0x20>)
 800932c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009334:	bf00      	nop
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	e000ed00 	.word	0xe000ed00

08009344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800937c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009348:	f7ff ffea 	bl	8009320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800934c:	480c      	ldr	r0, [pc, #48]	@ (8009380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800934e:	490d      	ldr	r1, [pc, #52]	@ (8009384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009350:	4a0d      	ldr	r2, [pc, #52]	@ (8009388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009354:	e002      	b.n	800935c <LoopCopyDataInit>

08009356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800935a:	3304      	adds	r3, #4

0800935c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800935c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800935e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009360:	d3f9      	bcc.n	8009356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009362:	4a0a      	ldr	r2, [pc, #40]	@ (800938c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009364:	4c0a      	ldr	r4, [pc, #40]	@ (8009390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009368:	e001      	b.n	800936e <LoopFillZerobss>

0800936a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800936a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800936c:	3204      	adds	r2, #4

0800936e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800936e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009370:	d3fb      	bcc.n	800936a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8009372:	f005 fd89 	bl	800ee88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009376:	f7fa fc69 	bl	8003c4c <main>
  bx  lr    
 800937a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800937c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8009380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009384:	200005bc 	.word	0x200005bc
  ldr r2, =_sidata
 8009388:	08010e94 	.word	0x08010e94
  ldr r2, =_sbss
 800938c:	200005bc 	.word	0x200005bc
  ldr r4, =_ebss
 8009390:	20000f28 	.word	0x20000f28

08009394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009394:	e7fe      	b.n	8009394 <ADC_IRQHandler>
	...

08009398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800939c:	4b0e      	ldr	r3, [pc, #56]	@ (80093d8 <HAL_Init+0x40>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0d      	ldr	r2, [pc, #52]	@ (80093d8 <HAL_Init+0x40>)
 80093a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80093a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80093a8:	4b0b      	ldr	r3, [pc, #44]	@ (80093d8 <HAL_Init+0x40>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a0a      	ldr	r2, [pc, #40]	@ (80093d8 <HAL_Init+0x40>)
 80093ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80093b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80093b4:	4b08      	ldr	r3, [pc, #32]	@ (80093d8 <HAL_Init+0x40>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a07      	ldr	r2, [pc, #28]	@ (80093d8 <HAL_Init+0x40>)
 80093ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093c0:	2003      	movs	r0, #3
 80093c2:	f000 f94f 	bl	8009664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80093c6:	2000      	movs	r0, #0
 80093c8:	f000 f808 	bl	80093dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80093cc:	f7ff fdb6 	bl	8008f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	40023c00 	.word	0x40023c00

080093dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80093e4:	4b12      	ldr	r3, [pc, #72]	@ (8009430 <HAL_InitTick+0x54>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	4b12      	ldr	r3, [pc, #72]	@ (8009434 <HAL_InitTick+0x58>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	4619      	mov	r1, r3
 80093ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80093f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 f967 	bl	80096ce <HAL_SYSTICK_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e00e      	b.n	8009428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b0f      	cmp	r3, #15
 800940e:	d80a      	bhi.n	8009426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009410:	2200      	movs	r2, #0
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009418:	f000 f92f 	bl	800967a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800941c:	4a06      	ldr	r2, [pc, #24]	@ (8009438 <HAL_InitTick+0x5c>)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	e000      	b.n	8009428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000554 	.word	0x20000554
 8009434:	2000055c 	.word	0x2000055c
 8009438:	20000558 	.word	0x20000558

0800943c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009440:	4b06      	ldr	r3, [pc, #24]	@ (800945c <HAL_IncTick+0x20>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	4b06      	ldr	r3, [pc, #24]	@ (8009460 <HAL_IncTick+0x24>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4413      	add	r3, r2
 800944c:	4a04      	ldr	r2, [pc, #16]	@ (8009460 <HAL_IncTick+0x24>)
 800944e:	6013      	str	r3, [r2, #0]
}
 8009450:	bf00      	nop
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	2000055c 	.word	0x2000055c
 8009460:	20000dd8 	.word	0x20000dd8

08009464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  return uwTick;
 8009468:	4b03      	ldr	r3, [pc, #12]	@ (8009478 <HAL_GetTick+0x14>)
 800946a:	681b      	ldr	r3, [r3, #0]
}
 800946c:	4618      	mov	r0, r3
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20000dd8 	.word	0x20000dd8

0800947c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009484:	f7ff ffee 	bl	8009464 <HAL_GetTick>
 8009488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009494:	d005      	beq.n	80094a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009496:	4b0a      	ldr	r3, [pc, #40]	@ (80094c0 <HAL_Delay+0x44>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4413      	add	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80094a2:	bf00      	nop
 80094a4:	f7ff ffde 	bl	8009464 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d8f7      	bhi.n	80094a4 <HAL_Delay+0x28>
  {
  }
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	2000055c 	.word	0x2000055c

080094c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009508 <__NVIC_SetPriorityGrouping+0x44>)
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80094e0:	4013      	ands	r3, r2
 80094e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80094f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094f6:	4a04      	ldr	r2, [pc, #16]	@ (8009508 <__NVIC_SetPriorityGrouping+0x44>)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	60d3      	str	r3, [r2, #12]
}
 80094fc:	bf00      	nop
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	e000ed00 	.word	0xe000ed00

0800950c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009510:	4b04      	ldr	r3, [pc, #16]	@ (8009524 <__NVIC_GetPriorityGrouping+0x18>)
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	0a1b      	lsrs	r3, r3, #8
 8009516:	f003 0307 	and.w	r3, r3, #7
}
 800951a:	4618      	mov	r0, r3
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	e000ed00 	.word	0xe000ed00

08009528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009536:	2b00      	cmp	r3, #0
 8009538:	db0b      	blt.n	8009552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	f003 021f 	and.w	r2, r3, #31
 8009540:	4907      	ldr	r1, [pc, #28]	@ (8009560 <__NVIC_EnableIRQ+0x38>)
 8009542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009546:	095b      	lsrs	r3, r3, #5
 8009548:	2001      	movs	r0, #1
 800954a:	fa00 f202 	lsl.w	r2, r0, r2
 800954e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009552:	bf00      	nop
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	e000e100 	.word	0xe000e100

08009564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	6039      	str	r1, [r7, #0]
 800956e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009574:	2b00      	cmp	r3, #0
 8009576:	db0a      	blt.n	800958e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	b2da      	uxtb	r2, r3
 800957c:	490c      	ldr	r1, [pc, #48]	@ (80095b0 <__NVIC_SetPriority+0x4c>)
 800957e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009582:	0112      	lsls	r2, r2, #4
 8009584:	b2d2      	uxtb	r2, r2
 8009586:	440b      	add	r3, r1
 8009588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800958c:	e00a      	b.n	80095a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	4908      	ldr	r1, [pc, #32]	@ (80095b4 <__NVIC_SetPriority+0x50>)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	3b04      	subs	r3, #4
 800959c:	0112      	lsls	r2, r2, #4
 800959e:	b2d2      	uxtb	r2, r2
 80095a0:	440b      	add	r3, r1
 80095a2:	761a      	strb	r2, [r3, #24]
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	e000e100 	.word	0xe000e100
 80095b4:	e000ed00 	.word	0xe000ed00

080095b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b089      	sub	sp, #36	@ 0x24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	f1c3 0307 	rsb	r3, r3, #7
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	bf28      	it	cs
 80095d6:	2304      	movcs	r3, #4
 80095d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	3304      	adds	r3, #4
 80095de:	2b06      	cmp	r3, #6
 80095e0:	d902      	bls.n	80095e8 <NVIC_EncodePriority+0x30>
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3b03      	subs	r3, #3
 80095e6:	e000      	b.n	80095ea <NVIC_EncodePriority+0x32>
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	fa02 f303 	lsl.w	r3, r2, r3
 80095f6:	43da      	mvns	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	401a      	ands	r2, r3
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009600:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	43d9      	mvns	r1, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009610:	4313      	orrs	r3, r2
         );
}
 8009612:	4618      	mov	r0, r3
 8009614:	3724      	adds	r7, #36	@ 0x24
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
	...

08009620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3b01      	subs	r3, #1
 800962c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009630:	d301      	bcc.n	8009636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009632:	2301      	movs	r3, #1
 8009634:	e00f      	b.n	8009656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009636:	4a0a      	ldr	r2, [pc, #40]	@ (8009660 <SysTick_Config+0x40>)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3b01      	subs	r3, #1
 800963c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800963e:	210f      	movs	r1, #15
 8009640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009644:	f7ff ff8e 	bl	8009564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009648:	4b05      	ldr	r3, [pc, #20]	@ (8009660 <SysTick_Config+0x40>)
 800964a:	2200      	movs	r2, #0
 800964c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800964e:	4b04      	ldr	r3, [pc, #16]	@ (8009660 <SysTick_Config+0x40>)
 8009650:	2207      	movs	r2, #7
 8009652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000e010 	.word	0xe000e010

08009664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff29 	bl	80094c4 <__NVIC_SetPriorityGrouping>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	4603      	mov	r3, r0
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800968c:	f7ff ff3e 	bl	800950c <__NVIC_GetPriorityGrouping>
 8009690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68b9      	ldr	r1, [r7, #8]
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f7ff ff8e 	bl	80095b8 <NVIC_EncodePriority>
 800969c:	4602      	mov	r2, r0
 800969e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff ff5d 	bl	8009564 <__NVIC_SetPriority>
}
 80096aa:	bf00      	nop
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	4603      	mov	r3, r0
 80096ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ff31 	bl	8009528 <__NVIC_EnableIRQ>
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff ffa2 	bl	8009620 <SysTick_Config>
 80096dc:	4603      	mov	r3, r0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80096f4:	f7ff feb6 	bl	8009464 <HAL_GetTick>
 80096f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b02      	cmp	r3, #2
 8009704:	d008      	beq.n	8009718 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2280      	movs	r2, #128	@ 0x80
 800970a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e052      	b.n	80097be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 0216 	bic.w	r2, r2, #22
 8009726:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695a      	ldr	r2, [r3, #20]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009736:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d103      	bne.n	8009748 <HAL_DMA_Abort+0x62>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009744:	2b00      	cmp	r3, #0
 8009746:	d007      	beq.n	8009758 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0208 	bic.w	r2, r2, #8
 8009756:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009768:	e013      	b.n	8009792 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800976a:	f7ff fe7b 	bl	8009464 <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	2b05      	cmp	r3, #5
 8009776:	d90c      	bls.n	8009792 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2203      	movs	r2, #3
 8009782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e015      	b.n	80097be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e4      	bne.n	800976a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097a4:	223f      	movs	r2, #63	@ 0x3f
 80097a6:	409a      	lsls	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d004      	beq.n	80097e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2280      	movs	r2, #128	@ 0x80
 80097de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e00c      	b.n	80097fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2205      	movs	r2, #5
 80097e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009818:	b2db      	uxtb	r3, r3
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
	...

08009828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009828:	b480      	push	{r7}
 800982a:	b089      	sub	sp, #36	@ 0x24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009836:	2300      	movs	r3, #0
 8009838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800983a:	2300      	movs	r3, #0
 800983c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	e159      	b.n	8009af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009844:	2201      	movs	r2, #1
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	fa02 f303 	lsl.w	r3, r2, r3
 800984c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4013      	ands	r3, r2
 8009856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	429a      	cmp	r2, r3
 800985e:	f040 8148 	bne.w	8009af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	2b01      	cmp	r3, #1
 800986c:	d005      	beq.n	800987a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009876:	2b02      	cmp	r3, #2
 8009878:	d130      	bne.n	80098dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	2203      	movs	r2, #3
 8009886:	fa02 f303 	lsl.w	r3, r2, r3
 800988a:	43db      	mvns	r3, r3
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	4013      	ands	r3, r2
 8009890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68da      	ldr	r2, [r3, #12]
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098b0:	2201      	movs	r2, #1
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	43db      	mvns	r3, r3
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	4013      	ands	r3, r2
 80098be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	091b      	lsrs	r3, r3, #4
 80098c6:	f003 0201 	and.w	r2, r3, #1
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	fa02 f303 	lsl.w	r3, r2, r3
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	f003 0303 	and.w	r3, r3, #3
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d017      	beq.n	8009918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	2203      	movs	r2, #3
 80098f4:	fa02 f303 	lsl.w	r3, r2, r3
 80098f8:	43db      	mvns	r3, r3
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	4013      	ands	r3, r2
 80098fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	fa02 f303 	lsl.w	r3, r2, r3
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	4313      	orrs	r3, r2
 8009910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69ba      	ldr	r2, [r7, #24]
 8009916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	2b02      	cmp	r3, #2
 8009922:	d123      	bne.n	800996c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	08da      	lsrs	r2, r3, #3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	3208      	adds	r2, #8
 800992c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	220f      	movs	r2, #15
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	43db      	mvns	r3, r3
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	4013      	ands	r3, r2
 8009946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	fa02 f303 	lsl.w	r3, r2, r3
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	4313      	orrs	r3, r2
 800995c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	08da      	lsrs	r2, r3, #3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3208      	adds	r2, #8
 8009966:	69b9      	ldr	r1, [r7, #24]
 8009968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	2203      	movs	r2, #3
 8009978:	fa02 f303 	lsl.w	r3, r2, r3
 800997c:	43db      	mvns	r3, r3
 800997e:	69ba      	ldr	r2, [r7, #24]
 8009980:	4013      	ands	r3, r2
 8009982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f003 0203 	and.w	r2, r3, #3
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	fa02 f303 	lsl.w	r3, r2, r3
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	4313      	orrs	r3, r2
 8009998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 80a2 	beq.w	8009af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	4b57      	ldr	r3, [pc, #348]	@ (8009b10 <HAL_GPIO_Init+0x2e8>)
 80099b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099b6:	4a56      	ldr	r2, [pc, #344]	@ (8009b10 <HAL_GPIO_Init+0x2e8>)
 80099b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80099bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80099be:	4b54      	ldr	r3, [pc, #336]	@ (8009b10 <HAL_GPIO_Init+0x2e8>)
 80099c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80099ca:	4a52      	ldr	r2, [pc, #328]	@ (8009b14 <HAL_GPIO_Init+0x2ec>)
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	089b      	lsrs	r3, r3, #2
 80099d0:	3302      	adds	r3, #2
 80099d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	220f      	movs	r2, #15
 80099e2:	fa02 f303 	lsl.w	r3, r2, r3
 80099e6:	43db      	mvns	r3, r3
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4013      	ands	r3, r2
 80099ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a49      	ldr	r2, [pc, #292]	@ (8009b18 <HAL_GPIO_Init+0x2f0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d019      	beq.n	8009a2a <HAL_GPIO_Init+0x202>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a48      	ldr	r2, [pc, #288]	@ (8009b1c <HAL_GPIO_Init+0x2f4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d013      	beq.n	8009a26 <HAL_GPIO_Init+0x1fe>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a47      	ldr	r2, [pc, #284]	@ (8009b20 <HAL_GPIO_Init+0x2f8>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00d      	beq.n	8009a22 <HAL_GPIO_Init+0x1fa>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a46      	ldr	r2, [pc, #280]	@ (8009b24 <HAL_GPIO_Init+0x2fc>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d007      	beq.n	8009a1e <HAL_GPIO_Init+0x1f6>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a45      	ldr	r2, [pc, #276]	@ (8009b28 <HAL_GPIO_Init+0x300>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d101      	bne.n	8009a1a <HAL_GPIO_Init+0x1f2>
 8009a16:	2304      	movs	r3, #4
 8009a18:	e008      	b.n	8009a2c <HAL_GPIO_Init+0x204>
 8009a1a:	2307      	movs	r3, #7
 8009a1c:	e006      	b.n	8009a2c <HAL_GPIO_Init+0x204>
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e004      	b.n	8009a2c <HAL_GPIO_Init+0x204>
 8009a22:	2302      	movs	r3, #2
 8009a24:	e002      	b.n	8009a2c <HAL_GPIO_Init+0x204>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <HAL_GPIO_Init+0x204>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	f002 0203 	and.w	r2, r2, #3
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	4093      	lsls	r3, r2
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a3c:	4935      	ldr	r1, [pc, #212]	@ (8009b14 <HAL_GPIO_Init+0x2ec>)
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	089b      	lsrs	r3, r3, #2
 8009a42:	3302      	adds	r3, #2
 8009a44:	69ba      	ldr	r2, [r7, #24]
 8009a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009a4a:	4b38      	ldr	r3, [pc, #224]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	43db      	mvns	r3, r3
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	4013      	ands	r3, r2
 8009a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009a74:	4b2d      	ldr	r3, [pc, #180]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	43db      	mvns	r3, r3
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	4013      	ands	r3, r2
 8009a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009a90:	69ba      	ldr	r2, [r7, #24]
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009a98:	4a24      	ldr	r2, [pc, #144]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009a9e:	4b23      	ldr	r3, [pc, #140]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	43db      	mvns	r3, r3
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	4013      	ands	r3, r2
 8009aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ac8:	4b18      	ldr	r3, [pc, #96]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009ae4:	69ba      	ldr	r2, [r7, #24]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009aec:	4a0f      	ldr	r2, [pc, #60]	@ (8009b2c <HAL_GPIO_Init+0x304>)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	3301      	adds	r3, #1
 8009af6:	61fb      	str	r3, [r7, #28]
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	2b0f      	cmp	r3, #15
 8009afc:	f67f aea2 	bls.w	8009844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	3724      	adds	r7, #36	@ 0x24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40023800 	.word	0x40023800
 8009b14:	40013800 	.word	0x40013800
 8009b18:	40020000 	.word	0x40020000
 8009b1c:	40020400 	.word	0x40020400
 8009b20:	40020800 	.word	0x40020800
 8009b24:	40020c00 	.word	0x40020c00
 8009b28:	40021000 	.word	0x40021000
 8009b2c:	40013c00 	.word	0x40013c00

08009b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	807b      	strh	r3, [r7, #2]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b40:	787b      	ldrb	r3, [r7, #1]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b46:	887a      	ldrh	r2, [r7, #2]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009b4c:	e003      	b.n	8009b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009b4e:	887b      	ldrh	r3, [r7, #2]
 8009b50:	041a      	lsls	r2, r3, #16
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	619a      	str	r2, [r3, #24]
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b085      	sub	sp, #20
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009b74:	887a      	ldrh	r2, [r7, #2]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	041a      	lsls	r2, r3, #16
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	43d9      	mvns	r1, r3
 8009b80:	887b      	ldrh	r3, [r7, #2]
 8009b82:	400b      	ands	r3, r1
 8009b84:	431a      	orrs	r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	619a      	str	r2, [r3, #24]
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009ba2:	4b08      	ldr	r3, [pc, #32]	@ (8009bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ba4:	695a      	ldr	r2, [r3, #20]
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	4013      	ands	r3, r2
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d006      	beq.n	8009bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009bae:	4a05      	ldr	r2, [pc, #20]	@ (8009bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009bb4:	88fb      	ldrh	r3, [r7, #6]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 f806 	bl	8009bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40013c00 	.word	0x40013c00

08009bc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
	...

08009be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e12b      	b.n	8009e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d106      	bne.n	8009c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff f9c0 	bl	8008f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2224      	movs	r2, #36	@ 0x24
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0201 	bic.w	r2, r2, #1
 8009c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c44:	f003 fa4a 	bl	800d0dc <HAL_RCC_GetPCLK1Freq>
 8009c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	4a81      	ldr	r2, [pc, #516]	@ (8009e54 <HAL_I2C_Init+0x274>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d807      	bhi.n	8009c64 <HAL_I2C_Init+0x84>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4a80      	ldr	r2, [pc, #512]	@ (8009e58 <HAL_I2C_Init+0x278>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bf94      	ite	ls
 8009c5c:	2301      	movls	r3, #1
 8009c5e:	2300      	movhi	r3, #0
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	e006      	b.n	8009c72 <HAL_I2C_Init+0x92>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4a7d      	ldr	r2, [pc, #500]	@ (8009e5c <HAL_I2C_Init+0x27c>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	bf94      	ite	ls
 8009c6c:	2301      	movls	r3, #1
 8009c6e:	2300      	movhi	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e0e7      	b.n	8009e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	4a78      	ldr	r2, [pc, #480]	@ (8009e60 <HAL_I2C_Init+0x280>)
 8009c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c82:	0c9b      	lsrs	r3, r3, #18
 8009c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8009e54 <HAL_I2C_Init+0x274>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d802      	bhi.n	8009cb4 <HAL_I2C_Init+0xd4>
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	e009      	b.n	8009cc8 <HAL_I2C_Init+0xe8>
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009cba:	fb02 f303 	mul.w	r3, r2, r3
 8009cbe:	4a69      	ldr	r2, [pc, #420]	@ (8009e64 <HAL_I2C_Init+0x284>)
 8009cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc4:	099b      	lsrs	r3, r3, #6
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	6812      	ldr	r2, [r2, #0]
 8009ccc:	430b      	orrs	r3, r1
 8009cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009cda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	495c      	ldr	r1, [pc, #368]	@ (8009e54 <HAL_I2C_Init+0x274>)
 8009ce4:	428b      	cmp	r3, r1
 8009ce6:	d819      	bhi.n	8009d1c <HAL_I2C_Init+0x13c>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	1e59      	subs	r1, r3, #1
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	005b      	lsls	r3, r3, #1
 8009cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cf6:	1c59      	adds	r1, r3, #1
 8009cf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009cfc:	400b      	ands	r3, r1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <HAL_I2C_Init+0x138>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	1e59      	subs	r1, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d10:	3301      	adds	r3, #1
 8009d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d16:	e051      	b.n	8009dbc <HAL_I2C_Init+0x1dc>
 8009d18:	2304      	movs	r3, #4
 8009d1a:	e04f      	b.n	8009dbc <HAL_I2C_Init+0x1dc>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d111      	bne.n	8009d48 <HAL_I2C_Init+0x168>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	1e58      	subs	r0, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6859      	ldr	r1, [r3, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	440b      	add	r3, r1
 8009d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d36:	3301      	adds	r3, #1
 8009d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bf0c      	ite	eq
 8009d40:	2301      	moveq	r3, #1
 8009d42:	2300      	movne	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	e012      	b.n	8009d6e <HAL_I2C_Init+0x18e>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	1e58      	subs	r0, r3, #1
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6859      	ldr	r1, [r3, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	440b      	add	r3, r1
 8009d56:	0099      	lsls	r1, r3, #2
 8009d58:	440b      	add	r3, r1
 8009d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d5e:	3301      	adds	r3, #1
 8009d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bf0c      	ite	eq
 8009d68:	2301      	moveq	r3, #1
 8009d6a:	2300      	movne	r3, #0
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <HAL_I2C_Init+0x196>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e022      	b.n	8009dbc <HAL_I2C_Init+0x1dc>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10e      	bne.n	8009d9c <HAL_I2C_Init+0x1bc>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1e58      	subs	r0, r3, #1
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6859      	ldr	r1, [r3, #4]
 8009d86:	460b      	mov	r3, r1
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	440b      	add	r3, r1
 8009d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d90:	3301      	adds	r3, #1
 8009d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d9a:	e00f      	b.n	8009dbc <HAL_I2C_Init+0x1dc>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	1e58      	subs	r0, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6859      	ldr	r1, [r3, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	0099      	lsls	r1, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8009db2:	3301      	adds	r3, #1
 8009db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	6809      	ldr	r1, [r1, #0]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	69da      	ldr	r2, [r3, #28]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009dea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6911      	ldr	r1, [r2, #16]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	68d2      	ldr	r2, [r2, #12]
 8009df6:	4311      	orrs	r1, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6812      	ldr	r2, [r2, #0]
 8009dfc:	430b      	orrs	r3, r1
 8009dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695a      	ldr	r2, [r3, #20]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2220      	movs	r2, #32
 8009e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	000186a0 	.word	0x000186a0
 8009e58:	001e847f 	.word	0x001e847f
 8009e5c:	003d08ff 	.word	0x003d08ff
 8009e60:	431bde83 	.word	0x431bde83
 8009e64:	10624dd3 	.word	0x10624dd3

08009e68 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7a:	2b80      	cmp	r3, #128	@ 0x80
 8009e7c:	d103      	bne.n	8009e86 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	611a      	str	r2, [r3, #16]
  }
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
	...

08009e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	607a      	str	r2, [r7, #4]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	817b      	strh	r3, [r7, #10]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ea8:	f7ff fadc 	bl	8009464 <HAL_GetTick>
 8009eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	f040 80e0 	bne.w	800a07c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	2319      	movs	r3, #25
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	4970      	ldr	r1, [pc, #448]	@ (800a088 <HAL_I2C_Master_Transmit+0x1f4>)
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f002 fa14 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e0d3      	b.n	800a07e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_I2C_Master_Transmit+0x50>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e0cc      	b.n	800a07e <HAL_I2C_Master_Transmit+0x1ea>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d007      	beq.n	8009f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f042 0201 	orr.w	r2, r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2221      	movs	r2, #33	@ 0x21
 8009f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2210      	movs	r2, #16
 8009f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	893a      	ldrh	r2, [r7, #8]
 8009f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4a50      	ldr	r2, [pc, #320]	@ (800a08c <HAL_I2C_Master_Transmit+0x1f8>)
 8009f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009f4c:	8979      	ldrh	r1, [r7, #10]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	6a3a      	ldr	r2, [r7, #32]
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f001 ffd6 	bl	800bf04 <I2C_MasterRequestWrite>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e08d      	b.n	800a07e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f62:	2300      	movs	r3, #0
 8009f64:	613b      	str	r3, [r7, #16]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	613b      	str	r3, [r7, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009f78:	e066      	b.n	800a048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f7a:	697a      	ldr	r2, [r7, #20]
 8009f7c:	6a39      	ldr	r1, [r7, #32]
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f002 fad2 	bl	800c528 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	d107      	bne.n	8009fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e06b      	b.n	800a07e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d11b      	bne.n	800a01c <HAL_I2C_Master_Transmit+0x188>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d017      	beq.n	800a01c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	781a      	ldrb	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a006:	b29b      	uxth	r3, r3
 800a008:	3b01      	subs	r3, #1
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a014:	3b01      	subs	r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	6a39      	ldr	r1, [r7, #32]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f002 fac9 	bl	800c5b8 <I2C_WaitOnBTFFlagUntilTimeout>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00d      	beq.n	800a048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a030:	2b04      	cmp	r3, #4
 800a032:	d107      	bne.n	800a044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e01a      	b.n	800a07e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d194      	bne.n	8009f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a05e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	e000      	b.n	800a07e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a07c:	2302      	movs	r3, #2
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3718      	adds	r7, #24
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	00100002 	.word	0x00100002
 800a08c:	ffff0000 	.word	0xffff0000

0800a090 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08c      	sub	sp, #48	@ 0x30
 800a094:	af02      	add	r7, sp, #8
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	607a      	str	r2, [r7, #4]
 800a09a:	461a      	mov	r2, r3
 800a09c:	460b      	mov	r3, r1
 800a09e:	817b      	strh	r3, [r7, #10]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0a4:	f7ff f9de 	bl	8009464 <HAL_GetTick>
 800a0a8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b20      	cmp	r3, #32
 800a0b4:	f040 8217 	bne.w	800a4e6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	2319      	movs	r3, #25
 800a0be:	2201      	movs	r2, #1
 800a0c0:	497c      	ldr	r1, [pc, #496]	@ (800a2b4 <HAL_I2C_Master_Receive+0x224>)
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f002 f916 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e20a      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_I2C_Master_Receive+0x50>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e203      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d007      	beq.n	800a106 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 0201 	orr.w	r2, r2, #1
 800a104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2222      	movs	r2, #34	@ 0x22
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2210      	movs	r2, #16
 800a122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	893a      	ldrh	r2, [r7, #8]
 800a136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	4a5c      	ldr	r2, [pc, #368]	@ (800a2b8 <HAL_I2C_Master_Receive+0x228>)
 800a146:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a148:	8979      	ldrh	r1, [r7, #10]
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f001 ff5a 	bl	800c008 <I2C_MasterRequestRead>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e1c4      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a162:	2b00      	cmp	r3, #0
 800a164:	d113      	bne.n	800a18e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a166:	2300      	movs	r3, #0
 800a168:	623b      	str	r3, [r7, #32]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	623b      	str	r3, [r7, #32]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	623b      	str	r3, [r7, #32]
 800a17a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	e198      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a192:	2b01      	cmp	r3, #1
 800a194:	d11b      	bne.n	800a1ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	61fb      	str	r3, [r7, #28]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	61fb      	str	r3, [r7, #28]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	61fb      	str	r3, [r7, #28]
 800a1ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	e178      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d11b      	bne.n	800a20e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	61bb      	str	r3, [r7, #24]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	e158      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a21c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a21e:	2300      	movs	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	617b      	str	r3, [r7, #20]
 800a232:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a234:	e144      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	f200 80f1 	bhi.w	800a422 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a244:	2b01      	cmp	r3, #1
 800a246:	d123      	bne.n	800a290 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a24a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f002 fa2d 	bl	800c6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	e145      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691a      	ldr	r2, [r3, #16]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a266:	b2d2      	uxtb	r2, r2
 800a268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a278:	3b01      	subs	r3, #1
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a28e:	e117      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a294:	2b02      	cmp	r3, #2
 800a296:	d14e      	bne.n	800a336 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29e:	2200      	movs	r2, #0
 800a2a0:	4906      	ldr	r1, [pc, #24]	@ (800a2bc <HAL_I2C_Master_Receive+0x22c>)
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f002 f826 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d008      	beq.n	800a2c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e11a      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
 800a2b2:	bf00      	nop
 800a2b4:	00100002 	.word	0x00100002
 800a2b8:	ffff0000 	.word	0xffff0000
 800a2bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a334:	e0c4      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	2200      	movs	r2, #0
 800a33e:	496c      	ldr	r1, [pc, #432]	@ (800a4f0 <HAL_I2C_Master_Receive+0x460>)
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f001 ffd7 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0cb      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a35e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691a      	ldr	r2, [r3, #16]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	2200      	movs	r2, #0
 800a39a:	4955      	ldr	r1, [pc, #340]	@ (800a4f0 <HAL_I2C_Master_Receive+0x460>)
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f001 ffa9 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e09d      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	691a      	ldr	r2, [r3, #16]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c6:	b2d2      	uxtb	r2, r2
 800a3c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	1c5a      	adds	r2, r3, #1
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691a      	ldr	r2, [r3, #16]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	b2d2      	uxtb	r2, r2
 800a3fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a416:	b29b      	uxth	r3, r3
 800a418:	3b01      	subs	r3, #1
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a420:	e04e      	b.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a424:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f002 f940 	bl	800c6ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e058      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a440:	b2d2      	uxtb	r2, r2
 800a442:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a448:	1c5a      	adds	r2, r3, #1
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a452:	3b01      	subs	r3, #1
 800a454:	b29a      	uxth	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a45e:	b29b      	uxth	r3, r3
 800a460:	3b01      	subs	r3, #1
 800a462:	b29a      	uxth	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b04      	cmp	r3, #4
 800a474:	d124      	bne.n	800a4c0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d107      	bne.n	800a48e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a48c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a498:	b2d2      	uxtb	r2, r2
 800a49a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f47f aeb6 	bne.w	800a236 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e000      	b.n	800a4e8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a4e6:	2302      	movs	r3, #2
  }
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3728      	adds	r7, #40	@ 0x28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	00010004 	.word	0x00010004

0800a4f4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	@ 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	460b      	mov	r3, r1
 800a502:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a504:	f7fe ffae 	bl	8009464 <HAL_GetTick>
 800a508:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b20      	cmp	r3, #32
 800a518:	f040 8111 	bne.w	800a73e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	2319      	movs	r3, #25
 800a522:	2201      	movs	r2, #1
 800a524:	4988      	ldr	r1, [pc, #544]	@ (800a748 <HAL_I2C_IsDeviceReady+0x254>)
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f001 fee4 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a532:	2302      	movs	r3, #2
 800a534:	e104      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_I2C_IsDeviceReady+0x50>
 800a540:	2302      	movs	r3, #2
 800a542:	e0fd      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b01      	cmp	r3, #1
 800a558:	d007      	beq.n	800a56a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f042 0201 	orr.w	r2, r2, #1
 800a568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2224      	movs	r2, #36	@ 0x24
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4a70      	ldr	r2, [pc, #448]	@ (800a74c <HAL_I2C_IsDeviceReady+0x258>)
 800a58c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a59c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f001 fea2 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5c4:	d103      	bne.n	800a5ce <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5cc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e0b6      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a5d2:	897b      	ldrh	r3, [r7, #10]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a5e0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a5e2:	f7fe ff3f 	bl	8009464 <HAL_GetTick>
 800a5e6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f003 0302 	and.w	r3, r3, #2
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	bf0c      	ite	eq
 800a5f6:	2301      	moveq	r3, #1
 800a5f8:	2300      	movne	r3, #0
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	695b      	ldr	r3, [r3, #20]
 800a604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a60c:	bf0c      	ite	eq
 800a60e:	2301      	moveq	r3, #1
 800a610:	2300      	movne	r3, #0
 800a612:	b2db      	uxtb	r3, r3
 800a614:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a616:	e025      	b.n	800a664 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a618:	f7fe ff24 	bl	8009464 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d302      	bcc.n	800a62e <HAL_I2C_IsDeviceReady+0x13a>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	22a0      	movs	r2, #160	@ 0xa0
 800a632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b02      	cmp	r3, #2
 800a642:	bf0c      	ite	eq
 800a644:	2301      	moveq	r3, #1
 800a646:	2300      	movne	r3, #0
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a65a:	bf0c      	ite	eq
 800a65c:	2301      	moveq	r3, #1
 800a65e:	2300      	movne	r3, #0
 800a660:	b2db      	uxtb	r3, r3
 800a662:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2ba0      	cmp	r3, #160	@ 0xa0
 800a66e:	d005      	beq.n	800a67c <HAL_I2C_IsDeviceReady+0x188>
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <HAL_I2C_IsDeviceReady+0x188>
 800a676:	7dbb      	ldrb	r3, [r7, #22]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0cd      	beq.n	800a618 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2220      	movs	r2, #32
 800a680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d129      	bne.n	800a6e6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6a0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	613b      	str	r3, [r7, #16]
 800a6b6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	2319      	movs	r3, #25
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4921      	ldr	r1, [pc, #132]	@ (800a748 <HAL_I2C_IsDeviceReady+0x254>)
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f001 fe16 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e036      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	e02c      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6f4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a6fe:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	2319      	movs	r3, #25
 800a706:	2201      	movs	r2, #1
 800a708:	490f      	ldr	r1, [pc, #60]	@ (800a748 <HAL_I2C_IsDeviceReady+0x254>)
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f001 fdf2 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e012      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	3301      	adds	r3, #1
 800a71e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	f4ff af32 	bcc.w	800a58e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a73e:	2302      	movs	r3, #2
  }
}
 800a740:	4618      	mov	r0, r3
 800a742:	3720      	adds	r7, #32
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	00100002 	.word	0x00100002
 800a74c:	ffff0000 	.word	0xffff0000

0800a750 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a768:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a770:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a778:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	2b10      	cmp	r3, #16
 800a77e:	d003      	beq.n	800a788 <HAL_I2C_EV_IRQHandler+0x38>
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b40      	cmp	r3, #64	@ 0x40
 800a784:	f040 80b1 	bne.w	800a8ea <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10d      	bne.n	800a7be <HAL_I2C_EV_IRQHandler+0x6e>
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a7a8:	d003      	beq.n	800a7b2 <HAL_I2C_EV_IRQHandler+0x62>
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a7b0:	d101      	bne.n	800a7b6 <HAL_I2C_EV_IRQHandler+0x66>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <HAL_I2C_EV_IRQHandler+0x68>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	f000 8114 	beq.w	800a9e6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f003 0301 	and.w	r3, r3, #1
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <HAL_I2C_EV_IRQHandler+0x90>
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d006      	beq.n	800a7e0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f001 fff6 	bl	800c7c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fd76 	bl	800b2ca <I2C_Master_SB>
 800a7de:	e083      	b.n	800a8e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	f003 0308 	and.w	r3, r3, #8
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d008      	beq.n	800a7fc <HAL_I2C_EV_IRQHandler+0xac>
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fdee 	bl	800b3d6 <I2C_Master_ADD10>
 800a7fa:	e075      	b.n	800a8e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b00      	cmp	r3, #0
 800a804:	d008      	beq.n	800a818 <HAL_I2C_EV_IRQHandler+0xc8>
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d003      	beq.n	800a818 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fe0a 	bl	800b42a <I2C_Master_ADDR>
 800a816:	e067      	b.n	800a8e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d036      	beq.n	800a890 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a82c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a830:	f000 80db 	beq.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00d      	beq.n	800a85a <HAL_I2C_EV_IRQHandler+0x10a>
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a844:	2b00      	cmp	r3, #0
 800a846:	d008      	beq.n	800a85a <HAL_I2C_EV_IRQHandler+0x10a>
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d103      	bne.n	800a85a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f9d6 	bl	800ac04 <I2C_MasterTransmit_TXE>
 800a858:	e046      	b.n	800a8e8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	f003 0304 	and.w	r3, r3, #4
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 80c2 	beq.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 80bc 	beq.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a872:	7bbb      	ldrb	r3, [r7, #14]
 800a874:	2b21      	cmp	r3, #33	@ 0x21
 800a876:	d103      	bne.n	800a880 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fa5f 	bl	800ad3c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a87e:	e0b4      	b.n	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	2b40      	cmp	r3, #64	@ 0x40
 800a884:	f040 80b1 	bne.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 facd 	bl	800ae28 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a88e:	e0ac      	b.n	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a89a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a89e:	f000 80a4 	beq.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00d      	beq.n	800a8c8 <HAL_I2C_EV_IRQHandler+0x178>
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d008      	beq.n	800a8c8 <HAL_I2C_EV_IRQHandler+0x178>
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d103      	bne.n	800a8c8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 fb49 	bl	800af58 <I2C_MasterReceive_RXNE>
 800a8c6:	e00f      	b.n	800a8e8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	f003 0304 	and.w	r3, r3, #4
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 808b 	beq.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8085 	beq.w	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fc01 	bl	800b0e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a8e6:	e080      	b.n	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
 800a8e8:	e07f      	b.n	800a9ea <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d004      	beq.n	800a8fc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	61fb      	str	r3, [r7, #28]
 800a8fa:	e007      	b.n	800a90c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699b      	ldr	r3, [r3, #24]
 800a902:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	f003 0302 	and.w	r3, r3, #2
 800a912:	2b00      	cmp	r3, #0
 800a914:	d011      	beq.n	800a93a <HAL_I2C_EV_IRQHandler+0x1ea>
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00c      	beq.n	800a93a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a930:	69b9      	ldr	r1, [r7, #24]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 ffc8 	bl	800b8c8 <I2C_Slave_ADDR>
 800a938:	e05a      	b.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	f003 0310 	and.w	r3, r3, #16
 800a940:	2b00      	cmp	r3, #0
 800a942:	d008      	beq.n	800a956 <HAL_I2C_EV_IRQHandler+0x206>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 f802 	bl	800b958 <I2C_Slave_STOPF>
 800a954:	e04c      	b.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	2b21      	cmp	r3, #33	@ 0x21
 800a95a:	d002      	beq.n	800a962 <HAL_I2C_EV_IRQHandler+0x212>
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b29      	cmp	r3, #41	@ 0x29
 800a960:	d120      	bne.n	800a9a4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00d      	beq.n	800a988 <HAL_I2C_EV_IRQHandler+0x238>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a972:	2b00      	cmp	r3, #0
 800a974:	d008      	beq.n	800a988 <HAL_I2C_EV_IRQHandler+0x238>
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fee3 	bl	800b74c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a986:	e032      	b.n	800a9ee <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	f003 0304 	and.w	r3, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d02d      	beq.n	800a9ee <HAL_I2C_EV_IRQHandler+0x29e>
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d028      	beq.n	800a9ee <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 ff12 	bl	800b7c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a9a2:	e024      	b.n	800a9ee <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <HAL_I2C_EV_IRQHandler+0x27a>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d008      	beq.n	800a9ca <HAL_I2C_EV_IRQHandler+0x27a>
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	f003 0304 	and.w	r3, r3, #4
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d103      	bne.n	800a9ca <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 ff20 	bl	800b808 <I2C_SlaveReceive_RXNE>
 800a9c8:	e012      	b.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	f003 0304 	and.w	r3, r3, #4
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00d      	beq.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d008      	beq.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 ff50 	bl	800b884 <I2C_SlaveReceive_BTF>
 800a9e4:	e004      	b.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a9e6:	bf00      	nop
 800a9e8:	e002      	b.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a9ea:	bf00      	nop
 800a9ec:	e000      	b.n	800a9f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a9ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a9f0:	3720      	adds	r7, #32
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b08a      	sub	sp, #40	@ 0x28
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00d      	beq.n	800aa40 <HAL_I2C_ER_IRQHandler+0x4a>
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa30:	f043 0301 	orr.w	r3, r3, #1
 800aa34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aa3e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00d      	beq.n	800aa66 <HAL_I2C_ER_IRQHandler+0x70>
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d008      	beq.n	800aa66 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	f043 0302 	orr.w	r3, r3, #2
 800aa5a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800aa64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d03e      	beq.n	800aaee <HAL_I2C_ER_IRQHandler+0xf8>
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d039      	beq.n	800aaee <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800aa7a:	7efb      	ldrb	r3, [r7, #27]
 800aa7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800aa94:	7ebb      	ldrb	r3, [r7, #26]
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d112      	bne.n	800aac0 <HAL_I2C_ER_IRQHandler+0xca>
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10f      	bne.n	800aac0 <HAL_I2C_ER_IRQHandler+0xca>
 800aaa0:	7cfb      	ldrb	r3, [r7, #19]
 800aaa2:	2b21      	cmp	r3, #33	@ 0x21
 800aaa4:	d008      	beq.n	800aab8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800aaa6:	7cfb      	ldrb	r3, [r7, #19]
 800aaa8:	2b29      	cmp	r3, #41	@ 0x29
 800aaaa:	d005      	beq.n	800aab8 <HAL_I2C_ER_IRQHandler+0xc2>
 800aaac:	7cfb      	ldrb	r3, [r7, #19]
 800aaae:	2b28      	cmp	r3, #40	@ 0x28
 800aab0:	d106      	bne.n	800aac0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b21      	cmp	r3, #33	@ 0x21
 800aab6:	d103      	bne.n	800aac0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f001 f87d 	bl	800bbb8 <I2C_Slave_AF>
 800aabe:	e016      	b.n	800aaee <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aac8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	f043 0304 	orr.w	r3, r3, #4
 800aad0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800aad2:	7efb      	ldrb	r3, [r7, #27]
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d002      	beq.n	800aade <HAL_I2C_ER_IRQHandler+0xe8>
 800aad8:	7efb      	ldrb	r3, [r7, #27]
 800aada:	2b40      	cmp	r3, #64	@ 0x40
 800aadc:	d107      	bne.n	800aaee <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00d      	beq.n	800ab14 <HAL_I2C_ER_IRQHandler+0x11e>
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d008      	beq.n	800ab14 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800ab02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab04:	f043 0308 	orr.w	r3, r3, #8
 800ab08:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800ab12:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab20:	431a      	orrs	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 f8ba 	bl	800bca0 <I2C_ITError>
  }
}
 800ab2c:	bf00      	nop
 800ab2e:	3728      	adds	r7, #40	@ 0x28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
 800ab90:	4613      	mov	r3, r2
 800ab92:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac20:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d150      	bne.n	800accc <I2C_MasterTransmit_TXE+0xc8>
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	2b21      	cmp	r3, #33	@ 0x21
 800ac2e:	d14d      	bne.n	800accc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	2b08      	cmp	r3, #8
 800ac34:	d01d      	beq.n	800ac72 <I2C_MasterTransmit_TXE+0x6e>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b20      	cmp	r3, #32
 800ac3a:	d01a      	beq.n	800ac72 <I2C_MasterTransmit_TXE+0x6e>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ac42:	d016      	beq.n	800ac72 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ac52:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2211      	movs	r2, #17
 800ac58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff ff62 	bl	800ab34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ac70:	e060      	b.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ac80:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac90:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b40      	cmp	r3, #64	@ 0x40
 800acaa:	d107      	bne.n	800acbc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7ff ff7d 	bl	800abb4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800acba:	e03b      	b.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff ff35 	bl	800ab34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800acca:	e033      	b.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	2b21      	cmp	r3, #33	@ 0x21
 800acd0:	d005      	beq.n	800acde <I2C_MasterTransmit_TXE+0xda>
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b40      	cmp	r3, #64	@ 0x40
 800acd6:	d12d      	bne.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	2b22      	cmp	r3, #34	@ 0x22
 800acdc:	d12a      	bne.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d108      	bne.n	800acfa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acf6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800acf8:	e01c      	b.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b40      	cmp	r3, #64	@ 0x40
 800ad04:	d103      	bne.n	800ad0e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f88e 	bl	800ae28 <I2C_MemoryTransmit_TXE_BTF>
}
 800ad0c:	e012      	b.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ad32:	e7ff      	b.n	800ad34 <I2C_MasterTransmit_TXE+0x130>
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad48:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b21      	cmp	r3, #33	@ 0x21
 800ad54:	d164      	bne.n	800ae20 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d012      	beq.n	800ad86 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad64:	781a      	ldrb	r2, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad70:	1c5a      	adds	r2, r3, #1
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ad84:	e04c      	b.n	800ae20 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d01d      	beq.n	800adc8 <I2C_MasterTransmit_BTF+0x8c>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b20      	cmp	r3, #32
 800ad90:	d01a      	beq.n	800adc8 <I2C_MasterTransmit_BTF+0x8c>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ad98:	d016      	beq.n	800adc8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ada8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2211      	movs	r2, #17
 800adae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2220      	movs	r2, #32
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff feb7 	bl	800ab34 <HAL_I2C_MasterTxCpltCallback>
}
 800adc6:	e02b      	b.n	800ae20 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800add6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ade6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b40      	cmp	r3, #64	@ 0x40
 800ae00:	d107      	bne.n	800ae12 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fed2 	bl	800abb4 <HAL_I2C_MemTxCpltCallback>
}
 800ae10:	e006      	b.n	800ae20 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff fe8a 	bl	800ab34 <HAL_I2C_MasterTxCpltCallback>
}
 800ae20:	bf00      	nop
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d11d      	bne.n	800ae7c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d10b      	bne.n	800ae60 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae58:	1c9a      	adds	r2, r3, #2
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800ae5e:	e077      	b.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	121b      	asrs	r3, r3, #8
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ae7a:	e069      	b.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d10b      	bne.n	800ae9c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800ae9a:	e059      	b.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d152      	bne.n	800af4a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
 800aea6:	2b22      	cmp	r3, #34	@ 0x22
 800aea8:	d10d      	bne.n	800aec6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aeb8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800aec4:	e044      	b.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d015      	beq.n	800aefc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
 800aed2:	2b21      	cmp	r3, #33	@ 0x21
 800aed4:	d112      	bne.n	800aefc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeda:	781a      	ldrb	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	3b01      	subs	r3, #1
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800aefa:	e029      	b.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af00:	b29b      	uxth	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d124      	bne.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	2b21      	cmp	r3, #33	@ 0x21
 800af0a:	d121      	bne.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800af1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2220      	movs	r2, #32
 800af36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fe36 	bl	800abb4 <HAL_I2C_MemTxCpltCallback>
}
 800af48:	e002      	b.n	800af50 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7fe ff8c 	bl	8009e68 <I2C_Flush_DR>
}
 800af50:	bf00      	nop
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b22      	cmp	r3, #34	@ 0x22
 800af6a:	f040 80b9 	bne.w	800b0e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af72:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af78:	b29b      	uxth	r3, r3
 800af7a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b03      	cmp	r3, #3
 800af80:	d921      	bls.n	800afc6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	691a      	ldr	r2, [r3, #16]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8c:	b2d2      	uxtb	r2, r2
 800af8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afac:	b29b      	uxth	r3, r3
 800afae:	2b03      	cmp	r3, #3
 800afb0:	f040 8096 	bne.w	800b0e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afc2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800afc4:	e08c      	b.n	800b0e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d07f      	beq.n	800b0ce <I2C_MasterReceive_RXNE+0x176>
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d002      	beq.n	800afda <I2C_MasterReceive_RXNE+0x82>
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d179      	bne.n	800b0ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 fb34 	bl	800c648 <I2C_WaitOnSTOPRequestThroughIT>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d14c      	bne.n	800b080 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aff4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b004:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b010:	b2d2      	uxtb	r2, r2
 800b012:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b022:	b29b      	uxth	r3, r3
 800b024:	3b01      	subs	r3, #1
 800b026:	b29a      	uxth	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b40      	cmp	r3, #64	@ 0x40
 800b03e:	d10a      	bne.n	800b056 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff fdba 	bl	800abc8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b054:	e044      	b.n	800b0e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b08      	cmp	r3, #8
 800b062:	d002      	beq.n	800b06a <I2C_MasterReceive_RXNE+0x112>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b20      	cmp	r3, #32
 800b068:	d103      	bne.n	800b072 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b070:	e002      	b.n	800b078 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2212      	movs	r2, #18
 800b076:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff fd65 	bl	800ab48 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b07e:	e02f      	b.n	800b0e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b08e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	691a      	ldr	r2, [r3, #16]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09a:	b2d2      	uxtb	r2, r2
 800b09c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff fd88 	bl	800abdc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b0cc:	e008      	b.n	800b0e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0dc:	605a      	str	r2, [r3, #4]
}
 800b0de:	e7ff      	b.n	800b0e0 <I2C_MasterReceive_RXNE+0x188>
 800b0e0:	bf00      	nop
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	d11b      	bne.n	800b138 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b10e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691a      	ldr	r2, [r3, #16]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	b29a      	uxth	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b136:	e0c4      	b.n	800b2c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d129      	bne.n	800b196 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b150:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b04      	cmp	r3, #4
 800b156:	d00a      	beq.n	800b16e <I2C_MasterReceive_BTF+0x86>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d007      	beq.n	800b16e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b16c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	691a      	ldr	r2, [r3, #16]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	b2d2      	uxtb	r2, r2
 800b17a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	3b01      	subs	r3, #1
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b194:	e095      	b.n	800b2c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d17d      	bne.n	800b29c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d002      	beq.n	800b1ac <I2C_MasterReceive_BTF+0xc4>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b10      	cmp	r3, #16
 800b1aa:	d108      	bne.n	800b1be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	e016      	b.n	800b1ec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d002      	beq.n	800b1ca <I2C_MasterReceive_BTF+0xe2>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d108      	bne.n	800b1dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b1d8:	601a      	str	r2, [r3, #0]
 800b1da:	e007      	b.n	800b1ec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	691a      	ldr	r2, [r3, #16]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f6:	b2d2      	uxtb	r2, r2
 800b1f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b208:	b29b      	uxth	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	691a      	ldr	r2, [r3, #16]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21c:	b2d2      	uxtb	r2, r2
 800b21e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b22e:	b29b      	uxth	r3, r3
 800b230:	3b01      	subs	r3, #1
 800b232:	b29a      	uxth	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685a      	ldr	r2, [r3, #4]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b246:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2220      	movs	r2, #32
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b40      	cmp	r3, #64	@ 0x40
 800b25a:	d10a      	bne.n	800b272 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7ff fcac 	bl	800abc8 <HAL_I2C_MemRxCpltCallback>
}
 800b270:	e027      	b.n	800b2c2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d002      	beq.n	800b286 <I2C_MasterReceive_BTF+0x19e>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b20      	cmp	r3, #32
 800b284:	d103      	bne.n	800b28e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b28c:	e002      	b.n	800b294 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2212      	movs	r2, #18
 800b292:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7ff fc57 	bl	800ab48 <HAL_I2C_MasterRxCpltCallback>
}
 800b29a:	e012      	b.n	800b2c2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691a      	ldr	r2, [r3, #16]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a6:	b2d2      	uxtb	r2, r2
 800b2a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b2c2:	bf00      	nop
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b40      	cmp	r3, #64	@ 0x40
 800b2dc:	d117      	bne.n	800b30e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b2f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b2f8:	e067      	b.n	800b3ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f043 0301 	orr.w	r3, r3, #1
 800b304:	b2da      	uxtb	r2, r3
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	611a      	str	r2, [r3, #16]
}
 800b30c:	e05d      	b.n	800b3ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b316:	d133      	bne.n	800b380 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	2b21      	cmp	r3, #33	@ 0x21
 800b322:	d109      	bne.n	800b338 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	461a      	mov	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b334:	611a      	str	r2, [r3, #16]
 800b336:	e008      	b.n	800b34a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	f043 0301 	orr.w	r3, r3, #1
 800b342:	b2da      	uxtb	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d004      	beq.n	800b35c <I2C_Master_SB+0x92>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d108      	bne.n	800b36e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b360:	2b00      	cmp	r3, #0
 800b362:	d032      	beq.n	800b3ca <I2C_Master_SB+0x100>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d02d      	beq.n	800b3ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685a      	ldr	r2, [r3, #4]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b37c:	605a      	str	r2, [r3, #4]
}
 800b37e:	e024      	b.n	800b3ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10e      	bne.n	800b3a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	11db      	asrs	r3, r3, #7
 800b390:	b2db      	uxtb	r3, r3
 800b392:	f003 0306 	and.w	r3, r3, #6
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f063 030f 	orn	r3, r3, #15
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	611a      	str	r2, [r3, #16]
}
 800b3a4:	e011      	b.n	800b3ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d10d      	bne.n	800b3ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	11db      	asrs	r3, r3, #7
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	f003 0306 	and.w	r3, r3, #6
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	f063 030e 	orn	r3, r3, #14
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	611a      	str	r2, [r3, #16]
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d004      	beq.n	800b3fc <I2C_Master_ADD10+0x26>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d108      	bne.n	800b40e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00c      	beq.n	800b41e <I2C_Master_ADD10+0x48>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d007      	beq.n	800b41e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b41c:	605a      	str	r2, [r3, #4]
  }
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b091      	sub	sp, #68	@ 0x44
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b438:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b440:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b446:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b22      	cmp	r3, #34	@ 0x22
 800b452:	f040 8169 	bne.w	800b728 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10f      	bne.n	800b47e <I2C_Master_ADDR+0x54>
 800b45e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b462:	2b40      	cmp	r3, #64	@ 0x40
 800b464:	d10b      	bne.n	800b47e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b466:	2300      	movs	r3, #0
 800b468:	633b      	str	r3, [r7, #48]	@ 0x30
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	633b      	str	r3, [r7, #48]	@ 0x30
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	633b      	str	r3, [r7, #48]	@ 0x30
 800b47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47c:	e160      	b.n	800b740 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b482:	2b00      	cmp	r3, #0
 800b484:	d11d      	bne.n	800b4c2 <I2C_Master_ADDR+0x98>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b48e:	d118      	bne.n	800b4c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b490:	2300      	movs	r3, #0
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b4b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	651a      	str	r2, [r3, #80]	@ 0x50
 800b4c0:	e13e      	b.n	800b740 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d113      	bne.n	800b4f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	695b      	ldr	r3, [r3, #20]
 800b4d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	e115      	b.n	800b720 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	f040 808a 	bne.w	800b614 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b506:	d137      	bne.n	800b578 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b516:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b526:	d113      	bne.n	800b550 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b536:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b538:	2300      	movs	r3, #0
 800b53a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	627b      	str	r3, [r7, #36]	@ 0x24
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	e0e7      	b.n	800b720 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b550:	2300      	movs	r3, #0
 800b552:	623b      	str	r3, [r7, #32]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	623b      	str	r3, [r7, #32]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	623b      	str	r3, [r7, #32]
 800b564:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	e0d3      	b.n	800b720 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57a:	2b08      	cmp	r3, #8
 800b57c:	d02e      	beq.n	800b5dc <I2C_Master_ADDR+0x1b2>
 800b57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b580:	2b20      	cmp	r3, #32
 800b582:	d02b      	beq.n	800b5dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b586:	2b12      	cmp	r3, #18
 800b588:	d102      	bne.n	800b590 <I2C_Master_ADDR+0x166>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d125      	bne.n	800b5dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b592:	2b04      	cmp	r3, #4
 800b594:	d00e      	beq.n	800b5b4 <I2C_Master_ADDR+0x18a>
 800b596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d00b      	beq.n	800b5b4 <I2C_Master_ADDR+0x18a>
 800b59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59e:	2b10      	cmp	r3, #16
 800b5a0:	d008      	beq.n	800b5b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	e007      	b.n	800b5c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b5c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	61fb      	str	r3, [r7, #28]
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	e0a1      	b.n	800b720 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	61bb      	str	r3, [r7, #24]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	61bb      	str	r3, [r7, #24]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	61bb      	str	r3, [r7, #24]
 800b600:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e085      	b.n	800b720 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b618:	b29b      	uxth	r3, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d14d      	bne.n	800b6ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	2b04      	cmp	r3, #4
 800b622:	d016      	beq.n	800b652 <I2C_Master_ADDR+0x228>
 800b624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b626:	2b02      	cmp	r3, #2
 800b628:	d013      	beq.n	800b652 <I2C_Master_ADDR+0x228>
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	2b10      	cmp	r3, #16
 800b62e:	d010      	beq.n	800b652 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b63e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681a      	ldr	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b64e:	601a      	str	r2, [r3, #0]
 800b650:	e007      	b.n	800b662 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b660:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b66c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b670:	d117      	bne.n	800b6a2 <I2C_Master_ADDR+0x278>
 800b672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b674:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b678:	d00b      	beq.n	800b692 <I2C_Master_ADDR+0x268>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d008      	beq.n	800b692 <I2C_Master_ADDR+0x268>
 800b680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b682:	2b08      	cmp	r3, #8
 800b684:	d005      	beq.n	800b692 <I2C_Master_ADDR+0x268>
 800b686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b688:	2b10      	cmp	r3, #16
 800b68a:	d002      	beq.n	800b692 <I2C_Master_ADDR+0x268>
 800b68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d107      	bne.n	800b6a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b6a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	e032      	b.n	800b720 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b6c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6d8:	d117      	bne.n	800b70a <I2C_Master_ADDR+0x2e0>
 800b6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b6e0:	d00b      	beq.n	800b6fa <I2C_Master_ADDR+0x2d0>
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d008      	beq.n	800b6fa <I2C_Master_ADDR+0x2d0>
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ea:	2b08      	cmp	r3, #8
 800b6ec:	d005      	beq.n	800b6fa <I2C_Master_ADDR+0x2d0>
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f0:	2b10      	cmp	r3, #16
 800b6f2:	d002      	beq.n	800b6fa <I2C_Master_ADDR+0x2d0>
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d107      	bne.n	800b70a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b708:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b70a:	2300      	movs	r3, #0
 800b70c:	613b      	str	r3, [r7, #16]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b726:	e00b      	b.n	800b740 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b728:	2300      	movs	r3, #0
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	60fb      	str	r3, [r7, #12]
 800b73c:	68fb      	ldr	r3, [r7, #12]
}
 800b73e:	e7ff      	b.n	800b740 <I2C_Master_ADDR+0x316>
 800b740:	bf00      	nop
 800b742:	3744      	adds	r7, #68	@ 0x44
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b75a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b760:	b29b      	uxth	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d02b      	beq.n	800b7be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b76a:	781a      	ldrb	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b780:	b29b      	uxth	r3, r3
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b78e:	b29b      	uxth	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d114      	bne.n	800b7be <I2C_SlaveTransmit_TXE+0x72>
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	2b29      	cmp	r3, #41	@ 0x29
 800b798:	d111      	bne.n	800b7be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2221      	movs	r2, #33	@ 0x21
 800b7ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2228      	movs	r2, #40	@ 0x28
 800b7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff f9cf 	bl	800ab5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d011      	beq.n	800b7fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7dc:	781a      	ldrb	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d02c      	beq.n	800b87c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	691a      	ldr	r2, [r3, #16]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b83e:	b29b      	uxth	r3, r3
 800b840:	3b01      	subs	r3, #1
 800b842:	b29a      	uxth	r2, r3
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d114      	bne.n	800b87c <I2C_SlaveReceive_RXNE+0x74>
 800b852:	7bfb      	ldrb	r3, [r7, #15]
 800b854:	2b2a      	cmp	r3, #42	@ 0x2a
 800b856:	d111      	bne.n	800b87c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b866:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2222      	movs	r2, #34	@ 0x22
 800b86c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2228      	movs	r2, #40	@ 0x28
 800b872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff f97a 	bl	800ab70 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b87c:	bf00      	nop
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d012      	beq.n	800b8bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	691a      	ldr	r2, [r3, #16]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a0:	b2d2      	uxtb	r2, r2
 800b8a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b8e2:	2b28      	cmp	r3, #40	@ 0x28
 800b8e4:	d125      	bne.n	800b932 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d101      	bne.n	800b904 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b900:	2301      	movs	r3, #1
 800b902:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	81bb      	strh	r3, [r7, #12]
 800b914:	e002      	b.n	800b91c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b924:	89ba      	ldrh	r2, [r7, #12]
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff f92a 	bl	800ab84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b930:	e00e      	b.n	800b950 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b932:	2300      	movs	r3, #0
 800b934:	60bb      	str	r3, [r7, #8]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	60bb      	str	r3, [r7, #8]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	60bb      	str	r3, [r7, #8]
 800b946:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b950:	bf00      	nop
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b966:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b976:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b978:	2300      	movs	r3, #0
 800b97a:	60bb      	str	r3, [r7, #8]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	60bb      	str	r3, [r7, #8]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f042 0201 	orr.w	r2, r2, #1
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9b4:	d172      	bne.n	800ba9c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b22      	cmp	r3, #34	@ 0x22
 800b9ba:	d002      	beq.n	800b9c2 <I2C_Slave_STOPF+0x6a>
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9c0:	d135      	bne.n	800ba2e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d005      	beq.n	800b9e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9de:	f043 0204 	orr.w	r2, r3, #4
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b9f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fd ff05 	bl	800980a <HAL_DMA_GetState>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d049      	beq.n	800ba9a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba0a:	4a69      	ldr	r2, [pc, #420]	@ (800bbb0 <I2C_Slave_STOPF+0x258>)
 800ba0c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fd fed7 	bl	80097c6 <HAL_DMA_Abort_IT>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d03d      	beq.n	800ba9a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ba2c:	e035      	b.n	800ba9a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d005      	beq.n	800ba52 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba4a:	f043 0204 	orr.w	r2, r3, #4
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ba60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fd fecf 	bl	800980a <HAL_DMA_GetState>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d014      	beq.n	800ba9c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba76:	4a4e      	ldr	r2, [pc, #312]	@ (800bbb0 <I2C_Slave_STOPF+0x258>)
 800ba78:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fd fea1 	bl	80097c6 <HAL_DMA_Abort_IT>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ba94:	4610      	mov	r0, r2
 800ba96:	4798      	blx	r3
 800ba98:	e000      	b.n	800ba9c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ba9a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d03e      	beq.n	800bb24 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	f003 0304 	and.w	r3, r3, #4
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d112      	bne.n	800bada <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691a      	ldr	r2, [r3, #16]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800babe:	b2d2      	uxtb	r2, r2
 800bac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac6:	1c5a      	adds	r2, r3, #1
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3b01      	subs	r3, #1
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bae4:	2b40      	cmp	r3, #64	@ 0x40
 800bae6:	d112      	bne.n	800bb0e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	691a      	ldr	r2, [r3, #16]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf2:	b2d2      	uxtb	r2, r2
 800baf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	3b01      	subs	r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d005      	beq.n	800bb24 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1c:	f043 0204 	orr.w	r2, r3, #4
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 f8b7 	bl	800bca0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800bb32:	e039      	b.n	800bba8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb38:	d109      	bne.n	800bb4e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2228      	movs	r2, #40	@ 0x28
 800bb44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff f811 	bl	800ab70 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b28      	cmp	r3, #40	@ 0x28
 800bb58:	d111      	bne.n	800bb7e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a15      	ldr	r2, [pc, #84]	@ (800bbb4 <I2C_Slave_STOPF+0x25c>)
 800bb5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff f812 	bl	800aba0 <HAL_I2C_ListenCpltCallback>
}
 800bb7c:	e014      	b.n	800bba8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb82:	2b22      	cmp	r3, #34	@ 0x22
 800bb84:	d002      	beq.n	800bb8c <I2C_Slave_STOPF+0x234>
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b22      	cmp	r3, #34	@ 0x22
 800bb8a:	d10d      	bne.n	800bba8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2220      	movs	r2, #32
 800bb96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7fe ffe4 	bl	800ab70 <HAL_I2C_SlaveRxCpltCallback>
}
 800bba8:	bf00      	nop
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	0800c1a5 	.word	0x0800c1a5
 800bbb4:	ffff0000 	.word	0xffff0000

0800bbb8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbc6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbcc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b08      	cmp	r3, #8
 800bbd2:	d002      	beq.n	800bbda <I2C_Slave_AF+0x22>
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2b20      	cmp	r3, #32
 800bbd8:	d129      	bne.n	800bc2e <I2C_Slave_AF+0x76>
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b28      	cmp	r3, #40	@ 0x28
 800bbde:	d126      	bne.n	800bc2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a2e      	ldr	r2, [pc, #184]	@ (800bc9c <I2C_Slave_AF+0xe4>)
 800bbe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bbf4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bbfe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2220      	movs	r2, #32
 800bc1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7fe ffba 	bl	800aba0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800bc2c:	e031      	b.n	800bc92 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	2b21      	cmp	r3, #33	@ 0x21
 800bc32:	d129      	bne.n	800bc88 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a19      	ldr	r2, [pc, #100]	@ (800bc9c <I2C_Slave_AF+0xe4>)
 800bc38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2221      	movs	r2, #33	@ 0x21
 800bc3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2220      	movs	r2, #32
 800bc44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bc5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bc68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc78:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7fe f8f4 	bl	8009e68 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7fe ff6b 	bl	800ab5c <HAL_I2C_SlaveTxCpltCallback>
}
 800bc86:	e004      	b.n	800bc92 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bc90:	615a      	str	r2, [r3, #20]
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	ffff0000 	.word	0xffff0000

0800bca0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bcb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	2b10      	cmp	r3, #16
 800bcbc:	d002      	beq.n	800bcc4 <I2C_ITError+0x24>
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	2b40      	cmp	r3, #64	@ 0x40
 800bcc2:	d10a      	bne.n	800bcda <I2C_ITError+0x3a>
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
 800bcc6:	2b22      	cmp	r3, #34	@ 0x22
 800bcc8:	d107      	bne.n	800bcda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bcd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bce0:	2b28      	cmp	r3, #40	@ 0x28
 800bce2:	d107      	bne.n	800bcf4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2228      	movs	r2, #40	@ 0x28
 800bcee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bcf2:	e015      	b.n	800bd20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd02:	d00a      	beq.n	800bd1a <I2C_ITError+0x7a>
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	2b60      	cmp	r3, #96	@ 0x60
 800bd08:	d007      	beq.n	800bd1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd2e:	d162      	bne.n	800bdf6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d020      	beq.n	800bd90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd52:	4a6a      	ldr	r2, [pc, #424]	@ (800befc <I2C_ITError+0x25c>)
 800bd54:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fd fd33 	bl	80097c6 <HAL_DMA_Abort_IT>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 8089 	beq.w	800be7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f022 0201 	bic.w	r2, r2, #1
 800bd76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	4798      	blx	r3
 800bd8e:	e074      	b.n	800be7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd94:	4a59      	ldr	r2, [pc, #356]	@ (800befc <I2C_ITError+0x25c>)
 800bd96:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fd fd12 	bl	80097c6 <HAL_DMA_Abort_IT>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d068      	beq.n	800be7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdb2:	2b40      	cmp	r3, #64	@ 0x40
 800bdb4:	d10b      	bne.n	800bdce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	691a      	ldr	r2, [r3, #16]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0201 	bic.w	r2, r2, #1
 800bddc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2220      	movs	r2, #32
 800bde2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
 800bdf4:	e041      	b.n	800be7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b60      	cmp	r3, #96	@ 0x60
 800be00:	d125      	bne.n	800be4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2220      	movs	r2, #32
 800be06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be1a:	2b40      	cmp	r3, #64	@ 0x40
 800be1c:	d10b      	bne.n	800be36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	691a      	ldr	r2, [r3, #16]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be28:	b2d2      	uxtb	r2, r2
 800be2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0201 	bic.w	r2, r2, #1
 800be44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7fe fed2 	bl	800abf0 <HAL_I2C_AbortCpltCallback>
 800be4c:	e015      	b.n	800be7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be58:	2b40      	cmp	r3, #64	@ 0x40
 800be5a:	d10b      	bne.n	800be74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	691a      	ldr	r2, [r3, #16]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be66:	b2d2      	uxtb	r2, r2
 800be68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7fe feb1 	bl	800abdc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10e      	bne.n	800bea8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800be90:	2b00      	cmp	r3, #0
 800be92:	d109      	bne.n	800bea8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d007      	beq.n	800beb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685a      	ldr	r2, [r3, #4]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800beb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bebe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	2b04      	cmp	r3, #4
 800beca:	d113      	bne.n	800bef4 <I2C_ITError+0x254>
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	2b28      	cmp	r3, #40	@ 0x28
 800bed0:	d110      	bne.n	800bef4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a0a      	ldr	r2, [pc, #40]	@ (800bf00 <I2C_ITError+0x260>)
 800bed6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2220      	movs	r2, #32
 800bee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7fe fe56 	bl	800aba0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bef4:	bf00      	nop
 800bef6:	3710      	adds	r7, #16
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	0800c1a5 	.word	0x0800c1a5
 800bf00:	ffff0000 	.word	0xffff0000

0800bf04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af02      	add	r7, sp, #8
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	607a      	str	r2, [r7, #4]
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	460b      	mov	r3, r1
 800bf12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b08      	cmp	r3, #8
 800bf1e:	d006      	beq.n	800bf2e <I2C_MasterRequestWrite+0x2a>
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d003      	beq.n	800bf2e <I2C_MasterRequestWrite+0x2a>
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bf2c:	d108      	bne.n	800bf40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	e00b      	b.n	800bf58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf44:	2b12      	cmp	r3, #18
 800bf46:	d107      	bne.n	800bf58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f000 f9c5 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00d      	beq.n	800bf8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf7e:	d103      	bne.n	800bf88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e035      	b.n	800bff8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf94:	d108      	bne.n	800bfa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf96:	897b      	ldrh	r3, [r7, #10]
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bfa4:	611a      	str	r2, [r3, #16]
 800bfa6:	e01b      	b.n	800bfe0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bfa8:	897b      	ldrh	r3, [r7, #10]
 800bfaa:	11db      	asrs	r3, r3, #7
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	f003 0306 	and.w	r3, r3, #6
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f063 030f 	orn	r3, r3, #15
 800bfb8:	b2da      	uxtb	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	490e      	ldr	r1, [pc, #56]	@ (800c000 <I2C_MasterRequestWrite+0xfc>)
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f000 fa0e 	bl	800c3e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e010      	b.n	800bff8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bfd6:	897b      	ldrh	r3, [r7, #10]
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	4907      	ldr	r1, [pc, #28]	@ (800c004 <I2C_MasterRequestWrite+0x100>)
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 f9fe 	bl	800c3e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	e000      	b.n	800bff8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3718      	adds	r7, #24
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	00010008 	.word	0x00010008
 800c004:	00010002 	.word	0x00010002

0800c008 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b088      	sub	sp, #32
 800c00c:	af02      	add	r7, sp, #8
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	607a      	str	r2, [r7, #4]
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	460b      	mov	r3, r1
 800c016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c02c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2b08      	cmp	r3, #8
 800c032:	d006      	beq.n	800c042 <I2C_MasterRequestRead+0x3a>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d003      	beq.n	800c042 <I2C_MasterRequestRead+0x3a>
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c040:	d108      	bne.n	800c054 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	e00b      	b.n	800c06c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c058:	2b11      	cmp	r3, #17
 800c05a:	d107      	bne.n	800c06c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c06a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 f93b 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00d      	beq.n	800c0a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c08e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c092:	d103      	bne.n	800c09c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c09a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e079      	b.n	800c194 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0a8:	d108      	bne.n	800c0bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c0aa:	897b      	ldrh	r3, [r7, #10]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f043 0301 	orr.w	r3, r3, #1
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	611a      	str	r2, [r3, #16]
 800c0ba:	e05f      	b.n	800c17c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c0bc:	897b      	ldrh	r3, [r7, #10]
 800c0be:	11db      	asrs	r3, r3, #7
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	f003 0306 	and.w	r3, r3, #6
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	f063 030f 	orn	r3, r3, #15
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	4930      	ldr	r1, [pc, #192]	@ (800c19c <I2C_MasterRequestRead+0x194>)
 800c0da:	68f8      	ldr	r0, [r7, #12]
 800c0dc:	f000 f984 	bl	800c3e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d001      	beq.n	800c0ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e054      	b.n	800c194 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c0ea:	897b      	ldrh	r3, [r7, #10]
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	4929      	ldr	r1, [pc, #164]	@ (800c1a0 <I2C_MasterRequestRead+0x198>)
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 f974 	bl	800c3e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e044      	b.n	800c194 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c10a:	2300      	movs	r3, #0
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	613b      	str	r3, [r7, #16]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	613b      	str	r3, [r7, #16]
 800c11e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c12e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f8d9 	bl	800c2f4 <I2C_WaitOnFlagUntilTimeout>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00d      	beq.n	800c164 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c156:	d103      	bne.n	800c160 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c15e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800c160:	2303      	movs	r3, #3
 800c162:	e017      	b.n	800c194 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c164:	897b      	ldrh	r3, [r7, #10]
 800c166:	11db      	asrs	r3, r3, #7
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	f003 0306 	and.w	r3, r3, #6
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	f063 030e 	orn	r3, r3, #14
 800c174:	b2da      	uxtb	r2, r3
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	4907      	ldr	r1, [pc, #28]	@ (800c1a0 <I2C_MasterRequestRead+0x198>)
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f000 f930 	bl	800c3e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3718      	adds	r7, #24
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	00010008 	.word	0x00010008
 800c1a0:	00010002 	.word	0x00010002

0800c1a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c1be:	4b4b      	ldr	r3, [pc, #300]	@ (800c2ec <I2C_DMAAbort+0x148>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	08db      	lsrs	r3, r3, #3
 800c1c4:	4a4a      	ldr	r2, [pc, #296]	@ (800c2f0 <I2C_DMAAbort+0x14c>)
 800c1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ca:	0a1a      	lsrs	r2, r3, #8
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	00da      	lsls	r2, r3, #3
 800c1d4:	1ad3      	subs	r3, r2, r3
 800c1d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e2:	f043 0220 	orr.w	r2, r3, #32
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c1ea:	e00a      	b.n	800c202 <I2C_DMAAbort+0x5e>
    }
    count--;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c1fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c200:	d0ea      	beq.n	800c1d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c20e:	2200      	movs	r2, #0
 800c210:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c21e:	2200      	movs	r2, #0
 800c220:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c230:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2200      	movs	r2, #0
 800c236:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c244:	2200      	movs	r2, #0
 800c246:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c254:	2200      	movs	r2, #0
 800c256:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 0201 	bic.w	r2, r2, #1
 800c266:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b60      	cmp	r3, #96	@ 0x60
 800c272:	d10e      	bne.n	800c292 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2220      	movs	r2, #32
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	2200      	movs	r2, #0
 800c288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c28a:	6978      	ldr	r0, [r7, #20]
 800c28c:	f7fe fcb0 	bl	800abf0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c290:	e027      	b.n	800c2e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c292:	7cfb      	ldrb	r3, [r7, #19]
 800c294:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c298:	2b28      	cmp	r3, #40	@ 0x28
 800c29a:	d117      	bne.n	800c2cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f042 0201 	orr.w	r2, r2, #1
 800c2aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c2ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2228      	movs	r2, #40	@ 0x28
 800c2c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c2ca:	e007      	b.n	800c2dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	2220      	movs	r2, #32
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c2dc:	6978      	ldr	r0, [r7, #20]
 800c2de:	f7fe fc7d 	bl	800abdc <HAL_I2C_ErrorCallback>
}
 800c2e2:	bf00      	nop
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000554 	.word	0x20000554
 800c2f0:	14f8b589 	.word	0x14f8b589

0800c2f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	603b      	str	r3, [r7, #0]
 800c300:	4613      	mov	r3, r2
 800c302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c304:	e048      	b.n	800c398 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c30c:	d044      	beq.n	800c398 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c30e:	f7fd f8a9 	bl	8009464 <HAL_GetTick>
 800c312:	4602      	mov	r2, r0
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d302      	bcc.n	800c324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d139      	bne.n	800c398 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	0c1b      	lsrs	r3, r3, #16
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d10d      	bne.n	800c34a <I2C_WaitOnFlagUntilTimeout+0x56>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	43da      	mvns	r2, r3
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	4013      	ands	r3, r2
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bf0c      	ite	eq
 800c340:	2301      	moveq	r3, #1
 800c342:	2300      	movne	r3, #0
 800c344:	b2db      	uxtb	r3, r3
 800c346:	461a      	mov	r2, r3
 800c348:	e00c      	b.n	800c364 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	43da      	mvns	r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4013      	ands	r3, r2
 800c356:	b29b      	uxth	r3, r3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	bf0c      	ite	eq
 800c35c:	2301      	moveq	r3, #1
 800c35e:	2300      	movne	r3, #0
 800c360:	b2db      	uxtb	r3, r3
 800c362:	461a      	mov	r2, r3
 800c364:	79fb      	ldrb	r3, [r7, #7]
 800c366:	429a      	cmp	r2, r3
 800c368:	d116      	bne.n	800c398 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2220      	movs	r2, #32
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c384:	f043 0220 	orr.w	r2, r3, #32
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e023      	b.n	800c3e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	0c1b      	lsrs	r3, r3, #16
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d10d      	bne.n	800c3be <I2C_WaitOnFlagUntilTimeout+0xca>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	43da      	mvns	r2, r3
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	bf0c      	ite	eq
 800c3b4:	2301      	moveq	r3, #1
 800c3b6:	2300      	movne	r3, #0
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	e00c      	b.n	800c3d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	43da      	mvns	r2, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bf0c      	ite	eq
 800c3d0:	2301      	moveq	r3, #1
 800c3d2:	2300      	movne	r3, #0
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	79fb      	ldrb	r3, [r7, #7]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d093      	beq.n	800c306 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c3f6:	e071      	b.n	800c4dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c406:	d123      	bne.n	800c450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c416:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2220      	movs	r2, #32
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43c:	f043 0204 	orr.w	r2, r3, #4
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e067      	b.n	800c520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c456:	d041      	beq.n	800c4dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c458:	f7fd f804 	bl	8009464 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	429a      	cmp	r2, r3
 800c466:	d302      	bcc.n	800c46e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d136      	bne.n	800c4dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	0c1b      	lsrs	r3, r3, #16
 800c472:	b2db      	uxtb	r3, r3
 800c474:	2b01      	cmp	r3, #1
 800c476:	d10c      	bne.n	800c492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	43da      	mvns	r2, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	4013      	ands	r3, r2
 800c484:	b29b      	uxth	r3, r3
 800c486:	2b00      	cmp	r3, #0
 800c488:	bf14      	ite	ne
 800c48a:	2301      	movne	r3, #1
 800c48c:	2300      	moveq	r3, #0
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	e00b      	b.n	800c4aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	43da      	mvns	r2, r3
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4013      	ands	r3, r2
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bf14      	ite	ne
 800c4a4:	2301      	movne	r3, #1
 800c4a6:	2300      	moveq	r3, #0
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d016      	beq.n	800c4dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2220      	movs	r2, #32
 800c4b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4c8:	f043 0220 	orr.w	r2, r3, #32
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e021      	b.n	800c520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	0c1b      	lsrs	r3, r3, #16
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d10c      	bne.n	800c500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	43da      	mvns	r2, r3
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bf14      	ite	ne
 800c4f8:	2301      	movne	r3, #1
 800c4fa:	2300      	moveq	r3, #0
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	e00b      	b.n	800c518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	43da      	mvns	r2, r3
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4013      	ands	r3, r2
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bf14      	ite	ne
 800c512:	2301      	movne	r3, #1
 800c514:	2300      	moveq	r3, #0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f47f af6d 	bne.w	800c3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c534:	e034      	b.n	800c5a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 f915 	bl	800c766 <I2C_IsAcknowledgeFailed>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e034      	b.n	800c5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c54c:	d028      	beq.n	800c5a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c54e:	f7fc ff89 	bl	8009464 <HAL_GetTick>
 800c552:	4602      	mov	r2, r0
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d302      	bcc.n	800c564 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d11d      	bne.n	800c5a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c56e:	2b80      	cmp	r3, #128	@ 0x80
 800c570:	d016      	beq.n	800c5a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c58c:	f043 0220 	orr.w	r2, r3, #32
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e007      	b.n	800c5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5aa:	2b80      	cmp	r3, #128	@ 0x80
 800c5ac:	d1c3      	bne.n	800c536 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c5c4:	e034      	b.n	800c630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 f8cd 	bl	800c766 <I2C_IsAcknowledgeFailed>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d001      	beq.n	800c5d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e034      	b.n	800c640 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5dc:	d028      	beq.n	800c630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5de:	f7fc ff41 	bl	8009464 <HAL_GetTick>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d302      	bcc.n	800c5f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d11d      	bne.n	800c630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d016      	beq.n	800c630 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2200      	movs	r2, #0
 800c606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2220      	movs	r2, #32
 800c60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c61c:	f043 0220 	orr.w	r2, r3, #32
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e007      	b.n	800c640 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	f003 0304 	and.w	r3, r3, #4
 800c63a:	2b04      	cmp	r3, #4
 800c63c:	d1c3      	bne.n	800c5c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c654:	4b13      	ldr	r3, [pc, #76]	@ (800c6a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	08db      	lsrs	r3, r3, #3
 800c65a:	4a13      	ldr	r2, [pc, #76]	@ (800c6a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c65c:	fba2 2303 	umull	r2, r3, r2, r3
 800c660:	0a1a      	lsrs	r2, r3, #8
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d107      	bne.n	800c686 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c67a:	f043 0220 	orr.w	r2, r3, #32
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e008      	b.n	800c698 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c694:	d0e9      	beq.n	800c66a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	20000554 	.word	0x20000554
 800c6a8:	14f8b589 	.word	0x14f8b589

0800c6ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c6b8:	e049      	b.n	800c74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	695b      	ldr	r3, [r3, #20]
 800c6c0:	f003 0310 	and.w	r3, r3, #16
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d119      	bne.n	800c6fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f06f 0210 	mvn.w	r2, #16
 800c6d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2220      	movs	r2, #32
 800c6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e030      	b.n	800c75e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6fc:	f7fc feb2 	bl	8009464 <HAL_GetTick>
 800c700:	4602      	mov	r2, r0
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d302      	bcc.n	800c712 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d11d      	bne.n	800c74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c71c:	2b40      	cmp	r3, #64	@ 0x40
 800c71e:	d016      	beq.n	800c74e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2220      	movs	r2, #32
 800c72a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c73a:	f043 0220 	orr.w	r2, r3, #32
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c74a:	2301      	movs	r3, #1
 800c74c:	e007      	b.n	800c75e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c758:	2b40      	cmp	r3, #64	@ 0x40
 800c75a:	d1ae      	bne.n	800c6ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c77c:	d11b      	bne.n	800c7b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c786:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2220      	movs	r2, #32
 800c792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a2:	f043 0204 	orr.w	r2, r3, #4
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c7d4:	d103      	bne.n	800c7de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c7dc:	e007      	b.n	800c7ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c7e6:	d102      	bne.n	800c7ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2208      	movs	r2, #8
 800c7ec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c7ee:	bf00      	nop
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
	...

0800c7fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b086      	sub	sp, #24
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	e267      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	2b00      	cmp	r3, #0
 800c818:	d075      	beq.n	800c906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c81a:	4b88      	ldr	r3, [pc, #544]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f003 030c 	and.w	r3, r3, #12
 800c822:	2b04      	cmp	r3, #4
 800c824:	d00c      	beq.n	800c840 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c826:	4b85      	ldr	r3, [pc, #532]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c82e:	2b08      	cmp	r3, #8
 800c830:	d112      	bne.n	800c858 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c832:	4b82      	ldr	r3, [pc, #520]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c83a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c83e:	d10b      	bne.n	800c858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c840:	4b7e      	ldr	r3, [pc, #504]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05b      	beq.n	800c904 <HAL_RCC_OscConfig+0x108>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d157      	bne.n	800c904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e242      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c860:	d106      	bne.n	800c870 <HAL_RCC_OscConfig+0x74>
 800c862:	4b76      	ldr	r3, [pc, #472]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a75      	ldr	r2, [pc, #468]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	e01d      	b.n	800c8ac <HAL_RCC_OscConfig+0xb0>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c878:	d10c      	bne.n	800c894 <HAL_RCC_OscConfig+0x98>
 800c87a:	4b70      	ldr	r3, [pc, #448]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a6f      	ldr	r2, [pc, #444]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	4b6d      	ldr	r3, [pc, #436]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a6c      	ldr	r2, [pc, #432]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c88c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	e00b      	b.n	800c8ac <HAL_RCC_OscConfig+0xb0>
 800c894:	4b69      	ldr	r3, [pc, #420]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a68      	ldr	r2, [pc, #416]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c89a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c89e:	6013      	str	r3, [r2, #0]
 800c8a0:	4b66      	ldr	r3, [pc, #408]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a65      	ldr	r2, [pc, #404]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c8a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d013      	beq.n	800c8dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8b4:	f7fc fdd6 	bl	8009464 <HAL_GetTick>
 800c8b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8ba:	e008      	b.n	800c8ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8bc:	f7fc fdd2 	bl	8009464 <HAL_GetTick>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	2b64      	cmp	r3, #100	@ 0x64
 800c8c8:	d901      	bls.n	800c8ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e207      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c8ce:	4b5b      	ldr	r3, [pc, #364]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d0f0      	beq.n	800c8bc <HAL_RCC_OscConfig+0xc0>
 800c8da:	e014      	b.n	800c906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8dc:	f7fc fdc2 	bl	8009464 <HAL_GetTick>
 800c8e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c8e2:	e008      	b.n	800c8f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8e4:	f7fc fdbe 	bl	8009464 <HAL_GetTick>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	2b64      	cmp	r3, #100	@ 0x64
 800c8f0:	d901      	bls.n	800c8f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e1f3      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c8f6:	4b51      	ldr	r3, [pc, #324]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1f0      	bne.n	800c8e4 <HAL_RCC_OscConfig+0xe8>
 800c902:	e000      	b.n	800c906 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 0302 	and.w	r3, r3, #2
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d063      	beq.n	800c9da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c912:	4b4a      	ldr	r3, [pc, #296]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	f003 030c 	and.w	r3, r3, #12
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00b      	beq.n	800c936 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c91e:	4b47      	ldr	r3, [pc, #284]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c920:	689b      	ldr	r3, [r3, #8]
 800c922:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c926:	2b08      	cmp	r3, #8
 800c928:	d11c      	bne.n	800c964 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c92a:	4b44      	ldr	r3, [pc, #272]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c932:	2b00      	cmp	r3, #0
 800c934:	d116      	bne.n	800c964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c936:	4b41      	ldr	r3, [pc, #260]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d005      	beq.n	800c94e <HAL_RCC_OscConfig+0x152>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d001      	beq.n	800c94e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e1c7      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c94e:	4b3b      	ldr	r3, [pc, #236]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	4937      	ldr	r1, [pc, #220]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c95e:	4313      	orrs	r3, r2
 800c960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c962:	e03a      	b.n	800c9da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d020      	beq.n	800c9ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c96c:	4b34      	ldr	r3, [pc, #208]	@ (800ca40 <HAL_RCC_OscConfig+0x244>)
 800c96e:	2201      	movs	r2, #1
 800c970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c972:	f7fc fd77 	bl	8009464 <HAL_GetTick>
 800c976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c978:	e008      	b.n	800c98c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c97a:	f7fc fd73 	bl	8009464 <HAL_GetTick>
 800c97e:	4602      	mov	r2, r0
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	1ad3      	subs	r3, r2, r3
 800c984:	2b02      	cmp	r3, #2
 800c986:	d901      	bls.n	800c98c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c988:	2303      	movs	r3, #3
 800c98a:	e1a8      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c98c:	4b2b      	ldr	r3, [pc, #172]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0302 	and.w	r3, r3, #2
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0f0      	beq.n	800c97a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c998:	4b28      	ldr	r3, [pc, #160]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	4925      	ldr	r1, [pc, #148]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	600b      	str	r3, [r1, #0]
 800c9ac:	e015      	b.n	800c9da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c9ae:	4b24      	ldr	r3, [pc, #144]	@ (800ca40 <HAL_RCC_OscConfig+0x244>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9b4:	f7fc fd56 	bl	8009464 <HAL_GetTick>
 800c9b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c9ba:	e008      	b.n	800c9ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c9bc:	f7fc fd52 	bl	8009464 <HAL_GetTick>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d901      	bls.n	800c9ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	e187      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c9ce:	4b1b      	ldr	r3, [pc, #108]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0302 	and.w	r3, r3, #2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1f0      	bne.n	800c9bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f003 0308 	and.w	r3, r3, #8
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d036      	beq.n	800ca54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d016      	beq.n	800ca1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c9ee:	4b15      	ldr	r3, [pc, #84]	@ (800ca44 <HAL_RCC_OscConfig+0x248>)
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9f4:	f7fc fd36 	bl	8009464 <HAL_GetTick>
 800c9f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9fa:	e008      	b.n	800ca0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9fc:	f7fc fd32 	bl	8009464 <HAL_GetTick>
 800ca00:	4602      	mov	r2, r0
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	1ad3      	subs	r3, r2, r3
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d901      	bls.n	800ca0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	e167      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ca0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca3c <HAL_RCC_OscConfig+0x240>)
 800ca10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d0f0      	beq.n	800c9fc <HAL_RCC_OscConfig+0x200>
 800ca1a:	e01b      	b.n	800ca54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca1c:	4b09      	ldr	r3, [pc, #36]	@ (800ca44 <HAL_RCC_OscConfig+0x248>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca22:	f7fc fd1f 	bl	8009464 <HAL_GetTick>
 800ca26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca28:	e00e      	b.n	800ca48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca2a:	f7fc fd1b 	bl	8009464 <HAL_GetTick>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d907      	bls.n	800ca48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e150      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
 800ca3c:	40023800 	.word	0x40023800
 800ca40:	42470000 	.word	0x42470000
 800ca44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca48:	4b88      	ldr	r3, [pc, #544]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800ca4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca4c:	f003 0302 	and.w	r3, r3, #2
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1ea      	bne.n	800ca2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f003 0304 	and.w	r3, r3, #4
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f000 8097 	beq.w	800cb90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca62:	2300      	movs	r3, #0
 800ca64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca66:	4b81      	ldr	r3, [pc, #516]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800ca68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d10f      	bne.n	800ca92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca72:	2300      	movs	r3, #0
 800ca74:	60bb      	str	r3, [r7, #8]
 800ca76:	4b7d      	ldr	r3, [pc, #500]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800ca78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7a:	4a7c      	ldr	r2, [pc, #496]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800ca7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ca80:	6413      	str	r3, [r2, #64]	@ 0x40
 800ca82:	4b7a      	ldr	r3, [pc, #488]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca8a:	60bb      	str	r3, [r7, #8]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca92:	4b77      	ldr	r3, [pc, #476]	@ (800cc70 <HAL_RCC_OscConfig+0x474>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d118      	bne.n	800cad0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca9e:	4b74      	ldr	r3, [pc, #464]	@ (800cc70 <HAL_RCC_OscConfig+0x474>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a73      	ldr	r2, [pc, #460]	@ (800cc70 <HAL_RCC_OscConfig+0x474>)
 800caa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800caa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800caaa:	f7fc fcdb 	bl	8009464 <HAL_GetTick>
 800caae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cab0:	e008      	b.n	800cac4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cab2:	f7fc fcd7 	bl	8009464 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d901      	bls.n	800cac4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e10c      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cac4:	4b6a      	ldr	r3, [pc, #424]	@ (800cc70 <HAL_RCC_OscConfig+0x474>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d0f0      	beq.n	800cab2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d106      	bne.n	800cae6 <HAL_RCC_OscConfig+0x2ea>
 800cad8:	4b64      	ldr	r3, [pc, #400]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cadc:	4a63      	ldr	r2, [pc, #396]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cade:	f043 0301 	orr.w	r3, r3, #1
 800cae2:	6713      	str	r3, [r2, #112]	@ 0x70
 800cae4:	e01c      	b.n	800cb20 <HAL_RCC_OscConfig+0x324>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	2b05      	cmp	r3, #5
 800caec:	d10c      	bne.n	800cb08 <HAL_RCC_OscConfig+0x30c>
 800caee:	4b5f      	ldr	r3, [pc, #380]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800caf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caf2:	4a5e      	ldr	r2, [pc, #376]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800caf4:	f043 0304 	orr.w	r3, r3, #4
 800caf8:	6713      	str	r3, [r2, #112]	@ 0x70
 800cafa:	4b5c      	ldr	r3, [pc, #368]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cafc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cafe:	4a5b      	ldr	r2, [pc, #364]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb00:	f043 0301 	orr.w	r3, r3, #1
 800cb04:	6713      	str	r3, [r2, #112]	@ 0x70
 800cb06:	e00b      	b.n	800cb20 <HAL_RCC_OscConfig+0x324>
 800cb08:	4b58      	ldr	r3, [pc, #352]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb0c:	4a57      	ldr	r2, [pc, #348]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb0e:	f023 0301 	bic.w	r3, r3, #1
 800cb12:	6713      	str	r3, [r2, #112]	@ 0x70
 800cb14:	4b55      	ldr	r3, [pc, #340]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb18:	4a54      	ldr	r2, [pc, #336]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb1a:	f023 0304 	bic.w	r3, r3, #4
 800cb1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d015      	beq.n	800cb54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb28:	f7fc fc9c 	bl	8009464 <HAL_GetTick>
 800cb2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb2e:	e00a      	b.n	800cb46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb30:	f7fc fc98 	bl	8009464 <HAL_GetTick>
 800cb34:	4602      	mov	r2, r0
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d901      	bls.n	800cb46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e0cb      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb46:	4b49      	ldr	r3, [pc, #292]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb4a:	f003 0302 	and.w	r3, r3, #2
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d0ee      	beq.n	800cb30 <HAL_RCC_OscConfig+0x334>
 800cb52:	e014      	b.n	800cb7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb54:	f7fc fc86 	bl	8009464 <HAL_GetTick>
 800cb58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb5a:	e00a      	b.n	800cb72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb5c:	f7fc fc82 	bl	8009464 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d901      	bls.n	800cb72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cb6e:	2303      	movs	r3, #3
 800cb70:	e0b5      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb72:	4b3e      	ldr	r3, [pc, #248]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb76:	f003 0302 	and.w	r3, r3, #2
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d1ee      	bne.n	800cb5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d105      	bne.n	800cb90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb84:	4b39      	ldr	r3, [pc, #228]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb88:	4a38      	ldr	r2, [pc, #224]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 80a1 	beq.w	800ccdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb9a:	4b34      	ldr	r3, [pc, #208]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f003 030c 	and.w	r3, r3, #12
 800cba2:	2b08      	cmp	r3, #8
 800cba4:	d05c      	beq.n	800cc60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d141      	bne.n	800cc32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbae:	4b31      	ldr	r3, [pc, #196]	@ (800cc74 <HAL_RCC_OscConfig+0x478>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbb4:	f7fc fc56 	bl	8009464 <HAL_GetTick>
 800cbb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbba:	e008      	b.n	800cbce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbbc:	f7fc fc52 	bl	8009464 <HAL_GetTick>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	d901      	bls.n	800cbce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	e087      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbce:	4b27      	ldr	r3, [pc, #156]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1f0      	bne.n	800cbbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	69da      	ldr	r2, [r3, #28]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe8:	019b      	lsls	r3, r3, #6
 800cbea:	431a      	orrs	r2, r3
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbf0:	085b      	lsrs	r3, r3, #1
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	041b      	lsls	r3, r3, #16
 800cbf6:	431a      	orrs	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfc:	061b      	lsls	r3, r3, #24
 800cbfe:	491b      	ldr	r1, [pc, #108]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cc00:	4313      	orrs	r3, r2
 800cc02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc04:	4b1b      	ldr	r3, [pc, #108]	@ (800cc74 <HAL_RCC_OscConfig+0x478>)
 800cc06:	2201      	movs	r2, #1
 800cc08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc0a:	f7fc fc2b 	bl	8009464 <HAL_GetTick>
 800cc0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc10:	e008      	b.n	800cc24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc12:	f7fc fc27 	bl	8009464 <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d901      	bls.n	800cc24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e05c      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc24:	4b11      	ldr	r3, [pc, #68]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d0f0      	beq.n	800cc12 <HAL_RCC_OscConfig+0x416>
 800cc30:	e054      	b.n	800ccdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc32:	4b10      	ldr	r3, [pc, #64]	@ (800cc74 <HAL_RCC_OscConfig+0x478>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc38:	f7fc fc14 	bl	8009464 <HAL_GetTick>
 800cc3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc3e:	e008      	b.n	800cc52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc40:	f7fc fc10 	bl	8009464 <HAL_GetTick>
 800cc44:	4602      	mov	r2, r0
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d901      	bls.n	800cc52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e045      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cc52:	4b06      	ldr	r3, [pc, #24]	@ (800cc6c <HAL_RCC_OscConfig+0x470>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1f0      	bne.n	800cc40 <HAL_RCC_OscConfig+0x444>
 800cc5e:	e03d      	b.n	800ccdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d107      	bne.n	800cc78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e038      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
 800cc6c:	40023800 	.word	0x40023800
 800cc70:	40007000 	.word	0x40007000
 800cc74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cc78:	4b1b      	ldr	r3, [pc, #108]	@ (800cce8 <HAL_RCC_OscConfig+0x4ec>)
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d028      	beq.n	800ccd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d121      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d11a      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cca8:	4013      	ands	r3, r2
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ccae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d111      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccbe:	085b      	lsrs	r3, r3, #1
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d107      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d001      	beq.n	800ccdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e000      	b.n	800ccde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	40023800 	.word	0x40023800

0800ccec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e0cc      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cd00:	4b68      	ldr	r3, [pc, #416]	@ (800cea4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 0307 	and.w	r3, r3, #7
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d90c      	bls.n	800cd28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd0e:	4b65      	ldr	r3, [pc, #404]	@ (800cea4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	b2d2      	uxtb	r2, r2
 800cd14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd16:	4b63      	ldr	r3, [pc, #396]	@ (800cea4 <HAL_RCC_ClockConfig+0x1b8>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0307 	and.w	r3, r3, #7
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d001      	beq.n	800cd28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e0b8      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d020      	beq.n	800cd76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 0304 	and.w	r3, r3, #4
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d005      	beq.n	800cd4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cd40:	4b59      	ldr	r3, [pc, #356]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	4a58      	ldr	r2, [pc, #352]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800cd4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 0308 	and.w	r3, r3, #8
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d005      	beq.n	800cd64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cd58:	4b53      	ldr	r3, [pc, #332]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	4a52      	ldr	r2, [pc, #328]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800cd62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd64:	4b50      	ldr	r3, [pc, #320]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	494d      	ldr	r1, [pc, #308]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd72:	4313      	orrs	r3, r2
 800cd74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d044      	beq.n	800ce0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d107      	bne.n	800cd9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd8a:	4b47      	ldr	r3, [pc, #284]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d119      	bne.n	800cdca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e07f      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d003      	beq.n	800cdaa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d107      	bne.n	800cdba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdaa:	4b3f      	ldr	r3, [pc, #252]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d109      	bne.n	800cdca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e06f      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdba:	4b3b      	ldr	r3, [pc, #236]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0302 	and.w	r3, r3, #2
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e067      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cdca:	4b37      	ldr	r3, [pc, #220]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f023 0203 	bic.w	r2, r3, #3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	4934      	ldr	r1, [pc, #208]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cddc:	f7fc fb42 	bl	8009464 <HAL_GetTick>
 800cde0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cde2:	e00a      	b.n	800cdfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cde4:	f7fc fb3e 	bl	8009464 <HAL_GetTick>
 800cde8:	4602      	mov	r2, r0
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d901      	bls.n	800cdfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e04f      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cdfa:	4b2b      	ldr	r3, [pc, #172]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	f003 020c 	and.w	r2, r3, #12
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d1eb      	bne.n	800cde4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ce0c:	4b25      	ldr	r3, [pc, #148]	@ (800cea4 <HAL_RCC_ClockConfig+0x1b8>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f003 0307 	and.w	r3, r3, #7
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d20c      	bcs.n	800ce34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce1a:	4b22      	ldr	r3, [pc, #136]	@ (800cea4 <HAL_RCC_ClockConfig+0x1b8>)
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce22:	4b20      	ldr	r3, [pc, #128]	@ (800cea4 <HAL_RCC_ClockConfig+0x1b8>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d001      	beq.n	800ce34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e032      	b.n	800ce9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d008      	beq.n	800ce52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ce40:	4b19      	ldr	r3, [pc, #100]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	4916      	ldr	r1, [pc, #88]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 0308 	and.w	r3, r3, #8
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d009      	beq.n	800ce72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ce5e:	4b12      	ldr	r3, [pc, #72]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	490e      	ldr	r1, [pc, #56]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ce72:	f000 f821 	bl	800ceb8 <HAL_RCC_GetSysClockFreq>
 800ce76:	4602      	mov	r2, r0
 800ce78:	4b0b      	ldr	r3, [pc, #44]	@ (800cea8 <HAL_RCC_ClockConfig+0x1bc>)
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	091b      	lsrs	r3, r3, #4
 800ce7e:	f003 030f 	and.w	r3, r3, #15
 800ce82:	490a      	ldr	r1, [pc, #40]	@ (800ceac <HAL_RCC_ClockConfig+0x1c0>)
 800ce84:	5ccb      	ldrb	r3, [r1, r3]
 800ce86:	fa22 f303 	lsr.w	r3, r2, r3
 800ce8a:	4a09      	ldr	r2, [pc, #36]	@ (800ceb0 <HAL_RCC_ClockConfig+0x1c4>)
 800ce8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ce8e:	4b09      	ldr	r3, [pc, #36]	@ (800ceb4 <HAL_RCC_ClockConfig+0x1c8>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fc faa2 	bl	80093dc <HAL_InitTick>

  return HAL_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	40023c00 	.word	0x40023c00
 800cea8:	40023800 	.word	0x40023800
 800ceac:	08010e38 	.word	0x08010e38
 800ceb0:	20000554 	.word	0x20000554
 800ceb4:	20000558 	.word	0x20000558

0800ceb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ceb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cebc:	b094      	sub	sp, #80	@ 0x50
 800cebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800cec0:	2300      	movs	r3, #0
 800cec2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800cec8:	2300      	movs	r3, #0
 800ceca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800cecc:	2300      	movs	r3, #0
 800cece:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ced0:	4b79      	ldr	r3, [pc, #484]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	f003 030c 	and.w	r3, r3, #12
 800ced8:	2b08      	cmp	r3, #8
 800ceda:	d00d      	beq.n	800cef8 <HAL_RCC_GetSysClockFreq+0x40>
 800cedc:	2b08      	cmp	r3, #8
 800cede:	f200 80e1 	bhi.w	800d0a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <HAL_RCC_GetSysClockFreq+0x34>
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	d003      	beq.n	800cef2 <HAL_RCC_GetSysClockFreq+0x3a>
 800ceea:	e0db      	b.n	800d0a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ceec:	4b73      	ldr	r3, [pc, #460]	@ (800d0bc <HAL_RCC_GetSysClockFreq+0x204>)
 800ceee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cef0:	e0db      	b.n	800d0aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cef2:	4b73      	ldr	r3, [pc, #460]	@ (800d0c0 <HAL_RCC_GetSysClockFreq+0x208>)
 800cef4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cef6:	e0d8      	b.n	800d0aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cef8:	4b6f      	ldr	r3, [pc, #444]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cf00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cf02:	4b6d      	ldr	r3, [pc, #436]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d063      	beq.n	800cfd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cf0e:	4b6a      	ldr	r3, [pc, #424]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	099b      	lsrs	r3, r3, #6
 800cf14:	2200      	movs	r2, #0
 800cf16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf20:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf22:	2300      	movs	r3, #0
 800cf24:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800cf2a:	4622      	mov	r2, r4
 800cf2c:	462b      	mov	r3, r5
 800cf2e:	f04f 0000 	mov.w	r0, #0
 800cf32:	f04f 0100 	mov.w	r1, #0
 800cf36:	0159      	lsls	r1, r3, #5
 800cf38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cf3c:	0150      	lsls	r0, r2, #5
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	4621      	mov	r1, r4
 800cf44:	1a51      	subs	r1, r2, r1
 800cf46:	6139      	str	r1, [r7, #16]
 800cf48:	4629      	mov	r1, r5
 800cf4a:	eb63 0301 	sbc.w	r3, r3, r1
 800cf4e:	617b      	str	r3, [r7, #20]
 800cf50:	f04f 0200 	mov.w	r2, #0
 800cf54:	f04f 0300 	mov.w	r3, #0
 800cf58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf5c:	4659      	mov	r1, fp
 800cf5e:	018b      	lsls	r3, r1, #6
 800cf60:	4651      	mov	r1, sl
 800cf62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cf66:	4651      	mov	r1, sl
 800cf68:	018a      	lsls	r2, r1, #6
 800cf6a:	4651      	mov	r1, sl
 800cf6c:	ebb2 0801 	subs.w	r8, r2, r1
 800cf70:	4659      	mov	r1, fp
 800cf72:	eb63 0901 	sbc.w	r9, r3, r1
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	f04f 0300 	mov.w	r3, #0
 800cf7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf8a:	4690      	mov	r8, r2
 800cf8c:	4699      	mov	r9, r3
 800cf8e:	4623      	mov	r3, r4
 800cf90:	eb18 0303 	adds.w	r3, r8, r3
 800cf94:	60bb      	str	r3, [r7, #8]
 800cf96:	462b      	mov	r3, r5
 800cf98:	eb49 0303 	adc.w	r3, r9, r3
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	f04f 0300 	mov.w	r3, #0
 800cfa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cfaa:	4629      	mov	r1, r5
 800cfac:	024b      	lsls	r3, r1, #9
 800cfae:	4621      	mov	r1, r4
 800cfb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	024a      	lsls	r2, r1, #9
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cfc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cfc8:	f7f3 f962 	bl	8000290 <__aeabi_uldivmod>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfd4:	e058      	b.n	800d088 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cfd6:	4b38      	ldr	r3, [pc, #224]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	099b      	lsrs	r3, r3, #6
 800cfdc:	2200      	movs	r2, #0
 800cfde:	4618      	mov	r0, r3
 800cfe0:	4611      	mov	r1, r2
 800cfe2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cfe6:	623b      	str	r3, [r7, #32]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cff0:	4642      	mov	r2, r8
 800cff2:	464b      	mov	r3, r9
 800cff4:	f04f 0000 	mov.w	r0, #0
 800cff8:	f04f 0100 	mov.w	r1, #0
 800cffc:	0159      	lsls	r1, r3, #5
 800cffe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d002:	0150      	lsls	r0, r2, #5
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4641      	mov	r1, r8
 800d00a:	ebb2 0a01 	subs.w	sl, r2, r1
 800d00e:	4649      	mov	r1, r9
 800d010:	eb63 0b01 	sbc.w	fp, r3, r1
 800d014:	f04f 0200 	mov.w	r2, #0
 800d018:	f04f 0300 	mov.w	r3, #0
 800d01c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d020:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d024:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d028:	ebb2 040a 	subs.w	r4, r2, sl
 800d02c:	eb63 050b 	sbc.w	r5, r3, fp
 800d030:	f04f 0200 	mov.w	r2, #0
 800d034:	f04f 0300 	mov.w	r3, #0
 800d038:	00eb      	lsls	r3, r5, #3
 800d03a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d03e:	00e2      	lsls	r2, r4, #3
 800d040:	4614      	mov	r4, r2
 800d042:	461d      	mov	r5, r3
 800d044:	4643      	mov	r3, r8
 800d046:	18e3      	adds	r3, r4, r3
 800d048:	603b      	str	r3, [r7, #0]
 800d04a:	464b      	mov	r3, r9
 800d04c:	eb45 0303 	adc.w	r3, r5, r3
 800d050:	607b      	str	r3, [r7, #4]
 800d052:	f04f 0200 	mov.w	r2, #0
 800d056:	f04f 0300 	mov.w	r3, #0
 800d05a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d05e:	4629      	mov	r1, r5
 800d060:	028b      	lsls	r3, r1, #10
 800d062:	4621      	mov	r1, r4
 800d064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d068:	4621      	mov	r1, r4
 800d06a:	028a      	lsls	r2, r1, #10
 800d06c:	4610      	mov	r0, r2
 800d06e:	4619      	mov	r1, r3
 800d070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d072:	2200      	movs	r2, #0
 800d074:	61bb      	str	r3, [r7, #24]
 800d076:	61fa      	str	r2, [r7, #28]
 800d078:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d07c:	f7f3 f908 	bl	8000290 <__aeabi_uldivmod>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4613      	mov	r3, r2
 800d086:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d088:	4b0b      	ldr	r3, [pc, #44]	@ (800d0b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	0c1b      	lsrs	r3, r3, #16
 800d08e:	f003 0303 	and.w	r3, r3, #3
 800d092:	3301      	adds	r3, #1
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800d098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d09a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d0a2:	e002      	b.n	800d0aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d0a4:	4b05      	ldr	r3, [pc, #20]	@ (800d0bc <HAL_RCC_GetSysClockFreq+0x204>)
 800d0a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d0a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3750      	adds	r7, #80	@ 0x50
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0b6:	bf00      	nop
 800d0b8:	40023800 	.word	0x40023800
 800d0bc:	00f42400 	.word	0x00f42400
 800d0c0:	007a1200 	.word	0x007a1200

0800d0c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d0c8:	4b03      	ldr	r3, [pc, #12]	@ (800d0d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	20000554 	.word	0x20000554

0800d0dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d0e0:	f7ff fff0 	bl	800d0c4 <HAL_RCC_GetHCLKFreq>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	4b05      	ldr	r3, [pc, #20]	@ (800d0fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	0a9b      	lsrs	r3, r3, #10
 800d0ec:	f003 0307 	and.w	r3, r3, #7
 800d0f0:	4903      	ldr	r1, [pc, #12]	@ (800d100 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d0f2:	5ccb      	ldrb	r3, [r1, r3]
 800d0f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	40023800 	.word	0x40023800
 800d100:	08010e48 	.word	0x08010e48

0800d104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d108:	f7ff ffdc 	bl	800d0c4 <HAL_RCC_GetHCLKFreq>
 800d10c:	4602      	mov	r2, r0
 800d10e:	4b05      	ldr	r3, [pc, #20]	@ (800d124 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	0b5b      	lsrs	r3, r3, #13
 800d114:	f003 0307 	and.w	r3, r3, #7
 800d118:	4903      	ldr	r1, [pc, #12]	@ (800d128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d11a:	5ccb      	ldrb	r3, [r1, r3]
 800d11c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d120:	4618      	mov	r0, r3
 800d122:	bd80      	pop	{r7, pc}
 800d124:	40023800 	.word	0x40023800
 800d128:	08010e48 	.word	0x08010e48

0800d12c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e041      	b.n	800d1c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	d106      	bne.n	800d158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7fb ff6a 	bl	800902c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2202      	movs	r2, #2
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	3304      	adds	r3, #4
 800d168:	4619      	mov	r1, r3
 800d16a:	4610      	mov	r0, r2
 800d16c:	f000 fa70 	bl	800d650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d001      	beq.n	800d1e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e044      	b.n	800d26e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	68da      	ldr	r2, [r3, #12]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0201 	orr.w	r2, r2, #1
 800d1fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a1e      	ldr	r2, [pc, #120]	@ (800d27c <HAL_TIM_Base_Start_IT+0xb0>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d018      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x6c>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d20e:	d013      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x6c>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a1a      	ldr	r2, [pc, #104]	@ (800d280 <HAL_TIM_Base_Start_IT+0xb4>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d00e      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x6c>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4a19      	ldr	r2, [pc, #100]	@ (800d284 <HAL_TIM_Base_Start_IT+0xb8>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d009      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x6c>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a17      	ldr	r2, [pc, #92]	@ (800d288 <HAL_TIM_Base_Start_IT+0xbc>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d004      	beq.n	800d238 <HAL_TIM_Base_Start_IT+0x6c>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a16      	ldr	r2, [pc, #88]	@ (800d28c <HAL_TIM_Base_Start_IT+0xc0>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d111      	bne.n	800d25c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2b06      	cmp	r3, #6
 800d248:	d010      	beq.n	800d26c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f042 0201 	orr.w	r2, r2, #1
 800d258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d25a:	e007      	b.n	800d26c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f042 0201 	orr.w	r2, r2, #1
 800d26a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3714      	adds	r7, #20
 800d272:	46bd      	mov	sp, r7
 800d274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d278:	4770      	bx	lr
 800d27a:	bf00      	nop
 800d27c:	40010000 	.word	0x40010000
 800d280:	40000400 	.word	0x40000400
 800d284:	40000800 	.word	0x40000800
 800d288:	40000c00 	.word	0x40000c00
 800d28c:	40014000 	.word	0x40014000

0800d290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f003 0302 	and.w	r3, r3, #2
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d020      	beq.n	800d2f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d01b      	beq.n	800d2f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f06f 0202 	mvn.w	r2, #2
 800d2c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	f003 0303 	and.w	r3, r3, #3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d003      	beq.n	800d2e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f999 	bl	800d612 <HAL_TIM_IC_CaptureCallback>
 800d2e0:	e005      	b.n	800d2ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f98b 	bl	800d5fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f99c 	bl	800d626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f003 0304 	and.w	r3, r3, #4
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d020      	beq.n	800d340 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f003 0304 	and.w	r3, r3, #4
 800d304:	2b00      	cmp	r3, #0
 800d306:	d01b      	beq.n	800d340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f06f 0204 	mvn.w	r2, #4
 800d310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2202      	movs	r2, #2
 800d316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	699b      	ldr	r3, [r3, #24]
 800d31e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d322:	2b00      	cmp	r3, #0
 800d324:	d003      	beq.n	800d32e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f973 	bl	800d612 <HAL_TIM_IC_CaptureCallback>
 800d32c:	e005      	b.n	800d33a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f965 	bl	800d5fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f976 	bl	800d626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	f003 0308 	and.w	r3, r3, #8
 800d346:	2b00      	cmp	r3, #0
 800d348:	d020      	beq.n	800d38c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f003 0308 	and.w	r3, r3, #8
 800d350:	2b00      	cmp	r3, #0
 800d352:	d01b      	beq.n	800d38c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f06f 0208 	mvn.w	r2, #8
 800d35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2204      	movs	r2, #4
 800d362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	69db      	ldr	r3, [r3, #28]
 800d36a:	f003 0303 	and.w	r3, r3, #3
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d003      	beq.n	800d37a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f94d 	bl	800d612 <HAL_TIM_IC_CaptureCallback>
 800d378:	e005      	b.n	800d386 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 f93f 	bl	800d5fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 f950 	bl	800d626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f003 0310 	and.w	r3, r3, #16
 800d392:	2b00      	cmp	r3, #0
 800d394:	d020      	beq.n	800d3d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01b      	beq.n	800d3d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f06f 0210 	mvn.w	r2, #16
 800d3a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2208      	movs	r2, #8
 800d3ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	69db      	ldr	r3, [r3, #28]
 800d3b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f927 	bl	800d612 <HAL_TIM_IC_CaptureCallback>
 800d3c4:	e005      	b.n	800d3d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f919 	bl	800d5fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f92a 	bl	800d626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00c      	beq.n	800d3fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f003 0301 	and.w	r3, r3, #1
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d007      	beq.n	800d3fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f06f 0201 	mvn.w	r2, #1
 800d3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7f6 fa98 	bl	800392c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00c      	beq.n	800d420 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d007      	beq.n	800d420 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fab0 	bl	800d980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00c      	beq.n	800d444 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d430:	2b00      	cmp	r3, #0
 800d432:	d007      	beq.n	800d444 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d43c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f8fb 	bl	800d63a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	f003 0320 	and.w	r3, r3, #32
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00c      	beq.n	800d468 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f003 0320 	and.w	r3, r3, #32
 800d454:	2b00      	cmp	r3, #0
 800d456:	d007      	beq.n	800d468 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f06f 0220 	mvn.w	r2, #32
 800d460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fa82 	bl	800d96c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d468:	bf00      	nop
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d47a:	2300      	movs	r3, #0
 800d47c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d484:	2b01      	cmp	r3, #1
 800d486:	d101      	bne.n	800d48c <HAL_TIM_ConfigClockSource+0x1c>
 800d488:	2302      	movs	r3, #2
 800d48a:	e0b4      	b.n	800d5f6 <HAL_TIM_ConfigClockSource+0x186>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2202      	movs	r2, #2
 800d498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4c4:	d03e      	beq.n	800d544 <HAL_TIM_ConfigClockSource+0xd4>
 800d4c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4ca:	f200 8087 	bhi.w	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d4ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4d2:	f000 8086 	beq.w	800d5e2 <HAL_TIM_ConfigClockSource+0x172>
 800d4d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4da:	d87f      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d4dc:	2b70      	cmp	r3, #112	@ 0x70
 800d4de:	d01a      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0xa6>
 800d4e0:	2b70      	cmp	r3, #112	@ 0x70
 800d4e2:	d87b      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d4e4:	2b60      	cmp	r3, #96	@ 0x60
 800d4e6:	d050      	beq.n	800d58a <HAL_TIM_ConfigClockSource+0x11a>
 800d4e8:	2b60      	cmp	r3, #96	@ 0x60
 800d4ea:	d877      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d4ec:	2b50      	cmp	r3, #80	@ 0x50
 800d4ee:	d03c      	beq.n	800d56a <HAL_TIM_ConfigClockSource+0xfa>
 800d4f0:	2b50      	cmp	r3, #80	@ 0x50
 800d4f2:	d873      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d4f4:	2b40      	cmp	r3, #64	@ 0x40
 800d4f6:	d058      	beq.n	800d5aa <HAL_TIM_ConfigClockSource+0x13a>
 800d4f8:	2b40      	cmp	r3, #64	@ 0x40
 800d4fa:	d86f      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d4fc:	2b30      	cmp	r3, #48	@ 0x30
 800d4fe:	d064      	beq.n	800d5ca <HAL_TIM_ConfigClockSource+0x15a>
 800d500:	2b30      	cmp	r3, #48	@ 0x30
 800d502:	d86b      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d504:	2b20      	cmp	r3, #32
 800d506:	d060      	beq.n	800d5ca <HAL_TIM_ConfigClockSource+0x15a>
 800d508:	2b20      	cmp	r3, #32
 800d50a:	d867      	bhi.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d05c      	beq.n	800d5ca <HAL_TIM_ConfigClockSource+0x15a>
 800d510:	2b10      	cmp	r3, #16
 800d512:	d05a      	beq.n	800d5ca <HAL_TIM_ConfigClockSource+0x15a>
 800d514:	e062      	b.n	800d5dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d526:	f000 f993 	bl	800d850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	609a      	str	r2, [r3, #8]
      break;
 800d542:	e04f      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d554:	f000 f97c 	bl	800d850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689a      	ldr	r2, [r3, #8]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d566:	609a      	str	r2, [r3, #8]
      break;
 800d568:	e03c      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d576:	461a      	mov	r2, r3
 800d578:	f000 f8f0 	bl	800d75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2150      	movs	r1, #80	@ 0x50
 800d582:	4618      	mov	r0, r3
 800d584:	f000 f949 	bl	800d81a <TIM_ITRx_SetConfig>
      break;
 800d588:	e02c      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d596:	461a      	mov	r2, r3
 800d598:	f000 f90f 	bl	800d7ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2160      	movs	r1, #96	@ 0x60
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 f939 	bl	800d81a <TIM_ITRx_SetConfig>
      break;
 800d5a8:	e01c      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f000 f8d0 	bl	800d75c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2140      	movs	r1, #64	@ 0x40
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 f929 	bl	800d81a <TIM_ITRx_SetConfig>
      break;
 800d5c8:	e00c      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	f000 f920 	bl	800d81a <TIM_ITRx_SetConfig>
      break;
 800d5da:	e003      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	73fb      	strb	r3, [r7, #15]
      break;
 800d5e0:	e000      	b.n	800d5e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d5e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3710      	adds	r7, #16
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b083      	sub	sp, #12
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d606:	bf00      	nop
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d612:	b480      	push	{r7}
 800d614:	b083      	sub	sp, #12
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d61a:	bf00      	nop
 800d61c:	370c      	adds	r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d626:	b480      	push	{r7}
 800d628:	b083      	sub	sp, #12
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d62e:	bf00      	nop
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d63a:	b480      	push	{r7}
 800d63c:	b083      	sub	sp, #12
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d642:	bf00      	nop
 800d644:	370c      	adds	r7, #12
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
	...

0800d650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	4a37      	ldr	r2, [pc, #220]	@ (800d740 <TIM_Base_SetConfig+0xf0>)
 800d664:	4293      	cmp	r3, r2
 800d666:	d00f      	beq.n	800d688 <TIM_Base_SetConfig+0x38>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d66e:	d00b      	beq.n	800d688 <TIM_Base_SetConfig+0x38>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4a34      	ldr	r2, [pc, #208]	@ (800d744 <TIM_Base_SetConfig+0xf4>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d007      	beq.n	800d688 <TIM_Base_SetConfig+0x38>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a33      	ldr	r2, [pc, #204]	@ (800d748 <TIM_Base_SetConfig+0xf8>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d003      	beq.n	800d688 <TIM_Base_SetConfig+0x38>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a32      	ldr	r2, [pc, #200]	@ (800d74c <TIM_Base_SetConfig+0xfc>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d108      	bne.n	800d69a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d68e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	68fa      	ldr	r2, [r7, #12]
 800d696:	4313      	orrs	r3, r2
 800d698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a28      	ldr	r2, [pc, #160]	@ (800d740 <TIM_Base_SetConfig+0xf0>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d01b      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6a8:	d017      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a25      	ldr	r2, [pc, #148]	@ (800d744 <TIM_Base_SetConfig+0xf4>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d013      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a24      	ldr	r2, [pc, #144]	@ (800d748 <TIM_Base_SetConfig+0xf8>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d00f      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a23      	ldr	r2, [pc, #140]	@ (800d74c <TIM_Base_SetConfig+0xfc>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d00b      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a22      	ldr	r2, [pc, #136]	@ (800d750 <TIM_Base_SetConfig+0x100>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d007      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a21      	ldr	r2, [pc, #132]	@ (800d754 <TIM_Base_SetConfig+0x104>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d003      	beq.n	800d6da <TIM_Base_SetConfig+0x8a>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a20      	ldr	r2, [pc, #128]	@ (800d758 <TIM_Base_SetConfig+0x108>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d108      	bne.n	800d6ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	695b      	ldr	r3, [r3, #20]
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	689a      	ldr	r2, [r3, #8]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a0c      	ldr	r2, [pc, #48]	@ (800d740 <TIM_Base_SetConfig+0xf0>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d103      	bne.n	800d71a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	691a      	ldr	r2, [r3, #16]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f043 0204 	orr.w	r2, r3, #4
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	601a      	str	r2, [r3, #0]
}
 800d732:	bf00      	nop
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	40010000 	.word	0x40010000
 800d744:	40000400 	.word	0x40000400
 800d748:	40000800 	.word	0x40000800
 800d74c:	40000c00 	.word	0x40000c00
 800d750:	40014000 	.word	0x40014000
 800d754:	40014400 	.word	0x40014400
 800d758:	40014800 	.word	0x40014800

0800d75c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b087      	sub	sp, #28
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6a1b      	ldr	r3, [r3, #32]
 800d76c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	f023 0201 	bic.w	r2, r3, #1
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	699b      	ldr	r3, [r3, #24]
 800d77e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	011b      	lsls	r3, r3, #4
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	4313      	orrs	r3, r2
 800d790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f023 030a 	bic.w	r3, r3, #10
 800d798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d79a:	697a      	ldr	r2, [r7, #20]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	697a      	ldr	r2, [r7, #20]
 800d7ac:	621a      	str	r2, [r3, #32]
}
 800d7ae:	bf00      	nop
 800d7b0:	371c      	adds	r7, #28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b087      	sub	sp, #28
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6a1b      	ldr	r3, [r3, #32]
 800d7ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	f023 0210 	bic.w	r2, r3, #16
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d7e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	031b      	lsls	r3, r3, #12
 800d7ea:	693a      	ldr	r2, [r7, #16]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d7f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	011b      	lsls	r3, r3, #4
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	621a      	str	r2, [r3, #32]
}
 800d80e:	bf00      	nop
 800d810:	371c      	adds	r7, #28
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d81a:	b480      	push	{r7}
 800d81c:	b085      	sub	sp, #20
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4313      	orrs	r3, r2
 800d838:	f043 0307 	orr.w	r3, r3, #7
 800d83c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	609a      	str	r2, [r3, #8]
}
 800d844:	bf00      	nop
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d850:	b480      	push	{r7}
 800d852:	b087      	sub	sp, #28
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d86a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	021a      	lsls	r2, r3, #8
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	431a      	orrs	r2, r3
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	4313      	orrs	r3, r2
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	4313      	orrs	r3, r2
 800d87c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	697a      	ldr	r2, [r7, #20]
 800d882:	609a      	str	r2, [r3, #8]
}
 800d884:	bf00      	nop
 800d886:	371c      	adds	r7, #28
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d101      	bne.n	800d8a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e050      	b.n	800d94a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2202      	movs	r2, #2
 800d8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a1c      	ldr	r2, [pc, #112]	@ (800d958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d018      	beq.n	800d91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8f4:	d013      	beq.n	800d91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a18      	ldr	r2, [pc, #96]	@ (800d95c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d00e      	beq.n	800d91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a16      	ldr	r2, [pc, #88]	@ (800d960 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d009      	beq.n	800d91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a15      	ldr	r2, [pc, #84]	@ (800d964 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d004      	beq.n	800d91e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4a13      	ldr	r2, [pc, #76]	@ (800d968 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d10c      	bne.n	800d938 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d948:	2300      	movs	r3, #0
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	40010000 	.word	0x40010000
 800d95c:	40000400 	.word	0x40000400
 800d960:	40000800 	.word	0x40000800
 800d964:	40000c00 	.word	0x40000c00
 800d968:	40014000 	.word	0x40014000

0800d96c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d988:	bf00      	nop
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e042      	b.n	800da2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d106      	bne.n	800d9c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7fb fb5c 	bl	8009078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2224      	movs	r2, #36	@ 0x24
 800d9c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68da      	ldr	r2, [r3, #12]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d9d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fd7f 	bl	800e4dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	691a      	ldr	r2, [r3, #16]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d9ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	695a      	ldr	r2, [r3, #20]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d9fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800da0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2220      	movs	r2, #32
 800da18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2220      	movs	r2, #32
 800da20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800da2a:	2300      	movs	r3, #0
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b08a      	sub	sp, #40	@ 0x28
 800da38:	af02      	add	r7, sp, #8
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	4613      	mov	r3, r2
 800da42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800da44:	2300      	movs	r3, #0
 800da46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b20      	cmp	r3, #32
 800da52:	d175      	bne.n	800db40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <HAL_UART_Transmit+0x2c>
 800da5a:	88fb      	ldrh	r3, [r7, #6]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e06e      	b.n	800db42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2221      	movs	r2, #33	@ 0x21
 800da6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800da72:	f7fb fcf7 	bl	8009464 <HAL_GetTick>
 800da76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	88fa      	ldrh	r2, [r7, #6]
 800da7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	88fa      	ldrh	r2, [r7, #6]
 800da82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da8c:	d108      	bne.n	800daa0 <HAL_UART_Transmit+0x6c>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d104      	bne.n	800daa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800da96:	2300      	movs	r3, #0
 800da98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	61bb      	str	r3, [r7, #24]
 800da9e:	e003      	b.n	800daa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800daa4:	2300      	movs	r3, #0
 800daa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800daa8:	e02e      	b.n	800db08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2200      	movs	r2, #0
 800dab2:	2180      	movs	r1, #128	@ 0x80
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f000 fb1d 	bl	800e0f4 <UART_WaitOnFlagUntilTimeout>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d005      	beq.n	800dacc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800dac8:	2303      	movs	r3, #3
 800daca:	e03a      	b.n	800db42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10b      	bne.n	800daea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	3302      	adds	r3, #2
 800dae6:	61bb      	str	r3, [r7, #24]
 800dae8:	e007      	b.n	800dafa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	781a      	ldrb	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	3301      	adds	r3, #1
 800daf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3b01      	subs	r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1cb      	bne.n	800daaa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	9300      	str	r3, [sp, #0]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	2200      	movs	r2, #0
 800db1a:	2140      	movs	r1, #64	@ 0x40
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f000 fae9 	bl	800e0f4 <UART_WaitOnFlagUntilTimeout>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d005      	beq.n	800db34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2220      	movs	r2, #32
 800db2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800db30:	2303      	movs	r3, #3
 800db32:	e006      	b.n	800db42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2220      	movs	r2, #32
 800db38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	e000      	b.n	800db42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800db40:	2302      	movs	r3, #2
  }
}
 800db42:	4618      	mov	r0, r3
 800db44:	3720      	adds	r7, #32
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b0ba      	sub	sp, #232	@ 0xe8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800db72:	2300      	movs	r3, #0
 800db74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800db78:	2300      	movs	r3, #0
 800db7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800db7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db82:	f003 030f 	and.w	r3, r3, #15
 800db86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800db8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10f      	bne.n	800dbb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800db92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db96:	f003 0320 	and.w	r3, r3, #32
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d009      	beq.n	800dbb2 <HAL_UART_IRQHandler+0x66>
 800db9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dba2:	f003 0320 	and.w	r3, r3, #32
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fbd7 	bl	800e35e <UART_Receive_IT>
      return;
 800dbb0:	e273      	b.n	800e09a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dbb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 80de 	beq.w	800dd78 <HAL_UART_IRQHandler+0x22c>
 800dbbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d106      	bne.n	800dbd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dbc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 80d1 	beq.w	800dd78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dbd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00b      	beq.n	800dbfa <HAL_UART_IRQHandler+0xae>
 800dbe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbf2:	f043 0201 	orr.w	r2, r3, #1
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbfe:	f003 0304 	and.w	r3, r3, #4
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00b      	beq.n	800dc1e <HAL_UART_IRQHandler+0xd2>
 800dc06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc16:	f043 0202 	orr.w	r2, r3, #2
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc22:	f003 0302 	and.w	r3, r3, #2
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00b      	beq.n	800dc42 <HAL_UART_IRQHandler+0xf6>
 800dc2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d005      	beq.n	800dc42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc3a:	f043 0204 	orr.w	r2, r3, #4
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc46:	f003 0308 	and.w	r3, r3, #8
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d011      	beq.n	800dc72 <HAL_UART_IRQHandler+0x126>
 800dc4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc52:	f003 0320 	and.w	r3, r3, #32
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d105      	bne.n	800dc66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dc5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d005      	beq.n	800dc72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc6a:	f043 0208 	orr.w	r2, r3, #8
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 820a 	beq.w	800e090 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc80:	f003 0320 	and.w	r3, r3, #32
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d008      	beq.n	800dc9a <HAL_UART_IRQHandler+0x14e>
 800dc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dc8c:	f003 0320 	and.w	r3, r3, #32
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d002      	beq.n	800dc9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fb62 	bl	800e35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca4:	2b40      	cmp	r3, #64	@ 0x40
 800dca6:	bf0c      	ite	eq
 800dca8:	2301      	moveq	r3, #1
 800dcaa:	2300      	movne	r3, #0
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcb6:	f003 0308 	and.w	r3, r3, #8
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <HAL_UART_IRQHandler+0x17a>
 800dcbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d04f      	beq.n	800dd66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fa6d 	bl	800e1a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd6:	2b40      	cmp	r3, #64	@ 0x40
 800dcd8:	d141      	bne.n	800dd5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	3314      	adds	r3, #20
 800dce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dce8:	e853 3f00 	ldrex	r3, [r3]
 800dcec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dcf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dcf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3314      	adds	r3, #20
 800dd02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dd06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dd0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dd12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dd16:	e841 2300 	strex	r3, r2, [r1]
 800dd1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dd1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1d9      	bne.n	800dcda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d013      	beq.n	800dd56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd32:	4a8a      	ldr	r2, [pc, #552]	@ (800df5c <HAL_UART_IRQHandler+0x410>)
 800dd34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7fb fd43 	bl	80097c6 <HAL_DMA_Abort_IT>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d016      	beq.n	800dd74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd54:	e00e      	b.n	800dd74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f9b6 	bl	800e0c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd5c:	e00a      	b.n	800dd74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f9b2 	bl	800e0c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd64:	e006      	b.n	800dd74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f9ae 	bl	800e0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800dd72:	e18d      	b.n	800e090 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd74:	bf00      	nop
    return;
 800dd76:	e18b      	b.n	800e090 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	f040 8167 	bne.w	800e050 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800dd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd86:	f003 0310 	and.w	r3, r3, #16
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	f000 8160 	beq.w	800e050 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800dd90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dd94:	f003 0310 	and.w	r3, r3, #16
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 8159 	beq.w	800e050 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dd9e:	2300      	movs	r3, #0
 800dda0:	60bb      	str	r3, [r7, #8]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60bb      	str	r3, [r7, #8]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	60bb      	str	r3, [r7, #8]
 800ddb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ddbe:	2b40      	cmp	r3, #64	@ 0x40
 800ddc0:	f040 80ce 	bne.w	800df60 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ddd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 80a9 	beq.w	800df2c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ddde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800dde2:	429a      	cmp	r2, r3
 800dde4:	f080 80a2 	bcs.w	800df2c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ddee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf4:	69db      	ldr	r3, [r3, #28]
 800ddf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ddfa:	f000 8088 	beq.w	800df0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	330c      	adds	r3, #12
 800de04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de0c:	e853 3f00 	ldrex	r3, [r3]
 800de10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800de14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800de18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	330c      	adds	r3, #12
 800de26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800de2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800de2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800de36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800de3a:	e841 2300 	strex	r3, r2, [r1]
 800de3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800de42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1d9      	bne.n	800ddfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3314      	adds	r3, #20
 800de50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de54:	e853 3f00 	ldrex	r3, [r3]
 800de58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800de5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de5c:	f023 0301 	bic.w	r3, r3, #1
 800de60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3314      	adds	r3, #20
 800de6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800de6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800de72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800de7a:	e841 2300 	strex	r3, r2, [r1]
 800de7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800de80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de82:	2b00      	cmp	r3, #0
 800de84:	d1e1      	bne.n	800de4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	3314      	adds	r3, #20
 800de8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de90:	e853 3f00 	ldrex	r3, [r3]
 800de94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800de96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3314      	adds	r3, #20
 800dea6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800deaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800deac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800deb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800deb2:	e841 2300 	strex	r3, r2, [r1]
 800deb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800deb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1e3      	bne.n	800de86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2220      	movs	r2, #32
 800dec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	330c      	adds	r3, #12
 800ded2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded6:	e853 3f00 	ldrex	r3, [r3]
 800deda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dedc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dede:	f023 0310 	bic.w	r3, r3, #16
 800dee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	330c      	adds	r3, #12
 800deec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800def0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800def2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800def4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800def6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800def8:	e841 2300 	strex	r3, r2, [r1]
 800defc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800defe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1e3      	bne.n	800decc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fb fbec 	bl	80096e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2202      	movs	r2, #2
 800df12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	b29b      	uxth	r3, r3
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f8d9 	bl	800e0dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800df2a:	e0b3      	b.n	800e094 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800df30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800df34:	429a      	cmp	r2, r3
 800df36:	f040 80ad 	bne.w	800e094 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df3e:	69db      	ldr	r3, [r3, #28]
 800df40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df44:	f040 80a6 	bne.w	800e094 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2202      	movs	r2, #2
 800df4c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800df52:	4619      	mov	r1, r3
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 f8c1 	bl	800e0dc <HAL_UARTEx_RxEventCallback>
      return;
 800df5a:	e09b      	b.n	800e094 <HAL_UART_IRQHandler+0x548>
 800df5c:	0800e26d 	.word	0x0800e26d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df68:	b29b      	uxth	r3, r3
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800df74:	b29b      	uxth	r3, r3
 800df76:	2b00      	cmp	r3, #0
 800df78:	f000 808e 	beq.w	800e098 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800df7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800df80:	2b00      	cmp	r3, #0
 800df82:	f000 8089 	beq.w	800e098 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	330c      	adds	r3, #12
 800df8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df90:	e853 3f00 	ldrex	r3, [r3]
 800df94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	330c      	adds	r3, #12
 800dfa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800dfaa:	647a      	str	r2, [r7, #68]	@ 0x44
 800dfac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfb2:	e841 2300 	strex	r3, r2, [r1]
 800dfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1e3      	bne.n	800df86 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	3314      	adds	r3, #20
 800dfc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc8:	e853 3f00 	ldrex	r3, [r3]
 800dfcc:	623b      	str	r3, [r7, #32]
   return(result);
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	f023 0301 	bic.w	r3, r3, #1
 800dfd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	3314      	adds	r3, #20
 800dfde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dfe2:	633a      	str	r2, [r7, #48]	@ 0x30
 800dfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfea:	e841 2300 	strex	r3, r2, [r1]
 800dfee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1e3      	bne.n	800dfbe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2220      	movs	r2, #32
 800dffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	330c      	adds	r3, #12
 800e00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	e853 3f00 	ldrex	r3, [r3]
 800e012:	60fb      	str	r3, [r7, #12]
   return(result);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f023 0310 	bic.w	r3, r3, #16
 800e01a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	330c      	adds	r3, #12
 800e024:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e028:	61fa      	str	r2, [r7, #28]
 800e02a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02c:	69b9      	ldr	r1, [r7, #24]
 800e02e:	69fa      	ldr	r2, [r7, #28]
 800e030:	e841 2300 	strex	r3, r2, [r1]
 800e034:	617b      	str	r3, [r7, #20]
   return(result);
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1e3      	bne.n	800e004 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2202      	movs	r2, #2
 800e040:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e046:	4619      	mov	r1, r3
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f847 	bl	800e0dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e04e:	e023      	b.n	800e098 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d009      	beq.n	800e070 <HAL_UART_IRQHandler+0x524>
 800e05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e064:	2b00      	cmp	r3, #0
 800e066:	d003      	beq.n	800e070 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f910 	bl	800e28e <UART_Transmit_IT>
    return;
 800e06e:	e014      	b.n	800e09a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d00e      	beq.n	800e09a <HAL_UART_IRQHandler+0x54e>
 800e07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e084:	2b00      	cmp	r3, #0
 800e086:	d008      	beq.n	800e09a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f950 	bl	800e32e <UART_EndTransmit_IT>
    return;
 800e08e:	e004      	b.n	800e09a <HAL_UART_IRQHandler+0x54e>
    return;
 800e090:	bf00      	nop
 800e092:	e002      	b.n	800e09a <HAL_UART_IRQHandler+0x54e>
      return;
 800e094:	bf00      	nop
 800e096:	e000      	b.n	800e09a <HAL_UART_IRQHandler+0x54e>
      return;
 800e098:	bf00      	nop
  }
}
 800e09a:	37e8      	adds	r7, #232	@ 0xe8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	60f8      	str	r0, [r7, #12]
 800e0fc:	60b9      	str	r1, [r7, #8]
 800e0fe:	603b      	str	r3, [r7, #0]
 800e100:	4613      	mov	r3, r2
 800e102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e104:	e03b      	b.n	800e17e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e106:	6a3b      	ldr	r3, [r7, #32]
 800e108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e10c:	d037      	beq.n	800e17e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e10e:	f7fb f9a9 	bl	8009464 <HAL_GetTick>
 800e112:	4602      	mov	r2, r0
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	6a3a      	ldr	r2, [r7, #32]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d302      	bcc.n	800e124 <UART_WaitOnFlagUntilTimeout+0x30>
 800e11e:	6a3b      	ldr	r3, [r7, #32]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d101      	bne.n	800e128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e03a      	b.n	800e19e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	f003 0304 	and.w	r3, r3, #4
 800e132:	2b00      	cmp	r3, #0
 800e134:	d023      	beq.n	800e17e <UART_WaitOnFlagUntilTimeout+0x8a>
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	2b80      	cmp	r3, #128	@ 0x80
 800e13a:	d020      	beq.n	800e17e <UART_WaitOnFlagUntilTimeout+0x8a>
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	2b40      	cmp	r3, #64	@ 0x40
 800e140:	d01d      	beq.n	800e17e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 0308 	and.w	r3, r3, #8
 800e14c:	2b08      	cmp	r3, #8
 800e14e:	d116      	bne.n	800e17e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	617b      	str	r3, [r7, #20]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f000 f81d 	bl	800e1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2208      	movs	r2, #8
 800e170:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e00f      	b.n	800e19e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	4013      	ands	r3, r2
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	bf0c      	ite	eq
 800e18e:	2301      	moveq	r3, #1
 800e190:	2300      	movne	r3, #0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	461a      	mov	r2, r3
 800e196:	79fb      	ldrb	r3, [r7, #7]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d0b4      	beq.n	800e106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b095      	sub	sp, #84	@ 0x54
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	330c      	adds	r3, #12
 800e1b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1b8:	e853 3f00 	ldrex	r3, [r3]
 800e1bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	330c      	adds	r3, #12
 800e1cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e1ce:	643a      	str	r2, [r7, #64]	@ 0x40
 800e1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e1d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1d6:	e841 2300 	strex	r3, r2, [r1]
 800e1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1e5      	bne.n	800e1ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3314      	adds	r3, #20
 800e1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ea:	6a3b      	ldr	r3, [r7, #32]
 800e1ec:	e853 3f00 	ldrex	r3, [r3]
 800e1f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	f023 0301 	bic.w	r3, r3, #1
 800e1f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3314      	adds	r3, #20
 800e200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e20a:	e841 2300 	strex	r3, r2, [r1]
 800e20e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e212:	2b00      	cmp	r3, #0
 800e214:	d1e5      	bne.n	800e1e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d119      	bne.n	800e252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	330c      	adds	r3, #12
 800e224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	e853 3f00 	ldrex	r3, [r3]
 800e22c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	f023 0310 	bic.w	r3, r3, #16
 800e234:	647b      	str	r3, [r7, #68]	@ 0x44
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	330c      	adds	r3, #12
 800e23c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e23e:	61ba      	str	r2, [r7, #24]
 800e240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e242:	6979      	ldr	r1, [r7, #20]
 800e244:	69ba      	ldr	r2, [r7, #24]
 800e246:	e841 2300 	strex	r3, r2, [r1]
 800e24a:	613b      	str	r3, [r7, #16]
   return(result);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d1e5      	bne.n	800e21e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2220      	movs	r2, #32
 800e256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e260:	bf00      	nop
 800e262:	3754      	adds	r7, #84	@ 0x54
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f7ff ff21 	bl	800e0c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e286:	bf00      	nop
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e28e:	b480      	push	{r7}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b21      	cmp	r3, #33	@ 0x21
 800e2a0:	d13e      	bne.n	800e320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2aa:	d114      	bne.n	800e2d6 <UART_Transmit_IT+0x48>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d110      	bne.n	800e2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	881b      	ldrh	r3, [r3, #0]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	1c9a      	adds	r2, r3, #2
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	621a      	str	r2, [r3, #32]
 800e2d4:	e008      	b.n	800e2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	1c59      	adds	r1, r3, #1
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6211      	str	r1, [r2, #32]
 800e2e0:	781a      	ldrb	r2, [r3, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d10f      	bne.n	800e31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	68da      	ldr	r2, [r3, #12]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	e000      	b.n	800e322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e320:	2302      	movs	r3, #2
  }
}
 800e322:	4618      	mov	r0, r3
 800e324:	3714      	adds	r7, #20
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr

0800e32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68da      	ldr	r2, [r3, #12]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2220      	movs	r2, #32
 800e34a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7ff fea6 	bl	800e0a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b08c      	sub	sp, #48	@ 0x30
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800e366:	2300      	movs	r3, #0
 800e368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b22      	cmp	r3, #34	@ 0x22
 800e378:	f040 80aa 	bne.w	800e4d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e384:	d115      	bne.n	800e3b2 <UART_Receive_IT+0x54>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d111      	bne.n	800e3b2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e392:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3aa:	1c9a      	adds	r2, r3, #2
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	629a      	str	r2, [r3, #40]	@ 0x28
 800e3b0:	e024      	b.n	800e3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	689b      	ldr	r3, [r3, #8]
 800e3bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3c0:	d007      	beq.n	800e3d2 <UART_Receive_IT+0x74>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10a      	bne.n	800e3e0 <UART_Receive_IT+0x82>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	701a      	strb	r2, [r3, #0]
 800e3de:	e008      	b.n	800e3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f6:	1c5a      	adds	r2, r3, #1
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e400:	b29b      	uxth	r3, r3
 800e402:	3b01      	subs	r3, #1
 800e404:	b29b      	uxth	r3, r3
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	4619      	mov	r1, r3
 800e40a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d15d      	bne.n	800e4cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68da      	ldr	r2, [r3, #12]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f022 0220 	bic.w	r2, r2, #32
 800e41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68da      	ldr	r2, [r3, #12]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	695a      	ldr	r2, [r3, #20]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f022 0201 	bic.w	r2, r2, #1
 800e43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2220      	movs	r2, #32
 800e444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e452:	2b01      	cmp	r3, #1
 800e454:	d135      	bne.n	800e4c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	330c      	adds	r3, #12
 800e462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	e853 3f00 	ldrex	r3, [r3]
 800e46a:	613b      	str	r3, [r7, #16]
   return(result);
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	f023 0310 	bic.w	r3, r3, #16
 800e472:	627b      	str	r3, [r7, #36]	@ 0x24
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	330c      	adds	r3, #12
 800e47a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e47c:	623a      	str	r2, [r7, #32]
 800e47e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e480:	69f9      	ldr	r1, [r7, #28]
 800e482:	6a3a      	ldr	r2, [r7, #32]
 800e484:	e841 2300 	strex	r3, r2, [r1]
 800e488:	61bb      	str	r3, [r7, #24]
   return(result);
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1e5      	bne.n	800e45c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f003 0310 	and.w	r3, r3, #16
 800e49a:	2b10      	cmp	r3, #16
 800e49c:	d10a      	bne.n	800e4b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60fb      	str	r3, [r7, #12]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	60fb      	str	r3, [r7, #12]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7ff fe0e 	bl	800e0dc <HAL_UARTEx_RxEventCallback>
 800e4c0:	e002      	b.n	800e4c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7ff fdf6 	bl	800e0b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	e002      	b.n	800e4d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	e000      	b.n	800e4d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e4d0:	2302      	movs	r3, #2
  }
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3730      	adds	r7, #48	@ 0x30
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4e0:	b0c0      	sub	sp, #256	@ 0x100
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e4f8:	68d9      	ldr	r1, [r3, #12]
 800e4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	ea40 0301 	orr.w	r3, r0, r1
 800e504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e50a:	689a      	ldr	r2, [r3, #8]
 800e50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e510:	691b      	ldr	r3, [r3, #16]
 800e512:	431a      	orrs	r2, r3
 800e514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	431a      	orrs	r2, r3
 800e51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	4313      	orrs	r3, r2
 800e524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e534:	f021 010c 	bic.w	r1, r1, #12
 800e538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e542:	430b      	orrs	r3, r1
 800e544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e556:	6999      	ldr	r1, [r3, #24]
 800e558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	ea40 0301 	orr.w	r3, r0, r1
 800e562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	4b8f      	ldr	r3, [pc, #572]	@ (800e7a8 <UART_SetConfig+0x2cc>)
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d005      	beq.n	800e57c <UART_SetConfig+0xa0>
 800e570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	4b8d      	ldr	r3, [pc, #564]	@ (800e7ac <UART_SetConfig+0x2d0>)
 800e578:	429a      	cmp	r2, r3
 800e57a:	d104      	bne.n	800e586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e57c:	f7fe fdc2 	bl	800d104 <HAL_RCC_GetPCLK2Freq>
 800e580:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e584:	e003      	b.n	800e58e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e586:	f7fe fda9 	bl	800d0dc <HAL_RCC_GetPCLK1Freq>
 800e58a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e592:	69db      	ldr	r3, [r3, #28]
 800e594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e598:	f040 810c 	bne.w	800e7b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e5a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e5aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	462b      	mov	r3, r5
 800e5b2:	1891      	adds	r1, r2, r2
 800e5b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e5b6:	415b      	adcs	r3, r3
 800e5b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e5be:	4621      	mov	r1, r4
 800e5c0:	eb12 0801 	adds.w	r8, r2, r1
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	eb43 0901 	adc.w	r9, r3, r1
 800e5ca:	f04f 0200 	mov.w	r2, #0
 800e5ce:	f04f 0300 	mov.w	r3, #0
 800e5d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e5d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e5da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e5de:	4690      	mov	r8, r2
 800e5e0:	4699      	mov	r9, r3
 800e5e2:	4623      	mov	r3, r4
 800e5e4:	eb18 0303 	adds.w	r3, r8, r3
 800e5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	eb49 0303 	adc.w	r3, r9, r3
 800e5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e602:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e60a:	460b      	mov	r3, r1
 800e60c:	18db      	adds	r3, r3, r3
 800e60e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e610:	4613      	mov	r3, r2
 800e612:	eb42 0303 	adc.w	r3, r2, r3
 800e616:	657b      	str	r3, [r7, #84]	@ 0x54
 800e618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e61c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e620:	f7f1 fe36 	bl	8000290 <__aeabi_uldivmod>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	4b61      	ldr	r3, [pc, #388]	@ (800e7b0 <UART_SetConfig+0x2d4>)
 800e62a:	fba3 2302 	umull	r2, r3, r3, r2
 800e62e:	095b      	lsrs	r3, r3, #5
 800e630:	011c      	lsls	r4, r3, #4
 800e632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e636:	2200      	movs	r2, #0
 800e638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e63c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e644:	4642      	mov	r2, r8
 800e646:	464b      	mov	r3, r9
 800e648:	1891      	adds	r1, r2, r2
 800e64a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e64c:	415b      	adcs	r3, r3
 800e64e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e654:	4641      	mov	r1, r8
 800e656:	eb12 0a01 	adds.w	sl, r2, r1
 800e65a:	4649      	mov	r1, r9
 800e65c:	eb43 0b01 	adc.w	fp, r3, r1
 800e660:	f04f 0200 	mov.w	r2, #0
 800e664:	f04f 0300 	mov.w	r3, #0
 800e668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e66c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e674:	4692      	mov	sl, r2
 800e676:	469b      	mov	fp, r3
 800e678:	4643      	mov	r3, r8
 800e67a:	eb1a 0303 	adds.w	r3, sl, r3
 800e67e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e682:	464b      	mov	r3, r9
 800e684:	eb4b 0303 	adc.w	r3, fp, r3
 800e688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e698:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800e69c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	18db      	adds	r3, r3, r3
 800e6a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	eb42 0303 	adc.w	r3, r2, r3
 800e6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800e6b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800e6b6:	f7f1 fdeb 	bl	8000290 <__aeabi_uldivmod>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4b3b      	ldr	r3, [pc, #236]	@ (800e7b0 <UART_SetConfig+0x2d4>)
 800e6c2:	fba3 2301 	umull	r2, r3, r3, r1
 800e6c6:	095b      	lsrs	r3, r3, #5
 800e6c8:	2264      	movs	r2, #100	@ 0x64
 800e6ca:	fb02 f303 	mul.w	r3, r2, r3
 800e6ce:	1acb      	subs	r3, r1, r3
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800e6d6:	4b36      	ldr	r3, [pc, #216]	@ (800e7b0 <UART_SetConfig+0x2d4>)
 800e6d8:	fba3 2302 	umull	r2, r3, r3, r2
 800e6dc:	095b      	lsrs	r3, r3, #5
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800e6e4:	441c      	add	r4, r3
 800e6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e6f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800e6f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	1891      	adds	r1, r2, r2
 800e6fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e700:	415b      	adcs	r3, r3
 800e702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800e708:	4641      	mov	r1, r8
 800e70a:	1851      	adds	r1, r2, r1
 800e70c:	6339      	str	r1, [r7, #48]	@ 0x30
 800e70e:	4649      	mov	r1, r9
 800e710:	414b      	adcs	r3, r1
 800e712:	637b      	str	r3, [r7, #52]	@ 0x34
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	f04f 0300 	mov.w	r3, #0
 800e71c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800e720:	4659      	mov	r1, fp
 800e722:	00cb      	lsls	r3, r1, #3
 800e724:	4651      	mov	r1, sl
 800e726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e72a:	4651      	mov	r1, sl
 800e72c:	00ca      	lsls	r2, r1, #3
 800e72e:	4610      	mov	r0, r2
 800e730:	4619      	mov	r1, r3
 800e732:	4603      	mov	r3, r0
 800e734:	4642      	mov	r2, r8
 800e736:	189b      	adds	r3, r3, r2
 800e738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e73c:	464b      	mov	r3, r9
 800e73e:	460a      	mov	r2, r1
 800e740:	eb42 0303 	adc.w	r3, r2, r3
 800e744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e754:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e75c:	460b      	mov	r3, r1
 800e75e:	18db      	adds	r3, r3, r3
 800e760:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e762:	4613      	mov	r3, r2
 800e764:	eb42 0303 	adc.w	r3, r2, r3
 800e768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e76a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e76e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800e772:	f7f1 fd8d 	bl	8000290 <__aeabi_uldivmod>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b0 <UART_SetConfig+0x2d4>)
 800e77c:	fba3 1302 	umull	r1, r3, r3, r2
 800e780:	095b      	lsrs	r3, r3, #5
 800e782:	2164      	movs	r1, #100	@ 0x64
 800e784:	fb01 f303 	mul.w	r3, r1, r3
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	3332      	adds	r3, #50	@ 0x32
 800e78e:	4a08      	ldr	r2, [pc, #32]	@ (800e7b0 <UART_SetConfig+0x2d4>)
 800e790:	fba2 2303 	umull	r2, r3, r2, r3
 800e794:	095b      	lsrs	r3, r3, #5
 800e796:	f003 0207 	and.w	r2, r3, #7
 800e79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4422      	add	r2, r4
 800e7a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e7a4:	e106      	b.n	800e9b4 <UART_SetConfig+0x4d8>
 800e7a6:	bf00      	nop
 800e7a8:	40011000 	.word	0x40011000
 800e7ac:	40011400 	.word	0x40011400
 800e7b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e7be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800e7c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800e7c6:	4642      	mov	r2, r8
 800e7c8:	464b      	mov	r3, r9
 800e7ca:	1891      	adds	r1, r2, r2
 800e7cc:	6239      	str	r1, [r7, #32]
 800e7ce:	415b      	adcs	r3, r3
 800e7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e7d6:	4641      	mov	r1, r8
 800e7d8:	1854      	adds	r4, r2, r1
 800e7da:	4649      	mov	r1, r9
 800e7dc:	eb43 0501 	adc.w	r5, r3, r1
 800e7e0:	f04f 0200 	mov.w	r2, #0
 800e7e4:	f04f 0300 	mov.w	r3, #0
 800e7e8:	00eb      	lsls	r3, r5, #3
 800e7ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e7ee:	00e2      	lsls	r2, r4, #3
 800e7f0:	4614      	mov	r4, r2
 800e7f2:	461d      	mov	r5, r3
 800e7f4:	4643      	mov	r3, r8
 800e7f6:	18e3      	adds	r3, r4, r3
 800e7f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e7fc:	464b      	mov	r3, r9
 800e7fe:	eb45 0303 	adc.w	r3, r5, r3
 800e802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e816:	f04f 0200 	mov.w	r2, #0
 800e81a:	f04f 0300 	mov.w	r3, #0
 800e81e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800e822:	4629      	mov	r1, r5
 800e824:	008b      	lsls	r3, r1, #2
 800e826:	4621      	mov	r1, r4
 800e828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e82c:	4621      	mov	r1, r4
 800e82e:	008a      	lsls	r2, r1, #2
 800e830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e834:	f7f1 fd2c 	bl	8000290 <__aeabi_uldivmod>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4b60      	ldr	r3, [pc, #384]	@ (800e9c0 <UART_SetConfig+0x4e4>)
 800e83e:	fba3 2302 	umull	r2, r3, r3, r2
 800e842:	095b      	lsrs	r3, r3, #5
 800e844:	011c      	lsls	r4, r3, #4
 800e846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e84a:	2200      	movs	r2, #0
 800e84c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800e858:	4642      	mov	r2, r8
 800e85a:	464b      	mov	r3, r9
 800e85c:	1891      	adds	r1, r2, r2
 800e85e:	61b9      	str	r1, [r7, #24]
 800e860:	415b      	adcs	r3, r3
 800e862:	61fb      	str	r3, [r7, #28]
 800e864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e868:	4641      	mov	r1, r8
 800e86a:	1851      	adds	r1, r2, r1
 800e86c:	6139      	str	r1, [r7, #16]
 800e86e:	4649      	mov	r1, r9
 800e870:	414b      	adcs	r3, r1
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	f04f 0200 	mov.w	r2, #0
 800e878:	f04f 0300 	mov.w	r3, #0
 800e87c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e880:	4659      	mov	r1, fp
 800e882:	00cb      	lsls	r3, r1, #3
 800e884:	4651      	mov	r1, sl
 800e886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e88a:	4651      	mov	r1, sl
 800e88c:	00ca      	lsls	r2, r1, #3
 800e88e:	4610      	mov	r0, r2
 800e890:	4619      	mov	r1, r3
 800e892:	4603      	mov	r3, r0
 800e894:	4642      	mov	r2, r8
 800e896:	189b      	adds	r3, r3, r2
 800e898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e89c:	464b      	mov	r3, r9
 800e89e:	460a      	mov	r2, r1
 800e8a0:	eb42 0303 	adc.w	r3, r2, r3
 800e8a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e8b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e8b4:	f04f 0200 	mov.w	r2, #0
 800e8b8:	f04f 0300 	mov.w	r3, #0
 800e8bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800e8c0:	4649      	mov	r1, r9
 800e8c2:	008b      	lsls	r3, r1, #2
 800e8c4:	4641      	mov	r1, r8
 800e8c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e8ca:	4641      	mov	r1, r8
 800e8cc:	008a      	lsls	r2, r1, #2
 800e8ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e8d2:	f7f1 fcdd 	bl	8000290 <__aeabi_uldivmod>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4611      	mov	r1, r2
 800e8dc:	4b38      	ldr	r3, [pc, #224]	@ (800e9c0 <UART_SetConfig+0x4e4>)
 800e8de:	fba3 2301 	umull	r2, r3, r3, r1
 800e8e2:	095b      	lsrs	r3, r3, #5
 800e8e4:	2264      	movs	r2, #100	@ 0x64
 800e8e6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ea:	1acb      	subs	r3, r1, r3
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	3332      	adds	r3, #50	@ 0x32
 800e8f0:	4a33      	ldr	r2, [pc, #204]	@ (800e9c0 <UART_SetConfig+0x4e4>)
 800e8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8f6:	095b      	lsrs	r3, r3, #5
 800e8f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e8fc:	441c      	add	r4, r3
 800e8fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e902:	2200      	movs	r2, #0
 800e904:	673b      	str	r3, [r7, #112]	@ 0x70
 800e906:	677a      	str	r2, [r7, #116]	@ 0x74
 800e908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800e90c:	4642      	mov	r2, r8
 800e90e:	464b      	mov	r3, r9
 800e910:	1891      	adds	r1, r2, r2
 800e912:	60b9      	str	r1, [r7, #8]
 800e914:	415b      	adcs	r3, r3
 800e916:	60fb      	str	r3, [r7, #12]
 800e918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e91c:	4641      	mov	r1, r8
 800e91e:	1851      	adds	r1, r2, r1
 800e920:	6039      	str	r1, [r7, #0]
 800e922:	4649      	mov	r1, r9
 800e924:	414b      	adcs	r3, r1
 800e926:	607b      	str	r3, [r7, #4]
 800e928:	f04f 0200 	mov.w	r2, #0
 800e92c:	f04f 0300 	mov.w	r3, #0
 800e930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e934:	4659      	mov	r1, fp
 800e936:	00cb      	lsls	r3, r1, #3
 800e938:	4651      	mov	r1, sl
 800e93a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e93e:	4651      	mov	r1, sl
 800e940:	00ca      	lsls	r2, r1, #3
 800e942:	4610      	mov	r0, r2
 800e944:	4619      	mov	r1, r3
 800e946:	4603      	mov	r3, r0
 800e948:	4642      	mov	r2, r8
 800e94a:	189b      	adds	r3, r3, r2
 800e94c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e94e:	464b      	mov	r3, r9
 800e950:	460a      	mov	r2, r1
 800e952:	eb42 0303 	adc.w	r3, r2, r3
 800e956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	663b      	str	r3, [r7, #96]	@ 0x60
 800e962:	667a      	str	r2, [r7, #100]	@ 0x64
 800e964:	f04f 0200 	mov.w	r2, #0
 800e968:	f04f 0300 	mov.w	r3, #0
 800e96c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800e970:	4649      	mov	r1, r9
 800e972:	008b      	lsls	r3, r1, #2
 800e974:	4641      	mov	r1, r8
 800e976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e97a:	4641      	mov	r1, r8
 800e97c:	008a      	lsls	r2, r1, #2
 800e97e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800e982:	f7f1 fc85 	bl	8000290 <__aeabi_uldivmod>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c0 <UART_SetConfig+0x4e4>)
 800e98c:	fba3 1302 	umull	r1, r3, r3, r2
 800e990:	095b      	lsrs	r3, r3, #5
 800e992:	2164      	movs	r1, #100	@ 0x64
 800e994:	fb01 f303 	mul.w	r3, r1, r3
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	011b      	lsls	r3, r3, #4
 800e99c:	3332      	adds	r3, #50	@ 0x32
 800e99e:	4a08      	ldr	r2, [pc, #32]	@ (800e9c0 <UART_SetConfig+0x4e4>)
 800e9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a4:	095b      	lsrs	r3, r3, #5
 800e9a6:	f003 020f 	and.w	r2, r3, #15
 800e9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4422      	add	r2, r4
 800e9b2:	609a      	str	r2, [r3, #8]
}
 800e9b4:	bf00      	nop
 800e9b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9c0:	51eb851f 	.word	0x51eb851f

0800e9c4 <calloc>:
 800e9c4:	4b02      	ldr	r3, [pc, #8]	@ (800e9d0 <calloc+0xc>)
 800e9c6:	460a      	mov	r2, r1
 800e9c8:	4601      	mov	r1, r0
 800e9ca:	6818      	ldr	r0, [r3, #0]
 800e9cc:	f000 b802 	b.w	800e9d4 <_calloc_r>
 800e9d0:	2000056c 	.word	0x2000056c

0800e9d4 <_calloc_r>:
 800e9d4:	b570      	push	{r4, r5, r6, lr}
 800e9d6:	fba1 5402 	umull	r5, r4, r1, r2
 800e9da:	b93c      	cbnz	r4, 800e9ec <_calloc_r+0x18>
 800e9dc:	4629      	mov	r1, r5
 800e9de:	f000 f837 	bl	800ea50 <_malloc_r>
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	b928      	cbnz	r0, 800e9f2 <_calloc_r+0x1e>
 800e9e6:	2600      	movs	r6, #0
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	bd70      	pop	{r4, r5, r6, pc}
 800e9ec:	220c      	movs	r2, #12
 800e9ee:	6002      	str	r2, [r0, #0]
 800e9f0:	e7f9      	b.n	800e9e6 <_calloc_r+0x12>
 800e9f2:	462a      	mov	r2, r5
 800e9f4:	4621      	mov	r1, r4
 800e9f6:	f000 fa28 	bl	800ee4a <memset>
 800e9fa:	e7f5      	b.n	800e9e8 <_calloc_r+0x14>

0800e9fc <free>:
 800e9fc:	4b02      	ldr	r3, [pc, #8]	@ (800ea08 <free+0xc>)
 800e9fe:	4601      	mov	r1, r0
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	f000 ba77 	b.w	800eef4 <_free_r>
 800ea06:	bf00      	nop
 800ea08:	2000056c 	.word	0x2000056c

0800ea0c <sbrk_aligned>:
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	4e0f      	ldr	r6, [pc, #60]	@ (800ea4c <sbrk_aligned+0x40>)
 800ea10:	460c      	mov	r4, r1
 800ea12:	6831      	ldr	r1, [r6, #0]
 800ea14:	4605      	mov	r5, r0
 800ea16:	b911      	cbnz	r1, 800ea1e <sbrk_aligned+0x12>
 800ea18:	f000 fa20 	bl	800ee5c <_sbrk_r>
 800ea1c:	6030      	str	r0, [r6, #0]
 800ea1e:	4621      	mov	r1, r4
 800ea20:	4628      	mov	r0, r5
 800ea22:	f000 fa1b 	bl	800ee5c <_sbrk_r>
 800ea26:	1c43      	adds	r3, r0, #1
 800ea28:	d103      	bne.n	800ea32 <sbrk_aligned+0x26>
 800ea2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ea2e:	4620      	mov	r0, r4
 800ea30:	bd70      	pop	{r4, r5, r6, pc}
 800ea32:	1cc4      	adds	r4, r0, #3
 800ea34:	f024 0403 	bic.w	r4, r4, #3
 800ea38:	42a0      	cmp	r0, r4
 800ea3a:	d0f8      	beq.n	800ea2e <sbrk_aligned+0x22>
 800ea3c:	1a21      	subs	r1, r4, r0
 800ea3e:	4628      	mov	r0, r5
 800ea40:	f000 fa0c 	bl	800ee5c <_sbrk_r>
 800ea44:	3001      	adds	r0, #1
 800ea46:	d1f2      	bne.n	800ea2e <sbrk_aligned+0x22>
 800ea48:	e7ef      	b.n	800ea2a <sbrk_aligned+0x1e>
 800ea4a:	bf00      	nop
 800ea4c:	20000ddc 	.word	0x20000ddc

0800ea50 <_malloc_r>:
 800ea50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea54:	1ccd      	adds	r5, r1, #3
 800ea56:	f025 0503 	bic.w	r5, r5, #3
 800ea5a:	3508      	adds	r5, #8
 800ea5c:	2d0c      	cmp	r5, #12
 800ea5e:	bf38      	it	cc
 800ea60:	250c      	movcc	r5, #12
 800ea62:	2d00      	cmp	r5, #0
 800ea64:	4606      	mov	r6, r0
 800ea66:	db01      	blt.n	800ea6c <_malloc_r+0x1c>
 800ea68:	42a9      	cmp	r1, r5
 800ea6a:	d904      	bls.n	800ea76 <_malloc_r+0x26>
 800ea6c:	230c      	movs	r3, #12
 800ea6e:	6033      	str	r3, [r6, #0]
 800ea70:	2000      	movs	r0, #0
 800ea72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb4c <_malloc_r+0xfc>
 800ea7a:	f000 f869 	bl	800eb50 <__malloc_lock>
 800ea7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ea82:	461c      	mov	r4, r3
 800ea84:	bb44      	cbnz	r4, 800ead8 <_malloc_r+0x88>
 800ea86:	4629      	mov	r1, r5
 800ea88:	4630      	mov	r0, r6
 800ea8a:	f7ff ffbf 	bl	800ea0c <sbrk_aligned>
 800ea8e:	1c43      	adds	r3, r0, #1
 800ea90:	4604      	mov	r4, r0
 800ea92:	d158      	bne.n	800eb46 <_malloc_r+0xf6>
 800ea94:	f8d8 4000 	ldr.w	r4, [r8]
 800ea98:	4627      	mov	r7, r4
 800ea9a:	2f00      	cmp	r7, #0
 800ea9c:	d143      	bne.n	800eb26 <_malloc_r+0xd6>
 800ea9e:	2c00      	cmp	r4, #0
 800eaa0:	d04b      	beq.n	800eb3a <_malloc_r+0xea>
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	4639      	mov	r1, r7
 800eaa6:	4630      	mov	r0, r6
 800eaa8:	eb04 0903 	add.w	r9, r4, r3
 800eaac:	f000 f9d6 	bl	800ee5c <_sbrk_r>
 800eab0:	4581      	cmp	r9, r0
 800eab2:	d142      	bne.n	800eb3a <_malloc_r+0xea>
 800eab4:	6821      	ldr	r1, [r4, #0]
 800eab6:	1a6d      	subs	r5, r5, r1
 800eab8:	4629      	mov	r1, r5
 800eaba:	4630      	mov	r0, r6
 800eabc:	f7ff ffa6 	bl	800ea0c <sbrk_aligned>
 800eac0:	3001      	adds	r0, #1
 800eac2:	d03a      	beq.n	800eb3a <_malloc_r+0xea>
 800eac4:	6823      	ldr	r3, [r4, #0]
 800eac6:	442b      	add	r3, r5
 800eac8:	6023      	str	r3, [r4, #0]
 800eaca:	f8d8 3000 	ldr.w	r3, [r8]
 800eace:	685a      	ldr	r2, [r3, #4]
 800ead0:	bb62      	cbnz	r2, 800eb2c <_malloc_r+0xdc>
 800ead2:	f8c8 7000 	str.w	r7, [r8]
 800ead6:	e00f      	b.n	800eaf8 <_malloc_r+0xa8>
 800ead8:	6822      	ldr	r2, [r4, #0]
 800eada:	1b52      	subs	r2, r2, r5
 800eadc:	d420      	bmi.n	800eb20 <_malloc_r+0xd0>
 800eade:	2a0b      	cmp	r2, #11
 800eae0:	d917      	bls.n	800eb12 <_malloc_r+0xc2>
 800eae2:	1961      	adds	r1, r4, r5
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	6025      	str	r5, [r4, #0]
 800eae8:	bf18      	it	ne
 800eaea:	6059      	strne	r1, [r3, #4]
 800eaec:	6863      	ldr	r3, [r4, #4]
 800eaee:	bf08      	it	eq
 800eaf0:	f8c8 1000 	streq.w	r1, [r8]
 800eaf4:	5162      	str	r2, [r4, r5]
 800eaf6:	604b      	str	r3, [r1, #4]
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f000 f82f 	bl	800eb5c <__malloc_unlock>
 800eafe:	f104 000b 	add.w	r0, r4, #11
 800eb02:	1d23      	adds	r3, r4, #4
 800eb04:	f020 0007 	bic.w	r0, r0, #7
 800eb08:	1ac2      	subs	r2, r0, r3
 800eb0a:	bf1c      	itt	ne
 800eb0c:	1a1b      	subne	r3, r3, r0
 800eb0e:	50a3      	strne	r3, [r4, r2]
 800eb10:	e7af      	b.n	800ea72 <_malloc_r+0x22>
 800eb12:	6862      	ldr	r2, [r4, #4]
 800eb14:	42a3      	cmp	r3, r4
 800eb16:	bf0c      	ite	eq
 800eb18:	f8c8 2000 	streq.w	r2, [r8]
 800eb1c:	605a      	strne	r2, [r3, #4]
 800eb1e:	e7eb      	b.n	800eaf8 <_malloc_r+0xa8>
 800eb20:	4623      	mov	r3, r4
 800eb22:	6864      	ldr	r4, [r4, #4]
 800eb24:	e7ae      	b.n	800ea84 <_malloc_r+0x34>
 800eb26:	463c      	mov	r4, r7
 800eb28:	687f      	ldr	r7, [r7, #4]
 800eb2a:	e7b6      	b.n	800ea9a <_malloc_r+0x4a>
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	42a3      	cmp	r3, r4
 800eb32:	d1fb      	bne.n	800eb2c <_malloc_r+0xdc>
 800eb34:	2300      	movs	r3, #0
 800eb36:	6053      	str	r3, [r2, #4]
 800eb38:	e7de      	b.n	800eaf8 <_malloc_r+0xa8>
 800eb3a:	230c      	movs	r3, #12
 800eb3c:	6033      	str	r3, [r6, #0]
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f000 f80c 	bl	800eb5c <__malloc_unlock>
 800eb44:	e794      	b.n	800ea70 <_malloc_r+0x20>
 800eb46:	6005      	str	r5, [r0, #0]
 800eb48:	e7d6      	b.n	800eaf8 <_malloc_r+0xa8>
 800eb4a:	bf00      	nop
 800eb4c:	20000de0 	.word	0x20000de0

0800eb50 <__malloc_lock>:
 800eb50:	4801      	ldr	r0, [pc, #4]	@ (800eb58 <__malloc_lock+0x8>)
 800eb52:	f000 b9be 	b.w	800eed2 <__retarget_lock_acquire_recursive>
 800eb56:	bf00      	nop
 800eb58:	20000f20 	.word	0x20000f20

0800eb5c <__malloc_unlock>:
 800eb5c:	4801      	ldr	r0, [pc, #4]	@ (800eb64 <__malloc_unlock+0x8>)
 800eb5e:	f000 b9b9 	b.w	800eed4 <__retarget_lock_release_recursive>
 800eb62:	bf00      	nop
 800eb64:	20000f20 	.word	0x20000f20

0800eb68 <siprintf>:
 800eb68:	b40e      	push	{r1, r2, r3}
 800eb6a:	b500      	push	{lr}
 800eb6c:	b09c      	sub	sp, #112	@ 0x70
 800eb6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800eb70:	9002      	str	r0, [sp, #8]
 800eb72:	9006      	str	r0, [sp, #24]
 800eb74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eb78:	4809      	ldr	r0, [pc, #36]	@ (800eba0 <siprintf+0x38>)
 800eb7a:	9107      	str	r1, [sp, #28]
 800eb7c:	9104      	str	r1, [sp, #16]
 800eb7e:	4909      	ldr	r1, [pc, #36]	@ (800eba4 <siprintf+0x3c>)
 800eb80:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb84:	9105      	str	r1, [sp, #20]
 800eb86:	6800      	ldr	r0, [r0, #0]
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	a902      	add	r1, sp, #8
 800eb8c:	f000 fa58 	bl	800f040 <_svfiprintf_r>
 800eb90:	9b02      	ldr	r3, [sp, #8]
 800eb92:	2200      	movs	r2, #0
 800eb94:	701a      	strb	r2, [r3, #0]
 800eb96:	b01c      	add	sp, #112	@ 0x70
 800eb98:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb9c:	b003      	add	sp, #12
 800eb9e:	4770      	bx	lr
 800eba0:	2000056c 	.word	0x2000056c
 800eba4:	ffff0208 	.word	0xffff0208

0800eba8 <std>:
 800eba8:	2300      	movs	r3, #0
 800ebaa:	b510      	push	{r4, lr}
 800ebac:	4604      	mov	r4, r0
 800ebae:	e9c0 3300 	strd	r3, r3, [r0]
 800ebb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebb6:	6083      	str	r3, [r0, #8]
 800ebb8:	8181      	strh	r1, [r0, #12]
 800ebba:	6643      	str	r3, [r0, #100]	@ 0x64
 800ebbc:	81c2      	strh	r2, [r0, #14]
 800ebbe:	6183      	str	r3, [r0, #24]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	2208      	movs	r2, #8
 800ebc4:	305c      	adds	r0, #92	@ 0x5c
 800ebc6:	f000 f940 	bl	800ee4a <memset>
 800ebca:	4b0d      	ldr	r3, [pc, #52]	@ (800ec00 <std+0x58>)
 800ebcc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebce:	4b0d      	ldr	r3, [pc, #52]	@ (800ec04 <std+0x5c>)
 800ebd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec08 <std+0x60>)
 800ebd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ec0c <std+0x64>)
 800ebd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebda:	4b0d      	ldr	r3, [pc, #52]	@ (800ec10 <std+0x68>)
 800ebdc:	6224      	str	r4, [r4, #32]
 800ebde:	429c      	cmp	r4, r3
 800ebe0:	d006      	beq.n	800ebf0 <std+0x48>
 800ebe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebe6:	4294      	cmp	r4, r2
 800ebe8:	d002      	beq.n	800ebf0 <std+0x48>
 800ebea:	33d0      	adds	r3, #208	@ 0xd0
 800ebec:	429c      	cmp	r4, r3
 800ebee:	d105      	bne.n	800ebfc <std+0x54>
 800ebf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebf8:	f000 b96a 	b.w	800eed0 <__retarget_lock_init_recursive>
 800ebfc:	bd10      	pop	{r4, pc}
 800ebfe:	bf00      	nop
 800ec00:	0800f931 	.word	0x0800f931
 800ec04:	0800f953 	.word	0x0800f953
 800ec08:	0800f98b 	.word	0x0800f98b
 800ec0c:	0800f9af 	.word	0x0800f9af
 800ec10:	20000de4 	.word	0x20000de4

0800ec14 <stdio_exit_handler>:
 800ec14:	4a02      	ldr	r2, [pc, #8]	@ (800ec20 <stdio_exit_handler+0xc>)
 800ec16:	4903      	ldr	r1, [pc, #12]	@ (800ec24 <stdio_exit_handler+0x10>)
 800ec18:	4803      	ldr	r0, [pc, #12]	@ (800ec28 <stdio_exit_handler+0x14>)
 800ec1a:	f000 b869 	b.w	800ecf0 <_fwalk_sglue>
 800ec1e:	bf00      	nop
 800ec20:	20000560 	.word	0x20000560
 800ec24:	0800f8e1 	.word	0x0800f8e1
 800ec28:	20000570 	.word	0x20000570

0800ec2c <cleanup_stdio>:
 800ec2c:	6841      	ldr	r1, [r0, #4]
 800ec2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec60 <cleanup_stdio+0x34>)
 800ec30:	4299      	cmp	r1, r3
 800ec32:	b510      	push	{r4, lr}
 800ec34:	4604      	mov	r4, r0
 800ec36:	d001      	beq.n	800ec3c <cleanup_stdio+0x10>
 800ec38:	f000 fe52 	bl	800f8e0 <_fflush_r>
 800ec3c:	68a1      	ldr	r1, [r4, #8]
 800ec3e:	4b09      	ldr	r3, [pc, #36]	@ (800ec64 <cleanup_stdio+0x38>)
 800ec40:	4299      	cmp	r1, r3
 800ec42:	d002      	beq.n	800ec4a <cleanup_stdio+0x1e>
 800ec44:	4620      	mov	r0, r4
 800ec46:	f000 fe4b 	bl	800f8e0 <_fflush_r>
 800ec4a:	68e1      	ldr	r1, [r4, #12]
 800ec4c:	4b06      	ldr	r3, [pc, #24]	@ (800ec68 <cleanup_stdio+0x3c>)
 800ec4e:	4299      	cmp	r1, r3
 800ec50:	d004      	beq.n	800ec5c <cleanup_stdio+0x30>
 800ec52:	4620      	mov	r0, r4
 800ec54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec58:	f000 be42 	b.w	800f8e0 <_fflush_r>
 800ec5c:	bd10      	pop	{r4, pc}
 800ec5e:	bf00      	nop
 800ec60:	20000de4 	.word	0x20000de4
 800ec64:	20000e4c 	.word	0x20000e4c
 800ec68:	20000eb4 	.word	0x20000eb4

0800ec6c <global_stdio_init.part.0>:
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec9c <global_stdio_init.part.0+0x30>)
 800ec70:	4c0b      	ldr	r4, [pc, #44]	@ (800eca0 <global_stdio_init.part.0+0x34>)
 800ec72:	4a0c      	ldr	r2, [pc, #48]	@ (800eca4 <global_stdio_init.part.0+0x38>)
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	4620      	mov	r0, r4
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2104      	movs	r1, #4
 800ec7c:	f7ff ff94 	bl	800eba8 <std>
 800ec80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec84:	2201      	movs	r2, #1
 800ec86:	2109      	movs	r1, #9
 800ec88:	f7ff ff8e 	bl	800eba8 <std>
 800ec8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec90:	2202      	movs	r2, #2
 800ec92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec96:	2112      	movs	r1, #18
 800ec98:	f7ff bf86 	b.w	800eba8 <std>
 800ec9c:	20000f1c 	.word	0x20000f1c
 800eca0:	20000de4 	.word	0x20000de4
 800eca4:	0800ec15 	.word	0x0800ec15

0800eca8 <__sfp_lock_acquire>:
 800eca8:	4801      	ldr	r0, [pc, #4]	@ (800ecb0 <__sfp_lock_acquire+0x8>)
 800ecaa:	f000 b912 	b.w	800eed2 <__retarget_lock_acquire_recursive>
 800ecae:	bf00      	nop
 800ecb0:	20000f21 	.word	0x20000f21

0800ecb4 <__sfp_lock_release>:
 800ecb4:	4801      	ldr	r0, [pc, #4]	@ (800ecbc <__sfp_lock_release+0x8>)
 800ecb6:	f000 b90d 	b.w	800eed4 <__retarget_lock_release_recursive>
 800ecba:	bf00      	nop
 800ecbc:	20000f21 	.word	0x20000f21

0800ecc0 <__sinit>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	f7ff fff0 	bl	800eca8 <__sfp_lock_acquire>
 800ecc8:	6a23      	ldr	r3, [r4, #32]
 800ecca:	b11b      	cbz	r3, 800ecd4 <__sinit+0x14>
 800eccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd0:	f7ff bff0 	b.w	800ecb4 <__sfp_lock_release>
 800ecd4:	4b04      	ldr	r3, [pc, #16]	@ (800ece8 <__sinit+0x28>)
 800ecd6:	6223      	str	r3, [r4, #32]
 800ecd8:	4b04      	ldr	r3, [pc, #16]	@ (800ecec <__sinit+0x2c>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1f5      	bne.n	800eccc <__sinit+0xc>
 800ece0:	f7ff ffc4 	bl	800ec6c <global_stdio_init.part.0>
 800ece4:	e7f2      	b.n	800eccc <__sinit+0xc>
 800ece6:	bf00      	nop
 800ece8:	0800ec2d 	.word	0x0800ec2d
 800ecec:	20000f1c 	.word	0x20000f1c

0800ecf0 <_fwalk_sglue>:
 800ecf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	4688      	mov	r8, r1
 800ecf8:	4614      	mov	r4, r2
 800ecfa:	2600      	movs	r6, #0
 800ecfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed00:	f1b9 0901 	subs.w	r9, r9, #1
 800ed04:	d505      	bpl.n	800ed12 <_fwalk_sglue+0x22>
 800ed06:	6824      	ldr	r4, [r4, #0]
 800ed08:	2c00      	cmp	r4, #0
 800ed0a:	d1f7      	bne.n	800ecfc <_fwalk_sglue+0xc>
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed12:	89ab      	ldrh	r3, [r5, #12]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d907      	bls.n	800ed28 <_fwalk_sglue+0x38>
 800ed18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	d003      	beq.n	800ed28 <_fwalk_sglue+0x38>
 800ed20:	4629      	mov	r1, r5
 800ed22:	4638      	mov	r0, r7
 800ed24:	47c0      	blx	r8
 800ed26:	4306      	orrs	r6, r0
 800ed28:	3568      	adds	r5, #104	@ 0x68
 800ed2a:	e7e9      	b.n	800ed00 <_fwalk_sglue+0x10>

0800ed2c <iprintf>:
 800ed2c:	b40f      	push	{r0, r1, r2, r3}
 800ed2e:	b507      	push	{r0, r1, r2, lr}
 800ed30:	4906      	ldr	r1, [pc, #24]	@ (800ed4c <iprintf+0x20>)
 800ed32:	ab04      	add	r3, sp, #16
 800ed34:	6808      	ldr	r0, [r1, #0]
 800ed36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed3a:	6881      	ldr	r1, [r0, #8]
 800ed3c:	9301      	str	r3, [sp, #4]
 800ed3e:	f000 faa5 	bl	800f28c <_vfiprintf_r>
 800ed42:	b003      	add	sp, #12
 800ed44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed48:	b004      	add	sp, #16
 800ed4a:	4770      	bx	lr
 800ed4c:	2000056c 	.word	0x2000056c

0800ed50 <_puts_r>:
 800ed50:	6a03      	ldr	r3, [r0, #32]
 800ed52:	b570      	push	{r4, r5, r6, lr}
 800ed54:	6884      	ldr	r4, [r0, #8]
 800ed56:	4605      	mov	r5, r0
 800ed58:	460e      	mov	r6, r1
 800ed5a:	b90b      	cbnz	r3, 800ed60 <_puts_r+0x10>
 800ed5c:	f7ff ffb0 	bl	800ecc0 <__sinit>
 800ed60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed62:	07db      	lsls	r3, r3, #31
 800ed64:	d405      	bmi.n	800ed72 <_puts_r+0x22>
 800ed66:	89a3      	ldrh	r3, [r4, #12]
 800ed68:	0598      	lsls	r0, r3, #22
 800ed6a:	d402      	bmi.n	800ed72 <_puts_r+0x22>
 800ed6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed6e:	f000 f8b0 	bl	800eed2 <__retarget_lock_acquire_recursive>
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	0719      	lsls	r1, r3, #28
 800ed76:	d502      	bpl.n	800ed7e <_puts_r+0x2e>
 800ed78:	6923      	ldr	r3, [r4, #16]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d135      	bne.n	800edea <_puts_r+0x9a>
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4628      	mov	r0, r5
 800ed82:	f000 fe85 	bl	800fa90 <__swsetup_r>
 800ed86:	b380      	cbz	r0, 800edea <_puts_r+0x9a>
 800ed88:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ed8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed8e:	07da      	lsls	r2, r3, #31
 800ed90:	d405      	bmi.n	800ed9e <_puts_r+0x4e>
 800ed92:	89a3      	ldrh	r3, [r4, #12]
 800ed94:	059b      	lsls	r3, r3, #22
 800ed96:	d402      	bmi.n	800ed9e <_puts_r+0x4e>
 800ed98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed9a:	f000 f89b 	bl	800eed4 <__retarget_lock_release_recursive>
 800ed9e:	4628      	mov	r0, r5
 800eda0:	bd70      	pop	{r4, r5, r6, pc}
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	da04      	bge.n	800edb0 <_puts_r+0x60>
 800eda6:	69a2      	ldr	r2, [r4, #24]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	dc17      	bgt.n	800eddc <_puts_r+0x8c>
 800edac:	290a      	cmp	r1, #10
 800edae:	d015      	beq.n	800eddc <_puts_r+0x8c>
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	1c5a      	adds	r2, r3, #1
 800edb4:	6022      	str	r2, [r4, #0]
 800edb6:	7019      	strb	r1, [r3, #0]
 800edb8:	68a3      	ldr	r3, [r4, #8]
 800edba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800edbe:	3b01      	subs	r3, #1
 800edc0:	60a3      	str	r3, [r4, #8]
 800edc2:	2900      	cmp	r1, #0
 800edc4:	d1ed      	bne.n	800eda2 <_puts_r+0x52>
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da11      	bge.n	800edee <_puts_r+0x9e>
 800edca:	4622      	mov	r2, r4
 800edcc:	210a      	movs	r1, #10
 800edce:	4628      	mov	r0, r5
 800edd0:	f000 fe1f 	bl	800fa12 <__swbuf_r>
 800edd4:	3001      	adds	r0, #1
 800edd6:	d0d7      	beq.n	800ed88 <_puts_r+0x38>
 800edd8:	250a      	movs	r5, #10
 800edda:	e7d7      	b.n	800ed8c <_puts_r+0x3c>
 800eddc:	4622      	mov	r2, r4
 800edde:	4628      	mov	r0, r5
 800ede0:	f000 fe17 	bl	800fa12 <__swbuf_r>
 800ede4:	3001      	adds	r0, #1
 800ede6:	d1e7      	bne.n	800edb8 <_puts_r+0x68>
 800ede8:	e7ce      	b.n	800ed88 <_puts_r+0x38>
 800edea:	3e01      	subs	r6, #1
 800edec:	e7e4      	b.n	800edb8 <_puts_r+0x68>
 800edee:	6823      	ldr	r3, [r4, #0]
 800edf0:	1c5a      	adds	r2, r3, #1
 800edf2:	6022      	str	r2, [r4, #0]
 800edf4:	220a      	movs	r2, #10
 800edf6:	701a      	strb	r2, [r3, #0]
 800edf8:	e7ee      	b.n	800edd8 <_puts_r+0x88>
	...

0800edfc <puts>:
 800edfc:	4b02      	ldr	r3, [pc, #8]	@ (800ee08 <puts+0xc>)
 800edfe:	4601      	mov	r1, r0
 800ee00:	6818      	ldr	r0, [r3, #0]
 800ee02:	f7ff bfa5 	b.w	800ed50 <_puts_r>
 800ee06:	bf00      	nop
 800ee08:	2000056c 	.word	0x2000056c

0800ee0c <strcat>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	4602      	mov	r2, r0
 800ee10:	7814      	ldrb	r4, [r2, #0]
 800ee12:	4613      	mov	r3, r2
 800ee14:	3201      	adds	r2, #1
 800ee16:	2c00      	cmp	r4, #0
 800ee18:	d1fa      	bne.n	800ee10 <strcat+0x4>
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee24:	2a00      	cmp	r2, #0
 800ee26:	d1f9      	bne.n	800ee1c <strcat+0x10>
 800ee28:	bd10      	pop	{r4, pc}

0800ee2a <memcmp>:
 800ee2a:	b510      	push	{r4, lr}
 800ee2c:	3901      	subs	r1, #1
 800ee2e:	4402      	add	r2, r0
 800ee30:	4290      	cmp	r0, r2
 800ee32:	d101      	bne.n	800ee38 <memcmp+0xe>
 800ee34:	2000      	movs	r0, #0
 800ee36:	e005      	b.n	800ee44 <memcmp+0x1a>
 800ee38:	7803      	ldrb	r3, [r0, #0]
 800ee3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee3e:	42a3      	cmp	r3, r4
 800ee40:	d001      	beq.n	800ee46 <memcmp+0x1c>
 800ee42:	1b18      	subs	r0, r3, r4
 800ee44:	bd10      	pop	{r4, pc}
 800ee46:	3001      	adds	r0, #1
 800ee48:	e7f2      	b.n	800ee30 <memcmp+0x6>

0800ee4a <memset>:
 800ee4a:	4402      	add	r2, r0
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d100      	bne.n	800ee54 <memset+0xa>
 800ee52:	4770      	bx	lr
 800ee54:	f803 1b01 	strb.w	r1, [r3], #1
 800ee58:	e7f9      	b.n	800ee4e <memset+0x4>
	...

0800ee5c <_sbrk_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4d06      	ldr	r5, [pc, #24]	@ (800ee78 <_sbrk_r+0x1c>)
 800ee60:	2300      	movs	r3, #0
 800ee62:	4604      	mov	r4, r0
 800ee64:	4608      	mov	r0, r1
 800ee66:	602b      	str	r3, [r5, #0]
 800ee68:	f7fa fa24 	bl	80092b4 <_sbrk>
 800ee6c:	1c43      	adds	r3, r0, #1
 800ee6e:	d102      	bne.n	800ee76 <_sbrk_r+0x1a>
 800ee70:	682b      	ldr	r3, [r5, #0]
 800ee72:	b103      	cbz	r3, 800ee76 <_sbrk_r+0x1a>
 800ee74:	6023      	str	r3, [r4, #0]
 800ee76:	bd38      	pop	{r3, r4, r5, pc}
 800ee78:	20000f24 	.word	0x20000f24

0800ee7c <__errno>:
 800ee7c:	4b01      	ldr	r3, [pc, #4]	@ (800ee84 <__errno+0x8>)
 800ee7e:	6818      	ldr	r0, [r3, #0]
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	2000056c 	.word	0x2000056c

0800ee88 <__libc_init_array>:
 800ee88:	b570      	push	{r4, r5, r6, lr}
 800ee8a:	4d0d      	ldr	r5, [pc, #52]	@ (800eec0 <__libc_init_array+0x38>)
 800ee8c:	4c0d      	ldr	r4, [pc, #52]	@ (800eec4 <__libc_init_array+0x3c>)
 800ee8e:	1b64      	subs	r4, r4, r5
 800ee90:	10a4      	asrs	r4, r4, #2
 800ee92:	2600      	movs	r6, #0
 800ee94:	42a6      	cmp	r6, r4
 800ee96:	d109      	bne.n	800eeac <__libc_init_array+0x24>
 800ee98:	4d0b      	ldr	r5, [pc, #44]	@ (800eec8 <__libc_init_array+0x40>)
 800ee9a:	4c0c      	ldr	r4, [pc, #48]	@ (800eecc <__libc_init_array+0x44>)
 800ee9c:	f000 ff3a 	bl	800fd14 <_init>
 800eea0:	1b64      	subs	r4, r4, r5
 800eea2:	10a4      	asrs	r4, r4, #2
 800eea4:	2600      	movs	r6, #0
 800eea6:	42a6      	cmp	r6, r4
 800eea8:	d105      	bne.n	800eeb6 <__libc_init_array+0x2e>
 800eeaa:	bd70      	pop	{r4, r5, r6, pc}
 800eeac:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb0:	4798      	blx	r3
 800eeb2:	3601      	adds	r6, #1
 800eeb4:	e7ee      	b.n	800ee94 <__libc_init_array+0xc>
 800eeb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeba:	4798      	blx	r3
 800eebc:	3601      	adds	r6, #1
 800eebe:	e7f2      	b.n	800eea6 <__libc_init_array+0x1e>
 800eec0:	08010e8c 	.word	0x08010e8c
 800eec4:	08010e8c 	.word	0x08010e8c
 800eec8:	08010e8c 	.word	0x08010e8c
 800eecc:	08010e90 	.word	0x08010e90

0800eed0 <__retarget_lock_init_recursive>:
 800eed0:	4770      	bx	lr

0800eed2 <__retarget_lock_acquire_recursive>:
 800eed2:	4770      	bx	lr

0800eed4 <__retarget_lock_release_recursive>:
 800eed4:	4770      	bx	lr

0800eed6 <memcpy>:
 800eed6:	440a      	add	r2, r1
 800eed8:	4291      	cmp	r1, r2
 800eeda:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800eede:	d100      	bne.n	800eee2 <memcpy+0xc>
 800eee0:	4770      	bx	lr
 800eee2:	b510      	push	{r4, lr}
 800eee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eeec:	4291      	cmp	r1, r2
 800eeee:	d1f9      	bne.n	800eee4 <memcpy+0xe>
 800eef0:	bd10      	pop	{r4, pc}
	...

0800eef4 <_free_r>:
 800eef4:	b538      	push	{r3, r4, r5, lr}
 800eef6:	4605      	mov	r5, r0
 800eef8:	2900      	cmp	r1, #0
 800eefa:	d041      	beq.n	800ef80 <_free_r+0x8c>
 800eefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef00:	1f0c      	subs	r4, r1, #4
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bfb8      	it	lt
 800ef06:	18e4      	addlt	r4, r4, r3
 800ef08:	f7ff fe22 	bl	800eb50 <__malloc_lock>
 800ef0c:	4a1d      	ldr	r2, [pc, #116]	@ (800ef84 <_free_r+0x90>)
 800ef0e:	6813      	ldr	r3, [r2, #0]
 800ef10:	b933      	cbnz	r3, 800ef20 <_free_r+0x2c>
 800ef12:	6063      	str	r3, [r4, #4]
 800ef14:	6014      	str	r4, [r2, #0]
 800ef16:	4628      	mov	r0, r5
 800ef18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef1c:	f7ff be1e 	b.w	800eb5c <__malloc_unlock>
 800ef20:	42a3      	cmp	r3, r4
 800ef22:	d908      	bls.n	800ef36 <_free_r+0x42>
 800ef24:	6820      	ldr	r0, [r4, #0]
 800ef26:	1821      	adds	r1, r4, r0
 800ef28:	428b      	cmp	r3, r1
 800ef2a:	bf01      	itttt	eq
 800ef2c:	6819      	ldreq	r1, [r3, #0]
 800ef2e:	685b      	ldreq	r3, [r3, #4]
 800ef30:	1809      	addeq	r1, r1, r0
 800ef32:	6021      	streq	r1, [r4, #0]
 800ef34:	e7ed      	b.n	800ef12 <_free_r+0x1e>
 800ef36:	461a      	mov	r2, r3
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	b10b      	cbz	r3, 800ef40 <_free_r+0x4c>
 800ef3c:	42a3      	cmp	r3, r4
 800ef3e:	d9fa      	bls.n	800ef36 <_free_r+0x42>
 800ef40:	6811      	ldr	r1, [r2, #0]
 800ef42:	1850      	adds	r0, r2, r1
 800ef44:	42a0      	cmp	r0, r4
 800ef46:	d10b      	bne.n	800ef60 <_free_r+0x6c>
 800ef48:	6820      	ldr	r0, [r4, #0]
 800ef4a:	4401      	add	r1, r0
 800ef4c:	1850      	adds	r0, r2, r1
 800ef4e:	4283      	cmp	r3, r0
 800ef50:	6011      	str	r1, [r2, #0]
 800ef52:	d1e0      	bne.n	800ef16 <_free_r+0x22>
 800ef54:	6818      	ldr	r0, [r3, #0]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	6053      	str	r3, [r2, #4]
 800ef5a:	4408      	add	r0, r1
 800ef5c:	6010      	str	r0, [r2, #0]
 800ef5e:	e7da      	b.n	800ef16 <_free_r+0x22>
 800ef60:	d902      	bls.n	800ef68 <_free_r+0x74>
 800ef62:	230c      	movs	r3, #12
 800ef64:	602b      	str	r3, [r5, #0]
 800ef66:	e7d6      	b.n	800ef16 <_free_r+0x22>
 800ef68:	6820      	ldr	r0, [r4, #0]
 800ef6a:	1821      	adds	r1, r4, r0
 800ef6c:	428b      	cmp	r3, r1
 800ef6e:	bf04      	itt	eq
 800ef70:	6819      	ldreq	r1, [r3, #0]
 800ef72:	685b      	ldreq	r3, [r3, #4]
 800ef74:	6063      	str	r3, [r4, #4]
 800ef76:	bf04      	itt	eq
 800ef78:	1809      	addeq	r1, r1, r0
 800ef7a:	6021      	streq	r1, [r4, #0]
 800ef7c:	6054      	str	r4, [r2, #4]
 800ef7e:	e7ca      	b.n	800ef16 <_free_r+0x22>
 800ef80:	bd38      	pop	{r3, r4, r5, pc}
 800ef82:	bf00      	nop
 800ef84:	20000de0 	.word	0x20000de0

0800ef88 <__ssputs_r>:
 800ef88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef8c:	688e      	ldr	r6, [r1, #8]
 800ef8e:	461f      	mov	r7, r3
 800ef90:	42be      	cmp	r6, r7
 800ef92:	680b      	ldr	r3, [r1, #0]
 800ef94:	4682      	mov	sl, r0
 800ef96:	460c      	mov	r4, r1
 800ef98:	4690      	mov	r8, r2
 800ef9a:	d82d      	bhi.n	800eff8 <__ssputs_r+0x70>
 800ef9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800efa4:	d026      	beq.n	800eff4 <__ssputs_r+0x6c>
 800efa6:	6965      	ldr	r5, [r4, #20]
 800efa8:	6909      	ldr	r1, [r1, #16]
 800efaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efae:	eba3 0901 	sub.w	r9, r3, r1
 800efb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efb6:	1c7b      	adds	r3, r7, #1
 800efb8:	444b      	add	r3, r9
 800efba:	106d      	asrs	r5, r5, #1
 800efbc:	429d      	cmp	r5, r3
 800efbe:	bf38      	it	cc
 800efc0:	461d      	movcc	r5, r3
 800efc2:	0553      	lsls	r3, r2, #21
 800efc4:	d527      	bpl.n	800f016 <__ssputs_r+0x8e>
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7ff fd42 	bl	800ea50 <_malloc_r>
 800efcc:	4606      	mov	r6, r0
 800efce:	b360      	cbz	r0, 800f02a <__ssputs_r+0xa2>
 800efd0:	6921      	ldr	r1, [r4, #16]
 800efd2:	464a      	mov	r2, r9
 800efd4:	f7ff ff7f 	bl	800eed6 <memcpy>
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800efde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efe2:	81a3      	strh	r3, [r4, #12]
 800efe4:	6126      	str	r6, [r4, #16]
 800efe6:	6165      	str	r5, [r4, #20]
 800efe8:	444e      	add	r6, r9
 800efea:	eba5 0509 	sub.w	r5, r5, r9
 800efee:	6026      	str	r6, [r4, #0]
 800eff0:	60a5      	str	r5, [r4, #8]
 800eff2:	463e      	mov	r6, r7
 800eff4:	42be      	cmp	r6, r7
 800eff6:	d900      	bls.n	800effa <__ssputs_r+0x72>
 800eff8:	463e      	mov	r6, r7
 800effa:	6820      	ldr	r0, [r4, #0]
 800effc:	4632      	mov	r2, r6
 800effe:	4641      	mov	r1, r8
 800f000:	f000 fdfe 	bl	800fc00 <memmove>
 800f004:	68a3      	ldr	r3, [r4, #8]
 800f006:	1b9b      	subs	r3, r3, r6
 800f008:	60a3      	str	r3, [r4, #8]
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	4433      	add	r3, r6
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	2000      	movs	r0, #0
 800f012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f016:	462a      	mov	r2, r5
 800f018:	f000 fccd 	bl	800f9b6 <_realloc_r>
 800f01c:	4606      	mov	r6, r0
 800f01e:	2800      	cmp	r0, #0
 800f020:	d1e0      	bne.n	800efe4 <__ssputs_r+0x5c>
 800f022:	6921      	ldr	r1, [r4, #16]
 800f024:	4650      	mov	r0, sl
 800f026:	f7ff ff65 	bl	800eef4 <_free_r>
 800f02a:	230c      	movs	r3, #12
 800f02c:	f8ca 3000 	str.w	r3, [sl]
 800f030:	89a3      	ldrh	r3, [r4, #12]
 800f032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f036:	81a3      	strh	r3, [r4, #12]
 800f038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f03c:	e7e9      	b.n	800f012 <__ssputs_r+0x8a>
	...

0800f040 <_svfiprintf_r>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	4698      	mov	r8, r3
 800f046:	898b      	ldrh	r3, [r1, #12]
 800f048:	061b      	lsls	r3, r3, #24
 800f04a:	b09d      	sub	sp, #116	@ 0x74
 800f04c:	4607      	mov	r7, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	4614      	mov	r4, r2
 800f052:	d510      	bpl.n	800f076 <_svfiprintf_r+0x36>
 800f054:	690b      	ldr	r3, [r1, #16]
 800f056:	b973      	cbnz	r3, 800f076 <_svfiprintf_r+0x36>
 800f058:	2140      	movs	r1, #64	@ 0x40
 800f05a:	f7ff fcf9 	bl	800ea50 <_malloc_r>
 800f05e:	6028      	str	r0, [r5, #0]
 800f060:	6128      	str	r0, [r5, #16]
 800f062:	b930      	cbnz	r0, 800f072 <_svfiprintf_r+0x32>
 800f064:	230c      	movs	r3, #12
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f06c:	b01d      	add	sp, #116	@ 0x74
 800f06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f072:	2340      	movs	r3, #64	@ 0x40
 800f074:	616b      	str	r3, [r5, #20]
 800f076:	2300      	movs	r3, #0
 800f078:	9309      	str	r3, [sp, #36]	@ 0x24
 800f07a:	2320      	movs	r3, #32
 800f07c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f080:	f8cd 800c 	str.w	r8, [sp, #12]
 800f084:	2330      	movs	r3, #48	@ 0x30
 800f086:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f224 <_svfiprintf_r+0x1e4>
 800f08a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f08e:	f04f 0901 	mov.w	r9, #1
 800f092:	4623      	mov	r3, r4
 800f094:	469a      	mov	sl, r3
 800f096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f09a:	b10a      	cbz	r2, 800f0a0 <_svfiprintf_r+0x60>
 800f09c:	2a25      	cmp	r2, #37	@ 0x25
 800f09e:	d1f9      	bne.n	800f094 <_svfiprintf_r+0x54>
 800f0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f0a4:	d00b      	beq.n	800f0be <_svfiprintf_r+0x7e>
 800f0a6:	465b      	mov	r3, fp
 800f0a8:	4622      	mov	r2, r4
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff ff6b 	bl	800ef88 <__ssputs_r>
 800f0b2:	3001      	adds	r0, #1
 800f0b4:	f000 80a7 	beq.w	800f206 <_svfiprintf_r+0x1c6>
 800f0b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0ba:	445a      	add	r2, fp
 800f0bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0be:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 809f 	beq.w	800f206 <_svfiprintf_r+0x1c6>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0d2:	f10a 0a01 	add.w	sl, sl, #1
 800f0d6:	9304      	str	r3, [sp, #16]
 800f0d8:	9307      	str	r3, [sp, #28]
 800f0da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0de:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0e0:	4654      	mov	r4, sl
 800f0e2:	2205      	movs	r2, #5
 800f0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e8:	484e      	ldr	r0, [pc, #312]	@ (800f224 <_svfiprintf_r+0x1e4>)
 800f0ea:	f7f1 f881 	bl	80001f0 <memchr>
 800f0ee:	9a04      	ldr	r2, [sp, #16]
 800f0f0:	b9d8      	cbnz	r0, 800f12a <_svfiprintf_r+0xea>
 800f0f2:	06d0      	lsls	r0, r2, #27
 800f0f4:	bf44      	itt	mi
 800f0f6:	2320      	movmi	r3, #32
 800f0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0fc:	0711      	lsls	r1, r2, #28
 800f0fe:	bf44      	itt	mi
 800f100:	232b      	movmi	r3, #43	@ 0x2b
 800f102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f106:	f89a 3000 	ldrb.w	r3, [sl]
 800f10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f10c:	d015      	beq.n	800f13a <_svfiprintf_r+0xfa>
 800f10e:	9a07      	ldr	r2, [sp, #28]
 800f110:	4654      	mov	r4, sl
 800f112:	2000      	movs	r0, #0
 800f114:	f04f 0c0a 	mov.w	ip, #10
 800f118:	4621      	mov	r1, r4
 800f11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f11e:	3b30      	subs	r3, #48	@ 0x30
 800f120:	2b09      	cmp	r3, #9
 800f122:	d94b      	bls.n	800f1bc <_svfiprintf_r+0x17c>
 800f124:	b1b0      	cbz	r0, 800f154 <_svfiprintf_r+0x114>
 800f126:	9207      	str	r2, [sp, #28]
 800f128:	e014      	b.n	800f154 <_svfiprintf_r+0x114>
 800f12a:	eba0 0308 	sub.w	r3, r0, r8
 800f12e:	fa09 f303 	lsl.w	r3, r9, r3
 800f132:	4313      	orrs	r3, r2
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	46a2      	mov	sl, r4
 800f138:	e7d2      	b.n	800f0e0 <_svfiprintf_r+0xa0>
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	1d19      	adds	r1, r3, #4
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	9103      	str	r1, [sp, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	bfbb      	ittet	lt
 800f146:	425b      	neglt	r3, r3
 800f148:	f042 0202 	orrlt.w	r2, r2, #2
 800f14c:	9307      	strge	r3, [sp, #28]
 800f14e:	9307      	strlt	r3, [sp, #28]
 800f150:	bfb8      	it	lt
 800f152:	9204      	strlt	r2, [sp, #16]
 800f154:	7823      	ldrb	r3, [r4, #0]
 800f156:	2b2e      	cmp	r3, #46	@ 0x2e
 800f158:	d10a      	bne.n	800f170 <_svfiprintf_r+0x130>
 800f15a:	7863      	ldrb	r3, [r4, #1]
 800f15c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f15e:	d132      	bne.n	800f1c6 <_svfiprintf_r+0x186>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	1d1a      	adds	r2, r3, #4
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	9203      	str	r2, [sp, #12]
 800f168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f16c:	3402      	adds	r4, #2
 800f16e:	9305      	str	r3, [sp, #20]
 800f170:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f234 <_svfiprintf_r+0x1f4>
 800f174:	7821      	ldrb	r1, [r4, #0]
 800f176:	2203      	movs	r2, #3
 800f178:	4650      	mov	r0, sl
 800f17a:	f7f1 f839 	bl	80001f0 <memchr>
 800f17e:	b138      	cbz	r0, 800f190 <_svfiprintf_r+0x150>
 800f180:	9b04      	ldr	r3, [sp, #16]
 800f182:	eba0 000a 	sub.w	r0, r0, sl
 800f186:	2240      	movs	r2, #64	@ 0x40
 800f188:	4082      	lsls	r2, r0
 800f18a:	4313      	orrs	r3, r2
 800f18c:	3401      	adds	r4, #1
 800f18e:	9304      	str	r3, [sp, #16]
 800f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f194:	4824      	ldr	r0, [pc, #144]	@ (800f228 <_svfiprintf_r+0x1e8>)
 800f196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f19a:	2206      	movs	r2, #6
 800f19c:	f7f1 f828 	bl	80001f0 <memchr>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d036      	beq.n	800f212 <_svfiprintf_r+0x1d2>
 800f1a4:	4b21      	ldr	r3, [pc, #132]	@ (800f22c <_svfiprintf_r+0x1ec>)
 800f1a6:	bb1b      	cbnz	r3, 800f1f0 <_svfiprintf_r+0x1b0>
 800f1a8:	9b03      	ldr	r3, [sp, #12]
 800f1aa:	3307      	adds	r3, #7
 800f1ac:	f023 0307 	bic.w	r3, r3, #7
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	9303      	str	r3, [sp, #12]
 800f1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1b6:	4433      	add	r3, r6
 800f1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ba:	e76a      	b.n	800f092 <_svfiprintf_r+0x52>
 800f1bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	2001      	movs	r0, #1
 800f1c4:	e7a8      	b.n	800f118 <_svfiprintf_r+0xd8>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	3401      	adds	r4, #1
 800f1ca:	9305      	str	r3, [sp, #20]
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	f04f 0c0a 	mov.w	ip, #10
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1d8:	3a30      	subs	r2, #48	@ 0x30
 800f1da:	2a09      	cmp	r2, #9
 800f1dc:	d903      	bls.n	800f1e6 <_svfiprintf_r+0x1a6>
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d0c6      	beq.n	800f170 <_svfiprintf_r+0x130>
 800f1e2:	9105      	str	r1, [sp, #20]
 800f1e4:	e7c4      	b.n	800f170 <_svfiprintf_r+0x130>
 800f1e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e7f0      	b.n	800f1d2 <_svfiprintf_r+0x192>
 800f1f0:	ab03      	add	r3, sp, #12
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	462a      	mov	r2, r5
 800f1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800f230 <_svfiprintf_r+0x1f0>)
 800f1f8:	a904      	add	r1, sp, #16
 800f1fa:	4638      	mov	r0, r7
 800f1fc:	f3af 8000 	nop.w
 800f200:	1c42      	adds	r2, r0, #1
 800f202:	4606      	mov	r6, r0
 800f204:	d1d6      	bne.n	800f1b4 <_svfiprintf_r+0x174>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	065b      	lsls	r3, r3, #25
 800f20a:	f53f af2d 	bmi.w	800f068 <_svfiprintf_r+0x28>
 800f20e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f210:	e72c      	b.n	800f06c <_svfiprintf_r+0x2c>
 800f212:	ab03      	add	r3, sp, #12
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	462a      	mov	r2, r5
 800f218:	4b05      	ldr	r3, [pc, #20]	@ (800f230 <_svfiprintf_r+0x1f0>)
 800f21a:	a904      	add	r1, sp, #16
 800f21c:	4638      	mov	r0, r7
 800f21e:	f000 f9bb 	bl	800f598 <_printf_i>
 800f222:	e7ed      	b.n	800f200 <_svfiprintf_r+0x1c0>
 800f224:	08010e50 	.word	0x08010e50
 800f228:	08010e5a 	.word	0x08010e5a
 800f22c:	00000000 	.word	0x00000000
 800f230:	0800ef89 	.word	0x0800ef89
 800f234:	08010e56 	.word	0x08010e56

0800f238 <__sfputc_r>:
 800f238:	6893      	ldr	r3, [r2, #8]
 800f23a:	3b01      	subs	r3, #1
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	b410      	push	{r4}
 800f240:	6093      	str	r3, [r2, #8]
 800f242:	da08      	bge.n	800f256 <__sfputc_r+0x1e>
 800f244:	6994      	ldr	r4, [r2, #24]
 800f246:	42a3      	cmp	r3, r4
 800f248:	db01      	blt.n	800f24e <__sfputc_r+0x16>
 800f24a:	290a      	cmp	r1, #10
 800f24c:	d103      	bne.n	800f256 <__sfputc_r+0x1e>
 800f24e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f252:	f000 bbde 	b.w	800fa12 <__swbuf_r>
 800f256:	6813      	ldr	r3, [r2, #0]
 800f258:	1c58      	adds	r0, r3, #1
 800f25a:	6010      	str	r0, [r2, #0]
 800f25c:	7019      	strb	r1, [r3, #0]
 800f25e:	4608      	mov	r0, r1
 800f260:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f264:	4770      	bx	lr

0800f266 <__sfputs_r>:
 800f266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f268:	4606      	mov	r6, r0
 800f26a:	460f      	mov	r7, r1
 800f26c:	4614      	mov	r4, r2
 800f26e:	18d5      	adds	r5, r2, r3
 800f270:	42ac      	cmp	r4, r5
 800f272:	d101      	bne.n	800f278 <__sfputs_r+0x12>
 800f274:	2000      	movs	r0, #0
 800f276:	e007      	b.n	800f288 <__sfputs_r+0x22>
 800f278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27c:	463a      	mov	r2, r7
 800f27e:	4630      	mov	r0, r6
 800f280:	f7ff ffda 	bl	800f238 <__sfputc_r>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d1f3      	bne.n	800f270 <__sfputs_r+0xa>
 800f288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f28c <_vfiprintf_r>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	460d      	mov	r5, r1
 800f292:	b09d      	sub	sp, #116	@ 0x74
 800f294:	4614      	mov	r4, r2
 800f296:	4698      	mov	r8, r3
 800f298:	4606      	mov	r6, r0
 800f29a:	b118      	cbz	r0, 800f2a4 <_vfiprintf_r+0x18>
 800f29c:	6a03      	ldr	r3, [r0, #32]
 800f29e:	b90b      	cbnz	r3, 800f2a4 <_vfiprintf_r+0x18>
 800f2a0:	f7ff fd0e 	bl	800ecc0 <__sinit>
 800f2a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2a6:	07d9      	lsls	r1, r3, #31
 800f2a8:	d405      	bmi.n	800f2b6 <_vfiprintf_r+0x2a>
 800f2aa:	89ab      	ldrh	r3, [r5, #12]
 800f2ac:	059a      	lsls	r2, r3, #22
 800f2ae:	d402      	bmi.n	800f2b6 <_vfiprintf_r+0x2a>
 800f2b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2b2:	f7ff fe0e 	bl	800eed2 <__retarget_lock_acquire_recursive>
 800f2b6:	89ab      	ldrh	r3, [r5, #12]
 800f2b8:	071b      	lsls	r3, r3, #28
 800f2ba:	d501      	bpl.n	800f2c0 <_vfiprintf_r+0x34>
 800f2bc:	692b      	ldr	r3, [r5, #16]
 800f2be:	b99b      	cbnz	r3, 800f2e8 <_vfiprintf_r+0x5c>
 800f2c0:	4629      	mov	r1, r5
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f000 fbe4 	bl	800fa90 <__swsetup_r>
 800f2c8:	b170      	cbz	r0, 800f2e8 <_vfiprintf_r+0x5c>
 800f2ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2cc:	07dc      	lsls	r4, r3, #31
 800f2ce:	d504      	bpl.n	800f2da <_vfiprintf_r+0x4e>
 800f2d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2d4:	b01d      	add	sp, #116	@ 0x74
 800f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2da:	89ab      	ldrh	r3, [r5, #12]
 800f2dc:	0598      	lsls	r0, r3, #22
 800f2de:	d4f7      	bmi.n	800f2d0 <_vfiprintf_r+0x44>
 800f2e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2e2:	f7ff fdf7 	bl	800eed4 <__retarget_lock_release_recursive>
 800f2e6:	e7f3      	b.n	800f2d0 <_vfiprintf_r+0x44>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ec:	2320      	movs	r3, #32
 800f2ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2f6:	2330      	movs	r3, #48	@ 0x30
 800f2f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f4a8 <_vfiprintf_r+0x21c>
 800f2fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f300:	f04f 0901 	mov.w	r9, #1
 800f304:	4623      	mov	r3, r4
 800f306:	469a      	mov	sl, r3
 800f308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f30c:	b10a      	cbz	r2, 800f312 <_vfiprintf_r+0x86>
 800f30e:	2a25      	cmp	r2, #37	@ 0x25
 800f310:	d1f9      	bne.n	800f306 <_vfiprintf_r+0x7a>
 800f312:	ebba 0b04 	subs.w	fp, sl, r4
 800f316:	d00b      	beq.n	800f330 <_vfiprintf_r+0xa4>
 800f318:	465b      	mov	r3, fp
 800f31a:	4622      	mov	r2, r4
 800f31c:	4629      	mov	r1, r5
 800f31e:	4630      	mov	r0, r6
 800f320:	f7ff ffa1 	bl	800f266 <__sfputs_r>
 800f324:	3001      	adds	r0, #1
 800f326:	f000 80a7 	beq.w	800f478 <_vfiprintf_r+0x1ec>
 800f32a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f32c:	445a      	add	r2, fp
 800f32e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f330:	f89a 3000 	ldrb.w	r3, [sl]
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 809f 	beq.w	800f478 <_vfiprintf_r+0x1ec>
 800f33a:	2300      	movs	r3, #0
 800f33c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f344:	f10a 0a01 	add.w	sl, sl, #1
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	9307      	str	r3, [sp, #28]
 800f34c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f350:	931a      	str	r3, [sp, #104]	@ 0x68
 800f352:	4654      	mov	r4, sl
 800f354:	2205      	movs	r2, #5
 800f356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35a:	4853      	ldr	r0, [pc, #332]	@ (800f4a8 <_vfiprintf_r+0x21c>)
 800f35c:	f7f0 ff48 	bl	80001f0 <memchr>
 800f360:	9a04      	ldr	r2, [sp, #16]
 800f362:	b9d8      	cbnz	r0, 800f39c <_vfiprintf_r+0x110>
 800f364:	06d1      	lsls	r1, r2, #27
 800f366:	bf44      	itt	mi
 800f368:	2320      	movmi	r3, #32
 800f36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f36e:	0713      	lsls	r3, r2, #28
 800f370:	bf44      	itt	mi
 800f372:	232b      	movmi	r3, #43	@ 0x2b
 800f374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f378:	f89a 3000 	ldrb.w	r3, [sl]
 800f37c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f37e:	d015      	beq.n	800f3ac <_vfiprintf_r+0x120>
 800f380:	9a07      	ldr	r2, [sp, #28]
 800f382:	4654      	mov	r4, sl
 800f384:	2000      	movs	r0, #0
 800f386:	f04f 0c0a 	mov.w	ip, #10
 800f38a:	4621      	mov	r1, r4
 800f38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f390:	3b30      	subs	r3, #48	@ 0x30
 800f392:	2b09      	cmp	r3, #9
 800f394:	d94b      	bls.n	800f42e <_vfiprintf_r+0x1a2>
 800f396:	b1b0      	cbz	r0, 800f3c6 <_vfiprintf_r+0x13a>
 800f398:	9207      	str	r2, [sp, #28]
 800f39a:	e014      	b.n	800f3c6 <_vfiprintf_r+0x13a>
 800f39c:	eba0 0308 	sub.w	r3, r0, r8
 800f3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	9304      	str	r3, [sp, #16]
 800f3a8:	46a2      	mov	sl, r4
 800f3aa:	e7d2      	b.n	800f352 <_vfiprintf_r+0xc6>
 800f3ac:	9b03      	ldr	r3, [sp, #12]
 800f3ae:	1d19      	adds	r1, r3, #4
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	9103      	str	r1, [sp, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	bfbb      	ittet	lt
 800f3b8:	425b      	neglt	r3, r3
 800f3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f3be:	9307      	strge	r3, [sp, #28]
 800f3c0:	9307      	strlt	r3, [sp, #28]
 800f3c2:	bfb8      	it	lt
 800f3c4:	9204      	strlt	r2, [sp, #16]
 800f3c6:	7823      	ldrb	r3, [r4, #0]
 800f3c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3ca:	d10a      	bne.n	800f3e2 <_vfiprintf_r+0x156>
 800f3cc:	7863      	ldrb	r3, [r4, #1]
 800f3ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3d0:	d132      	bne.n	800f438 <_vfiprintf_r+0x1ac>
 800f3d2:	9b03      	ldr	r3, [sp, #12]
 800f3d4:	1d1a      	adds	r2, r3, #4
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	9203      	str	r2, [sp, #12]
 800f3da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3de:	3402      	adds	r4, #2
 800f3e0:	9305      	str	r3, [sp, #20]
 800f3e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f4b8 <_vfiprintf_r+0x22c>
 800f3e6:	7821      	ldrb	r1, [r4, #0]
 800f3e8:	2203      	movs	r2, #3
 800f3ea:	4650      	mov	r0, sl
 800f3ec:	f7f0 ff00 	bl	80001f0 <memchr>
 800f3f0:	b138      	cbz	r0, 800f402 <_vfiprintf_r+0x176>
 800f3f2:	9b04      	ldr	r3, [sp, #16]
 800f3f4:	eba0 000a 	sub.w	r0, r0, sl
 800f3f8:	2240      	movs	r2, #64	@ 0x40
 800f3fa:	4082      	lsls	r2, r0
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	3401      	adds	r4, #1
 800f400:	9304      	str	r3, [sp, #16]
 800f402:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f406:	4829      	ldr	r0, [pc, #164]	@ (800f4ac <_vfiprintf_r+0x220>)
 800f408:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f40c:	2206      	movs	r2, #6
 800f40e:	f7f0 feef 	bl	80001f0 <memchr>
 800f412:	2800      	cmp	r0, #0
 800f414:	d03f      	beq.n	800f496 <_vfiprintf_r+0x20a>
 800f416:	4b26      	ldr	r3, [pc, #152]	@ (800f4b0 <_vfiprintf_r+0x224>)
 800f418:	bb1b      	cbnz	r3, 800f462 <_vfiprintf_r+0x1d6>
 800f41a:	9b03      	ldr	r3, [sp, #12]
 800f41c:	3307      	adds	r3, #7
 800f41e:	f023 0307 	bic.w	r3, r3, #7
 800f422:	3308      	adds	r3, #8
 800f424:	9303      	str	r3, [sp, #12]
 800f426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f428:	443b      	add	r3, r7
 800f42a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f42c:	e76a      	b.n	800f304 <_vfiprintf_r+0x78>
 800f42e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f432:	460c      	mov	r4, r1
 800f434:	2001      	movs	r0, #1
 800f436:	e7a8      	b.n	800f38a <_vfiprintf_r+0xfe>
 800f438:	2300      	movs	r3, #0
 800f43a:	3401      	adds	r4, #1
 800f43c:	9305      	str	r3, [sp, #20]
 800f43e:	4619      	mov	r1, r3
 800f440:	f04f 0c0a 	mov.w	ip, #10
 800f444:	4620      	mov	r0, r4
 800f446:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f44a:	3a30      	subs	r2, #48	@ 0x30
 800f44c:	2a09      	cmp	r2, #9
 800f44e:	d903      	bls.n	800f458 <_vfiprintf_r+0x1cc>
 800f450:	2b00      	cmp	r3, #0
 800f452:	d0c6      	beq.n	800f3e2 <_vfiprintf_r+0x156>
 800f454:	9105      	str	r1, [sp, #20]
 800f456:	e7c4      	b.n	800f3e2 <_vfiprintf_r+0x156>
 800f458:	fb0c 2101 	mla	r1, ip, r1, r2
 800f45c:	4604      	mov	r4, r0
 800f45e:	2301      	movs	r3, #1
 800f460:	e7f0      	b.n	800f444 <_vfiprintf_r+0x1b8>
 800f462:	ab03      	add	r3, sp, #12
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	462a      	mov	r2, r5
 800f468:	4b12      	ldr	r3, [pc, #72]	@ (800f4b4 <_vfiprintf_r+0x228>)
 800f46a:	a904      	add	r1, sp, #16
 800f46c:	4630      	mov	r0, r6
 800f46e:	f3af 8000 	nop.w
 800f472:	4607      	mov	r7, r0
 800f474:	1c78      	adds	r0, r7, #1
 800f476:	d1d6      	bne.n	800f426 <_vfiprintf_r+0x19a>
 800f478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f47a:	07d9      	lsls	r1, r3, #31
 800f47c:	d405      	bmi.n	800f48a <_vfiprintf_r+0x1fe>
 800f47e:	89ab      	ldrh	r3, [r5, #12]
 800f480:	059a      	lsls	r2, r3, #22
 800f482:	d402      	bmi.n	800f48a <_vfiprintf_r+0x1fe>
 800f484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f486:	f7ff fd25 	bl	800eed4 <__retarget_lock_release_recursive>
 800f48a:	89ab      	ldrh	r3, [r5, #12]
 800f48c:	065b      	lsls	r3, r3, #25
 800f48e:	f53f af1f 	bmi.w	800f2d0 <_vfiprintf_r+0x44>
 800f492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f494:	e71e      	b.n	800f2d4 <_vfiprintf_r+0x48>
 800f496:	ab03      	add	r3, sp, #12
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	462a      	mov	r2, r5
 800f49c:	4b05      	ldr	r3, [pc, #20]	@ (800f4b4 <_vfiprintf_r+0x228>)
 800f49e:	a904      	add	r1, sp, #16
 800f4a0:	4630      	mov	r0, r6
 800f4a2:	f000 f879 	bl	800f598 <_printf_i>
 800f4a6:	e7e4      	b.n	800f472 <_vfiprintf_r+0x1e6>
 800f4a8:	08010e50 	.word	0x08010e50
 800f4ac:	08010e5a 	.word	0x08010e5a
 800f4b0:	00000000 	.word	0x00000000
 800f4b4:	0800f267 	.word	0x0800f267
 800f4b8:	08010e56 	.word	0x08010e56

0800f4bc <_printf_common>:
 800f4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c0:	4616      	mov	r6, r2
 800f4c2:	4698      	mov	r8, r3
 800f4c4:	688a      	ldr	r2, [r1, #8]
 800f4c6:	690b      	ldr	r3, [r1, #16]
 800f4c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	bfb8      	it	lt
 800f4d0:	4613      	movlt	r3, r2
 800f4d2:	6033      	str	r3, [r6, #0]
 800f4d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4d8:	4607      	mov	r7, r0
 800f4da:	460c      	mov	r4, r1
 800f4dc:	b10a      	cbz	r2, 800f4e2 <_printf_common+0x26>
 800f4de:	3301      	adds	r3, #1
 800f4e0:	6033      	str	r3, [r6, #0]
 800f4e2:	6823      	ldr	r3, [r4, #0]
 800f4e4:	0699      	lsls	r1, r3, #26
 800f4e6:	bf42      	ittt	mi
 800f4e8:	6833      	ldrmi	r3, [r6, #0]
 800f4ea:	3302      	addmi	r3, #2
 800f4ec:	6033      	strmi	r3, [r6, #0]
 800f4ee:	6825      	ldr	r5, [r4, #0]
 800f4f0:	f015 0506 	ands.w	r5, r5, #6
 800f4f4:	d106      	bne.n	800f504 <_printf_common+0x48>
 800f4f6:	f104 0a19 	add.w	sl, r4, #25
 800f4fa:	68e3      	ldr	r3, [r4, #12]
 800f4fc:	6832      	ldr	r2, [r6, #0]
 800f4fe:	1a9b      	subs	r3, r3, r2
 800f500:	42ab      	cmp	r3, r5
 800f502:	dc26      	bgt.n	800f552 <_printf_common+0x96>
 800f504:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f508:	6822      	ldr	r2, [r4, #0]
 800f50a:	3b00      	subs	r3, #0
 800f50c:	bf18      	it	ne
 800f50e:	2301      	movne	r3, #1
 800f510:	0692      	lsls	r2, r2, #26
 800f512:	d42b      	bmi.n	800f56c <_printf_common+0xb0>
 800f514:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f518:	4641      	mov	r1, r8
 800f51a:	4638      	mov	r0, r7
 800f51c:	47c8      	blx	r9
 800f51e:	3001      	adds	r0, #1
 800f520:	d01e      	beq.n	800f560 <_printf_common+0xa4>
 800f522:	6823      	ldr	r3, [r4, #0]
 800f524:	6922      	ldr	r2, [r4, #16]
 800f526:	f003 0306 	and.w	r3, r3, #6
 800f52a:	2b04      	cmp	r3, #4
 800f52c:	bf02      	ittt	eq
 800f52e:	68e5      	ldreq	r5, [r4, #12]
 800f530:	6833      	ldreq	r3, [r6, #0]
 800f532:	1aed      	subeq	r5, r5, r3
 800f534:	68a3      	ldr	r3, [r4, #8]
 800f536:	bf0c      	ite	eq
 800f538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f53c:	2500      	movne	r5, #0
 800f53e:	4293      	cmp	r3, r2
 800f540:	bfc4      	itt	gt
 800f542:	1a9b      	subgt	r3, r3, r2
 800f544:	18ed      	addgt	r5, r5, r3
 800f546:	2600      	movs	r6, #0
 800f548:	341a      	adds	r4, #26
 800f54a:	42b5      	cmp	r5, r6
 800f54c:	d11a      	bne.n	800f584 <_printf_common+0xc8>
 800f54e:	2000      	movs	r0, #0
 800f550:	e008      	b.n	800f564 <_printf_common+0xa8>
 800f552:	2301      	movs	r3, #1
 800f554:	4652      	mov	r2, sl
 800f556:	4641      	mov	r1, r8
 800f558:	4638      	mov	r0, r7
 800f55a:	47c8      	blx	r9
 800f55c:	3001      	adds	r0, #1
 800f55e:	d103      	bne.n	800f568 <_printf_common+0xac>
 800f560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f568:	3501      	adds	r5, #1
 800f56a:	e7c6      	b.n	800f4fa <_printf_common+0x3e>
 800f56c:	18e1      	adds	r1, r4, r3
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	2030      	movs	r0, #48	@ 0x30
 800f572:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f576:	4422      	add	r2, r4
 800f578:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f57c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f580:	3302      	adds	r3, #2
 800f582:	e7c7      	b.n	800f514 <_printf_common+0x58>
 800f584:	2301      	movs	r3, #1
 800f586:	4622      	mov	r2, r4
 800f588:	4641      	mov	r1, r8
 800f58a:	4638      	mov	r0, r7
 800f58c:	47c8      	blx	r9
 800f58e:	3001      	adds	r0, #1
 800f590:	d0e6      	beq.n	800f560 <_printf_common+0xa4>
 800f592:	3601      	adds	r6, #1
 800f594:	e7d9      	b.n	800f54a <_printf_common+0x8e>
	...

0800f598 <_printf_i>:
 800f598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f59c:	7e0f      	ldrb	r7, [r1, #24]
 800f59e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5a0:	2f78      	cmp	r7, #120	@ 0x78
 800f5a2:	4691      	mov	r9, r2
 800f5a4:	4680      	mov	r8, r0
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	469a      	mov	sl, r3
 800f5aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f5ae:	d807      	bhi.n	800f5c0 <_printf_i+0x28>
 800f5b0:	2f62      	cmp	r7, #98	@ 0x62
 800f5b2:	d80a      	bhi.n	800f5ca <_printf_i+0x32>
 800f5b4:	2f00      	cmp	r7, #0
 800f5b6:	f000 80d2 	beq.w	800f75e <_printf_i+0x1c6>
 800f5ba:	2f58      	cmp	r7, #88	@ 0x58
 800f5bc:	f000 80b9 	beq.w	800f732 <_printf_i+0x19a>
 800f5c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5c8:	e03a      	b.n	800f640 <_printf_i+0xa8>
 800f5ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5ce:	2b15      	cmp	r3, #21
 800f5d0:	d8f6      	bhi.n	800f5c0 <_printf_i+0x28>
 800f5d2:	a101      	add	r1, pc, #4	@ (adr r1, 800f5d8 <_printf_i+0x40>)
 800f5d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5d8:	0800f631 	.word	0x0800f631
 800f5dc:	0800f645 	.word	0x0800f645
 800f5e0:	0800f5c1 	.word	0x0800f5c1
 800f5e4:	0800f5c1 	.word	0x0800f5c1
 800f5e8:	0800f5c1 	.word	0x0800f5c1
 800f5ec:	0800f5c1 	.word	0x0800f5c1
 800f5f0:	0800f645 	.word	0x0800f645
 800f5f4:	0800f5c1 	.word	0x0800f5c1
 800f5f8:	0800f5c1 	.word	0x0800f5c1
 800f5fc:	0800f5c1 	.word	0x0800f5c1
 800f600:	0800f5c1 	.word	0x0800f5c1
 800f604:	0800f745 	.word	0x0800f745
 800f608:	0800f66f 	.word	0x0800f66f
 800f60c:	0800f6ff 	.word	0x0800f6ff
 800f610:	0800f5c1 	.word	0x0800f5c1
 800f614:	0800f5c1 	.word	0x0800f5c1
 800f618:	0800f767 	.word	0x0800f767
 800f61c:	0800f5c1 	.word	0x0800f5c1
 800f620:	0800f66f 	.word	0x0800f66f
 800f624:	0800f5c1 	.word	0x0800f5c1
 800f628:	0800f5c1 	.word	0x0800f5c1
 800f62c:	0800f707 	.word	0x0800f707
 800f630:	6833      	ldr	r3, [r6, #0]
 800f632:	1d1a      	adds	r2, r3, #4
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	6032      	str	r2, [r6, #0]
 800f638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f63c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f640:	2301      	movs	r3, #1
 800f642:	e09d      	b.n	800f780 <_printf_i+0x1e8>
 800f644:	6833      	ldr	r3, [r6, #0]
 800f646:	6820      	ldr	r0, [r4, #0]
 800f648:	1d19      	adds	r1, r3, #4
 800f64a:	6031      	str	r1, [r6, #0]
 800f64c:	0606      	lsls	r6, r0, #24
 800f64e:	d501      	bpl.n	800f654 <_printf_i+0xbc>
 800f650:	681d      	ldr	r5, [r3, #0]
 800f652:	e003      	b.n	800f65c <_printf_i+0xc4>
 800f654:	0645      	lsls	r5, r0, #25
 800f656:	d5fb      	bpl.n	800f650 <_printf_i+0xb8>
 800f658:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f65c:	2d00      	cmp	r5, #0
 800f65e:	da03      	bge.n	800f668 <_printf_i+0xd0>
 800f660:	232d      	movs	r3, #45	@ 0x2d
 800f662:	426d      	negs	r5, r5
 800f664:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f668:	4859      	ldr	r0, [pc, #356]	@ (800f7d0 <_printf_i+0x238>)
 800f66a:	230a      	movs	r3, #10
 800f66c:	e011      	b.n	800f692 <_printf_i+0xfa>
 800f66e:	6821      	ldr	r1, [r4, #0]
 800f670:	6833      	ldr	r3, [r6, #0]
 800f672:	0608      	lsls	r0, r1, #24
 800f674:	f853 5b04 	ldr.w	r5, [r3], #4
 800f678:	d402      	bmi.n	800f680 <_printf_i+0xe8>
 800f67a:	0649      	lsls	r1, r1, #25
 800f67c:	bf48      	it	mi
 800f67e:	b2ad      	uxthmi	r5, r5
 800f680:	2f6f      	cmp	r7, #111	@ 0x6f
 800f682:	4853      	ldr	r0, [pc, #332]	@ (800f7d0 <_printf_i+0x238>)
 800f684:	6033      	str	r3, [r6, #0]
 800f686:	bf14      	ite	ne
 800f688:	230a      	movne	r3, #10
 800f68a:	2308      	moveq	r3, #8
 800f68c:	2100      	movs	r1, #0
 800f68e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f692:	6866      	ldr	r6, [r4, #4]
 800f694:	60a6      	str	r6, [r4, #8]
 800f696:	2e00      	cmp	r6, #0
 800f698:	bfa2      	ittt	ge
 800f69a:	6821      	ldrge	r1, [r4, #0]
 800f69c:	f021 0104 	bicge.w	r1, r1, #4
 800f6a0:	6021      	strge	r1, [r4, #0]
 800f6a2:	b90d      	cbnz	r5, 800f6a8 <_printf_i+0x110>
 800f6a4:	2e00      	cmp	r6, #0
 800f6a6:	d04b      	beq.n	800f740 <_printf_i+0x1a8>
 800f6a8:	4616      	mov	r6, r2
 800f6aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6ae:	fb03 5711 	mls	r7, r3, r1, r5
 800f6b2:	5dc7      	ldrb	r7, [r0, r7]
 800f6b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f6b8:	462f      	mov	r7, r5
 800f6ba:	42bb      	cmp	r3, r7
 800f6bc:	460d      	mov	r5, r1
 800f6be:	d9f4      	bls.n	800f6aa <_printf_i+0x112>
 800f6c0:	2b08      	cmp	r3, #8
 800f6c2:	d10b      	bne.n	800f6dc <_printf_i+0x144>
 800f6c4:	6823      	ldr	r3, [r4, #0]
 800f6c6:	07df      	lsls	r7, r3, #31
 800f6c8:	d508      	bpl.n	800f6dc <_printf_i+0x144>
 800f6ca:	6923      	ldr	r3, [r4, #16]
 800f6cc:	6861      	ldr	r1, [r4, #4]
 800f6ce:	4299      	cmp	r1, r3
 800f6d0:	bfde      	ittt	le
 800f6d2:	2330      	movle	r3, #48	@ 0x30
 800f6d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f6dc:	1b92      	subs	r2, r2, r6
 800f6de:	6122      	str	r2, [r4, #16]
 800f6e0:	f8cd a000 	str.w	sl, [sp]
 800f6e4:	464b      	mov	r3, r9
 800f6e6:	aa03      	add	r2, sp, #12
 800f6e8:	4621      	mov	r1, r4
 800f6ea:	4640      	mov	r0, r8
 800f6ec:	f7ff fee6 	bl	800f4bc <_printf_common>
 800f6f0:	3001      	adds	r0, #1
 800f6f2:	d14a      	bne.n	800f78a <_printf_i+0x1f2>
 800f6f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6f8:	b004      	add	sp, #16
 800f6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6fe:	6823      	ldr	r3, [r4, #0]
 800f700:	f043 0320 	orr.w	r3, r3, #32
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	4833      	ldr	r0, [pc, #204]	@ (800f7d4 <_printf_i+0x23c>)
 800f708:	2778      	movs	r7, #120	@ 0x78
 800f70a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	6831      	ldr	r1, [r6, #0]
 800f712:	061f      	lsls	r7, r3, #24
 800f714:	f851 5b04 	ldr.w	r5, [r1], #4
 800f718:	d402      	bmi.n	800f720 <_printf_i+0x188>
 800f71a:	065f      	lsls	r7, r3, #25
 800f71c:	bf48      	it	mi
 800f71e:	b2ad      	uxthmi	r5, r5
 800f720:	6031      	str	r1, [r6, #0]
 800f722:	07d9      	lsls	r1, r3, #31
 800f724:	bf44      	itt	mi
 800f726:	f043 0320 	orrmi.w	r3, r3, #32
 800f72a:	6023      	strmi	r3, [r4, #0]
 800f72c:	b11d      	cbz	r5, 800f736 <_printf_i+0x19e>
 800f72e:	2310      	movs	r3, #16
 800f730:	e7ac      	b.n	800f68c <_printf_i+0xf4>
 800f732:	4827      	ldr	r0, [pc, #156]	@ (800f7d0 <_printf_i+0x238>)
 800f734:	e7e9      	b.n	800f70a <_printf_i+0x172>
 800f736:	6823      	ldr	r3, [r4, #0]
 800f738:	f023 0320 	bic.w	r3, r3, #32
 800f73c:	6023      	str	r3, [r4, #0]
 800f73e:	e7f6      	b.n	800f72e <_printf_i+0x196>
 800f740:	4616      	mov	r6, r2
 800f742:	e7bd      	b.n	800f6c0 <_printf_i+0x128>
 800f744:	6833      	ldr	r3, [r6, #0]
 800f746:	6825      	ldr	r5, [r4, #0]
 800f748:	6961      	ldr	r1, [r4, #20]
 800f74a:	1d18      	adds	r0, r3, #4
 800f74c:	6030      	str	r0, [r6, #0]
 800f74e:	062e      	lsls	r6, r5, #24
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	d501      	bpl.n	800f758 <_printf_i+0x1c0>
 800f754:	6019      	str	r1, [r3, #0]
 800f756:	e002      	b.n	800f75e <_printf_i+0x1c6>
 800f758:	0668      	lsls	r0, r5, #25
 800f75a:	d5fb      	bpl.n	800f754 <_printf_i+0x1bc>
 800f75c:	8019      	strh	r1, [r3, #0]
 800f75e:	2300      	movs	r3, #0
 800f760:	6123      	str	r3, [r4, #16]
 800f762:	4616      	mov	r6, r2
 800f764:	e7bc      	b.n	800f6e0 <_printf_i+0x148>
 800f766:	6833      	ldr	r3, [r6, #0]
 800f768:	1d1a      	adds	r2, r3, #4
 800f76a:	6032      	str	r2, [r6, #0]
 800f76c:	681e      	ldr	r6, [r3, #0]
 800f76e:	6862      	ldr	r2, [r4, #4]
 800f770:	2100      	movs	r1, #0
 800f772:	4630      	mov	r0, r6
 800f774:	f7f0 fd3c 	bl	80001f0 <memchr>
 800f778:	b108      	cbz	r0, 800f77e <_printf_i+0x1e6>
 800f77a:	1b80      	subs	r0, r0, r6
 800f77c:	6060      	str	r0, [r4, #4]
 800f77e:	6863      	ldr	r3, [r4, #4]
 800f780:	6123      	str	r3, [r4, #16]
 800f782:	2300      	movs	r3, #0
 800f784:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f788:	e7aa      	b.n	800f6e0 <_printf_i+0x148>
 800f78a:	6923      	ldr	r3, [r4, #16]
 800f78c:	4632      	mov	r2, r6
 800f78e:	4649      	mov	r1, r9
 800f790:	4640      	mov	r0, r8
 800f792:	47d0      	blx	sl
 800f794:	3001      	adds	r0, #1
 800f796:	d0ad      	beq.n	800f6f4 <_printf_i+0x15c>
 800f798:	6823      	ldr	r3, [r4, #0]
 800f79a:	079b      	lsls	r3, r3, #30
 800f79c:	d413      	bmi.n	800f7c6 <_printf_i+0x22e>
 800f79e:	68e0      	ldr	r0, [r4, #12]
 800f7a0:	9b03      	ldr	r3, [sp, #12]
 800f7a2:	4298      	cmp	r0, r3
 800f7a4:	bfb8      	it	lt
 800f7a6:	4618      	movlt	r0, r3
 800f7a8:	e7a6      	b.n	800f6f8 <_printf_i+0x160>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4632      	mov	r2, r6
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	4640      	mov	r0, r8
 800f7b2:	47d0      	blx	sl
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d09d      	beq.n	800f6f4 <_printf_i+0x15c>
 800f7b8:	3501      	adds	r5, #1
 800f7ba:	68e3      	ldr	r3, [r4, #12]
 800f7bc:	9903      	ldr	r1, [sp, #12]
 800f7be:	1a5b      	subs	r3, r3, r1
 800f7c0:	42ab      	cmp	r3, r5
 800f7c2:	dcf2      	bgt.n	800f7aa <_printf_i+0x212>
 800f7c4:	e7eb      	b.n	800f79e <_printf_i+0x206>
 800f7c6:	2500      	movs	r5, #0
 800f7c8:	f104 0619 	add.w	r6, r4, #25
 800f7cc:	e7f5      	b.n	800f7ba <_printf_i+0x222>
 800f7ce:	bf00      	nop
 800f7d0:	08010e61 	.word	0x08010e61
 800f7d4:	08010e72 	.word	0x08010e72

0800f7d8 <__sflush_r>:
 800f7d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e0:	0716      	lsls	r6, r2, #28
 800f7e2:	4605      	mov	r5, r0
 800f7e4:	460c      	mov	r4, r1
 800f7e6:	d454      	bmi.n	800f892 <__sflush_r+0xba>
 800f7e8:	684b      	ldr	r3, [r1, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	dc02      	bgt.n	800f7f4 <__sflush_r+0x1c>
 800f7ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	dd48      	ble.n	800f886 <__sflush_r+0xae>
 800f7f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7f6:	2e00      	cmp	r6, #0
 800f7f8:	d045      	beq.n	800f886 <__sflush_r+0xae>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f800:	682f      	ldr	r7, [r5, #0]
 800f802:	6a21      	ldr	r1, [r4, #32]
 800f804:	602b      	str	r3, [r5, #0]
 800f806:	d030      	beq.n	800f86a <__sflush_r+0x92>
 800f808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f80a:	89a3      	ldrh	r3, [r4, #12]
 800f80c:	0759      	lsls	r1, r3, #29
 800f80e:	d505      	bpl.n	800f81c <__sflush_r+0x44>
 800f810:	6863      	ldr	r3, [r4, #4]
 800f812:	1ad2      	subs	r2, r2, r3
 800f814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f816:	b10b      	cbz	r3, 800f81c <__sflush_r+0x44>
 800f818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f81a:	1ad2      	subs	r2, r2, r3
 800f81c:	2300      	movs	r3, #0
 800f81e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f820:	6a21      	ldr	r1, [r4, #32]
 800f822:	4628      	mov	r0, r5
 800f824:	47b0      	blx	r6
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	d106      	bne.n	800f83a <__sflush_r+0x62>
 800f82c:	6829      	ldr	r1, [r5, #0]
 800f82e:	291d      	cmp	r1, #29
 800f830:	d82b      	bhi.n	800f88a <__sflush_r+0xb2>
 800f832:	4a2a      	ldr	r2, [pc, #168]	@ (800f8dc <__sflush_r+0x104>)
 800f834:	410a      	asrs	r2, r1
 800f836:	07d6      	lsls	r6, r2, #31
 800f838:	d427      	bmi.n	800f88a <__sflush_r+0xb2>
 800f83a:	2200      	movs	r2, #0
 800f83c:	6062      	str	r2, [r4, #4]
 800f83e:	04d9      	lsls	r1, r3, #19
 800f840:	6922      	ldr	r2, [r4, #16]
 800f842:	6022      	str	r2, [r4, #0]
 800f844:	d504      	bpl.n	800f850 <__sflush_r+0x78>
 800f846:	1c42      	adds	r2, r0, #1
 800f848:	d101      	bne.n	800f84e <__sflush_r+0x76>
 800f84a:	682b      	ldr	r3, [r5, #0]
 800f84c:	b903      	cbnz	r3, 800f850 <__sflush_r+0x78>
 800f84e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f852:	602f      	str	r7, [r5, #0]
 800f854:	b1b9      	cbz	r1, 800f886 <__sflush_r+0xae>
 800f856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f85a:	4299      	cmp	r1, r3
 800f85c:	d002      	beq.n	800f864 <__sflush_r+0x8c>
 800f85e:	4628      	mov	r0, r5
 800f860:	f7ff fb48 	bl	800eef4 <_free_r>
 800f864:	2300      	movs	r3, #0
 800f866:	6363      	str	r3, [r4, #52]	@ 0x34
 800f868:	e00d      	b.n	800f886 <__sflush_r+0xae>
 800f86a:	2301      	movs	r3, #1
 800f86c:	4628      	mov	r0, r5
 800f86e:	47b0      	blx	r6
 800f870:	4602      	mov	r2, r0
 800f872:	1c50      	adds	r0, r2, #1
 800f874:	d1c9      	bne.n	800f80a <__sflush_r+0x32>
 800f876:	682b      	ldr	r3, [r5, #0]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d0c6      	beq.n	800f80a <__sflush_r+0x32>
 800f87c:	2b1d      	cmp	r3, #29
 800f87e:	d001      	beq.n	800f884 <__sflush_r+0xac>
 800f880:	2b16      	cmp	r3, #22
 800f882:	d11e      	bne.n	800f8c2 <__sflush_r+0xea>
 800f884:	602f      	str	r7, [r5, #0]
 800f886:	2000      	movs	r0, #0
 800f888:	e022      	b.n	800f8d0 <__sflush_r+0xf8>
 800f88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f88e:	b21b      	sxth	r3, r3
 800f890:	e01b      	b.n	800f8ca <__sflush_r+0xf2>
 800f892:	690f      	ldr	r7, [r1, #16]
 800f894:	2f00      	cmp	r7, #0
 800f896:	d0f6      	beq.n	800f886 <__sflush_r+0xae>
 800f898:	0793      	lsls	r3, r2, #30
 800f89a:	680e      	ldr	r6, [r1, #0]
 800f89c:	bf08      	it	eq
 800f89e:	694b      	ldreq	r3, [r1, #20]
 800f8a0:	600f      	str	r7, [r1, #0]
 800f8a2:	bf18      	it	ne
 800f8a4:	2300      	movne	r3, #0
 800f8a6:	eba6 0807 	sub.w	r8, r6, r7
 800f8aa:	608b      	str	r3, [r1, #8]
 800f8ac:	f1b8 0f00 	cmp.w	r8, #0
 800f8b0:	dde9      	ble.n	800f886 <__sflush_r+0xae>
 800f8b2:	6a21      	ldr	r1, [r4, #32]
 800f8b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f8b6:	4643      	mov	r3, r8
 800f8b8:	463a      	mov	r2, r7
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	47b0      	blx	r6
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	dc08      	bgt.n	800f8d4 <__sflush_r+0xfc>
 800f8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ca:	81a3      	strh	r3, [r4, #12]
 800f8cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d4:	4407      	add	r7, r0
 800f8d6:	eba8 0800 	sub.w	r8, r8, r0
 800f8da:	e7e7      	b.n	800f8ac <__sflush_r+0xd4>
 800f8dc:	dfbffffe 	.word	0xdfbffffe

0800f8e0 <_fflush_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	690b      	ldr	r3, [r1, #16]
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	460c      	mov	r4, r1
 800f8e8:	b913      	cbnz	r3, 800f8f0 <_fflush_r+0x10>
 800f8ea:	2500      	movs	r5, #0
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	bd38      	pop	{r3, r4, r5, pc}
 800f8f0:	b118      	cbz	r0, 800f8fa <_fflush_r+0x1a>
 800f8f2:	6a03      	ldr	r3, [r0, #32]
 800f8f4:	b90b      	cbnz	r3, 800f8fa <_fflush_r+0x1a>
 800f8f6:	f7ff f9e3 	bl	800ecc0 <__sinit>
 800f8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d0f3      	beq.n	800f8ea <_fflush_r+0xa>
 800f902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f904:	07d0      	lsls	r0, r2, #31
 800f906:	d404      	bmi.n	800f912 <_fflush_r+0x32>
 800f908:	0599      	lsls	r1, r3, #22
 800f90a:	d402      	bmi.n	800f912 <_fflush_r+0x32>
 800f90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f90e:	f7ff fae0 	bl	800eed2 <__retarget_lock_acquire_recursive>
 800f912:	4628      	mov	r0, r5
 800f914:	4621      	mov	r1, r4
 800f916:	f7ff ff5f 	bl	800f7d8 <__sflush_r>
 800f91a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f91c:	07da      	lsls	r2, r3, #31
 800f91e:	4605      	mov	r5, r0
 800f920:	d4e4      	bmi.n	800f8ec <_fflush_r+0xc>
 800f922:	89a3      	ldrh	r3, [r4, #12]
 800f924:	059b      	lsls	r3, r3, #22
 800f926:	d4e1      	bmi.n	800f8ec <_fflush_r+0xc>
 800f928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f92a:	f7ff fad3 	bl	800eed4 <__retarget_lock_release_recursive>
 800f92e:	e7dd      	b.n	800f8ec <_fflush_r+0xc>

0800f930 <__sread>:
 800f930:	b510      	push	{r4, lr}
 800f932:	460c      	mov	r4, r1
 800f934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f938:	f000 f9c0 	bl	800fcbc <_read_r>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	bfab      	itete	ge
 800f940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f942:	89a3      	ldrhlt	r3, [r4, #12]
 800f944:	181b      	addge	r3, r3, r0
 800f946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f94a:	bfac      	ite	ge
 800f94c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f94e:	81a3      	strhlt	r3, [r4, #12]
 800f950:	bd10      	pop	{r4, pc}

0800f952 <__swrite>:
 800f952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f956:	461f      	mov	r7, r3
 800f958:	898b      	ldrh	r3, [r1, #12]
 800f95a:	05db      	lsls	r3, r3, #23
 800f95c:	4605      	mov	r5, r0
 800f95e:	460c      	mov	r4, r1
 800f960:	4616      	mov	r6, r2
 800f962:	d505      	bpl.n	800f970 <__swrite+0x1e>
 800f964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f968:	2302      	movs	r3, #2
 800f96a:	2200      	movs	r2, #0
 800f96c:	f000 f994 	bl	800fc98 <_lseek_r>
 800f970:	89a3      	ldrh	r3, [r4, #12]
 800f972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f97a:	81a3      	strh	r3, [r4, #12]
 800f97c:	4632      	mov	r2, r6
 800f97e:	463b      	mov	r3, r7
 800f980:	4628      	mov	r0, r5
 800f982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f986:	f000 b9ab 	b.w	800fce0 <_write_r>

0800f98a <__sseek>:
 800f98a:	b510      	push	{r4, lr}
 800f98c:	460c      	mov	r4, r1
 800f98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f992:	f000 f981 	bl	800fc98 <_lseek_r>
 800f996:	1c43      	adds	r3, r0, #1
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	bf15      	itete	ne
 800f99c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f99e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f9a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f9a6:	81a3      	strheq	r3, [r4, #12]
 800f9a8:	bf18      	it	ne
 800f9aa:	81a3      	strhne	r3, [r4, #12]
 800f9ac:	bd10      	pop	{r4, pc}

0800f9ae <__sclose>:
 800f9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b2:	f000 b93f 	b.w	800fc34 <_close_r>

0800f9b6 <_realloc_r>:
 800f9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ba:	4680      	mov	r8, r0
 800f9bc:	4615      	mov	r5, r2
 800f9be:	460c      	mov	r4, r1
 800f9c0:	b921      	cbnz	r1, 800f9cc <_realloc_r+0x16>
 800f9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	f7ff b842 	b.w	800ea50 <_malloc_r>
 800f9cc:	b92a      	cbnz	r2, 800f9da <_realloc_r+0x24>
 800f9ce:	f7ff fa91 	bl	800eef4 <_free_r>
 800f9d2:	2400      	movs	r4, #0
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9da:	f000 f993 	bl	800fd04 <_malloc_usable_size_r>
 800f9de:	4285      	cmp	r5, r0
 800f9e0:	4606      	mov	r6, r0
 800f9e2:	d802      	bhi.n	800f9ea <_realloc_r+0x34>
 800f9e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9e8:	d8f4      	bhi.n	800f9d4 <_realloc_r+0x1e>
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	4640      	mov	r0, r8
 800f9ee:	f7ff f82f 	bl	800ea50 <_malloc_r>
 800f9f2:	4607      	mov	r7, r0
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d0ec      	beq.n	800f9d2 <_realloc_r+0x1c>
 800f9f8:	42b5      	cmp	r5, r6
 800f9fa:	462a      	mov	r2, r5
 800f9fc:	4621      	mov	r1, r4
 800f9fe:	bf28      	it	cs
 800fa00:	4632      	movcs	r2, r6
 800fa02:	f7ff fa68 	bl	800eed6 <memcpy>
 800fa06:	4621      	mov	r1, r4
 800fa08:	4640      	mov	r0, r8
 800fa0a:	f7ff fa73 	bl	800eef4 <_free_r>
 800fa0e:	463c      	mov	r4, r7
 800fa10:	e7e0      	b.n	800f9d4 <_realloc_r+0x1e>

0800fa12 <__swbuf_r>:
 800fa12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa14:	460e      	mov	r6, r1
 800fa16:	4614      	mov	r4, r2
 800fa18:	4605      	mov	r5, r0
 800fa1a:	b118      	cbz	r0, 800fa24 <__swbuf_r+0x12>
 800fa1c:	6a03      	ldr	r3, [r0, #32]
 800fa1e:	b90b      	cbnz	r3, 800fa24 <__swbuf_r+0x12>
 800fa20:	f7ff f94e 	bl	800ecc0 <__sinit>
 800fa24:	69a3      	ldr	r3, [r4, #24]
 800fa26:	60a3      	str	r3, [r4, #8]
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	071a      	lsls	r2, r3, #28
 800fa2c:	d501      	bpl.n	800fa32 <__swbuf_r+0x20>
 800fa2e:	6923      	ldr	r3, [r4, #16]
 800fa30:	b943      	cbnz	r3, 800fa44 <__swbuf_r+0x32>
 800fa32:	4621      	mov	r1, r4
 800fa34:	4628      	mov	r0, r5
 800fa36:	f000 f82b 	bl	800fa90 <__swsetup_r>
 800fa3a:	b118      	cbz	r0, 800fa44 <__swbuf_r+0x32>
 800fa3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fa40:	4638      	mov	r0, r7
 800fa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa44:	6823      	ldr	r3, [r4, #0]
 800fa46:	6922      	ldr	r2, [r4, #16]
 800fa48:	1a98      	subs	r0, r3, r2
 800fa4a:	6963      	ldr	r3, [r4, #20]
 800fa4c:	b2f6      	uxtb	r6, r6
 800fa4e:	4283      	cmp	r3, r0
 800fa50:	4637      	mov	r7, r6
 800fa52:	dc05      	bgt.n	800fa60 <__swbuf_r+0x4e>
 800fa54:	4621      	mov	r1, r4
 800fa56:	4628      	mov	r0, r5
 800fa58:	f7ff ff42 	bl	800f8e0 <_fflush_r>
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d1ed      	bne.n	800fa3c <__swbuf_r+0x2a>
 800fa60:	68a3      	ldr	r3, [r4, #8]
 800fa62:	3b01      	subs	r3, #1
 800fa64:	60a3      	str	r3, [r4, #8]
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	1c5a      	adds	r2, r3, #1
 800fa6a:	6022      	str	r2, [r4, #0]
 800fa6c:	701e      	strb	r6, [r3, #0]
 800fa6e:	6962      	ldr	r2, [r4, #20]
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d004      	beq.n	800fa80 <__swbuf_r+0x6e>
 800fa76:	89a3      	ldrh	r3, [r4, #12]
 800fa78:	07db      	lsls	r3, r3, #31
 800fa7a:	d5e1      	bpl.n	800fa40 <__swbuf_r+0x2e>
 800fa7c:	2e0a      	cmp	r6, #10
 800fa7e:	d1df      	bne.n	800fa40 <__swbuf_r+0x2e>
 800fa80:	4621      	mov	r1, r4
 800fa82:	4628      	mov	r0, r5
 800fa84:	f7ff ff2c 	bl	800f8e0 <_fflush_r>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	d0d9      	beq.n	800fa40 <__swbuf_r+0x2e>
 800fa8c:	e7d6      	b.n	800fa3c <__swbuf_r+0x2a>
	...

0800fa90 <__swsetup_r>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	4b29      	ldr	r3, [pc, #164]	@ (800fb38 <__swsetup_r+0xa8>)
 800fa94:	4605      	mov	r5, r0
 800fa96:	6818      	ldr	r0, [r3, #0]
 800fa98:	460c      	mov	r4, r1
 800fa9a:	b118      	cbz	r0, 800faa4 <__swsetup_r+0x14>
 800fa9c:	6a03      	ldr	r3, [r0, #32]
 800fa9e:	b90b      	cbnz	r3, 800faa4 <__swsetup_r+0x14>
 800faa0:	f7ff f90e 	bl	800ecc0 <__sinit>
 800faa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faa8:	0719      	lsls	r1, r3, #28
 800faaa:	d422      	bmi.n	800faf2 <__swsetup_r+0x62>
 800faac:	06da      	lsls	r2, r3, #27
 800faae:	d407      	bmi.n	800fac0 <__swsetup_r+0x30>
 800fab0:	2209      	movs	r2, #9
 800fab2:	602a      	str	r2, [r5, #0]
 800fab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fab8:	81a3      	strh	r3, [r4, #12]
 800faba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fabe:	e033      	b.n	800fb28 <__swsetup_r+0x98>
 800fac0:	0758      	lsls	r0, r3, #29
 800fac2:	d512      	bpl.n	800faea <__swsetup_r+0x5a>
 800fac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fac6:	b141      	cbz	r1, 800fada <__swsetup_r+0x4a>
 800fac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800facc:	4299      	cmp	r1, r3
 800face:	d002      	beq.n	800fad6 <__swsetup_r+0x46>
 800fad0:	4628      	mov	r0, r5
 800fad2:	f7ff fa0f 	bl	800eef4 <_free_r>
 800fad6:	2300      	movs	r3, #0
 800fad8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fada:	89a3      	ldrh	r3, [r4, #12]
 800fadc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fae0:	81a3      	strh	r3, [r4, #12]
 800fae2:	2300      	movs	r3, #0
 800fae4:	6063      	str	r3, [r4, #4]
 800fae6:	6923      	ldr	r3, [r4, #16]
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	f043 0308 	orr.w	r3, r3, #8
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	6923      	ldr	r3, [r4, #16]
 800faf4:	b94b      	cbnz	r3, 800fb0a <__swsetup_r+0x7a>
 800faf6:	89a3      	ldrh	r3, [r4, #12]
 800faf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fafc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb00:	d003      	beq.n	800fb0a <__swsetup_r+0x7a>
 800fb02:	4621      	mov	r1, r4
 800fb04:	4628      	mov	r0, r5
 800fb06:	f000 f83f 	bl	800fb88 <__smakebuf_r>
 800fb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb0e:	f013 0201 	ands.w	r2, r3, #1
 800fb12:	d00a      	beq.n	800fb2a <__swsetup_r+0x9a>
 800fb14:	2200      	movs	r2, #0
 800fb16:	60a2      	str	r2, [r4, #8]
 800fb18:	6962      	ldr	r2, [r4, #20]
 800fb1a:	4252      	negs	r2, r2
 800fb1c:	61a2      	str	r2, [r4, #24]
 800fb1e:	6922      	ldr	r2, [r4, #16]
 800fb20:	b942      	cbnz	r2, 800fb34 <__swsetup_r+0xa4>
 800fb22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb26:	d1c5      	bne.n	800fab4 <__swsetup_r+0x24>
 800fb28:	bd38      	pop	{r3, r4, r5, pc}
 800fb2a:	0799      	lsls	r1, r3, #30
 800fb2c:	bf58      	it	pl
 800fb2e:	6962      	ldrpl	r2, [r4, #20]
 800fb30:	60a2      	str	r2, [r4, #8]
 800fb32:	e7f4      	b.n	800fb1e <__swsetup_r+0x8e>
 800fb34:	2000      	movs	r0, #0
 800fb36:	e7f7      	b.n	800fb28 <__swsetup_r+0x98>
 800fb38:	2000056c 	.word	0x2000056c

0800fb3c <__swhatbuf_r>:
 800fb3c:	b570      	push	{r4, r5, r6, lr}
 800fb3e:	460c      	mov	r4, r1
 800fb40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb44:	2900      	cmp	r1, #0
 800fb46:	b096      	sub	sp, #88	@ 0x58
 800fb48:	4615      	mov	r5, r2
 800fb4a:	461e      	mov	r6, r3
 800fb4c:	da0d      	bge.n	800fb6a <__swhatbuf_r+0x2e>
 800fb4e:	89a3      	ldrh	r3, [r4, #12]
 800fb50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb54:	f04f 0100 	mov.w	r1, #0
 800fb58:	bf14      	ite	ne
 800fb5a:	2340      	movne	r3, #64	@ 0x40
 800fb5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb60:	2000      	movs	r0, #0
 800fb62:	6031      	str	r1, [r6, #0]
 800fb64:	602b      	str	r3, [r5, #0]
 800fb66:	b016      	add	sp, #88	@ 0x58
 800fb68:	bd70      	pop	{r4, r5, r6, pc}
 800fb6a:	466a      	mov	r2, sp
 800fb6c:	f000 f872 	bl	800fc54 <_fstat_r>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	dbec      	blt.n	800fb4e <__swhatbuf_r+0x12>
 800fb74:	9901      	ldr	r1, [sp, #4]
 800fb76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb7e:	4259      	negs	r1, r3
 800fb80:	4159      	adcs	r1, r3
 800fb82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb86:	e7eb      	b.n	800fb60 <__swhatbuf_r+0x24>

0800fb88 <__smakebuf_r>:
 800fb88:	898b      	ldrh	r3, [r1, #12]
 800fb8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb8c:	079d      	lsls	r5, r3, #30
 800fb8e:	4606      	mov	r6, r0
 800fb90:	460c      	mov	r4, r1
 800fb92:	d507      	bpl.n	800fba4 <__smakebuf_r+0x1c>
 800fb94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	6123      	str	r3, [r4, #16]
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	6163      	str	r3, [r4, #20]
 800fba0:	b003      	add	sp, #12
 800fba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fba4:	ab01      	add	r3, sp, #4
 800fba6:	466a      	mov	r2, sp
 800fba8:	f7ff ffc8 	bl	800fb3c <__swhatbuf_r>
 800fbac:	9f00      	ldr	r7, [sp, #0]
 800fbae:	4605      	mov	r5, r0
 800fbb0:	4639      	mov	r1, r7
 800fbb2:	4630      	mov	r0, r6
 800fbb4:	f7fe ff4c 	bl	800ea50 <_malloc_r>
 800fbb8:	b948      	cbnz	r0, 800fbce <__smakebuf_r+0x46>
 800fbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbbe:	059a      	lsls	r2, r3, #22
 800fbc0:	d4ee      	bmi.n	800fba0 <__smakebuf_r+0x18>
 800fbc2:	f023 0303 	bic.w	r3, r3, #3
 800fbc6:	f043 0302 	orr.w	r3, r3, #2
 800fbca:	81a3      	strh	r3, [r4, #12]
 800fbcc:	e7e2      	b.n	800fb94 <__smakebuf_r+0xc>
 800fbce:	89a3      	ldrh	r3, [r4, #12]
 800fbd0:	6020      	str	r0, [r4, #0]
 800fbd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbd6:	81a3      	strh	r3, [r4, #12]
 800fbd8:	9b01      	ldr	r3, [sp, #4]
 800fbda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fbde:	b15b      	cbz	r3, 800fbf8 <__smakebuf_r+0x70>
 800fbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	f000 f847 	bl	800fc78 <_isatty_r>
 800fbea:	b128      	cbz	r0, 800fbf8 <__smakebuf_r+0x70>
 800fbec:	89a3      	ldrh	r3, [r4, #12]
 800fbee:	f023 0303 	bic.w	r3, r3, #3
 800fbf2:	f043 0301 	orr.w	r3, r3, #1
 800fbf6:	81a3      	strh	r3, [r4, #12]
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	431d      	orrs	r5, r3
 800fbfc:	81a5      	strh	r5, [r4, #12]
 800fbfe:	e7cf      	b.n	800fba0 <__smakebuf_r+0x18>

0800fc00 <memmove>:
 800fc00:	4288      	cmp	r0, r1
 800fc02:	b510      	push	{r4, lr}
 800fc04:	eb01 0402 	add.w	r4, r1, r2
 800fc08:	d902      	bls.n	800fc10 <memmove+0x10>
 800fc0a:	4284      	cmp	r4, r0
 800fc0c:	4623      	mov	r3, r4
 800fc0e:	d807      	bhi.n	800fc20 <memmove+0x20>
 800fc10:	1e43      	subs	r3, r0, #1
 800fc12:	42a1      	cmp	r1, r4
 800fc14:	d008      	beq.n	800fc28 <memmove+0x28>
 800fc16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc1e:	e7f8      	b.n	800fc12 <memmove+0x12>
 800fc20:	4402      	add	r2, r0
 800fc22:	4601      	mov	r1, r0
 800fc24:	428a      	cmp	r2, r1
 800fc26:	d100      	bne.n	800fc2a <memmove+0x2a>
 800fc28:	bd10      	pop	{r4, pc}
 800fc2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc32:	e7f7      	b.n	800fc24 <memmove+0x24>

0800fc34 <_close_r>:
 800fc34:	b538      	push	{r3, r4, r5, lr}
 800fc36:	4d06      	ldr	r5, [pc, #24]	@ (800fc50 <_close_r+0x1c>)
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	4608      	mov	r0, r1
 800fc3e:	602b      	str	r3, [r5, #0]
 800fc40:	f7f9 fb03 	bl	800924a <_close>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_close_r+0x1a>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_close_r+0x1a>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	20000f24 	.word	0x20000f24

0800fc54 <_fstat_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4d07      	ldr	r5, [pc, #28]	@ (800fc74 <_fstat_r+0x20>)
 800fc58:	2300      	movs	r3, #0
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	4608      	mov	r0, r1
 800fc5e:	4611      	mov	r1, r2
 800fc60:	602b      	str	r3, [r5, #0]
 800fc62:	f7f9 fafe 	bl	8009262 <_fstat>
 800fc66:	1c43      	adds	r3, r0, #1
 800fc68:	d102      	bne.n	800fc70 <_fstat_r+0x1c>
 800fc6a:	682b      	ldr	r3, [r5, #0]
 800fc6c:	b103      	cbz	r3, 800fc70 <_fstat_r+0x1c>
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	bd38      	pop	{r3, r4, r5, pc}
 800fc72:	bf00      	nop
 800fc74:	20000f24 	.word	0x20000f24

0800fc78 <_isatty_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4d06      	ldr	r5, [pc, #24]	@ (800fc94 <_isatty_r+0x1c>)
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4604      	mov	r4, r0
 800fc80:	4608      	mov	r0, r1
 800fc82:	602b      	str	r3, [r5, #0]
 800fc84:	f7f9 fafd 	bl	8009282 <_isatty>
 800fc88:	1c43      	adds	r3, r0, #1
 800fc8a:	d102      	bne.n	800fc92 <_isatty_r+0x1a>
 800fc8c:	682b      	ldr	r3, [r5, #0]
 800fc8e:	b103      	cbz	r3, 800fc92 <_isatty_r+0x1a>
 800fc90:	6023      	str	r3, [r4, #0]
 800fc92:	bd38      	pop	{r3, r4, r5, pc}
 800fc94:	20000f24 	.word	0x20000f24

0800fc98 <_lseek_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4d07      	ldr	r5, [pc, #28]	@ (800fcb8 <_lseek_r+0x20>)
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	4608      	mov	r0, r1
 800fca0:	4611      	mov	r1, r2
 800fca2:	2200      	movs	r2, #0
 800fca4:	602a      	str	r2, [r5, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	f7f9 faf6 	bl	8009298 <_lseek>
 800fcac:	1c43      	adds	r3, r0, #1
 800fcae:	d102      	bne.n	800fcb6 <_lseek_r+0x1e>
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	b103      	cbz	r3, 800fcb6 <_lseek_r+0x1e>
 800fcb4:	6023      	str	r3, [r4, #0]
 800fcb6:	bd38      	pop	{r3, r4, r5, pc}
 800fcb8:	20000f24 	.word	0x20000f24

0800fcbc <_read_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d07      	ldr	r5, [pc, #28]	@ (800fcdc <_read_r+0x20>)
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	4608      	mov	r0, r1
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	602a      	str	r2, [r5, #0]
 800fcca:	461a      	mov	r2, r3
 800fccc:	f7f9 fa84 	bl	80091d8 <_read>
 800fcd0:	1c43      	adds	r3, r0, #1
 800fcd2:	d102      	bne.n	800fcda <_read_r+0x1e>
 800fcd4:	682b      	ldr	r3, [r5, #0]
 800fcd6:	b103      	cbz	r3, 800fcda <_read_r+0x1e>
 800fcd8:	6023      	str	r3, [r4, #0]
 800fcda:	bd38      	pop	{r3, r4, r5, pc}
 800fcdc:	20000f24 	.word	0x20000f24

0800fce0 <_write_r>:
 800fce0:	b538      	push	{r3, r4, r5, lr}
 800fce2:	4d07      	ldr	r5, [pc, #28]	@ (800fd00 <_write_r+0x20>)
 800fce4:	4604      	mov	r4, r0
 800fce6:	4608      	mov	r0, r1
 800fce8:	4611      	mov	r1, r2
 800fcea:	2200      	movs	r2, #0
 800fcec:	602a      	str	r2, [r5, #0]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	f7f9 fa8f 	bl	8009212 <_write>
 800fcf4:	1c43      	adds	r3, r0, #1
 800fcf6:	d102      	bne.n	800fcfe <_write_r+0x1e>
 800fcf8:	682b      	ldr	r3, [r5, #0]
 800fcfa:	b103      	cbz	r3, 800fcfe <_write_r+0x1e>
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	20000f24 	.word	0x20000f24

0800fd04 <_malloc_usable_size_r>:
 800fd04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd08:	1f18      	subs	r0, r3, #4
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	bfbc      	itt	lt
 800fd0e:	580b      	ldrlt	r3, [r1, r0]
 800fd10:	18c0      	addlt	r0, r0, r3
 800fd12:	4770      	bx	lr

0800fd14 <_init>:
 800fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd16:	bf00      	nop
 800fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd1a:	bc08      	pop	{r3}
 800fd1c:	469e      	mov	lr, r3
 800fd1e:	4770      	bx	lr

0800fd20 <_fini>:
 800fd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd22:	bf00      	nop
 800fd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd26:	bc08      	pop	{r3}
 800fd28:	469e      	mov	lr, r3
 800fd2a:	4770      	bx	lr
